
Zagatovka_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d460  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000071a8  0801d5f0  0801d5f0  0002d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024798  08024798  0004050c  2**0
                  CONTENTS
  4 .ARM          00000008  08024798  08024798  00034798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080247a0  080247a0  0004050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080247a0  080247a0  000347a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080247a4  080247a4  000347a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000050c  20000000  080247a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004050c  2**0
                  CONTENTS
 10 .bss          00014a88  2000050c  2000050c  0004050c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014f94  20014f94  0004050c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004050c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00058b2a  00000000  00000000  0004053c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a3df  00000000  00000000  00099066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002be8  00000000  00000000  000a3448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029e8  00000000  00000000  000a6030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000158c0  00000000  00000000  000a8a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000443dd  00000000  00000000  000be2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9fec  00000000  00000000  001026b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001fc6a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c1a8  00000000  00000000  001fc6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000050c 	.word	0x2000050c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d5d8 	.word	0x0801d5d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000510 	.word	0x20000510
 80001cc:	0801d5d8 	.word	0x0801d5d8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d013      	beq.n	80005d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00b      	beq.n	80005d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	e000      	b.n	80005c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f9      	beq.n	80005c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <_write>:
void StartDefaultTask(void *argument);
void Start_SDIO_Task(void *argument);
void Start_Blink_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	2332      	movs	r3, #50	; 0x32
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <_write+0x48>)
 80005fe:	f005 fe68 	bl	80062d2 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x34>
		ITM_SendChar(*ptr++);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffc1 	bl	8000598 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x20>
	}
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000a454 	.word	0x2000a454

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f001 fb20 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f83a 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f914 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 8000644:	f000 f8ea 	bl	800081c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000648:	f000 f89e 	bl	8000788 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 800064c:	f000 f8bc 	bl	80007c8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000650:	f006 fe7c 	bl	800734c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f00a f9ee 	bl	800aa34 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <main+0x5c>)
 800065a:	2100      	movs	r1, #0
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <main+0x60>)
 800065e:	f00a fa6a 	bl	800ab36 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <main+0x64>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of my_SDIO_Task */
  my_SDIO_TaskHandle = osThreadNew(Start_SDIO_Task, NULL, &my_SDIO_Task_attributes);
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <main+0x68>)
 800066a:	2100      	movs	r1, #0
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <main+0x6c>)
 800066e:	f00a fa62 	bl	800ab36 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <main+0x70>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of my_Blink_Task */
  my_Blink_TaskHandle = osThreadNew(Start_Blink_Task, NULL, &my_Blink_Task_attributes);
 8000678:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <main+0x74>)
 800067a:	2100      	movs	r1, #0
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <main+0x78>)
 800067e:	f00a fa5a 	bl	800ab36 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <main+0x7c>)
 8000686:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f00a fa1a 	bl	800aac0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800068c:	e7fe      	b.n	800068c <main+0x58>
 800068e:	bf00      	nop
 8000690:	0802143c 	.word	0x0802143c
 8000694:	08000945 	.word	0x08000945
 8000698:	20009a6c 	.word	0x20009a6c
 800069c:	08021460 	.word	0x08021460
 80006a0:	0800095d 	.word	0x0800095d
 80006a4:	20009a70 	.word	0x20009a70
 80006a8:	08021484 	.word	0x08021484
 80006ac:	08000971 	.word	0x08000971
 80006b0:	2000a498 	.word	0x2000a498

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f01b fccb 	bl	801c05e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000728:	23a8      	movs	r3, #168	; 0xa8
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fafb 	bl	8003d34 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f934 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fd5c 	bl	8004224 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f91d 	bl	80009b0 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 800078e:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <MX_SDIO_SD_Init+0x3c>)
 8000790:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <MX_SDIO_SD_Init+0x38>)
 80007b2:	2205      	movs	r2, #5
 80007b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	2000a3d0 	.word	0x2000a3d0
 80007c4:	40012c00 	.word	0x40012c00

080007c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART6_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART6_UART_Init+0x4c>)
 8000800:	f005 fd1a 	bl	8006238 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8d1 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000a454 	.word	0x2000a454
 8000818:	40011400 	.word	0x40011400

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_DMA_Init+0x4c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <MX_DMA_Init+0x4c>)
 800082c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_DMA_Init+0x4c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	203b      	movs	r0, #59	; 0x3b
 8000844:	f001 fb38 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000848:	203b      	movs	r0, #59	; 0x3b
 800084a:	f001 fb51 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2045      	movs	r0, #69	; 0x45
 8000854:	f001 fb30 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000858:	2045      	movs	r0, #69	; 0x45
 800085a:	f001 fb49 	bl	8001ef0 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2c      	ldr	r2, [pc, #176]	; (800093c <MX_GPIO_Init+0xd0>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a25      	ldr	r2, [pc, #148]	; (800093c <MX_GPIO_Init+0xd0>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <MX_GPIO_Init+0xd0>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_GPIO_Init+0xd0>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <MX_GPIO_Init+0xd0>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2101      	movs	r1, #1
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000914:	f003 f9da 	bl	8003ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000918:	2301      	movs	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000930:	f003 f830 	bl	8003994 <HAL_GPIO_Init>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00

08000944 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800094c:	f006 ff5c 	bl	8007808 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	zagotovka_netconn_init();
 8000950:	f000 fefc 	bl	800174c <zagotovka_netconn_init>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f00a f980 	bl	800ac5a <osDelay>
 800095a:	e7fb      	b.n	8000954 <StartDefaultTask+0x10>

0800095c <Start_SDIO_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_SDIO_Task */
void Start_SDIO_Task(void *argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN 5 */
		//  zerg_mount();
		//  zerg_format();
		//  zerg_open();
		//  zerg_write();
		zerg_get_data_from_sd();
 8000964:	f000 ff6c 	bl	8001840 <zerg_get_data_from_sd>
		//  zerg_get_free_space();    // Узнаем свободное место после удаления
		//  zerg_get_file_info(name_sd);
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000968:	2001      	movs	r0, #1
 800096a:	f00a f976 	bl	800ac5a <osDelay>
 800096e:	e7fb      	b.n	8000968 <Start_SDIO_Task+0xc>

08000970 <Start_Blink_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Blink_Task */
void Start_Blink_Task(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blink_Task */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8000978:	2101      	movs	r1, #1
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <Start_Blink_Task+0x18>)
 800097c:	f003 f9bf 	bl	8003cfe <HAL_GPIO_TogglePin>
		osDelay(250);
 8000980:	20fa      	movs	r0, #250	; 0xfa
 8000982:	f00a f96a 	bl	800ac5a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8000986:	e7f7      	b.n	8000978 <Start_Blink_Task+0x8>
 8000988:	40020c00 	.word	0x40020c00

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099e:	f001 f98f 	bl	8001cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40010000 	.word	0x40010000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_MspInit+0x54>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x54>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f001 fa59 	bl	8001eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a70      	ldr	r2, [pc, #448]	; (8000bf4 <HAL_SD_MspInit+0x1e0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	f040 80da 	bne.w	8000bec <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	4a6d      	ldr	r2, [pc, #436]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a46:	6453      	str	r3, [r2, #68]	; 0x44
 8000a48:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b67      	ldr	r3, [pc, #412]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a66      	ldr	r2, [pc, #408]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b64      	ldr	r3, [pc, #400]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a5f      	ldr	r2, [pc, #380]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <HAL_SD_MspInit+0x1e4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4854      	ldr	r0, [pc, #336]	; (8000bfc <HAL_SD_MspInit+0x1e8>)
 8000aaa:	f002 ff73 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	484c      	ldr	r0, [pc, #304]	; (8000bfc <HAL_SD_MspInit+0x1e8>)
 8000acc:	f002 ff62 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4845      	ldr	r0, [pc, #276]	; (8000c00 <HAL_SD_MspInit+0x1ec>)
 8000aec:	f002 ff52 	bl	8003994 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000af0:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000af2:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <HAL_SD_MspInit+0x1f4>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000af6:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afc:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afe:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b04:	4b3f      	ldr	r3, [pc, #252]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b10:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b12:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b20:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b24:	2220      	movs	r2, #32
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b30:	2204      	movs	r2, #4
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b36:	2203      	movs	r2, #3
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b4c:	f001 f9de 	bl	8001f0c <HAL_DMA_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000b56:	f7ff ff2b 	bl	80009b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_SD_MspInit+0x1f0>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <HAL_SD_MspInit+0x1fc>)
 8000b6a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b72:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b8e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000bb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000bba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000bc2:	f001 f9a3 	bl	8001f0c <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000bcc:	f7ff fef0 	bl	80009b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000bd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_SD_MspInit+0x1f8>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2105      	movs	r1, #5
 8000be0:	2031      	movs	r0, #49	; 0x31
 8000be2:	f001 f969 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000be6:	2031      	movs	r0, #49	; 0x31
 8000be8:	f001 f982 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	40020c00 	.word	0x40020c00
 8000c04:	20009a0c 	.word	0x20009a0c
 8000c08:	40026458 	.word	0x40026458
 8000c0c:	2000a050 	.word	0x2000a050
 8000c10:	400264a0 	.word	0x400264a0

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_MspInit+0x8c>)
 8000c8a:	f002 fe83 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2019      	movs	r0, #25
 8000cba:	f001 f8fd 	bl	8001eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f001 f916 	bl	8001ef0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <HAL_InitTick+0xa4>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_InitTick+0xa4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_InitTick+0xa4>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce0:	f107 0210 	add.w	r2, r7, #16
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fc96 	bl	800461c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cf0:	f003 fc80 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <HAL_InitTick+0xa8>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9b      	lsrs	r3, r3, #18
 8000d04:	3b01      	subs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_InitTick+0xac>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_InitTick+0xb0>)
 8000d0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_InitTick+0xac>)
 8000d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_InitTick+0xac>)
 8000d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_InitTick+0xac>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_InitTick+0xac>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <HAL_InitTick+0xac>)
 8000d2a:	f004 ffd8 	bl	8005cde <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d104      	bne.n	8000d3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <HAL_InitTick+0xac>)
 8000d36:	f005 f82b 	bl	8005d90 <HAL_TIM_Base_Start_IT>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3730      	adds	r7, #48	; 0x30
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	431bde83 	.word	0x431bde83
 8000d50:	2000a614 	.word	0x2000a614
 8000d54:	40010000 	.word	0x40010000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d8a:	f005 f871 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000a614 	.word	0x2000a614

08000d98 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <SDIO_IRQHandler+0x10>)
 8000d9e:	f003 fee5 	bl	8004b6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000a3d0 	.word	0x2000a3d0

08000dac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA2_Stream3_IRQHandler+0x10>)
 8000db2:	f001 f9d3 	bl	800215c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20009a0c 	.word	0x20009a0c

08000dc0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <ETH_IRQHandler+0x10>)
 8000dc6:	f002 f823 	bl	8002e10 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000e274 	.word	0x2000e274

08000dd4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA2_Stream6_IRQHandler+0x10>)
 8000dda:	f001 f9bf 	bl	800215c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000a050 	.word	0x2000a050

08000de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_kill>:

int _kill(int pid, int sig)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <_kill+0x20>)
 8000e04:	2216      	movs	r2, #22
 8000e06:	601a      	str	r2, [r3, #0]
	return -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20014f80 	.word	0x20014f80

08000e1c <_exit>:

void _exit (int status)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffe5 	bl	8000df8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e2e:	e7fe      	b.n	8000e2e <_exit+0x12>

08000e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e00a      	b.n	8000e58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e42:	f3af 8000 	nop.w
 8000e46:	4601      	mov	r1, r0
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf0      	blt.n	8000e42 <_read+0x12>
	}

return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return -1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e92:	605a      	str	r2, [r3, #4]
	return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_isatty>:

int _isatty(int file)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d205      	bcs.n	8000f10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <_sbrk+0x6c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20020000 	.word	0x20020000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20000528 	.word	0x20000528
 8000f3c:	20014f98 	.word	0x20014f98
 8000f40:	20014f80 	.word	0x20014f80

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <parse>:
GPIO_PIN_9, GPIOE, "PE10", "E", 10,
GPIO_PIN_10, GPIOE, "PE11", "E", 11, GPIO_PIN_11, GPIOE, "PE12", "E", 12, GPIO_PIN_12, GPIOE, "PE13", "E", 13, GPIO_PIN_13, GPIOE, "PE14", "E", 14, GPIO_PIN_14, GPIOE, "PE15", "E", 15, GPIO_PIN_15, GPIOE };
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
char cp[10];
char parse(const char *line) {
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	; 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	466b      	mov	r3, sp
 8000f72:	461e      	mov	r6, r3
	char *buf = { 0 };
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
	/* Find out where everything is */
	const char *start_of_path = strchr(line, ' ') + 1;
 8000f78:	2120      	movs	r1, #32
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f01b fa8c 	bl	801c498 <strchr>
 8000f80:	4603      	mov	r3, r0
 8000f82:	3301      	adds	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
	const char *start_of_query = strchr(start_of_path, '?');
 8000f86:	213f      	movs	r1, #63	; 0x3f
 8000f88:	69b8      	ldr	r0, [r7, #24]
 8000f8a:	f01b fa85 	bl	801c498 <strchr>
 8000f8e:	61f8      	str	r0, [r7, #28]
	const char *end_of_query = strchr(start_of_query, ' ');
 8000f90:	2120      	movs	r1, #32
 8000f92:	69f8      	ldr	r0, [r7, #28]
 8000f94:	f01b fa80 	bl	801c498 <strchr>
 8000f98:	6238      	str	r0, [r7, #32]

	/* Get the right amount of memory */
	char path[start_of_query - start_of_path];
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	1ad5      	subs	r5, r2, r3
 8000fa0:	1e6b      	subs	r3, r5, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f04f 0100 	mov.w	r1, #0
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	00cb      	lsls	r3, r1, #3
 8000fb6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fba:	00c2      	lsls	r2, r0, #3
 8000fbc:	462b      	mov	r3, r5
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f04f 0100 	mov.w	r1, #0
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	00cb      	lsls	r3, r1, #3
 8000fce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fd2:	00c2      	lsls	r2, r0, #3
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe0:	466b      	mov	r3, sp
 8000fe2:	3300      	adds	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
	char query[end_of_query - start_of_query];
 8000fe6:	6a3a      	ldr	r2, [r7, #32]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	1ad4      	subs	r4, r2, r3
 8000fec:	1e63      	subs	r3, r4, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f04f 0100 	mov.w	r1, #0
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	00cb      	lsls	r3, r1, #3
 8001002:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001006:	00c2      	lsls	r2, r0, #3
 8001008:	4623      	mov	r3, r4
 800100a:	4618      	mov	r0, r3
 800100c:	f04f 0100 	mov.w	r1, #0
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	00cb      	lsls	r3, r1, #3
 800101a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800101e:	00c2      	lsls	r2, r0, #3
 8001020:	4623      	mov	r3, r4
 8001022:	3307      	adds	r3, #7
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	ebad 0d03 	sub.w	sp, sp, r3
 800102c:	466b      	mov	r3, sp
 800102e:	3300      	adds	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]

	/* Copy the strings into our memory */
	strncpy(path, start_of_path, start_of_query - start_of_path);
 8001032:	6938      	ldr	r0, [r7, #16]
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	461a      	mov	r2, r3
 800103c:	69b9      	ldr	r1, [r7, #24]
 800103e:	f01b fa52 	bl	801c4e6 <strncpy>
	strncpy(query, start_of_query, end_of_query - start_of_query);
 8001042:	68b8      	ldr	r0, [r7, #8]
 8001044:	6a3a      	ldr	r2, [r7, #32]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	461a      	mov	r2, r3
 800104c:	69f9      	ldr	r1, [r7, #28]
 800104e:	f01b fa4a 	bl	801c4e6 <strncpy>

	/* Null terminators (because strncpy does not provide them) */
	path[sizeof(path)] = 0;
 8001052:	462a      	mov	r2, r5
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2100      	movs	r1, #0
 8001058:	5499      	strb	r1, [r3, r2]
	query[sizeof(query)] = 0;
 800105a:	4622      	mov	r2, r4
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2100      	movs	r1, #0
 8001060:	5499      	strb	r1, [r3, r2]

	/*Print */
	sprintf(cp, "%s\n", query);
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	461a      	mov	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <parse+0x120>)
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <parse+0x124>)
 800106a:	f01b f9a3 	bl	801c3b4 <siprintf>
	// printf("%s\n", path);
	// strncpy(cp, cp + 1,4);
	strcpy(cp, cp + 1);
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <parse+0x128>)
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <parse+0x124>)
 8001074:	f01b fa1d 	bl	801c4b2 <strcpy>
	return cp;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <parse+0x124>)
 800107a:	b2db      	uxtb	r3, r3
 800107c:	46b5      	mov	sp, r6
}
 800107e:	4618      	mov	r0, r3
 8001080:	372c      	adds	r7, #44	; 0x2c
 8001082:	46bd      	mov	sp, r7
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	bf00      	nop
 8001088:	0801d61c 	.word	0x0801d61c
 800108c:	2000a65c 	.word	0x2000a65c
 8001090:	2000a65d 	.word	0x2000a65d

08001094 <http_server_serve>:
/**
 * @brief serve tcp connection
 * @param conn: pointer on connection structure
 * @retval None
 */
static void http_server_serve(struct netconn *conn) {
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001098:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 800109c:	af08      	add	r7, sp, #32
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	6018      	str	r0, [r3, #0]
//	char data_str[3000];
//	int sum = 0;

	/* Read the data from the port, blocking if nothing yet there.
	 We assume the request (the part we care about) is in one netbuf */
	recv_err = netconn_recv(conn, &inbuf);
 80010a4:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4611      	mov	r1, r2
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f00d feb0 	bl	800ee14 <netconn_recv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f887 33c3 	strb.w	r3, [r7, #963]	; 0x3c3
	char my_json[200];    //??????????????????
	char full_json[700]; //??????????????????
	memset(full_json, 0, 700);
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f01a ffca 	bl	801c05e <memset>
	memset(my_json, 0, 200);
 80010ca:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80010ce:	22c8      	movs	r2, #200	; 0xc8
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f01a ffc3 	bl	801c05e <memset>
	if (recv_err == ERR_OK) {
 80010d8:	f997 33c3 	ldrsb.w	r3, [r7, #963]	; 0x3c3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f040 82d4 	bne.w	800168a <http_server_serve+0x5f6>
		if (netconn_err(conn) == ERR_OK) {
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f00e f81d 	bl	800f126 <netconn_err>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 82cb 	bne.w	800168a <http_server_serve+0x5f6>
			do {
				netbuf_data(inbuf, (void**) &buf, &buflen); // Получили данные и собираем POST отрезки.
 80010f4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80010f8:	f207 32b2 	addw	r2, r7, #946	; 0x3b2
 80010fc:	f507 716d 	add.w	r1, r7, #948	; 0x3b4
 8001100:	4618      	mov	r0, r3
 8001102:	f00f fc23 	bl	801094c <netbuf_data>
//				netbuf_data(inbuf, (void*) &buf, &buflen); // Получили данные и собираем POST отрезки.
//				netbuf_data(inbuf, &buf, &buflen); // Получили данные и собираем POST отрезки.

				if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 8001106:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 800110a:	2b04      	cmp	r3, #4
 800110c:	f240 825c 	bls.w	80015c8 <http_server_serve+0x534>
 8001110:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001114:	2205      	movs	r2, #5
 8001116:	49af      	ldr	r1, [pc, #700]	; (80013d4 <http_server_serve+0x340>)
 8001118:	4618      	mov	r0, r3
 800111a:	f01b f9d2 	bl	801c4c2 <strncmp>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	f040 8251 	bne.w	80015c8 <http_server_serve+0x534>
					//printf("++++++ GET ++++++ %d/ size - %d \r\n", buflen, sizeof(buflen));

					if (strncmp(buf, "GET / ", 6) == 0) {
 8001126:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800112a:	2206      	movs	r2, #6
 800112c:	49aa      	ldr	r1, [pc, #680]	; (80013d8 <http_server_serve+0x344>)
 800112e:	4618      	mov	r0, r3
 8001130:	f01b f9c7 	bl	801c4c2 <strncmp>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11b      	bne.n	8001172 <http_server_serve+0xde>
						/* Load STM32F4xx page */
						printf(" GET !!!\n\r");
 800113a:	48a8      	ldr	r0, [pc, #672]	; (80013dc <http_server_serve+0x348>)
 800113c:	f01a fff2 	bl	801c124 <iprintf>
						fs_open(&file, "/zagatovka.html");
 8001140:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8001144:	49a6      	ldr	r1, [pc, #664]	; (80013e0 <http_server_serve+0x34c>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00f fe32 	bl	8010db0 <fs_open>
						netconn_write(conn, (const unsigned char* )(file.data), (size_t )file.len, NETCONN_NOCOPY);
 800114c:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8001150:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001154:	461a      	mov	r2, r3
 8001156:	f107 000c 	add.w	r0, r7, #12
 800115a:	2300      	movs	r3, #0
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2300      	movs	r3, #0
 8001160:	6800      	ldr	r0, [r0, #0]
 8001162:	f00d fed1 	bl	800ef08 <netconn_write_partly>
						fs_close(&file);
 8001166:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800116a:	4618      	mov	r0, r3
 800116c:	f00f fe5e 	bl	8010e2c <fs_close>
 8001170:	e22a      	b.n	80015c8 <http_server_serve+0x534>

					} else if (strncmp(buf, "GET /form.html", 14) == 0) {
 8001172:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001176:	220e      	movs	r2, #14
 8001178:	499a      	ldr	r1, [pc, #616]	; (80013e4 <http_server_serve+0x350>)
 800117a:	4618      	mov	r0, r3
 800117c:	f01b f9a1 	bl	801c4c2 <strncmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d135      	bne.n	80011f2 <http_server_serve+0x15e>
						/* Load STM32F4xx page */
//												printf(" GET !!!\n\r");
//												fs_open(&file, "/form.html");
//												netconn_write(conn, (const unsigned char* )(file.data), (size_t )file.len, NETCONN_NOCOPY);
//												fs_close(&file);
						printf("BUFFER IS - %s", buf);
 8001186:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800118a:	4619      	mov	r1, r3
 800118c:	4896      	ldr	r0, [pc, #600]	; (80013e8 <http_server_serve+0x354>)
 800118e:	f01a ffc9 	bl	801c124 <iprintf>
						if (strncmp(buf, "GET /form.html?id=", 18) == 0) {
 8001192:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001196:	2212      	movs	r2, #18
 8001198:	4994      	ldr	r1, [pc, #592]	; (80013ec <http_server_serve+0x358>)
 800119a:	4618      	mov	r0, r3
 800119c:	f01b f991 	bl	801c4c2 <strncmp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11e      	bne.n	80011e4 <http_server_serve+0x150>
							//parse(buf);
//							    char *str [] = {0};
//								printf(" MY ID is - %s\n",strcpy(str,parse(buf)));

							char *token;
							char *rest = parse(buf);
 80011a6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fedc 	bl	8000f68 <parse>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	601a      	str	r2, [r3, #0]
							while ((token = strtok_r(rest, "=", &rest))) {
 80011ba:	e004      	b.n	80011c6 <http_server_serve+0x132>
								printf("Result of Parse - %s\r\n", token);
 80011bc:	f8d7 13bc 	ldr.w	r1, [r7, #956]	; 0x3bc
 80011c0:	488b      	ldr	r0, [pc, #556]	; (80013f0 <http_server_serve+0x35c>)
 80011c2:	f01a ffaf 	bl	801c124 <iprintf>
							while ((token = strtok_r(rest, "=", &rest))) {
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f107 0214 	add.w	r2, r7, #20
 80011d0:	4988      	ldr	r1, [pc, #544]	; (80013f4 <http_server_serve+0x360>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f01b f9c2 	bl	801c55c <strtok_r>
 80011d8:	f8c7 03bc 	str.w	r0, [r7, #956]	; 0x3bc
 80011dc:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1eb      	bne.n	80011bc <http_server_serve+0x128>
							}
						}
						My_Form_Page(conn, 0);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2100      	movs	r1, #0
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f000 fac2 	bl	8001774 <My_Form_Page>
 80011f0:	e1ea      	b.n	80015c8 <http_server_serve+0x534>

					} else if (strncmp(buf, "GET /json.html", 14) == 0) {
 80011f2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80011f6:	220e      	movs	r2, #14
 80011f8:	497f      	ldr	r1, [pc, #508]	; (80013f8 <http_server_serve+0x364>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f01b f961 	bl	801c4c2 <strncmp>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 819e 	bne.w	8001544 <http_server_serve+0x4b0>
						char *info;
						strcat(full_json, "HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n\r\n"); // объеденяем строки
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffe9 	bl	80001e4 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4413      	add	r3, r2
 800121c:	4a77      	ldr	r2, [pc, #476]	; (80013fc <http_server_serve+0x368>)
 800121e:	4614      	mov	r4, r2
 8001220:	469c      	mov	ip, r3
 8001222:	f104 0e20 	add.w	lr, r4, #32
 8001226:	4665      	mov	r5, ip
 8001228:	4626      	mov	r6, r4
 800122a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800122c:	6028      	str	r0, [r5, #0]
 800122e:	6069      	str	r1, [r5, #4]
 8001230:	60aa      	str	r2, [r5, #8]
 8001232:	60eb      	str	r3, [r5, #12]
 8001234:	3410      	adds	r4, #16
 8001236:	f10c 0c10 	add.w	ip, ip, #16
 800123a:	4574      	cmp	r4, lr
 800123c:	d1f3      	bne.n	8001226 <http_server_serve+0x192>
 800123e:	4665      	mov	r5, ip
 8001240:	4623      	mov	r3, r4
 8001242:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001244:	6028      	str	r0, [r5, #0]
 8001246:	6069      	str	r1, [r5, #4]
 8001248:	60aa      	str	r2, [r5, #8]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	81ab      	strh	r3, [r5, #12]

						while (variable < num_lines) {
 800124e:	e160      	b.n	8001512 <http_server_serve+0x47e>
							if (variable == 0) {
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <http_server_serve+0x36c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10e      	bne.n	8001276 <http_server_serve+0x1e2>
								strcat(full_json, "[");
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f7fe ffc1 	bl	80001e4 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	4413      	add	r3, r2
 800126c:	4965      	ldr	r1, [pc, #404]	; (8001404 <http_server_serve+0x370>)
 800126e:	461a      	mov	r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	8013      	strh	r3, [r2, #0]
							}
							if (isalpha(T[variable].infofield[0])) {
 8001276:	4b62      	ldr	r3, [pc, #392]	; (8001400 <http_server_serve+0x36c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4963      	ldr	r1, [pc, #396]	; (8001408 <http_server_serve+0x374>)
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	440b      	add	r3, r1
 8001286:	332c      	adds	r3, #44	; 0x2c
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a5f      	ldr	r2, [pc, #380]	; (800140c <http_server_serve+0x378>)
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00c      	beq.n	80012b4 <http_server_serve+0x220>
								info = T[variable].infofield;
 800129a:	4b59      	ldr	r3, [pc, #356]	; (8001400 <http_server_serve+0x36c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	3328      	adds	r3, #40	; 0x28
 80012a8:	4a57      	ldr	r2, [pc, #348]	; (8001408 <http_server_serve+0x374>)
 80012aa:	4413      	add	r3, r2
 80012ac:	3304      	adds	r3, #4
 80012ae:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80012b2:	e018      	b.n	80012e6 <http_server_serve+0x252>
								//printf("-----------It's char\n");
							} else if (isdigit(T[variable].infofield[0])) {
 80012b4:	4b52      	ldr	r3, [pc, #328]	; (8001400 <http_server_serve+0x36c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4953      	ldr	r1, [pc, #332]	; (8001408 <http_server_serve+0x374>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	440b      	add	r3, r1
 80012c4:	332c      	adds	r3, #44	; 0x2c
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a50      	ldr	r2, [pc, #320]	; (800140c <http_server_serve+0x378>)
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <http_server_serve+0x24c>
								info = NULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80012de:	e002      	b.n	80012e6 <http_server_serve+0x252>
								//printf("-----------It's int\n");
							} else {
								info = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
								//printf("-----------It's empty\n");
							}
							//printf("----------TEST---------\n");

							if (variable == num_lines - 1) {
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <http_server_serve+0x36c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 8094 	bne.w	8001418 <http_server_serve+0x384>
								sprintf(
										my_json,  // Получаем json
										"{\"pins\":\"%s\",\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d}]", tp[variable].pins, T[variable].pulluptype,
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <http_server_serve+0x36c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4a44      	ldr	r2, [pc, #272]	; (8001410 <http_server_serve+0x37c>)
 80012fe:	eb03 0e02 	add.w	lr, r3, r2
 8001302:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <http_server_serve+0x36c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4a3e      	ldr	r2, [pc, #248]	; (8001408 <http_server_serve+0x374>)
 8001310:	eb03 0802 	add.w	r8, r3, r2
								sprintf(
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <http_server_serve+0x36c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	493b      	ldr	r1, [pc, #236]	; (8001408 <http_server_serve+0x374>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	440b      	add	r3, r1
 8001324:	3314      	adds	r3, #20
 8001326:	6819      	ldr	r1, [r3, #0]
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <http_server_serve+0x36c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4836      	ldr	r0, [pc, #216]	; (8001408 <http_server_serve+0x374>)
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4403      	add	r3, r0
 8001338:	3318      	adds	r3, #24
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <http_server_serve+0x36c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4c31      	ldr	r4, [pc, #196]	; (8001408 <http_server_serve+0x374>)
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4423      	add	r3, r4
 800134c:	331c      	adds	r3, #28
 800134e:	681c      	ldr	r4, [r3, #0]
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <http_server_serve+0x36c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4d2c      	ldr	r5, [pc, #176]	; (8001408 <http_server_serve+0x374>)
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	442b      	add	r3, r5
 8001360:	3320      	adds	r3, #32
 8001362:	681d      	ldr	r5, [r3, #0]
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <http_server_serve+0x36c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4e27      	ldr	r6, [pc, #156]	; (8001408 <http_server_serve+0x374>)
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4433      	add	r3, r6
 8001374:	3324      	adds	r3, #36	; 0x24
 8001376:	681e      	ldr	r6, [r3, #0]
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <http_server_serve+0x36c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <http_server_serve+0x374>)
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	3328      	adds	r3, #40	; 0x28
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <http_server_serve+0x36c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <http_server_serve+0x374>)
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	334c      	adds	r3, #76	; 0x4c
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f507 7c35 	add.w	ip, r7, #724	; 0x2d4
 80013ae:	9307      	str	r3, [sp, #28]
 80013b0:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80013b4:	9306      	str	r3, [sp, #24]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	9305      	str	r3, [sp, #20]
 80013ba:	9604      	str	r6, [sp, #16]
 80013bc:	9503      	str	r5, [sp, #12]
 80013be:	9402      	str	r4, [sp, #8]
 80013c0:	9001      	str	r0, [sp, #4]
 80013c2:	9100      	str	r1, [sp, #0]
 80013c4:	4643      	mov	r3, r8
 80013c6:	4672      	mov	r2, lr
 80013c8:	4912      	ldr	r1, [pc, #72]	; (8001414 <http_server_serve+0x380>)
 80013ca:	4660      	mov	r0, ip
 80013cc:	f01a fff2 	bl	801c3b4 <siprintf>
 80013d0:	e092      	b.n	80014f8 <http_server_serve+0x464>
 80013d2:	bf00      	nop
 80013d4:	0801d620 	.word	0x0801d620
 80013d8:	0801d628 	.word	0x0801d628
 80013dc:	0801d630 	.word	0x0801d630
 80013e0:	0801d63c 	.word	0x0801d63c
 80013e4:	0801d64c 	.word	0x0801d64c
 80013e8:	0801d65c 	.word	0x0801d65c
 80013ec:	0801d66c 	.word	0x0801d66c
 80013f0:	0801d680 	.word	0x0801d680
 80013f4:	0801d698 	.word	0x0801d698
 80013f8:	0801d69c 	.word	0x0801d69c
 80013fc:	0801d6ac 	.word	0x0801d6ac
 8001400:	2000052c 	.word	0x2000052c
 8001404:	0801d6dc 	.word	0x0801d6dc
 8001408:	2000a668 	.word	0x2000a668
 800140c:	0802454a 	.word	0x0802454a
 8001410:	20000004 	.word	0x20000004
 8001414:	0801d6e0 	.word	0x0801d6e0
										T[variable].bounceinterval, T[variable].holdinterval, T[variable].repeat, T[variable].repeatinterval, T[variable].doubleclickinterval, T[variable].preventclick, info, T[variable].onoff);

							} else {
								sprintf(my_json, "{\"pins\":\"%s\",\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d},", tp[variable].pins, T[variable].pulluptype,
 8001418:	4ba4      	ldr	r3, [pc, #656]	; (80016ac <http_server_serve+0x618>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4aa2      	ldr	r2, [pc, #648]	; (80016b0 <http_server_serve+0x61c>)
 8001426:	eb03 0e02 	add.w	lr, r3, r2
 800142a:	4ba0      	ldr	r3, [pc, #640]	; (80016ac <http_server_serve+0x618>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4a9f      	ldr	r2, [pc, #636]	; (80016b4 <http_server_serve+0x620>)
 8001438:	eb03 0802 	add.w	r8, r3, r2
 800143c:	4b9b      	ldr	r3, [pc, #620]	; (80016ac <http_server_serve+0x618>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	499c      	ldr	r1, [pc, #624]	; (80016b4 <http_server_serve+0x620>)
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	3314      	adds	r3, #20
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <http_server_serve+0x618>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4897      	ldr	r0, [pc, #604]	; (80016b4 <http_server_serve+0x620>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4403      	add	r3, r0
 8001460:	3318      	adds	r3, #24
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	4b91      	ldr	r3, [pc, #580]	; (80016ac <http_server_serve+0x618>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4c92      	ldr	r4, [pc, #584]	; (80016b4 <http_server_serve+0x620>)
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	4423      	add	r3, r4
 8001474:	331c      	adds	r3, #28
 8001476:	681c      	ldr	r4, [r3, #0]
 8001478:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <http_server_serve+0x618>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4d8d      	ldr	r5, [pc, #564]	; (80016b4 <http_server_serve+0x620>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	442b      	add	r3, r5
 8001488:	3320      	adds	r3, #32
 800148a:	681d      	ldr	r5, [r3, #0]
 800148c:	4b87      	ldr	r3, [pc, #540]	; (80016ac <http_server_serve+0x618>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4e88      	ldr	r6, [pc, #544]	; (80016b4 <http_server_serve+0x620>)
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4433      	add	r3, r6
 800149c:	3324      	adds	r3, #36	; 0x24
 800149e:	681e      	ldr	r6, [r3, #0]
 80014a0:	4b82      	ldr	r3, [pc, #520]	; (80016ac <http_server_serve+0x618>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b83      	ldr	r3, [pc, #524]	; (80016b4 <http_server_serve+0x620>)
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	3328      	adds	r3, #40	; 0x28
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <http_server_serve+0x618>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <http_server_serve+0x620>)
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	334c      	adds	r3, #76	; 0x4c
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f507 7c35 	add.w	ip, r7, #724	; 0x2d4
 80014d6:	9307      	str	r3, [sp, #28]
 80014d8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80014dc:	9306      	str	r3, [sp, #24]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	9305      	str	r3, [sp, #20]
 80014e2:	9604      	str	r6, [sp, #16]
 80014e4:	9503      	str	r5, [sp, #12]
 80014e6:	9402      	str	r4, [sp, #8]
 80014e8:	9001      	str	r0, [sp, #4]
 80014ea:	9100      	str	r1, [sp, #0]
 80014ec:	4643      	mov	r3, r8
 80014ee:	4672      	mov	r2, lr
 80014f0:	4971      	ldr	r1, [pc, #452]	; (80016b8 <http_server_serve+0x624>)
 80014f2:	4660      	mov	r0, ip
 80014f4:	f01a ff5e 	bl	801c3b4 <siprintf>
										T[variable].bounceinterval, T[variable].holdinterval, T[variable].repeat, T[variable].repeatinterval, T[variable].doubleclickinterval, T[variable].preventclick, info, T[variable].onoff);
							}
							strcat(full_json, my_json); // объеденяем строки
 80014f8:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f01a ffb9 	bl	801c47a <strcat>
//									T[variable].bounceinterval, T[variable].holdinterval,
//									T[variable].repeat, T[variable].repeatinterval,
//									T[variable].doubleclickinterval,
//									T[variable].preventclick, info, T[variable].onoff);

							variable++;
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <http_server_serve+0x618>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a67      	ldr	r2, [pc, #412]	; (80016ac <http_server_serve+0x618>)
 8001510:	6013      	str	r3, [r2, #0]
						while (variable < num_lines) {
 8001512:	4b66      	ldr	r3, [pc, #408]	; (80016ac <http_server_serve+0x618>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f77f ae9a 	ble.w	8001250 <http_server_serve+0x1bc>
						}
						variable = 0;
 800151c:	4b63      	ldr	r3, [pc, #396]	; (80016ac <http_server_serve+0x618>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
						netconn_write(conn, full_json, strlen(full_json), NETCONN_COPY);
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fe5c 	bl	80001e4 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	f107 0118 	add.w	r1, r7, #24
 8001532:	f107 000c 	add.w	r0, r7, #12
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	6800      	ldr	r0, [r0, #0]
 800153e:	f00d fce3 	bl	800ef08 <netconn_write_partly>
 8001542:	e041      	b.n	80015c8 <http_server_serve+0x534>
//						memset(full_json, 0, sizeof(full_json));
//						memset(my_json, 0, sizeof(my_json));
					} else if (strncmp(buf, "GET /zagatovka.html", 19) == 0) {
 8001544:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001548:	2213      	movs	r2, #19
 800154a:	495c      	ldr	r1, [pc, #368]	; (80016bc <http_server_serve+0x628>)
 800154c:	4618      	mov	r0, r3
 800154e:	f01a ffb8 	bl	801c4c2 <strncmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11f      	bne.n	8001598 <http_server_serve+0x504>
						//parse(buf);  // PARSSSSSSSSSSSSSSSS
						printf(" preventclick_%d is: %d \n", 0, T[0].preventclick);
 8001558:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <http_server_serve+0x620>)
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	461a      	mov	r2, r3
 800155e:	2100      	movs	r1, #0
 8001560:	4857      	ldr	r0, [pc, #348]	; (80016c0 <http_server_serve+0x62c>)
 8001562:	f01a fddf 	bl	801c124 <iprintf>
						fs_open(&file, "/zagatovka.html");
 8001566:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800156a:	4956      	ldr	r1, [pc, #344]	; (80016c4 <http_server_serve+0x630>)
 800156c:	4618      	mov	r0, r3
 800156e:	f00f fc1f 	bl	8010db0 <fs_open>
						netconn_write(conn, (const unsigned char* )(file.data), (size_t )file.len, NETCONN_NOCOPY);
 8001572:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8001576:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800157a:	461a      	mov	r2, r3
 800157c:	f107 000c 	add.w	r0, r7, #12
 8001580:	2300      	movs	r3, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	6800      	ldr	r0, [r0, #0]
 8001588:	f00d fcbe 	bl	800ef08 <netconn_write_partly>
						fs_close(&file);
 800158c:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8001590:	4618      	mov	r0, r3
 8001592:	f00f fc4b 	bl	8010e2c <fs_close>
 8001596:	e017      	b.n	80015c8 <http_server_serve+0x534>
					} else {
						/* Load Error page */
						fs_open(&file, "/404.html");
 8001598:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800159c:	494a      	ldr	r1, [pc, #296]	; (80016c8 <http_server_serve+0x634>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f00f fc06 	bl	8010db0 <fs_open>
						netconn_write(conn, (const unsigned char* )(file.data), (size_t )file.len, NETCONN_NOCOPY);
 80015a4:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 80015a8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80015ac:	461a      	mov	r2, r3
 80015ae:	f107 000c 	add.w	r0, r7, #12
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	6800      	ldr	r0, [r0, #0]
 80015ba:	f00d fca5 	bl	800ef08 <netconn_write_partly>
						fs_close(&file);
 80015be:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00f fc32 	bl	8010e2c <fs_close>
					}
				}

				//printf("TEST \n");
				if ((buflen >= 6) && (strncmp(buf, "POST /", 6) == 0)) {
 80015c8:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d934      	bls.n	800163a <http_server_serve+0x5a6>
 80015d0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80015d4:	2206      	movs	r2, #6
 80015d6:	493d      	ldr	r1, [pc, #244]	; (80016cc <http_server_serve+0x638>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f01a ff72 	bl	801c4c2 <strncmp>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d12a      	bne.n	800163a <http_server_serve+0x5a6>
					if ((strncmp(buf, "POST /post.html", 15) == 0) || (strncmp(buf, "POST / ", 7) == 0)) { //20
 80015e4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80015e8:	220f      	movs	r2, #15
 80015ea:	4939      	ldr	r1, [pc, #228]	; (80016d0 <http_server_serve+0x63c>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f01a ff68 	bl	801c4c2 <strncmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <http_server_serve+0x578>
 80015f8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80015fc:	2207      	movs	r2, #7
 80015fe:	4935      	ldr	r1, [pc, #212]	; (80016d4 <http_server_serve+0x640>)
 8001600:	4618      	mov	r0, r3
 8001602:	f01a ff5e 	bl	801c4c2 <strncmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <http_server_serve+0x580>
						flag = 1;
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <http_server_serve+0x644>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e012      	b.n	800163a <http_server_serve+0x5a6>
					} else {
						/* Load Error page */
						fs_open(&file, "/404.html");
 8001614:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8001618:	492b      	ldr	r1, [pc, #172]	; (80016c8 <http_server_serve+0x634>)
 800161a:	4618      	mov	r0, r3
 800161c:	f00f fbc8 	bl	8010db0 <fs_open>
						netconn_write(conn, (const unsigned char* )(file.data), (size_t )file.len, NETCONN_NOCOPY);
 8001620:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8001624:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001628:	461a      	mov	r2, r3
 800162a:	f107 000c 	add.w	r0, r7, #12
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	6800      	ldr	r0, [r0, #0]
 8001636:	f00d fc67 	bl	800ef08 <netconn_write_partly>
					}
				}
				//strncat(data_str, buf, buflen); // Объеденяем кусочки данных в буфере.
//				sum += buflen;
				//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0); //toggle data led
			} while (netbuf_next(inbuf) >= 0); // Очищаем пока есть что либо в буфере.
 800163a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800163e:	4618      	mov	r0, r3
 8001640:	f00f f9ce 	bl	80109e0 <netbuf_next>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f6bf ad54 	bge.w	80010f4 <http_server_serve+0x60>
			if (flag == 1) {
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <http_server_serve+0x644>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d11a      	bne.n	800168a <http_server_serve+0x5f6>
				fs_open(&file, "/post.html");
 8001654:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8001658:	4920      	ldr	r1, [pc, #128]	; (80016dc <http_server_serve+0x648>)
 800165a:	4618      	mov	r0, r3
 800165c:	f00f fba8 	bl	8010db0 <fs_open>
				netconn_write(conn, (const unsigned char* )(file.data), (size_t )file.len, NETCONN_NOCOPY); // Отправка на web page...
 8001660:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8001664:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001668:	461a      	mov	r2, r3
 800166a:	f107 000c 	add.w	r0, r7, #12
 800166e:	2300      	movs	r3, #0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	6800      	ldr	r0, [r0, #0]
 8001676:	f00d fc47 	bl	800ef08 <netconn_write_partly>
				fs_close(&file);
 800167a:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800167e:	4618      	mov	r0, r3
 8001680:	f00f fbd4 	bl	8010e2c <fs_close>
				flag = 0;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <http_server_serve+0x644>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
			/* Is this an HTTP GET command? (only check the first 5 chars, since
			 there are other formats for GET, and we're keeping it very simple )*/
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	f00d fd3c 	bl	800f10c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
	 so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8001694:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8001698:	4618      	mov	r0, r3
 800169a:	f00f f937 	bl	801090c <netbuf_delete>
}
 800169e:	bf00      	nop
 80016a0:	f507 7772 	add.w	r7, r7, #968	; 0x3c8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016aa:	bf00      	nop
 80016ac:	2000052c 	.word	0x2000052c
 80016b0:	20000004 	.word	0x20000004
 80016b4:	2000a668 	.word	0x2000a668
 80016b8:	0801d790 	.word	0x0801d790
 80016bc:	0801d840 	.word	0x0801d840
 80016c0:	0801d854 	.word	0x0801d854
 80016c4:	0801d63c 	.word	0x0801d63c
 80016c8:	0801d870 	.word	0x0801d870
 80016cc:	0801d87c 	.word	0x0801d87c
 80016d0:	0801d884 	.word	0x0801d884
 80016d4:	0801d894 	.word	0x0801d894
 80016d8:	20000530 	.word	0x20000530
 80016dc:	0801d89c 	.word	0x0801d89c

080016e0 <http_server_netconn_thread>:
/**
 * @brief  http server thread
 * @param arg: pointer on argument(not used here)
 * @retval None
 */
static void http_server_netconn_thread(void *arg) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	struct netconn *conn, *newconn;
	err_t err, accept_err;

	/* Create a new TCP connection handle */
	conn = netconn_new(NETCONN_TCP);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2010      	movs	r0, #16
 80016ee:	f00d f86b 	bl	800e7c8 <netconn_new_with_proto_and_callback>
 80016f2:	6178      	str	r0, [r7, #20]

	if (conn != NULL) {
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d023      	beq.n	8001742 <http_server_netconn_thread+0x62>
		/* Bind to port 80 (HTTP) with default IP address */
		err = netconn_bind(conn, NULL, 80);
 80016fa:	2250      	movs	r2, #80	; 0x50
 80016fc:	2100      	movs	r1, #0
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f00d f91c 	bl	800e93c <netconn_bind>
 8001704:	4603      	mov	r3, r0
 8001706:	74fb      	strb	r3, [r7, #19]

		if (err == ERR_OK) {
 8001708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d118      	bne.n	8001742 <http_server_netconn_thread+0x62>
			/* Put the connection into LISTEN state */
			netconn_listen(conn);
 8001710:	21ff      	movs	r1, #255	; 0xff
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f00d f94a 	bl	800e9ac <netconn_listen_with_backlog>

			while (1) {
				/* accept any icoming connection */
				accept_err = netconn_accept(conn, &newconn);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4619      	mov	r1, r3
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f00d f970 	bl	800ea04 <netconn_accept>
 8001724:	4603      	mov	r3, r0
 8001726:	74bb      	strb	r3, [r7, #18]
				if (accept_err == ERR_OK) {
 8001728:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f3      	bne.n	8001718 <http_server_netconn_thread+0x38>
					/* serve connection */
					http_server_serve(newconn);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcae 	bl	8001094 <http_server_serve>

					/* delete connection */
					netconn_delete(newconn);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4618      	mov	r0, r3
 800173c:	f00d f8e2 	bl	800e904 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8001740:	e7ea      	b.n	8001718 <http_server_netconn_thread+0x38>
				}
			}
		}
	}
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <zagotovka_netconn_init>:
/**
 * @brief  Initialize the HTTP server (start its thread)
 * @param  none
 * @retval None
 */
void zagotovka_netconn_init() {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af02      	add	r7, sp, #8
	sys_thread_new("HTTP", http_server_netconn_thread, NULL,DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8001752:	2320      	movs	r3, #32
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800175a:	2200      	movs	r2, #0
 800175c:	4903      	ldr	r1, [pc, #12]	; (800176c <zagotovka_netconn_init+0x20>)
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <zagotovka_netconn_init+0x24>)
 8001760:	f01a fae8 	bl	801bd34 <sys_thread_new>
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	080016e1 	.word	0x080016e1
 8001770:	0801d8a8 	.word	0x0801d8a8

08001774 <My_Form_Page>:
//	/* Send the dynamically generated page */
//	netconn_write(conn, PAGE_START, strlen((char* )PAGE_START), NETCONN_COPY);
//	netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
//}

void My_Form_Page(struct netconn *conn, int id) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	static const char first[] =
			"<!DOCTYPE html><title>Таблица</title><meta content=\"text/html; charset=utf-8\"http-equiv=Content-Type><meta content=\"max-age=0\"http-equiv=cache-control><meta content=no-cache http-equiv=cache-control><meta content=0 http-equiv=expires><meta content=\"Tue, 01 Jan 1980 1:00:00 GMT\"http-equiv=expires><meta content=no-cache http-equiv=pragma><style>table,td,th{border:1px solid #000;border-collapse:collapse;padding:5px}tr:nth-child(odd){background-color:#cfc}</style><body>";
	static const char second[] = "</body></html>";
	static const char test[] = "test";

	netconn_write(conn, first, strlen(first), NETCONN_COPY);
 800177e:	4812      	ldr	r0, [pc, #72]	; (80017c8 <My_Form_Page+0x54>)
 8001780:	f7fe fd30 	bl	80001e4 <strlen>
 8001784:	4602      	mov	r2, r0
 8001786:	2300      	movs	r3, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	490e      	ldr	r1, [pc, #56]	; (80017c8 <My_Form_Page+0x54>)
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f00d fbba 	bl	800ef08 <netconn_write_partly>
	netconn_write(conn, test, strlen(test), NETCONN_COPY);
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <My_Form_Page+0x58>)
 8001796:	f7fe fd25 	bl	80001e4 <strlen>
 800179a:	4602      	mov	r2, r0
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	490a      	ldr	r1, [pc, #40]	; (80017cc <My_Form_Page+0x58>)
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f00d fbaf 	bl	800ef08 <netconn_write_partly>
	netconn_write(conn, second, strlen(second), NETCONN_COPY);
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <My_Form_Page+0x5c>)
 80017ac:	f7fe fd1a 	bl	80001e4 <strlen>
 80017b0:	4602      	mov	r2, r0
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	4905      	ldr	r1, [pc, #20]	; (80017d0 <My_Form_Page+0x5c>)
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f00d fba4 	bl	800ef08 <netconn_write_partly>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	080214c0 	.word	0x080214c0
 80017cc:	080216a0 	.word	0x080216a0
 80017d0:	080216a8 	.word	0x080216a8

080017d4 <clear_buffer>:

extern struct table T[num_lines];              // Создали массив 'T' структурного типа, размер = 'num_lines'

/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	e007      	b.n	80017f0 <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <clear_buffer+0x30>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3301      	adds	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b63      	cmp	r3, #99	; 0x63
 80017f4:	ddf4      	ble.n	80017e0 <clear_buffer+0xc>
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20000534 	.word	0x20000534

08001808 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800180c:	2200      	movs	r2, #0
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <zerg_mount+0x28>)
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <zerg_mount+0x2c>)
 8001812:	f008 fbab 	bl	8009f6c <f_mount>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <zerg_mount+0x1c>
		printf("Error Mounting SD Card\r\n");
 800181c:	4806      	ldr	r0, [pc, #24]	; (8001838 <zerg_mount+0x30>)
 800181e:	f01a fd07 	bl	801c230 <puts>
	} else {
		printf("SD card mounted successfully!\r\n");
	}
}
 8001822:	e002      	b.n	800182a <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <zerg_mount+0x34>)
 8001826:	f01a fd03 	bl	801c230 <puts>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000a8c0 	.word	0x2000a8c0
 8001834:	2000b8f4 	.word	0x2000b8f4
 8001838:	0801d8bc 	.word	0x0801d8bc
 800183c:	0801d8d4 	.word	0x0801d8d4

08001840 <zerg_get_data_from_sd>:
	}
	f_close(&SDFile);
	clear_buffer();
}

int zerg_get_data_from_sd(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
	zerg_mount();
 8001846:	f7ff ffdf 	bl	8001808 <zerg_mount>
	f_open(&SDFile, (char*) name_sd, FA_READ);
 800184a:	4ba3      	ldr	r3, [pc, #652]	; (8001ad8 <zerg_get_data_from_sd+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	4619      	mov	r1, r3
 8001852:	48a2      	ldr	r0, [pc, #648]	; (8001adc <zerg_get_data_from_sd+0x29c>)
 8001854:	f008 fbee 	bl	800a034 <f_open>
	memset(rtext, 0, sizeof(rtext));
 8001858:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800185c:	2100      	movs	r1, #0
 800185e:	48a0      	ldr	r0, [pc, #640]	; (8001ae0 <zerg_get_data_from_sd+0x2a0>)
 8001860:	f01a fbfd 	bl	801c05e <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*) &bytesread);
 8001864:	4b9f      	ldr	r3, [pc, #636]	; (8001ae4 <zerg_get_data_from_sd+0x2a4>)
 8001866:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800186a:	499d      	ldr	r1, [pc, #628]	; (8001ae0 <zerg_get_data_from_sd+0x2a0>)
 800186c:	489b      	ldr	r0, [pc, #620]	; (8001adc <zerg_get_data_from_sd+0x29c>)
 800186e:	f008 fdb4 	bl	800a3da <f_read>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b9c      	ldr	r3, [pc, #624]	; (8001ae8 <zerg_get_data_from_sd+0x2a8>)
 8001878:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK)) {
 800187a:	4b9a      	ldr	r3, [pc, #616]	; (8001ae4 <zerg_get_data_from_sd+0x2a4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <zerg_get_data_from_sd+0x4a>
 8001882:	4b99      	ldr	r3, [pc, #612]	; (8001ae8 <zerg_get_data_from_sd+0x2a8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <zerg_get_data_from_sd+0x54>
		printf("Failed to read file!\r\n");
 800188a:	4898      	ldr	r0, [pc, #608]	; (8001aec <zerg_get_data_from_sd+0x2ac>)
 800188c:	f01a fcd0 	bl	801c230 <puts>
		return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e1b5      	b.n	8001c00 <zerg_get_data_from_sd+0x3c0>
		//printf("File *%s* readed successfully! \n", name);
		//printf("File *%s* has content it is; %s\r\n",name_sd, (char *)rtext);
		//printf("Data from SD card:\r\n");
		//printf("%s\r\n", rtext);
		char *token1, *token2, *token3;
		char *rest = rtext;
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <zerg_get_data_from_sd+0x2a0>)
 8001896:	60bb      	str	r3, [r7, #8]
		char *name1; // для записи в структуру
		int id;
		int z = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
		int y = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]

		while ((token1 = strtok_r(rest, "\n", &rest))) {
 80018a0:	e19c      	b.n	8001bdc <zerg_get_data_from_sd+0x39c>
			//printf("token - %s\n", token1);
			char *rest1 = token1;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	607b      	str	r3, [r7, #4]
			y = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 80018aa:	e189      	b.n	8001bc0 <zerg_get_data_from_sd+0x380>
				//printf("NAME - %s\n", token2);
				z = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
				if (y == 0) {
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d11b      	bne.n	80018ee <zerg_get_data_from_sd+0xae>
					// получение id
					char *rest2 = token2;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	603b      	str	r3, [r7, #0]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 80018ba:	e00e      	b.n	80018da <zerg_get_data_from_sd+0x9a>
						if (z == 0) {
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <zerg_get_data_from_sd+0x86>
							name1 = token2;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
						}
						if (z == 1) {
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d103      	bne.n	80018d4 <zerg_get_data_from_sd+0x94>
							id = atoi(token3);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f01a fa6f 	bl	801bdb0 <atoi>
 80018d2:	6238      	str	r0, [r7, #32]
							//printf("ID %d\n", id);
						}
						z++;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3301      	adds	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	463a      	mov	r2, r7
 80018de:	4984      	ldr	r1, [pc, #528]	; (8001af0 <zerg_get_data_from_sd+0x2b0>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f01a fe3b 	bl	801c55c <strtok_r>
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1e6      	bne.n	80018bc <zerg_get_data_from_sd+0x7c>
					}
				}
				if (y == 1) {
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f040 8162 	bne.w	8001bba <zerg_get_data_from_sd+0x37a>
					//printf("VAL = %s\n", token2);
					// записываем в структуру
					/************************************************/
					if (strcmp(name1, "pulluptype") == 0) {
 80018f6:	497f      	ldr	r1, [pc, #508]	; (8001af4 <zerg_get_data_from_sd+0x2b4>)
 80018f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018fa:	f7fe fc69 	bl	80001d0 <strcmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d117      	bne.n	8001934 <zerg_get_data_from_sd+0xf4>
						strcpy(T[id].pulluptype, token2);
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	4a7a      	ldr	r2, [pc, #488]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001910:	4413      	add	r3, r2
 8001912:	6939      	ldr	r1, [r7, #16]
 8001914:	4618      	mov	r0, r3
 8001916:	f01a fdcc 	bl	801c4b2 <strcpy>
						printf(" pulluptype_%d is: %s \n", id, T[id].pulluptype);
 800191a:	6a3a      	ldr	r2, [r7, #32]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4a74      	ldr	r2, [pc, #464]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001926:	4413      	add	r3, r2
 8001928:	461a      	mov	r2, r3
 800192a:	6a39      	ldr	r1, [r7, #32]
 800192c:	4873      	ldr	r0, [pc, #460]	; (8001afc <zerg_get_data_from_sd+0x2bc>)
 800192e:	f01a fbf9 	bl	801c124 <iprintf>
 8001932:	e142      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "bounceinterval") == 0) {
 8001934:	4972      	ldr	r1, [pc, #456]	; (8001b00 <zerg_get_data_from_sd+0x2c0>)
 8001936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001938:	f7fe fc4a 	bl	80001d0 <strcmp>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d11b      	bne.n	800197a <zerg_get_data_from_sd+0x13a>
						T[id].bounceinterval = atoi(token2);
 8001942:	6938      	ldr	r0, [r7, #16]
 8001944:	f01a fa34 	bl	801bdb0 <atoi>
 8001948:	4601      	mov	r1, r0
 800194a:	486b      	ldr	r0, [pc, #428]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4403      	add	r3, r0
 8001958:	3314      	adds	r3, #20
 800195a:	6019      	str	r1, [r3, #0]
						printf(" bounceinterval_%d is: %d \n", id, T[id].bounceinterval);
 800195c:	4966      	ldr	r1, [pc, #408]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 800195e:	6a3a      	ldr	r2, [r7, #32]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	440b      	add	r3, r1
 800196a:	3314      	adds	r3, #20
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	4864      	ldr	r0, [pc, #400]	; (8001b04 <zerg_get_data_from_sd+0x2c4>)
 8001974:	f01a fbd6 	bl	801c124 <iprintf>
 8001978:	e11f      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "holdinterval") == 0) {
 800197a:	4963      	ldr	r1, [pc, #396]	; (8001b08 <zerg_get_data_from_sd+0x2c8>)
 800197c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197e:	f7fe fc27 	bl	80001d0 <strcmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11b      	bne.n	80019c0 <zerg_get_data_from_sd+0x180>
						T[id].holdinterval = atoi(token2);
 8001988:	6938      	ldr	r0, [r7, #16]
 800198a:	f01a fa11 	bl	801bdb0 <atoi>
 800198e:	4601      	mov	r1, r0
 8001990:	4859      	ldr	r0, [pc, #356]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4403      	add	r3, r0
 800199e:	3318      	adds	r3, #24
 80019a0:	6019      	str	r1, [r3, #0]
						printf(" holdinterval_%d is: %d \n", id, T[id].holdinterval);
 80019a2:	4955      	ldr	r1, [pc, #340]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 80019a4:	6a3a      	ldr	r2, [r7, #32]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	440b      	add	r3, r1
 80019b0:	3318      	adds	r3, #24
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	6a39      	ldr	r1, [r7, #32]
 80019b8:	4854      	ldr	r0, [pc, #336]	; (8001b0c <zerg_get_data_from_sd+0x2cc>)
 80019ba:	f01a fbb3 	bl	801c124 <iprintf>
 80019be:	e0fc      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "repeat") == 0) {
 80019c0:	4953      	ldr	r1, [pc, #332]	; (8001b10 <zerg_get_data_from_sd+0x2d0>)
 80019c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019c4:	f7fe fc04 	bl	80001d0 <strcmp>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d11b      	bne.n	8001a06 <zerg_get_data_from_sd+0x1c6>
						T[id].repeat = atoi(token2);
 80019ce:	6938      	ldr	r0, [r7, #16]
 80019d0:	f01a f9ee 	bl	801bdb0 <atoi>
 80019d4:	4601      	mov	r1, r0
 80019d6:	4848      	ldr	r0, [pc, #288]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4403      	add	r3, r0
 80019e4:	331c      	adds	r3, #28
 80019e6:	6019      	str	r1, [r3, #0]
						printf(" repeat_%d is: %d \n", id, T[id].repeat);
 80019e8:	4943      	ldr	r1, [pc, #268]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	440b      	add	r3, r1
 80019f6:	331c      	adds	r3, #28
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	4845      	ldr	r0, [pc, #276]	; (8001b14 <zerg_get_data_from_sd+0x2d4>)
 8001a00:	f01a fb90 	bl	801c124 <iprintf>
 8001a04:	e0d9      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "repeatinterval") == 0) {
 8001a06:	4944      	ldr	r1, [pc, #272]	; (8001b18 <zerg_get_data_from_sd+0x2d8>)
 8001a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a0a:	f7fe fbe1 	bl	80001d0 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11b      	bne.n	8001a4c <zerg_get_data_from_sd+0x20c>
						T[id].repeatinterval = atoi(token2);
 8001a14:	6938      	ldr	r0, [r7, #16]
 8001a16:	f01a f9cb 	bl	801bdb0 <atoi>
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	4836      	ldr	r0, [pc, #216]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4403      	add	r3, r0
 8001a2a:	3320      	adds	r3, #32
 8001a2c:	6019      	str	r1, [r3, #0]
						printf(" repeatinterval_%d is: %d \n", id, T[id].repeatinterval);
 8001a2e:	4932      	ldr	r1, [pc, #200]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001a30:	6a3a      	ldr	r2, [r7, #32]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3320      	adds	r3, #32
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	6a39      	ldr	r1, [r7, #32]
 8001a44:	4835      	ldr	r0, [pc, #212]	; (8001b1c <zerg_get_data_from_sd+0x2dc>)
 8001a46:	f01a fb6d 	bl	801c124 <iprintf>
 8001a4a:	e0b6      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8001a4c:	4934      	ldr	r1, [pc, #208]	; (8001b20 <zerg_get_data_from_sd+0x2e0>)
 8001a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a50:	f7fe fbbe 	bl	80001d0 <strcmp>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11b      	bne.n	8001a92 <zerg_get_data_from_sd+0x252>
						T[id].doubleclickinterval = atoi(token2);
 8001a5a:	6938      	ldr	r0, [r7, #16]
 8001a5c:	f01a f9a8 	bl	801bdb0 <atoi>
 8001a60:	4601      	mov	r1, r0
 8001a62:	4825      	ldr	r0, [pc, #148]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4403      	add	r3, r0
 8001a70:	3324      	adds	r3, #36	; 0x24
 8001a72:	6019      	str	r1, [r3, #0]
						printf(" doubleclickinterval_%d is: %d \n", id, T[id].doubleclickinterval);
 8001a74:	4920      	ldr	r1, [pc, #128]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001a76:	6a3a      	ldr	r2, [r7, #32]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	440b      	add	r3, r1
 8001a82:	3324      	adds	r3, #36	; 0x24
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	6a39      	ldr	r1, [r7, #32]
 8001a8a:	4826      	ldr	r0, [pc, #152]	; (8001b24 <zerg_get_data_from_sd+0x2e4>)
 8001a8c:	f01a fb4a 	bl	801c124 <iprintf>
 8001a90:	e093      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "preventclick") == 0) {
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <zerg_get_data_from_sd+0x2e8>)
 8001a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a96:	f7fe fb9b 	bl	80001d0 <strcmp>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d147      	bne.n	8001b30 <zerg_get_data_from_sd+0x2f0>
						T[id].preventclick = atoi(token2);
 8001aa0:	6938      	ldr	r0, [r7, #16]
 8001aa2:	f01a f985 	bl	801bdb0 <atoi>
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001aaa:	6a3a      	ldr	r2, [r7, #32]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4403      	add	r3, r0
 8001ab6:	3328      	adds	r3, #40	; 0x28
 8001ab8:	6019      	str	r1, [r3, #0]
						printf(" preventclick_%d is: %d \n", id, T[id].preventclick);
 8001aba:	490f      	ldr	r1, [pc, #60]	; (8001af8 <zerg_get_data_from_sd+0x2b8>)
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3328      	adds	r3, #40	; 0x28
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	6a39      	ldr	r1, [r7, #32]
 8001ad0:	4816      	ldr	r0, [pc, #88]	; (8001b2c <zerg_get_data_from_sd+0x2ec>)
 8001ad2:	f01a fb27 	bl	801c124 <iprintf>
 8001ad6:	e070      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
 8001ad8:	2000048c 	.word	0x2000048c
 8001adc:	2000a8c4 	.word	0x2000a8c4
 8001ae0:	2000a6e8 	.word	0x2000a6e8
 8001ae4:	2000a6c4 	.word	0x2000a6c4
 8001ae8:	2000a8b4 	.word	0x2000a8b4
 8001aec:	0801d99c 	.word	0x0801d99c
 8001af0:	0801d9d0 	.word	0x0801d9d0
 8001af4:	0801d9d4 	.word	0x0801d9d4
 8001af8:	2000a668 	.word	0x2000a668
 8001afc:	0801d9e0 	.word	0x0801d9e0
 8001b00:	0801d9f8 	.word	0x0801d9f8
 8001b04:	0801da08 	.word	0x0801da08
 8001b08:	0801da24 	.word	0x0801da24
 8001b0c:	0801da34 	.word	0x0801da34
 8001b10:	0801da50 	.word	0x0801da50
 8001b14:	0801da58 	.word	0x0801da58
 8001b18:	0801da6c 	.word	0x0801da6c
 8001b1c:	0801da7c 	.word	0x0801da7c
 8001b20:	0801da98 	.word	0x0801da98
 8001b24:	0801daac 	.word	0x0801daac
 8001b28:	0801dad0 	.word	0x0801dad0
 8001b2c:	0801dae0 	.word	0x0801dae0
					} else if (strcmp(name1, "infofield") == 0) {
 8001b30:	4935      	ldr	r1, [pc, #212]	; (8001c08 <zerg_get_data_from_sd+0x3c8>)
 8001b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b34:	f7fe fb4c 	bl	80001d0 <strcmp>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11b      	bne.n	8001b76 <zerg_get_data_from_sd+0x336>
						strcpy(T[id].infofield, token2);
 8001b3e:	6a3a      	ldr	r2, [r7, #32]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	3328      	adds	r3, #40	; 0x28
 8001b4a:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <zerg_get_data_from_sd+0x3cc>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f01a fcad 	bl	801c4b2 <strcpy>
						printf(" infofield_%d is: %s \n", id, T[id].infofield);
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	3328      	adds	r3, #40	; 0x28
 8001b64:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <zerg_get_data_from_sd+0x3cc>)
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6a39      	ldr	r1, [r7, #32]
 8001b6e:	4828      	ldr	r0, [pc, #160]	; (8001c10 <zerg_get_data_from_sd+0x3d0>)
 8001b70:	f01a fad8 	bl	801c124 <iprintf>
 8001b74:	e021      	b.n	8001bba <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "onoff") == 0) {
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <zerg_get_data_from_sd+0x3d4>)
 8001b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b7a:	f7fe fb29 	bl	80001d0 <strcmp>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11a      	bne.n	8001bba <zerg_get_data_from_sd+0x37a>
						T[id].onoff = atoi(token2);
 8001b84:	6938      	ldr	r0, [r7, #16]
 8001b86:	f01a f913 	bl	801bdb0 <atoi>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	481f      	ldr	r0, [pc, #124]	; (8001c0c <zerg_get_data_from_sd+0x3cc>)
 8001b8e:	6a3a      	ldr	r2, [r7, #32]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4403      	add	r3, r0
 8001b9a:	334c      	adds	r3, #76	; 0x4c
 8001b9c:	6019      	str	r1, [r3, #0]
						printf(" onoff_%d is: %d \n", id, T[id].onoff);
 8001b9e:	491b      	ldr	r1, [pc, #108]	; (8001c0c <zerg_get_data_from_sd+0x3cc>)
 8001ba0:	6a3a      	ldr	r2, [r7, #32]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	440b      	add	r3, r1
 8001bac:	334c      	adds	r3, #76	; 0x4c
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6a39      	ldr	r1, [r7, #32]
 8001bb4:	4818      	ldr	r0, [pc, #96]	; (8001c18 <zerg_get_data_from_sd+0x3d8>)
 8001bb6:	f01a fab5 	bl	801c124 <iprintf>
					}
					/************************************************/
				}
				y++;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1d3a      	adds	r2, r7, #4
 8001bc4:	4915      	ldr	r1, [pc, #84]	; (8001c1c <zerg_get_data_from_sd+0x3dc>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f01a fcc8 	bl	801c55c <strtok_r>
 8001bcc:	6138      	str	r0, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f ae6b 	bne.w	80018ac <zerg_get_data_from_sd+0x6c>
			}
			z++;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f107 0208 	add.w	r2, r7, #8
 8001be2:	490f      	ldr	r1, [pc, #60]	; (8001c20 <zerg_get_data_from_sd+0x3e0>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f01a fcb9 	bl	801c55c <strtok_r>
 8001bea:	6178      	str	r0, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f47f ae57 	bne.w	80018a2 <zerg_get_data_from_sd+0x62>
		}
	}
	f_close(&SDFile);
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <zerg_get_data_from_sd+0x3e4>)
 8001bf6:	f008 fe07 	bl	800a808 <f_close>
	clear_buffer();
 8001bfa:	f7ff fdeb 	bl	80017d4 <clear_buffer>
	return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0801dafc 	.word	0x0801dafc
 8001c0c:	2000a668 	.word	0x2000a668
 8001c10:	0801db08 	.word	0x0801db08
 8001c14:	0801db20 	.word	0x0801db20
 8001c18:	0801db28 	.word	0x0801db28
 8001c1c:	0801db3c 	.word	0x0801db3c
 8001c20:	0801db40 	.word	0x0801db40
 8001c24:	2000a8c4 	.word	0x2000a8c4

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c2e:	490e      	ldr	r1, [pc, #56]	; (8001c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c30:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c44:	4c0b      	ldr	r4, [pc, #44]	; (8001c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c52:	f7ff f977 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f01a f9a5 	bl	801bfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7fe fceb 	bl	8000634 <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	2000050c 	.word	0x2000050c
  ldr r2, =_sidata
 8001c6c:	080247a8 	.word	0x080247a8
  ldr r2, =_sbss
 8001c70:	2000050c 	.word	0x2000050c
  ldr r4, =_ebss
 8001c74:	20014f94 	.word	0x20014f94

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_Init+0x40>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_Init+0x40>)
 8001c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_Init+0x40>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f8fc 	bl	8001ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f7fe fffa 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7fe fe84 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000494 	.word	0x20000494
 8001ce4:	2000a8b8 	.word	0x2000a8b8

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2000a8b8 	.word	0x2000a8b8

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000494 	.word	0x20000494

08001d48 <__NVIC_SetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff4c 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eca:	f7ff ff61 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	6978      	ldr	r0, [r7, #20]
 8001ed6:	f7ff ffb1 	bl	8001e3c <NVIC_EncodePriority>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff80 	bl	8001de8 <__NVIC_SetPriority>
}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff54 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fee6 	bl	8001ce8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e099      	b.n	800205c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	e00f      	b.n	8001f6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4a:	f7ff fecd 	bl	8001ce8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d908      	bls.n	8001f6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e078      	b.n	800205c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e8      	bne.n	8001f4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_DMA_Init+0x158>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d107      	bne.n	8001fd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d117      	bne.n	800202e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa9d 	bl	8002550 <DMA_CheckFifoParam>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800202a:	2301      	movs	r3, #1
 800202c:	e016      	b.n	800205c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa54 	bl	80024e4 <DMA_CalcBaseAndBitshift>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	f010803f 	.word	0xf010803f

08002068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_DMA_Start_IT+0x26>
 800208a:	2302      	movs	r3, #2
 800208c:	e040      	b.n	8002110 <HAL_DMA_Start_IT+0xa8>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d12f      	bne.n	8002102 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f9e6 	bl	8002488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	223f      	movs	r2, #63	; 0x3f
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0216 	orr.w	r2, r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0208 	orr.w	r2, r2, #8
 80020ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e005      	b.n	800210e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800210a:	2302      	movs	r3, #2
 800210c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d004      	beq.n	8002136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00c      	b.n	8002150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002168:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_DMA_IRQHandler+0x258>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a92      	ldr	r2, [pc, #584]	; (80023b8 <HAL_DMA_IRQHandler+0x25c>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0a9b      	lsrs	r3, r3, #10
 8002174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	2208      	movs	r2, #8
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01a      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	2208      	movs	r2, #8
 80021b6:	409a      	lsls	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	2201      	movs	r2, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2201      	movs	r2, #1
 80021ec:	409a      	lsls	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f043 0202 	orr.w	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	2204      	movs	r2, #4
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d012      	beq.n	8002234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00b      	beq.n	8002234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2204      	movs	r2, #4
 8002222:	409a      	lsls	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f043 0204 	orr.w	r2, r3, #4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	2210      	movs	r2, #16
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d043      	beq.n	80022cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03c      	beq.n	80022cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	2210      	movs	r2, #16
 8002258:	409a      	lsls	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d018      	beq.n	800229e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d024      	beq.n	80022cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
 800228a:	e01f      	b.n	80022cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e016      	b.n	80022cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0208 	bic.w	r2, r2, #8
 80022ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2220      	movs	r2, #32
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 808e 	beq.w	80023fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8086 	beq.w	80023fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2220      	movs	r2, #32
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b05      	cmp	r3, #5
 8002304:	d136      	bne.n	8002374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0216 	bic.w	r2, r2, #22
 8002314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <HAL_DMA_IRQHandler+0x1da>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0208 	bic.w	r2, r2, #8
 8002344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	223f      	movs	r2, #63	; 0x3f
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002366:	2b00      	cmp	r3, #0
 8002368:	d07d      	beq.n	8002466 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
        }
        return;
 8002372:	e078      	b.n	8002466 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	2b00      	cmp	r3, #0
 8002396:	d030      	beq.n	80023fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	e02b      	b.n	80023fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d027      	beq.n	80023fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
 80023b2:	e022      	b.n	80023fa <HAL_DMA_IRQHandler+0x29e>
 80023b4:	20000000 	.word	0x20000000
 80023b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0210 	bic.w	r2, r2, #16
 80023d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d032      	beq.n	8002468 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d022      	beq.n	8002454 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	429a      	cmp	r2, r3
 8002430:	d307      	bcc.n	8002442 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f2      	bne.n	8002426 <HAL_DMA_IRQHandler+0x2ca>
 8002440:	e000      	b.n	8002444 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002442:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
 8002464:	e000      	b.n	8002468 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002466:	bf00      	nop
    }
  }
}
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop

08002470 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b40      	cmp	r3, #64	; 0x40
 80024b4:	d108      	bne.n	80024c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024c6:	e007      	b.n	80024d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3b10      	subs	r3, #16
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <DMA_CalcBaseAndBitshift+0x64>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <DMA_CalcBaseAndBitshift+0x68>)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d909      	bls.n	8002526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	1d1a      	adds	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	659a      	str	r2, [r3, #88]	; 0x58
 8002524:	e007      	b.n	8002536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	aaaaaaab 	.word	0xaaaaaaab
 800254c:	080216b8 	.word	0x080216b8

08002550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11f      	bne.n	80025aa <DMA_CheckFifoParam+0x5a>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d856      	bhi.n	800261e <DMA_CheckFifoParam+0xce>
 8002570:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <DMA_CheckFifoParam+0x28>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002589 	.word	0x08002589
 800257c:	0800259b 	.word	0x0800259b
 8002580:	08002589 	.word	0x08002589
 8002584:	0800261f 	.word	0x0800261f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d046      	beq.n	8002622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e043      	b.n	8002622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a2:	d140      	bne.n	8002626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e03d      	b.n	8002626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b2:	d121      	bne.n	80025f8 <DMA_CheckFifoParam+0xa8>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d837      	bhi.n	800262a <DMA_CheckFifoParam+0xda>
 80025ba:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <DMA_CheckFifoParam+0x70>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	080025d1 	.word	0x080025d1
 80025c4:	080025d7 	.word	0x080025d7
 80025c8:	080025d1 	.word	0x080025d1
 80025cc:	080025e9 	.word	0x080025e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e030      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d025      	beq.n	800262e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e6:	e022      	b.n	800262e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025f0:	d11f      	bne.n	8002632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025f6:	e01c      	b.n	8002632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d903      	bls.n	8002606 <DMA_CheckFifoParam+0xb6>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d003      	beq.n	800260c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002604:	e018      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      break;
 800260a:	e015      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      break;
 800261c:	e00b      	b.n	8002636 <DMA_CheckFifoParam+0xe6>
      break;
 800261e:	bf00      	nop
 8002620:	e00a      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e008      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e006      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e004      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;   
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
    }
  } 
  
  return status; 
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002658:	4baa      	ldr	r3, [pc, #680]	; (8002904 <HAL_ETH_Init+0x2bc>)
 800265a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e183      	b.n	8002976 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f005 fa22 	bl	8007acc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	4b9e      	ldr	r3, [pc, #632]	; (8002908 <HAL_ETH_Init+0x2c0>)
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	4a9d      	ldr	r2, [pc, #628]	; (8002908 <HAL_ETH_Init+0x2c0>)
 8002692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002696:	6453      	str	r3, [r2, #68]	; 0x44
 8002698:	4b9b      	ldr	r3, [pc, #620]	; (8002908 <HAL_ETH_Init+0x2c0>)
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026a4:	4b99      	ldr	r3, [pc, #612]	; (800290c <HAL_ETH_Init+0x2c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a98      	ldr	r2, [pc, #608]	; (800290c <HAL_ETH_Init+0x2c4>)
 80026aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026b0:	4b96      	ldr	r3, [pc, #600]	; (800290c <HAL_ETH_Init+0x2c4>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4994      	ldr	r1, [pc, #592]	; (800290c <HAL_ETH_Init+0x2c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026d6:	f7ff fb07 	bl	8001ce8 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026dc:	e011      	b.n	8002702 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80026de:	f7ff fb03 	bl	8001ce8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ec:	d909      	bls.n	8002702 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e139      	b.n	8002976 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e4      	bne.n	80026de <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f023 031c 	bic.w	r3, r3, #28
 8002722:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002724:	f001 ff46 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 8002728:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_ETH_Init+0x2c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d908      	bls.n	8002744 <HAL_ETH_Init+0xfc>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4a77      	ldr	r2, [pc, #476]	; (8002914 <HAL_ETH_Init+0x2cc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d804      	bhi.n	8002744 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e027      	b.n	8002794 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <HAL_ETH_Init+0x2cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d908      	bls.n	800275e <HAL_ETH_Init+0x116>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4a6d      	ldr	r2, [pc, #436]	; (8002904 <HAL_ETH_Init+0x2bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d204      	bcs.n	800275e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f043 030c 	orr.w	r3, r3, #12
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	e01a      	b.n	8002794 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4a68      	ldr	r2, [pc, #416]	; (8002904 <HAL_ETH_Init+0x2bc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d303      	bcc.n	800276e <HAL_ETH_Init+0x126>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4a6b      	ldr	r2, [pc, #428]	; (8002918 <HAL_ETH_Init+0x2d0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d911      	bls.n	8002792 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4a69      	ldr	r2, [pc, #420]	; (8002918 <HAL_ETH_Init+0x2d0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d908      	bls.n	8002788 <HAL_ETH_Init+0x140>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_ETH_Init+0x2d4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d804      	bhi.n	8002788 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e005      	b.n	8002794 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f043 0310 	orr.w	r3, r3, #16
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	e000      	b.n	8002794 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002792:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800279c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027a0:	2100      	movs	r1, #0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc17 	bl	8002fd6 <HAL_ETH_WritePHYRegister>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80027b2:	6939      	ldr	r1, [r7, #16]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fdcd 	bl	8003354 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0d7      	b.n	8002976 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80027c6:	20ff      	movs	r0, #255	; 0xff
 80027c8:	f7ff fa9a 	bl	8001d00 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a5 	beq.w	8002920 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d6:	f7ff fa87 	bl	8001ce8 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	461a      	mov	r2, r3
 80027e2:	2101      	movs	r1, #1
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fb8e 	bl	8002f06 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80027ea:	f7ff fa7d 	bl	8001ce8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d90f      	bls.n	800281c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002800:	6939      	ldr	r1, [r7, #16]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fda6 	bl	8003354 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0ac      	b.n	8002976 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0da      	beq.n	80027dc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800282a:	2100      	movs	r1, #0
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fbd2 	bl	8002fd6 <HAL_ETH_WritePHYRegister>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fd88 	bl	8003354 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800284c:	2301      	movs	r3, #1
 800284e:	e092      	b.n	8002976 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002850:	f7ff fa4a 	bl	8001ce8 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	461a      	mov	r2, r3
 800285c:	2101      	movs	r1, #1
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fb51 	bl	8002f06 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002864:	f7ff fa40 	bl	8001ce8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d90f      	bls.n	8002896 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fd69 	bl	8003354 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e06f      	b.n	8002976 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0da      	beq.n	8002856 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	461a      	mov	r2, r3
 80028a6:	2110      	movs	r1, #16
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb2c 	bl	8002f06 <HAL_ETH_ReadPHYRegister>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028b8:	6939      	ldr	r1, [r7, #16]
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fd4a 	bl	8003354 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80028c8:	2301      	movs	r3, #1
 80028ca:	e054      	b.n	8002976 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	e002      	b.n	80028e6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	e035      	b.n	8002964 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	e030      	b.n	8002964 <HAL_ETH_Init+0x31c>
 8002902:	bf00      	nop
 8002904:	03938700 	.word	0x03938700
 8002908:	40023800 	.word	0x40023800
 800290c:	40013800 	.word	0x40013800
 8002910:	01312cff 	.word	0x01312cff
 8002914:	02160ebf 	.word	0x02160ebf
 8002918:	05f5e0ff 	.word	0x05f5e0ff
 800291c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002930:	4313      	orrs	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fb4c 	bl	8002fd6 <HAL_ETH_WritePHYRegister>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002948:	6939      	ldr	r1, [r7, #16]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fd02 	bl	8003354 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e00c      	b.n	8002976 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800295c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002960:	f7ff f9ce 	bl	8001d00 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002964:	6939      	ldr	r1, [r7, #16]
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fcf4 	bl	8003354 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop

08002980 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ETH_DMATxDescListInit+0x20>
 800299c:	2302      	movs	r3, #2
 800299e:	e052      	b.n	8002a46 <HAL_ETH_DMATxDescListInit+0xc6>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e030      	b.n	8002a1e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4413      	add	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029cc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d208      	bcs.n	8002a12 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	015b      	lsls	r3, r3, #5
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4413      	add	r3, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e002      	b.n	8002a18 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3ca      	bcc.n	80029bc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a30:	3310      	adds	r3, #16
 8002a32:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_ETH_DMARxDescListInit+0x20>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e056      	b.n	8002b20 <HAL_ETH_DMARxDescListInit+0xce>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e034      	b.n	8002af8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	015b      	lsls	r3, r3, #5
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	4413      	add	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a9e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002aa6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d208      	bcs.n	8002aec <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	015b      	lsls	r3, r3, #5
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	e002      	b.n	8002af2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3c6      	bcc.n	8002a8e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ETH_TransmitFrame+0x24>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0cd      	b.n	8002cec <HAL_ETH_TransmitFrame+0x1c0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0b8      	b.n	8002cec <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da09      	bge.n	8002b98 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2212      	movs	r2, #18
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0a9      	b.n	8002cec <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d915      	bls.n	8002bce <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4a54      	ldr	r2, [pc, #336]	; (8002cf8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4b51      	ldr	r3, [pc, #324]	; (8002cf8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb6:	0a9b      	lsrs	r3, r3, #10
 8002bb8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e001      	b.n	8002bd2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d11c      	bne.n	8002c12 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002be6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002bf2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c02:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c10:	e04b      	b.n	8002caa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	e044      	b.n	8002ca2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c26:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c3c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002c46:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d116      	bne.n	8002c80 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c60:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_ETH_TransmitFrame+0x1d0>)
 8002c66:	fb02 f203 	mul.w	r2, r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002c72:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002c7e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c8e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3b6      	bcc.n	8002c18 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb2:	3314      	adds	r3, #20
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	2204      	movs	r2, #4
 8002cca:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	ac02b00b 	.word	0xac02b00b
 8002cfc:	fffffa0c 	.word	0xfffffa0c

08002d00 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e074      	b.n	8002e04 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002d2a:	e05a      	b.n	8002de2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d10d      	bne.n	8002d5e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d5c:	e041      	b.n	8002de2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
 8002d82:	e02e      	b.n	8002de2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d103      	bne.n	8002da6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002db2:	1f1a      	subs	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e010      	b.n	8002e04 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db02      	blt.n	8002df2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d99c      	bls.n	8002d2c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e20:	3314      	adds	r3, #20
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d112      	bne.n	8002e52 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f004 fefb 	bl	8007c28 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3a:	3314      	adds	r3, #20
 8002e3c:	2240      	movs	r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e50:	e01b      	b.n	8002e8a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d111      	bne.n	8002e8a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f839 	bl	8002ede <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e74:	3314      	adds	r3, #20
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e92:	3314      	adds	r3, #20
 8002e94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e98:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d112      	bne.n	8002ed6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f81e 	bl	8002ef2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ec4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b82      	cmp	r3, #130	; 0x82
 8002f26:	d101      	bne.n	8002f2c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e050      	b.n	8002fce <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2282      	movs	r2, #130	; 0x82
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 031c 	and.w	r3, r3, #28
 8002f42:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8a1b      	ldrh	r3, [r3, #16]
 8002f48:	02db      	lsls	r3, r3, #11
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0302 	bic.w	r3, r3, #2
 8002f66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f78:	f7fe feb6 	bl	8001ce8 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f7e:	e015      	b.n	8002fac <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002f80:	f7fe feb2 	bl	8001ce8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8e:	d309      	bcc.n	8002fa4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e014      	b.n	8002fce <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e4      	bne.n	8002f80 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b42      	cmp	r3, #66	; 0x42
 8002ff6:	d101      	bne.n	8002ffc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e04e      	b.n	800309a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2242      	movs	r2, #66	; 0x42
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 031c 	and.w	r3, r3, #28
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8a1b      	ldrh	r3, [r3, #16]
 8003018:	02db      	lsls	r3, r3, #11
 800301a:	b29b      	uxth	r3, r3
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003052:	f7fe fe49 	bl	8001ce8 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003058:	e015      	b.n	8003086 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800305a:	f7fe fe45 	bl	8001ce8 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003068:	d309      	bcc.n	800307e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e00d      	b.n	800309a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e4      	bne.n	800305a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_ETH_Start+0x16>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e01f      	b.n	80030f8 <HAL_ETH_Start+0x56>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fb45 	bl	8003758 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fb7c 	bl	80037cc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fc13 	bl	8003900 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fbb0 	bl	8003840 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fbdd 	bl	80038a0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ETH_Stop+0x16>
 8003112:	2302      	movs	r3, #2
 8003114:	e01f      	b.n	8003156 <HAL_ETH_Stop+0x56>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fba2 	bl	8003870 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fbcf 	bl	80038d0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fb67 	bl	8003806 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fbe1 	bl	8003900 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fb27 	bl	8003792 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_ETH_ConfigMAC+0x1c>
 8003178:	2302      	movs	r3, #2
 800317a:	e0e4      	b.n	8003346 <HAL_ETH_ConfigMAC+0x1e6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80b1 	beq.w	80032f6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_ETH_ConfigMAC+0x1f0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80031ac:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80031b2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80031b8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80031be:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80031c4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80031ca:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80031d0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80031d6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80031dc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80031e2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80031e8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80031ee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003206:	2001      	movs	r0, #1
 8003208:	f7fe fd7a 	bl	8001d00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800321c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003222:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003228:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800322e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003234:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800323a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003246:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003248:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003252:	2001      	movs	r0, #1
 8003254:	f7fe fd54 	bl	8001d00 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003268:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003272:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003282:	4013      	ands	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003290:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003296:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800329c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80032a2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80032a8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7fe fd1d 	bl	8001d00 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fe fd0a 	bl	8001d00 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	61da      	str	r2, [r3, #28]
 80032f4:	e01e      	b.n	8003334 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003304:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003326:	2001      	movs	r0, #1
 8003328:	f7fe fcea 	bl	8001d00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	ff20810f 	.word	0xff20810f

08003354 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0b0      	sub	sp, #192	; 0xc0
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003370:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003378:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003382:	2300      	movs	r3, #0
 8003384:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003386:	2300      	movs	r3, #0
 8003388:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800339a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339e:	663b      	str	r3, [r7, #96]	; 0x60
 80033a0:	e001      	b.n	80033a6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033b0:	2300      	movs	r3, #0
 80033b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80033bc:	2300      	movs	r3, #0
 80033be:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80033c0:	2340      	movs	r3, #64	; 0x40
 80033c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003412:	2300      	movs	r3, #0
 8003414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800342c:	4bac      	ldr	r3, [pc, #688]	; (80036e0 <ETH_MACDMAConfig+0x38c>)
 800342e:	4013      	ands	r3, r2
 8003430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003434:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003438:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800343c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003440:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003446:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800344a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800344e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003454:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003458:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800345a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800345c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800345e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003460:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003464:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003468:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800346a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800347c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003488:	2001      	movs	r0, #1
 800348a:	f7fe fc39 	bl	8001d00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003496:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003498:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800349a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800349c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800349e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80034a0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80034a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80034a6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80034a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80034ac:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80034ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80034b2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80034b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80034b8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80034bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80034c4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034c6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7fe fc14 	bl	8001d00 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034ea:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80034f4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003500:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003504:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003508:	4013      	ands	r3, r2
 800350a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800350e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003512:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003518:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800351a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800351e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003524:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800352a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800352c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003530:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003532:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003544:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003550:	2001      	movs	r0, #1
 8003552:	f7fe fbd5 	bl	8001d00 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800355e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003560:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003564:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800357a:	2001      	movs	r0, #1
 800357c:	f7fe fbc0 	bl	8001d00 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003588:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800358e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003592:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800359c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80035ae:	2304      	movs	r3, #4
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80035b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80035b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035d2:	2300      	movs	r3, #0
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035de:	3318      	adds	r3, #24
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80035e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <ETH_MACDMAConfig+0x390>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80035f2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80035f4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80035f6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80035f8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80035fa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80035fc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80035fe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003600:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003602:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003604:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003606:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003608:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800360a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800360e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003612:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003614:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003626:	3318      	adds	r3, #24
 8003628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800362c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	3318      	adds	r3, #24
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800363e:	2001      	movs	r0, #1
 8003640:	f7fe fb5e 	bl	8001d00 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364c:	3318      	adds	r3, #24
 800364e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003652:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003658:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800365c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003660:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003664:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003668:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800366a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800366e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800368c:	2001      	movs	r0, #1
 800368e:	f7fe fb37 	bl	8001d00 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800369e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10f      	bne.n	80036c8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	331c      	adds	r3, #28
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	331c      	adds	r3, #28
 80036c6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	461a      	mov	r2, r3
 80036ce:	2100      	movs	r1, #0
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f809 	bl	80036e8 <ETH_MACAddressConfig>
}
 80036d6:	bf00      	nop
 80036d8:	37c0      	adds	r7, #192	; 0xc0
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	ff20810f 	.word	0xff20810f
 80036e4:	f8de3f23 	.word	0xf8de3f23

080036e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3305      	adds	r3, #5
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	3204      	adds	r2, #4
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <ETH_MACAddressConfig+0x68>)
 800370a:	4413      	add	r3, r2
 800370c:	461a      	mov	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3303      	adds	r3, #3
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	061a      	lsls	r2, r3, #24
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3302      	adds	r3, #2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <ETH_MACAddressConfig+0x6c>)
 800373a:	4413      	add	r3, r2
 800373c:	461a      	mov	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40028040 	.word	0x40028040
 8003754:	40028044 	.word	0x40028044

08003758 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0208 	orr.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800377c:	2001      	movs	r0, #1
 800377e:	f000 f8e9 	bl	8003954 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f000 f8cc 	bl	8003954 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0204 	orr.w	r2, r2, #4
 80037e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80037f0:	2001      	movs	r0, #1
 80037f2:	f000 f8af 	bl	8003954 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800382a:	2001      	movs	r0, #1
 800382c:	f000 f892 	bl	8003954 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003850:	3318      	adds	r3, #24
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800385c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003860:	3318      	adds	r3, #24
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003880:	3318      	adds	r3, #24
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003890:	3318      	adds	r3, #24
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b0:	3318      	adds	r3, #24
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0202 	orr.w	r2, r2, #2
 80038bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c0:	3318      	adds	r3, #24
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e0:	3318      	adds	r3, #24
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0202 	bic.w	r2, r2, #2
 80038ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f0:	3318      	adds	r3, #24
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003914:	3318      	adds	r3, #24
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003924:	3318      	adds	r3, #24
 8003926:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003930:	3318      	adds	r3, #24
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003936:	2001      	movs	r0, #1
 8003938:	f000 f80c 	bl	8003954 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003946:	3318      	adds	r3, #24
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <ETH_Delay+0x38>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <ETH_Delay+0x3c>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003970:	bf00      	nop
  } 
  while (Delay --);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <ETH_Delay+0x1c>
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000
 8003990:	10624dd3 	.word	0x10624dd3

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e16b      	b.n	8003c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b0:	2201      	movs	r2, #1
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f040 815a 	bne.w	8003c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d005      	beq.n	80039e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d130      	bne.n	8003a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 0201 	and.w	r2, r3, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d017      	beq.n	8003a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d123      	bne.n	8003ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3208      	adds	r2, #8
 8003a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	08da      	lsrs	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b4 	beq.w	8003c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	4a5f      	ldr	r2, [pc, #380]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b28:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b36:	4a5b      	ldr	r2, [pc, #364]	; (8003ca4 <HAL_GPIO_Init+0x310>)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a52      	ldr	r2, [pc, #328]	; (8003ca8 <HAL_GPIO_Init+0x314>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <HAL_GPIO_Init+0x226>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a51      	ldr	r2, [pc, #324]	; (8003cac <HAL_GPIO_Init+0x318>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d025      	beq.n	8003bb6 <HAL_GPIO_Init+0x222>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_GPIO_Init+0x31c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x21e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4f      	ldr	r2, [pc, #316]	; (8003cb4 <HAL_GPIO_Init+0x320>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x21a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_GPIO_Init+0x324>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x216>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	; (8003cbc <HAL_GPIO_Init+0x328>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x212>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_GPIO_Init+0x32c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x20e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x20a>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00e      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bcc:	4935      	ldr	r1, [pc, #212]	; (8003ca4 <HAL_GPIO_Init+0x310>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bfe:	4a32      	ldr	r2, [pc, #200]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c04:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c28:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f ae90 	bls.w	80039b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40021400 	.word	0x40021400
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce8:	e003      	b.n	8003cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cea:	887b      	ldrh	r3, [r7, #2]
 8003cec:	041a      	lsls	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	041a      	lsls	r2, r3, #16
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43d9      	mvns	r1, r3
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	400b      	ands	r3, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	619a      	str	r2, [r3, #24]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e264      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d075      	beq.n	8003e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d52:	4ba3      	ldr	r3, [pc, #652]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d00c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5e:	4ba0      	ldr	r3, [pc, #640]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d112      	bne.n	8003d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6a:	4b9d      	ldr	r3, [pc, #628]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d76:	d10b      	bne.n	8003d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	4b99      	ldr	r3, [pc, #612]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05b      	beq.n	8003e3c <HAL_RCC_OscConfig+0x108>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d157      	bne.n	8003e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e23f      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d98:	d106      	bne.n	8003da8 <HAL_RCC_OscConfig+0x74>
 8003d9a:	4b91      	ldr	r3, [pc, #580]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a90      	ldr	r2, [pc, #576]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e01d      	b.n	8003de4 <HAL_RCC_OscConfig+0xb0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x98>
 8003db2:	4b8b      	ldr	r3, [pc, #556]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a8a      	ldr	r2, [pc, #552]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b88      	ldr	r3, [pc, #544]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a87      	ldr	r2, [pc, #540]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0xb0>
 8003dcc:	4b84      	ldr	r3, [pc, #528]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a83      	ldr	r2, [pc, #524]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a80      	ldr	r2, [pc, #512]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d013      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd ff7c 	bl	8001ce8 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd ff78 	bl	8001ce8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e204      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b76      	ldr	r3, [pc, #472]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0xc0>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd ff68 	bl	8001ce8 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fd ff64 	bl	8001ce8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1f0      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0xe8>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d063      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e4a:	4b65      	ldr	r3, [pc, #404]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b62      	ldr	r3, [pc, #392]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d11c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d116      	bne.n	8003e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	4b5c      	ldr	r3, [pc, #368]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x152>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e1c4      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b56      	ldr	r3, [pc, #344]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4952      	ldr	r1, [pc, #328]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	e03a      	b.n	8003f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <HAL_RCC_OscConfig+0x2b0>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fd ff1d 	bl	8001ce8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb2:	f7fd ff19 	bl	8001ce8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e1a5      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	4b46      	ldr	r3, [pc, #280]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4940      	ldr	r1, [pc, #256]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]
 8003ee4:	e015      	b.n	8003f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCC_OscConfig+0x2b0>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fefc 	bl	8001ce8 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fd fef8 	bl	8001ce8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e184      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d030      	beq.n	8003f80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d016      	beq.n	8003f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f26:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <HAL_RCC_OscConfig+0x2b4>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fedc 	bl	8001ce8 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f34:	f7fd fed8 	bl	8001ce8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e164      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x200>
 8003f52:	e015      	b.n	8003f80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_RCC_OscConfig+0x2b4>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fec5 	bl	8001ce8 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fd fec1 	bl	8001ce8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e14d      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80a0 	beq.w	80040ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a0e      	ldr	r2, [pc, #56]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_OscConfig+0x2b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d121      	bne.n	800400e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <HAL_RCC_OscConfig+0x2b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a07      	ldr	r2, [pc, #28]	; (8003fec <HAL_RCC_OscConfig+0x2b8>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fe87 	bl	8001ce8 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e011      	b.n	8004002 <HAL_RCC_OscConfig+0x2ce>
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	42470000 	.word	0x42470000
 8003fe8:	42470e80 	.word	0x42470e80
 8003fec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fd fe7a 	bl	8001ce8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e106      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b85      	ldr	r3, [pc, #532]	; (8004218 <HAL_RCC_OscConfig+0x4e4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x2f0>
 8004016:	4b81      	ldr	r3, [pc, #516]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a80      	ldr	r2, [pc, #512]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
 8004022:	e01c      	b.n	800405e <HAL_RCC_OscConfig+0x32a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_OscConfig+0x312>
 800402c:	4b7b      	ldr	r3, [pc, #492]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a7a      	ldr	r2, [pc, #488]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	e00b      	b.n	800405e <HAL_RCC_OscConfig+0x32a>
 8004046:	4b75      	ldr	r3, [pc, #468]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a74      	ldr	r2, [pc, #464]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a71      	ldr	r2, [pc, #452]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d015      	beq.n	8004092 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fd fe3f 	bl	8001ce8 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd fe3b 	bl	8001ce8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0c5      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ee      	beq.n	800406e <HAL_RCC_OscConfig+0x33a>
 8004090:	e014      	b.n	80040bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7fd fe29 	bl	8001ce8 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fd fe25 	bl	8001ce8 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0af      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b0:	4b5a      	ldr	r3, [pc, #360]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ee      	bne.n	800409a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c2:	4b56      	ldr	r3, [pc, #344]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4a55      	ldr	r2, [pc, #340]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 809b 	beq.w	800420e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d8:	4b50      	ldr	r3, [pc, #320]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d05c      	beq.n	800419e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d141      	bne.n	8004170 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ec:	4b4c      	ldr	r3, [pc, #304]	; (8004220 <HAL_RCC_OscConfig+0x4ec>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fd fdf9 	bl	8001ce8 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fd fdf5 	bl	8001ce8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e081      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410c:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	019b      	lsls	r3, r3, #6
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	3b01      	subs	r3, #1
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	4937      	ldr	r1, [pc, #220]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_OscConfig+0x4ec>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd fdce 	bl	8001ce8 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004150:	f7fd fdca 	bl	8001ce8 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e056      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b2e      	ldr	r3, [pc, #184]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x41c>
 800416e:	e04e      	b.n	800420e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_OscConfig+0x4ec>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fd fdb7 	bl	8001ce8 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fd fdb3 	bl	8001ce8 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e03f      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x44a>
 800419c:	e037      	b.n	800420e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e032      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_RCC_OscConfig+0x4e8>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d028      	beq.n	800420a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d121      	bne.n	800420a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d11a      	bne.n	800420a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041da:	4013      	ands	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d107      	bne.n	800420a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40007000 	.word	0x40007000
 800421c:	40023800 	.word	0x40023800
 8004220:	42470060 	.word	0x42470060

08004224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0cc      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d90c      	bls.n	8004260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b65      	ldr	r3, [pc, #404]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b63      	ldr	r3, [pc, #396]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0b8      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d020      	beq.n	80042ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004278:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a58      	ldr	r2, [pc, #352]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004290:	4b53      	ldr	r3, [pc, #332]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a52      	ldr	r2, [pc, #328]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	494d      	ldr	r1, [pc, #308]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d044      	beq.n	8004344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d119      	bne.n	8004302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e07f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e06f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e067      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004302:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 0203 	bic.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4934      	ldr	r1, [pc, #208]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004314:	f7fd fce8 	bl	8001ce8 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7fd fce4 	bl	8001ce8 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e04f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 020c 	and.w	r2, r3, #12
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	429a      	cmp	r2, r3
 8004342:	d1eb      	bne.n	800431c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d20c      	bcs.n	800436c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e032      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4916      	ldr	r1, [pc, #88]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	490e      	ldr	r1, [pc, #56]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043aa:	f000 f821 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	490a      	ldr	r1, [pc, #40]	; (80043e4 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	5ccb      	ldrb	r3, [r1, r3]
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc fc6a 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023c00 	.word	0x40023c00
 80043e0:	40023800 	.word	0x40023800
 80043e4:	080214a8 	.word	0x080214a8
 80043e8:	20000000 	.word	0x20000000
 80043ec:	20000490 	.word	0x20000490

080043f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	2300      	movs	r3, #0
 8004402:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004408:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d00d      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x40>
 8004414:	2b08      	cmp	r3, #8
 8004416:	f200 80bd 	bhi.w	8004594 <HAL_RCC_GetSysClockFreq+0x1a4>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x34>
 800441e:	2b04      	cmp	r3, #4
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x3a>
 8004422:	e0b7      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b61      	ldr	r3, [pc, #388]	; (80045ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004426:	60bb      	str	r3, [r7, #8]
       break;
 8004428:	e0b7      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442a:	4b61      	ldr	r3, [pc, #388]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800442c:	60bb      	str	r3, [r7, #8]
      break;
 800442e:	e0b4      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004430:	4b5d      	ldr	r3, [pc, #372]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004438:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800443a:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d04d      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004446:	4b58      	ldr	r3, [pc, #352]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	099b      	lsrs	r3, r3, #6
 800444c:	461a      	mov	r2, r3
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	ea02 0800 	and.w	r8, r2, r0
 800445e:	ea03 0901 	and.w	r9, r3, r1
 8004462:	4640      	mov	r0, r8
 8004464:	4649      	mov	r1, r9
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	014b      	lsls	r3, r1, #5
 8004470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004474:	0142      	lsls	r2, r0, #5
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	ebb0 0008 	subs.w	r0, r0, r8
 800447e:	eb61 0109 	sbc.w	r1, r1, r9
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	018b      	lsls	r3, r1, #6
 800448c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004490:	0182      	lsls	r2, r0, #6
 8004492:	1a12      	subs	r2, r2, r0
 8004494:	eb63 0301 	sbc.w	r3, r3, r1
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	f04f 0100 	mov.w	r1, #0
 80044a0:	00d9      	lsls	r1, r3, #3
 80044a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044a6:	00d0      	lsls	r0, r2, #3
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	eb12 0208 	adds.w	r2, r2, r8
 80044b0:	eb43 0309 	adc.w	r3, r3, r9
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	0259      	lsls	r1, r3, #9
 80044be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044c2:	0250      	lsls	r0, r2, #9
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f7fb fee4 	bl	80002a0 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e04a      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	461a      	mov	r2, r3
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	ea02 0400 	and.w	r4, r2, r0
 80044fa:	ea03 0501 	and.w	r5, r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	014b      	lsls	r3, r1, #5
 800450c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004510:	0142      	lsls	r2, r0, #5
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	1b00      	subs	r0, r0, r4
 8004518:	eb61 0105 	sbc.w	r1, r1, r5
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	018b      	lsls	r3, r1, #6
 8004526:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800452a:	0182      	lsls	r2, r0, #6
 800452c:	1a12      	subs	r2, r2, r0
 800452e:	eb63 0301 	sbc.w	r3, r3, r1
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	00d9      	lsls	r1, r3, #3
 800453c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004540:	00d0      	lsls	r0, r2, #3
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	1912      	adds	r2, r2, r4
 8004548:	eb45 0303 	adc.w	r3, r5, r3
 800454c:	f04f 0000 	mov.w	r0, #0
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	0299      	lsls	r1, r3, #10
 8004556:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800455a:	0290      	lsls	r0, r2, #10
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	461a      	mov	r2, r3
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	f7fb fe98 	bl	80002a0 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	3301      	adds	r3, #1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004596:	60bb      	str	r3, [r7, #8]
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	68bb      	ldr	r3, [r7, #8]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	080214b8 	.word	0x080214b8

080045f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045f8:	f7ff ffdc 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0b5b      	lsrs	r3, r3, #13
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	080214b8 	.word	0x080214b8

0800461c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	220f      	movs	r2, #15
 800462a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_GetClockConfig+0x5c>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCC_GetClockConfig+0x5c>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_RCC_GetClockConfig+0x5c>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_GetClockConfig+0x5c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <HAL_RCC_GetClockConfig+0x60>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0207 	and.w	r2, r3, #7
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	601a      	str	r2, [r3, #0]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	40023c00 	.word	0x40023c00

08004680 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e022      	b.n	80046d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fc f9b5 	bl	8000a14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2203      	movs	r2, #3
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f814 	bl	80046e0 <HAL_SD_InitCard>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e00a      	b.n	80046d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af04      	add	r7, sp, #16
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80046fc:	2376      	movs	r3, #118	; 0x76
 80046fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681d      	ldr	r5, [r3, #0]
 8004704:	466c      	mov	r4, sp
 8004706:	f107 0314 	add.w	r3, r7, #20
 800470a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800470e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004718:	4628      	mov	r0, r5
 800471a:	f002 f8a3 	bl	8006864 <SDIO_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e04c      	b.n	80047ca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004730:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <HAL_SD_InitCard+0xf4>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f002 f8db 	bl	80068f6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <HAL_SD_InitCard+0xf4>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 f804 	bl	8005754 <SD_PowerON>
 800474c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e02e      	b.n	80047ca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 ff25 	bl	80055bc <SD_InitCard>
 8004772:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e01b      	b.n	80047ca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800479a:	4618      	mov	r0, r3
 800479c:	f002 f93e 	bl	8006a1c <SDMMC_CmdBlockLength>
 80047a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <HAL_SD_InitCard+0xf8>)
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3728      	adds	r7, #40	; 0x28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bdb0      	pop	{r4, r5, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	422580a0 	.word	0x422580a0
 80047d8:	004005ff 	.word	0x004005ff

080047dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d107      	bne.n	8004804 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0c0      	b.n	8004986 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 80b9 	bne.w	8004984 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	441a      	add	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	429a      	cmp	r2, r3
 8004824:	d907      	bls.n	8004836 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e0a7      	b.n	8004986 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2203      	movs	r2, #3
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4a4c      	ldr	r2, [pc, #304]	; (8004990 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	4a4b      	ldr	r2, [pc, #300]	; (8004994 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2200      	movs	r2, #0
 8004870:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3380      	adds	r3, #128	; 0x80
 80048a0:	4619      	mov	r1, r3
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	025b      	lsls	r3, r3, #9
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	f7fd fbdd 	bl	8002068 <HAL_DMA_Start_IT>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a33      	ldr	r2, [pc, #204]	; (8004998 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e050      	b.n	8004986 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d002      	beq.n	80048f8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	025b      	lsls	r3, r3, #9
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048fc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004904:	2390      	movs	r3, #144	; 0x90
 8004906:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004908:	2302      	movs	r3, #2
 800490a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800490c:	2300      	movs	r3, #0
 800490e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004910:	2301      	movs	r3, #1
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f107 0210 	add.w	r2, r7, #16
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f002 f850 	bl	80069c4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d90a      	bls.n	8004940 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2282      	movs	r2, #130	; 0x82
 800492e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	4618      	mov	r0, r3
 8004938:	f002 f8b4 	bl	8006aa4 <SDMMC_CmdReadMultiBlock>
 800493c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800493e:	e009      	b.n	8004954 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2281      	movs	r2, #129	; 0x81
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494c:	4618      	mov	r0, r3
 800494e:	f002 f887 	bl	8006a60 <SDMMC_CmdReadSingleBlock>
 8004952:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d012      	beq.n	8004980 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	431a      	orrs	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e002      	b.n	8004986 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	3730      	adds	r7, #48	; 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	080053cb 	.word	0x080053cb
 8004994:	0800543d 	.word	0x0800543d
 8004998:	004005ff 	.word	0x004005ff
 800499c:	4225858c 	.word	0x4225858c

080049a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0c5      	b.n	8004b54 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f040 80be 	bne.w	8004b52 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80049dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d907      	bls.n	80049fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e0ac      	b.n	8004b54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	4a4e      	ldr	r2, [pc, #312]	; (8004b5c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004a24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	4a4d      	ldr	r2, [pc, #308]	; (8004b60 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004a2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	2200      	movs	r2, #0
 8004a34:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d002      	beq.n	8004a44 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	025b      	lsls	r3, r3, #9
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d90a      	bls.n	8004a60 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22a0      	movs	r2, #160	; 0xa0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a56:	4618      	mov	r0, r3
 8004a58:	f002 f868 	bl	8006b2c <SDMMC_CmdWriteMultiBlock>
 8004a5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a5e:	e009      	b.n	8004a74 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2290      	movs	r2, #144	; 0x90
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f002 f83b 	bl	8006ae8 <SDMMC_CmdWriteSingleBlock>
 8004a72:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a39      	ldr	r2, [pc, #228]	; (8004b64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e059      	b.n	8004b54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004aa0:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	2240      	movs	r2, #64	; 0x40
 8004aac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3380      	adds	r3, #128	; 0x80
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	f7fd fac3 	bl	8002068 <HAL_DMA_Start_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01c      	beq.n	8004b22 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004af6:	f023 0302 	bic.w	r3, r3, #2
 8004afa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e018      	b.n	8004b54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	025b      	lsls	r3, r3, #9
 8004b2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b2e:	2390      	movs	r3, #144	; 0x90
 8004b30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f107 0210 	add.w	r2, r7, #16
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 ff3b 	bl	80069c4 <SDIO_ConfigData>

      return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
  }
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3730      	adds	r7, #48	; 0x30
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	080053a1 	.word	0x080053a1
 8004b60:	0800543d 	.word	0x0800543d
 8004b64:	004005ff 	.word	0x004005ff
 8004b68:	4225858c 	.word	0x4225858c

08004b6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_SD_IRQHandler+0x2e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fffd 	bl	8005b92 <SD_Read_IT>
 8004b98:	e165      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 808f 	beq.w	8004cc8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004bc2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004bc6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d039      	beq.n	8004c56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_SD_IRQHandler+0x8a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d011      	beq.n	8004c1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 ffb8 	bl	8006b70 <SDMMC_CmdStopTransfer>
 8004c00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f92f 	bl	8004e78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_SD_IRQHandler+0xda>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f002 fc26 	bl	8007498 <HAL_SD_RxCpltCallback>
 8004c4c:	e10b      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f002 fc18 	bl	8007484 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c54:	e107      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8102 	beq.w	8004e66 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d011      	beq.n	8004c90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 ff7d 	bl	8006b70 <SDMMC_CmdStopTransfer>
 8004c76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8f4 	bl	8004e78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80e5 	bne.w	8004e66 <HAL_SD_IRQHandler+0x2fa>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 80df 	bne.w	8004e66 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0208 	bic.w	r2, r2, #8
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f002 fbdf 	bl	8007484 <HAL_SD_TxCpltCallback>
}
 8004cc6:	e0ce      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_SD_IRQHandler+0x17c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 ffa7 	bl	8005c34 <SD_Write_IT>
 8004ce6:	e0be      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cee:	f240 233a 	movw	r3, #570	; 0x23a
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80b6 	beq.w	8004e66 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	f043 0202 	orr.w	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f043 0208 	orr.w	r2, r3, #8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	f043 0210 	orr.w	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	f043 0208 	orr.w	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f240 723a 	movw	r2, #1850	; 0x73a
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004d94:	f023 0302 	bic.w	r3, r3, #2
 8004d98:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fee6 	bl	8006b70 <SDMMC_CmdStopTransfer>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f855 	bl	8004e78 <HAL_SD_ErrorCallback>
}
 8004dce:	e04a      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d045      	beq.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <HAL_SD_IRQHandler+0x282>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_SD_IRQHandler+0x304>)
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd f98c 	bl	8002118 <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02f      	beq.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fb68 	bl	80054e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e10:	e029      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <HAL_SD_IRQHandler+0x2ba>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d011      	beq.n	8004e4a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <HAL_SD_IRQHandler+0x308>)
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fd f970 	bl	8002118 <HAL_DMA_Abort_IT>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d013      	beq.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fb83 	bl	800554e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e48:	e00d      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 fb06 	bl	8007470 <HAL_SD_AbortCallback>
}
 8004e64:	e7ff      	b.n	8004e66 <HAL_SD_IRQHandler+0x2fa>
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	080054e1 	.word	0x080054e1
 8004e74:	0800554f 	.word	0x0800554f

08004e78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9a:	0f9b      	lsrs	r3, r3, #30
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea6:	0e9b      	lsrs	r3, r3, #26
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eec:	0d1b      	lsrs	r3, r3, #20
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0a:	0bdb      	lsrs	r3, r3, #15
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1c:	0b9b      	lsrs	r3, r3, #14
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2e:	0b5b      	lsrs	r3, r3, #13
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f40:	0b1b      	lsrs	r3, r3, #12
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d163      	bne.n	8005024 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f60:	009a      	lsls	r2, r3, #2
 8004f62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f6c:	0f92      	lsrs	r2, r2, #30
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f78:	0edb      	lsrs	r3, r3, #27
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	0e1b      	lsrs	r3, r3, #24
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9c:	0d5b      	lsrs	r3, r3, #21
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fae:	0c9b      	lsrs	r3, r3, #18
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc0:	0bdb      	lsrs	r3, r3, #15
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	7e1b      	ldrb	r3, [r3, #24]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	3302      	adds	r3, #2
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fee:	fb02 f203 	mul.w	r2, r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	7a1b      	ldrb	r3, [r3, #8]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	2201      	movs	r2, #1
 8005002:	409a      	lsls	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005010:	0a52      	lsrs	r2, r2, #9
 8005012:	fb02 f203 	mul.w	r2, r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
 8005022:	e031      	b.n	8005088 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	2b01      	cmp	r3, #1
 800502a:	d11d      	bne.n	8005068 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005030:	041b      	lsls	r3, r3, #16
 8005032:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	3301      	adds	r3, #1
 8005048:	029a      	lsls	r2, r3, #10
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
 8005066:	e00f      	b.n	8005088 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_SD_GetCardCSD+0x344>)
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e09d      	b.n	80051c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508c:	0b9b      	lsrs	r3, r3, #14
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	b2da      	uxtb	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	0fdb      	lsrs	r3, r3, #31
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	0f5b      	lsrs	r3, r3, #29
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	0e9b      	lsrs	r3, r3, #26
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	0d9b      	lsrs	r3, r3, #22
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	0d5b      	lsrs	r3, r3, #21
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	b2da      	uxtb	r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	0bdb      	lsrs	r3, r3, #15
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	0b9b      	lsrs	r3, r3, #14
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	0b5b      	lsrs	r3, r3, #13
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	0b1b      	lsrs	r3, r3, #12
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	0a9b      	lsrs	r3, r3, #10
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	004005ff 	.word	0x004005ff

080051d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800522c:	b5b0      	push	{r4, r5, r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af04      	add	r7, sp, #16
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2203      	movs	r2, #3
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	2b03      	cmp	r3, #3
 800524a:	d02e      	beq.n	80052aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d106      	bne.n	8005262 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
 8005260:	e029      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d10a      	bne.n	8005280 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fb28 	bl	80058c0 <SD_WideBus_Enable>
 8005270:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
 800527e:	e01a      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fb65 	bl	8005956 <SD_WideBus_Disable>
 800528c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
 800529a:	e00c      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
 80052a8:	e005      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a26      	ldr	r2, [pc, #152]	; (800535c <HAL_SD_ConfigWideBusOperation+0x130>)
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052d4:	e01f      	b.n	8005316 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681d      	ldr	r5, [r3, #0]
 80052fc:	466c      	mov	r4, sp
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005310:	4628      	mov	r0, r5
 8005312:	f001 faa7 	bl	8006864 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fb7c 	bl	8006a1c <SDMMC_CmdBlockLength>
 8005324:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800534e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005352:	4618      	mov	r0, r3
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
 800535a:	bf00      	nop
 800535c:	004005ff 	.word	0x004005ff

08005360 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa7c 	bl	8005870 <SD_SendStatus>
 8005378:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	0a5b      	lsrs	r3, r3, #9
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005396:	693b      	ldr	r3, [r7, #16]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	2b82      	cmp	r3, #130	; 0x82
 80053de:	d111      	bne.n	8005404 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fbc3 	bl	8006b70 <SDMMC_CmdStopTransfer>
 80053ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fd3a 	bl	8004e78 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0208 	bic.w	r2, r2, #8
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f240 523a 	movw	r2, #1338	; 0x53a
 800541c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f002 f833 	bl	8007498 <HAL_SD_RxCpltCallback>
#endif
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fd f810 	bl	8002470 <HAL_DMA_GetError>
 8005450:	4603      	mov	r3, r0
 8005452:	2b02      	cmp	r3, #2
 8005454:	d03e      	beq.n	80054d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d002      	beq.n	8005472 <SD_DMAError+0x36>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d12d      	bne.n	80054ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a19      	ldr	r2, [pc, #100]	; (80054dc <SD_DMAError+0xa0>)
 8005478:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005496:	6978      	ldr	r0, [r7, #20]
 8005498:	f7ff ff62 	bl	8005360 <HAL_SD_GetCardState>
 800549c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d002      	beq.n	80054aa <SD_DMAError+0x6e>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d10a      	bne.n	80054c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fb5e 	bl	8006b70 <SDMMC_CmdStopTransfer>
 80054b4:	4602      	mov	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	431a      	orrs	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80054ce:	6978      	ldr	r0, [r7, #20]
 80054d0:	f7ff fcd2 	bl	8004e78 <HAL_SD_ErrorCallback>
#endif
  }
}
 80054d4:	bf00      	nop
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	004005ff 	.word	0x004005ff

080054e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff ff31 	bl	8005360 <HAL_SD_GetCardState>
 80054fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b06      	cmp	r3, #6
 8005512:	d002      	beq.n	800551a <SD_DMATxAbort+0x3a>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b05      	cmp	r3, #5
 8005518:	d10a      	bne.n	8005530 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fb26 	bl	8006b70 <SDMMC_CmdStopTransfer>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	431a      	orrs	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f001 ff99 	bl	8007470 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800553e:	e002      	b.n	8005546 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff fc99 	bl	8004e78 <HAL_SD_ErrorCallback>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f240 523a 	movw	r2, #1338	; 0x53a
 8005564:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff fefa 	bl	8005360 <HAL_SD_GetCardState>
 800556c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d002      	beq.n	8005588 <SD_DMARxAbort+0x3a>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b05      	cmp	r3, #5
 8005586:	d10a      	bne.n	800559e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f001 faef 	bl	8006b70 <SDMMC_CmdStopTransfer>
 8005592:	4602      	mov	r2, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 ff62 	bl	8007470 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80055ac:	e002      	b.n	80055b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff fc62 	bl	8004e78 <HAL_SD_ErrorCallback>
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b094      	sub	sp, #80	; 0x50
 80055c0:	af04      	add	r7, sp, #16
 80055c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80055c4:	2301      	movs	r3, #1
 80055c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f9a1 	bl	8006914 <SDIO_GetPowerState>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80055dc:	e0b6      	b.n	800574c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d02f      	beq.n	8005646 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fbca 	bl	8006d84 <SDMMC_CmdSendCID>
 80055f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <SD_InitCard+0x40>
    {
      return errorstate;
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	e0a7      	b.n	800574c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f001 f9cb 	bl	800699e <SDIO_GetResponse>
 8005608:	4602      	mov	r2, r0
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2104      	movs	r1, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f001 f9c2 	bl	800699e <SDIO_GetResponse>
 800561a:	4602      	mov	r2, r0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2108      	movs	r1, #8
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f9b9 	bl	800699e <SDIO_GetResponse>
 800562c:	4602      	mov	r2, r0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	210c      	movs	r1, #12
 8005638:	4618      	mov	r0, r3
 800563a:	f001 f9b0 	bl	800699e <SDIO_GetResponse>
 800563e:	4602      	mov	r2, r0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	2b03      	cmp	r3, #3
 800564c:	d00d      	beq.n	800566a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f107 020e 	add.w	r2, r7, #14
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f001 fbd0 	bl	8006dfe <SDMMC_CmdSetRelAdd>
 800565e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <SD_InitCard+0xae>
    {
      return errorstate;
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	e070      	b.n	800574c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	2b03      	cmp	r3, #3
 8005670:	d036      	beq.n	80056e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f001 fb9a 	bl	8006dc0 <SDMMC_CmdSendCSD>
 800568c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800568e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	e059      	b.n	800574c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 f97d 	bl	800699e <SDIO_GetResponse>
 80056a4:	4602      	mov	r2, r0
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2104      	movs	r1, #4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 f974 	bl	800699e <SDIO_GetResponse>
 80056b6:	4602      	mov	r2, r0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2108      	movs	r1, #8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 f96b 	bl	800699e <SDIO_GetResponse>
 80056c8:	4602      	mov	r2, r0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	210c      	movs	r1, #12
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 f962 	bl	800699e <SDIO_GetResponse>
 80056da:	4602      	mov	r2, r0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2104      	movs	r1, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 f959 	bl	800699e <SDIO_GetResponse>
 80056ec:	4603      	mov	r3, r0
 80056ee:	0d1a      	lsrs	r2, r3, #20
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80056f4:	f107 0310 	add.w	r3, r7, #16
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fbc6 	bl	8004e8c <HAL_SD_GetCardCSD>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800570a:	e01f      	b.n	800574c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	461a      	mov	r2, r3
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	4608      	mov	r0, r1
 800571e:	f001 fa49 	bl	8006bb4 <SDMMC_CmdSelDesel>
 8005722:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <SD_InitCard+0x172>
  {
    return errorstate;
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	e00e      	b.n	800574c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	466c      	mov	r4, sp
 8005736:	f103 0210 	add.w	r2, r3, #16
 800573a:	ca07      	ldmia	r2, {r0, r1, r2}
 800573c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005740:	3304      	adds	r3, #4
 8005742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005744:	4628      	mov	r0, r5
 8005746:	f001 f88d 	bl	8006864 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3740      	adds	r7, #64	; 0x40
 8005750:	46bd      	mov	sp, r7
 8005752:	bdb0      	pop	{r4, r5, r7, pc}

08005754 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fa44 	bl	8006bfa <SDMMC_CmdGoIdleState>
 8005772:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <SD_PowerON+0x2a>
  {
    return errorstate;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	e072      	b.n	8005864 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f001 fa57 	bl	8006c36 <SDMMC_CmdOperCond>
 8005788:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fa2d 	bl	8006bfa <SDMMC_CmdGoIdleState>
 80057a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	e05b      	b.n	8005864 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d137      	bne.n	800582a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fa57 	bl	8006c74 <SDMMC_CmdAppCommand>
 80057c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d02d      	beq.n	800582a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057d2:	e047      	b.n	8005864 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fa4a 	bl	8006c74 <SDMMC_CmdAppCommand>
 80057e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <SD_PowerON+0x98>
    {
      return errorstate;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	e03b      	b.n	8005864 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	491e      	ldr	r1, [pc, #120]	; (800586c <SD_PowerON+0x118>)
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fa60 	bl	8006cb8 <SDMMC_CmdAppOperCommand>
 80057f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005804:	e02e      	b.n	8005864 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f001 f8c6 	bl	800699e <SDIO_GetResponse>
 8005812:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	0fdb      	lsrs	r3, r3, #31
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <SD_PowerON+0xcc>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <SD_PowerON+0xce>
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]

    count++;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3301      	adds	r3, #1
 8005828:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005830:	4293      	cmp	r3, r2
 8005832:	d802      	bhi.n	800583a <SD_PowerON+0xe6>
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0cc      	beq.n	80057d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005840:	4293      	cmp	r3, r2
 8005842:	d902      	bls.n	800584a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005848:	e00c      	b.n	8005864 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
 800585a:	e002      	b.n	8005862 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	c1100000 	.word	0xc1100000

08005870 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005884:	e018      	b.n	80058b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f001 fad4 	bl	8006e40 <SDMMC_CmdSendStatus>
 8005898:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e009      	b.n	80058b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 f877 	bl	800699e <SDIO_GetResponse>
 80058b0:	4602      	mov	r2, r0
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 f861 	bl	800699e <SDIO_GetResponse>
 80058dc:	4603      	mov	r3, r0
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e6:	d102      	bne.n	80058ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058ec:	e02f      	b.n	800594e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80058ee:	f107 030c 	add.w	r3, r7, #12
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f879 	bl	80059ec <SD_FindSCR>
 80058fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	e023      	b.n	800594e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01c      	beq.n	800594a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f001 f9a9 	bl	8006c74 <SDMMC_CmdAppCommand>
 8005922:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	e00f      	b.n	800594e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f9e2 	bl	8006cfe <SDMMC_CmdBusWidth>
 800593a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	e003      	b.n	800594e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005946:	2300      	movs	r3, #0
 8005948:	e001      	b.n	800594e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800594a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f001 f816 	bl	800699e <SDIO_GetResponse>
 8005972:	4603      	mov	r3, r0
 8005974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597c:	d102      	bne.n	8005984 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800597e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005982:	e02f      	b.n	80059e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f82e 	bl	80059ec <SD_FindSCR>
 8005990:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	e023      	b.n	80059e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01c      	beq.n	80059e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f001 f95e 	bl	8006c74 <SDMMC_CmdAppCommand>
 80059b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	e00f      	b.n	80059e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f997 	bl	8006cfe <SDMMC_CmdBusWidth>
 80059d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	e003      	b.n	80059e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80059dc:	2300      	movs	r3, #0
 80059de:	e001      	b.n	80059e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b08f      	sub	sp, #60	; 0x3c
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059f6:	f7fc f977 	bl	8001ce8 <HAL_GetTick>
 80059fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005a00:	2300      	movs	r3, #0
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2108      	movs	r1, #8
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f802 	bl	8006a1c <SDMMC_CmdBlockLength>
 8005a18:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	e0b2      	b.n	8005b8a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f001 f91f 	bl	8006c74 <SDMMC_CmdAppCommand>
 8005a36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	e0a3      	b.n	8005b8a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005a48:	2308      	movs	r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005a4c:	2330      	movs	r3, #48	; 0x30
 8005a4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005a50:	2302      	movs	r3, #2
 8005a52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f107 0210 	add.w	r2, r7, #16
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 ffac 	bl	80069c4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f966 	bl	8006d42 <SDMMC_CmdSendSCR>
 8005a76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d02a      	beq.n	8005ad4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	e083      	b.n	8005b8a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	f107 0208 	add.w	r2, r7, #8
 8005a9c:	18d4      	adds	r4, r2, r3
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	f000 ff0b 	bl	80068ba <SDIO_ReadFIFO>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	6023      	str	r3, [r4, #0]
      index++;
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	3301      	adds	r3, #1
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
 8005aae:	e006      	b.n	8005abe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d012      	beq.n	8005ae4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005abe:	f7fc f913 	bl	8001ce8 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d102      	bne.n	8005ad4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ace:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ad2:	e05a      	b.n	8005b8a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0cf      	beq.n	8005a82 <SD_FindSCR+0x96>
 8005ae2:	e000      	b.n	8005ae6 <SD_FindSCR+0xfa>
      break;
 8005ae4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2208      	movs	r2, #8
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005afc:	2308      	movs	r3, #8
 8005afe:	e044      	b.n	8005b8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2202      	movs	r2, #2
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e037      	b.n	8005b8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005b30:	2320      	movs	r3, #32
 8005b32:	e02a      	b.n	8005b8a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b3c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	061a      	lsls	r2, r3, #24
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	0e1b      	lsrs	r3, r3, #24
 8005b5a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	601a      	str	r2, [r3, #0]
    scr++;
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	3304      	adds	r3, #4
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	061a      	lsls	r2, r3, #24
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	373c      	adds	r7, #60	; 0x3c
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd90      	pop	{r4, r7, pc}

08005b92 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d03f      	beq.n	8005c2c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e033      	b.n	8005c1a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fe7f 	bl	80068ba <SDIO_ReadFIFO>
 8005bbc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0e1b      	lsrs	r3, r3, #24
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3301      	adds	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b07      	cmp	r3, #7
 8005c1e:	d9c8      	bls.n	8005bb2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d043      	beq.n	8005cd6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e037      	b.n	8005cc4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	041a      	lsls	r2, r3, #16
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	061a      	lsls	r2, r3, #24
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f107 0208 	add.w	r2, r7, #8
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fe0b 	bl	80068d4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b07      	cmp	r3, #7
 8005cc8:	d9c4      	bls.n	8005c54 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e041      	b.n	8005d74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f839 	bl	8005d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f000 f9d7 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d001      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e04e      	b.n	8005e46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a23      	ldr	r2, [pc, #140]	; (8005e54 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d022      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d01d      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1e      	ldr	r2, [pc, #120]	; (8005e5c <HAL_TIM_Base_Start_IT+0xcc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1c      	ldr	r2, [pc, #112]	; (8005e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1b      	ldr	r2, [pc, #108]	; (8005e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x80>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d111      	bne.n	8005e34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d010      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e32:	e007      	b.n	8005e44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40010400 	.word	0x40010400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	40001800 	.word	0x40001800

08005e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0202 	mvn.w	r2, #2
 8005e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8ee 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8e0 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8f1 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0204 	mvn.w	r2, #4
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f8c4 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f8b6 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8c7 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d122      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d11b      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0208 	mvn.w	r2, #8
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f89a 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f88c 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f89d 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d122      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d11b      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0210 	mvn.w	r2, #16
 8005f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2208      	movs	r2, #8
 8005f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f870 	bl	8006094 <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f862 	bl	8006080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f873 	bl	80060a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0201 	mvn.w	r2, #1
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fa fccc 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b80      	cmp	r3, #128	; 0x80
 800600e:	d107      	bne.n	8006020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f902 	bl	8006224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d10e      	bne.n	800604c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d107      	bne.n	800604c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f838 	bl	80060bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b20      	cmp	r3, #32
 8006058:	d10e      	bne.n	8006078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b20      	cmp	r3, #32
 8006066:	d107      	bne.n	8006078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0220 	mvn.w	r2, #32
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8cc 	bl	8006210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a40      	ldr	r2, [pc, #256]	; (80061e4 <TIM_Base_SetConfig+0x114>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d00f      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3d      	ldr	r2, [pc, #244]	; (80061e8 <TIM_Base_SetConfig+0x118>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3c      	ldr	r2, [pc, #240]	; (80061ec <TIM_Base_SetConfig+0x11c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3b      	ldr	r2, [pc, #236]	; (80061f0 <TIM_Base_SetConfig+0x120>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a3a      	ldr	r2, [pc, #232]	; (80061f4 <TIM_Base_SetConfig+0x124>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d108      	bne.n	8006122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <TIM_Base_SetConfig+0x114>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006130:	d027      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <TIM_Base_SetConfig+0x118>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d023      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <TIM_Base_SetConfig+0x11c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2a      	ldr	r2, [pc, #168]	; (80061f0 <TIM_Base_SetConfig+0x120>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a29      	ldr	r2, [pc, #164]	; (80061f4 <TIM_Base_SetConfig+0x124>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d017      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <TIM_Base_SetConfig+0x128>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a27      	ldr	r2, [pc, #156]	; (80061fc <TIM_Base_SetConfig+0x12c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a26      	ldr	r2, [pc, #152]	; (8006200 <TIM_Base_SetConfig+0x130>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a25      	ldr	r2, [pc, #148]	; (8006204 <TIM_Base_SetConfig+0x134>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a24      	ldr	r2, [pc, #144]	; (8006208 <TIM_Base_SetConfig+0x138>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a23      	ldr	r2, [pc, #140]	; (800620c <TIM_Base_SetConfig+0x13c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d108      	bne.n	8006194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <TIM_Base_SetConfig+0x114>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0xf8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <TIM_Base_SetConfig+0x124>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800
 8006204:	40001800 	.word	0x40001800
 8006208:	40001c00 	.word	0x40001c00
 800620c:	40002000 	.word	0x40002000

08006210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e03f      	b.n	80062ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fa fcd8 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	; 0x24
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f929 	bl	80064d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af02      	add	r7, sp, #8
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d17c      	bne.n	80063ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_UART_Transmit+0x2c>
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e075      	b.n	80063ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UART_Transmit+0x3e>
 800630c:	2302      	movs	r3, #2
 800630e:	e06e      	b.n	80063ee <HAL_UART_Transmit+0x11c>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	; 0x21
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006326:	f7fb fcdf 	bl	8001ce8 <HAL_GetTick>
 800632a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006340:	d108      	bne.n	8006354 <HAL_UART_Transmit+0x82>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e003      	b.n	800635c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006364:	e02a      	b.n	80063bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f840 	bl	80063f6 <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e036      	b.n	80063ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3302      	adds	r3, #2
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e007      	b.n	80063ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cf      	bne.n	8006366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f810 	bl	80063f6 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e006      	b.n	80063ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b090      	sub	sp, #64	; 0x40
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	4613      	mov	r3, r2
 8006404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006406:	e050      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640e:	d04c      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <UART_WaitOnFlagUntilTimeout+0x30>
 8006416:	f7fb fc67 	bl	8001ce8 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006422:	429a      	cmp	r2, r3
 8006424:	d241      	bcs.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006446:	637a      	str	r2, [r7, #52]	; 0x34
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	613b      	str	r3, [r7, #16]
   return(result);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647a:	623a      	str	r2, [r7, #32]
 800647c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	6a3a      	ldr	r2, [r7, #32]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	61bb      	str	r3, [r7, #24]
   return(result);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e00f      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d09f      	beq.n	8006408 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3740      	adds	r7, #64	; 0x40
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	b09f      	sub	sp, #124	; 0x7c
 80064da:	af00      	add	r7, sp, #0
 80064dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	68d9      	ldr	r1, [r3, #12]
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	ea40 0301 	orr.w	r3, r0, r1
 80064f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	431a      	orrs	r2, r3
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	431a      	orrs	r2, r3
 8006506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4313      	orrs	r3, r2
 800650c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006518:	f021 010c 	bic.w	r1, r1, #12
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006522:	430b      	orrs	r3, r1
 8006524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006532:	6999      	ldr	r1, [r3, #24]
 8006534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	ea40 0301 	orr.w	r3, r0, r1
 800653c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4bc5      	ldr	r3, [pc, #788]	; (8006858 <UART_SetConfig+0x384>)
 8006544:	429a      	cmp	r2, r3
 8006546:	d004      	beq.n	8006552 <UART_SetConfig+0x7e>
 8006548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4bc3      	ldr	r3, [pc, #780]	; (800685c <UART_SetConfig+0x388>)
 800654e:	429a      	cmp	r2, r3
 8006550:	d103      	bne.n	800655a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006552:	f7fe f84f 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8006556:	6778      	str	r0, [r7, #116]	; 0x74
 8006558:	e002      	b.n	8006560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800655a:	f7fe f837 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 800655e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	f040 80b6 	bne.w	80066d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800656c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656e:	461c      	mov	r4, r3
 8006570:	f04f 0500 	mov.w	r5, #0
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	1891      	adds	r1, r2, r2
 800657a:	6439      	str	r1, [r7, #64]	; 0x40
 800657c:	415b      	adcs	r3, r3
 800657e:	647b      	str	r3, [r7, #68]	; 0x44
 8006580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006584:	1912      	adds	r2, r2, r4
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	00d9      	lsls	r1, r3, #3
 8006594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006598:	00d0      	lsls	r0, r2, #3
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	1911      	adds	r1, r2, r4
 80065a0:	6639      	str	r1, [r7, #96]	; 0x60
 80065a2:	416b      	adcs	r3, r5
 80065a4:	667b      	str	r3, [r7, #100]	; 0x64
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	1891      	adds	r1, r2, r2
 80065b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b4:	415b      	adcs	r3, r3
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065c0:	f7f9 fe6e 	bl	80002a0 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4ba5      	ldr	r3, [pc, #660]	; (8006860 <UART_SetConfig+0x38c>)
 80065ca:	fba3 2302 	umull	r2, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	011e      	lsls	r6, r3, #4
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	461c      	mov	r4, r3
 80065d6:	f04f 0500 	mov.w	r5, #0
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	1891      	adds	r1, r2, r2
 80065e0:	6339      	str	r1, [r7, #48]	; 0x30
 80065e2:	415b      	adcs	r3, r3
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
 80065e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065ea:	1912      	adds	r2, r2, r4
 80065ec:	eb45 0303 	adc.w	r3, r5, r3
 80065f0:	f04f 0000 	mov.w	r0, #0
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	00d9      	lsls	r1, r3, #3
 80065fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065fe:	00d0      	lsls	r0, r2, #3
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	1911      	adds	r1, r2, r4
 8006606:	65b9      	str	r1, [r7, #88]	; 0x58
 8006608:	416b      	adcs	r3, r5
 800660a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	461a      	mov	r2, r3
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	1891      	adds	r1, r2, r2
 8006618:	62b9      	str	r1, [r7, #40]	; 0x28
 800661a:	415b      	adcs	r3, r3
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006626:	f7f9 fe3b 	bl	80002a0 <__aeabi_uldivmod>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4b8c      	ldr	r3, [pc, #560]	; (8006860 <UART_SetConfig+0x38c>)
 8006630:	fba3 1302 	umull	r1, r3, r3, r2
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	2164      	movs	r1, #100	; 0x64
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	3332      	adds	r3, #50	; 0x32
 8006642:	4a87      	ldr	r2, [pc, #540]	; (8006860 <UART_SetConfig+0x38c>)
 8006644:	fba2 2303 	umull	r2, r3, r2, r3
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006650:	441e      	add	r6, r3
 8006652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006654:	4618      	mov	r0, r3
 8006656:	f04f 0100 	mov.w	r1, #0
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	1894      	adds	r4, r2, r2
 8006660:	623c      	str	r4, [r7, #32]
 8006662:	415b      	adcs	r3, r3
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
 8006666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800666a:	1812      	adds	r2, r2, r0
 800666c:	eb41 0303 	adc.w	r3, r1, r3
 8006670:	f04f 0400 	mov.w	r4, #0
 8006674:	f04f 0500 	mov.w	r5, #0
 8006678:	00dd      	lsls	r5, r3, #3
 800667a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800667e:	00d4      	lsls	r4, r2, #3
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	1814      	adds	r4, r2, r0
 8006686:	653c      	str	r4, [r7, #80]	; 0x50
 8006688:	414b      	adcs	r3, r1
 800668a:	657b      	str	r3, [r7, #84]	; 0x54
 800668c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	461a      	mov	r2, r3
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	1891      	adds	r1, r2, r2
 8006698:	61b9      	str	r1, [r7, #24]
 800669a:	415b      	adcs	r3, r3
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066a6:	f7f9 fdfb 	bl	80002a0 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4b6c      	ldr	r3, [pc, #432]	; (8006860 <UART_SetConfig+0x38c>)
 80066b0:	fba3 1302 	umull	r1, r3, r3, r2
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	2164      	movs	r1, #100	; 0x64
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	3332      	adds	r3, #50	; 0x32
 80066c2:	4a67      	ldr	r2, [pc, #412]	; (8006860 <UART_SetConfig+0x38c>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f003 0207 	and.w	r2, r3, #7
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4432      	add	r2, r6
 80066d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d6:	e0b9      	b.n	800684c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066da:	461c      	mov	r4, r3
 80066dc:	f04f 0500 	mov.w	r5, #0
 80066e0:	4622      	mov	r2, r4
 80066e2:	462b      	mov	r3, r5
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	6139      	str	r1, [r7, #16]
 80066e8:	415b      	adcs	r3, r3
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066f0:	1912      	adds	r2, r2, r4
 80066f2:	eb45 0303 	adc.w	r3, r5, r3
 80066f6:	f04f 0000 	mov.w	r0, #0
 80066fa:	f04f 0100 	mov.w	r1, #0
 80066fe:	00d9      	lsls	r1, r3, #3
 8006700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006704:	00d0      	lsls	r0, r2, #3
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	eb12 0804 	adds.w	r8, r2, r4
 800670e:	eb43 0905 	adc.w	r9, r3, r5
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	008b      	lsls	r3, r1, #2
 8006726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800672a:	0082      	lsls	r2, r0, #2
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7f9 fdb6 	bl	80002a0 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4b49      	ldr	r3, [pc, #292]	; (8006860 <UART_SetConfig+0x38c>)
 800673a:	fba3 2302 	umull	r2, r3, r3, r2
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	011e      	lsls	r6, r3, #4
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	4618      	mov	r0, r3
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	1894      	adds	r4, r2, r2
 8006750:	60bc      	str	r4, [r7, #8]
 8006752:	415b      	adcs	r3, r3
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800675a:	1812      	adds	r2, r2, r0
 800675c:	eb41 0303 	adc.w	r3, r1, r3
 8006760:	f04f 0400 	mov.w	r4, #0
 8006764:	f04f 0500 	mov.w	r5, #0
 8006768:	00dd      	lsls	r5, r3, #3
 800676a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800676e:	00d4      	lsls	r4, r2, #3
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	1814      	adds	r4, r2, r0
 8006776:	64bc      	str	r4, [r7, #72]	; 0x48
 8006778:	414b      	adcs	r3, r1
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	f04f 0100 	mov.w	r1, #0
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	008b      	lsls	r3, r1, #2
 8006790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006794:	0082      	lsls	r2, r0, #2
 8006796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800679a:	f7f9 fd81 	bl	80002a0 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b2f      	ldr	r3, [pc, #188]	; (8006860 <UART_SetConfig+0x38c>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	; 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	3332      	adds	r3, #50	; 0x32
 80067b6:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <UART_SetConfig+0x38c>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067c2:	441e      	add	r6, r3
 80067c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c6:	4618      	mov	r0, r3
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	1894      	adds	r4, r2, r2
 80067d2:	603c      	str	r4, [r7, #0]
 80067d4:	415b      	adcs	r3, r3
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067dc:	1812      	adds	r2, r2, r0
 80067de:	eb41 0303 	adc.w	r3, r1, r3
 80067e2:	f04f 0400 	mov.w	r4, #0
 80067e6:	f04f 0500 	mov.w	r5, #0
 80067ea:	00dd      	lsls	r5, r3, #3
 80067ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067f0:	00d4      	lsls	r4, r2, #3
 80067f2:	4622      	mov	r2, r4
 80067f4:	462b      	mov	r3, r5
 80067f6:	eb12 0a00 	adds.w	sl, r2, r0
 80067fa:	eb43 0b01 	adc.w	fp, r3, r1
 80067fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f04f 0100 	mov.w	r1, #0
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	008b      	lsls	r3, r1, #2
 8006812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006816:	0082      	lsls	r2, r0, #2
 8006818:	4650      	mov	r0, sl
 800681a:	4659      	mov	r1, fp
 800681c:	f7f9 fd40 	bl	80002a0 <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <UART_SetConfig+0x38c>)
 8006826:	fba3 1302 	umull	r1, r3, r3, r2
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2164      	movs	r1, #100	; 0x64
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	3332      	adds	r3, #50	; 0x32
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <UART_SetConfig+0x38c>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	f003 020f 	and.w	r2, r3, #15
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4432      	add	r2, r6
 800684a:	609a      	str	r2, [r3, #8]
}
 800684c:	bf00      	nop
 800684e:	377c      	adds	r7, #124	; 0x7c
 8006850:	46bd      	mov	sp, r7
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	bf00      	nop
 8006858:	40011000 	.word	0x40011000
 800685c:	40011400 	.word	0x40011400
 8006860:	51eb851f 	.word	0x51eb851f

08006864 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006864:	b084      	sub	sp, #16
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	f107 001c 	add.w	r0, r7, #28
 8006872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800687a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800687c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800687e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006882:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006886:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800688a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800688e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800689e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	b004      	add	sp, #16
 80068b8:	4770      	bx	lr

080068ba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2203      	movs	r2, #3
 8006902:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006904:	2002      	movs	r0, #2
 8006906:	f7fb f9fb 	bl	8001d00 <HAL_Delay>
  
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0303 	and.w	r3, r3, #3
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800694e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006954:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800695a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800696a:	f023 030f 	bic.w	r3, r3, #15
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	b2db      	uxtb	r3, r3
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3314      	adds	r3, #20
 80069ac:	461a      	mov	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	4413      	add	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
}  
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80069f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80069f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0

}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a3c:	f107 0308 	add.w	r3, r7, #8
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff ff74 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4c:	2110      	movs	r1, #16
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa44 	bl	8006edc <SDMMC_GetCmdResp1>
 8006a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a56:	69fb      	ldr	r3, [r7, #28]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006a6e:	2311      	movs	r3, #17
 8006a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a80:	f107 0308 	add.w	r3, r7, #8
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ff52 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a90:	2111      	movs	r1, #17
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa22 	bl	8006edc <SDMMC_GetCmdResp1>
 8006a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006ab2:	2312      	movs	r3, #18
 8006ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ab6:	2340      	movs	r3, #64	; 0x40
 8006ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff ff30 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	2112      	movs	r1, #18
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa00 	bl	8006edc <SDMMC_GetCmdResp1>
 8006adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ade:	69fb      	ldr	r3, [r7, #28]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006af6:	2318      	movs	r3, #24
 8006af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b08:	f107 0308 	add.w	r3, r7, #8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff ff0e 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b18:	2118      	movs	r1, #24
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9de 	bl	8006edc <SDMMC_GetCmdResp1>
 8006b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b22:	69fb      	ldr	r3, [r7, #28]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006b3a:	2319      	movs	r3, #25
 8006b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b4c:	f107 0308 	add.w	r3, r7, #8
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff feec 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5c:	2119      	movs	r1, #25
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9bc 	bl	8006edc <SDMMC_GetCmdResp1>
 8006b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b66:	69fb      	ldr	r3, [r7, #28]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fecb 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006b9a:	4a05      	ldr	r2, [pc, #20]	; (8006bb0 <SDMMC_CmdStopTransfer+0x40>)
 8006b9c:	210c      	movs	r1, #12
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f99c 	bl	8006edc <SDMMC_GetCmdResp1>
 8006ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	05f5e100 	.word	0x05f5e100

08006bb4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006bc4:	2307      	movs	r3, #7
 8006bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bd6:	f107 0310 	add.w	r3, r7, #16
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff fea7 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be6:	2107      	movs	r1, #7
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f977 	bl	8006edc <SDMMC_GetCmdResp1>
 8006bee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3728      	adds	r7, #40	; 0x28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b088      	sub	sp, #32
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c18:	f107 0308 	add.w	r3, r7, #8
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fe86 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f92d 	bl	8006e84 <SDMMC_GetCmdError>
 8006c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b088      	sub	sp, #32
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c44:	2308      	movs	r3, #8
 8006c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c56:	f107 0308 	add.w	r3, r7, #8
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff fe67 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fb24 	bl	80072b0 <SDMMC_GetCmdResp7>
 8006c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c82:	2337      	movs	r3, #55	; 0x37
 8006c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c86:	2340      	movs	r3, #64	; 0x40
 8006c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fe48 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca4:	2137      	movs	r1, #55	; 0x37
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f918 	bl	8006edc <SDMMC_GetCmdResp1>
 8006cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cae:	69fb      	ldr	r3, [r7, #28]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3720      	adds	r7, #32
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006cce:	2329      	movs	r3, #41	; 0x29
 8006cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ce0:	f107 0308 	add.w	r3, r7, #8
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fe22 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa2b 	bl	8007148 <SDMMC_GetCmdResp3>
 8006cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b088      	sub	sp, #32
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006d0c:	2306      	movs	r3, #6
 8006d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d1e:	f107 0308 	add.w	r3, r7, #8
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe03 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2e:	2106      	movs	r1, #6
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f8d3 	bl	8006edc <SDMMC_GetCmdResp1>
 8006d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d38:	69fb      	ldr	r3, [r7, #28]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b088      	sub	sp, #32
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d4e:	2333      	movs	r3, #51	; 0x33
 8006d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d60:	f107 0308 	add.w	r3, r7, #8
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff fde2 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	2133      	movs	r1, #51	; 0x33
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8b2 	bl	8006edc <SDMMC_GetCmdResp1>
 8006d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d90:	2302      	movs	r3, #2
 8006d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d94:	23c0      	movs	r3, #192	; 0xc0
 8006d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fdc1 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f982 	bl	80070b8 <SDMMC_GetCmdResp2>
 8006db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006db6:	69fb      	ldr	r3, [r7, #28]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006dce:	2309      	movs	r3, #9
 8006dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006dd2:	23c0      	movs	r3, #192	; 0xc0
 8006dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fda2 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f963 	bl	80070b8 <SDMMC_GetCmdResp2>
 8006df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006df4:	69fb      	ldr	r3, [r7, #28]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b088      	sub	sp, #32
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e10:	2340      	movs	r3, #64	; 0x40
 8006e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff fd83 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f9c8 	bl	80071c4 <SDMMC_GetCmdResp6>
 8006e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e36:	69fb      	ldr	r3, [r7, #28]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e4e:	230d      	movs	r3, #13
 8006e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e52:	2340      	movs	r3, #64	; 0x40
 8006e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fd62 	bl	8006930 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e70:	210d      	movs	r1, #13
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f832 	bl	8006edc <SDMMC_GetCmdResp1>
 8006e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e8c:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <SDMMC_GetCmdError+0x50>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a11      	ldr	r2, [pc, #68]	; (8006ed8 <SDMMC_GetCmdError+0x54>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	0a5b      	lsrs	r3, r3, #9
 8006e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	60fa      	str	r2, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006eb0:	e009      	b.n	8006ec6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f1      	beq.n	8006ea2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	22c5      	movs	r2, #197	; 0xc5
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000000 	.word	0x20000000
 8006ed8:	10624dd3 	.word	0x10624dd3

08006edc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006eea:	4b70      	ldr	r3, [pc, #448]	; (80070ac <SDMMC_GetCmdResp1+0x1d0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a70      	ldr	r2, [pc, #448]	; (80070b0 <SDMMC_GetCmdResp1+0x1d4>)
 8006ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef4:	0a5a      	lsrs	r2, r3, #9
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1e5a      	subs	r2, r3, #1
 8006f02:	61fa      	str	r2, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f0c:	e0c9      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0ef      	beq.n	8006efe <SDMMC_GetCmdResp1+0x22>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ea      	bne.n	8006efe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2204      	movs	r2, #4
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f3a:	2304      	movs	r3, #4
 8006f3c:	e0b1      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0a6      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	22c5      	movs	r2, #197	; 0xc5
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fd12 	bl	8006984 <SDIO_GetCommandResponse>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d001      	beq.n	8006f6e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e099      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff fd14 	bl	800699e <SDIO_GetResponse>
 8006f76:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4b4e      	ldr	r3, [pc, #312]	; (80070b4 <SDMMC_GetCmdResp1+0x1d8>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e08d      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da02      	bge.n	8006f92 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f90:	e087      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	e080      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006faa:	2380      	movs	r3, #128	; 0x80
 8006fac:	e079      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fbc:	e071      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fcc:	e069      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fdc:	e061      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fec:	e059      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ffc:	e051      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800700c:	e049      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800701c:	e041      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702c:	e039      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800703c:	e031      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007048:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800704c:	e029      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800705c:	e021      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800706c:	e019      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007078:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800707c:	e011      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007088:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800708c:	e009      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007098:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800709c:	e001      	b.n	80070a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800709e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000000 	.word	0x20000000
 80070b0:	10624dd3 	.word	0x10624dd3
 80070b4:	fdffe008 	.word	0xfdffe008

080070b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c0:	4b1f      	ldr	r3, [pc, #124]	; (8007140 <SDMMC_GetCmdResp2+0x88>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <SDMMC_GetCmdResp2+0x8c>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	0a5b      	lsrs	r3, r3, #9
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1e5a      	subs	r2, r3, #1
 80070da:	60fa      	str	r2, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070e4:	e026      	b.n	8007134 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0ef      	beq.n	80070d6 <SDMMC_GetCmdResp2+0x1e>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1ea      	bne.n	80070d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2204      	movs	r2, #4
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007112:	2304      	movs	r3, #4
 8007114:	e00e      	b.n	8007134 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007128:	2301      	movs	r3, #1
 800712a:	e003      	b.n	8007134 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	22c5      	movs	r2, #197	; 0xc5
 8007130:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20000000 	.word	0x20000000
 8007144:	10624dd3 	.word	0x10624dd3

08007148 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007150:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <SDMMC_GetCmdResp3+0x74>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <SDMMC_GetCmdResp3+0x78>)
 8007156:	fba2 2303 	umull	r2, r3, r2, r3
 800715a:	0a5b      	lsrs	r3, r3, #9
 800715c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1e5a      	subs	r2, r3, #1
 800716a:	60fa      	str	r2, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007174:	e01b      	b.n	80071ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0ef      	beq.n	8007166 <SDMMC_GetCmdResp3+0x1e>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1ea      	bne.n	8007166 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2204      	movs	r2, #4
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071a2:	2304      	movs	r3, #4
 80071a4:	e003      	b.n	80071ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	22c5      	movs	r2, #197	; 0xc5
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000000 	.word	0x20000000
 80071c0:	10624dd3 	.word	0x10624dd3

080071c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	460b      	mov	r3, r1
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071d2:	4b35      	ldr	r3, [pc, #212]	; (80072a8 <SDMMC_GetCmdResp6+0xe4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a35      	ldr	r2, [pc, #212]	; (80072ac <SDMMC_GetCmdResp6+0xe8>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	0a5b      	lsrs	r3, r3, #9
 80071de:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	1e5a      	subs	r2, r3, #1
 80071ec:	61fa      	str	r2, [r7, #28]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071f6:	e052      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0ef      	beq.n	80071e8 <SDMMC_GetCmdResp6+0x24>
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1ea      	bne.n	80071e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2204      	movs	r2, #4
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007224:	2304      	movs	r3, #4
 8007226:	e03a      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800723a:	2301      	movs	r3, #1
 800723c:	e02f      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f7ff fba0 	bl	8006984 <SDIO_GetCommandResponse>
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	4293      	cmp	r3, r2
 800724c:	d001      	beq.n	8007252 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800724e:	2301      	movs	r3, #1
 8007250:	e025      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	22c5      	movs	r2, #197	; 0xc5
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff fb9f 	bl	800699e <SDIO_GetResponse>
 8007260:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007276:	2300      	movs	r3, #0
 8007278:	e011      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007288:	e009      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007298:	e001      	b.n	800729e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800729a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000000 	.word	0x20000000
 80072ac:	10624dd3 	.word	0x10624dd3

080072b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072b8:	4b22      	ldr	r3, [pc, #136]	; (8007344 <SDMMC_GetCmdResp7+0x94>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a22      	ldr	r2, [pc, #136]	; (8007348 <SDMMC_GetCmdResp7+0x98>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	0a5b      	lsrs	r3, r3, #9
 80072c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c8:	fb02 f303 	mul.w	r3, r2, r3
 80072cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1e5a      	subs	r2, r3, #1
 80072d2:	60fa      	str	r2, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072dc:	e02c      	b.n	8007338 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0ef      	beq.n	80072ce <SDMMC_GetCmdResp7+0x1e>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1ea      	bne.n	80072ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2204      	movs	r2, #4
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800730a:	2304      	movs	r3, #4
 800730c:	e014      	b.n	8007338 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007320:	2301      	movs	r3, #1
 8007322:	e009      	b.n	8007338 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2240      	movs	r2, #64	; 0x40
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007336:	2300      	movs	r3, #0
  
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	20000000 	.word	0x20000000
 8007348:	10624dd3 	.word	0x10624dd3

0800734c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007350:	4904      	ldr	r1, [pc, #16]	; (8007364 <MX_FATFS_Init+0x18>)
 8007352:	4805      	ldr	r0, [pc, #20]	; (8007368 <MX_FATFS_Init+0x1c>)
 8007354:	f003 fad4 	bl	800a900 <FATFS_LinkDriver>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <MX_FATFS_Init+0x20>)
 800735e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007360:	bf00      	nop
 8007362:	bd80      	pop	{r7, pc}
 8007364:	2000a8c0 	.word	0x2000a8c0
 8007368:	080216c0 	.word	0x080216c0
 800736c:	2000a8bc 	.word	0x2000a8bc

08007370 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007374:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007376:	4618      	mov	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800738a:	f000 f896 	bl	80074ba <BSP_SD_IsDetected>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d001      	beq.n	8007398 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e012      	b.n	80073be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007398:	480b      	ldr	r0, [pc, #44]	; (80073c8 <BSP_SD_Init+0x48>)
 800739a:	f7fd f971 	bl	8004680 <HAL_SD_Init>
 800739e:	4603      	mov	r3, r0
 80073a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80073a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073ac:	4806      	ldr	r0, [pc, #24]	; (80073c8 <BSP_SD_Init+0x48>)
 80073ae:	f7fd ff3d 	bl	800522c <HAL_SD_ConfigWideBusOperation>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80073bc:	79fb      	ldrb	r3, [r7, #7]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	2000a3d0 	.word	0x2000a3d0

080073cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	68f9      	ldr	r1, [r7, #12]
 80073e2:	4806      	ldr	r0, [pc, #24]	; (80073fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80073e4:	f7fd f9fa 	bl	80047dc <HAL_SD_ReadBlocks_DMA>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	2000a3d0 	.word	0x2000a3d0

08007400 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	4806      	ldr	r0, [pc, #24]	; (8007430 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007418:	f7fd fac2 	bl	80049a0 <HAL_SD_WriteBlocks_DMA>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	2000a3d0 	.word	0x2000a3d0

08007434 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007438:	4805      	ldr	r0, [pc, #20]	; (8007450 <BSP_SD_GetCardState+0x1c>)
 800743a:	f7fd ff91 	bl	8005360 <HAL_SD_GetCardState>
 800743e:	4603      	mov	r3, r0
 8007440:	2b04      	cmp	r3, #4
 8007442:	bf14      	ite	ne
 8007444:	2301      	movne	r3, #1
 8007446:	2300      	moveq	r3, #0
 8007448:	b2db      	uxtb	r3, r3
}
 800744a:	4618      	mov	r0, r3
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	2000a3d0 	.word	0x2000a3d0

08007454 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4803      	ldr	r0, [pc, #12]	; (800746c <BSP_SD_GetCardInfo+0x18>)
 8007460:	f7fd feb8 	bl	80051d4 <HAL_SD_GetCardInfo>
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	2000a3d0 	.word	0x2000a3d0

08007470 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007478:	f000 f818 	bl	80074ac <BSP_SD_AbortCallback>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800748c:	f000 f998 	bl	80077c0 <BSP_SD_WriteCpltCallback>
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80074a0:	f000 f9a0 	bl	80077e4 <BSP_SD_ReadCpltCallback>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0

}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80074c0:	2301      	movs	r3, #1
 80074c2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	b2db      	uxtb	r3, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80074dc:	f003 fb16 	bl	800ab0c <osKernelGetTickCount>
 80074e0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80074e2:	e006      	b.n	80074f2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074e4:	f7ff ffa6 	bl	8007434 <BSP_SD_GetCardState>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e009      	b.n	8007506 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80074f2:	f003 fb0b 	bl	800ab0c <osKernelGetTickCount>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d8f0      	bhi.n	80074e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <SD_CheckStatus+0x38>)
 800751c:	2201      	movs	r2, #1
 800751e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007520:	f7ff ff88 	bl	8007434 <BSP_SD_GetCardState>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d107      	bne.n	800753a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800752a:	4b07      	ldr	r3, [pc, #28]	; (8007548 <SD_CheckStatus+0x38>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	b2da      	uxtb	r2, r3
 8007536:	4b04      	ldr	r3, [pc, #16]	; (8007548 <SD_CheckStatus+0x38>)
 8007538:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <SD_CheckStatus+0x38>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b2db      	uxtb	r3, r3
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000495 	.word	0x20000495

0800754c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007556:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <SD_initialize+0x7c>)
 8007558:	2201      	movs	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800755c:	f003 fa8e 	bl	800aa7c <osKernelGetState>
 8007560:	4603      	mov	r3, r0
 8007562:	2b02      	cmp	r3, #2
 8007564:	d129      	bne.n	80075ba <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007566:	f7ff ff0b 	bl	8007380 <BSP_SD_Init>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d107      	bne.n	8007580 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff ffcc 	bl	8007510 <SD_CheckStatus>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <SD_initialize+0x7c>)
 800757e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <SD_initialize+0x7c>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d017      	beq.n	80075ba <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <SD_initialize+0x80>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d107      	bne.n	80075a2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8007592:	2200      	movs	r2, #0
 8007594:	2102      	movs	r1, #2
 8007596:	200a      	movs	r0, #10
 8007598:	f003 fdcc 	bl	800b134 <osMessageQueueNew>
 800759c:	4603      	mov	r3, r0
 800759e:	4a0b      	ldr	r2, [pc, #44]	; (80075cc <SD_initialize+0x80>)
 80075a0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <SD_initialize+0x80>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <SD_initialize+0x7c>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <SD_initialize+0x7c>)
 80075b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80075ba:	4b03      	ldr	r3, [pc, #12]	; (80075c8 <SD_initialize+0x7c>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b2db      	uxtb	r3, r3
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000495 	.word	0x20000495
 80075cc:	20001534 	.word	0x20001534

080075d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff97 	bl	8007510 <SD_CheckStatus>
 80075e2:	4603      	mov	r3, r0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007600:	f247 5030 	movw	r0, #30000	; 0x7530
 8007604:	f7ff ff66 	bl	80074d4 <SD_CheckStatusWithTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	da01      	bge.n	8007612 <SD_read+0x26>
  {
    return res;
 800760e:	7ffb      	ldrb	r3, [r7, #31]
 8007610:	e02f      	b.n	8007672 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	68b8      	ldr	r0, [r7, #8]
 8007618:	f7ff fed8 	bl	80073cc <BSP_SD_ReadBlocks_DMA>
 800761c:	4603      	mov	r3, r0
 800761e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007620:	7fbb      	ldrb	r3, [r7, #30]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d124      	bne.n	8007670 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <SD_read+0x90>)
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f107 0112 	add.w	r1, r7, #18
 800762e:	f247 5330 	movw	r3, #30000	; 0x7530
 8007632:	2200      	movs	r2, #0
 8007634:	f003 fe52 	bl	800b2dc <osMessageQueueGet>
 8007638:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d117      	bne.n	8007670 <SD_read+0x84>
 8007640:	8a7b      	ldrh	r3, [r7, #18]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d114      	bne.n	8007670 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007646:	f003 fa61 	bl	800ab0c <osKernelGetTickCount>
 800764a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800764c:	e007      	b.n	800765e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800764e:	f7ff fef1 	bl	8007434 <BSP_SD_GetCardState>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d102      	bne.n	800765e <SD_read+0x72>
              {
                res = RES_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800765c:	e008      	b.n	8007670 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800765e:	f003 fa55 	bl	800ab0c <osKernelGetTickCount>
 8007662:	4602      	mov	r2, r0
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f247 522f 	movw	r2, #29999	; 0x752f
 800766c:	4293      	cmp	r3, r2
 800766e:	d9ee      	bls.n	800764e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007670:	7ffb      	ldrb	r3, [r7, #31]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20001534 	.word	0x20001534

08007680 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007694:	f247 5030 	movw	r0, #30000	; 0x7530
 8007698:	f7ff ff1c 	bl	80074d4 <SD_CheckStatusWithTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da01      	bge.n	80076a6 <SD_write+0x26>
  {
    return res;
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	e02d      	b.n	8007702 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	68b8      	ldr	r0, [r7, #8]
 80076ac:	f7ff fea8 	bl	8007400 <BSP_SD_WriteBlocks_DMA>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d124      	bne.n	8007700 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <SD_write+0x8c>)
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f107 0112 	add.w	r1, r7, #18
 80076be:	f247 5330 	movw	r3, #30000	; 0x7530
 80076c2:	2200      	movs	r2, #0
 80076c4:	f003 fe0a 	bl	800b2dc <osMessageQueueGet>
 80076c8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d117      	bne.n	8007700 <SD_write+0x80>
 80076d0:	8a7b      	ldrh	r3, [r7, #18]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d114      	bne.n	8007700 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80076d6:	f003 fa19 	bl	800ab0c <osKernelGetTickCount>
 80076da:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80076dc:	e007      	b.n	80076ee <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80076de:	f7ff fea9 	bl	8007434 <BSP_SD_GetCardState>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <SD_write+0x6e>
          {
            res = RES_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	77fb      	strb	r3, [r7, #31]
            break;
 80076ec:	e008      	b.n	8007700 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80076ee:	f003 fa0d 	bl	800ab0c <osKernelGetTickCount>
 80076f2:	4602      	mov	r2, r0
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d9ee      	bls.n	80076de <SD_write+0x5e>
    }

  }
#endif

  return res;
 8007700:	7ffb      	ldrb	r3, [r7, #31]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20001534 	.word	0x20001534

08007710 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	; 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	603a      	str	r2, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
 800771c:	460b      	mov	r3, r1
 800771e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007726:	4b25      	ldr	r3, [pc, #148]	; (80077bc <SD_ioctl+0xac>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <SD_ioctl+0x28>
 8007734:	2303      	movs	r3, #3
 8007736:	e03c      	b.n	80077b2 <SD_ioctl+0xa2>

  switch (cmd)
 8007738:	79bb      	ldrb	r3, [r7, #6]
 800773a:	2b03      	cmp	r3, #3
 800773c:	d834      	bhi.n	80077a8 <SD_ioctl+0x98>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <SD_ioctl+0x34>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007755 	.word	0x08007755
 8007748:	0800775d 	.word	0x0800775d
 800774c:	08007775 	.word	0x08007775
 8007750:	0800778f 	.word	0x0800778f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800775a:	e028      	b.n	80077ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800775c:	f107 030c 	add.w	r3, r7, #12
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fe77 	bl	8007454 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007772:	e01c      	b.n	80077ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fe6b 	bl	8007454 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	b29a      	uxth	r2, r3
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800778c:	e00f      	b.n	80077ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800778e:	f107 030c 	add.w	r3, r7, #12
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fe5e 	bl	8007454 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	0a5a      	lsrs	r2, r3, #9
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80077a6:	e002      	b.n	80077ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80077ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3730      	adds	r7, #48	; 0x30
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000495 	.word	0x20000495

080077c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80077c6:	2302      	movs	r3, #2
 80077c8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <BSP_SD_WriteCpltCallback+0x20>)
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	1db9      	adds	r1, r7, #6
 80077d0:	2300      	movs	r3, #0
 80077d2:	2200      	movs	r2, #0
 80077d4:	f003 fd22 	bl	800b21c <osMessageQueuePut>
#endif
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20001534 	.word	0x20001534

080077e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80077ea:	2301      	movs	r3, #1
 80077ec:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <BSP_SD_ReadCpltCallback+0x20>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	1db9      	adds	r1, r7, #6
 80077f4:	2300      	movs	r3, #0
 80077f6:	2200      	movs	r2, #0
 80077f8:	f003 fd10 	bl	800b21c <osMessageQueuePut>
#endif
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20001534 	.word	0x20001534

08007808 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800780e:	4ba0      	ldr	r3, [pc, #640]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007810:	22c0      	movs	r2, #192	; 0xc0
 8007812:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007814:	4b9e      	ldr	r3, [pc, #632]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007816:	22a8      	movs	r2, #168	; 0xa8
 8007818:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800781a:	4b9d      	ldr	r3, [pc, #628]	; (8007a90 <MX_LWIP_Init+0x288>)
 800781c:	2212      	movs	r2, #18
 800781e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8007820:	4b9b      	ldr	r3, [pc, #620]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007822:	226f      	movs	r2, #111	; 0x6f
 8007824:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007826:	4b9b      	ldr	r3, [pc, #620]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007828:	22ff      	movs	r2, #255	; 0xff
 800782a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800782c:	4b99      	ldr	r3, [pc, #612]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800782e:	22ff      	movs	r2, #255	; 0xff
 8007830:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007832:	4b98      	ldr	r3, [pc, #608]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007838:	4b96      	ldr	r3, [pc, #600]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800783a:	2200      	movs	r2, #0
 800783c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800783e:	4b96      	ldr	r3, [pc, #600]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007840:	22c0      	movs	r2, #192	; 0xc0
 8007842:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007844:	4b94      	ldr	r3, [pc, #592]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007846:	22a8      	movs	r2, #168	; 0xa8
 8007848:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800784a:	4b93      	ldr	r3, [pc, #588]	; (8007a98 <MX_LWIP_Init+0x290>)
 800784c:	2212      	movs	r2, #18
 800784e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007850:	4b91      	ldr	r3, [pc, #580]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007852:	2201      	movs	r2, #1
 8007854:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007856:	2100      	movs	r1, #0
 8007858:	2000      	movs	r0, #0
 800785a:	f009 fa5f 	bl	8010d1c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800785e:	4b8c      	ldr	r3, [pc, #560]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	061a      	lsls	r2, r3, #24
 8007864:	4b8a      	ldr	r3, [pc, #552]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	431a      	orrs	r2, r3
 800786c:	4b88      	ldr	r3, [pc, #544]	; (8007a90 <MX_LWIP_Init+0x288>)
 800786e:	789b      	ldrb	r3, [r3, #2]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	4313      	orrs	r3, r2
 8007874:	4a86      	ldr	r2, [pc, #536]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007876:	78d2      	ldrb	r2, [r2, #3]
 8007878:	4313      	orrs	r3, r2
 800787a:	061a      	lsls	r2, r3, #24
 800787c:	4b84      	ldr	r3, [pc, #528]	; (8007a90 <MX_LWIP_Init+0x288>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	0619      	lsls	r1, r3, #24
 8007882:	4b83      	ldr	r3, [pc, #524]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	4319      	orrs	r1, r3
 800788a:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <MX_LWIP_Init+0x288>)
 800788c:	789b      	ldrb	r3, [r3, #2]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	430b      	orrs	r3, r1
 8007892:	497f      	ldr	r1, [pc, #508]	; (8007a90 <MX_LWIP_Init+0x288>)
 8007894:	78c9      	ldrb	r1, [r1, #3]
 8007896:	430b      	orrs	r3, r1
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800789e:	431a      	orrs	r2, r3
 80078a0:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	0619      	lsls	r1, r3, #24
 80078a6:	4b7a      	ldr	r3, [pc, #488]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	4319      	orrs	r1, r3
 80078ae:	4b78      	ldr	r3, [pc, #480]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078b0:	789b      	ldrb	r3, [r3, #2]
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	430b      	orrs	r3, r1
 80078b6:	4976      	ldr	r1, [pc, #472]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078b8:	78c9      	ldrb	r1, [r1, #3]
 80078ba:	430b      	orrs	r3, r1
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078c2:	431a      	orrs	r2, r3
 80078c4:	4b72      	ldr	r3, [pc, #456]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	0619      	lsls	r1, r3, #24
 80078ca:	4b71      	ldr	r3, [pc, #452]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	4319      	orrs	r1, r3
 80078d2:	4b6f      	ldr	r3, [pc, #444]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078d4:	789b      	ldrb	r3, [r3, #2]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	430b      	orrs	r3, r1
 80078da:	496d      	ldr	r1, [pc, #436]	; (8007a90 <MX_LWIP_Init+0x288>)
 80078dc:	78c9      	ldrb	r1, [r1, #3]
 80078de:	430b      	orrs	r3, r1
 80078e0:	0e1b      	lsrs	r3, r3, #24
 80078e2:	4313      	orrs	r3, r2
 80078e4:	4a6d      	ldr	r2, [pc, #436]	; (8007a9c <MX_LWIP_Init+0x294>)
 80078e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80078e8:	4b6a      	ldr	r3, [pc, #424]	; (8007a94 <MX_LWIP_Init+0x28c>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	061a      	lsls	r2, r3, #24
 80078ee:	4b69      	ldr	r3, [pc, #420]	; (8007a94 <MX_LWIP_Init+0x28c>)
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	041b      	lsls	r3, r3, #16
 80078f4:	431a      	orrs	r2, r3
 80078f6:	4b67      	ldr	r3, [pc, #412]	; (8007a94 <MX_LWIP_Init+0x28c>)
 80078f8:	789b      	ldrb	r3, [r3, #2]
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	4313      	orrs	r3, r2
 80078fe:	4a65      	ldr	r2, [pc, #404]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007900:	78d2      	ldrb	r2, [r2, #3]
 8007902:	4313      	orrs	r3, r2
 8007904:	061a      	lsls	r2, r3, #24
 8007906:	4b63      	ldr	r3, [pc, #396]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	0619      	lsls	r1, r3, #24
 800790c:	4b61      	ldr	r3, [pc, #388]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	4319      	orrs	r1, r3
 8007914:	4b5f      	ldr	r3, [pc, #380]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007916:	789b      	ldrb	r3, [r3, #2]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	430b      	orrs	r3, r1
 800791c:	495d      	ldr	r1, [pc, #372]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800791e:	78c9      	ldrb	r1, [r1, #3]
 8007920:	430b      	orrs	r3, r1
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007928:	431a      	orrs	r2, r3
 800792a:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	0619      	lsls	r1, r3, #24
 8007930:	4b58      	ldr	r3, [pc, #352]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	4319      	orrs	r1, r3
 8007938:	4b56      	ldr	r3, [pc, #344]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800793a:	789b      	ldrb	r3, [r3, #2]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	430b      	orrs	r3, r1
 8007940:	4954      	ldr	r1, [pc, #336]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007942:	78c9      	ldrb	r1, [r1, #3]
 8007944:	430b      	orrs	r3, r1
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800794c:	431a      	orrs	r2, r3
 800794e:	4b51      	ldr	r3, [pc, #324]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	0619      	lsls	r1, r3, #24
 8007954:	4b4f      	ldr	r3, [pc, #316]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	4319      	orrs	r1, r3
 800795c:	4b4d      	ldr	r3, [pc, #308]	; (8007a94 <MX_LWIP_Init+0x28c>)
 800795e:	789b      	ldrb	r3, [r3, #2]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	430b      	orrs	r3, r1
 8007964:	494b      	ldr	r1, [pc, #300]	; (8007a94 <MX_LWIP_Init+0x28c>)
 8007966:	78c9      	ldrb	r1, [r1, #3]
 8007968:	430b      	orrs	r3, r1
 800796a:	0e1b      	lsrs	r3, r3, #24
 800796c:	4313      	orrs	r3, r2
 800796e:	4a4c      	ldr	r2, [pc, #304]	; (8007aa0 <MX_LWIP_Init+0x298>)
 8007970:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007972:	4b49      	ldr	r3, [pc, #292]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	061a      	lsls	r2, r3, #24
 8007978:	4b47      	ldr	r3, [pc, #284]	; (8007a98 <MX_LWIP_Init+0x290>)
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	431a      	orrs	r2, r3
 8007980:	4b45      	ldr	r3, [pc, #276]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007982:	789b      	ldrb	r3, [r3, #2]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	4313      	orrs	r3, r2
 8007988:	4a43      	ldr	r2, [pc, #268]	; (8007a98 <MX_LWIP_Init+0x290>)
 800798a:	78d2      	ldrb	r2, [r2, #3]
 800798c:	4313      	orrs	r3, r2
 800798e:	061a      	lsls	r2, r3, #24
 8007990:	4b41      	ldr	r3, [pc, #260]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	0619      	lsls	r1, r3, #24
 8007996:	4b40      	ldr	r3, [pc, #256]	; (8007a98 <MX_LWIP_Init+0x290>)
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	4319      	orrs	r1, r3
 800799e:	4b3e      	ldr	r3, [pc, #248]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079a0:	789b      	ldrb	r3, [r3, #2]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	430b      	orrs	r3, r1
 80079a6:	493c      	ldr	r1, [pc, #240]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079a8:	78c9      	ldrb	r1, [r1, #3]
 80079aa:	430b      	orrs	r3, r1
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079b2:	431a      	orrs	r2, r3
 80079b4:	4b38      	ldr	r3, [pc, #224]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	0619      	lsls	r1, r3, #24
 80079ba:	4b37      	ldr	r3, [pc, #220]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	4319      	orrs	r1, r3
 80079c2:	4b35      	ldr	r3, [pc, #212]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079c4:	789b      	ldrb	r3, [r3, #2]
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	430b      	orrs	r3, r1
 80079ca:	4933      	ldr	r1, [pc, #204]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079cc:	78c9      	ldrb	r1, [r1, #3]
 80079ce:	430b      	orrs	r3, r1
 80079d0:	0a1b      	lsrs	r3, r3, #8
 80079d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079d6:	431a      	orrs	r2, r3
 80079d8:	4b2f      	ldr	r3, [pc, #188]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	0619      	lsls	r1, r3, #24
 80079de:	4b2e      	ldr	r3, [pc, #184]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	4319      	orrs	r1, r3
 80079e6:	4b2c      	ldr	r3, [pc, #176]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079e8:	789b      	ldrb	r3, [r3, #2]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	430b      	orrs	r3, r1
 80079ee:	492a      	ldr	r1, [pc, #168]	; (8007a98 <MX_LWIP_Init+0x290>)
 80079f0:	78c9      	ldrb	r1, [r1, #3]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	0e1b      	lsrs	r3, r3, #24
 80079f6:	4313      	orrs	r3, r2
 80079f8:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <MX_LWIP_Init+0x29c>)
 80079fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80079fc:	4b2a      	ldr	r3, [pc, #168]	; (8007aa8 <MX_LWIP_Init+0x2a0>)
 80079fe:	9302      	str	r3, [sp, #8]
 8007a00:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <MX_LWIP_Init+0x2a4>)
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	2300      	movs	r3, #0
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4b26      	ldr	r3, [pc, #152]	; (8007aa4 <MX_LWIP_Init+0x29c>)
 8007a0a:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <MX_LWIP_Init+0x298>)
 8007a0c:	4923      	ldr	r1, [pc, #140]	; (8007a9c <MX_LWIP_Init+0x294>)
 8007a0e:	4828      	ldr	r0, [pc, #160]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a10:	f009 ff50 	bl	80118b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007a14:	4826      	ldr	r0, [pc, #152]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a16:	f00a f8ff 	bl	8011c18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007a1a:	4b25      	ldr	r3, [pc, #148]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007a2c:	4820      	ldr	r0, [pc, #128]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a2e:	f00a f903 	bl	8011c38 <netif_set_up>
 8007a32:	e002      	b.n	8007a3a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007a34:	481e      	ldr	r0, [pc, #120]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a36:	f00a f96b 	bl	8011d10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007a3a:	491e      	ldr	r1, [pc, #120]	; (8007ab4 <MX_LWIP_Init+0x2ac>)
 8007a3c:	481c      	ldr	r0, [pc, #112]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a3e:	f00a f9fd 	bl	8011e3c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8007a42:	2200      	movs	r2, #0
 8007a44:	2101      	movs	r1, #1
 8007a46:	2001      	movs	r0, #1
 8007a48:	f003 fa30 	bl	800aeac <osSemaphoreNew>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	4a1a      	ldr	r2, [pc, #104]	; (8007ab8 <MX_LWIP_Init+0x2b0>)
 8007a50:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8007a52:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <MX_LWIP_Init+0x2b4>)
 8007a54:	4a16      	ldr	r2, [pc, #88]	; (8007ab0 <MX_LWIP_Init+0x2a8>)
 8007a56:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007a58:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <MX_LWIP_Init+0x2b0>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <MX_LWIP_Init+0x2b4>)
 8007a5e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007a60:	2224      	movs	r2, #36	; 0x24
 8007a62:	2100      	movs	r1, #0
 8007a64:	4816      	ldr	r0, [pc, #88]	; (8007ac0 <MX_LWIP_Init+0x2b8>)
 8007a66:	f014 fafa 	bl	801c05e <memset>
  attributes.name = "LinkThr";
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <MX_LWIP_Init+0x2b8>)
 8007a6c:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <MX_LWIP_Init+0x2bc>)
 8007a6e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <MX_LWIP_Init+0x2b8>)
 8007a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a76:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007a78:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <MX_LWIP_Init+0x2b8>)
 8007a7a:	2210      	movs	r2, #16
 8007a7c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <MX_LWIP_Init+0x2b8>)
 8007a80:	490e      	ldr	r1, [pc, #56]	; (8007abc <MX_LWIP_Init+0x2b4>)
 8007a82:	4811      	ldr	r0, [pc, #68]	; (8007ac8 <MX_LWIP_Init+0x2c0>)
 8007a84:	f003 f857 	bl	800ab36 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007a88:	bf00      	nop
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	2000c998 	.word	0x2000c998
 8007a94:	2000c994 	.word	0x2000c994
 8007a98:	2000c934 	.word	0x2000c934
 8007a9c:	2000c990 	.word	0x2000c990
 8007aa0:	2000c99c 	.word	0x2000c99c
 8007aa4:	2000c9a0 	.word	0x2000c9a0
 8007aa8:	08010c2d 	.word	0x08010c2d
 8007aac:	080080f5 	.word	0x080080f5
 8007ab0:	2000c95c 	.word	0x2000c95c
 8007ab4:	080081d9 	.word	0x080081d9
 8007ab8:	20001538 	.word	0x20001538
 8007abc:	2000c92c 	.word	0x2000c92c
 8007ac0:	2000c938 	.word	0x2000c938
 8007ac4:	0801deac 	.word	0x0801deac
 8007ac8:	08008161 	.word	0x08008161

08007acc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	; 0x38
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	609a      	str	r2, [r3, #8]
 8007ae0:	60da      	str	r2, [r3, #12]
 8007ae2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a4a      	ldr	r2, [pc, #296]	; (8007c14 <HAL_ETH_MspInit+0x148>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	f040 808d 	bne.w	8007c0a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007af0:	2300      	movs	r3, #0
 8007af2:	623b      	str	r3, [r7, #32]
 8007af4:	4b48      	ldr	r3, [pc, #288]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	4a47      	ldr	r2, [pc, #284]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007afe:	6313      	str	r3, [r2, #48]	; 0x30
 8007b00:	4b45      	ldr	r3, [pc, #276]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b08:	623b      	str	r3, [r7, #32]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b14:	4a40      	ldr	r2, [pc, #256]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b1c:	4b3e      	ldr	r3, [pc, #248]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	4b3a      	ldr	r3, [pc, #232]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	4a39      	ldr	r2, [pc, #228]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b36:	6313      	str	r3, [r2, #48]	; 0x30
 8007b38:	4b37      	ldr	r3, [pc, #220]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	4b33      	ldr	r3, [pc, #204]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	4a32      	ldr	r2, [pc, #200]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b4e:	f043 0304 	orr.w	r3, r3, #4
 8007b52:	6313      	str	r3, [r2, #48]	; 0x30
 8007b54:	4b30      	ldr	r3, [pc, #192]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	617b      	str	r3, [r7, #20]
 8007b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	4b2c      	ldr	r3, [pc, #176]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	4a2b      	ldr	r2, [pc, #172]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8007b70:	4b29      	ldr	r3, [pc, #164]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b84:	4a24      	ldr	r2, [pc, #144]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b8c:	4b22      	ldr	r3, [pc, #136]	; (8007c18 <HAL_ETH_MspInit+0x14c>)
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007b98:	2332      	movs	r3, #50	; 0x32
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ba8:	230b      	movs	r3, #11
 8007baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	481a      	ldr	r0, [pc, #104]	; (8007c1c <HAL_ETH_MspInit+0x150>)
 8007bb4:	f7fb feee 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007bb8:	2386      	movs	r3, #134	; 0x86
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007bc8:	230b      	movs	r3, #11
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4813      	ldr	r0, [pc, #76]	; (8007c20 <HAL_ETH_MspInit+0x154>)
 8007bd4:	f7fb fede 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bde:	2302      	movs	r3, #2
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007be6:	2303      	movs	r3, #3
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007bea:	230b      	movs	r3, #11
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	480b      	ldr	r0, [pc, #44]	; (8007c24 <HAL_ETH_MspInit+0x158>)
 8007bf6:	f7fb fecd 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2105      	movs	r1, #5
 8007bfe:	203d      	movs	r0, #61	; 0x3d
 8007c00:	f7fa f95a 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007c04:	203d      	movs	r0, #61	; 0x3d
 8007c06:	f7fa f973 	bl	8001ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3738      	adds	r7, #56	; 0x38
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40028000 	.word	0x40028000
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	40020800 	.word	0x40020800
 8007c20:	40020000 	.word	0x40020000
 8007c24:	40020400 	.word	0x40020400

08007c28 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <HAL_ETH_RxCpltCallback+0x1c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f003 fa15 	bl	800b064 <osSemaphoreRelease>
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	2000153c 	.word	0x2000153c

08007c48 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b090      	sub	sp, #64	; 0x40
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007c54:	4b5d      	ldr	r3, [pc, #372]	; (8007dcc <low_level_init+0x184>)
 8007c56:	4a5e      	ldr	r2, [pc, #376]	; (8007dd0 <low_level_init+0x188>)
 8007c58:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007c5a:	4b5c      	ldr	r3, [pc, #368]	; (8007dcc <low_level_init+0x184>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007c60:	4b5a      	ldr	r3, [pc, #360]	; (8007dcc <low_level_init+0x184>)
 8007c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c66:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007c68:	4b58      	ldr	r3, [pc, #352]	; (8007dcc <low_level_init+0x184>)
 8007c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c6e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007c70:	4b56      	ldr	r3, [pc, #344]	; (8007dcc <low_level_init+0x184>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007c76:	2300      	movs	r3, #0
 8007c78:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8007c7e:	23e1      	movs	r3, #225	; 0xe1
 8007c80:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8007c86:	2300      	movs	r3, #0
 8007c88:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8007c8e:	4a4f      	ldr	r2, [pc, #316]	; (8007dcc <low_level_init+0x184>)
 8007c90:	f107 030c 	add.w	r3, r7, #12
 8007c94:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8007c96:	4b4d      	ldr	r3, [pc, #308]	; (8007dcc <low_level_init+0x184>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007c9c:	4b4b      	ldr	r3, [pc, #300]	; (8007dcc <low_level_init+0x184>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007ca2:	4b4a      	ldr	r3, [pc, #296]	; (8007dcc <low_level_init+0x184>)
 8007ca4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007ca8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007caa:	4848      	ldr	r0, [pc, #288]	; (8007dcc <low_level_init+0x184>)
 8007cac:	f7fa fccc 	bl	8002648 <HAL_ETH_Init>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8007cb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d108      	bne.n	8007cd0 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cc4:	f043 0304 	orr.w	r3, r3, #4
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	4a40      	ldr	r2, [pc, #256]	; (8007dd4 <low_level_init+0x18c>)
 8007cd4:	4940      	ldr	r1, [pc, #256]	; (8007dd8 <low_level_init+0x190>)
 8007cd6:	483d      	ldr	r0, [pc, #244]	; (8007dcc <low_level_init+0x184>)
 8007cd8:	f7fa fe52 	bl	8002980 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007cdc:	2304      	movs	r3, #4
 8007cde:	4a3f      	ldr	r2, [pc, #252]	; (8007ddc <low_level_init+0x194>)
 8007ce0:	493f      	ldr	r1, [pc, #252]	; (8007de0 <low_level_init+0x198>)
 8007ce2:	483a      	ldr	r0, [pc, #232]	; (8007dcc <low_level_init+0x184>)
 8007ce4:	f7fa feb5 	bl	8002a52 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2206      	movs	r2, #6
 8007cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007cf0:	4b36      	ldr	r3, [pc, #216]	; (8007dcc <low_level_init+0x184>)
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	781a      	ldrb	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007cfc:	4b33      	ldr	r3, [pc, #204]	; (8007dcc <low_level_init+0x184>)
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	785a      	ldrb	r2, [r3, #1]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007d08:	4b30      	ldr	r3, [pc, #192]	; (8007dcc <low_level_init+0x184>)
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	789a      	ldrb	r2, [r3, #2]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007d14:	4b2d      	ldr	r3, [pc, #180]	; (8007dcc <low_level_init+0x184>)
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	78da      	ldrb	r2, [r3, #3]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007d20:	4b2a      	ldr	r3, [pc, #168]	; (8007dcc <low_level_init+0x184>)
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	791a      	ldrb	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <low_level_init+0x184>)
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	795a      	ldrb	r2, [r3, #5]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007d3e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d46:	f043 030a 	orr.w	r3, r3, #10
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8007d52:	2200      	movs	r2, #0
 8007d54:	2101      	movs	r1, #1
 8007d56:	2001      	movs	r0, #1
 8007d58:	f003 f8a8 	bl	800aeac <osSemaphoreNew>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4a21      	ldr	r2, [pc, #132]	; (8007de4 <low_level_init+0x19c>)
 8007d60:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	2224      	movs	r2, #36	; 0x24
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f014 f977 	bl	801c05e <memset>
  attributes.name = "EthIf";
 8007d70:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <low_level_init+0x1a0>)
 8007d72:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007d74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8007d7a:	2330      	movs	r3, #48	; 0x30
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007d7e:	f107 0314 	add.w	r3, r7, #20
 8007d82:	461a      	mov	r2, r3
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4819      	ldr	r0, [pc, #100]	; (8007dec <low_level_init+0x1a4>)
 8007d88:	f002 fed5 	bl	800ab36 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007d8c:	480f      	ldr	r0, [pc, #60]	; (8007dcc <low_level_init+0x184>)
 8007d8e:	f7fb f988 	bl	80030a2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d96:	461a      	mov	r2, r3
 8007d98:	211d      	movs	r1, #29
 8007d9a:	480c      	ldr	r0, [pc, #48]	; (8007dcc <low_level_init+0x184>)
 8007d9c:	f7fb f8b3 	bl	8002f06 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	f043 030b 	orr.w	r3, r3, #11
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	461a      	mov	r2, r3
 8007dac:	211d      	movs	r1, #29
 8007dae:	4807      	ldr	r0, [pc, #28]	; (8007dcc <low_level_init+0x184>)
 8007db0:	f7fb f911 	bl	8002fd6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007db4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007db8:	461a      	mov	r2, r3
 8007dba:	211d      	movs	r1, #29
 8007dbc:	4803      	ldr	r0, [pc, #12]	; (8007dcc <low_level_init+0x184>)
 8007dbe:	f7fb f8a2 	bl	8002f06 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007dc2:	bf00      	nop
 8007dc4:	3740      	adds	r7, #64	; 0x40
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000e274 	.word	0x2000e274
 8007dd0:	40028000 	.word	0x40028000
 8007dd4:	2000e2bc 	.word	0x2000e2bc
 8007dd8:	2000c9a4 	.word	0x2000c9a4
 8007ddc:	2000ca24 	.word	0x2000ca24
 8007de0:	2000e1f4 	.word	0x2000e1f4
 8007de4:	2000153c 	.word	0x2000153c
 8007de8:	0801deb4 	.word	0x0801deb4
 8007dec:	08008095 	.word	0x08008095

08007df0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007dfa:	4b4b      	ldr	r3, [pc, #300]	; (8007f28 <low_level_output+0x138>)
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007e12:	4b45      	ldr	r3, [pc, #276]	; (8007f28 <low_level_output+0x138>)
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	623b      	str	r3, [r7, #32]
 8007e20:	e05a      	b.n	8007ed8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da03      	bge.n	8007e32 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007e2a:	23f8      	movs	r3, #248	; 0xf8
 8007e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007e30:	e05c      	b.n	8007eec <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	895b      	ldrh	r3, [r3, #10]
 8007e36:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007e3c:	e02f      	b.n	8007e9e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	18d0      	adds	r0, r2, r3
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	18d1      	adds	r1, r2, r3
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007e52:	3304      	adds	r3, #4
 8007e54:	461a      	mov	r2, r3
 8007e56:	f014 f8da 	bl	801c00e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da03      	bge.n	8007e70 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007e68:	23f8      	movs	r3, #248	; 0xf8
 8007e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007e6e:	e03d      	b.n	8007eec <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007e80:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007e8c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007e98:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d8c8      	bhi.n	8007e3e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	18d0      	adds	r0, r2, r3
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f014 f8a6 	bl	801c00e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	623b      	str	r3, [r7, #32]
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1a1      	bne.n	8007e22 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007ede:	6979      	ldr	r1, [r7, #20]
 8007ee0:	4811      	ldr	r0, [pc, #68]	; (8007f28 <low_level_output+0x138>)
 8007ee2:	f7fa fe23 	bl	8002b2c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007eec:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <low_level_output+0x138>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef4:	3314      	adds	r3, #20
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00d      	beq.n	8007f1c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007f00:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <low_level_output+0x138>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f08:	3314      	adds	r3, #20
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <low_level_output+0x138>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f16:	3304      	adds	r3, #4
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3728      	adds	r7, #40	; 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	2000e274 	.word	0x2000e274

08007f2c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08c      	sub	sp, #48	; 0x30
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007f50:	484f      	ldr	r0, [pc, #316]	; (8008090 <low_level_input+0x164>)
 8007f52:	f7fa fed5 	bl	8002d00 <HAL_ETH_GetReceivedFrame_IT>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <low_level_input+0x34>

    return NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e092      	b.n	8008086 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007f60:	4b4b      	ldr	r3, [pc, #300]	; (8008090 <low_level_input+0x164>)
 8007f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f64:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007f66:	4b4a      	ldr	r3, [pc, #296]	; (8008090 <low_level_input+0x164>)
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d007      	beq.n	8007f82 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007f72:	89fb      	ldrh	r3, [r7, #14]
 8007f74:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007f78:	4619      	mov	r1, r3
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f00a f828 	bl	8011fd0 <pbuf_alloc>
 8007f80:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d04b      	beq.n	8008020 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007f88:	4b41      	ldr	r3, [pc, #260]	; (8008090 <low_level_input+0x164>)
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f96:	e040      	b.n	800801a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	895b      	ldrh	r3, [r3, #10]
 8007f9c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007fa2:	e021      	b.n	8007fe8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	18d0      	adds	r0, r2, r3
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	18d1      	adds	r1, r2, r3
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007fb8:	3304      	adds	r3, #4
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f014 f827 	bl	801c00e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007fd6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007fe2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d8d6      	bhi.n	8007fa4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	18d0      	adds	r0, r2, r3
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	4413      	add	r3, r2
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	4619      	mov	r1, r3
 8008008:	f014 f801 	bl	801c00e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1bb      	bne.n	8007f98 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008020:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <low_level_input+0x164>)
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	e00b      	b.n	8008044 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3301      	adds	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	4b12      	ldr	r3, [pc, #72]	; (8008090 <low_level_input+0x164>)
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	429a      	cmp	r2, r3
 800804c:	d3ee      	bcc.n	800802c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800804e:	4b10      	ldr	r3, [pc, #64]	; (8008090 <low_level_input+0x164>)
 8008050:	2200      	movs	r2, #0
 8008052:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <low_level_input+0x164>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805c:	3314      	adds	r3, #20
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00d      	beq.n	8008084 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <low_level_input+0x164>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008070:	3314      	adds	r3, #20
 8008072:	2280      	movs	r2, #128	; 0x80
 8008074:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <low_level_input+0x164>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	3308      	adds	r3, #8
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008086:	4618      	mov	r0, r3
 8008088:	3730      	adds	r7, #48	; 0x30
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	2000e274 	.word	0x2000e274

08008094 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <ethernetif_input+0x58>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 ff89 	bl	800afc0 <osSemaphoreAcquire>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f5      	bne.n	80080a0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80080b4:	480e      	ldr	r0, [pc, #56]	; (80080f0 <ethernetif_input+0x5c>)
 80080b6:	f013 fe21 	bl	801bcfc <sys_mutex_lock>
        p = low_level_input( netif );
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ff36 	bl	8007f2c <low_level_input>
 80080c0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	68f9      	ldr	r1, [r7, #12]
 80080ce:	68b8      	ldr	r0, [r7, #8]
 80080d0:	4798      	blx	r3
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f00a fa5d 	bl	8012598 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80080de:	4804      	ldr	r0, [pc, #16]	; (80080f0 <ethernetif_input+0x5c>)
 80080e0:	f013 fe1b 	bl	801bd1a <sys_mutex_unlock>
      } while(p!=NULL);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e4      	bne.n	80080b4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80080ea:	e7d9      	b.n	80080a0 <ethernetif_input+0xc>
 80080ec:	2000153c 	.word	0x2000153c
 80080f0:	2000facc 	.word	0x2000facc

080080f4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <ethernetif_init+0x1c>
 8008102:	4b0e      	ldr	r3, [pc, #56]	; (800813c <ethernetif_init+0x48>)
 8008104:	f240 2231 	movw	r2, #561	; 0x231
 8008108:	490d      	ldr	r1, [pc, #52]	; (8008140 <ethernetif_init+0x4c>)
 800810a:	480e      	ldr	r0, [pc, #56]	; (8008144 <ethernetif_init+0x50>)
 800810c:	f014 f80a 	bl	801c124 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2273      	movs	r2, #115	; 0x73
 8008114:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2274      	movs	r2, #116	; 0x74
 800811c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a09      	ldr	r2, [pc, #36]	; (8008148 <ethernetif_init+0x54>)
 8008124:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <ethernetif_init+0x58>)
 800812a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff fd8b 	bl	8007c48 <low_level_init>

  return ERR_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	0801debc 	.word	0x0801debc
 8008140:	0801ded8 	.word	0x0801ded8
 8008144:	0801dee8 	.word	0x0801dee8
 8008148:	08019d5d 	.word	0x08019d5d
 800814c:	08007df1 	.word	0x08007df1

08008150 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008154:	f7f9 fdc8 	bl	8001ce8 <HAL_GetTick>
 8008158:	4603      	mov	r3, r0
}
 800815a:	4618      	mov	r0, r3
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	461a      	mov	r2, r3
 8008176:	2101      	movs	r1, #1
 8008178:	4816      	ldr	r0, [pc, #88]	; (80081d4 <ethernetif_set_link+0x74>)
 800817a:	f7fa fec4 	bl	8002f06 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d108      	bne.n	80081a8 <ethernetif_set_link+0x48>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f009 fde7 	bl	8011d74 <netif_set_link_up>
 80081a6:	e011      	b.n	80081cc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081b0:	089b      	lsrs	r3, r3, #2
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <ethernetif_set_link+0x6c>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f009 fe08 	bl	8011ddc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80081cc:	20c8      	movs	r0, #200	; 0xc8
 80081ce:	f002 fd44 	bl	800ac5a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80081d2:	e7cd      	b.n	8008170 <ethernetif_set_link+0x10>
 80081d4:	2000e274 	.word	0x2000e274

080081d8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d05d      	beq.n	80082b6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80081fa:	4b34      	ldr	r3, [pc, #208]	; (80082cc <ethernetif_update_config+0xf4>)
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d03f      	beq.n	8008282 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008206:	2100      	movs	r1, #0
 8008208:	4830      	ldr	r0, [pc, #192]	; (80082cc <ethernetif_update_config+0xf4>)
 800820a:	f7fa fee4 	bl	8002fd6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800820e:	f7f9 fd6b 	bl	8001ce8 <HAL_GetTick>
 8008212:	4603      	mov	r3, r0
 8008214:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	461a      	mov	r2, r3
 800821c:	2101      	movs	r1, #1
 800821e:	482b      	ldr	r0, [pc, #172]	; (80082cc <ethernetif_update_config+0xf4>)
 8008220:	f7fa fe71 	bl	8002f06 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008224:	f7f9 fd60 	bl	8001ce8 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008232:	d828      	bhi.n	8008286 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0eb      	beq.n	8008216 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800823e:	f107 0308 	add.w	r3, r7, #8
 8008242:	461a      	mov	r2, r3
 8008244:	2110      	movs	r1, #16
 8008246:	4821      	ldr	r0, [pc, #132]	; (80082cc <ethernetif_update_config+0xf4>)
 8008248:	f7fa fe5d 	bl	8002f06 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008256:	4b1d      	ldr	r3, [pc, #116]	; (80082cc <ethernetif_update_config+0xf4>)
 8008258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800825c:	60da      	str	r2, [r3, #12]
 800825e:	e002      	b.n	8008266 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <ethernetif_update_config+0xf4>)
 8008262:	2200      	movs	r2, #0
 8008264:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008270:	4b16      	ldr	r3, [pc, #88]	; (80082cc <ethernetif_update_config+0xf4>)
 8008272:	2200      	movs	r2, #0
 8008274:	609a      	str	r2, [r3, #8]
 8008276:	e016      	b.n	80082a6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008278:	4b14      	ldr	r3, [pc, #80]	; (80082cc <ethernetif_update_config+0xf4>)
 800827a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	e011      	b.n	80082a6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <ethernetif_update_config+0xb0>
          goto error;
 8008286:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008288:	4b10      	ldr	r3, [pc, #64]	; (80082cc <ethernetif_update_config+0xf4>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	08db      	lsrs	r3, r3, #3
 800828e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008290:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <ethernetif_update_config+0xf4>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008298:	4313      	orrs	r3, r2
 800829a:	b29b      	uxth	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	2100      	movs	r1, #0
 80082a0:	480a      	ldr	r0, [pc, #40]	; (80082cc <ethernetif_update_config+0xf4>)
 80082a2:	f7fa fe98 	bl	8002fd6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80082a6:	2100      	movs	r1, #0
 80082a8:	4808      	ldr	r0, [pc, #32]	; (80082cc <ethernetif_update_config+0xf4>)
 80082aa:	f7fa ff59 	bl	8003160 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80082ae:	4807      	ldr	r0, [pc, #28]	; (80082cc <ethernetif_update_config+0xf4>)
 80082b0:	f7fa fef7 	bl	80030a2 <HAL_ETH_Start>
 80082b4:	e002      	b.n	80082bc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80082b6:	4805      	ldr	r0, [pc, #20]	; (80082cc <ethernetif_update_config+0xf4>)
 80082b8:	f7fa ff22 	bl	8003100 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f807 	bl	80082d0 <ethernetif_notify_conn_changed>
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	2000e274 	.word	0x2000e274

080082d0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	4a08      	ldr	r2, [pc, #32]	; (8008314 <disk_status+0x30>)
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	79fa      	ldrb	r2, [r7, #7]
 80082fc:	4905      	ldr	r1, [pc, #20]	; (8008314 <disk_status+0x30>)
 80082fe:	440a      	add	r2, r1
 8008300:	7a12      	ldrb	r2, [r2, #8]
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
  return stat;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20001568 	.word	0x20001568

08008318 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <disk_initialize+0x48>)
 800832a:	5cd3      	ldrb	r3, [r2, r3]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d111      	bne.n	8008354 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	4a0b      	ldr	r2, [pc, #44]	; (8008360 <disk_initialize+0x48>)
 8008334:	2101      	movs	r1, #1
 8008336:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	4a09      	ldr	r2, [pc, #36]	; (8008360 <disk_initialize+0x48>)
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	79fa      	ldrb	r2, [r7, #7]
 8008346:	4906      	ldr	r1, [pc, #24]	; (8008360 <disk_initialize+0x48>)
 8008348:	440a      	add	r2, r1
 800834a:	7a12      	ldrb	r2, [r2, #8]
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20001568 	.word	0x20001568

08008364 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	4a0a      	ldr	r2, [pc, #40]	; (80083a0 <disk_read+0x3c>)
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	689c      	ldr	r4, [r3, #8]
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4a07      	ldr	r2, [pc, #28]	; (80083a0 <disk_read+0x3c>)
 8008384:	4413      	add	r3, r2
 8008386:	7a18      	ldrb	r0, [r3, #8]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	47a0      	blx	r4
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]
  return res;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
}
 8008396:	4618      	mov	r0, r3
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}
 800839e:	bf00      	nop
 80083a0:	20001568 	.word	0x20001568

080083a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <disk_write+0x3c>)
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68dc      	ldr	r4, [r3, #12]
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	4a07      	ldr	r2, [pc, #28]	; (80083e0 <disk_write+0x3c>)
 80083c4:	4413      	add	r3, r2
 80083c6:	7a18      	ldrb	r0, [r3, #8]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	47a0      	blx	r4
 80083d0:	4603      	mov	r3, r0
 80083d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd90      	pop	{r4, r7, pc}
 80083de:	bf00      	nop
 80083e0:	20001568 	.word	0x20001568

080083e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	603a      	str	r2, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
 80083f0:	460b      	mov	r3, r1
 80083f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	4a09      	ldr	r2, [pc, #36]	; (800841c <disk_ioctl+0x38>)
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	79fa      	ldrb	r2, [r7, #7]
 8008402:	4906      	ldr	r1, [pc, #24]	; (800841c <disk_ioctl+0x38>)
 8008404:	440a      	add	r2, r1
 8008406:	7a10      	ldrb	r0, [r2, #8]
 8008408:	79b9      	ldrb	r1, [r7, #6]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	4798      	blx	r3
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]
  return res;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20001568 	.word	0x20001568

08008420 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3301      	adds	r3, #1
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	b21a      	sxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b21b      	sxth	r3, r3
 800843c:	4313      	orrs	r3, r2
 800843e:	b21b      	sxth	r3, r3
 8008440:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008442:	89fb      	ldrh	r3, [r7, #14]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3303      	adds	r3, #3
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	3202      	adds	r2, #2
 8008468:	7812      	ldrb	r2, [r2, #0]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	3201      	adds	r2, #1
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	7812      	ldrb	r2, [r2, #0]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
	return rv;
 8008488:	68fb      	ldr	r3, [r7, #12]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	887a      	ldrh	r2, [r7, #2]
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	887b      	ldrh	r3, [r7, #2]
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	887a      	ldrh	r2, [r7, #2]
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	b2d2      	uxtb	r2, r2
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	0a1b      	lsrs	r3, r3, #8
 80084e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	0a1b      	lsrs	r3, r3, #8
 800850a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	b2d2      	uxtb	r2, r2
 8008516:	701a      	strb	r2, [r3, #0]
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	1c53      	adds	r3, r2, #1
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	1c59      	adds	r1, r3, #1
 8008548:	6179      	str	r1, [r7, #20]
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3b01      	subs	r3, #1
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f1      	bne.n	800853e <mem_cpy+0x1a>
	}
}
 800855a:	bf00      	nop
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008566:	b480      	push	{r7}
 8008568:	b087      	sub	sp, #28
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	617a      	str	r2, [r7, #20]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3b01      	subs	r3, #1
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f3      	bne.n	8008576 <mem_set+0x10>
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800859c:	b480      	push	{r7}
 800859e:	b089      	sub	sp, #36	; 0x24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	61fa      	str	r2, [r7, #28]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	4619      	mov	r1, r3
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	61ba      	str	r2, [r7, #24]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	1acb      	subs	r3, r1, r3
 80085c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	607b      	str	r3, [r7, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <mem_cmp+0x40>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0eb      	beq.n	80085b4 <mem_cmp+0x18>

	return r;
 80085dc:	697b      	ldr	r3, [r7, #20]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3724      	adds	r7, #36	; 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085f4:	e002      	b.n	80085fc <chk_chr+0x12>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3301      	adds	r3, #1
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <chk_chr+0x26>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	4293      	cmp	r3, r2
 800860e:	d1f2      	bne.n	80085f6 <chk_chr+0xc>
	return *str;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	781b      	ldrb	r3, [r3, #0]
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <lock_fs+0x22>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	4618      	mov	r0, r3
 8008634:	f002 f99a 	bl	800a96c <ff_req_grant>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <lock_fs+0x22>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <lock_fs+0x24>
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <unlock_fs+0x2e>
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	2b0c      	cmp	r3, #12
 8008662:	d00a      	beq.n	800867a <unlock_fs+0x2e>
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	2b0b      	cmp	r3, #11
 8008668:	d007      	beq.n	800867a <unlock_fs+0x2e>
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2b0f      	cmp	r3, #15
 800866e:	d004      	beq.n	800867a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	4618      	mov	r0, r3
 8008676:	f002 f98e 	bl	800a996 <ff_rel_grant>
	}
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800868e:	2300      	movs	r3, #0
 8008690:	60bb      	str	r3, [r7, #8]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e029      	b.n	80086ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008698:	4a27      	ldr	r2, [pc, #156]	; (8008738 <chk_lock+0xb4>)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	4413      	add	r3, r2
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01d      	beq.n	80086e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086a6:	4a24      	ldr	r2, [pc, #144]	; (8008738 <chk_lock+0xb4>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	4413      	add	r3, r2
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d116      	bne.n	80086e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <chk_lock+0xb4>)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	4413      	add	r3, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d10c      	bne.n	80086e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086cc:	4a1a      	ldr	r2, [pc, #104]	; (8008738 <chk_lock+0xb4>)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	4413      	add	r3, r2
 80086d4:	3308      	adds	r3, #8
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80086dc:	429a      	cmp	r2, r3
 80086de:	d102      	bne.n	80086e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086e0:	e007      	b.n	80086f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80086e2:	2301      	movs	r3, #1
 80086e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d9d2      	bls.n	8008698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d109      	bne.n	800870c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <chk_lock+0x80>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d101      	bne.n	8008708 <chk_lock+0x84>
 8008704:	2300      	movs	r3, #0
 8008706:	e010      	b.n	800872a <chk_lock+0xa6>
 8008708:	2312      	movs	r3, #18
 800870a:	e00e      	b.n	800872a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d108      	bne.n	8008724 <chk_lock+0xa0>
 8008712:	4a09      	ldr	r2, [pc, #36]	; (8008738 <chk_lock+0xb4>)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	4413      	add	r3, r2
 800871a:	330c      	adds	r3, #12
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008722:	d101      	bne.n	8008728 <chk_lock+0xa4>
 8008724:	2310      	movs	r3, #16
 8008726:	e000      	b.n	800872a <chk_lock+0xa6>
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20001548 	.word	0x20001548

0800873c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008742:	2300      	movs	r3, #0
 8008744:	607b      	str	r3, [r7, #4]
 8008746:	e002      	b.n	800874e <enq_lock+0x12>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3301      	adds	r3, #1
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d806      	bhi.n	8008762 <enq_lock+0x26>
 8008754:	4a09      	ldr	r2, [pc, #36]	; (800877c <enq_lock+0x40>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	4413      	add	r3, r2
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f2      	bne.n	8008748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b02      	cmp	r3, #2
 8008766:	bf14      	ite	ne
 8008768:	2301      	movne	r3, #1
 800876a:	2300      	moveq	r3, #0
 800876c:	b2db      	uxtb	r3, r3
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20001548 	.word	0x20001548

08008780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e01f      	b.n	80087d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008790:	4a41      	ldr	r2, [pc, #260]	; (8008898 <inc_lock+0x118>)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	4413      	add	r3, r2
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d113      	bne.n	80087ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80087a2:	4a3d      	ldr	r2, [pc, #244]	; (8008898 <inc_lock+0x118>)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	4413      	add	r3, r2
 80087aa:	3304      	adds	r3, #4
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d109      	bne.n	80087ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80087b6:	4a38      	ldr	r2, [pc, #224]	; (8008898 <inc_lock+0x118>)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	4413      	add	r3, r2
 80087be:	3308      	adds	r3, #8
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d006      	beq.n	80087d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d9dc      	bls.n	8008790 <inc_lock+0x10>
 80087d6:	e000      	b.n	80087da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80087d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d132      	bne.n	8008846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e002      	b.n	80087ec <inc_lock+0x6c>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d806      	bhi.n	8008800 <inc_lock+0x80>
 80087f2:	4a29      	ldr	r2, [pc, #164]	; (8008898 <inc_lock+0x118>)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	4413      	add	r3, r2
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1f2      	bne.n	80087e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d101      	bne.n	800880a <inc_lock+0x8a>
 8008806:	2300      	movs	r3, #0
 8008808:	e040      	b.n	800888c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4922      	ldr	r1, [pc, #136]	; (8008898 <inc_lock+0x118>)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	440b      	add	r3, r1
 8008816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	491e      	ldr	r1, [pc, #120]	; (8008898 <inc_lock+0x118>)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	440b      	add	r3, r1
 8008824:	3304      	adds	r3, #4
 8008826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	695a      	ldr	r2, [r3, #20]
 800882c:	491a      	ldr	r1, [pc, #104]	; (8008898 <inc_lock+0x118>)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	440b      	add	r3, r1
 8008834:	3308      	adds	r3, #8
 8008836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008838:	4a17      	ldr	r2, [pc, #92]	; (8008898 <inc_lock+0x118>)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	4413      	add	r3, r2
 8008840:	330c      	adds	r3, #12
 8008842:	2200      	movs	r2, #0
 8008844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <inc_lock+0xe0>
 800884c:	4a12      	ldr	r2, [pc, #72]	; (8008898 <inc_lock+0x118>)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	4413      	add	r3, r2
 8008854:	330c      	adds	r3, #12
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <inc_lock+0xe0>
 800885c:	2300      	movs	r3, #0
 800885e:	e015      	b.n	800888c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d108      	bne.n	8008878 <inc_lock+0xf8>
 8008866:	4a0c      	ldr	r2, [pc, #48]	; (8008898 <inc_lock+0x118>)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	4413      	add	r3, r2
 800886e:	330c      	adds	r3, #12
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	3301      	adds	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	e001      	b.n	800887c <inc_lock+0xfc>
 8008878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800887c:	4906      	ldr	r1, [pc, #24]	; (8008898 <inc_lock+0x118>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	440b      	add	r3, r1
 8008884:	330c      	adds	r3, #12
 8008886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	20001548 	.word	0x20001548

0800889c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d825      	bhi.n	80088fc <dec_lock+0x60>
		n = Files[i].ctr;
 80088b0:	4a17      	ldr	r2, [pc, #92]	; (8008910 <dec_lock+0x74>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	4413      	add	r3, r2
 80088b8:	330c      	adds	r3, #12
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80088be:	89fb      	ldrh	r3, [r7, #14]
 80088c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c4:	d101      	bne.n	80088ca <dec_lock+0x2e>
 80088c6:	2300      	movs	r3, #0
 80088c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80088ca:	89fb      	ldrh	r3, [r7, #14]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <dec_lock+0x3a>
 80088d0:	89fb      	ldrh	r3, [r7, #14]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80088d6:	4a0e      	ldr	r2, [pc, #56]	; (8008910 <dec_lock+0x74>)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	4413      	add	r3, r2
 80088de:	330c      	adds	r3, #12
 80088e0:	89fa      	ldrh	r2, [r7, #14]
 80088e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80088e4:	89fb      	ldrh	r3, [r7, #14]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d105      	bne.n	80088f6 <dec_lock+0x5a>
 80088ea:	4a09      	ldr	r2, [pc, #36]	; (8008910 <dec_lock+0x74>)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	4413      	add	r3, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	737b      	strb	r3, [r7, #13]
 80088fa:	e001      	b.n	8008900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80088fc:	2302      	movs	r3, #2
 80088fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008900:	7b7b      	ldrb	r3, [r7, #13]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20001548 	.word	0x20001548

08008914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	e010      	b.n	8008944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008922:	4a0d      	ldr	r2, [pc, #52]	; (8008958 <clear_lock+0x44>)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	4413      	add	r3, r2
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d105      	bne.n	800893e <clear_lock+0x2a>
 8008932:	4a09      	ldr	r2, [pc, #36]	; (8008958 <clear_lock+0x44>)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	4413      	add	r3, r2
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d9eb      	bls.n	8008922 <clear_lock+0xe>
	}
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20001548 	.word	0x20001548

0800895c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	78db      	ldrb	r3, [r3, #3]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d034      	beq.n	80089da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7858      	ldrb	r0, [r3, #1]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008980:	2301      	movs	r3, #1
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	f7ff fd0e 	bl	80083a4 <disk_write>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <sync_window+0x38>
			res = FR_DISK_ERR;
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
 8008992:	e022      	b.n	80089da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	1ad2      	subs	r2, r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d217      	bcs.n	80089da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	789b      	ldrb	r3, [r3, #2]
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	e010      	b.n	80089d4 <sync_window+0x78>
					wsect += fs->fsize;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4413      	add	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7858      	ldrb	r0, [r3, #1]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089c6:	2301      	movs	r3, #1
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	f7ff fceb 	bl	80083a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d8eb      	bhi.n	80089b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d01b      	beq.n	8008a34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff ffad 	bl	800895c <sync_window>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d113      	bne.n	8008a34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7858      	ldrb	r0, [r3, #1]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a16:	2301      	movs	r3, #1
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	f7ff fca3 	bl	8008364 <disk_read>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d004      	beq.n	8008a2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ff87 	bl	800895c <sync_window>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d159      	bne.n	8008b0c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d149      	bne.n	8008af4 <sync_fs+0xb4>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d145      	bne.n	8008af4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	899b      	ldrh	r3, [r3, #12]
 8008a72:	461a      	mov	r2, r3
 8008a74:	2100      	movs	r1, #0
 8008a76:	f7ff fd76 	bl	8008566 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3338      	adds	r3, #56	; 0x38
 8008a7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a82:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff fd05 	bl	8008496 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3338      	adds	r3, #56	; 0x38
 8008a90:	4921      	ldr	r1, [pc, #132]	; (8008b18 <sync_fs+0xd8>)
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fd1a 	bl	80084cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3338      	adds	r3, #56	; 0x38
 8008a9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008aa0:	491e      	ldr	r1, [pc, #120]	; (8008b1c <sync_fs+0xdc>)
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff fd12 	bl	80084cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3338      	adds	r3, #56	; 0x38
 8008aac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7ff fd08 	bl	80084cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3338      	adds	r3, #56	; 0x38
 8008ac0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7ff fcfe 	bl	80084cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	7858      	ldrb	r0, [r3, #1]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f7ff fc5b 	bl	80083a4 <disk_write>
			fs->fsi_flag = 0;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	785b      	ldrb	r3, [r3, #1]
 8008af8:	2200      	movs	r2, #0
 8008afa:	2100      	movs	r1, #0
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fc71 	bl	80083e4 <disk_ioctl>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <sync_fs+0xcc>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	41615252 	.word	0x41615252
 8008b1c:	61417272 	.word	0x61417272

08008b20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	3b02      	subs	r3, #2
 8008b2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	3b02      	subs	r3, #2
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d301      	bcc.n	8008b40 <clust2sect+0x20>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e008      	b.n	8008b52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	895b      	ldrh	r3, [r3, #10]
 8008b44:	461a      	mov	r2, r3
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	fb03 f202 	mul.w	r2, r3, r2
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	4413      	add	r3, r2
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d904      	bls.n	8008b7e <get_fat+0x20>
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b7e:	2301      	movs	r3, #1
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e0bb      	b.n	8008cfc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	f000 8083 	beq.w	8008c9a <get_fat+0x13c>
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	f300 80a7 	bgt.w	8008ce8 <get_fat+0x18a>
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d002      	beq.n	8008ba4 <get_fat+0x46>
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d056      	beq.n	8008c50 <get_fat+0xf2>
 8008ba2:	e0a1      	b.n	8008ce8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	085b      	lsrs	r3, r3, #1
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	899b      	ldrh	r3, [r3, #12]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bc2:	4413      	add	r3, r2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6938      	ldr	r0, [r7, #16]
 8008bc8:	f7ff ff0c 	bl	80089e4 <move_window>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f040 808d 	bne.w	8008cee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	60fa      	str	r2, [r7, #12]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	8992      	ldrh	r2, [r2, #12]
 8008bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8008be2:	fb02 f201 	mul.w	r2, r2, r1
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4413      	add	r3, r2
 8008bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	899b      	ldrh	r3, [r3, #12]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c02:	4413      	add	r3, r2
 8008c04:	4619      	mov	r1, r3
 8008c06:	6938      	ldr	r0, [r7, #16]
 8008c08:	f7ff feec 	bl	80089e4 <move_window>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d16f      	bne.n	8008cf2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	899b      	ldrh	r3, [r3, #12]
 8008c16:	461a      	mov	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c1e:	fb02 f201 	mul.w	r2, r2, r1
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4413      	add	r3, r2
 8008c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <get_fat+0xe8>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	091b      	lsrs	r3, r3, #4
 8008c44:	e002      	b.n	8008c4c <get_fat+0xee>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c4c:	617b      	str	r3, [r7, #20]
			break;
 8008c4e:	e055      	b.n	8008cfc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	899b      	ldrh	r3, [r3, #12]
 8008c58:	085b      	lsrs	r3, r3, #1
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c64:	4413      	add	r3, r2
 8008c66:	4619      	mov	r1, r3
 8008c68:	6938      	ldr	r0, [r7, #16]
 8008c6a:	f7ff febb 	bl	80089e4 <move_window>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d140      	bne.n	8008cf6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	8992      	ldrh	r2, [r2, #12]
 8008c82:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c86:	fb02 f200 	mul.w	r2, r2, r0
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7ff fbc6 	bl	8008420 <ld_word>
 8008c94:	4603      	mov	r3, r0
 8008c96:	617b      	str	r3, [r7, #20]
			break;
 8008c98:	e030      	b.n	8008cfc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	899b      	ldrh	r3, [r3, #12]
 8008ca2:	089b      	lsrs	r3, r3, #2
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cae:	4413      	add	r3, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6938      	ldr	r0, [r7, #16]
 8008cb4:	f7ff fe96 	bl	80089e4 <move_window>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d11d      	bne.n	8008cfa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	8992      	ldrh	r2, [r2, #12]
 8008ccc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cd0:	fb02 f200 	mul.w	r2, r2, r0
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fbb9 	bl	8008450 <ld_dword>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ce4:	617b      	str	r3, [r7, #20]
			break;
 8008ce6:	e009      	b.n	8008cfc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ce8:	2301      	movs	r3, #1
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e006      	b.n	8008cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cee:	bf00      	nop
 8008cf0:	e004      	b.n	8008cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cf2:	bf00      	nop
 8008cf4:	e002      	b.n	8008cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008cfa:	bf00      	nop
		}
	}

	return val;
 8008cfc:	697b      	ldr	r3, [r7, #20]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d06:	b590      	push	{r4, r7, lr}
 8008d08:	b089      	sub	sp, #36	; 0x24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d12:	2302      	movs	r3, #2
 8008d14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	f240 8102 	bls.w	8008f22 <put_fat+0x21c>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	f080 80fc 	bcs.w	8008f22 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	f000 80b6 	beq.w	8008ea0 <put_fat+0x19a>
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	f300 80fd 	bgt.w	8008f34 <put_fat+0x22e>
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d003      	beq.n	8008d46 <put_fat+0x40>
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	f000 8083 	beq.w	8008e4a <put_fat+0x144>
 8008d44:	e0f6      	b.n	8008f34 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	085b      	lsrs	r3, r3, #1
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4413      	add	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	899b      	ldrh	r3, [r3, #12]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d64:	4413      	add	r3, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fe3b 	bl	80089e4 <move_window>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d72:	7ffb      	ldrb	r3, [r7, #31]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f040 80d6 	bne.w	8008f26 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	61ba      	str	r2, [r7, #24]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	8992      	ldrh	r2, [r2, #12]
 8008d8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d8e:	fb02 f200 	mul.w	r2, r2, r0
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	440b      	add	r3, r1
 8008d96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00d      	beq.n	8008dbe <put_fat+0xb8>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	f003 030f 	and.w	r3, r3, #15
 8008dac:	b25a      	sxtb	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	4313      	orrs	r3, r2
 8008db8:	b25b      	sxtb	r3, r3
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	e001      	b.n	8008dc2 <put_fat+0xbc>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	899b      	ldrh	r3, [r3, #12]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ddc:	4413      	add	r3, r2
 8008dde:	4619      	mov	r1, r3
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fdff 	bl	80089e4 <move_window>
 8008de6:	4603      	mov	r3, r0
 8008de8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dea:	7ffb      	ldrb	r3, [r7, #31]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 809c 	bne.w	8008f2a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	899b      	ldrh	r3, [r3, #12]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e04:	fb02 f200 	mul.w	r2, r2, r0
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <put_fat+0x11a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	091b      	lsrs	r3, r3, #4
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	e00e      	b.n	8008e3e <put_fat+0x138>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f023 030f 	bic.w	r3, r3, #15
 8008e2a:	b25a      	sxtb	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	70da      	strb	r2, [r3, #3]
			break;
 8008e48:	e074      	b.n	8008f34 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	899b      	ldrh	r3, [r3, #12]
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	4619      	mov	r1, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e5e:	4413      	add	r3, r2
 8008e60:	4619      	mov	r1, r3
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7ff fdbe 	bl	80089e4 <move_window>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e6c:	7ffb      	ldrb	r3, [r7, #31]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d15d      	bne.n	8008f2e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	8992      	ldrh	r2, [r2, #12]
 8008e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e84:	fb02 f200 	mul.w	r2, r2, r0
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	b292      	uxth	r2, r2
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff faff 	bl	8008496 <st_word>
			fs->wflag = 1;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	70da      	strb	r2, [r3, #3]
			break;
 8008e9e:	e049      	b.n	8008f34 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	899b      	ldrh	r3, [r3, #12]
 8008ea8:	089b      	lsrs	r3, r3, #2
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eb4:	4413      	add	r3, r2
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fd93 	bl	80089e4 <move_window>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ec2:	7ffb      	ldrb	r3, [r7, #31]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d134      	bne.n	8008f32 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	8992      	ldrh	r2, [r2, #12]
 8008edc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ee0:	fb02 f200 	mul.w	r2, r2, r0
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fab1 	bl	8008450 <ld_dword>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ef4:	4323      	orrs	r3, r4
 8008ef6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	8992      	ldrh	r2, [r2, #12]
 8008f06:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f0a:	fb02 f200 	mul.w	r2, r2, r0
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	440b      	add	r3, r1
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff fad9 	bl	80084cc <st_dword>
			fs->wflag = 1;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	70da      	strb	r2, [r3, #3]
			break;
 8008f20:	e008      	b.n	8008f34 <put_fat+0x22e>
		}
	}
 8008f22:	bf00      	nop
 8008f24:	e006      	b.n	8008f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f26:	bf00      	nop
 8008f28:	e004      	b.n	8008f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f2a:	bf00      	nop
 8008f2c:	e002      	b.n	8008f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f32:	bf00      	nop
	return res;
 8008f34:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3724      	adds	r7, #36	; 0x24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd90      	pop	{r4, r7, pc}

08008f3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b088      	sub	sp, #32
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	60f8      	str	r0, [r7, #12]
 8008f46:	60b9      	str	r1, [r7, #8]
 8008f48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d904      	bls.n	8008f64 <remove_chain+0x26>
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d301      	bcc.n	8008f68 <remove_chain+0x2a>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e04b      	b.n	8009000 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00c      	beq.n	8008f88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	69b8      	ldr	r0, [r7, #24]
 8008f76:	f7ff fec6 	bl	8008d06 <put_fat>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f7e:	7ffb      	ldrb	r3, [r7, #31]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <remove_chain+0x4a>
 8008f84:	7ffb      	ldrb	r3, [r7, #31]
 8008f86:	e03b      	b.n	8009000 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fde7 	bl	8008b5e <get_fat>
 8008f90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d031      	beq.n	8008ffc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d101      	bne.n	8008fa2 <remove_chain+0x64>
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e02e      	b.n	8009000 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fa8:	d101      	bne.n	8008fae <remove_chain+0x70>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e028      	b.n	8009000 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008fae:	2200      	movs	r2, #0
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	69b8      	ldr	r0, [r7, #24]
 8008fb4:	f7ff fea7 	bl	8008d06 <put_fat>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008fbc:	7ffb      	ldrb	r3, [r7, #31]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <remove_chain+0x88>
 8008fc2:	7ffb      	ldrb	r3, [r7, #31]
 8008fc4:	e01c      	b.n	8009000 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	3b02      	subs	r3, #2
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d20b      	bcs.n	8008fec <remove_chain+0xae>
			fs->free_clst++;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	f043 0301 	orr.w	r3, r3, #1
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d3c6      	bcc.n	8008f88 <remove_chain+0x4a>
 8008ffa:	e000      	b.n	8008ffe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ffc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10d      	bne.n	800903a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d004      	beq.n	8009034 <create_chain+0x2c>
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	429a      	cmp	r2, r3
 8009032:	d31b      	bcc.n	800906c <create_chain+0x64>
 8009034:	2301      	movs	r3, #1
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	e018      	b.n	800906c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fd8e 	bl	8008b5e <get_fat>
 8009042:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d801      	bhi.n	800904e <create_chain+0x46>
 800904a:	2301      	movs	r3, #1
 800904c:	e070      	b.n	8009130 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009054:	d101      	bne.n	800905a <create_chain+0x52>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	e06a      	b.n	8009130 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d201      	bcs.n	8009068 <create_chain+0x60>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	e063      	b.n	8009130 <create_chain+0x128>
		scl = clst;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	3301      	adds	r3, #1
 8009074:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	429a      	cmp	r2, r3
 800907e:	d307      	bcc.n	8009090 <create_chain+0x88>
				ncl = 2;
 8009080:	2302      	movs	r3, #2
 8009082:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009084:	69fa      	ldr	r2, [r7, #28]
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	d901      	bls.n	8009090 <create_chain+0x88>
 800908c:	2300      	movs	r3, #0
 800908e:	e04f      	b.n	8009130 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009090:	69f9      	ldr	r1, [r7, #28]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff fd63 	bl	8008b5e <get_fat>
 8009098:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00e      	beq.n	80090be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d003      	beq.n	80090ae <create_chain+0xa6>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090ac:	d101      	bne.n	80090b2 <create_chain+0xaa>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	e03e      	b.n	8009130 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d1da      	bne.n	8009070 <create_chain+0x68>
 80090ba:	2300      	movs	r3, #0
 80090bc:	e038      	b.n	8009130 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80090be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c4:	69f9      	ldr	r1, [r7, #28]
 80090c6:	6938      	ldr	r0, [r7, #16]
 80090c8:	f7ff fe1d 	bl	8008d06 <put_fat>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <create_chain+0xe2>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6938      	ldr	r0, [r7, #16]
 80090e2:	f7ff fe10 	bl	8008d06 <put_fat>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d116      	bne.n	800911e <create_chain+0x116>
		fs->last_clst = ncl;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	3b02      	subs	r3, #2
 8009100:	429a      	cmp	r2, r3
 8009102:	d804      	bhi.n	800910e <create_chain+0x106>
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	1e5a      	subs	r2, r3, #1
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	791b      	ldrb	r3, [r3, #4]
 8009112:	f043 0301 	orr.w	r3, r3, #1
 8009116:	b2da      	uxtb	r2, r3
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	711a      	strb	r2, [r3, #4]
 800911c:	e007      	b.n	800912e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d102      	bne.n	800912a <create_chain+0x122>
 8009124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009128:	e000      	b.n	800912c <create_chain+0x124>
 800912a:	2301      	movs	r3, #1
 800912c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800912e:	69fb      	ldr	r3, [r7, #28]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	3304      	adds	r3, #4
 800914e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	899b      	ldrh	r3, [r3, #12]
 8009154:	461a      	mov	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	fbb3 f3f2 	udiv	r3, r3, r2
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	8952      	ldrh	r2, [r2, #10]
 8009160:	fbb3 f3f2 	udiv	r3, r3, r2
 8009164:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	613a      	str	r2, [r7, #16]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <clmt_clust+0x42>
 8009176:	2300      	movs	r3, #0
 8009178:	e010      	b.n	800919c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	429a      	cmp	r2, r3
 8009180:	d307      	bcc.n	8009192 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3304      	adds	r3, #4
 800918e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009190:	e7e9      	b.n	8009166 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009192:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	4413      	add	r3, r2
}
 800919c:	4618      	mov	r0, r3
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091be:	d204      	bcs.n	80091ca <dir_sdi+0x22>
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f003 031f 	and.w	r3, r3, #31
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <dir_sdi+0x26>
		return FR_INT_ERR;
 80091ca:	2302      	movs	r3, #2
 80091cc:	e071      	b.n	80092b2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d106      	bne.n	80091ee <dir_sdi+0x46>
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d902      	bls.n	80091ee <dir_sdi+0x46>
		clst = fs->dirbase;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	8912      	ldrh	r2, [r2, #8]
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d301      	bcc.n	8009204 <dir_sdi+0x5c>
 8009200:	2302      	movs	r3, #2
 8009202:	e056      	b.n	80092b2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	61da      	str	r2, [r3, #28]
 800920c:	e02d      	b.n	800926a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	895b      	ldrh	r3, [r3, #10]
 8009212:	461a      	mov	r2, r3
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	899b      	ldrh	r3, [r3, #12]
 8009218:	fb03 f302 	mul.w	r3, r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800921e:	e019      	b.n	8009254 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6979      	ldr	r1, [r7, #20]
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fc9a 	bl	8008b5e <get_fat>
 800922a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009232:	d101      	bne.n	8009238 <dir_sdi+0x90>
 8009234:	2301      	movs	r3, #1
 8009236:	e03c      	b.n	80092b2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d904      	bls.n	8009248 <dir_sdi+0xa0>
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	429a      	cmp	r2, r3
 8009246:	d301      	bcc.n	800924c <dir_sdi+0xa4>
 8009248:	2302      	movs	r3, #2
 800924a:	e032      	b.n	80092b2 <dir_sdi+0x10a>
			ofs -= csz;
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	429a      	cmp	r2, r3
 800925a:	d2e1      	bcs.n	8009220 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800925c:	6979      	ldr	r1, [r7, #20]
 800925e:	6938      	ldr	r0, [r7, #16]
 8009260:	f7ff fc5e 	bl	8008b20 <clust2sect>
 8009264:	4602      	mov	r2, r0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <dir_sdi+0xd4>
 8009278:	2302      	movs	r3, #2
 800927a:	e01a      	b.n	80092b2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	69da      	ldr	r2, [r3, #28]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	899b      	ldrh	r3, [r3, #12]
 8009284:	4619      	mov	r1, r3
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	fbb3 f3f1 	udiv	r3, r3, r1
 800928c:	441a      	add	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	899b      	ldrh	r3, [r3, #12]
 800929c:	461a      	mov	r2, r3
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80092a4:	fb02 f200 	mul.w	r2, r2, r0
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	18ca      	adds	r2, r1, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b086      	sub	sp, #24
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	3320      	adds	r3, #32
 80092d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <dir_next+0x28>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e0:	d301      	bcc.n	80092e6 <dir_next+0x2c>
 80092e2:	2304      	movs	r3, #4
 80092e4:	e0bb      	b.n	800945e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	899b      	ldrh	r3, [r3, #12]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80092f2:	fb02 f201 	mul.w	r2, r2, r1
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f040 809d 	bne.w	8009438 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10b      	bne.n	8009328 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	8912      	ldrh	r2, [r2, #8]
 8009318:	4293      	cmp	r3, r2
 800931a:	f0c0 808d 	bcc.w	8009438 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	61da      	str	r2, [r3, #28]
 8009324:	2304      	movs	r3, #4
 8009326:	e09a      	b.n	800945e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	899b      	ldrh	r3, [r3, #12]
 800932c:	461a      	mov	r2, r3
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	fbb3 f3f2 	udiv	r3, r3, r2
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	8952      	ldrh	r2, [r2, #10]
 8009338:	3a01      	subs	r2, #1
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d17b      	bne.n	8009438 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	4619      	mov	r1, r3
 8009348:	4610      	mov	r0, r2
 800934a:	f7ff fc08 	bl	8008b5e <get_fat>
 800934e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d801      	bhi.n	800935a <dir_next+0xa0>
 8009356:	2302      	movs	r3, #2
 8009358:	e081      	b.n	800945e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009360:	d101      	bne.n	8009366 <dir_next+0xac>
 8009362:	2301      	movs	r3, #1
 8009364:	e07b      	b.n	800945e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d359      	bcc.n	8009424 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d104      	bne.n	8009380 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	61da      	str	r2, [r3, #28]
 800937c:	2304      	movs	r3, #4
 800937e:	e06e      	b.n	800945e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f7ff fe3d 	bl	8009008 <create_chain>
 800938e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <dir_next+0xe0>
 8009396:	2307      	movs	r3, #7
 8009398:	e061      	b.n	800945e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <dir_next+0xea>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e05c      	b.n	800945e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093aa:	d101      	bne.n	80093b0 <dir_next+0xf6>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e056      	b.n	800945e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7ff fad3 	bl	800895c <sync_window>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <dir_next+0x106>
 80093bc:	2301      	movs	r3, #1
 80093be:	e04e      	b.n	800945e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	899b      	ldrh	r3, [r3, #12]
 80093ca:	461a      	mov	r2, r3
 80093cc:	2100      	movs	r1, #0
 80093ce:	f7ff f8ca 	bl	8008566 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	6979      	ldr	r1, [r7, #20]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff fba1 	bl	8008b20 <clust2sect>
 80093de:	4602      	mov	r2, r0
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	635a      	str	r2, [r3, #52]	; 0x34
 80093e4:	e012      	b.n	800940c <dir_next+0x152>
						fs->wflag = 1;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fab5 	bl	800895c <sync_window>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <dir_next+0x142>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e030      	b.n	800945e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3301      	adds	r3, #1
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	635a      	str	r2, [r3, #52]	; 0x34
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	895b      	ldrh	r3, [r3, #10]
 8009410:	461a      	mov	r2, r3
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4293      	cmp	r3, r2
 8009416:	d3e6      	bcc.n	80093e6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800942a:	6979      	ldr	r1, [r7, #20]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff fb77 	bl	8008b20 <clust2sect>
 8009432:	4602      	mov	r2, r0
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	899b      	ldrh	r3, [r3, #12]
 8009448:	461a      	mov	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009450:	fb02 f200 	mul.w	r2, r2, r0
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	18ca      	adds	r2, r1, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009476:	2100      	movs	r1, #0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff fe95 	bl	80091a8 <dir_sdi>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d12b      	bne.n	80094e0 <dir_alloc+0x7a>
		n = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	4619      	mov	r1, r3
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff faa6 	bl	80089e4 <move_window>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d11d      	bne.n	80094de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2be5      	cmp	r3, #229	; 0xe5
 80094aa:	d004      	beq.n	80094b6 <dir_alloc+0x50>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d102      	bne.n	80094ca <dir_alloc+0x64>
 80094c4:	e00c      	b.n	80094e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80094c6:	2300      	movs	r3, #0
 80094c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80094ca:	2101      	movs	r1, #1
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fef4 	bl	80092ba <dir_next>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0d7      	beq.n	800948c <dir_alloc+0x26>
 80094dc:	e000      	b.n	80094e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80094de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d101      	bne.n	80094ea <dir_alloc+0x84>
 80094e6:	2307      	movs	r3, #7
 80094e8:	75fb      	strb	r3, [r7, #23]
	return res;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	331a      	adds	r3, #26
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe ff8c 	bl	8008420 <ld_word>
 8009508:	4603      	mov	r3, r0
 800950a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d109      	bne.n	8009528 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	3314      	adds	r3, #20
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe ff81 	bl	8008420 <ld_word>
 800951e:	4603      	mov	r3, r0
 8009520:	041b      	lsls	r3, r3, #16
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	4313      	orrs	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009528:	68fb      	ldr	r3, [r7, #12]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	331a      	adds	r3, #26
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	b292      	uxth	r2, r2
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f7fe ffa4 	bl	8008496 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b03      	cmp	r3, #3
 8009554:	d109      	bne.n	800956a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	f103 0214 	add.w	r2, r3, #20
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	b29b      	uxth	r3, r3
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fe ff96 	bl	8008496 <st_word>
	}
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009580:	2100      	movs	r1, #0
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff fe10 	bl	80091a8 <dir_sdi>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <dir_find+0x24>
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	e03e      	b.n	8009614 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	4619      	mov	r1, r3
 800959c:	6938      	ldr	r0, [r7, #16]
 800959e:	f7ff fa21 	bl	80089e4 <move_window>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d12f      	bne.n	800960c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <dir_find+0x4e>
 80095ba:	2304      	movs	r3, #4
 80095bc:	75fb      	strb	r3, [r7, #23]
 80095be:	e028      	b.n	8009612 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	330b      	adds	r3, #11
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	330b      	adds	r3, #11
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 0308 	and.w	r3, r3, #8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <dir_find+0x86>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a18      	ldr	r0, [r3, #32]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3324      	adds	r3, #36	; 0x24
 80095ea:	220b      	movs	r2, #11
 80095ec:	4619      	mov	r1, r3
 80095ee:	f7fe ffd5 	bl	800859c <mem_cmp>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80095f8:	2100      	movs	r1, #0
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fe5d 	bl	80092ba <dir_next>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0c5      	beq.n	8009596 <dir_find+0x24>
 800960a:	e002      	b.n	8009612 <dir_find+0xa0>
		if (res != FR_OK) break;
 800960c:	bf00      	nop
 800960e:	e000      	b.n	8009612 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009610:	bf00      	nop

	return res;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800962a:	2101      	movs	r1, #1
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff ff1a 	bl	8009466 <dir_alloc>
 8009632:	4603      	mov	r3, r0
 8009634:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11c      	bne.n	8009676 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	4619      	mov	r1, r3
 8009642:	68b8      	ldr	r0, [r7, #8]
 8009644:	f7ff f9ce 	bl	80089e4 <move_window>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d111      	bne.n	8009676 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	2220      	movs	r2, #32
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe ff83 	bl	8008566 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a18      	ldr	r0, [r3, #32]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3324      	adds	r3, #36	; 0x24
 8009668:	220b      	movs	r2, #11
 800966a:	4619      	mov	r1, r3
 800966c:	f7fe ff5a 	bl	8008524 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2201      	movs	r2, #1
 8009674:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3324      	adds	r3, #36	; 0x24
 8009694:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009696:	220b      	movs	r2, #11
 8009698:	2120      	movs	r1, #32
 800969a:	68b8      	ldr	r0, [r7, #8]
 800969c:	f7fe ff63 	bl	8008566 <mem_set>
	si = i = 0; ni = 8;
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	2308      	movs	r3, #8
 80096aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	61fa      	str	r2, [r7, #28]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80096ba:	7efb      	ldrb	r3, [r7, #27]
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d94e      	bls.n	800975e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80096c0:	7efb      	ldrb	r3, [r7, #27]
 80096c2:	2b2f      	cmp	r3, #47	; 0x2f
 80096c4:	d006      	beq.n	80096d4 <create_name+0x54>
 80096c6:	7efb      	ldrb	r3, [r7, #27]
 80096c8:	2b5c      	cmp	r3, #92	; 0x5c
 80096ca:	d110      	bne.n	80096ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80096cc:	e002      	b.n	80096d4 <create_name+0x54>
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	3301      	adds	r3, #1
 80096d2:	61fb      	str	r3, [r7, #28]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b2f      	cmp	r3, #47	; 0x2f
 80096de:	d0f6      	beq.n	80096ce <create_name+0x4e>
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b5c      	cmp	r3, #92	; 0x5c
 80096ea:	d0f0      	beq.n	80096ce <create_name+0x4e>
			break;
 80096ec:	e038      	b.n	8009760 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80096ee:	7efb      	ldrb	r3, [r7, #27]
 80096f0:	2b2e      	cmp	r3, #46	; 0x2e
 80096f2:	d003      	beq.n	80096fc <create_name+0x7c>
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d30c      	bcc.n	8009716 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b0b      	cmp	r3, #11
 8009700:	d002      	beq.n	8009708 <create_name+0x88>
 8009702:	7efb      	ldrb	r3, [r7, #27]
 8009704:	2b2e      	cmp	r3, #46	; 0x2e
 8009706:	d001      	beq.n	800970c <create_name+0x8c>
 8009708:	2306      	movs	r3, #6
 800970a:	e044      	b.n	8009796 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800970c:	2308      	movs	r3, #8
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	230b      	movs	r3, #11
 8009712:	617b      	str	r3, [r7, #20]
			continue;
 8009714:	e022      	b.n	800975c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009716:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800971a:	2b00      	cmp	r3, #0
 800971c:	da04      	bge.n	8009728 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800971e:	7efb      	ldrb	r3, [r7, #27]
 8009720:	3b80      	subs	r3, #128	; 0x80
 8009722:	4a1f      	ldr	r2, [pc, #124]	; (80097a0 <create_name+0x120>)
 8009724:	5cd3      	ldrb	r3, [r2, r3]
 8009726:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009728:	7efb      	ldrb	r3, [r7, #27]
 800972a:	4619      	mov	r1, r3
 800972c:	481d      	ldr	r0, [pc, #116]	; (80097a4 <create_name+0x124>)
 800972e:	f7fe ff5c 	bl	80085ea <chk_chr>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <create_name+0xbc>
 8009738:	2306      	movs	r3, #6
 800973a:	e02c      	b.n	8009796 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800973c:	7efb      	ldrb	r3, [r7, #27]
 800973e:	2b60      	cmp	r3, #96	; 0x60
 8009740:	d905      	bls.n	800974e <create_name+0xce>
 8009742:	7efb      	ldrb	r3, [r7, #27]
 8009744:	2b7a      	cmp	r3, #122	; 0x7a
 8009746:	d802      	bhi.n	800974e <create_name+0xce>
 8009748:	7efb      	ldrb	r3, [r7, #27]
 800974a:	3b20      	subs	r3, #32
 800974c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	613a      	str	r2, [r7, #16]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	4413      	add	r3, r2
 8009758:	7efa      	ldrb	r2, [r7, #27]
 800975a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800975c:	e7a6      	b.n	80096ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800975e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	441a      	add	r2, r3
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <create_name+0xf4>
 8009770:	2306      	movs	r3, #6
 8009772:	e010      	b.n	8009796 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2be5      	cmp	r3, #229	; 0xe5
 800977a:	d102      	bne.n	8009782 <create_name+0x102>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2205      	movs	r2, #5
 8009780:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009782:	7efb      	ldrb	r3, [r7, #27]
 8009784:	2b20      	cmp	r3, #32
 8009786:	d801      	bhi.n	800978c <create_name+0x10c>
 8009788:	2204      	movs	r2, #4
 800978a:	e000      	b.n	800978e <create_name+0x10e>
 800978c:	2200      	movs	r2, #0
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	330b      	adds	r3, #11
 8009792:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009794:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009796:	4618      	mov	r0, r3
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	080216d4 	.word	0x080216d4
 80097a4:	0801df10 	.word	0x0801df10

080097a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80097bc:	e002      	b.n	80097c4 <follow_path+0x1c>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	3301      	adds	r3, #1
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b2f      	cmp	r3, #47	; 0x2f
 80097ca:	d0f8      	beq.n	80097be <follow_path+0x16>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b5c      	cmp	r3, #92	; 0x5c
 80097d2:	d0f4      	beq.n	80097be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2200      	movs	r2, #0
 80097d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b1f      	cmp	r3, #31
 80097e0:	d80a      	bhi.n	80097f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2280      	movs	r2, #128	; 0x80
 80097e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff fcdb 	bl	80091a8 <dir_sdi>
 80097f2:	4603      	mov	r3, r0
 80097f4:	75fb      	strb	r3, [r7, #23]
 80097f6:	e048      	b.n	800988a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097f8:	463b      	mov	r3, r7
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff ff3f 	bl	8009680 <create_name>
 8009802:	4603      	mov	r3, r0
 8009804:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d139      	bne.n	8009880 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff feb0 	bl	8009572 <dir_find>
 8009812:	4603      	mov	r3, r0
 8009814:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800981c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00a      	beq.n	800983a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	2b04      	cmp	r3, #4
 8009828:	d12c      	bne.n	8009884 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d127      	bne.n	8009884 <follow_path+0xdc>
 8009834:	2305      	movs	r3, #5
 8009836:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009838:	e024      	b.n	8009884 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	f003 0304 	and.w	r3, r3, #4
 8009840:	2b00      	cmp	r3, #0
 8009842:	d121      	bne.n	8009888 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	799b      	ldrb	r3, [r3, #6]
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009850:	2305      	movs	r3, #5
 8009852:	75fb      	strb	r3, [r7, #23]
 8009854:	e019      	b.n	800988a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	8992      	ldrh	r2, [r2, #12]
 8009864:	fbb3 f0f2 	udiv	r0, r3, r2
 8009868:	fb02 f200 	mul.w	r2, r2, r0
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	440b      	add	r3, r1
 8009870:	4619      	mov	r1, r3
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff fe3e 	bl	80094f4 <ld_clust>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800987e:	e7bb      	b.n	80097f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009880:	bf00      	nop
 8009882:	e002      	b.n	800988a <follow_path+0xe2>
				break;
 8009884:	bf00      	nop
 8009886:	e000      	b.n	800988a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009888:	bf00      	nop
			}
		}
	}

	return res;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800989c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d031      	beq.n	800990e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e002      	b.n	80098b8 <get_ldnumber+0x24>
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	3301      	adds	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d903      	bls.n	80098c8 <get_ldnumber+0x34>
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b3a      	cmp	r3, #58	; 0x3a
 80098c6:	d1f4      	bne.n	80098b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b3a      	cmp	r3, #58	; 0x3a
 80098ce:	d11c      	bne.n	800990a <get_ldnumber+0x76>
			tp = *path;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	60fa      	str	r2, [r7, #12]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	3b30      	subs	r3, #48	; 0x30
 80098e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80e      	bhi.n	8009906 <get_ldnumber+0x72>
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d10a      	bne.n	8009906 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d107      	bne.n	8009906 <get_ldnumber+0x72>
					vol = (int)i;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	3301      	adds	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	e002      	b.n	8009910 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800990a:	2300      	movs	r3, #0
 800990c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800990e:	693b      	ldr	r3, [r7, #16]
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	70da      	strb	r2, [r3, #3]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009932:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff f854 	bl	80089e4 <move_window>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <check_fs+0x2a>
 8009942:	2304      	movs	r3, #4
 8009944:	e038      	b.n	80099b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3338      	adds	r3, #56	; 0x38
 800994a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fd66 	bl	8008420 <ld_word>
 8009954:	4603      	mov	r3, r0
 8009956:	461a      	mov	r2, r3
 8009958:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800995c:	429a      	cmp	r2, r3
 800995e:	d001      	beq.n	8009964 <check_fs+0x48>
 8009960:	2303      	movs	r3, #3
 8009962:	e029      	b.n	80099b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800996a:	2be9      	cmp	r3, #233	; 0xe9
 800996c:	d009      	beq.n	8009982 <check_fs+0x66>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009974:	2beb      	cmp	r3, #235	; 0xeb
 8009976:	d11e      	bne.n	80099b6 <check_fs+0x9a>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800997e:	2b90      	cmp	r3, #144	; 0x90
 8009980:	d119      	bne.n	80099b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3338      	adds	r3, #56	; 0x38
 8009986:	3336      	adds	r3, #54	; 0x36
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fd61 	bl	8008450 <ld_dword>
 800998e:	4603      	mov	r3, r0
 8009990:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009994:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <check_fs+0xa4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d101      	bne.n	800999e <check_fs+0x82>
 800999a:	2300      	movs	r3, #0
 800999c:	e00c      	b.n	80099b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3338      	adds	r3, #56	; 0x38
 80099a2:	3352      	adds	r3, #82	; 0x52
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fd53 	bl	8008450 <ld_dword>
 80099aa:	4603      	mov	r3, r0
 80099ac:	4a05      	ldr	r2, [pc, #20]	; (80099c4 <check_fs+0xa8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d101      	bne.n	80099b6 <check_fs+0x9a>
 80099b2:	2300      	movs	r3, #0
 80099b4:	e000      	b.n	80099b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80099b6:	2302      	movs	r3, #2
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	00544146 	.word	0x00544146
 80099c4:	33544146 	.word	0x33544146

080099c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b096      	sub	sp, #88	; 0x58
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	4613      	mov	r3, r2
 80099d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff ff59 	bl	8009894 <get_ldnumber>
 80099e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80099e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da01      	bge.n	80099ee <find_volume+0x26>
 80099ea:	230b      	movs	r3, #11
 80099ec:	e26c      	b.n	8009ec8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80099ee:	4aa4      	ldr	r2, [pc, #656]	; (8009c80 <find_volume+0x2b8>)
 80099f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <find_volume+0x3a>
 80099fe:	230c      	movs	r3, #12
 8009a00:	e262      	b.n	8009ec8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8009a02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a04:	f7fe fe0c 	bl	8008620 <lock_fs>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <find_volume+0x4a>
 8009a0e:	230f      	movs	r3, #15
 8009a10:	e25a      	b.n	8009ec8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	f023 0301 	bic.w	r3, r3, #1
 8009a1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01a      	beq.n	8009a5e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fc59 	bl	80082e4 <disk_status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10c      	bne.n	8009a5e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <find_volume+0x92>
 8009a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a4e:	f003 0304 	and.w	r3, r3, #4
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009a56:	230a      	movs	r3, #10
 8009a58:	e236      	b.n	8009ec8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e234      	b.n	8009ec8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fc51 	bl	8008318 <disk_initialize>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e21d      	b.n	8009ec8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <find_volume+0xda>
 8009a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009a9e:	230a      	movs	r3, #10
 8009aa0:	e212      	b.n	8009ec8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa4:	7858      	ldrb	r0, [r3, #1]
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	461a      	mov	r2, r3
 8009aac:	2102      	movs	r1, #2
 8009aae:	f7fe fc99 	bl	80083e4 <disk_ioctl>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <find_volume+0xf4>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e205      	b.n	8009ec8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	899b      	ldrh	r3, [r3, #12]
 8009ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac4:	d80d      	bhi.n	8009ae2 <find_volume+0x11a>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	899b      	ldrh	r3, [r3, #12]
 8009aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ace:	d308      	bcc.n	8009ae2 <find_volume+0x11a>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	899b      	ldrh	r3, [r3, #12]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	899b      	ldrh	r3, [r3, #12]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	4013      	ands	r3, r2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <find_volume+0x11e>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e1f0      	b.n	8009ec8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009aee:	f7ff ff15 	bl	800991c <check_fs>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009af8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d14b      	bne.n	8009b98 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b00:	2300      	movs	r3, #0
 8009b02:	643b      	str	r3, [r7, #64]	; 0x40
 8009b04:	e01f      	b.n	8009b46 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009b14:	4413      	add	r3, r2
 8009b16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d006      	beq.n	8009b30 <find_volume+0x168>
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	3308      	adds	r3, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fc92 	bl	8008450 <ld_dword>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	e000      	b.n	8009b32 <find_volume+0x16a>
 8009b30:	2200      	movs	r2, #0
 8009b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009b3a:	440b      	add	r3, r1
 8009b3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b42:	3301      	adds	r3, #1
 8009b44:	643b      	str	r3, [r7, #64]	; 0x40
 8009b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d9dc      	bls.n	8009b06 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <find_volume+0x194>
 8009b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b64:	4413      	add	r3, r2
 8009b66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009b6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <find_volume+0x1b6>
 8009b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b76:	f7ff fed1 	bl	800991c <check_fs>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	e000      	b.n	8009b80 <find_volume+0x1b8>
 8009b7e:	2303      	movs	r3, #3
 8009b80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d905      	bls.n	8009b98 <find_volume+0x1d0>
 8009b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b8e:	3301      	adds	r3, #1
 8009b90:	643b      	str	r3, [r7, #64]	; 0x40
 8009b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d9e1      	bls.n	8009b5c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d101      	bne.n	8009ba4 <find_volume+0x1dc>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e191      	b.n	8009ec8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d901      	bls.n	8009bb0 <find_volume+0x1e8>
 8009bac:	230d      	movs	r3, #13
 8009bae:	e18b      	b.n	8009ec8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	3338      	adds	r3, #56	; 0x38
 8009bb4:	330b      	adds	r3, #11
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fc32 	bl	8008420 <ld_word>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc2:	899b      	ldrh	r3, [r3, #12]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d001      	beq.n	8009bcc <find_volume+0x204>
 8009bc8:	230d      	movs	r3, #13
 8009bca:	e17d      	b.n	8009ec8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bce:	3338      	adds	r3, #56	; 0x38
 8009bd0:	3316      	adds	r3, #22
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fc24 	bl	8008420 <ld_word>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <find_volume+0x228>
 8009be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be4:	3338      	adds	r3, #56	; 0x38
 8009be6:	3324      	adds	r3, #36	; 0x24
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fc31 	bl	8008450 <ld_dword>
 8009bee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bf4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	789b      	ldrb	r3, [r3, #2]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d005      	beq.n	8009c14 <find_volume+0x24c>
 8009c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0a:	789b      	ldrb	r3, [r3, #2]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d001      	beq.n	8009c14 <find_volume+0x24c>
 8009c10:	230d      	movs	r3, #13
 8009c12:	e159      	b.n	8009ec8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	789b      	ldrb	r3, [r3, #2]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1c:	fb02 f303 	mul.w	r3, r2, r3
 8009c20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	895b      	ldrh	r3, [r3, #10]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d008      	beq.n	8009c48 <find_volume+0x280>
 8009c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c38:	895b      	ldrh	r3, [r3, #10]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3e:	895b      	ldrh	r3, [r3, #10]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <find_volume+0x284>
 8009c48:	230d      	movs	r3, #13
 8009c4a:	e13d      	b.n	8009ec8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	3338      	adds	r3, #56	; 0x38
 8009c50:	3311      	adds	r3, #17
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fbe4 	bl	8008420 <ld_word>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	891b      	ldrh	r3, [r3, #8]
 8009c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c66:	8992      	ldrh	r2, [r2, #12]
 8009c68:	0952      	lsrs	r2, r2, #5
 8009c6a:	b292      	uxth	r2, r2
 8009c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c70:	fb02 f201 	mul.w	r2, r2, r1
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <find_volume+0x2bc>
 8009c7c:	230d      	movs	r3, #13
 8009c7e:	e123      	b.n	8009ec8 <find_volume+0x500>
 8009c80:	20001540 	.word	0x20001540

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	3338      	adds	r3, #56	; 0x38
 8009c88:	3313      	adds	r3, #19
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fbc8 	bl	8008420 <ld_word>
 8009c90:	4603      	mov	r3, r0
 8009c92:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <find_volume+0x2e0>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	3338      	adds	r3, #56	; 0x38
 8009c9e:	3320      	adds	r3, #32
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fbd5 	bl	8008450 <ld_dword>
 8009ca6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	3338      	adds	r3, #56	; 0x38
 8009cac:	330e      	adds	r3, #14
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fbb6 	bl	8008420 <ld_word>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <find_volume+0x2fa>
 8009cbe:	230d      	movs	r3, #13
 8009cc0:	e102      	b.n	8009ec8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009cc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc6:	4413      	add	r3, r2
 8009cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cca:	8911      	ldrh	r1, [r2, #8]
 8009ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cce:	8992      	ldrh	r2, [r2, #12]
 8009cd0:	0952      	lsrs	r2, r2, #5
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	fbb1 f2f2 	udiv	r2, r1, r2
 8009cd8:	b292      	uxth	r2, r2
 8009cda:	4413      	add	r3, r2
 8009cdc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d201      	bcs.n	8009cea <find_volume+0x322>
 8009ce6:	230d      	movs	r3, #13
 8009ce8:	e0ee      	b.n	8009ec8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cf2:	8952      	ldrh	r2, [r2, #10]
 8009cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <find_volume+0x33c>
 8009d00:	230d      	movs	r3, #13
 8009d02:	e0e1      	b.n	8009ec8 <find_volume+0x500>
		fmt = FS_FAT32;
 8009d04:	2303      	movs	r3, #3
 8009d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d802      	bhi.n	8009d1a <find_volume+0x352>
 8009d14:	2302      	movs	r3, #2
 8009d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d802      	bhi.n	8009d2a <find_volume+0x362>
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	1c9a      	adds	r2, r3, #2
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d36:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009d38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d3c:	441a      	add	r2, r3
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d40:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009d42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	441a      	add	r2, r3
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d11e      	bne.n	8009d92 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d56:	3338      	adds	r3, #56	; 0x38
 8009d58:	332a      	adds	r3, #42	; 0x2a
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fb60 	bl	8008420 <ld_word>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <find_volume+0x3a2>
 8009d66:	230d      	movs	r3, #13
 8009d68:	e0ae      	b.n	8009ec8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	891b      	ldrh	r3, [r3, #8]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <find_volume+0x3ae>
 8009d72:	230d      	movs	r3, #13
 8009d74:	e0a8      	b.n	8009ec8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	3338      	adds	r3, #56	; 0x38
 8009d7a:	332c      	adds	r3, #44	; 0x2c
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fb67 	bl	8008450 <ld_dword>
 8009d82:	4602      	mov	r2, r0
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d90:	e01f      	b.n	8009dd2 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d94:	891b      	ldrh	r3, [r3, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <find_volume+0x3d6>
 8009d9a:	230d      	movs	r3, #13
 8009d9c:	e094      	b.n	8009ec8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da4:	441a      	add	r2, r3
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009daa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d103      	bne.n	8009dba <find_volume+0x3f2>
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	e00a      	b.n	8009dd0 <find_volume+0x408>
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	69da      	ldr	r2, [r3, #28]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4413      	add	r3, r2
 8009dc4:	085a      	lsrs	r2, r3, #1
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009dd0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd4:	6a1a      	ldr	r2, [r3, #32]
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	899b      	ldrh	r3, [r3, #12]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dde:	440b      	add	r3, r1
 8009de0:	3b01      	subs	r3, #1
 8009de2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009de4:	8989      	ldrh	r1, [r1, #12]
 8009de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d201      	bcs.n	8009df2 <find_volume+0x42a>
 8009dee:	230d      	movs	r3, #13
 8009df0:	e06a      	b.n	8009ec8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009df8:	619a      	str	r2, [r3, #24]
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	2280      	movs	r2, #128	; 0x80
 8009e06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d149      	bne.n	8009ea4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	3338      	adds	r3, #56	; 0x38
 8009e14:	3330      	adds	r3, #48	; 0x30
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fb02 	bl	8008420 <ld_word>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d140      	bne.n	8009ea4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e24:	3301      	adds	r3, #1
 8009e26:	4619      	mov	r1, r3
 8009e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e2a:	f7fe fddb 	bl	80089e4 <move_window>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d137      	bne.n	8009ea4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	2200      	movs	r2, #0
 8009e38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	3338      	adds	r3, #56	; 0x38
 8009e3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe faec 	bl	8008420 <ld_word>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d127      	bne.n	8009ea4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e56:	3338      	adds	r3, #56	; 0x38
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe faf9 	bl	8008450 <ld_dword>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4a1b      	ldr	r2, [pc, #108]	; (8009ed0 <find_volume+0x508>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d11e      	bne.n	8009ea4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e68:	3338      	adds	r3, #56	; 0x38
 8009e6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe faee 	bl	8008450 <ld_dword>
 8009e74:	4603      	mov	r3, r0
 8009e76:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <find_volume+0x50c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d113      	bne.n	8009ea4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	3338      	adds	r3, #56	; 0x38
 8009e80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fae3 	bl	8008450 <ld_dword>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	3338      	adds	r3, #56	; 0x38
 8009e94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fad9 	bl	8008450 <ld_dword>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009eaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009eac:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <find_volume+0x510>)
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <find_volume+0x510>)
 8009eb6:	801a      	strh	r2, [r3, #0]
 8009eb8:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <find_volume+0x510>)
 8009eba:	881a      	ldrh	r2, [r3, #0]
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ec2:	f7fe fd27 	bl	8008914 <clear_lock>
#endif
	return FR_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3758      	adds	r7, #88	; 0x58
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	41615252 	.word	0x41615252
 8009ed4:	61417272 	.word	0x61417272
 8009ed8:	20001544 	.word	0x20001544

08009edc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009ee6:	2309      	movs	r3, #9
 8009ee8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d02e      	beq.n	8009f4e <validate+0x72>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d02a      	beq.n	8009f4e <validate+0x72>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d025      	beq.n	8009f4e <validate+0x72>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	889a      	ldrh	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	88db      	ldrh	r3, [r3, #6]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d11e      	bne.n	8009f4e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fb83 	bl	8008620 <lock_fs>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d014      	beq.n	8009f4a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	785b      	ldrb	r3, [r3, #1]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe f9dc 	bl	80082e4 <disk_status>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <validate+0x60>
				res = FR_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	73fb      	strb	r3, [r7, #15]
 8009f3a:	e008      	b.n	8009f4e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fb82 	bl	800864c <unlock_fs>
 8009f48:	e001      	b.n	8009f4e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009f4a:	230f      	movs	r3, #15
 8009f4c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <validate+0x7e>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	e000      	b.n	8009f5c <validate+0x80>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	6013      	str	r3, [r2, #0]
	return res;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	4613      	mov	r3, r2
 8009f78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009f7e:	f107 0310 	add.w	r3, r7, #16
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff fc86 	bl	8009894 <get_ldnumber>
 8009f88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	da01      	bge.n	8009f94 <f_mount+0x28>
 8009f90:	230b      	movs	r3, #11
 8009f92:	e048      	b.n	800a026 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009f94:	4a26      	ldr	r2, [pc, #152]	; (800a030 <f_mount+0xc4>)
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00f      	beq.n	8009fc4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009fa4:	69b8      	ldr	r0, [r7, #24]
 8009fa6:	f7fe fcb5 	bl	8008914 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fcd0 	bl	800a954 <ff_del_syncobj>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <f_mount+0x52>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e033      	b.n	800a026 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00f      	beq.n	8009fea <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3310      	adds	r3, #16
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f000 fc9f 	bl	800a91e <ff_cre_syncobj>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <f_mount+0x7e>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e01d      	b.n	800a026 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4910      	ldr	r1, [pc, #64]	; (800a030 <f_mount+0xc4>)
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <f_mount+0x94>
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d001      	beq.n	800a004 <f_mount+0x98>
 800a000:	2300      	movs	r3, #0
 800a002:	e010      	b.n	800a026 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a004:	f107 010c 	add.w	r1, r7, #12
 800a008:	f107 0308 	add.w	r3, r7, #8
 800a00c:	2200      	movs	r2, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fcda 	bl	80099c8 <find_volume>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	7dfa      	ldrb	r2, [r7, #23]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fb14 	bl	800864c <unlock_fs>
 800a024:	7dfb      	ldrb	r3, [r7, #23]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20001540 	.word	0x20001540

0800a034 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b098      	sub	sp, #96	; 0x60
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	4613      	mov	r3, r2
 800a040:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <f_open+0x18>
 800a048:	2309      	movs	r3, #9
 800a04a:	e1c2      	b.n	800a3d2 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a052:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a054:	79fa      	ldrb	r2, [r7, #7]
 800a056:	f107 0110 	add.w	r1, r7, #16
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff fcb2 	bl	80099c8 <find_volume>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a06a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f040 819f 	bne.w	800a3b2 <f_open+0x37e>
		dj.obj.fs = fs;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	f107 0314 	add.w	r3, r7, #20
 800a07e:	4611      	mov	r1, r2
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff fb91 	bl	80097a8 <follow_path>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a08c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a090:	2b00      	cmp	r3, #0
 800a092:	d11a      	bne.n	800a0ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a094:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a098:	b25b      	sxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	da03      	bge.n	800a0a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a09e:	2306      	movs	r3, #6
 800a0a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a0a4:	e011      	b.n	800a0ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bf14      	ite	ne
 800a0b0:	2301      	movne	r3, #1
 800a0b2:	2300      	moveq	r3, #0
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f107 0314 	add.w	r3, r7, #20
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fae0 	bl	8008684 <chk_lock>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	f003 031c 	and.w	r3, r3, #28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d07f      	beq.n	800a1d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a0d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d017      	beq.n	800a10c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d10e      	bne.n	800a102 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a0e4:	f7fe fb2a 	bl	800873c <enq_lock>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d006      	beq.n	800a0fc <f_open+0xc8>
 800a0ee:	f107 0314 	add.w	r3, r7, #20
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fa92 	bl	800961c <dir_register>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	e000      	b.n	800a0fe <f_open+0xca>
 800a0fc:	2312      	movs	r3, #18
 800a0fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	f043 0308 	orr.w	r3, r3, #8
 800a108:	71fb      	strb	r3, [r7, #7]
 800a10a:	e010      	b.n	800a12e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a10c:	7ebb      	ldrb	r3, [r7, #26]
 800a10e:	f003 0311 	and.w	r3, r3, #17
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <f_open+0xea>
					res = FR_DENIED;
 800a116:	2307      	movs	r3, #7
 800a118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a11c:	e007      	b.n	800a12e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <f_open+0xfa>
 800a128:	2308      	movs	r3, #8
 800a12a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a12e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a132:	2b00      	cmp	r3, #0
 800a134:	d168      	bne.n	800a208 <f_open+0x1d4>
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d063      	beq.n	800a208 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a140:	f7fd f916 	bl	8007370 <get_fattime>
 800a144:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a148:	330e      	adds	r3, #14
 800a14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe f9bd 	bl	80084cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a154:	3316      	adds	r3, #22
 800a156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe f9b7 	bl	80084cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a160:	330b      	adds	r3, #11
 800a162:	2220      	movs	r2, #32
 800a164:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff f9c1 	bl	80094f4 <ld_clust>
 800a172:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a178:	2200      	movs	r2, #0
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff f9d9 	bl	8009532 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	331c      	adds	r3, #28
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe f9a0 	bl	80084cc <st_dword>
					fs->wflag = 1;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	2201      	movs	r2, #1
 800a190:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d037      	beq.n	800a208 <f_open+0x1d4>
						dw = fs->winsect;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a19e:	f107 0314 	add.w	r3, r7, #20
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fec9 	bl	8008f3e <remove_chain>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a1b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d126      	bne.n	800a208 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fc10 	bl	80089e4 <move_window>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1ce:	3a01      	subs	r2, #1
 800a1d0:	615a      	str	r2, [r3, #20]
 800a1d2:	e019      	b.n	800a208 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d115      	bne.n	800a208 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a1dc:	7ebb      	ldrb	r3, [r7, #26]
 800a1de:	f003 0310 	and.w	r3, r3, #16
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <f_open+0x1ba>
					res = FR_NO_FILE;
 800a1e6:	2304      	movs	r3, #4
 800a1e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a1ec:	e00c      	b.n	800a208 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <f_open+0x1d4>
 800a1f8:	7ebb      	ldrb	r3, [r7, #26]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <f_open+0x1d4>
						res = FR_DENIED;
 800a202:	2307      	movs	r3, #7
 800a204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d128      	bne.n	800a262 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	f003 0308 	and.w	r3, r3, #8
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a21a:	79fb      	ldrb	r3, [r7, #7]
 800a21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a220:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	f023 0301 	bic.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	bf14      	ite	ne
 800a23a:	2301      	movne	r3, #1
 800a23c:	2300      	moveq	r3, #0
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	461a      	mov	r2, r3
 800a242:	f107 0314 	add.w	r3, r7, #20
 800a246:	4611      	mov	r1, r2
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fa99 	bl	8008780 <inc_lock>
 800a24e:	4602      	mov	r2, r0
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d102      	bne.n	800a262 <f_open+0x22e>
 800a25c:	2302      	movs	r3, #2
 800a25e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a266:	2b00      	cmp	r3, #0
 800a268:	f040 80a3 	bne.w	800a3b2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff f93e 	bl	80094f4 <ld_clust>
 800a278:	4602      	mov	r2, r0
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a280:	331c      	adds	r3, #28
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe f8e4 	bl	8008450 <ld_dword>
 800a288:	4602      	mov	r2, r0
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	88da      	ldrh	r2, [r3, #6]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	79fa      	ldrb	r2, [r7, #7]
 800a2a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3330      	adds	r3, #48	; 0x30
 800a2be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe f94e 	bl	8008566 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d06e      	beq.n	800a3b2 <f_open+0x37e>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d06a      	beq.n	800a3b2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68da      	ldr	r2, [r3, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	895b      	ldrh	r3, [r3, #10]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	899b      	ldrh	r3, [r3, #12]
 800a2ee:	fb03 f302 	mul.w	r3, r3, r2
 800a2f2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a300:	e016      	b.n	800a330 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe fc29 	bl	8008b5e <get_fat>
 800a30c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a30e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a310:	2b01      	cmp	r3, #1
 800a312:	d802      	bhi.n	800a31a <f_open+0x2e6>
 800a314:	2302      	movs	r3, #2
 800a316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a31a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a31c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a320:	d102      	bne.n	800a328 <f_open+0x2f4>
 800a322:	2301      	movs	r3, #1
 800a324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	657b      	str	r3, [r7, #84]	; 0x54
 800a330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a334:	2b00      	cmp	r3, #0
 800a336:	d103      	bne.n	800a340 <f_open+0x30c>
 800a338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d8e0      	bhi.n	800a302 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a344:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d131      	bne.n	800a3b2 <f_open+0x37e>
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	899b      	ldrh	r3, [r3, #12]
 800a352:	461a      	mov	r2, r3
 800a354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a356:	fbb3 f1f2 	udiv	r1, r3, r2
 800a35a:	fb02 f201 	mul.w	r2, r2, r1
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d026      	beq.n	800a3b2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe fbd9 	bl	8008b20 <clust2sect>
 800a36e:	6478      	str	r0, [r7, #68]	; 0x44
 800a370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a372:	2b00      	cmp	r3, #0
 800a374:	d103      	bne.n	800a37e <f_open+0x34a>
						res = FR_INT_ERR;
 800a376:	2302      	movs	r3, #2
 800a378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a37c:	e019      	b.n	800a3b2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	899b      	ldrh	r3, [r3, #12]
 800a382:	461a      	mov	r2, r3
 800a384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a386:	fbb3 f2f2 	udiv	r2, r3, r2
 800a38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a38c:	441a      	add	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	7858      	ldrb	r0, [r3, #1]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f7fd ffdf 	bl	8008364 <disk_read>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <f_open+0x37e>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a3b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <f_open+0x38c>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe f93f 	bl	800864c <unlock_fs>
 800a3ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3760      	adds	r7, #96	; 0x60
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b08e      	sub	sp, #56	; 0x38
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
 800a3e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f107 0214 	add.w	r2, r7, #20
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fd6e 	bl	8009edc <validate>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a406:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d107      	bne.n	800a41e <f_read+0x44>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	7d5b      	ldrb	r3, [r3, #21]
 800a412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <f_read+0x58>
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe f910 	bl	800864c <unlock_fs>
 800a42c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a430:	e15d      	b.n	800a6ee <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	7d1b      	ldrb	r3, [r3, #20]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <f_read+0x72>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2107      	movs	r1, #7
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe f902 	bl	800864c <unlock_fs>
 800a448:	2307      	movs	r3, #7
 800a44a:	e150      	b.n	800a6ee <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	f240 813c 	bls.w	800a6da <f_read+0x300>
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a466:	e138      	b.n	800a6da <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	8992      	ldrh	r2, [r2, #12]
 800a470:	fbb3 f1f2 	udiv	r1, r3, r2
 800a474:	fb02 f201 	mul.w	r2, r2, r1
 800a478:	1a9b      	subs	r3, r3, r2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f040 80f3 	bne.w	800a666 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	8992      	ldrh	r2, [r2, #12]
 800a488:	fbb3 f3f2 	udiv	r3, r3, r2
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	8952      	ldrh	r2, [r2, #10]
 800a490:	3a01      	subs	r2, #1
 800a492:	4013      	ands	r3, r2
 800a494:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d139      	bne.n	800a510 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d103      	bne.n	800a4ac <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a4aa:	e013      	b.n	800a4d4 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d007      	beq.n	800a4c4 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7fe fe3c 	bl	8009138 <clmt_clust>
 800a4c0:	6338      	str	r0, [r7, #48]	; 0x30
 800a4c2:	e007      	b.n	800a4d4 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f7fe fb46 	bl	8008b5e <get_fat>
 800a4d2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d809      	bhi.n	800a4ee <f_read+0x114>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	755a      	strb	r2, [r3, #21]
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe f8b1 	bl	800864c <unlock_fs>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e0ff      	b.n	800a6ee <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f4:	d109      	bne.n	800a50a <f_read+0x130>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	755a      	strb	r2, [r3, #21]
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2101      	movs	r1, #1
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe f8a3 	bl	800864c <unlock_fs>
 800a506:	2301      	movs	r3, #1
 800a508:	e0f1      	b.n	800a6ee <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7fe fb01 	bl	8008b20 <clust2sect>
 800a51e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d109      	bne.n	800a53a <f_read+0x160>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2202      	movs	r2, #2
 800a52a:	755a      	strb	r2, [r3, #21]
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2102      	movs	r1, #2
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe f88b 	bl	800864c <unlock_fs>
 800a536:	2302      	movs	r3, #2
 800a538:	e0d9      	b.n	800a6ee <f_read+0x314>
			sect += csect;
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	4413      	add	r3, r2
 800a540:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	899b      	ldrh	r3, [r3, #12]
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a54e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d046      	beq.n	800a5e4 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	4413      	add	r3, r2
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	8952      	ldrh	r2, [r2, #10]
 800a560:	4293      	cmp	r3, r2
 800a562:	d905      	bls.n	800a570 <f_read+0x196>
					cc = fs->csize - csect;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	895b      	ldrh	r3, [r3, #10]
 800a568:	461a      	mov	r2, r3
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	7858      	ldrb	r0, [r3, #1]
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a57a:	f7fd fef3 	bl	8008364 <disk_read>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <f_read+0x1be>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2201      	movs	r2, #1
 800a588:	755a      	strb	r2, [r3, #21]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2101      	movs	r1, #1
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe f85c 	bl	800864c <unlock_fs>
 800a594:	2301      	movs	r3, #1
 800a596:	e0aa      	b.n	800a6ee <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	7d1b      	ldrb	r3, [r3, #20]
 800a59c:	b25b      	sxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	da18      	bge.n	800a5d4 <f_read+0x1fa>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a1a      	ldr	r2, [r3, #32]
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d911      	bls.n	800a5d4 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a1a      	ldr	r2, [r3, #32]
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	8992      	ldrh	r2, [r2, #12]
 800a5bc:	fb02 f303 	mul.w	r3, r2, r3
 800a5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5c2:	18d0      	adds	r0, r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	899b      	ldrh	r3, [r3, #12]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f7fd ffa8 	bl	8008524 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	fb02 f303 	mul.w	r3, r2, r3
 800a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a5e2:	e066      	b.n	800a6b2 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	69ba      	ldr	r2, [r7, #24]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d038      	beq.n	800a660 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	7d1b      	ldrb	r3, [r3, #20]
 800a5f2:	b25b      	sxtb	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da1d      	bge.n	800a634 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	7858      	ldrb	r0, [r3, #1]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1a      	ldr	r2, [r3, #32]
 800a606:	2301      	movs	r3, #1
 800a608:	f7fd fecc 	bl	80083a4 <disk_write>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d009      	beq.n	800a626 <f_read+0x24c>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2201      	movs	r2, #1
 800a616:	755a      	strb	r2, [r3, #21]
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2101      	movs	r1, #1
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe f815 	bl	800864c <unlock_fs>
 800a622:	2301      	movs	r3, #1
 800a624:	e063      	b.n	800a6ee <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	7d1b      	ldrb	r3, [r3, #20]
 800a62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	7858      	ldrb	r0, [r3, #1]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a63e:	2301      	movs	r3, #1
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	f7fd fe8f 	bl	8008364 <disk_read>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d009      	beq.n	800a660 <f_read+0x286>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	755a      	strb	r2, [r3, #21]
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2101      	movs	r1, #1
 800a656:	4618      	mov	r0, r3
 800a658:	f7fd fff8 	bl	800864c <unlock_fs>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e046      	b.n	800a6ee <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	4618      	mov	r0, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	8992      	ldrh	r2, [r2, #12]
 800a674:	fbb3 f1f2 	udiv	r1, r3, r2
 800a678:	fb02 f201 	mul.w	r2, r2, r1
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	1ac3      	subs	r3, r0, r3
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	429a      	cmp	r2, r3
 800a688:	d901      	bls.n	800a68e <f_read+0x2b4>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	8992      	ldrh	r2, [r2, #12]
 800a69c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6a0:	fb02 f200 	mul.w	r2, r2, r0
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6ae:	f7fd ff39 	bl	8008524 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	4413      	add	r3, r2
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	699a      	ldr	r2, [r3, #24]
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	441a      	add	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	619a      	str	r2, [r3, #24]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	441a      	add	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f47f aec3 	bne.w	800a468 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd ffb0 	bl	800864c <unlock_fs>
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3738      	adds	r7, #56	; 0x38
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b086      	sub	sp, #24
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f107 0208 	add.w	r2, r7, #8
 800a704:	4611      	mov	r1, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fbe8 	bl	8009edc <validate>
 800a70c:	4603      	mov	r3, r0
 800a70e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a710:	7dfb      	ldrb	r3, [r7, #23]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d16d      	bne.n	800a7f2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d067      	beq.n	800a7f2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7d1b      	ldrb	r3, [r3, #20]
 800a726:	b25b      	sxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	da1a      	bge.n	800a762 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	7858      	ldrb	r0, [r3, #1]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	2301      	movs	r3, #1
 800a73c:	f7fd fe32 	bl	80083a4 <disk_write>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d006      	beq.n	800a754 <f_sync+0x5e>
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2101      	movs	r1, #1
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fd ff7e 	bl	800864c <unlock_fs>
 800a750:	2301      	movs	r3, #1
 800a752:	e055      	b.n	800a800 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a762:	f7fc fe05 	bl	8007370 <get_fattime>
 800a766:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f7fe f937 	bl	80089e4 <move_window>
 800a776:	4603      	mov	r3, r0
 800a778:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d138      	bne.n	800a7f2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a784:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	330b      	adds	r3, #11
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	330b      	adds	r3, #11
 800a790:	f042 0220 	orr.w	r2, r2, #32
 800a794:	b2d2      	uxtb	r2, r2
 800a796:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	f7fe fec5 	bl	8009532 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f103 021c 	add.w	r2, r3, #28
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7fd fe89 	bl	80084cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3316      	adds	r3, #22
 800a7be:	6939      	ldr	r1, [r7, #16]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fd fe83 	bl	80084cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3312      	adds	r3, #18
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fd fe62 	bl	8008496 <st_word>
					fs->wflag = 1;
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe f930 	bl	8008a40 <sync_fs>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	7d1b      	ldrb	r3, [r3, #20]
 800a7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	7dfa      	ldrb	r2, [r7, #23]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fd ff27 	bl	800864c <unlock_fs>
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff ff70 	bl	800a6f6 <f_sync>
 800a816:	4603      	mov	r3, r0
 800a818:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11d      	bne.n	800a85c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f107 0208 	add.w	r2, r7, #8
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fb57 	bl	8009edc <validate>
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d111      	bne.n	800a85c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe f82d 	bl	800889c <dec_lock>
 800a842:	4603      	mov	r3, r0
 800a844:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d102      	bne.n	800a852 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd fef8 	bl	800864c <unlock_fs>
#endif
		}
	}
	return res;
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a87e:	4b1f      	ldr	r3, [pc, #124]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a880:	7a5b      	ldrb	r3, [r3, #9]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d131      	bne.n	800a8ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a888:	4b1c      	ldr	r3, [pc, #112]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a88a:	7a5b      	ldrb	r3, [r3, #9]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	461a      	mov	r2, r3
 800a890:	4b1a      	ldr	r3, [pc, #104]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a892:	2100      	movs	r1, #0
 800a894:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a896:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a898:	7a5b      	ldrb	r3, [r3, #9]
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	4a17      	ldr	r2, [pc, #92]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a8a8:	7a5b      	ldrb	r3, [r3, #9]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a8b0:	4413      	add	r3, r2
 800a8b2:	79fa      	ldrb	r2, [r7, #7]
 800a8b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a8b6:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a8b8:	7a5b      	ldrb	r3, [r3, #9]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	b2d1      	uxtb	r1, r2
 800a8c0:	4a0e      	ldr	r2, [pc, #56]	; (800a8fc <FATFS_LinkDriverEx+0x94>)
 800a8c2:	7251      	strb	r1, [r2, #9]
 800a8c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a8c6:	7dbb      	ldrb	r3, [r7, #22]
 800a8c8:	3330      	adds	r3, #48	; 0x30
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	223a      	movs	r2, #58	; 0x3a
 800a8d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	3302      	adds	r3, #2
 800a8dc:	222f      	movs	r2, #47	; 0x2f
 800a8de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	3303      	adds	r3, #3
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	371c      	adds	r7, #28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	20001568 	.word	0x20001568

0800a900 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a90a:	2200      	movs	r2, #0
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff ffaa 	bl	800a868 <FATFS_LinkDriverEx>
 800a914:	4603      	mov	r3, r0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	4603      	mov	r3, r0
 800a926:	6039      	str	r1, [r7, #0]
 800a928:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a92a:	2200      	movs	r2, #0
 800a92c:	2101      	movs	r1, #1
 800a92e:	2001      	movs	r0, #1
 800a930:	f000 fabc 	bl	800aeac <osSemaphoreNew>
 800a934:	4602      	mov	r2, r0
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bf14      	ite	ne
 800a942:	2301      	movne	r3, #1
 800a944:	2300      	moveq	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	60fb      	str	r3, [r7, #12]

    return ret;
 800a94a:	68fb      	ldr	r3, [r7, #12]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fbc5 	bl	800b0ec <osSemaphoreDelete>
#endif
    return 1;
 800a962:	2301      	movs	r3, #1
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a978:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fb1f 	bl	800afc0 <osSemaphoreAcquire>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a988:	2301      	movs	r3, #1
 800a98a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a98c:	68fb      	ldr	r3, [r7, #12]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b082      	sub	sp, #8
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fb60 	bl	800b064 <osSemaphoreRelease>
#endif
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <__NVIC_SetPriority>:
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a9b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	db0a      	blt.n	800a9d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	490c      	ldr	r1, [pc, #48]	; (800a9f8 <__NVIC_SetPriority+0x4c>)
 800a9c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9ca:	0112      	lsls	r2, r2, #4
 800a9cc:	b2d2      	uxtb	r2, r2
 800a9ce:	440b      	add	r3, r1
 800a9d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a9d4:	e00a      	b.n	800a9ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4908      	ldr	r1, [pc, #32]	; (800a9fc <__NVIC_SetPriority+0x50>)
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	f003 030f 	and.w	r3, r3, #15
 800a9e2:	3b04      	subs	r3, #4
 800a9e4:	0112      	lsls	r2, r2, #4
 800a9e6:	b2d2      	uxtb	r2, r2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	761a      	strb	r2, [r3, #24]
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	e000e100 	.word	0xe000e100
 800a9fc:	e000ed00 	.word	0xe000ed00

0800aa00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <SysTick_Handler+0x1c>)
 800aa06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aa08:	f002 fd5c 	bl	800d4c4 <xTaskGetSchedulerState>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d001      	beq.n	800aa16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aa12:	f003 fc41 	bl	800e298 <xPortSysTickHandler>
  }
}
 800aa16:	bf00      	nop
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	e000e010 	.word	0xe000e010

0800aa20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aa24:	2100      	movs	r1, #0
 800aa26:	f06f 0004 	mvn.w	r0, #4
 800aa2a:	f7ff ffbf 	bl	800a9ac <__NVIC_SetPriority>
#endif
}
 800aa2e:	bf00      	nop
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa3a:	f3ef 8305 	mrs	r3, IPSR
 800aa3e:	603b      	str	r3, [r7, #0]
  return(result);
 800aa40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aa46:	f06f 0305 	mvn.w	r3, #5
 800aa4a:	607b      	str	r3, [r7, #4]
 800aa4c:	e00c      	b.n	800aa68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <osKernelInitialize+0x44>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d105      	bne.n	800aa62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <osKernelInitialize+0x44>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	607b      	str	r3, [r7, #4]
 800aa60:	e002      	b.n	800aa68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa68:	687b      	ldr	r3, [r7, #4]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20001574 	.word	0x20001574

0800aa7c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800aa82:	f002 fd1f 	bl	800d4c4 <xTaskGetSchedulerState>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <osKernelGetState+0x1a>
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d105      	bne.n	800aa9c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800aa90:	2302      	movs	r3, #2
 800aa92:	607b      	str	r3, [r7, #4]
      break;
 800aa94:	e00c      	b.n	800aab0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800aa96:	2303      	movs	r3, #3
 800aa98:	607b      	str	r3, [r7, #4]
      break;
 800aa9a:	e009      	b.n	800aab0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800aa9c:	4b07      	ldr	r3, [pc, #28]	; (800aabc <osKernelGetState+0x40>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d102      	bne.n	800aaaa <osKernelGetState+0x2e>
        state = osKernelReady;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800aaa8:	e001      	b.n	800aaae <osKernelGetState+0x32>
        state = osKernelInactive;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
      break;
 800aaae:	bf00      	nop
  }

  return (state);
 800aab0:	687b      	ldr	r3, [r7, #4]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20001574 	.word	0x20001574

0800aac0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aac6:	f3ef 8305 	mrs	r3, IPSR
 800aaca:	603b      	str	r3, [r7, #0]
  return(result);
 800aacc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <osKernelStart+0x1a>
    stat = osErrorISR;
 800aad2:	f06f 0305 	mvn.w	r3, #5
 800aad6:	607b      	str	r3, [r7, #4]
 800aad8:	e010      	b.n	800aafc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aada:	4b0b      	ldr	r3, [pc, #44]	; (800ab08 <osKernelStart+0x48>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d109      	bne.n	800aaf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aae2:	f7ff ff9d 	bl	800aa20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aae6:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <osKernelStart+0x48>)
 800aae8:	2202      	movs	r2, #2
 800aaea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aaec:	f002 f86c 	bl	800cbc8 <vTaskStartScheduler>
      stat = osOK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	607b      	str	r3, [r7, #4]
 800aaf4:	e002      	b.n	800aafc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aafa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aafc:	687b      	ldr	r3, [r7, #4]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20001574 	.word	0x20001574

0800ab0c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab12:	f3ef 8305 	mrs	r3, IPSR
 800ab16:	603b      	str	r3, [r7, #0]
  return(result);
 800ab18:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ab1e:	f002 f97f 	bl	800ce20 <xTaskGetTickCountFromISR>
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	e002      	b.n	800ab2c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ab26:	f002 f96b 	bl	800ce00 <xTaskGetTickCount>
 800ab2a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ab2c:	687b      	ldr	r3, [r7, #4]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b08e      	sub	sp, #56	; 0x38
 800ab3a:	af04      	add	r7, sp, #16
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab46:	f3ef 8305 	mrs	r3, IPSR
 800ab4a:	617b      	str	r3, [r7, #20]
  return(result);
 800ab4c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d17e      	bne.n	800ac50 <osThreadNew+0x11a>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d07b      	beq.n	800ac50 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ab58:	2380      	movs	r3, #128	; 0x80
 800ab5a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab5c:	2318      	movs	r3, #24
 800ab5e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab60:	2300      	movs	r3, #0
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ab64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d045      	beq.n	800abfc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <osThreadNew+0x48>
        name = attr->name;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d008      	beq.n	800aba4 <osThreadNew+0x6e>
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	2b38      	cmp	r3, #56	; 0x38
 800ab96:	d805      	bhi.n	800aba4 <osThreadNew+0x6e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <osThreadNew+0x72>
        return (NULL);
 800aba4:	2300      	movs	r3, #0
 800aba6:	e054      	b.n	800ac52 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	089b      	lsrs	r3, r3, #2
 800abb6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00e      	beq.n	800abde <osThreadNew+0xa8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2bbb      	cmp	r3, #187	; 0xbb
 800abc6:	d90a      	bls.n	800abde <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d006      	beq.n	800abde <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <osThreadNew+0xa8>
        mem = 1;
 800abd8:	2301      	movs	r3, #1
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e010      	b.n	800ac00 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10c      	bne.n	800ac00 <osThreadNew+0xca>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d108      	bne.n	800ac00 <osThreadNew+0xca>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d104      	bne.n	800ac00 <osThreadNew+0xca>
          mem = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	e001      	b.n	800ac00 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d110      	bne.n	800ac28 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac0e:	9202      	str	r2, [sp, #8]
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	6a3a      	ldr	r2, [r7, #32]
 800ac1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f001 fde7 	bl	800c7f0 <xTaskCreateStatic>
 800ac22:	4603      	mov	r3, r0
 800ac24:	613b      	str	r3, [r7, #16]
 800ac26:	e013      	b.n	800ac50 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d110      	bne.n	800ac50 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	f107 0310 	add.w	r3, r7, #16
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f001 fe32 	bl	800c8aa <xTaskCreate>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d001      	beq.n	800ac50 <osThreadNew+0x11a>
            hTask = NULL;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac50:	693b      	ldr	r3, [r7, #16]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3728      	adds	r7, #40	; 0x28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac62:	f3ef 8305 	mrs	r3, IPSR
 800ac66:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <osDelay+0x1c>
    stat = osErrorISR;
 800ac6e:	f06f 0305 	mvn.w	r3, #5
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	e007      	b.n	800ac86 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f001 ff6d 	bl	800cb60 <vTaskDelay>
    }
  }

  return (stat);
 800ac86:	68fb      	ldr	r3, [r7, #12]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac9c:	f3ef 8305 	mrs	r3, IPSR
 800aca0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aca2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d174      	bne.n	800ad92 <osMutexNew+0x102>
    if (attr != NULL) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	61bb      	str	r3, [r7, #24]
 800acb4:	e001      	b.n	800acba <osMutexNew+0x2a>
    } else {
      type = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <osMutexNew+0x3a>
      rmtx = 1U;
 800acc4:	2301      	movs	r3, #1
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e001      	b.n	800acce <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	f003 0308 	and.w	r3, r3, #8
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d15c      	bne.n	800ad92 <osMutexNew+0x102>
      mem = -1;
 800acd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acdc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d015      	beq.n	800ad10 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <osMutexNew+0x6a>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	2b4f      	cmp	r3, #79	; 0x4f
 800acf2:	d902      	bls.n	800acfa <osMutexNew+0x6a>
          mem = 1;
 800acf4:	2301      	movs	r3, #1
 800acf6:	613b      	str	r3, [r7, #16]
 800acf8:	e00c      	b.n	800ad14 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d108      	bne.n	800ad14 <osMutexNew+0x84>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d104      	bne.n	800ad14 <osMutexNew+0x84>
            mem = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	613b      	str	r3, [r7, #16]
 800ad0e:	e001      	b.n	800ad14 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d112      	bne.n	800ad40 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d007      	beq.n	800ad30 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	4619      	mov	r1, r3
 800ad26:	2004      	movs	r0, #4
 800ad28:	f000 fdd1 	bl	800b8ce <xQueueCreateMutexStatic>
 800ad2c:	61f8      	str	r0, [r7, #28]
 800ad2e:	e016      	b.n	800ad5e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4619      	mov	r1, r3
 800ad36:	2001      	movs	r0, #1
 800ad38:	f000 fdc9 	bl	800b8ce <xQueueCreateMutexStatic>
 800ad3c:	61f8      	str	r0, [r7, #28]
 800ad3e:	e00e      	b.n	800ad5e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10b      	bne.n	800ad5e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ad4c:	2004      	movs	r0, #4
 800ad4e:	f000 fda6 	bl	800b89e <xQueueCreateMutex>
 800ad52:	61f8      	str	r0, [r7, #28]
 800ad54:	e003      	b.n	800ad5e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ad56:	2001      	movs	r0, #1
 800ad58:	f000 fda1 	bl	800b89e <xQueueCreateMutex>
 800ad5c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00c      	beq.n	800ad7e <osMutexNew+0xee>
        if (attr != NULL) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <osMutexNew+0xe2>
          name = attr->name;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e001      	b.n	800ad76 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	69f8      	ldr	r0, [r7, #28]
 800ad7a:	f001 fcb1 	bl	800c6e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <osMutexNew+0x102>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	f043 0301 	orr.w	r3, r3, #1
 800ad90:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ad92:	69fb      	ldr	r3, [r7, #28]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3720      	adds	r7, #32
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adba:	f3ef 8305 	mrs	r3, IPSR
 800adbe:	60bb      	str	r3, [r7, #8]
  return(result);
 800adc0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <osMutexAcquire+0x32>
    stat = osErrorISR;
 800adc6:	f06f 0305 	mvn.w	r3, #5
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	e02c      	b.n	800ae28 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d103      	bne.n	800addc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800add4:	f06f 0303 	mvn.w	r3, #3
 800add8:	617b      	str	r3, [r7, #20]
 800adda:	e025      	b.n	800ae28 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d011      	beq.n	800ae06 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6938      	ldr	r0, [r7, #16]
 800ade6:	f000 fdc1 	bl	800b96c <xQueueTakeMutexRecursive>
 800adea:	4603      	mov	r3, r0
 800adec:	2b01      	cmp	r3, #1
 800adee:	d01b      	beq.n	800ae28 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800adf6:	f06f 0301 	mvn.w	r3, #1
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	e014      	b.n	800ae28 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800adfe:	f06f 0302 	mvn.w	r3, #2
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	e010      	b.n	800ae28 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6938      	ldr	r0, [r7, #16]
 800ae0a:	f001 f955 	bl	800c0b8 <xQueueSemaphoreTake>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d009      	beq.n	800ae28 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ae1a:	f06f 0301 	mvn.w	r3, #1
 800ae1e:	617b      	str	r3, [r7, #20]
 800ae20:	e002      	b.n	800ae28 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ae22:	f06f 0302 	mvn.w	r3, #2
 800ae26:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ae28:	697b      	ldr	r3, [r7, #20]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b086      	sub	sp, #24
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae4e:	f3ef 8305 	mrs	r3, IPSR
 800ae52:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae54:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ae5a:	f06f 0305 	mvn.w	r3, #5
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	e01f      	b.n	800aea2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ae68:	f06f 0303 	mvn.w	r3, #3
 800ae6c:	617b      	str	r3, [r7, #20]
 800ae6e:	e018      	b.n	800aea2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f000 fd44 	bl	800b904 <xQueueGiveMutexRecursive>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d00f      	beq.n	800aea2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ae82:	f06f 0302 	mvn.w	r3, #2
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	e00b      	b.n	800aea2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2100      	movs	r1, #0
 800ae90:	6938      	ldr	r0, [r7, #16]
 800ae92:	f000 fe0b 	bl	800baac <xQueueGenericSend>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d002      	beq.n	800aea2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ae9c:	f06f 0302 	mvn.w	r3, #2
 800aea0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aea2:	697b      	ldr	r3, [r7, #20]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	; 0x28
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aebc:	f3ef 8305 	mrs	r3, IPSR
 800aec0:	613b      	str	r3, [r7, #16]
  return(result);
 800aec2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d175      	bne.n	800afb4 <osSemaphoreNew+0x108>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d072      	beq.n	800afb4 <osSemaphoreNew+0x108>
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d86e      	bhi.n	800afb4 <osSemaphoreNew+0x108>
    mem = -1;
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d015      	beq.n	800af0e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d006      	beq.n	800aef8 <osSemaphoreNew+0x4c>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	2b4f      	cmp	r3, #79	; 0x4f
 800aef0:	d902      	bls.n	800aef8 <osSemaphoreNew+0x4c>
        mem = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	e00c      	b.n	800af12 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d108      	bne.n	800af12 <osSemaphoreNew+0x66>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <osSemaphoreNew+0x66>
          mem = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	61bb      	str	r3, [r7, #24]
 800af0c:	e001      	b.n	800af12 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af18:	d04c      	beq.n	800afb4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d128      	bne.n	800af72 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10a      	bne.n	800af3c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	2203      	movs	r2, #3
 800af2c:	9200      	str	r2, [sp, #0]
 800af2e:	2200      	movs	r2, #0
 800af30:	2100      	movs	r1, #0
 800af32:	2001      	movs	r0, #1
 800af34:	f000 fbc4 	bl	800b6c0 <xQueueGenericCreateStatic>
 800af38:	61f8      	str	r0, [r7, #28]
 800af3a:	e005      	b.n	800af48 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800af3c:	2203      	movs	r2, #3
 800af3e:	2100      	movs	r1, #0
 800af40:	2001      	movs	r0, #1
 800af42:	f000 fc35 	bl	800b7b0 <xQueueGenericCreate>
 800af46:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d022      	beq.n	800af94 <osSemaphoreNew+0xe8>
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01f      	beq.n	800af94 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af54:	2300      	movs	r3, #0
 800af56:	2200      	movs	r2, #0
 800af58:	2100      	movs	r1, #0
 800af5a:	69f8      	ldr	r0, [r7, #28]
 800af5c:	f000 fda6 	bl	800baac <xQueueGenericSend>
 800af60:	4603      	mov	r3, r0
 800af62:	2b01      	cmp	r3, #1
 800af64:	d016      	beq.n	800af94 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800af66:	69f8      	ldr	r0, [r7, #28]
 800af68:	f001 fa6e 	bl	800c448 <vQueueDelete>
            hSemaphore = NULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	e010      	b.n	800af94 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d108      	bne.n	800af8a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	461a      	mov	r2, r3
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 fd29 	bl	800b9d8 <xQueueCreateCountingSemaphoreStatic>
 800af86:	61f8      	str	r0, [r7, #28]
 800af88:	e004      	b.n	800af94 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800af8a:	68b9      	ldr	r1, [r7, #8]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 fd5a 	bl	800ba46 <xQueueCreateCountingSemaphore>
 800af92:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00c      	beq.n	800afb4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	e001      	b.n	800afac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800afac:	6979      	ldr	r1, [r7, #20]
 800afae:	69f8      	ldr	r0, [r7, #28]
 800afb0:	f001 fb96 	bl	800c6e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800afb4:	69fb      	ldr	r3, [r7, #28]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800afd8:	f06f 0303 	mvn.w	r3, #3
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e039      	b.n	800b054 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afe0:	f3ef 8305 	mrs	r3, IPSR
 800afe4:	60fb      	str	r3, [r7, #12]
  return(result);
 800afe6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d022      	beq.n	800b032 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800aff2:	f06f 0303 	mvn.w	r3, #3
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	e02c      	b.n	800b054 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800affe:	f107 0308 	add.w	r3, r7, #8
 800b002:	461a      	mov	r2, r3
 800b004:	2100      	movs	r1, #0
 800b006:	6938      	ldr	r0, [r7, #16]
 800b008:	f001 f962 	bl	800c2d0 <xQueueReceiveFromISR>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d003      	beq.n	800b01a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b012:	f06f 0302 	mvn.w	r3, #2
 800b016:	617b      	str	r3, [r7, #20]
 800b018:	e01c      	b.n	800b054 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d019      	beq.n	800b054 <osSemaphoreAcquire+0x94>
 800b020:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <osSemaphoreAcquire+0xa0>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	e010      	b.n	800b054 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6938      	ldr	r0, [r7, #16]
 800b036:	f001 f83f 	bl	800c0b8 <xQueueSemaphoreTake>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d009      	beq.n	800b054 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b046:	f06f 0301 	mvn.w	r3, #1
 800b04a:	617b      	str	r3, [r7, #20]
 800b04c:	e002      	b.n	800b054 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b04e:	f06f 0302 	mvn.w	r3, #2
 800b052:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b054:	697b      	ldr	r3, [r7, #20]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b070:	2300      	movs	r3, #0
 800b072:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d103      	bne.n	800b082 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b07a:	f06f 0303 	mvn.w	r3, #3
 800b07e:	617b      	str	r3, [r7, #20]
 800b080:	e02c      	b.n	800b0dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b082:	f3ef 8305 	mrs	r3, IPSR
 800b086:	60fb      	str	r3, [r7, #12]
  return(result);
 800b088:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01a      	beq.n	800b0c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b08e:	2300      	movs	r3, #0
 800b090:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	4619      	mov	r1, r3
 800b098:	6938      	ldr	r0, [r7, #16]
 800b09a:	f000 fea0 	bl	800bdde <xQueueGiveFromISR>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d003      	beq.n	800b0ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b0a4:	f06f 0302 	mvn.w	r3, #2
 800b0a8:	617b      	str	r3, [r7, #20]
 800b0aa:	e017      	b.n	800b0dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d014      	beq.n	800b0dc <osSemaphoreRelease+0x78>
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	; (800b0e8 <osSemaphoreRelease+0x84>)
 800b0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	e00b      	b.n	800b0dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f000 fcee 	bl	800baac <xQueueGenericSend>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d002      	beq.n	800b0dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b0d6:	f06f 0302 	mvn.w	r3, #2
 800b0da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b0dc:	697b      	ldr	r3, [r7, #20]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	e000ed04 	.word	0xe000ed04

0800b0ec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f8:	f3ef 8305 	mrs	r3, IPSR
 800b0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b100:	2b00      	cmp	r3, #0
 800b102:	d003      	beq.n	800b10c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b104:	f06f 0305 	mvn.w	r3, #5
 800b108:	617b      	str	r3, [r7, #20]
 800b10a:	e00e      	b.n	800b12a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d103      	bne.n	800b11a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b112:	f06f 0303 	mvn.w	r3, #3
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e007      	b.n	800b12a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b11a:	6938      	ldr	r0, [r7, #16]
 800b11c:	f001 fb0a 	bl	800c734 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b120:	2300      	movs	r3, #0
 800b122:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	f001 f98f 	bl	800c448 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b12a:	697b      	ldr	r3, [r7, #20]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	; 0x28
 800b138:	af02      	add	r7, sp, #8
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b144:	f3ef 8305 	mrs	r3, IPSR
 800b148:	613b      	str	r3, [r7, #16]
  return(result);
 800b14a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d15f      	bne.n	800b210 <osMessageQueueNew+0xdc>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d05c      	beq.n	800b210 <osMessageQueueNew+0xdc>
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d059      	beq.n	800b210 <osMessageQueueNew+0xdc>
    mem = -1;
 800b15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b160:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d029      	beq.n	800b1bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d012      	beq.n	800b196 <osMessageQueueNew+0x62>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	2b4f      	cmp	r3, #79	; 0x4f
 800b176:	d90e      	bls.n	800b196 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00a      	beq.n	800b196 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	695a      	ldr	r2, [r3, #20]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	fb01 f303 	mul.w	r3, r1, r3
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d302      	bcc.n	800b196 <osMessageQueueNew+0x62>
        mem = 1;
 800b190:	2301      	movs	r3, #1
 800b192:	61bb      	str	r3, [r7, #24]
 800b194:	e014      	b.n	800b1c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d110      	bne.n	800b1c0 <osMessageQueueNew+0x8c>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10c      	bne.n	800b1c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d108      	bne.n	800b1c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d104      	bne.n	800b1c0 <osMessageQueueNew+0x8c>
          mem = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	e001      	b.n	800b1c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d10b      	bne.n	800b1de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	691a      	ldr	r2, [r3, #16]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	9100      	str	r1, [sp, #0]
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 fa73 	bl	800b6c0 <xQueueGenericCreateStatic>
 800b1da:	61f8      	str	r0, [r7, #28]
 800b1dc:	e008      	b.n	800b1f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d105      	bne.n	800b1f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	68b9      	ldr	r1, [r7, #8]
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 fae1 	bl	800b7b0 <xQueueGenericCreate>
 800b1ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	617b      	str	r3, [r7, #20]
 800b202:	e001      	b.n	800b208 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b208:	6979      	ldr	r1, [r7, #20]
 800b20a:	69f8      	ldr	r0, [r7, #28]
 800b20c:	f001 fa68 	bl	800c6e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b210:	69fb      	ldr	r3, [r7, #28]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3720      	adds	r7, #32
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b088      	sub	sp, #32
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	4613      	mov	r3, r2
 800b22a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b230:	2300      	movs	r3, #0
 800b232:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b234:	f3ef 8305 	mrs	r3, IPSR
 800b238:	617b      	str	r3, [r7, #20]
  return(result);
 800b23a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d028      	beq.n	800b292 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d005      	beq.n	800b252 <osMessageQueuePut+0x36>
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <osMessageQueuePut+0x36>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b252:	f06f 0303 	mvn.w	r3, #3
 800b256:	61fb      	str	r3, [r7, #28]
 800b258:	e038      	b.n	800b2cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b25e:	f107 0210 	add.w	r2, r7, #16
 800b262:	2300      	movs	r3, #0
 800b264:	68b9      	ldr	r1, [r7, #8]
 800b266:	69b8      	ldr	r0, [r7, #24]
 800b268:	f000 fd1e 	bl	800bca8 <xQueueGenericSendFromISR>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d003      	beq.n	800b27a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b272:	f06f 0302 	mvn.w	r3, #2
 800b276:	61fb      	str	r3, [r7, #28]
 800b278:	e028      	b.n	800b2cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d025      	beq.n	800b2cc <osMessageQueuePut+0xb0>
 800b280:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <osMessageQueuePut+0xbc>)
 800b282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	e01c      	b.n	800b2cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <osMessageQueuePut+0x82>
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d103      	bne.n	800b2a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b29e:	f06f 0303 	mvn.w	r3, #3
 800b2a2:	61fb      	str	r3, [r7, #28]
 800b2a4:	e012      	b.n	800b2cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	69b8      	ldr	r0, [r7, #24]
 800b2ae:	f000 fbfd 	bl	800baac <xQueueGenericSend>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d009      	beq.n	800b2cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b2be:	f06f 0301 	mvn.w	r3, #1
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e002      	b.n	800b2cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b2c6:	f06f 0302 	mvn.w	r3, #2
 800b2ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2cc:	69fb      	ldr	r3, [r7, #28]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	e000ed04 	.word	0xe000ed04

0800b2dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2f2:	f3ef 8305 	mrs	r3, IPSR
 800b2f6:	617b      	str	r3, [r7, #20]
  return(result);
 800b2f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d028      	beq.n	800b350 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <osMessageQueueGet+0x34>
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <osMessageQueueGet+0x34>
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d003      	beq.n	800b318 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b310:	f06f 0303 	mvn.w	r3, #3
 800b314:	61fb      	str	r3, [r7, #28]
 800b316:	e037      	b.n	800b388 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b31c:	f107 0310 	add.w	r3, r7, #16
 800b320:	461a      	mov	r2, r3
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	69b8      	ldr	r0, [r7, #24]
 800b326:	f000 ffd3 	bl	800c2d0 <xQueueReceiveFromISR>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d003      	beq.n	800b338 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b330:	f06f 0302 	mvn.w	r3, #2
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	e027      	b.n	800b388 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d024      	beq.n	800b388 <osMessageQueueGet+0xac>
 800b33e:	4b15      	ldr	r3, [pc, #84]	; (800b394 <osMessageQueueGet+0xb8>)
 800b340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	e01b      	b.n	800b388 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <osMessageQueueGet+0x80>
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b35c:	f06f 0303 	mvn.w	r3, #3
 800b360:	61fb      	str	r3, [r7, #28]
 800b362:	e011      	b.n	800b388 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	68b9      	ldr	r1, [r7, #8]
 800b368:	69b8      	ldr	r0, [r7, #24]
 800b36a:	f000 fdc5 	bl	800bef8 <xQueueReceive>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b01      	cmp	r3, #1
 800b372:	d009      	beq.n	800b388 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b37a:	f06f 0301 	mvn.w	r3, #1
 800b37e:	61fb      	str	r3, [r7, #28]
 800b380:	e002      	b.n	800b388 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b382:	f06f 0302 	mvn.w	r3, #2
 800b386:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b388:	69fb      	ldr	r3, [r7, #28]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3720      	adds	r7, #32
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	e000ed04 	.word	0xe000ed04

0800b398 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e00e      	b.n	800b3ce <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b0:	f3ef 8305 	mrs	r3, IPSR
 800b3b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d004      	beq.n	800b3c6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800b3bc:	6938      	ldr	r0, [r7, #16]
 800b3be:	f001 f825 	bl	800c40c <uxQueueMessagesWaitingFromISR>
 800b3c2:	6178      	str	r0, [r7, #20]
 800b3c4:	e003      	b.n	800b3ce <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800b3c6:	6938      	ldr	r0, [r7, #16]
 800b3c8:	f001 f802 	bl	800c3d0 <uxQueueMessagesWaiting>
 800b3cc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800b3ce:	697b      	ldr	r3, [r7, #20]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e4:	f3ef 8305 	mrs	r3, IPSR
 800b3e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d003      	beq.n	800b3f8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800b3f0:	f06f 0305 	mvn.w	r3, #5
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	e00e      	b.n	800b416 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d103      	bne.n	800b406 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800b3fe:	f06f 0303 	mvn.w	r3, #3
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	e007      	b.n	800b416 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800b406:	6938      	ldr	r0, [r7, #16]
 800b408:	f001 f994 	bl	800c734 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800b410:	6938      	ldr	r0, [r7, #16]
 800b412:	f001 f819 	bl	800c448 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b416:	697b      	ldr	r3, [r7, #20]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4a07      	ldr	r2, [pc, #28]	; (800b44c <vApplicationGetIdleTaskMemory+0x2c>)
 800b430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	4a06      	ldr	r2, [pc, #24]	; (800b450 <vApplicationGetIdleTaskMemory+0x30>)
 800b436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2280      	movs	r2, #128	; 0x80
 800b43c:	601a      	str	r2, [r3, #0]
}
 800b43e:	bf00      	nop
 800b440:	3714      	adds	r7, #20
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20001578 	.word	0x20001578
 800b450:	20001634 	.word	0x20001634

0800b454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4a07      	ldr	r2, [pc, #28]	; (800b480 <vApplicationGetTimerTaskMemory+0x2c>)
 800b464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	4a06      	ldr	r2, [pc, #24]	; (800b484 <vApplicationGetTimerTaskMemory+0x30>)
 800b46a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b472:	601a      	str	r2, [r3, #0]
}
 800b474:	bf00      	nop
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	20001834 	.word	0x20001834
 800b484:	200018f0 	.word	0x200018f0

0800b488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f103 0208 	add.w	r2, r3, #8
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f103 0208 	add.w	r2, r3, #8
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f103 0208 	add.w	r2, r3, #8
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b085      	sub	sp, #20
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	689a      	ldr	r2, [r3, #8]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	601a      	str	r2, [r3, #0]
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b52a:	b480      	push	{r7}
 800b52c:	b085      	sub	sp, #20
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b540:	d103      	bne.n	800b54a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e00c      	b.n	800b564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3308      	adds	r3, #8
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	e002      	b.n	800b558 <vListInsert+0x2e>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	429a      	cmp	r2, r3
 800b562:	d2f6      	bcs.n	800b552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	601a      	str	r2, [r3, #0]
}
 800b590:	bf00      	nop
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	6892      	ldr	r2, [r2, #8]
 800b5b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6852      	ldr	r2, [r2, #4]
 800b5bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d103      	bne.n	800b5d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	1e5a      	subs	r2, r3, #1
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b61a:	f002 fdab 	bl	800e174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b626:	68f9      	ldr	r1, [r7, #12]
 800b628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b62a:	fb01 f303 	mul.w	r3, r1, r3
 800b62e:	441a      	add	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64a:	3b01      	subs	r3, #1
 800b64c:	68f9      	ldr	r1, [r7, #12]
 800b64e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b650:	fb01 f303 	mul.w	r3, r1, r3
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	22ff      	movs	r2, #255	; 0xff
 800b65e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	22ff      	movs	r2, #255	; 0xff
 800b666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d114      	bne.n	800b69a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01a      	beq.n	800b6ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3310      	adds	r3, #16
 800b67c:	4618      	mov	r0, r3
 800b67e:	f001 fd4f 	bl	800d120 <xTaskRemoveFromEventList>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d012      	beq.n	800b6ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b688:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <xQueueGenericReset+0xcc>)
 800b68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	e009      	b.n	800b6ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3310      	adds	r3, #16
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff fef2 	bl	800b488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3324      	adds	r3, #36	; 0x24
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7ff feed 	bl	800b488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6ae:	f002 fd91 	bl	800e1d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6b2:	2301      	movs	r3, #1
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	; 0x38
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6e6:	bf00      	nop
 800b6e8:	e7fe      	b.n	800b6e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10a      	bne.n	800b706 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b702:	bf00      	nop
 800b704:	e7fe      	b.n	800b704 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <xQueueGenericCreateStatic+0x52>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <xQueueGenericCreateStatic+0x56>
 800b712:	2301      	movs	r3, #1
 800b714:	e000      	b.n	800b718 <xQueueGenericCreateStatic+0x58>
 800b716:	2300      	movs	r3, #0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10a      	bne.n	800b732 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	623b      	str	r3, [r7, #32]
}
 800b72e:	bf00      	nop
 800b730:	e7fe      	b.n	800b730 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <xQueueGenericCreateStatic+0x7e>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <xQueueGenericCreateStatic+0x82>
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <xQueueGenericCreateStatic+0x84>
 800b742:	2300      	movs	r3, #0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10a      	bne.n	800b75e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	61fb      	str	r3, [r7, #28]
}
 800b75a:	bf00      	nop
 800b75c:	e7fe      	b.n	800b75c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b75e:	2350      	movs	r3, #80	; 0x50
 800b760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2b50      	cmp	r3, #80	; 0x50
 800b766:	d00a      	beq.n	800b77e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	61bb      	str	r3, [r7, #24]
}
 800b77a:	bf00      	nop
 800b77c:	e7fe      	b.n	800b77c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b77e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00d      	beq.n	800b7a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b792:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	4613      	mov	r3, r2
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f83f 	bl	800b824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3730      	adds	r7, #48	; 0x30
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <xQueueGenericCreate+0x2a>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	613b      	str	r3, [r7, #16]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	3350      	adds	r3, #80	; 0x50
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 fde5 	bl	800e3b8 <pvPortMalloc>
 800b7ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d011      	beq.n	800b81a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	3350      	adds	r3, #80	; 0x50
 800b7fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b808:	79fa      	ldrb	r2, [r7, #7]
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	4613      	mov	r3, r2
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 f805 	bl	800b824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b81a:	69bb      	ldr	r3, [r7, #24]
	}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d103      	bne.n	800b840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e002      	b.n	800b846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b852:	2101      	movs	r1, #1
 800b854:	69b8      	ldr	r0, [r7, #24]
 800b856:	f7ff fecb 	bl	800b5f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b862:	bf00      	nop
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b88a:	2300      	movs	r3, #0
 800b88c:	2200      	movs	r2, #0
 800b88e:	2100      	movs	r1, #0
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f90b 	bl	800baac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b086      	sub	sp, #24
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6939      	ldr	r1, [r7, #16]
 800b8b6:	6978      	ldr	r0, [r7, #20]
 800b8b8:	f7ff ff7a 	bl	800b7b0 <xQueueGenericCreate>
 800b8bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff ffd3 	bl	800b86a <prvInitialiseMutex>

		return xNewQueue;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
	}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b088      	sub	sp, #32
 800b8d2:	af02      	add	r7, sp, #8
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	6039      	str	r1, [r7, #0]
 800b8d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	6939      	ldr	r1, [r7, #16]
 800b8ec:	6978      	ldr	r0, [r7, #20]
 800b8ee:	f7ff fee7 	bl	800b6c0 <xQueueGenericCreateStatic>
 800b8f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff ffb8 	bl	800b86a <prvInitialiseMutex>

		return xNewQueue;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
	}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b904:	b590      	push	{r4, r7, lr}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10a      	bne.n	800b92c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	60fb      	str	r3, [r7, #12]
}
 800b928:	bf00      	nop
 800b92a:	e7fe      	b.n	800b92a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	689c      	ldr	r4, [r3, #8]
 800b930:	f001 fdb8 	bl	800d4a4 <xTaskGetCurrentTaskHandle>
 800b934:	4603      	mov	r3, r0
 800b936:	429c      	cmp	r4, r3
 800b938:	d111      	bne.n	800b95e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	1e5a      	subs	r2, r3, #1
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d105      	bne.n	800b958 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b94c:	2300      	movs	r3, #0
 800b94e:	2200      	movs	r2, #0
 800b950:	2100      	movs	r1, #0
 800b952:	6938      	ldr	r0, [r7, #16]
 800b954:	f000 f8aa 	bl	800baac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	e001      	b.n	800b962 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b95e:	2300      	movs	r3, #0
 800b960:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b962:	697b      	ldr	r3, [r7, #20]
	}
 800b964:	4618      	mov	r0, r3
 800b966:	371c      	adds	r7, #28
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd90      	pop	{r4, r7, pc}

0800b96c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b96c:	b590      	push	{r4, r7, lr}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10a      	bne.n	800b996 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	60fb      	str	r3, [r7, #12]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	689c      	ldr	r4, [r3, #8]
 800b99a:	f001 fd83 	bl	800d4a4 <xTaskGetCurrentTaskHandle>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	d107      	bne.n	800b9b4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	e00c      	b.n	800b9ce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6938      	ldr	r0, [r7, #16]
 800b9b8:	f000 fb7e 	bl	800c0b8 <xQueueSemaphoreTake>
 800b9bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b9ce:	697b      	ldr	r3, [r7, #20]
	}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd90      	pop	{r4, r7, pc}

0800b9d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10a      	bne.n	800ba00 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	61bb      	str	r3, [r7, #24]
}
 800b9fc:	bf00      	nop
 800b9fe:	e7fe      	b.n	800b9fe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d90a      	bls.n	800ba1e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	617b      	str	r3, [r7, #20]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ba1e:	2302      	movs	r3, #2
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	2100      	movs	r1, #0
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f7ff fe49 	bl	800b6c0 <xQueueGenericCreateStatic>
 800ba2e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
	}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3720      	adds	r7, #32
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b086      	sub	sp, #24
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	613b      	str	r3, [r7, #16]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d90a      	bls.n	800ba8a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	60fb      	str	r3, [r7, #12]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7ff fe8e 	bl	800b7b0 <xQueueGenericCreate>
 800ba94:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800baa2:	697b      	ldr	r3, [r7, #20]
	}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08e      	sub	sp, #56	; 0x38
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800baba:	2300      	movs	r3, #0
 800babc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xQueueGenericSend+0x32>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d103      	bne.n	800baec <xQueueGenericSend+0x40>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <xQueueGenericSend+0x44>
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <xQueueGenericSend+0x46>
 800baf0:	2300      	movs	r3, #0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <xQueueGenericSend+0x60>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d103      	bne.n	800bb1a <xQueueGenericSend+0x6e>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d101      	bne.n	800bb1e <xQueueGenericSend+0x72>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e000      	b.n	800bb20 <xQueueGenericSend+0x74>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <xQueueGenericSend+0x8e>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	623b      	str	r3, [r7, #32]
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb3a:	f001 fcc3 	bl	800d4c4 <xTaskGetSchedulerState>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <xQueueGenericSend+0x9e>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <xQueueGenericSend+0xa2>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <xQueueGenericSend+0xa4>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <xQueueGenericSend+0xbe>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	61fb      	str	r3, [r7, #28]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb6a:	f002 fb03 	bl	800e174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d302      	bcc.n	800bb80 <xQueueGenericSend+0xd4>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d129      	bne.n	800bbd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb86:	f000 fc9a 	bl	800c4be <prvCopyDataToQueue>
 800bb8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d010      	beq.n	800bbb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	3324      	adds	r3, #36	; 0x24
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 fac1 	bl	800d120 <xTaskRemoveFromEventList>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d013      	beq.n	800bbcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bba4:	4b3f      	ldr	r3, [pc, #252]	; (800bca4 <xQueueGenericSend+0x1f8>)
 800bba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	e00a      	b.n	800bbcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d007      	beq.n	800bbcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bbbc:	4b39      	ldr	r3, [pc, #228]	; (800bca4 <xQueueGenericSend+0x1f8>)
 800bbbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bbcc:	f002 fb02 	bl	800e1d4 <vPortExitCritical>
				return pdPASS;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e063      	b.n	800bc9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d103      	bne.n	800bbe2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbda:	f002 fafb 	bl	800e1d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e05c      	b.n	800bc9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d106      	bne.n	800bbf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbe8:	f107 0314 	add.w	r3, r7, #20
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 fafb 	bl	800d1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbf6:	f002 faed 	bl	800e1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbfa:	f001 f855 	bl	800cca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbfe:	f002 fab9 	bl	800e174 <vPortEnterCritical>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc0e:	d103      	bne.n	800bc18 <xQueueGenericSend+0x16c>
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc1e:	b25b      	sxtb	r3, r3
 800bc20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc24:	d103      	bne.n	800bc2e <xQueueGenericSend+0x182>
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc2e:	f002 fad1 	bl	800e1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc32:	1d3a      	adds	r2, r7, #4
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	4611      	mov	r1, r2
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f001 faea 	bl	800d214 <xTaskCheckForTimeOut>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d124      	bne.n	800bc90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc48:	f000 fd31 	bl	800c6ae <prvIsQueueFull>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d018      	beq.n	800bc84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	3310      	adds	r3, #16
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f001 fa10 	bl	800d080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc62:	f000 fcbc 	bl	800c5de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc66:	f001 f82d 	bl	800ccc4 <xTaskResumeAll>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f47f af7c 	bne.w	800bb6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bc72:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <xQueueGenericSend+0x1f8>)
 800bc74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	e772      	b.n	800bb6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc86:	f000 fcaa 	bl	800c5de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc8a:	f001 f81b 	bl	800ccc4 <xTaskResumeAll>
 800bc8e:	e76c      	b.n	800bb6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc92:	f000 fca4 	bl	800c5de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc96:	f001 f815 	bl	800ccc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3738      	adds	r7, #56	; 0x38
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	e000ed04 	.word	0xe000ed04

0800bca8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b090      	sub	sp, #64	; 0x40
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d103      	bne.n	800bce4 <xQueueGenericSendFromISR+0x3c>
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <xQueueGenericSendFromISR+0x40>
 800bce4:	2301      	movs	r3, #1
 800bce6:	e000      	b.n	800bcea <xQueueGenericSendFromISR+0x42>
 800bce8:	2300      	movs	r3, #0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd00:	bf00      	nop
 800bd02:	e7fe      	b.n	800bd02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d103      	bne.n	800bd12 <xQueueGenericSendFromISR+0x6a>
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <xQueueGenericSendFromISR+0x6e>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e000      	b.n	800bd18 <xQueueGenericSendFromISR+0x70>
 800bd16:	2300      	movs	r3, #0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	623b      	str	r3, [r7, #32]
}
 800bd2e:	bf00      	nop
 800bd30:	e7fe      	b.n	800bd30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd32:	f002 fb01 	bl	800e338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd36:	f3ef 8211 	mrs	r2, BASEPRI
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	61fa      	str	r2, [r7, #28]
 800bd4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d302      	bcc.n	800bd64 <xQueueGenericSendFromISR+0xbc>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d12f      	bne.n	800bdc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd7a:	f000 fba0 	bl	800c4be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bd82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd86:	d112      	bne.n	800bdae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d016      	beq.n	800bdbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	3324      	adds	r3, #36	; 0x24
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 f9c3 	bl	800d120 <xTaskRemoveFromEventList>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00e      	beq.n	800bdbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	e007      	b.n	800bdbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	b25a      	sxtb	r2, r3
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bdc2:	e001      	b.n	800bdc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bdd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3740      	adds	r7, #64	; 0x40
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b08e      	sub	sp, #56	; 0x38
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10a      	bne.n	800be08 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	623b      	str	r3, [r7, #32]
}
 800be04:	bf00      	nop
 800be06:	e7fe      	b.n	800be06 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <xQueueGiveFromISR+0x48>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	61fb      	str	r3, [r7, #28]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d103      	bne.n	800be36 <xQueueGiveFromISR+0x58>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <xQueueGiveFromISR+0x5c>
 800be36:	2301      	movs	r3, #1
 800be38:	e000      	b.n	800be3c <xQueueGiveFromISR+0x5e>
 800be3a:	2300      	movs	r3, #0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <xQueueGiveFromISR+0x78>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	61bb      	str	r3, [r7, #24]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be56:	f002 fa6f 	bl	800e338 <vPortValidateInterruptPriority>
	__asm volatile
 800be5a:	f3ef 8211 	mrs	r2, BASEPRI
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	617a      	str	r2, [r7, #20]
 800be70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800be72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be82:	429a      	cmp	r2, r3
 800be84:	d22b      	bcs.n	800bede <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bea0:	d112      	bne.n	800bec8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d016      	beq.n	800bed8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	3324      	adds	r3, #36	; 0x24
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 f936 	bl	800d120 <xTaskRemoveFromEventList>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00e      	beq.n	800bed8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2201      	movs	r2, #1
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	e007      	b.n	800bed8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800becc:	3301      	adds	r3, #1
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	b25a      	sxtb	r2, r3
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bed8:	2301      	movs	r3, #1
 800beda:	637b      	str	r3, [r7, #52]	; 0x34
 800bedc:	e001      	b.n	800bee2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	637b      	str	r3, [r7, #52]	; 0x34
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f383 8811 	msr	BASEPRI, r3
}
 800beec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3738      	adds	r7, #56	; 0x38
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08c      	sub	sp, #48	; 0x30
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf04:	2300      	movs	r3, #0
 800bf06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10a      	bne.n	800bf28 <xQueueReceive+0x30>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	623b      	str	r3, [r7, #32]
}
 800bf24:	bf00      	nop
 800bf26:	e7fe      	b.n	800bf26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d103      	bne.n	800bf36 <xQueueReceive+0x3e>
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <xQueueReceive+0x42>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <xQueueReceive+0x44>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10a      	bne.n	800bf56 <xQueueReceive+0x5e>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	61fb      	str	r3, [r7, #28]
}
 800bf52:	bf00      	nop
 800bf54:	e7fe      	b.n	800bf54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf56:	f001 fab5 	bl	800d4c4 <xTaskGetSchedulerState>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <xQueueReceive+0x6e>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d101      	bne.n	800bf6a <xQueueReceive+0x72>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e000      	b.n	800bf6c <xQueueReceive+0x74>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <xQueueReceive+0x8e>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	61bb      	str	r3, [r7, #24]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf86:	f002 f8f5 	bl	800e174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d01f      	beq.n	800bfd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf9a:	f000 fafa 	bl	800c592 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	1e5a      	subs	r2, r3, #1
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00f      	beq.n	800bfce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	3310      	adds	r3, #16
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f001 f8b4 	bl	800d120 <xTaskRemoveFromEventList>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d007      	beq.n	800bfce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfbe:	4b3d      	ldr	r3, [pc, #244]	; (800c0b4 <xQueueReceive+0x1bc>)
 800bfc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfce:	f002 f901 	bl	800e1d4 <vPortExitCritical>
				return pdPASS;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e069      	b.n	800c0aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d103      	bne.n	800bfe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfdc:	f002 f8fa 	bl	800e1d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e062      	b.n	800c0aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfea:	f107 0310 	add.w	r3, r7, #16
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 f8fa 	bl	800d1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bff4:	2301      	movs	r3, #1
 800bff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bff8:	f002 f8ec 	bl	800e1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bffc:	f000 fe54 	bl	800cca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c000:	f002 f8b8 	bl	800e174 <vPortEnterCritical>
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c00a:	b25b      	sxtb	r3, r3
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c010:	d103      	bne.n	800c01a <xQueueReceive+0x122>
 800c012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c014:	2200      	movs	r2, #0
 800c016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c020:	b25b      	sxtb	r3, r3
 800c022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c026:	d103      	bne.n	800c030 <xQueueReceive+0x138>
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c030:	f002 f8d0 	bl	800e1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c034:	1d3a      	adds	r2, r7, #4
 800c036:	f107 0310 	add.w	r3, r7, #16
 800c03a:	4611      	mov	r1, r2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f001 f8e9 	bl	800d214 <xTaskCheckForTimeOut>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d123      	bne.n	800c090 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c04a:	f000 fb1a 	bl	800c682 <prvIsQueueEmpty>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d017      	beq.n	800c084 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c056:	3324      	adds	r3, #36	; 0x24
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 f80f 	bl	800d080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c064:	f000 fabb 	bl	800c5de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c068:	f000 fe2c 	bl	800ccc4 <xTaskResumeAll>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d189      	bne.n	800bf86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c072:	4b10      	ldr	r3, [pc, #64]	; (800c0b4 <xQueueReceive+0x1bc>)
 800c074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c078:	601a      	str	r2, [r3, #0]
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	e780      	b.n	800bf86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c086:	f000 faaa 	bl	800c5de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c08a:	f000 fe1b 	bl	800ccc4 <xTaskResumeAll>
 800c08e:	e77a      	b.n	800bf86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c092:	f000 faa4 	bl	800c5de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c096:	f000 fe15 	bl	800ccc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c09c:	f000 faf1 	bl	800c682 <prvIsQueueEmpty>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f43f af6f 	beq.w	800bf86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3730      	adds	r7, #48	; 0x30
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b08e      	sub	sp, #56	; 0x38
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	623b      	str	r3, [r7, #32]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	61fb      	str	r3, [r7, #28]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c108:	f001 f9dc 	bl	800d4c4 <xTaskGetSchedulerState>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <xQueueSemaphoreTake+0x60>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <xQueueSemaphoreTake+0x64>
 800c118:	2301      	movs	r3, #1
 800c11a:	e000      	b.n	800c11e <xQueueSemaphoreTake+0x66>
 800c11c:	2300      	movs	r3, #0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	61bb      	str	r3, [r7, #24]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c138:	f002 f81c 	bl	800e174 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c140:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	2b00      	cmp	r3, #0
 800c146:	d024      	beq.n	800c192 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	1e5a      	subs	r2, r3, #1
 800c14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d104      	bne.n	800c162 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c158:	f001 fb2a 	bl	800d7b0 <pvTaskIncrementMutexHeldCount>
 800c15c:	4602      	mov	r2, r0
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00f      	beq.n	800c18a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	3310      	adds	r3, #16
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 ffd6 	bl	800d120 <xTaskRemoveFromEventList>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c17a:	4b54      	ldr	r3, [pc, #336]	; (800c2cc <xQueueSemaphoreTake+0x214>)
 800c17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c18a:	f002 f823 	bl	800e1d4 <vPortExitCritical>
				return pdPASS;
 800c18e:	2301      	movs	r3, #1
 800c190:	e097      	b.n	800c2c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d111      	bne.n	800c1bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00a      	beq.n	800c1b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	617b      	str	r3, [r7, #20]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c1b4:	f002 f80e 	bl	800e1d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e082      	b.n	800c2c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d106      	bne.n	800c1d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1c2:	f107 030c 	add.w	r3, r7, #12
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f001 f80e 	bl	800d1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1d0:	f002 f800 	bl	800e1d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1d4:	f000 fd68 	bl	800cca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1d8:	f001 ffcc 	bl	800e174 <vPortEnterCritical>
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1e2:	b25b      	sxtb	r3, r3
 800c1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1e8:	d103      	bne.n	800c1f2 <xQueueSemaphoreTake+0x13a>
 800c1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1f8:	b25b      	sxtb	r3, r3
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1fe:	d103      	bne.n	800c208 <xQueueSemaphoreTake+0x150>
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	2200      	movs	r2, #0
 800c204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c208:	f001 ffe4 	bl	800e1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c20c:	463a      	mov	r2, r7
 800c20e:	f107 030c 	add.w	r3, r7, #12
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f000 fffd 	bl	800d214 <xTaskCheckForTimeOut>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d132      	bne.n	800c286 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c222:	f000 fa2e 	bl	800c682 <prvIsQueueEmpty>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d026      	beq.n	800c27a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d109      	bne.n	800c248 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c234:	f001 ff9e 	bl	800e174 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f001 f95f 	bl	800d500 <xTaskPriorityInherit>
 800c242:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c244:	f001 ffc6 	bl	800e1d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	3324      	adds	r3, #36	; 0x24
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	4611      	mov	r1, r2
 800c250:	4618      	mov	r0, r3
 800c252:	f000 ff15 	bl	800d080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c258:	f000 f9c1 	bl	800c5de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c25c:	f000 fd32 	bl	800ccc4 <xTaskResumeAll>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	f47f af68 	bne.w	800c138 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c268:	4b18      	ldr	r3, [pc, #96]	; (800c2cc <xQueueSemaphoreTake+0x214>)
 800c26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	e75e      	b.n	800c138 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c27c:	f000 f9af 	bl	800c5de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c280:	f000 fd20 	bl	800ccc4 <xTaskResumeAll>
 800c284:	e758      	b.n	800c138 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c288:	f000 f9a9 	bl	800c5de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c28c:	f000 fd1a 	bl	800ccc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c292:	f000 f9f6 	bl	800c682 <prvIsQueueEmpty>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f43f af4d 	beq.w	800c138 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00d      	beq.n	800c2c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c2a4:	f001 ff66 	bl	800e174 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c2a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2aa:	f000 f8f0 	bl	800c48e <prvGetDisinheritPriorityAfterTimeout>
 800c2ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f001 f9f8 	bl	800d6ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c2bc:	f001 ff8a 	bl	800e1d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3738      	adds	r7, #56	; 0x38
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08e      	sub	sp, #56	; 0x38
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	623b      	str	r3, [r7, #32]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <xQueueReceiveFromISR+0x3a>
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <xQueueReceiveFromISR+0x3e>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <xQueueReceiveFromISR+0x40>
 800c30e:	2300      	movs	r3, #0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10a      	bne.n	800c32a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	61fb      	str	r3, [r7, #28]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c32a:	f002 f805 	bl	800e338 <vPortValidateInterruptPriority>
	__asm volatile
 800c32e:	f3ef 8211 	mrs	r2, BASEPRI
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	61ba      	str	r2, [r7, #24]
 800c344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	2b00      	cmp	r3, #0
 800c354:	d02f      	beq.n	800c3b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c364:	f000 f915 	bl	800c592 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	1e5a      	subs	r2, r3, #1
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c378:	d112      	bne.n	800c3a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d016      	beq.n	800c3b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	3310      	adds	r3, #16
 800c386:	4618      	mov	r0, r3
 800c388:	f000 feca 	bl	800d120 <xTaskRemoveFromEventList>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00e      	beq.n	800c3b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	e007      	b.n	800c3b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	b25a      	sxtb	r2, r3
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b4:	e001      	b.n	800c3ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f383 8811 	msr	BASEPRI, r3
}
 800c3c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3738      	adds	r7, #56	; 0x38
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10a      	bne.n	800c3f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60bb      	str	r3, [r7, #8]
}
 800c3f0:	bf00      	nop
 800c3f2:	e7fe      	b.n	800c3f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c3f4:	f001 febe 	bl	800e174 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c3fe:	f001 fee9 	bl	800e1d4 <vPortExitCritical>

	return uxReturn;
 800c402:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c40c:	b480      	push	{r7}
 800c40e:	b087      	sub	sp, #28
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10a      	bne.n	800c434 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	60fb      	str	r3, [r7, #12]
}
 800c430:	bf00      	nop
 800c432:	e7fe      	b.n	800c432 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c438:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c43a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c43c:	4618      	mov	r0, r3
 800c43e:	371c      	adds	r7, #28
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10a      	bne.n	800c470 <vQueueDelete+0x28>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	60bb      	str	r3, [r7, #8]
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 f95f 	bl	800c734 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f002 f865 	bl	800e550 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c486:	bf00      	nop
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c48e:	b480      	push	{r7}
 800c490:	b085      	sub	sp, #20
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d006      	beq.n	800c4ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e001      	b.n	800c4b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
	}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b086      	sub	sp, #24
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	60f8      	str	r0, [r7, #12]
 800c4c6:	60b9      	str	r1, [r7, #8]
 800c4c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10d      	bne.n	800c4f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d14d      	bne.n	800c580 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 f871 	bl	800d5d0 <xTaskPriorityDisinherit>
 800c4ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	609a      	str	r2, [r3, #8]
 800c4f6:	e043      	b.n	800c580 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d119      	bne.n	800c532 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6858      	ldr	r0, [r3, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c506:	461a      	mov	r2, r3
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	f00f fd80 	bl	801c00e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c516:	441a      	add	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	429a      	cmp	r2, r3
 800c526:	d32b      	bcc.n	800c580 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	605a      	str	r2, [r3, #4]
 800c530:	e026      	b.n	800c580 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	68d8      	ldr	r0, [r3, #12]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	461a      	mov	r2, r3
 800c53c:	68b9      	ldr	r1, [r7, #8]
 800c53e:	f00f fd66 	bl	801c00e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	425b      	negs	r3, r3
 800c54c:	441a      	add	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d207      	bcs.n	800c56e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	689a      	ldr	r2, [r3, #8]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c566:	425b      	negs	r3, r3
 800c568:	441a      	add	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b02      	cmp	r3, #2
 800c572:	d105      	bne.n	800c580 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c588:	697b      	ldr	r3, [r7, #20]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d018      	beq.n	800c5d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ac:	441a      	add	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d303      	bcc.n	800c5c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	68d9      	ldr	r1, [r3, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6838      	ldr	r0, [r7, #0]
 800c5d2:	f00f fd1c 	bl	801c00e <memcpy>
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c5e6:	f001 fdc5 	bl	800e174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5f2:	e011      	b.n	800c618 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d012      	beq.n	800c622 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	3324      	adds	r3, #36	; 0x24
 800c600:	4618      	mov	r0, r3
 800c602:	f000 fd8d 	bl	800d120 <xTaskRemoveFromEventList>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c60c:	f000 fe64 	bl	800d2d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	3b01      	subs	r3, #1
 800c614:	b2db      	uxtb	r3, r3
 800c616:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	dce9      	bgt.n	800c5f4 <prvUnlockQueue+0x16>
 800c620:	e000      	b.n	800c624 <prvUnlockQueue+0x46>
					break;
 800c622:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	22ff      	movs	r2, #255	; 0xff
 800c628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c62c:	f001 fdd2 	bl	800e1d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c630:	f001 fda0 	bl	800e174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c63a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c63c:	e011      	b.n	800c662 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d012      	beq.n	800c66c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3310      	adds	r3, #16
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fd68 	bl	800d120 <xTaskRemoveFromEventList>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c656:	f000 fe3f 	bl	800d2d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c666:	2b00      	cmp	r3, #0
 800c668:	dce9      	bgt.n	800c63e <prvUnlockQueue+0x60>
 800c66a:	e000      	b.n	800c66e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c66c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	22ff      	movs	r2, #255	; 0xff
 800c672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c676:	f001 fdad 	bl	800e1d4 <vPortExitCritical>
}
 800c67a:	bf00      	nop
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b084      	sub	sp, #16
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c68a:	f001 fd73 	bl	800e174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	2b00      	cmp	r3, #0
 800c694:	d102      	bne.n	800c69c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c696:	2301      	movs	r3, #1
 800c698:	60fb      	str	r3, [r7, #12]
 800c69a:	e001      	b.n	800c6a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c69c:	2300      	movs	r3, #0
 800c69e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6a0:	f001 fd98 	bl	800e1d4 <vPortExitCritical>

	return xReturn;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6b6:	f001 fd5d 	bl	800e174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d102      	bne.n	800c6cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	60fb      	str	r3, [r7, #12]
 800c6ca:	e001      	b.n	800c6d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6d0:	f001 fd80 	bl	800e1d4 <vPortExitCritical>

	return xReturn;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60fb      	str	r3, [r7, #12]
 800c6ee:	e014      	b.n	800c71a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c6f0:	4a0f      	ldr	r2, [pc, #60]	; (800c730 <vQueueAddToRegistry+0x50>)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10b      	bne.n	800c714 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c6fc:	490c      	ldr	r1, [pc, #48]	; (800c730 <vQueueAddToRegistry+0x50>)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c706:	4a0a      	ldr	r2, [pc, #40]	; (800c730 <vQueueAddToRegistry+0x50>)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	4413      	add	r3, r2
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c712:	e006      	b.n	800c722 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	3301      	adds	r3, #1
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b07      	cmp	r3, #7
 800c71e:	d9e7      	bls.n	800c6f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c720:	bf00      	nop
 800c722:	bf00      	nop
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	2000fa8c 	.word	0x2000fa8c

0800c734 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c73c:	2300      	movs	r3, #0
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e016      	b.n	800c770 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c742:	4a10      	ldr	r2, [pc, #64]	; (800c784 <vQueueUnregisterQueue+0x50>)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	4413      	add	r3, r2
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d10b      	bne.n	800c76a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c752:	4a0c      	ldr	r2, [pc, #48]	; (800c784 <vQueueUnregisterQueue+0x50>)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2100      	movs	r1, #0
 800c758:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c75c:	4a09      	ldr	r2, [pc, #36]	; (800c784 <vQueueUnregisterQueue+0x50>)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	4413      	add	r3, r2
 800c764:	2200      	movs	r2, #0
 800c766:	605a      	str	r2, [r3, #4]
				break;
 800c768:	e006      	b.n	800c778 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b07      	cmp	r3, #7
 800c774:	d9e5      	bls.n	800c742 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c776:	bf00      	nop
 800c778:	bf00      	nop
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	2000fa8c 	.word	0x2000fa8c

0800c788 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c798:	f001 fcec 	bl	800e174 <vPortEnterCritical>
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7a2:	b25b      	sxtb	r3, r3
 800c7a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7a8:	d103      	bne.n	800c7b2 <vQueueWaitForMessageRestricted+0x2a>
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7b8:	b25b      	sxtb	r3, r3
 800c7ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7be:	d103      	bne.n	800c7c8 <vQueueWaitForMessageRestricted+0x40>
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7c8:	f001 fd04 	bl	800e1d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	3324      	adds	r3, #36	; 0x24
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	68b9      	ldr	r1, [r7, #8]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 fc73 	bl	800d0c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c7e2:	6978      	ldr	r0, [r7, #20]
 800c7e4:	f7ff fefb 	bl	800c5de <prvUnlockQueue>
	}
 800c7e8:	bf00      	nop
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08e      	sub	sp, #56	; 0x38
 800c7f4:	af04      	add	r7, sp, #16
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10a      	bne.n	800c81a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	623b      	str	r3, [r7, #32]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <xTaskCreateStatic+0x46>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	61fb      	str	r3, [r7, #28]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c836:	23bc      	movs	r3, #188	; 0xbc
 800c838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	2bbc      	cmp	r3, #188	; 0xbc
 800c83e:	d00a      	beq.n	800c856 <xTaskCreateStatic+0x66>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	61bb      	str	r3, [r7, #24]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c856:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d01e      	beq.n	800c89c <xTaskCreateStatic+0xac>
 800c85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01b      	beq.n	800c89c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c86c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	2202      	movs	r2, #2
 800c872:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c876:	2300      	movs	r3, #0
 800c878:	9303      	str	r3, [sp, #12]
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	9302      	str	r3, [sp, #8]
 800c87e:	f107 0314 	add.w	r3, r7, #20
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f000 f850 	bl	800c934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c896:	f000 f8f3 	bl	800ca80 <prvAddNewTaskToReadyList>
 800c89a:	e001      	b.n	800c8a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8a0:	697b      	ldr	r3, [r7, #20]
	}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3728      	adds	r7, #40	; 0x28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b08c      	sub	sp, #48	; 0x30
 800c8ae:	af04      	add	r7, sp, #16
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	603b      	str	r3, [r7, #0]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8ba:	88fb      	ldrh	r3, [r7, #6]
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 fd7a 	bl	800e3b8 <pvPortMalloc>
 800c8c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00e      	beq.n	800c8ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8cc:	20bc      	movs	r0, #188	; 0xbc
 800c8ce:	f001 fd73 	bl	800e3b8 <pvPortMalloc>
 800c8d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d003      	beq.n	800c8e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	631a      	str	r2, [r3, #48]	; 0x30
 800c8e0:	e005      	b.n	800c8ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8e2:	6978      	ldr	r0, [r7, #20]
 800c8e4:	f001 fe34 	bl	800e550 <vPortFree>
 800c8e8:	e001      	b.n	800c8ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d017      	beq.n	800c924 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8fc:	88fa      	ldrh	r2, [r7, #6]
 800c8fe:	2300      	movs	r3, #0
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	9302      	str	r3, [sp, #8]
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	9301      	str	r3, [sp, #4]
 800c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	68b9      	ldr	r1, [r7, #8]
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f000 f80e 	bl	800c934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c918:	69f8      	ldr	r0, [r7, #28]
 800c91a:	f000 f8b1 	bl	800ca80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c91e:	2301      	movs	r3, #1
 800c920:	61bb      	str	r3, [r7, #24]
 800c922:	e002      	b.n	800c92a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c928:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c92a:	69bb      	ldr	r3, [r7, #24]
	}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	461a      	mov	r2, r3
 800c94c:	21a5      	movs	r1, #165	; 0xa5
 800c94e:	f00f fb86 	bl	801c05e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c95c:	3b01      	subs	r3, #1
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	f023 0307 	bic.w	r3, r3, #7
 800c96a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00a      	beq.n	800c98c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	617b      	str	r3, [r7, #20]
}
 800c988:	bf00      	nop
 800c98a:	e7fe      	b.n	800c98a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01f      	beq.n	800c9d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]
 800c996:	e012      	b.n	800c9be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	4413      	add	r3, r2
 800c99e:	7819      	ldrb	r1, [r3, #0]
 800c9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	3334      	adds	r3, #52	; 0x34
 800c9a8:	460a      	mov	r2, r1
 800c9aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d006      	beq.n	800c9c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	2b0f      	cmp	r3, #15
 800c9c2:	d9e9      	bls.n	800c998 <prvInitialiseNewTask+0x64>
 800c9c4:	e000      	b.n	800c9c8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c9c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9d0:	e003      	b.n	800c9da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	2b37      	cmp	r3, #55	; 0x37
 800c9de:	d901      	bls.n	800c9e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9e0:	2337      	movs	r3, #55	; 0x37
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fe fd64 	bl	800b4c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca02:	3318      	adds	r3, #24
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fe fd5f 	bl	800b4c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca32:	3354      	adds	r3, #84	; 0x54
 800ca34:	2260      	movs	r2, #96	; 0x60
 800ca36:	2100      	movs	r1, #0
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f00f fb10 	bl	801c05e <memset>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	4a0c      	ldr	r2, [pc, #48]	; (800ca74 <prvInitialiseNewTask+0x140>)
 800ca42:	659a      	str	r2, [r3, #88]	; 0x58
 800ca44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca46:	4a0c      	ldr	r2, [pc, #48]	; (800ca78 <prvInitialiseNewTask+0x144>)
 800ca48:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	4a0b      	ldr	r2, [pc, #44]	; (800ca7c <prvInitialiseNewTask+0x148>)
 800ca4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	68f9      	ldr	r1, [r7, #12]
 800ca54:	69b8      	ldr	r0, [r7, #24]
 800ca56:	f001 fa61 	bl	800df1c <pxPortInitialiseStack>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d002      	beq.n	800ca6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca6c:	bf00      	nop
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	0802466c 	.word	0x0802466c
 800ca78:	0802468c 	.word	0x0802468c
 800ca7c:	0802464c 	.word	0x0802464c

0800ca80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca88:	f001 fb74 	bl	800e174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca8c:	4b2d      	ldr	r3, [pc, #180]	; (800cb44 <prvAddNewTaskToReadyList+0xc4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3301      	adds	r3, #1
 800ca92:	4a2c      	ldr	r2, [pc, #176]	; (800cb44 <prvAddNewTaskToReadyList+0xc4>)
 800ca94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca96:	4b2c      	ldr	r3, [pc, #176]	; (800cb48 <prvAddNewTaskToReadyList+0xc8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d109      	bne.n	800cab2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca9e:	4a2a      	ldr	r2, [pc, #168]	; (800cb48 <prvAddNewTaskToReadyList+0xc8>)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800caa4:	4b27      	ldr	r3, [pc, #156]	; (800cb44 <prvAddNewTaskToReadyList+0xc4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d110      	bne.n	800cace <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800caac:	f000 fc38 	bl	800d320 <prvInitialiseTaskLists>
 800cab0:	e00d      	b.n	800cace <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cab2:	4b26      	ldr	r3, [pc, #152]	; (800cb4c <prvAddNewTaskToReadyList+0xcc>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d109      	bne.n	800cace <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800caba:	4b23      	ldr	r3, [pc, #140]	; (800cb48 <prvAddNewTaskToReadyList+0xc8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d802      	bhi.n	800cace <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cac8:	4a1f      	ldr	r2, [pc, #124]	; (800cb48 <prvAddNewTaskToReadyList+0xc8>)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cace:	4b20      	ldr	r3, [pc, #128]	; (800cb50 <prvAddNewTaskToReadyList+0xd0>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3301      	adds	r3, #1
 800cad4:	4a1e      	ldr	r2, [pc, #120]	; (800cb50 <prvAddNewTaskToReadyList+0xd0>)
 800cad6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cad8:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <prvAddNewTaskToReadyList+0xd0>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae4:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <prvAddNewTaskToReadyList+0xd4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d903      	bls.n	800caf4 <prvAddNewTaskToReadyList+0x74>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf0:	4a18      	ldr	r2, [pc, #96]	; (800cb54 <prvAddNewTaskToReadyList+0xd4>)
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4a15      	ldr	r2, [pc, #84]	; (800cb58 <prvAddNewTaskToReadyList+0xd8>)
 800cb02:	441a      	add	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fe fce9 	bl	800b4e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb10:	f001 fb60 	bl	800e1d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb14:	4b0d      	ldr	r3, [pc, #52]	; (800cb4c <prvAddNewTaskToReadyList+0xcc>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00e      	beq.n	800cb3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <prvAddNewTaskToReadyList+0xc8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d207      	bcs.n	800cb3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb2a:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <prvAddNewTaskToReadyList+0xdc>)
 800cb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb3a:	bf00      	nop
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	200021c4 	.word	0x200021c4
 800cb48:	20001cf0 	.word	0x20001cf0
 800cb4c:	200021d0 	.word	0x200021d0
 800cb50:	200021e0 	.word	0x200021e0
 800cb54:	200021cc 	.word	0x200021cc
 800cb58:	20001cf4 	.word	0x20001cf4
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d017      	beq.n	800cba2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb72:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <vTaskDelay+0x60>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00a      	beq.n	800cb90 <vTaskDelay+0x30>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	60bb      	str	r3, [r7, #8]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb90:	f000 f88a 	bl	800cca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb94:	2100      	movs	r1, #0
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fe1e 	bl	800d7d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb9c:	f000 f892 	bl	800ccc4 <xTaskResumeAll>
 800cba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d107      	bne.n	800cbb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cba8:	4b06      	ldr	r3, [pc, #24]	; (800cbc4 <vTaskDelay+0x64>)
 800cbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbae:	601a      	str	r2, [r3, #0]
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbb8:	bf00      	nop
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	200021ec 	.word	0x200021ec
 800cbc4:	e000ed04 	.word	0xe000ed04

0800cbc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	; 0x28
 800cbcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbd6:	463a      	mov	r2, r7
 800cbd8:	1d39      	adds	r1, r7, #4
 800cbda:	f107 0308 	add.w	r3, r7, #8
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe fc1e 	bl	800b420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbe4:	6839      	ldr	r1, [r7, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	9202      	str	r2, [sp, #8]
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	2300      	movs	r3, #0
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	460a      	mov	r2, r1
 800cbf6:	4924      	ldr	r1, [pc, #144]	; (800cc88 <vTaskStartScheduler+0xc0>)
 800cbf8:	4824      	ldr	r0, [pc, #144]	; (800cc8c <vTaskStartScheduler+0xc4>)
 800cbfa:	f7ff fdf9 	bl	800c7f0 <xTaskCreateStatic>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	4a23      	ldr	r2, [pc, #140]	; (800cc90 <vTaskStartScheduler+0xc8>)
 800cc02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc04:	4b22      	ldr	r3, [pc, #136]	; (800cc90 <vTaskStartScheduler+0xc8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	617b      	str	r3, [r7, #20]
 800cc10:	e001      	b.n	800cc16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d102      	bne.n	800cc22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc1c:	f000 fe30 	bl	800d880 <xTimerCreateTimerTask>
 800cc20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d11b      	bne.n	800cc60 <vTaskStartScheduler+0x98>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	613b      	str	r3, [r7, #16]
}
 800cc3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc3c:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <vTaskStartScheduler+0xcc>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3354      	adds	r3, #84	; 0x54
 800cc42:	4a15      	ldr	r2, [pc, #84]	; (800cc98 <vTaskStartScheduler+0xd0>)
 800cc44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc46:	4b15      	ldr	r3, [pc, #84]	; (800cc9c <vTaskStartScheduler+0xd4>)
 800cc48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc4e:	4b14      	ldr	r3, [pc, #80]	; (800cca0 <vTaskStartScheduler+0xd8>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc54:	4b13      	ldr	r3, [pc, #76]	; (800cca4 <vTaskStartScheduler+0xdc>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc5a:	f001 f9e9 	bl	800e030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc5e:	e00e      	b.n	800cc7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc66:	d10a      	bne.n	800cc7e <vTaskStartScheduler+0xb6>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	60fb      	str	r3, [r7, #12]
}
 800cc7a:	bf00      	nop
 800cc7c:	e7fe      	b.n	800cc7c <vTaskStartScheduler+0xb4>
}
 800cc7e:	bf00      	nop
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0801df54 	.word	0x0801df54
 800cc8c:	0800d2f1 	.word	0x0800d2f1
 800cc90:	200021e8 	.word	0x200021e8
 800cc94:	20001cf0 	.word	0x20001cf0
 800cc98:	200004a8 	.word	0x200004a8
 800cc9c:	200021e4 	.word	0x200021e4
 800cca0:	200021d0 	.word	0x200021d0
 800cca4:	200021c8 	.word	0x200021c8

0800cca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ccac:	4b04      	ldr	r3, [pc, #16]	; (800ccc0 <vTaskSuspendAll+0x18>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	4a03      	ldr	r2, [pc, #12]	; (800ccc0 <vTaskSuspendAll+0x18>)
 800ccb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccb6:	bf00      	nop
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	200021ec 	.word	0x200021ec

0800ccc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccd2:	4b42      	ldr	r3, [pc, #264]	; (800cddc <xTaskResumeAll+0x118>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10a      	bne.n	800ccf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	603b      	str	r3, [r7, #0]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ccf0:	f001 fa40 	bl	800e174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ccf4:	4b39      	ldr	r3, [pc, #228]	; (800cddc <xTaskResumeAll+0x118>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	4a38      	ldr	r2, [pc, #224]	; (800cddc <xTaskResumeAll+0x118>)
 800ccfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccfe:	4b37      	ldr	r3, [pc, #220]	; (800cddc <xTaskResumeAll+0x118>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d162      	bne.n	800cdcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd06:	4b36      	ldr	r3, [pc, #216]	; (800cde0 <xTaskResumeAll+0x11c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d05e      	beq.n	800cdcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd0e:	e02f      	b.n	800cd70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd10:	4b34      	ldr	r3, [pc, #208]	; (800cde4 <xTaskResumeAll+0x120>)
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	3318      	adds	r3, #24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fe fc3d 	bl	800b59c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	3304      	adds	r3, #4
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe fc38 	bl	800b59c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd30:	4b2d      	ldr	r3, [pc, #180]	; (800cde8 <xTaskResumeAll+0x124>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d903      	bls.n	800cd40 <xTaskResumeAll+0x7c>
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	4a2a      	ldr	r2, [pc, #168]	; (800cde8 <xTaskResumeAll+0x124>)
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4a27      	ldr	r2, [pc, #156]	; (800cdec <xTaskResumeAll+0x128>)
 800cd4e:	441a      	add	r2, r3
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	3304      	adds	r3, #4
 800cd54:	4619      	mov	r1, r3
 800cd56:	4610      	mov	r0, r2
 800cd58:	f7fe fbc3 	bl	800b4e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd60:	4b23      	ldr	r3, [pc, #140]	; (800cdf0 <xTaskResumeAll+0x12c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d302      	bcc.n	800cd70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cd6a:	4b22      	ldr	r3, [pc, #136]	; (800cdf4 <xTaskResumeAll+0x130>)
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd70:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <xTaskResumeAll+0x120>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1cb      	bne.n	800cd10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd7e:	f000 fb71 	bl	800d464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd82:	4b1d      	ldr	r3, [pc, #116]	; (800cdf8 <xTaskResumeAll+0x134>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d010      	beq.n	800cdb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd8e:	f000 f859 	bl	800ce44 <xTaskIncrementTick>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cd98:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <xTaskResumeAll+0x130>)
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3b01      	subs	r3, #1
 800cda2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1f1      	bne.n	800cd8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cdaa:	4b13      	ldr	r3, [pc, #76]	; (800cdf8 <xTaskResumeAll+0x134>)
 800cdac:	2200      	movs	r2, #0
 800cdae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdb0:	4b10      	ldr	r3, [pc, #64]	; (800cdf4 <xTaskResumeAll+0x130>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d009      	beq.n	800cdcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cdbc:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <xTaskResumeAll+0x138>)
 800cdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdcc:	f001 fa02 	bl	800e1d4 <vPortExitCritical>

	return xAlreadyYielded;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	200021ec 	.word	0x200021ec
 800cde0:	200021c4 	.word	0x200021c4
 800cde4:	20002184 	.word	0x20002184
 800cde8:	200021cc 	.word	0x200021cc
 800cdec:	20001cf4 	.word	0x20001cf4
 800cdf0:	20001cf0 	.word	0x20001cf0
 800cdf4:	200021d8 	.word	0x200021d8
 800cdf8:	200021d4 	.word	0x200021d4
 800cdfc:	e000ed04 	.word	0xe000ed04

0800ce00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce06:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <xTaskGetTickCount+0x1c>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce0c:	687b      	ldr	r3, [r7, #4]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	200021c8 	.word	0x200021c8

0800ce20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce26:	f001 fa87 	bl	800e338 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ce2e:	4b04      	ldr	r3, [pc, #16]	; (800ce40 <xTaskGetTickCountFromISR+0x20>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce34:	683b      	ldr	r3, [r7, #0]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	200021c8 	.word	0x200021c8

0800ce44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4e:	4b4f      	ldr	r3, [pc, #316]	; (800cf8c <xTaskIncrementTick+0x148>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f040 808f 	bne.w	800cf76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce58:	4b4d      	ldr	r3, [pc, #308]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce60:	4a4b      	ldr	r2, [pc, #300]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d120      	bne.n	800ceae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce6c:	4b49      	ldr	r3, [pc, #292]	; (800cf94 <xTaskIncrementTick+0x150>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <xTaskIncrementTick+0x48>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	603b      	str	r3, [r7, #0]
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <xTaskIncrementTick+0x46>
 800ce8c:	4b41      	ldr	r3, [pc, #260]	; (800cf94 <xTaskIncrementTick+0x150>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60fb      	str	r3, [r7, #12]
 800ce92:	4b41      	ldr	r3, [pc, #260]	; (800cf98 <xTaskIncrementTick+0x154>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a3f      	ldr	r2, [pc, #252]	; (800cf94 <xTaskIncrementTick+0x150>)
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	4a3f      	ldr	r2, [pc, #252]	; (800cf98 <xTaskIncrementTick+0x154>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	4b3e      	ldr	r3, [pc, #248]	; (800cf9c <xTaskIncrementTick+0x158>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3301      	adds	r3, #1
 800cea6:	4a3d      	ldr	r2, [pc, #244]	; (800cf9c <xTaskIncrementTick+0x158>)
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	f000 fadb 	bl	800d464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceae:	4b3c      	ldr	r3, [pc, #240]	; (800cfa0 <xTaskIncrementTick+0x15c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d349      	bcc.n	800cf4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceb8:	4b36      	ldr	r3, [pc, #216]	; (800cf94 <xTaskIncrementTick+0x150>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d104      	bne.n	800cecc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec2:	4b37      	ldr	r3, [pc, #220]	; (800cfa0 <xTaskIncrementTick+0x15c>)
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cec8:	601a      	str	r2, [r3, #0]
					break;
 800ceca:	e03f      	b.n	800cf4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cecc:	4b31      	ldr	r3, [pc, #196]	; (800cf94 <xTaskIncrementTick+0x150>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d203      	bcs.n	800ceec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cee4:	4a2e      	ldr	r2, [pc, #184]	; (800cfa0 <xTaskIncrementTick+0x15c>)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ceea:	e02f      	b.n	800cf4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fe fb53 	bl	800b59c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	3318      	adds	r3, #24
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fb4a 	bl	800b59c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0c:	4b25      	ldr	r3, [pc, #148]	; (800cfa4 <xTaskIncrementTick+0x160>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d903      	bls.n	800cf1c <xTaskIncrementTick+0xd8>
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	4a22      	ldr	r2, [pc, #136]	; (800cfa4 <xTaskIncrementTick+0x160>)
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf20:	4613      	mov	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4a1f      	ldr	r2, [pc, #124]	; (800cfa8 <xTaskIncrementTick+0x164>)
 800cf2a:	441a      	add	r2, r3
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	4619      	mov	r1, r3
 800cf32:	4610      	mov	r0, r2
 800cf34:	f7fe fad5 	bl	800b4e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3c:	4b1b      	ldr	r3, [pc, #108]	; (800cfac <xTaskIncrementTick+0x168>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d3b8      	bcc.n	800ceb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf46:	2301      	movs	r3, #1
 800cf48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf4a:	e7b5      	b.n	800ceb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf4c:	4b17      	ldr	r3, [pc, #92]	; (800cfac <xTaskIncrementTick+0x168>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf52:	4915      	ldr	r1, [pc, #84]	; (800cfa8 <xTaskIncrementTick+0x164>)
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d901      	bls.n	800cf68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cf64:	2301      	movs	r3, #1
 800cf66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <xTaskIncrementTick+0x16c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d007      	beq.n	800cf80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cf70:	2301      	movs	r3, #1
 800cf72:	617b      	str	r3, [r7, #20]
 800cf74:	e004      	b.n	800cf80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf76:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <xTaskIncrementTick+0x170>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	4a0d      	ldr	r2, [pc, #52]	; (800cfb4 <xTaskIncrementTick+0x170>)
 800cf7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf80:	697b      	ldr	r3, [r7, #20]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	200021ec 	.word	0x200021ec
 800cf90:	200021c8 	.word	0x200021c8
 800cf94:	2000217c 	.word	0x2000217c
 800cf98:	20002180 	.word	0x20002180
 800cf9c:	200021dc 	.word	0x200021dc
 800cfa0:	200021e4 	.word	0x200021e4
 800cfa4:	200021cc 	.word	0x200021cc
 800cfa8:	20001cf4 	.word	0x20001cf4
 800cfac:	20001cf0 	.word	0x20001cf0
 800cfb0:	200021d8 	.word	0x200021d8
 800cfb4:	200021d4 	.word	0x200021d4

0800cfb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfbe:	4b2a      	ldr	r3, [pc, #168]	; (800d068 <vTaskSwitchContext+0xb0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfc6:	4b29      	ldr	r3, [pc, #164]	; (800d06c <vTaskSwitchContext+0xb4>)
 800cfc8:	2201      	movs	r2, #1
 800cfca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfcc:	e046      	b.n	800d05c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cfce:	4b27      	ldr	r3, [pc, #156]	; (800d06c <vTaskSwitchContext+0xb4>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd4:	4b26      	ldr	r3, [pc, #152]	; (800d070 <vTaskSwitchContext+0xb8>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e010      	b.n	800cffe <vTaskSwitchContext+0x46>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10a      	bne.n	800cff8 <vTaskSwitchContext+0x40>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	607b      	str	r3, [r7, #4]
}
 800cff4:	bf00      	nop
 800cff6:	e7fe      	b.n	800cff6 <vTaskSwitchContext+0x3e>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	491d      	ldr	r1, [pc, #116]	; (800d074 <vTaskSwitchContext+0xbc>)
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	4613      	mov	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	440b      	add	r3, r1
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0e4      	beq.n	800cfdc <vTaskSwitchContext+0x24>
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	4613      	mov	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4a15      	ldr	r2, [pc, #84]	; (800d074 <vTaskSwitchContext+0xbc>)
 800d01e:	4413      	add	r3, r2
 800d020:	60bb      	str	r3, [r7, #8]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	605a      	str	r2, [r3, #4]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	685a      	ldr	r2, [r3, #4]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	3308      	adds	r3, #8
 800d034:	429a      	cmp	r2, r3
 800d036:	d104      	bne.n	800d042 <vTaskSwitchContext+0x8a>
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	605a      	str	r2, [r3, #4]
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	4a0b      	ldr	r2, [pc, #44]	; (800d078 <vTaskSwitchContext+0xc0>)
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	4a08      	ldr	r2, [pc, #32]	; (800d070 <vTaskSwitchContext+0xb8>)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d052:	4b09      	ldr	r3, [pc, #36]	; (800d078 <vTaskSwitchContext+0xc0>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3354      	adds	r3, #84	; 0x54
 800d058:	4a08      	ldr	r2, [pc, #32]	; (800d07c <vTaskSwitchContext+0xc4>)
 800d05a:	6013      	str	r3, [r2, #0]
}
 800d05c:	bf00      	nop
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	200021ec 	.word	0x200021ec
 800d06c:	200021d8 	.word	0x200021d8
 800d070:	200021cc 	.word	0x200021cc
 800d074:	20001cf4 	.word	0x20001cf4
 800d078:	20001cf0 	.word	0x20001cf0
 800d07c:	200004a8 	.word	0x200004a8

0800d080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	60fb      	str	r3, [r7, #12]
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0a6:	4b07      	ldr	r3, [pc, #28]	; (800d0c4 <vTaskPlaceOnEventList+0x44>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3318      	adds	r3, #24
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7fe fa3b 	bl	800b52a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	6838      	ldr	r0, [r7, #0]
 800d0b8:	f000 fb8e 	bl	800d7d8 <prvAddCurrentTaskToDelayedList>
}
 800d0bc:	bf00      	nop
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	20001cf0 	.word	0x20001cf0

0800d0c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10a      	bne.n	800d0f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	617b      	str	r3, [r7, #20]
}
 800d0ec:	bf00      	nop
 800d0ee:	e7fe      	b.n	800d0ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <vTaskPlaceOnEventListRestricted+0x54>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f7fe f9f2 	bl	800b4e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d108:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	68b8      	ldr	r0, [r7, #8]
 800d10e:	f000 fb63 	bl	800d7d8 <prvAddCurrentTaskToDelayedList>
	}
 800d112:	bf00      	nop
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	20001cf0 	.word	0x20001cf0

0800d120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10a      	bne.n	800d14c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60fb      	str	r3, [r7, #12]
}
 800d148:	bf00      	nop
 800d14a:	e7fe      	b.n	800d14a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	3318      	adds	r3, #24
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fa23 	bl	800b59c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d156:	4b1e      	ldr	r3, [pc, #120]	; (800d1d0 <xTaskRemoveFromEventList+0xb0>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d11d      	bne.n	800d19a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	3304      	adds	r3, #4
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fa1a 	bl	800b59c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d16c:	4b19      	ldr	r3, [pc, #100]	; (800d1d4 <xTaskRemoveFromEventList+0xb4>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d903      	bls.n	800d17c <xTaskRemoveFromEventList+0x5c>
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	4a16      	ldr	r2, [pc, #88]	; (800d1d4 <xTaskRemoveFromEventList+0xb4>)
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4a13      	ldr	r2, [pc, #76]	; (800d1d8 <xTaskRemoveFromEventList+0xb8>)
 800d18a:	441a      	add	r2, r3
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	3304      	adds	r3, #4
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7fe f9a5 	bl	800b4e2 <vListInsertEnd>
 800d198:	e005      	b.n	800d1a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	3318      	adds	r3, #24
 800d19e:	4619      	mov	r1, r3
 800d1a0:	480e      	ldr	r0, [pc, #56]	; (800d1dc <xTaskRemoveFromEventList+0xbc>)
 800d1a2:	f7fe f99e 	bl	800b4e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1aa:	4b0d      	ldr	r3, [pc, #52]	; (800d1e0 <xTaskRemoveFromEventList+0xc0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d905      	bls.n	800d1c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <xTaskRemoveFromEventList+0xc4>)
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	e001      	b.n	800d1c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1c4:	697b      	ldr	r3, [r7, #20]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	200021ec 	.word	0x200021ec
 800d1d4:	200021cc 	.word	0x200021cc
 800d1d8:	20001cf4 	.word	0x20001cf4
 800d1dc:	20002184 	.word	0x20002184
 800d1e0:	20001cf0 	.word	0x20001cf0
 800d1e4:	200021d8 	.word	0x200021d8

0800d1e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1f0:	4b06      	ldr	r3, [pc, #24]	; (800d20c <vTaskInternalSetTimeOutState+0x24>)
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1f8:	4b05      	ldr	r3, [pc, #20]	; (800d210 <vTaskInternalSetTimeOutState+0x28>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	605a      	str	r2, [r3, #4]
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	200021dc 	.word	0x200021dc
 800d210:	200021c8 	.word	0x200021c8

0800d214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10a      	bne.n	800d23a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d228:	f383 8811 	msr	BASEPRI, r3
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	613b      	str	r3, [r7, #16]
}
 800d236:	bf00      	nop
 800d238:	e7fe      	b.n	800d238 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	60fb      	str	r3, [r7, #12]
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d256:	f000 ff8d 	bl	800e174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d25a:	4b1d      	ldr	r3, [pc, #116]	; (800d2d0 <xTaskCheckForTimeOut+0xbc>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d272:	d102      	bne.n	800d27a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d274:	2300      	movs	r3, #0
 800d276:	61fb      	str	r3, [r7, #28]
 800d278:	e023      	b.n	800d2c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	4b15      	ldr	r3, [pc, #84]	; (800d2d4 <xTaskCheckForTimeOut+0xc0>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	d007      	beq.n	800d296 <xTaskCheckForTimeOut+0x82>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	69ba      	ldr	r2, [r7, #24]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d302      	bcc.n	800d296 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d290:	2301      	movs	r3, #1
 800d292:	61fb      	str	r3, [r7, #28]
 800d294:	e015      	b.n	800d2c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d20b      	bcs.n	800d2b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	1ad2      	subs	r2, r2, r3
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff ff9b 	bl	800d1e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	61fb      	str	r3, [r7, #28]
 800d2b6:	e004      	b.n	800d2c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2c2:	f000 ff87 	bl	800e1d4 <vPortExitCritical>

	return xReturn;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	200021c8 	.word	0x200021c8
 800d2d4:	200021dc 	.word	0x200021dc

0800d2d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2d8:	b480      	push	{r7}
 800d2da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2dc:	4b03      	ldr	r3, [pc, #12]	; (800d2ec <vTaskMissedYield+0x14>)
 800d2de:	2201      	movs	r2, #1
 800d2e0:	601a      	str	r2, [r3, #0]
}
 800d2e2:	bf00      	nop
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	200021d8 	.word	0x200021d8

0800d2f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2f8:	f000 f852 	bl	800d3a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2fc:	4b06      	ldr	r3, [pc, #24]	; (800d318 <prvIdleTask+0x28>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d9f9      	bls.n	800d2f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d304:	4b05      	ldr	r3, [pc, #20]	; (800d31c <prvIdleTask+0x2c>)
 800d306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d314:	e7f0      	b.n	800d2f8 <prvIdleTask+0x8>
 800d316:	bf00      	nop
 800d318:	20001cf4 	.word	0x20001cf4
 800d31c:	e000ed04 	.word	0xe000ed04

0800d320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d326:	2300      	movs	r3, #0
 800d328:	607b      	str	r3, [r7, #4]
 800d32a:	e00c      	b.n	800d346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4a12      	ldr	r2, [pc, #72]	; (800d380 <prvInitialiseTaskLists+0x60>)
 800d338:	4413      	add	r3, r2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe f8a4 	bl	800b488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	3301      	adds	r3, #1
 800d344:	607b      	str	r3, [r7, #4]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b37      	cmp	r3, #55	; 0x37
 800d34a:	d9ef      	bls.n	800d32c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d34c:	480d      	ldr	r0, [pc, #52]	; (800d384 <prvInitialiseTaskLists+0x64>)
 800d34e:	f7fe f89b 	bl	800b488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d352:	480d      	ldr	r0, [pc, #52]	; (800d388 <prvInitialiseTaskLists+0x68>)
 800d354:	f7fe f898 	bl	800b488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d358:	480c      	ldr	r0, [pc, #48]	; (800d38c <prvInitialiseTaskLists+0x6c>)
 800d35a:	f7fe f895 	bl	800b488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d35e:	480c      	ldr	r0, [pc, #48]	; (800d390 <prvInitialiseTaskLists+0x70>)
 800d360:	f7fe f892 	bl	800b488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d364:	480b      	ldr	r0, [pc, #44]	; (800d394 <prvInitialiseTaskLists+0x74>)
 800d366:	f7fe f88f 	bl	800b488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d36a:	4b0b      	ldr	r3, [pc, #44]	; (800d398 <prvInitialiseTaskLists+0x78>)
 800d36c:	4a05      	ldr	r2, [pc, #20]	; (800d384 <prvInitialiseTaskLists+0x64>)
 800d36e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d370:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <prvInitialiseTaskLists+0x7c>)
 800d372:	4a05      	ldr	r2, [pc, #20]	; (800d388 <prvInitialiseTaskLists+0x68>)
 800d374:	601a      	str	r2, [r3, #0]
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20001cf4 	.word	0x20001cf4
 800d384:	20002154 	.word	0x20002154
 800d388:	20002168 	.word	0x20002168
 800d38c:	20002184 	.word	0x20002184
 800d390:	20002198 	.word	0x20002198
 800d394:	200021b0 	.word	0x200021b0
 800d398:	2000217c 	.word	0x2000217c
 800d39c:	20002180 	.word	0x20002180

0800d3a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3a6:	e019      	b.n	800d3dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3a8:	f000 fee4 	bl	800e174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ac:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <prvCheckTasksWaitingTermination+0x50>)
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe f8ef 	bl	800b59c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3be:	4b0d      	ldr	r3, [pc, #52]	; (800d3f4 <prvCheckTasksWaitingTermination+0x54>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	4a0b      	ldr	r2, [pc, #44]	; (800d3f4 <prvCheckTasksWaitingTermination+0x54>)
 800d3c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3c8:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <prvCheckTasksWaitingTermination+0x58>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	4a0a      	ldr	r2, [pc, #40]	; (800d3f8 <prvCheckTasksWaitingTermination+0x58>)
 800d3d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3d2:	f000 feff 	bl	800e1d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f810 	bl	800d3fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3dc:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <prvCheckTasksWaitingTermination+0x58>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1e1      	bne.n	800d3a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20002198 	.word	0x20002198
 800d3f4:	200021c4 	.word	0x200021c4
 800d3f8:	200021ac 	.word	0x200021ac

0800d3fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3354      	adds	r3, #84	; 0x54
 800d408:	4618      	mov	r0, r3
 800d40a:	f00e ff67 	bl	801c2dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d414:	2b00      	cmp	r3, #0
 800d416:	d108      	bne.n	800d42a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41c:	4618      	mov	r0, r3
 800d41e:	f001 f897 	bl	800e550 <vPortFree>
				vPortFree( pxTCB );
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f001 f894 	bl	800e550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d428:	e018      	b.n	800d45c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d430:	2b01      	cmp	r3, #1
 800d432:	d103      	bne.n	800d43c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f001 f88b 	bl	800e550 <vPortFree>
	}
 800d43a:	e00f      	b.n	800d45c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d442:	2b02      	cmp	r3, #2
 800d444:	d00a      	beq.n	800d45c <prvDeleteTCB+0x60>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60fb      	str	r3, [r7, #12]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <prvDeleteTCB+0x5e>
	}
 800d45c:	bf00      	nop
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d46a:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <prvResetNextTaskUnblockTime+0x38>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d104      	bne.n	800d47e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d474:	4b0a      	ldr	r3, [pc, #40]	; (800d4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d47a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d47c:	e008      	b.n	800d490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d47e:	4b07      	ldr	r3, [pc, #28]	; (800d49c <prvResetNextTaskUnblockTime+0x38>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	4a04      	ldr	r2, [pc, #16]	; (800d4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d48e:	6013      	str	r3, [r2, #0]
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	2000217c 	.word	0x2000217c
 800d4a0:	200021e4 	.word	0x200021e4

0800d4a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d4aa:	4b05      	ldr	r3, [pc, #20]	; (800d4c0 <xTaskGetCurrentTaskHandle+0x1c>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d4b0:	687b      	ldr	r3, [r7, #4]
	}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	20001cf0 	.word	0x20001cf0

0800d4c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4ca:	4b0b      	ldr	r3, [pc, #44]	; (800d4f8 <xTaskGetSchedulerState+0x34>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	607b      	str	r3, [r7, #4]
 800d4d6:	e008      	b.n	800d4ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d8:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <xTaskGetSchedulerState+0x38>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	607b      	str	r3, [r7, #4]
 800d4e4:	e001      	b.n	800d4ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4ea:	687b      	ldr	r3, [r7, #4]
	}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	200021d0 	.word	0x200021d0
 800d4fc:	200021ec 	.word	0x200021ec

0800d500 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d50c:	2300      	movs	r3, #0
 800d50e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d051      	beq.n	800d5ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d51a:	4b2a      	ldr	r3, [pc, #168]	; (800d5c4 <xTaskPriorityInherit+0xc4>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	429a      	cmp	r2, r3
 800d522:	d241      	bcs.n	800d5a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	db06      	blt.n	800d53a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52c:	4b25      	ldr	r3, [pc, #148]	; (800d5c4 <xTaskPriorityInherit+0xc4>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	6959      	ldr	r1, [r3, #20]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	4613      	mov	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4a1f      	ldr	r2, [pc, #124]	; (800d5c8 <xTaskPriorityInherit+0xc8>)
 800d54c:	4413      	add	r3, r2
 800d54e:	4299      	cmp	r1, r3
 800d550:	d122      	bne.n	800d598 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	3304      	adds	r3, #4
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe f820 	bl	800b59c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d55c:	4b19      	ldr	r3, [pc, #100]	; (800d5c4 <xTaskPriorityInherit+0xc4>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56a:	4b18      	ldr	r3, [pc, #96]	; (800d5cc <xTaskPriorityInherit+0xcc>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d903      	bls.n	800d57a <xTaskPriorityInherit+0x7a>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d576:	4a15      	ldr	r2, [pc, #84]	; (800d5cc <xTaskPriorityInherit+0xcc>)
 800d578:	6013      	str	r3, [r2, #0]
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57e:	4613      	mov	r3, r2
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	4413      	add	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	4a10      	ldr	r2, [pc, #64]	; (800d5c8 <xTaskPriorityInherit+0xc8>)
 800d588:	441a      	add	r2, r3
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	3304      	adds	r3, #4
 800d58e:	4619      	mov	r1, r3
 800d590:	4610      	mov	r0, r2
 800d592:	f7fd ffa6 	bl	800b4e2 <vListInsertEnd>
 800d596:	e004      	b.n	800d5a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d598:	4b0a      	ldr	r3, [pc, #40]	; (800d5c4 <xTaskPriorityInherit+0xc4>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	60fb      	str	r3, [r7, #12]
 800d5a6:	e008      	b.n	800d5ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5ac:	4b05      	ldr	r3, [pc, #20]	; (800d5c4 <xTaskPriorityInherit+0xc4>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d201      	bcs.n	800d5ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
	}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20001cf0 	.word	0x20001cf0
 800d5c8:	20001cf4 	.word	0x20001cf4
 800d5cc:	200021cc 	.word	0x200021cc

0800d5d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d056      	beq.n	800d694 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d5e6:	4b2e      	ldr	r3, [pc, #184]	; (800d6a0 <xTaskPriorityDisinherit+0xd0>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	693a      	ldr	r2, [r7, #16]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d00a      	beq.n	800d606 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	60fb      	str	r3, [r7, #12]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10a      	bne.n	800d624 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60bb      	str	r3, [r7, #8]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d636:	429a      	cmp	r2, r3
 800d638:	d02c      	beq.n	800d694 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d128      	bne.n	800d694 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	3304      	adds	r3, #4
 800d646:	4618      	mov	r0, r3
 800d648:	f7fd ffa8 	bl	800b59c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d664:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <xTaskPriorityDisinherit+0xd4>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d903      	bls.n	800d674 <xTaskPriorityDisinherit+0xa4>
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d670:	4a0c      	ldr	r2, [pc, #48]	; (800d6a4 <xTaskPriorityDisinherit+0xd4>)
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4a09      	ldr	r2, [pc, #36]	; (800d6a8 <xTaskPriorityDisinherit+0xd8>)
 800d682:	441a      	add	r2, r3
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	3304      	adds	r3, #4
 800d688:	4619      	mov	r1, r3
 800d68a:	4610      	mov	r0, r2
 800d68c:	f7fd ff29 	bl	800b4e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d690:	2301      	movs	r3, #1
 800d692:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d694:	697b      	ldr	r3, [r7, #20]
	}
 800d696:	4618      	mov	r0, r3
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	20001cf0 	.word	0x20001cf0
 800d6a4:	200021cc 	.word	0x200021cc
 800d6a8:	20001cf4 	.word	0x20001cf4

0800d6ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d06a      	beq.n	800d79a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	60fb      	str	r3, [r7, #12]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d902      	bls.n	800d6f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	61fb      	str	r3, [r7, #28]
 800d6f0:	e002      	b.n	800d6f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	69fa      	ldr	r2, [r7, #28]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d04b      	beq.n	800d79a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d146      	bne.n	800d79a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d70c:	4b25      	ldr	r3, [pc, #148]	; (800d7a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	69ba      	ldr	r2, [r7, #24]
 800d712:	429a      	cmp	r2, r3
 800d714:	d10a      	bne.n	800d72c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	60bb      	str	r3, [r7, #8]
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d730:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	69fa      	ldr	r2, [r7, #28]
 800d736:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	db04      	blt.n	800d74a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	6959      	ldr	r1, [r3, #20]
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	4613      	mov	r3, r2
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4413      	add	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4a13      	ldr	r2, [pc, #76]	; (800d7a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d75a:	4413      	add	r3, r2
 800d75c:	4299      	cmp	r1, r3
 800d75e:	d11c      	bne.n	800d79a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	3304      	adds	r3, #4
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd ff19 	bl	800b59c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76e:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	429a      	cmp	r2, r3
 800d774:	d903      	bls.n	800d77e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77a:	4a0c      	ldr	r2, [pc, #48]	; (800d7ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	4a07      	ldr	r2, [pc, #28]	; (800d7a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d78c:	441a      	add	r2, r3
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	3304      	adds	r3, #4
 800d792:	4619      	mov	r1, r3
 800d794:	4610      	mov	r0, r2
 800d796:	f7fd fea4 	bl	800b4e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d79a:	bf00      	nop
 800d79c:	3720      	adds	r7, #32
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20001cf0 	.word	0x20001cf0
 800d7a8:	20001cf4 	.word	0x20001cf4
 800d7ac:	200021cc 	.word	0x200021cc

0800d7b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d7b4:	4b07      	ldr	r3, [pc, #28]	; (800d7d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d004      	beq.n	800d7c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7c2:	3201      	adds	r2, #1
 800d7c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d7c6:	4b03      	ldr	r3, [pc, #12]	; (800d7d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
	}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	20001cf0 	.word	0x20001cf0

0800d7d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7e2:	4b21      	ldr	r3, [pc, #132]	; (800d868 <prvAddCurrentTaskToDelayedList+0x90>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7e8:	4b20      	ldr	r3, [pc, #128]	; (800d86c <prvAddCurrentTaskToDelayedList+0x94>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fd fed4 	bl	800b59c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7fa:	d10a      	bne.n	800d812 <prvAddCurrentTaskToDelayedList+0x3a>
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d007      	beq.n	800d812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d802:	4b1a      	ldr	r3, [pc, #104]	; (800d86c <prvAddCurrentTaskToDelayedList+0x94>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3304      	adds	r3, #4
 800d808:	4619      	mov	r1, r3
 800d80a:	4819      	ldr	r0, [pc, #100]	; (800d870 <prvAddCurrentTaskToDelayedList+0x98>)
 800d80c:	f7fd fe69 	bl	800b4e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d810:	e026      	b.n	800d860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4413      	add	r3, r2
 800d818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d81a:	4b14      	ldr	r3, [pc, #80]	; (800d86c <prvAddCurrentTaskToDelayedList+0x94>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	429a      	cmp	r2, r3
 800d828:	d209      	bcs.n	800d83e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d82a:	4b12      	ldr	r3, [pc, #72]	; (800d874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <prvAddCurrentTaskToDelayedList+0x94>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3304      	adds	r3, #4
 800d834:	4619      	mov	r1, r3
 800d836:	4610      	mov	r0, r2
 800d838:	f7fd fe77 	bl	800b52a <vListInsert>
}
 800d83c:	e010      	b.n	800d860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d83e:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <prvAddCurrentTaskToDelayedList+0x94>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3304      	adds	r3, #4
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f7fd fe6d 	bl	800b52a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d850:	4b0a      	ldr	r3, [pc, #40]	; (800d87c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	429a      	cmp	r2, r3
 800d858:	d202      	bcs.n	800d860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d85a:	4a08      	ldr	r2, [pc, #32]	; (800d87c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	6013      	str	r3, [r2, #0]
}
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	200021c8 	.word	0x200021c8
 800d86c:	20001cf0 	.word	0x20001cf0
 800d870:	200021b0 	.word	0x200021b0
 800d874:	20002180 	.word	0x20002180
 800d878:	2000217c 	.word	0x2000217c
 800d87c:	200021e4 	.word	0x200021e4

0800d880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08a      	sub	sp, #40	; 0x28
 800d884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d886:	2300      	movs	r3, #0
 800d888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d88a:	f000 fb07 	bl	800de9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d88e:	4b1c      	ldr	r3, [pc, #112]	; (800d900 <xTimerCreateTimerTask+0x80>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d021      	beq.n	800d8da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d89e:	1d3a      	adds	r2, r7, #4
 800d8a0:	f107 0108 	add.w	r1, r7, #8
 800d8a4:	f107 030c 	add.w	r3, r7, #12
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fd fdd3 	bl	800b454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	9202      	str	r2, [sp, #8]
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	460a      	mov	r2, r1
 800d8c0:	4910      	ldr	r1, [pc, #64]	; (800d904 <xTimerCreateTimerTask+0x84>)
 800d8c2:	4811      	ldr	r0, [pc, #68]	; (800d908 <xTimerCreateTimerTask+0x88>)
 800d8c4:	f7fe ff94 	bl	800c7f0 <xTaskCreateStatic>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	4a10      	ldr	r2, [pc, #64]	; (800d90c <xTimerCreateTimerTask+0x8c>)
 800d8cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8ce:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <xTimerCreateTimerTask+0x8c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d001      	beq.n	800d8da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10a      	bne.n	800d8f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	613b      	str	r3, [r7, #16]
}
 800d8f2:	bf00      	nop
 800d8f4:	e7fe      	b.n	800d8f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d8f6:	697b      	ldr	r3, [r7, #20]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3718      	adds	r7, #24
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	20002220 	.word	0x20002220
 800d904:	0801df5c 	.word	0x0801df5c
 800d908:	0800da45 	.word	0x0800da45
 800d90c:	20002224 	.word	0x20002224

0800d910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08a      	sub	sp, #40	; 0x28
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d91e:	2300      	movs	r3, #0
 800d920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10a      	bne.n	800d93e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	623b      	str	r3, [r7, #32]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d93e:	4b1a      	ldr	r3, [pc, #104]	; (800d9a8 <xTimerGenericCommand+0x98>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d02a      	beq.n	800d99c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	2b05      	cmp	r3, #5
 800d956:	dc18      	bgt.n	800d98a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d958:	f7ff fdb4 	bl	800d4c4 <xTaskGetSchedulerState>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d109      	bne.n	800d976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d962:	4b11      	ldr	r3, [pc, #68]	; (800d9a8 <xTimerGenericCommand+0x98>)
 800d964:	6818      	ldr	r0, [r3, #0]
 800d966:	f107 0110 	add.w	r1, r7, #16
 800d96a:	2300      	movs	r3, #0
 800d96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d96e:	f7fe f89d 	bl	800baac <xQueueGenericSend>
 800d972:	6278      	str	r0, [r7, #36]	; 0x24
 800d974:	e012      	b.n	800d99c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d976:	4b0c      	ldr	r3, [pc, #48]	; (800d9a8 <xTimerGenericCommand+0x98>)
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	f107 0110 	add.w	r1, r7, #16
 800d97e:	2300      	movs	r3, #0
 800d980:	2200      	movs	r2, #0
 800d982:	f7fe f893 	bl	800baac <xQueueGenericSend>
 800d986:	6278      	str	r0, [r7, #36]	; 0x24
 800d988:	e008      	b.n	800d99c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d98a:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <xTimerGenericCommand+0x98>)
 800d98c:	6818      	ldr	r0, [r3, #0]
 800d98e:	f107 0110 	add.w	r1, r7, #16
 800d992:	2300      	movs	r3, #0
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	f7fe f987 	bl	800bca8 <xQueueGenericSendFromISR>
 800d99a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3728      	adds	r7, #40	; 0x28
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20002220 	.word	0x20002220

0800d9ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b088      	sub	sp, #32
 800d9b0:	af02      	add	r7, sp, #8
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9b6:	4b22      	ldr	r3, [pc, #136]	; (800da40 <prvProcessExpiredTimer+0x94>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fd fde9 	bl	800b59c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9d0:	f003 0304 	and.w	r3, r3, #4
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d022      	beq.n	800da1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	699a      	ldr	r2, [r3, #24]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	18d1      	adds	r1, r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	683a      	ldr	r2, [r7, #0]
 800d9e4:	6978      	ldr	r0, [r7, #20]
 800d9e6:	f000 f8d1 	bl	800db8c <prvInsertTimerInActiveList>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d01f      	beq.n	800da30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	6978      	ldr	r0, [r7, #20]
 800d9fc:	f7ff ff88 	bl	800d910 <xTimerGenericCommand>
 800da00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d113      	bne.n	800da30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	60fb      	str	r3, [r7, #12]
}
 800da1a:	bf00      	nop
 800da1c:	e7fe      	b.n	800da1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da24:	f023 0301 	bic.w	r3, r3, #1
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	6a1b      	ldr	r3, [r3, #32]
 800da34:	6978      	ldr	r0, [r7, #20]
 800da36:	4798      	blx	r3
}
 800da38:	bf00      	nop
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	20002218 	.word	0x20002218

0800da44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da4c:	f107 0308 	add.w	r3, r7, #8
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f857 	bl	800db04 <prvGetNextExpireTime>
 800da56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	4619      	mov	r1, r3
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 f803 	bl	800da68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da62:	f000 f8d5 	bl	800dc10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da66:	e7f1      	b.n	800da4c <prvTimerTask+0x8>

0800da68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da72:	f7ff f919 	bl	800cca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da76:	f107 0308 	add.w	r3, r7, #8
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f866 	bl	800db4c <prvSampleTimeNow>
 800da80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d130      	bne.n	800daea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10a      	bne.n	800daa4 <prvProcessTimerOrBlockTask+0x3c>
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	429a      	cmp	r2, r3
 800da94:	d806      	bhi.n	800daa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da96:	f7ff f915 	bl	800ccc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da9a:	68f9      	ldr	r1, [r7, #12]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ff85 	bl	800d9ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800daa2:	e024      	b.n	800daee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d008      	beq.n	800dabc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800daaa:	4b13      	ldr	r3, [pc, #76]	; (800daf8 <prvProcessTimerOrBlockTask+0x90>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <prvProcessTimerOrBlockTask+0x50>
 800dab4:	2301      	movs	r3, #1
 800dab6:	e000      	b.n	800daba <prvProcessTimerOrBlockTask+0x52>
 800dab8:	2300      	movs	r3, #0
 800daba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dabc:	4b0f      	ldr	r3, [pc, #60]	; (800dafc <prvProcessTimerOrBlockTask+0x94>)
 800dabe:	6818      	ldr	r0, [r3, #0]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	4619      	mov	r1, r3
 800daca:	f7fe fe5d 	bl	800c788 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dace:	f7ff f8f9 	bl	800ccc4 <xTaskResumeAll>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dad8:	4b09      	ldr	r3, [pc, #36]	; (800db00 <prvProcessTimerOrBlockTask+0x98>)
 800dada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	f3bf 8f6f 	isb	sy
}
 800dae8:	e001      	b.n	800daee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800daea:	f7ff f8eb 	bl	800ccc4 <xTaskResumeAll>
}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	2000221c 	.word	0x2000221c
 800dafc:	20002220 	.word	0x20002220
 800db00:	e000ed04 	.word	0xe000ed04

0800db04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db0c:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <prvGetNextExpireTime+0x44>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d101      	bne.n	800db1a <prvGetNextExpireTime+0x16>
 800db16:	2201      	movs	r2, #1
 800db18:	e000      	b.n	800db1c <prvGetNextExpireTime+0x18>
 800db1a:	2200      	movs	r2, #0
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d105      	bne.n	800db34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db28:	4b07      	ldr	r3, [pc, #28]	; (800db48 <prvGetNextExpireTime+0x44>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	60fb      	str	r3, [r7, #12]
 800db32:	e001      	b.n	800db38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db38:	68fb      	ldr	r3, [r7, #12]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3714      	adds	r7, #20
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	20002218 	.word	0x20002218

0800db4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db54:	f7ff f954 	bl	800ce00 <xTaskGetTickCount>
 800db58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db5a:	4b0b      	ldr	r3, [pc, #44]	; (800db88 <prvSampleTimeNow+0x3c>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	429a      	cmp	r2, r3
 800db62:	d205      	bcs.n	800db70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db64:	f000 f936 	bl	800ddd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	e002      	b.n	800db76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db76:	4a04      	ldr	r2, [pc, #16]	; (800db88 <prvSampleTimeNow+0x3c>)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db7c:	68fb      	ldr	r3, [r7, #12]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20002228 	.word	0x20002228

0800db8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db9a:	2300      	movs	r3, #0
 800db9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbaa:	68ba      	ldr	r2, [r7, #8]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d812      	bhi.n	800dbd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	1ad2      	subs	r2, r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d302      	bcc.n	800dbc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	e01b      	b.n	800dbfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbc6:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <prvInsertTimerInActiveList+0x7c>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fd fcaa 	bl	800b52a <vListInsert>
 800dbd6:	e012      	b.n	800dbfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d206      	bcs.n	800dbee <prvInsertTimerInActiveList+0x62>
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d302      	bcc.n	800dbee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	617b      	str	r3, [r7, #20]
 800dbec:	e007      	b.n	800dbfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbee:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <prvInsertTimerInActiveList+0x80>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f7fd fc96 	bl	800b52a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbfe:	697b      	ldr	r3, [r7, #20]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	2000221c 	.word	0x2000221c
 800dc0c:	20002218 	.word	0x20002218

0800dc10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08e      	sub	sp, #56	; 0x38
 800dc14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc16:	e0ca      	b.n	800ddae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	da18      	bge.n	800dc50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc1e:	1d3b      	adds	r3, r7, #4
 800dc20:	3304      	adds	r3, #4
 800dc22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10a      	bne.n	800dc40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	61fb      	str	r3, [r7, #28]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc46:	6850      	ldr	r0, [r2, #4]
 800dc48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc4a:	6892      	ldr	r2, [r2, #8]
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f2c0 80aa 	blt.w	800ddac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d004      	beq.n	800dc6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	3304      	adds	r3, #4
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fd fc97 	bl	800b59c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc6e:	463b      	mov	r3, r7
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff ff6b 	bl	800db4c <prvSampleTimeNow>
 800dc76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b09      	cmp	r3, #9
 800dc7c:	f200 8097 	bhi.w	800ddae <prvProcessReceivedCommands+0x19e>
 800dc80:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <prvProcessReceivedCommands+0x78>)
 800dc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc86:	bf00      	nop
 800dc88:	0800dcb1 	.word	0x0800dcb1
 800dc8c:	0800dcb1 	.word	0x0800dcb1
 800dc90:	0800dcb1 	.word	0x0800dcb1
 800dc94:	0800dd25 	.word	0x0800dd25
 800dc98:	0800dd39 	.word	0x0800dd39
 800dc9c:	0800dd83 	.word	0x0800dd83
 800dca0:	0800dcb1 	.word	0x0800dcb1
 800dca4:	0800dcb1 	.word	0x0800dcb1
 800dca8:	0800dd25 	.word	0x0800dd25
 800dcac:	0800dd39 	.word	0x0800dd39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcb6:	f043 0301 	orr.w	r3, r3, #1
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	18d1      	adds	r1, r2, r3
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd0:	f7ff ff5c 	bl	800db8c <prvInsertTimerInActiveList>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d069      	beq.n	800ddae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d05e      	beq.n	800ddae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	441a      	add	r2, r3
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	2100      	movs	r1, #0
 800dd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd02:	f7ff fe05 	bl	800d910 <xTimerGenericCommand>
 800dd06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd08:	6a3b      	ldr	r3, [r7, #32]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d14f      	bne.n	800ddae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	61bb      	str	r3, [r7, #24]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd2a:	f023 0301 	bic.w	r3, r3, #1
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd36:	e03a      	b.n	800ddae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd3e:	f043 0301 	orr.w	r3, r3, #1
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	699b      	ldr	r3, [r3, #24]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10a      	bne.n	800dd6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	617b      	str	r3, [r7, #20]
}
 800dd6a:	bf00      	nop
 800dd6c:	e7fe      	b.n	800dd6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	699a      	ldr	r2, [r3, #24]
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	18d1      	adds	r1, r2, r3
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd7c:	f7ff ff06 	bl	800db8c <prvInsertTimerInActiveList>
					break;
 800dd80:	e015      	b.n	800ddae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd88:	f003 0302 	and.w	r3, r3, #2
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d103      	bne.n	800dd98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dd90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd92:	f000 fbdd 	bl	800e550 <vPortFree>
 800dd96:	e00a      	b.n	800ddae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd9e:	f023 0301 	bic.w	r3, r3, #1
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddaa:	e000      	b.n	800ddae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ddac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddae:	4b08      	ldr	r3, [pc, #32]	; (800ddd0 <prvProcessReceivedCommands+0x1c0>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	1d39      	adds	r1, r7, #4
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fe f89e 	bl	800bef8 <xQueueReceive>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f47f af2a 	bne.w	800dc18 <prvProcessReceivedCommands+0x8>
	}
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop
 800ddc8:	3730      	adds	r7, #48	; 0x30
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	20002220 	.word	0x20002220

0800ddd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b088      	sub	sp, #32
 800ddd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddda:	e048      	b.n	800de6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dddc:	4b2d      	ldr	r3, [pc, #180]	; (800de94 <prvSwitchTimerLists+0xc0>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dde6:	4b2b      	ldr	r3, [pc, #172]	; (800de94 <prvSwitchTimerLists+0xc0>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fd fbd1 	bl	800b59c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de08:	f003 0304 	and.w	r3, r3, #4
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d02e      	beq.n	800de6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	699b      	ldr	r3, [r3, #24]
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	4413      	add	r3, r2
 800de18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d90e      	bls.n	800de40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de2e:	4b19      	ldr	r3, [pc, #100]	; (800de94 <prvSwitchTimerLists+0xc0>)
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	3304      	adds	r3, #4
 800de36:	4619      	mov	r1, r3
 800de38:	4610      	mov	r0, r2
 800de3a:	f7fd fb76 	bl	800b52a <vListInsert>
 800de3e:	e016      	b.n	800de6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de40:	2300      	movs	r3, #0
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	2100      	movs	r1, #0
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7ff fd60 	bl	800d910 <xTimerGenericCommand>
 800de50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10a      	bne.n	800de6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5c:	f383 8811 	msr	BASEPRI, r3
 800de60:	f3bf 8f6f 	isb	sy
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	603b      	str	r3, [r7, #0]
}
 800de6a:	bf00      	nop
 800de6c:	e7fe      	b.n	800de6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de6e:	4b09      	ldr	r3, [pc, #36]	; (800de94 <prvSwitchTimerLists+0xc0>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d1b1      	bne.n	800dddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de78:	4b06      	ldr	r3, [pc, #24]	; (800de94 <prvSwitchTimerLists+0xc0>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de7e:	4b06      	ldr	r3, [pc, #24]	; (800de98 <prvSwitchTimerLists+0xc4>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a04      	ldr	r2, [pc, #16]	; (800de94 <prvSwitchTimerLists+0xc0>)
 800de84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de86:	4a04      	ldr	r2, [pc, #16]	; (800de98 <prvSwitchTimerLists+0xc4>)
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	6013      	str	r3, [r2, #0]
}
 800de8c:	bf00      	nop
 800de8e:	3718      	adds	r7, #24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20002218 	.word	0x20002218
 800de98:	2000221c 	.word	0x2000221c

0800de9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dea2:	f000 f967 	bl	800e174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dea6:	4b15      	ldr	r3, [pc, #84]	; (800defc <prvCheckForValidListAndQueue+0x60>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d120      	bne.n	800def0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800deae:	4814      	ldr	r0, [pc, #80]	; (800df00 <prvCheckForValidListAndQueue+0x64>)
 800deb0:	f7fd faea 	bl	800b488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800deb4:	4813      	ldr	r0, [pc, #76]	; (800df04 <prvCheckForValidListAndQueue+0x68>)
 800deb6:	f7fd fae7 	bl	800b488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800deba:	4b13      	ldr	r3, [pc, #76]	; (800df08 <prvCheckForValidListAndQueue+0x6c>)
 800debc:	4a10      	ldr	r2, [pc, #64]	; (800df00 <prvCheckForValidListAndQueue+0x64>)
 800debe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dec0:	4b12      	ldr	r3, [pc, #72]	; (800df0c <prvCheckForValidListAndQueue+0x70>)
 800dec2:	4a10      	ldr	r2, [pc, #64]	; (800df04 <prvCheckForValidListAndQueue+0x68>)
 800dec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dec6:	2300      	movs	r3, #0
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	4b11      	ldr	r3, [pc, #68]	; (800df10 <prvCheckForValidListAndQueue+0x74>)
 800decc:	4a11      	ldr	r2, [pc, #68]	; (800df14 <prvCheckForValidListAndQueue+0x78>)
 800dece:	2110      	movs	r1, #16
 800ded0:	200a      	movs	r0, #10
 800ded2:	f7fd fbf5 	bl	800b6c0 <xQueueGenericCreateStatic>
 800ded6:	4603      	mov	r3, r0
 800ded8:	4a08      	ldr	r2, [pc, #32]	; (800defc <prvCheckForValidListAndQueue+0x60>)
 800deda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dedc:	4b07      	ldr	r3, [pc, #28]	; (800defc <prvCheckForValidListAndQueue+0x60>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d005      	beq.n	800def0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dee4:	4b05      	ldr	r3, [pc, #20]	; (800defc <prvCheckForValidListAndQueue+0x60>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	490b      	ldr	r1, [pc, #44]	; (800df18 <prvCheckForValidListAndQueue+0x7c>)
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe fbf8 	bl	800c6e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800def0:	f000 f970 	bl	800e1d4 <vPortExitCritical>
}
 800def4:	bf00      	nop
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20002220 	.word	0x20002220
 800df00:	200021f0 	.word	0x200021f0
 800df04:	20002204 	.word	0x20002204
 800df08:	20002218 	.word	0x20002218
 800df0c:	2000221c 	.word	0x2000221c
 800df10:	200022cc 	.word	0x200022cc
 800df14:	2000222c 	.word	0x2000222c
 800df18:	0801df64 	.word	0x0801df64

0800df1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	60f8      	str	r0, [r7, #12]
 800df24:	60b9      	str	r1, [r7, #8]
 800df26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3b04      	subs	r3, #4
 800df2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3b04      	subs	r3, #4
 800df3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f023 0201 	bic.w	r2, r3, #1
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3b04      	subs	r3, #4
 800df4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df4c:	4a0c      	ldr	r2, [pc, #48]	; (800df80 <pxPortInitialiseStack+0x64>)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3b14      	subs	r3, #20
 800df56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3b04      	subs	r3, #4
 800df62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f06f 0202 	mvn.w	r2, #2
 800df6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	3b20      	subs	r3, #32
 800df70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df72:	68fb      	ldr	r3, [r7, #12]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	0800df85 	.word	0x0800df85

0800df84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df8e:	4b12      	ldr	r3, [pc, #72]	; (800dfd8 <prvTaskExitError+0x54>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df96:	d00a      	beq.n	800dfae <prvTaskExitError+0x2a>
	__asm volatile
 800df98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9c:	f383 8811 	msr	BASEPRI, r3
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	f3bf 8f4f 	dsb	sy
 800dfa8:	60fb      	str	r3, [r7, #12]
}
 800dfaa:	bf00      	nop
 800dfac:	e7fe      	b.n	800dfac <prvTaskExitError+0x28>
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb2:	f383 8811 	msr	BASEPRI, r3
 800dfb6:	f3bf 8f6f 	isb	sy
 800dfba:	f3bf 8f4f 	dsb	sy
 800dfbe:	60bb      	str	r3, [r7, #8]
}
 800dfc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfc2:	bf00      	nop
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d0fc      	beq.n	800dfc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfca:	bf00      	nop
 800dfcc:	bf00      	nop
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr
 800dfd8:	20000498 	.word	0x20000498
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfe0:	4b07      	ldr	r3, [pc, #28]	; (800e000 <pxCurrentTCBConst2>)
 800dfe2:	6819      	ldr	r1, [r3, #0]
 800dfe4:	6808      	ldr	r0, [r1, #0]
 800dfe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfea:	f380 8809 	msr	PSP, r0
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f04f 0000 	mov.w	r0, #0
 800dff6:	f380 8811 	msr	BASEPRI, r0
 800dffa:	4770      	bx	lr
 800dffc:	f3af 8000 	nop.w

0800e000 <pxCurrentTCBConst2>:
 800e000:	20001cf0 	.word	0x20001cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop

0800e008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e008:	4808      	ldr	r0, [pc, #32]	; (800e02c <prvPortStartFirstTask+0x24>)
 800e00a:	6800      	ldr	r0, [r0, #0]
 800e00c:	6800      	ldr	r0, [r0, #0]
 800e00e:	f380 8808 	msr	MSP, r0
 800e012:	f04f 0000 	mov.w	r0, #0
 800e016:	f380 8814 	msr	CONTROL, r0
 800e01a:	b662      	cpsie	i
 800e01c:	b661      	cpsie	f
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	df00      	svc	0
 800e028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e02a:	bf00      	nop
 800e02c:	e000ed08 	.word	0xe000ed08

0800e030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e036:	4b46      	ldr	r3, [pc, #280]	; (800e150 <xPortStartScheduler+0x120>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a46      	ldr	r2, [pc, #280]	; (800e154 <xPortStartScheduler+0x124>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d10a      	bne.n	800e056 <xPortStartScheduler+0x26>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	613b      	str	r3, [r7, #16]
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e056:	4b3e      	ldr	r3, [pc, #248]	; (800e150 <xPortStartScheduler+0x120>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a3f      	ldr	r2, [pc, #252]	; (800e158 <xPortStartScheduler+0x128>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d10a      	bne.n	800e076 <xPortStartScheduler+0x46>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	60fb      	str	r3, [r7, #12]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e076:	4b39      	ldr	r3, [pc, #228]	; (800e15c <xPortStartScheduler+0x12c>)
 800e078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	22ff      	movs	r2, #255	; 0xff
 800e086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e090:	78fb      	ldrb	r3, [r7, #3]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	4b31      	ldr	r3, [pc, #196]	; (800e160 <xPortStartScheduler+0x130>)
 800e09c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e09e:	4b31      	ldr	r3, [pc, #196]	; (800e164 <xPortStartScheduler+0x134>)
 800e0a0:	2207      	movs	r2, #7
 800e0a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0a4:	e009      	b.n	800e0ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0a6:	4b2f      	ldr	r3, [pc, #188]	; (800e164 <xPortStartScheduler+0x134>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	4a2d      	ldr	r2, [pc, #180]	; (800e164 <xPortStartScheduler+0x134>)
 800e0ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0b0:	78fb      	ldrb	r3, [r7, #3]
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	005b      	lsls	r3, r3, #1
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0ba:	78fb      	ldrb	r3, [r7, #3]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0c2:	2b80      	cmp	r3, #128	; 0x80
 800e0c4:	d0ef      	beq.n	800e0a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0c6:	4b27      	ldr	r3, [pc, #156]	; (800e164 <xPortStartScheduler+0x134>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f1c3 0307 	rsb	r3, r3, #7
 800e0ce:	2b04      	cmp	r3, #4
 800e0d0:	d00a      	beq.n	800e0e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	60bb      	str	r3, [r7, #8]
}
 800e0e4:	bf00      	nop
 800e0e6:	e7fe      	b.n	800e0e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0e8:	4b1e      	ldr	r3, [pc, #120]	; (800e164 <xPortStartScheduler+0x134>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	021b      	lsls	r3, r3, #8
 800e0ee:	4a1d      	ldr	r2, [pc, #116]	; (800e164 <xPortStartScheduler+0x134>)
 800e0f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0f2:	4b1c      	ldr	r3, [pc, #112]	; (800e164 <xPortStartScheduler+0x134>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0fa:	4a1a      	ldr	r2, [pc, #104]	; (800e164 <xPortStartScheduler+0x134>)
 800e0fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	b2da      	uxtb	r2, r3
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e106:	4b18      	ldr	r3, [pc, #96]	; (800e168 <xPortStartScheduler+0x138>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a17      	ldr	r2, [pc, #92]	; (800e168 <xPortStartScheduler+0x138>)
 800e10c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e112:	4b15      	ldr	r3, [pc, #84]	; (800e168 <xPortStartScheduler+0x138>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a14      	ldr	r2, [pc, #80]	; (800e168 <xPortStartScheduler+0x138>)
 800e118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e11c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e11e:	f000 f8dd 	bl	800e2dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e122:	4b12      	ldr	r3, [pc, #72]	; (800e16c <xPortStartScheduler+0x13c>)
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e128:	f000 f8fc 	bl	800e324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e12c:	4b10      	ldr	r3, [pc, #64]	; (800e170 <xPortStartScheduler+0x140>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a0f      	ldr	r2, [pc, #60]	; (800e170 <xPortStartScheduler+0x140>)
 800e132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e138:	f7ff ff66 	bl	800e008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e13c:	f7fe ff3c 	bl	800cfb8 <vTaskSwitchContext>
	prvTaskExitError();
 800e140:	f7ff ff20 	bl	800df84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	e000ed00 	.word	0xe000ed00
 800e154:	410fc271 	.word	0x410fc271
 800e158:	410fc270 	.word	0x410fc270
 800e15c:	e000e400 	.word	0xe000e400
 800e160:	2000231c 	.word	0x2000231c
 800e164:	20002320 	.word	0x20002320
 800e168:	e000ed20 	.word	0xe000ed20
 800e16c:	20000498 	.word	0x20000498
 800e170:	e000ef34 	.word	0xe000ef34

0800e174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
	__asm volatile
 800e17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	607b      	str	r3, [r7, #4]
}
 800e18c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e18e:	4b0f      	ldr	r3, [pc, #60]	; (800e1cc <vPortEnterCritical+0x58>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3301      	adds	r3, #1
 800e194:	4a0d      	ldr	r2, [pc, #52]	; (800e1cc <vPortEnterCritical+0x58>)
 800e196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e198:	4b0c      	ldr	r3, [pc, #48]	; (800e1cc <vPortEnterCritical+0x58>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d10f      	bne.n	800e1c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <vPortEnterCritical+0x5c>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00a      	beq.n	800e1c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	603b      	str	r3, [r7, #0]
}
 800e1bc:	bf00      	nop
 800e1be:	e7fe      	b.n	800e1be <vPortEnterCritical+0x4a>
	}
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	20000498 	.word	0x20000498
 800e1d0:	e000ed04 	.word	0xe000ed04

0800e1d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <vPortExitCritical+0x50>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10a      	bne.n	800e1f8 <vPortExitCritical+0x24>
	__asm volatile
 800e1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	607b      	str	r3, [r7, #4]
}
 800e1f4:	bf00      	nop
 800e1f6:	e7fe      	b.n	800e1f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e1f8:	4b0a      	ldr	r3, [pc, #40]	; (800e224 <vPortExitCritical+0x50>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	4a09      	ldr	r2, [pc, #36]	; (800e224 <vPortExitCritical+0x50>)
 800e200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e202:	4b08      	ldr	r3, [pc, #32]	; (800e224 <vPortExitCritical+0x50>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d105      	bne.n	800e216 <vPortExitCritical+0x42>
 800e20a:	2300      	movs	r3, #0
 800e20c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	f383 8811 	msr	BASEPRI, r3
}
 800e214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e216:	bf00      	nop
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	20000498 	.word	0x20000498
	...

0800e230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e230:	f3ef 8009 	mrs	r0, PSP
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	4b15      	ldr	r3, [pc, #84]	; (800e290 <pxCurrentTCBConst>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	f01e 0f10 	tst.w	lr, #16
 800e240:	bf08      	it	eq
 800e242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24a:	6010      	str	r0, [r2, #0]
 800e24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e250:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e254:	f380 8811 	msr	BASEPRI, r0
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f7fe feaa 	bl	800cfb8 <vTaskSwitchContext>
 800e264:	f04f 0000 	mov.w	r0, #0
 800e268:	f380 8811 	msr	BASEPRI, r0
 800e26c:	bc09      	pop	{r0, r3}
 800e26e:	6819      	ldr	r1, [r3, #0]
 800e270:	6808      	ldr	r0, [r1, #0]
 800e272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e276:	f01e 0f10 	tst.w	lr, #16
 800e27a:	bf08      	it	eq
 800e27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e280:	f380 8809 	msr	PSP, r0
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	f3af 8000 	nop.w

0800e290 <pxCurrentTCBConst>:
 800e290:	20001cf0 	.word	0x20001cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e294:	bf00      	nop
 800e296:	bf00      	nop

0800e298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	607b      	str	r3, [r7, #4]
}
 800e2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2b2:	f7fe fdc7 	bl	800ce44 <xTaskIncrementTick>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2bc:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <xPortSysTickHandler+0x40>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	f383 8811 	msr	BASEPRI, r3
}
 800e2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e2d0:	bf00      	nop
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	e000ed04 	.word	0xe000ed04

0800e2dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e2e0:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <vPortSetupTimerInterrupt+0x34>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2e6:	4b0b      	ldr	r3, [pc, #44]	; (800e314 <vPortSetupTimerInterrupt+0x38>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2ec:	4b0a      	ldr	r3, [pc, #40]	; (800e318 <vPortSetupTimerInterrupt+0x3c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a0a      	ldr	r2, [pc, #40]	; (800e31c <vPortSetupTimerInterrupt+0x40>)
 800e2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f6:	099b      	lsrs	r3, r3, #6
 800e2f8:	4a09      	ldr	r2, [pc, #36]	; (800e320 <vPortSetupTimerInterrupt+0x44>)
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2fe:	4b04      	ldr	r3, [pc, #16]	; (800e310 <vPortSetupTimerInterrupt+0x34>)
 800e300:	2207      	movs	r2, #7
 800e302:	601a      	str	r2, [r3, #0]
}
 800e304:	bf00      	nop
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	e000e010 	.word	0xe000e010
 800e314:	e000e018 	.word	0xe000e018
 800e318:	20000000 	.word	0x20000000
 800e31c:	10624dd3 	.word	0x10624dd3
 800e320:	e000e014 	.word	0xe000e014

0800e324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e334 <vPortEnableVFP+0x10>
 800e328:	6801      	ldr	r1, [r0, #0]
 800e32a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e32e:	6001      	str	r1, [r0, #0]
 800e330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e332:	bf00      	nop
 800e334:	e000ed88 	.word	0xe000ed88

0800e338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e33e:	f3ef 8305 	mrs	r3, IPSR
 800e342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b0f      	cmp	r3, #15
 800e348:	d914      	bls.n	800e374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e34a:	4a17      	ldr	r2, [pc, #92]	; (800e3a8 <vPortValidateInterruptPriority+0x70>)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4413      	add	r3, r2
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e354:	4b15      	ldr	r3, [pc, #84]	; (800e3ac <vPortValidateInterruptPriority+0x74>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	7afa      	ldrb	r2, [r7, #11]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d20a      	bcs.n	800e374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	607b      	str	r3, [r7, #4]
}
 800e370:	bf00      	nop
 800e372:	e7fe      	b.n	800e372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e374:	4b0e      	ldr	r3, [pc, #56]	; (800e3b0 <vPortValidateInterruptPriority+0x78>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e37c:	4b0d      	ldr	r3, [pc, #52]	; (800e3b4 <vPortValidateInterruptPriority+0x7c>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	429a      	cmp	r2, r3
 800e382:	d90a      	bls.n	800e39a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e388:	f383 8811 	msr	BASEPRI, r3
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	603b      	str	r3, [r7, #0]
}
 800e396:	bf00      	nop
 800e398:	e7fe      	b.n	800e398 <vPortValidateInterruptPriority+0x60>
	}
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	e000e3f0 	.word	0xe000e3f0
 800e3ac:	2000231c 	.word	0x2000231c
 800e3b0:	e000ed0c 	.word	0xe000ed0c
 800e3b4:	20002320 	.word	0x20002320

0800e3b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08a      	sub	sp, #40	; 0x28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3c4:	f7fe fc70 	bl	800cca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3c8:	4b5b      	ldr	r3, [pc, #364]	; (800e538 <pvPortMalloc+0x180>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d101      	bne.n	800e3d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3d0:	f000 f920 	bl	800e614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3d4:	4b59      	ldr	r3, [pc, #356]	; (800e53c <pvPortMalloc+0x184>)
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4013      	ands	r3, r2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f040 8093 	bne.w	800e508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d01d      	beq.n	800e424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e3e8:	2208      	movs	r2, #8
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f003 0307 	and.w	r3, r3, #7
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d014      	beq.n	800e424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f023 0307 	bic.w	r3, r3, #7
 800e400:	3308      	adds	r3, #8
 800e402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f003 0307 	and.w	r3, r3, #7
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00a      	beq.n	800e424 <pvPortMalloc+0x6c>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	617b      	str	r3, [r7, #20]
}
 800e420:	bf00      	nop
 800e422:	e7fe      	b.n	800e422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d06e      	beq.n	800e508 <pvPortMalloc+0x150>
 800e42a:	4b45      	ldr	r3, [pc, #276]	; (800e540 <pvPortMalloc+0x188>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	429a      	cmp	r2, r3
 800e432:	d869      	bhi.n	800e508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e434:	4b43      	ldr	r3, [pc, #268]	; (800e544 <pvPortMalloc+0x18c>)
 800e436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e438:	4b42      	ldr	r3, [pc, #264]	; (800e544 <pvPortMalloc+0x18c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e43e:	e004      	b.n	800e44a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	429a      	cmp	r2, r3
 800e452:	d903      	bls.n	800e45c <pvPortMalloc+0xa4>
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1f1      	bne.n	800e440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e45c:	4b36      	ldr	r3, [pc, #216]	; (800e538 <pvPortMalloc+0x180>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e462:	429a      	cmp	r2, r3
 800e464:	d050      	beq.n	800e508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e466:	6a3b      	ldr	r3, [r7, #32]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2208      	movs	r2, #8
 800e46c:	4413      	add	r3, r2
 800e46e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	1ad2      	subs	r2, r2, r3
 800e480:	2308      	movs	r3, #8
 800e482:	005b      	lsls	r3, r3, #1
 800e484:	429a      	cmp	r2, r3
 800e486:	d91f      	bls.n	800e4c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4413      	add	r3, r2
 800e48e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	f003 0307 	and.w	r3, r3, #7
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00a      	beq.n	800e4b0 <pvPortMalloc+0xf8>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	613b      	str	r3, [r7, #16]
}
 800e4ac:	bf00      	nop
 800e4ae:	e7fe      	b.n	800e4ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	1ad2      	subs	r2, r2, r3
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4c2:	69b8      	ldr	r0, [r7, #24]
 800e4c4:	f000 f908 	bl	800e6d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4c8:	4b1d      	ldr	r3, [pc, #116]	; (800e540 <pvPortMalloc+0x188>)
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	4a1b      	ldr	r2, [pc, #108]	; (800e540 <pvPortMalloc+0x188>)
 800e4d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4d6:	4b1a      	ldr	r3, [pc, #104]	; (800e540 <pvPortMalloc+0x188>)
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	4b1b      	ldr	r3, [pc, #108]	; (800e548 <pvPortMalloc+0x190>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d203      	bcs.n	800e4ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4e2:	4b17      	ldr	r3, [pc, #92]	; (800e540 <pvPortMalloc+0x188>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a18      	ldr	r2, [pc, #96]	; (800e548 <pvPortMalloc+0x190>)
 800e4e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	4b13      	ldr	r3, [pc, #76]	; (800e53c <pvPortMalloc+0x184>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e4fe:	4b13      	ldr	r3, [pc, #76]	; (800e54c <pvPortMalloc+0x194>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3301      	adds	r3, #1
 800e504:	4a11      	ldr	r2, [pc, #68]	; (800e54c <pvPortMalloc+0x194>)
 800e506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e508:	f7fe fbdc 	bl	800ccc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	f003 0307 	and.w	r3, r3, #7
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <pvPortMalloc+0x174>
	__asm volatile
 800e516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	60fb      	str	r3, [r7, #12]
}
 800e528:	bf00      	nop
 800e52a:	e7fe      	b.n	800e52a <pvPortMalloc+0x172>
	return pvReturn;
 800e52c:	69fb      	ldr	r3, [r7, #28]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3728      	adds	r7, #40	; 0x28
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	2000985c 	.word	0x2000985c
 800e53c:	20009870 	.word	0x20009870
 800e540:	20009860 	.word	0x20009860
 800e544:	20009854 	.word	0x20009854
 800e548:	20009864 	.word	0x20009864
 800e54c:	20009868 	.word	0x20009868

0800e550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d04d      	beq.n	800e5fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e562:	2308      	movs	r3, #8
 800e564:	425b      	negs	r3, r3
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	4413      	add	r3, r2
 800e56a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	4b24      	ldr	r3, [pc, #144]	; (800e608 <vPortFree+0xb8>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4013      	ands	r3, r2
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10a      	bne.n	800e594 <vPortFree+0x44>
	__asm volatile
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	60fb      	str	r3, [r7, #12]
}
 800e590:	bf00      	nop
 800e592:	e7fe      	b.n	800e592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00a      	beq.n	800e5b2 <vPortFree+0x62>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60bb      	str	r3, [r7, #8]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	4b14      	ldr	r3, [pc, #80]	; (800e608 <vPortFree+0xb8>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01e      	beq.n	800e5fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d11a      	bne.n	800e5fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	4b0e      	ldr	r3, [pc, #56]	; (800e608 <vPortFree+0xb8>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	43db      	mvns	r3, r3
 800e5d2:	401a      	ands	r2, r3
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5d8:	f7fe fb66 	bl	800cca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	685a      	ldr	r2, [r3, #4]
 800e5e0:	4b0a      	ldr	r3, [pc, #40]	; (800e60c <vPortFree+0xbc>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	4a09      	ldr	r2, [pc, #36]	; (800e60c <vPortFree+0xbc>)
 800e5e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5ea:	6938      	ldr	r0, [r7, #16]
 800e5ec:	f000 f874 	bl	800e6d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e5f0:	4b07      	ldr	r3, [pc, #28]	; (800e610 <vPortFree+0xc0>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	4a06      	ldr	r2, [pc, #24]	; (800e610 <vPortFree+0xc0>)
 800e5f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e5fa:	f7fe fb63 	bl	800ccc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5fe:	bf00      	nop
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20009870 	.word	0x20009870
 800e60c:	20009860 	.word	0x20009860
 800e610:	2000986c 	.word	0x2000986c

0800e614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e61a:	f247 5330 	movw	r3, #30000	; 0x7530
 800e61e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e620:	4b27      	ldr	r3, [pc, #156]	; (800e6c0 <prvHeapInit+0xac>)
 800e622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f003 0307 	and.w	r3, r3, #7
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00c      	beq.n	800e648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3307      	adds	r3, #7
 800e632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f023 0307 	bic.w	r3, r3, #7
 800e63a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	4a1f      	ldr	r2, [pc, #124]	; (800e6c0 <prvHeapInit+0xac>)
 800e644:	4413      	add	r3, r2
 800e646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e64c:	4a1d      	ldr	r2, [pc, #116]	; (800e6c4 <prvHeapInit+0xb0>)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e652:	4b1c      	ldr	r3, [pc, #112]	; (800e6c4 <prvHeapInit+0xb0>)
 800e654:	2200      	movs	r2, #0
 800e656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	4413      	add	r3, r2
 800e65e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e660:	2208      	movs	r2, #8
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	1a9b      	subs	r3, r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f023 0307 	bic.w	r3, r3, #7
 800e66e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	4a15      	ldr	r2, [pc, #84]	; (800e6c8 <prvHeapInit+0xb4>)
 800e674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e676:	4b14      	ldr	r3, [pc, #80]	; (800e6c8 <prvHeapInit+0xb4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2200      	movs	r2, #0
 800e67c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e67e:	4b12      	ldr	r3, [pc, #72]	; (800e6c8 <prvHeapInit+0xb4>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2200      	movs	r2, #0
 800e684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	1ad2      	subs	r2, r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e694:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <prvHeapInit+0xb4>)
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	4a0a      	ldr	r2, [pc, #40]	; (800e6cc <prvHeapInit+0xb8>)
 800e6a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	4a09      	ldr	r2, [pc, #36]	; (800e6d0 <prvHeapInit+0xbc>)
 800e6aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6ac:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <prvHeapInit+0xc0>)
 800e6ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6b2:	601a      	str	r2, [r3, #0]
}
 800e6b4:	bf00      	nop
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	20002324 	.word	0x20002324
 800e6c4:	20009854 	.word	0x20009854
 800e6c8:	2000985c 	.word	0x2000985c
 800e6cc:	20009864 	.word	0x20009864
 800e6d0:	20009860 	.word	0x20009860
 800e6d4:	20009870 	.word	0x20009870

0800e6d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e6e0:	4b28      	ldr	r3, [pc, #160]	; (800e784 <prvInsertBlockIntoFreeList+0xac>)
 800e6e2:	60fb      	str	r3, [r7, #12]
 800e6e4:	e002      	b.n	800e6ec <prvInsertBlockIntoFreeList+0x14>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	60fb      	str	r3, [r7, #12]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d8f7      	bhi.n	800e6e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	4413      	add	r3, r2
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	429a      	cmp	r2, r3
 800e706:	d108      	bne.n	800e71a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	441a      	add	r2, r3
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	441a      	add	r2, r3
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d118      	bne.n	800e760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	4b15      	ldr	r3, [pc, #84]	; (800e788 <prvInsertBlockIntoFreeList+0xb0>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	429a      	cmp	r2, r3
 800e738:	d00d      	beq.n	800e756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	441a      	add	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	601a      	str	r2, [r3, #0]
 800e754:	e008      	b.n	800e768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <prvInsertBlockIntoFreeList+0xb0>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	e003      	b.n	800e768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d002      	beq.n	800e776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e776:	bf00      	nop
 800e778:	3714      	adds	r7, #20
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	20009854 	.word	0x20009854
 800e788:	2000985c 	.word	0x2000985c

0800e78c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	330c      	adds	r3, #12
 800e79c:	461a      	mov	r2, r3
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f002 faa5 	bl	8010cf0 <tcpip_send_msg_wait_sem>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d103      	bne.n	800e7ba <netconn_apimsg+0x2e>
    return apimsg->err;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e7b8:	e001      	b.n	800e7be <netconn_apimsg+0x32>
  }
  return err;
 800e7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
	...

0800e7c8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08c      	sub	sp, #48	; 0x30
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	603a      	str	r2, [r7, #0]
 800e7d2:	71fb      	strb	r3, [r7, #7]
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f001 f927 	bl	800fa30 <netconn_alloc>
 800e7e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d054      	beq.n	800e894 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e7ea:	79bb      	ldrb	r3, [r7, #6]
 800e7ec:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e7f2:	f107 0308 	add.w	r3, r7, #8
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4829      	ldr	r0, [pc, #164]	; (800e8a0 <netconn_new_with_proto_and_callback+0xd8>)
 800e7fa:	f7ff ffc7 	bl	800e78c <netconn_apimsg>
 800e7fe:	4603      	mov	r3, r0
 800e800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e804:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d043      	beq.n	800e894 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d005      	beq.n	800e820 <netconn_new_with_proto_and_callback+0x58>
 800e814:	4b23      	ldr	r3, [pc, #140]	; (800e8a4 <netconn_new_with_proto_and_callback+0xdc>)
 800e816:	22a3      	movs	r2, #163	; 0xa3
 800e818:	4923      	ldr	r1, [pc, #140]	; (800e8a8 <netconn_new_with_proto_and_callback+0xe0>)
 800e81a:	4824      	ldr	r0, [pc, #144]	; (800e8ac <netconn_new_with_proto_and_callback+0xe4>)
 800e81c:	f00d fc82 	bl	801c124 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	3310      	adds	r3, #16
 800e824:	4618      	mov	r0, r3
 800e826:	f00d f99b 	bl	801bb60 <sys_mbox_valid>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d105      	bne.n	800e83c <netconn_new_with_proto_and_callback+0x74>
 800e830:	4b1c      	ldr	r3, [pc, #112]	; (800e8a4 <netconn_new_with_proto_and_callback+0xdc>)
 800e832:	22a4      	movs	r2, #164	; 0xa4
 800e834:	491e      	ldr	r1, [pc, #120]	; (800e8b0 <netconn_new_with_proto_and_callback+0xe8>)
 800e836:	481d      	ldr	r0, [pc, #116]	; (800e8ac <netconn_new_with_proto_and_callback+0xe4>)
 800e838:	f00d fc74 	bl	801c124 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	3314      	adds	r3, #20
 800e840:	4618      	mov	r0, r3
 800e842:	f00d f98d 	bl	801bb60 <sys_mbox_valid>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d005      	beq.n	800e858 <netconn_new_with_proto_and_callback+0x90>
 800e84c:	4b15      	ldr	r3, [pc, #84]	; (800e8a4 <netconn_new_with_proto_and_callback+0xdc>)
 800e84e:	22a6      	movs	r2, #166	; 0xa6
 800e850:	4918      	ldr	r1, [pc, #96]	; (800e8b4 <netconn_new_with_proto_and_callback+0xec>)
 800e852:	4816      	ldr	r0, [pc, #88]	; (800e8ac <netconn_new_with_proto_and_callback+0xe4>)
 800e854:	f00d fc66 	bl	801c124 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	330c      	adds	r3, #12
 800e85c:	4618      	mov	r0, r3
 800e85e:	f00d fa0d 	bl	801bc7c <sys_sem_valid>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d105      	bne.n	800e874 <netconn_new_with_proto_and_callback+0xac>
 800e868:	4b0e      	ldr	r3, [pc, #56]	; (800e8a4 <netconn_new_with_proto_and_callback+0xdc>)
 800e86a:	22a9      	movs	r2, #169	; 0xa9
 800e86c:	4912      	ldr	r1, [pc, #72]	; (800e8b8 <netconn_new_with_proto_and_callback+0xf0>)
 800e86e:	480f      	ldr	r0, [pc, #60]	; (800e8ac <netconn_new_with_proto_and_callback+0xe4>)
 800e870:	f00d fc58 	bl	801c124 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	330c      	adds	r3, #12
 800e878:	4618      	mov	r0, r3
 800e87a:	f00d f9f2 	bl	801bc62 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	3310      	adds	r3, #16
 800e882:	4618      	mov	r0, r3
 800e884:	f00d f8f8 	bl	801ba78 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e88a:	2007      	movs	r0, #7
 800e88c:	f002 ffe0 	bl	8011850 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e890:	2300      	movs	r3, #0
 800e892:	e000      	b.n	800e896 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e896:	4618      	mov	r0, r3
 800e898:	3730      	adds	r7, #48	; 0x30
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	0800fa05 	.word	0x0800fa05
 800e8a4:	0801df6c 	.word	0x0801df6c
 800e8a8:	0801dfa0 	.word	0x0801dfa0
 800e8ac:	0801dfc4 	.word	0x0801dfc4
 800e8b0:	0801dfec 	.word	0x0801dfec
 800e8b4:	0801e004 	.word	0x0801e004
 800e8b8:	0801e028 	.word	0x0801e028

0800e8bc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d101      	bne.n	800e8ce <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	e014      	b.n	800e8f8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e8d2:	2329      	movs	r3, #41	; 0x29
 800e8d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e8d6:	f107 030c 	add.w	r3, r7, #12
 800e8da:	4619      	mov	r1, r3
 800e8dc:	4808      	ldr	r0, [pc, #32]	; (800e900 <netconn_prepare_delete+0x44>)
 800e8de:	f7ff ff55 	bl	800e78c <netconn_apimsg>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e8e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <netconn_prepare_delete+0x3a>
    return err;
 800e8f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e8f4:	e000      	b.n	800e8f8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3730      	adds	r7, #48	; 0x30
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	0800ff69 	.word	0x0800ff69

0800e904 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d101      	bne.n	800e916 <netconn_delete+0x12>
    return ERR_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	e00d      	b.n	800e932 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7ff ffd0 	bl	800e8bc <netconn_prepare_delete>
 800e91c:	4603      	mov	r3, r0
 800e91e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <netconn_delete+0x2a>
    netconn_free(conn);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 f8ef 	bl	800fb0c <netconn_free>
  }
  return err;
 800e92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
	...

0800e93c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08e      	sub	sp, #56	; 0x38
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	4613      	mov	r3, r2
 800e948:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d109      	bne.n	800e964 <netconn_bind+0x28>
 800e950:	4b11      	ldr	r3, [pc, #68]	; (800e998 <netconn_bind+0x5c>)
 800e952:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e956:	4911      	ldr	r1, [pc, #68]	; (800e99c <netconn_bind+0x60>)
 800e958:	4811      	ldr	r0, [pc, #68]	; (800e9a0 <netconn_bind+0x64>)
 800e95a:	f00d fbe3 	bl	801c124 <iprintf>
 800e95e:	f06f 030f 	mvn.w	r3, #15
 800e962:	e015      	b.n	800e990 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d101      	bne.n	800e96e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e96a:	4b0e      	ldr	r3, [pc, #56]	; (800e9a4 <netconn_bind+0x68>)
 800e96c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e976:	88fb      	ldrh	r3, [r7, #6]
 800e978:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e97a:	f107 0314 	add.w	r3, r7, #20
 800e97e:	4619      	mov	r1, r3
 800e980:	4809      	ldr	r0, [pc, #36]	; (800e9a8 <netconn_bind+0x6c>)
 800e982:	f7ff ff03 	bl	800e78c <netconn_apimsg>
 800e986:	4603      	mov	r3, r0
 800e988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e98c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e990:	4618      	mov	r0, r3
 800e992:	3738      	adds	r7, #56	; 0x38
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	0801df6c 	.word	0x0801df6c
 800e99c:	0801e0a4 	.word	0x0801e0a4
 800e9a0:	0801dfc4 	.word	0x0801dfc4
 800e9a4:	08024538 	.word	0x08024538
 800e9a8:	08010131 	.word	0x08010131

0800e9ac <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08c      	sub	sp, #48	; 0x30
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d109      	bne.n	800e9d2 <netconn_listen_with_backlog+0x26>
 800e9be:	4b0d      	ldr	r3, [pc, #52]	; (800e9f4 <netconn_listen_with_backlog+0x48>)
 800e9c0:	f240 12bb 	movw	r2, #443	; 0x1bb
 800e9c4:	490c      	ldr	r1, [pc, #48]	; (800e9f8 <netconn_listen_with_backlog+0x4c>)
 800e9c6:	480d      	ldr	r0, [pc, #52]	; (800e9fc <netconn_listen_with_backlog+0x50>)
 800e9c8:	f00d fbac 	bl	801c124 <iprintf>
 800e9cc:	f06f 030f 	mvn.w	r3, #15
 800e9d0:	e00c      	b.n	800e9ec <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e9d6:	f107 030c 	add.w	r3, r7, #12
 800e9da:	4619      	mov	r1, r3
 800e9dc:	4808      	ldr	r0, [pc, #32]	; (800ea00 <netconn_listen_with_backlog+0x54>)
 800e9de:	f7ff fed5 	bl	800e78c <netconn_apimsg>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e9e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3730      	adds	r7, #48	; 0x30
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	0801df6c 	.word	0x0801df6c
 800e9f8:	0801e124 	.word	0x0801e124
 800e9fc:	0801dfc4 	.word	0x0801dfc4
 800ea00:	080101a5 	.word	0x080101a5

0800ea04 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d109      	bne.n	800ea28 <netconn_accept+0x24>
 800ea14:	4b3d      	ldr	r3, [pc, #244]	; (800eb0c <netconn_accept+0x108>)
 800ea16:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ea1a:	493d      	ldr	r1, [pc, #244]	; (800eb10 <netconn_accept+0x10c>)
 800ea1c:	483d      	ldr	r0, [pc, #244]	; (800eb14 <netconn_accept+0x110>)
 800ea1e:	f00d fb81 	bl	801c124 <iprintf>
 800ea22:	f06f 030f 	mvn.w	r3, #15
 800ea26:	e06c      	b.n	800eb02 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d109      	bne.n	800ea48 <netconn_accept+0x44>
 800ea34:	4b35      	ldr	r3, [pc, #212]	; (800eb0c <netconn_accept+0x108>)
 800ea36:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ea3a:	4937      	ldr	r1, [pc, #220]	; (800eb18 <netconn_accept+0x114>)
 800ea3c:	4835      	ldr	r0, [pc, #212]	; (800eb14 <netconn_accept+0x110>)
 800ea3e:	f00d fb71 	bl	801c124 <iprintf>
 800ea42:	f06f 030f 	mvn.w	r3, #15
 800ea46:	e05c      	b.n	800eb02 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fb6c 	bl	800f126 <netconn_err>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ea52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ea5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea5e:	e050      	b.n	800eb02 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	3314      	adds	r3, #20
 800ea64:	4618      	mov	r0, r3
 800ea66:	f00d f87b 	bl	801bb60 <sys_mbox_valid>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <netconn_accept+0x78>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7f1b      	ldrb	r3, [r3, #28]
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800ea7c:	f06f 030e 	mvn.w	r3, #14
 800ea80:	e03f      	b.n	800eb02 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7f1b      	ldrb	r3, [r3, #28]
 800ea86:	f003 0302 	and.w	r3, r3, #2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00e      	beq.n	800eaac <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3314      	adds	r3, #20
 800ea92:	f107 020c 	add.w	r2, r7, #12
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f00d f84a 	bl	801bb32 <sys_arch_mbox_tryfetch>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa4:	d10a      	bne.n	800eabc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800eaa6:	f06f 0306 	mvn.w	r3, #6
 800eaaa:	e02a      	b.n	800eb02 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3314      	adds	r3, #20
 800eab0:	f107 010c 	add.w	r1, r7, #12
 800eab4:	2200      	movs	r2, #0
 800eab6:	4618      	mov	r0, r3
 800eab8:	f00d f80a 	bl	801bad0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d005      	beq.n	800ead0 <netconn_accept+0xcc>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac8:	2200      	movs	r2, #0
 800eaca:	2101      	movs	r1, #1
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f107 0213 	add.w	r2, r7, #19
 800ead6:	4611      	mov	r1, r2
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 fb75 	bl	800f1c8 <lwip_netconn_is_err_msg>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800eae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eae8:	e00b      	b.n	800eb02 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d102      	bne.n	800eaf6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800eaf0:	f06f 030e 	mvn.w	r3, #14
 800eaf4:	e005      	b.n	800eb02 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800eb00:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3718      	adds	r7, #24
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	0801df6c 	.word	0x0801df6c
 800eb10:	0801e144 	.word	0x0801e144
 800eb14:	0801dfc4 	.word	0x0801dfc4
 800eb18:	0801e164 	.word	0x0801e164

0800eb1c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b088      	sub	sp, #32
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	4613      	mov	r3, r2
 800eb28:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d109      	bne.n	800eb48 <netconn_recv_data+0x2c>
 800eb34:	4b58      	ldr	r3, [pc, #352]	; (800ec98 <netconn_recv_data+0x17c>)
 800eb36:	f44f 7212 	mov.w	r2, #584	; 0x248
 800eb3a:	4958      	ldr	r1, [pc, #352]	; (800ec9c <netconn_recv_data+0x180>)
 800eb3c:	4858      	ldr	r0, [pc, #352]	; (800eca0 <netconn_recv_data+0x184>)
 800eb3e:	f00d faf1 	bl	801c124 <iprintf>
 800eb42:	f06f 030f 	mvn.w	r3, #15
 800eb46:	e0a2      	b.n	800ec8e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d109      	bne.n	800eb68 <netconn_recv_data+0x4c>
 800eb54:	4b50      	ldr	r3, [pc, #320]	; (800ec98 <netconn_recv_data+0x17c>)
 800eb56:	f240 224a 	movw	r2, #586	; 0x24a
 800eb5a:	4952      	ldr	r1, [pc, #328]	; (800eca4 <netconn_recv_data+0x188>)
 800eb5c:	4850      	ldr	r0, [pc, #320]	; (800eca0 <netconn_recv_data+0x184>)
 800eb5e:	f00d fae1 	bl	801c124 <iprintf>
 800eb62:	f06f 030f 	mvn.w	r3, #15
 800eb66:	e092      	b.n	800ec8e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3310      	adds	r3, #16
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f00c fff7 	bl	801bb60 <sys_mbox_valid>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d10e      	bne.n	800eb96 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f000 fad4 	bl	800f126 <netconn_err>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800eb82:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800eb8a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800eb8e:	e07e      	b.n	800ec8e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800eb90:	f06f 030a 	mvn.w	r3, #10
 800eb94:	e07b      	b.n	800ec8e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	7f1b      	ldrb	r3, [r3, #28]
 800eb9a:	f003 0302 	and.w	r3, r3, #2
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10f      	bne.n	800ebc2 <netconn_recv_data+0xa6>
 800eba2:	79fb      	ldrb	r3, [r7, #7]
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10a      	bne.n	800ebc2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	7f1b      	ldrb	r3, [r3, #28]
 800ebb0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d104      	bne.n	800ebc2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d023      	beq.n	800ec0a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3310      	adds	r3, #16
 800ebc6:	f107 0218 	add.w	r2, r7, #24
 800ebca:	4611      	mov	r1, r2
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f00c ffb0 	bl	801bb32 <sys_arch_mbox_tryfetch>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebd8:	d11f      	bne.n	800ec1a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 faa3 	bl	800f126 <netconn_err>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ebe4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ebec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ebf0:	e04d      	b.n	800ec8e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	7f1b      	ldrb	r3, [r3, #28]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d002      	beq.n	800ec04 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ebfe:	f06f 030a 	mvn.w	r3, #10
 800ec02:	e044      	b.n	800ec8e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ec04:	f06f 0306 	mvn.w	r3, #6
 800ec08:	e041      	b.n	800ec8e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3310      	adds	r3, #16
 800ec0e:	f107 0118 	add.w	r1, r7, #24
 800ec12:	2200      	movs	r2, #0
 800ec14:	4618      	mov	r0, r3
 800ec16:	f00c ff5b 	bl	801bad0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec22:	2b10      	cmp	r3, #16
 800ec24:	d117      	bne.n	800ec56 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	f107 0217 	add.w	r2, r7, #23
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 faca 	bl	800f1c8 <lwip_netconn_is_err_msg>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ec3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec3e:	f113 0f0f 	cmn.w	r3, #15
 800ec42:	d101      	bne.n	800ec48 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	e022      	b.n	800ec8e <netconn_recv_data+0x172>
      }
      return err;
 800ec48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec4c:	e01f      	b.n	800ec8e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	891b      	ldrh	r3, [r3, #8]
 800ec52:	83fb      	strh	r3, [r7, #30]
 800ec54:	e00d      	b.n	800ec72 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d106      	bne.n	800ec6a <netconn_recv_data+0x14e>
 800ec5c:	4b0e      	ldr	r3, [pc, #56]	; (800ec98 <netconn_recv_data+0x17c>)
 800ec5e:	f240 2291 	movw	r2, #657	; 0x291
 800ec62:	4911      	ldr	r1, [pc, #68]	; (800eca8 <netconn_recv_data+0x18c>)
 800ec64:	480e      	ldr	r0, [pc, #56]	; (800eca0 <netconn_recv_data+0x184>)
 800ec66:	f00d fa5d 	bl	801c124 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	891b      	ldrh	r3, [r3, #8]
 800ec70:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d005      	beq.n	800ec86 <netconn_recv_data+0x16a>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	8bfa      	ldrh	r2, [r7, #30]
 800ec80:	2101      	movs	r1, #1
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ec86:	69ba      	ldr	r2, [r7, #24]
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3720      	adds	r7, #32
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	0801df6c 	.word	0x0801df6c
 800ec9c:	0801e184 	.word	0x0801e184
 800eca0:	0801dfc4 	.word	0x0801dfc4
 800eca4:	0801e1a4 	.word	0x0801e1a4
 800eca8:	0801e1c0 	.word	0x0801e1c0

0800ecac <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d005      	beq.n	800ecca <netconn_tcp_recvd_msg+0x1e>
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecc6:	2b10      	cmp	r3, #16
 800ecc8:	d009      	beq.n	800ecde <netconn_tcp_recvd_msg+0x32>
 800ecca:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <netconn_tcp_recvd_msg+0x50>)
 800eccc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ecd0:	490b      	ldr	r1, [pc, #44]	; (800ed00 <netconn_tcp_recvd_msg+0x54>)
 800ecd2:	480c      	ldr	r0, [pc, #48]	; (800ed04 <netconn_tcp_recvd_msg+0x58>)
 800ecd4:	f00d fa26 	bl	801c124 <iprintf>
 800ecd8:	f06f 030f 	mvn.w	r3, #15
 800ecdc:	e00a      	b.n	800ecf4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68fa      	ldr	r2, [r7, #12]
 800ece2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ecea:	6879      	ldr	r1, [r7, #4]
 800ecec:	4806      	ldr	r0, [pc, #24]	; (800ed08 <netconn_tcp_recvd_msg+0x5c>)
 800ecee:	f7ff fd4d 	bl	800e78c <netconn_apimsg>
 800ecf2:	4603      	mov	r3, r0
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	0801df6c 	.word	0x0801df6c
 800ed00:	0801e1cc 	.word	0x0801e1cc
 800ed04:	0801dfc4 	.word	0x0801dfc4
 800ed08:	080102d5 	.word	0x080102d5

0800ed0c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b090      	sub	sp, #64	; 0x40
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	4613      	mov	r3, r2
 800ed18:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3310      	adds	r3, #16
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f00c ff1e 	bl	801bb60 <sys_mbox_valid>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d102      	bne.n	800ed30 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ed2a:	f06f 030a 	mvn.w	r3, #10
 800ed2e:	e06d      	b.n	800ee0c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	7f1b      	ldrb	r3, [r3, #28]
 800ed34:	b25b      	sxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	da07      	bge.n	800ed4a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	7f1b      	ldrb	r3, [r3, #28]
 800ed3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ed48:	e039      	b.n	800edbe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ed4a:	79fb      	ldrb	r3, [r7, #7]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	68b9      	ldr	r1, [r7, #8]
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff fee3 	bl	800eb1c <netconn_recv_data>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ed5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ed64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed68:	e050      	b.n	800ee0c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	f003 0308 	and.w	r3, r3, #8
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10e      	bne.n	800ed98 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ed7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <netconn_recv_data_tcp+0x7a>
 800ed80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed82:	891b      	ldrh	r3, [r3, #8]
 800ed84:	e000      	b.n	800ed88 <netconn_recv_data_tcp+0x7c>
 800ed86:	2301      	movs	r3, #1
 800ed88:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ed8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed8c:	f107 0214 	add.w	r2, r7, #20
 800ed90:	4619      	mov	r1, r3
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	f7ff ff8a 	bl	800ecac <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d134      	bne.n	800ee08 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ed9e:	79fb      	ldrb	r3, [r7, #7]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d009      	beq.n	800edbc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	7f1b      	ldrb	r3, [r3, #28]
 800edac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edb0:	b2da      	uxtb	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800edb6:	f06f 0306 	mvn.w	r3, #6
 800edba:	e027      	b.n	800ee0c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800edbc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d005      	beq.n	800edd2 <netconn_recv_data_tcp+0xc6>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edca:	2200      	movs	r2, #0
 800edcc:	2101      	movs	r1, #1
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d10f      	bne.n	800edfa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f000 f9a3 	bl	800f126 <netconn_err>
 800ede0:	4603      	mov	r3, r0
 800ede2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ede6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <netconn_recv_data_tcp+0xe8>
          return err;
 800edee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edf2:	e00b      	b.n	800ee0c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800edf4:	f06f 030d 	mvn.w	r3, #13
 800edf8:	e008      	b.n	800ee0c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800edfa:	2101      	movs	r1, #1
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 f955 	bl	800f0ac <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ee02:	f06f 030e 	mvn.w	r3, #14
 800ee06:	e001      	b.n	800ee0c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ee08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3740      	adds	r7, #64	; 0x40
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d109      	bne.n	800ee3c <netconn_recv+0x28>
 800ee28:	4b32      	ldr	r3, [pc, #200]	; (800eef4 <netconn_recv+0xe0>)
 800ee2a:	f240 3263 	movw	r2, #867	; 0x363
 800ee2e:	4932      	ldr	r1, [pc, #200]	; (800eef8 <netconn_recv+0xe4>)
 800ee30:	4832      	ldr	r0, [pc, #200]	; (800eefc <netconn_recv+0xe8>)
 800ee32:	f00d f977 	bl	801c124 <iprintf>
 800ee36:	f06f 030f 	mvn.w	r3, #15
 800ee3a:	e056      	b.n	800eeea <netconn_recv+0xd6>
  *new_buf = NULL;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d109      	bne.n	800ee5c <netconn_recv+0x48>
 800ee48:	4b2a      	ldr	r3, [pc, #168]	; (800eef4 <netconn_recv+0xe0>)
 800ee4a:	f240 3265 	movw	r2, #869	; 0x365
 800ee4e:	492c      	ldr	r1, [pc, #176]	; (800ef00 <netconn_recv+0xec>)
 800ee50:	482a      	ldr	r0, [pc, #168]	; (800eefc <netconn_recv+0xe8>)
 800ee52:	f00d f967 	bl	801c124 <iprintf>
 800ee56:	f06f 030f 	mvn.w	r3, #15
 800ee5a:	e046      	b.n	800eeea <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee64:	2b10      	cmp	r3, #16
 800ee66:	d13a      	bne.n	800eede <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ee6c:	2006      	movs	r0, #6
 800ee6e:	f002 fc9d 	bl	80117ac <memp_malloc>
 800ee72:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d102      	bne.n	800ee80 <netconn_recv+0x6c>
      return ERR_MEM;
 800ee7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee7e:	e034      	b.n	800eeea <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ee80:	f107 030c 	add.w	r3, r7, #12
 800ee84:	2200      	movs	r2, #0
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff ff3f 	bl	800ed0c <netconn_recv_data_tcp>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ee92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d006      	beq.n	800eea8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ee9a:	6979      	ldr	r1, [r7, #20]
 800ee9c:	2006      	movs	r0, #6
 800ee9e:	f002 fcd7 	bl	8011850 <memp_free>
      return err;
 800eea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eea6:	e020      	b.n	800eeea <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <netconn_recv+0xa8>
 800eeae:	4b11      	ldr	r3, [pc, #68]	; (800eef4 <netconn_recv+0xe0>)
 800eeb0:	f240 3279 	movw	r2, #889	; 0x379
 800eeb4:	4913      	ldr	r1, [pc, #76]	; (800ef04 <netconn_recv+0xf0>)
 800eeb6:	4811      	ldr	r0, [pc, #68]	; (800eefc <netconn_recv+0xe8>)
 800eeb8:	f00d f934 	bl	801c124 <iprintf>

    buf->p = p;
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	2200      	movs	r2, #0
 800eecc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	2200      	movs	r2, #0
 800eed2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	697a      	ldr	r2, [r7, #20]
 800eed8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800eeda:	2300      	movs	r3, #0
 800eedc:	e005      	b.n	800eeea <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800eede:	2200      	movs	r2, #0
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fe1a 	bl	800eb1c <netconn_recv_data>
 800eee8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	0801df6c 	.word	0x0801df6c
 800eef8:	0801e184 	.word	0x0801e184
 800eefc:	0801dfc4 	.word	0x0801dfc4
 800ef00:	0801e1a4 	.word	0x0801e1a4
 800ef04:	0801e21c 	.word	0x0801e21c

0800ef08 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af02      	add	r7, sp, #8
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
 800ef14:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ef1e:	78fa      	ldrb	r2, [r7, #3]
 800ef20:	f107 0110 	add.w	r1, r7, #16
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	4613      	mov	r3, r2
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f000 f805 	bl	800ef3c <netconn_write_vectors_partly>
 800ef32:	4603      	mov	r3, r0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3718      	adds	r7, #24
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b092      	sub	sp, #72	; 0x48
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	4611      	mov	r1, r2
 800ef48:	461a      	mov	r2, r3
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	80fb      	strh	r3, [r7, #6]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d109      	bne.n	800ef6c <netconn_write_vectors_partly+0x30>
 800ef58:	4b4e      	ldr	r3, [pc, #312]	; (800f094 <netconn_write_vectors_partly+0x158>)
 800ef5a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ef5e:	494e      	ldr	r1, [pc, #312]	; (800f098 <netconn_write_vectors_partly+0x15c>)
 800ef60:	484e      	ldr	r0, [pc, #312]	; (800f09c <netconn_write_vectors_partly+0x160>)
 800ef62:	f00d f8df 	bl	801c124 <iprintf>
 800ef66:	f06f 030f 	mvn.w	r3, #15
 800ef6a:	e08e      	b.n	800f08a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef74:	2b10      	cmp	r3, #16
 800ef76:	d009      	beq.n	800ef8c <netconn_write_vectors_partly+0x50>
 800ef78:	4b46      	ldr	r3, [pc, #280]	; (800f094 <netconn_write_vectors_partly+0x158>)
 800ef7a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ef7e:	4948      	ldr	r1, [pc, #288]	; (800f0a0 <netconn_write_vectors_partly+0x164>)
 800ef80:	4846      	ldr	r0, [pc, #280]	; (800f09c <netconn_write_vectors_partly+0x160>)
 800ef82:	f00d f8cf 	bl	801c124 <iprintf>
 800ef86:	f06f 0305 	mvn.w	r3, #5
 800ef8a:	e07e      	b.n	800f08a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	7f1b      	ldrb	r3, [r3, #28]
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d104      	bne.n	800efa2 <netconn_write_vectors_partly+0x66>
 800ef98:	797b      	ldrb	r3, [r7, #5]
 800ef9a:	f003 0304 	and.w	r3, r3, #4
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d001      	beq.n	800efa6 <netconn_write_vectors_partly+0x6a>
 800efa2:	2301      	movs	r3, #1
 800efa4:	e000      	b.n	800efa8 <netconn_write_vectors_partly+0x6c>
 800efa6:	2300      	movs	r3, #0
 800efa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800efac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d005      	beq.n	800efc0 <netconn_write_vectors_partly+0x84>
 800efb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d102      	bne.n	800efc0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800efba:	f06f 0305 	mvn.w	r3, #5
 800efbe:	e064      	b.n	800f08a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800efc0:	2300      	movs	r3, #0
 800efc2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800efc4:	2300      	movs	r3, #0
 800efc6:	643b      	str	r3, [r7, #64]	; 0x40
 800efc8:	e015      	b.n	800eff6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800efca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efcc:	00db      	lsls	r3, r3, #3
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	4413      	add	r3, r2
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efd6:	4413      	add	r3, r2
 800efd8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800efda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efdc:	00db      	lsls	r3, r3, #3
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	4413      	add	r3, r2
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d202      	bcs.n	800eff0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800efea:	f06f 0305 	mvn.w	r3, #5
 800efee:	e04c      	b.n	800f08a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800eff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff2:	3301      	adds	r3, #1
 800eff4:	643b      	str	r3, [r7, #64]	; 0x40
 800eff6:	88fb      	ldrh	r3, [r7, #6]
 800eff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800effa:	429a      	cmp	r2, r3
 800effc:	dbe5      	blt.n	800efca <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800effe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	e040      	b.n	800f08a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	da0a      	bge.n	800f024 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f010:	2b00      	cmp	r3, #0
 800f012:	d102      	bne.n	800f01a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f014:	f06f 0305 	mvn.w	r3, #5
 800f018:	e037      	b.n	800f08a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f01a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f01e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f02c:	88fb      	ldrh	r3, [r7, #6]
 800f02e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f030:	2300      	movs	r3, #0
 800f032:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f034:	797b      	ldrb	r3, [r7, #5]
 800f036:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f03c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f042:	f107 0314 	add.w	r3, r7, #20
 800f046:	4619      	mov	r1, r3
 800f048:	4816      	ldr	r0, [pc, #88]	; (800f0a4 <netconn_write_vectors_partly+0x168>)
 800f04a:	f7ff fb9f 	bl	800e78c <netconn_apimsg>
 800f04e:	4603      	mov	r3, r0
 800f050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f054:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d114      	bne.n	800f086 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f066:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f068:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10a      	bne.n	800f086 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f074:	429a      	cmp	r2, r3
 800f076:	d006      	beq.n	800f086 <netconn_write_vectors_partly+0x14a>
 800f078:	4b06      	ldr	r3, [pc, #24]	; (800f094 <netconn_write_vectors_partly+0x158>)
 800f07a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f07e:	490a      	ldr	r1, [pc, #40]	; (800f0a8 <netconn_write_vectors_partly+0x16c>)
 800f080:	4806      	ldr	r0, [pc, #24]	; (800f09c <netconn_write_vectors_partly+0x160>)
 800f082:	f00d f84f 	bl	801c124 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f086:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3748      	adds	r7, #72	; 0x48
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	0801df6c 	.word	0x0801df6c
 800f098:	0801e244 	.word	0x0801e244
 800f09c:	0801dfc4 	.word	0x0801dfc4
 800f0a0:	0801e260 	.word	0x0801e260
 800f0a4:	080106dd 	.word	0x080106dd
 800f0a8:	0801e284 	.word	0x0801e284

0800f0ac <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b08c      	sub	sp, #48	; 0x30
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d109      	bne.n	800f0d2 <netconn_close_shutdown+0x26>
 800f0be:	4b0f      	ldr	r3, [pc, #60]	; (800f0fc <netconn_close_shutdown+0x50>)
 800f0c0:	f240 4247 	movw	r2, #1095	; 0x447
 800f0c4:	490e      	ldr	r1, [pc, #56]	; (800f100 <netconn_close_shutdown+0x54>)
 800f0c6:	480f      	ldr	r0, [pc, #60]	; (800f104 <netconn_close_shutdown+0x58>)
 800f0c8:	f00d f82c 	bl	801c124 <iprintf>
 800f0cc:	f06f 030f 	mvn.w	r3, #15
 800f0d0:	e010      	b.n	800f0f4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f0d6:	78fb      	ldrb	r3, [r7, #3]
 800f0d8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f0da:	2329      	movs	r3, #41	; 0x29
 800f0dc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f0de:	f107 030c 	add.w	r3, r7, #12
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4808      	ldr	r0, [pc, #32]	; (800f108 <netconn_close_shutdown+0x5c>)
 800f0e6:	f7ff fb51 	bl	800e78c <netconn_apimsg>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f0f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3730      	adds	r7, #48	; 0x30
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	0801df6c 	.word	0x0801df6c
 800f100:	0801e2a8 	.word	0x0801e2a8
 800f104:	0801dfc4 	.word	0x0801dfc4
 800f108:	080107f5 	.word	0x080107f5

0800f10c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f114:	2103      	movs	r1, #3
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff ffc8 	bl	800f0ac <netconn_close_shutdown>
 800f11c:	4603      	mov	r3, r0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3708      	adds	r7, #8
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b084      	sub	sp, #16
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d101      	bne.n	800f138 <netconn_err+0x12>
    return ERR_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	e00d      	b.n	800f154 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f138:	f00c fe1c 	bl	801bd74 <sys_arch_protect>
 800f13c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	7a1b      	ldrb	r3, [r3, #8]
 800f142:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f00c fe20 	bl	801bd90 <sys_arch_unprotect>
  return err;
 800f150:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f154:	4618      	mov	r0, r3
 800f156:	3710      	adds	r7, #16
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	4603      	mov	r3, r0
 800f164:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f16a:	f113 0f0d 	cmn.w	r3, #13
 800f16e:	d009      	beq.n	800f184 <lwip_netconn_err_to_msg+0x28>
 800f170:	f113 0f0d 	cmn.w	r3, #13
 800f174:	dc0c      	bgt.n	800f190 <lwip_netconn_err_to_msg+0x34>
 800f176:	f113 0f0f 	cmn.w	r3, #15
 800f17a:	d007      	beq.n	800f18c <lwip_netconn_err_to_msg+0x30>
 800f17c:	f113 0f0e 	cmn.w	r3, #14
 800f180:	d002      	beq.n	800f188 <lwip_netconn_err_to_msg+0x2c>
 800f182:	e005      	b.n	800f190 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f184:	4b0a      	ldr	r3, [pc, #40]	; (800f1b0 <lwip_netconn_err_to_msg+0x54>)
 800f186:	e00e      	b.n	800f1a6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f188:	4b0a      	ldr	r3, [pc, #40]	; (800f1b4 <lwip_netconn_err_to_msg+0x58>)
 800f18a:	e00c      	b.n	800f1a6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f18c:	4b0a      	ldr	r3, [pc, #40]	; (800f1b8 <lwip_netconn_err_to_msg+0x5c>)
 800f18e:	e00a      	b.n	800f1a6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d005      	beq.n	800f1a4 <lwip_netconn_err_to_msg+0x48>
 800f198:	4b08      	ldr	r3, [pc, #32]	; (800f1bc <lwip_netconn_err_to_msg+0x60>)
 800f19a:	227d      	movs	r2, #125	; 0x7d
 800f19c:	4908      	ldr	r1, [pc, #32]	; (800f1c0 <lwip_netconn_err_to_msg+0x64>)
 800f19e:	4809      	ldr	r0, [pc, #36]	; (800f1c4 <lwip_netconn_err_to_msg+0x68>)
 800f1a0:	f00c ffc0 	bl	801c124 <iprintf>
      return NULL;
 800f1a4:	2300      	movs	r3, #0
  }
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	08021754 	.word	0x08021754
 800f1b4:	08021755 	.word	0x08021755
 800f1b8:	08021756 	.word	0x08021756
 800f1bc:	0801e2c4 	.word	0x0801e2c4
 800f1c0:	0801e2f8 	.word	0x0801e2f8
 800f1c4:	0801e308 	.word	0x0801e308

0800f1c8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d105      	bne.n	800f1e4 <lwip_netconn_is_err_msg+0x1c>
 800f1d8:	4b12      	ldr	r3, [pc, #72]	; (800f224 <lwip_netconn_is_err_msg+0x5c>)
 800f1da:	2285      	movs	r2, #133	; 0x85
 800f1dc:	4912      	ldr	r1, [pc, #72]	; (800f228 <lwip_netconn_is_err_msg+0x60>)
 800f1de:	4813      	ldr	r0, [pc, #76]	; (800f22c <lwip_netconn_is_err_msg+0x64>)
 800f1e0:	f00c ffa0 	bl	801c124 <iprintf>

  if (msg == &netconn_aborted) {
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a12      	ldr	r2, [pc, #72]	; (800f230 <lwip_netconn_is_err_msg+0x68>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d104      	bne.n	800f1f6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	22f3      	movs	r2, #243	; 0xf3
 800f1f0:	701a      	strb	r2, [r3, #0]
    return 1;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e012      	b.n	800f21c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a0e      	ldr	r2, [pc, #56]	; (800f234 <lwip_netconn_is_err_msg+0x6c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d104      	bne.n	800f208 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	22f2      	movs	r2, #242	; 0xf2
 800f202:	701a      	strb	r2, [r3, #0]
    return 1;
 800f204:	2301      	movs	r3, #1
 800f206:	e009      	b.n	800f21c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4a0b      	ldr	r2, [pc, #44]	; (800f238 <lwip_netconn_is_err_msg+0x70>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d104      	bne.n	800f21a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	22f1      	movs	r2, #241	; 0xf1
 800f214:	701a      	strb	r2, [r3, #0]
    return 1;
 800f216:	2301      	movs	r3, #1
 800f218:	e000      	b.n	800f21c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	0801e2c4 	.word	0x0801e2c4
 800f228:	0801e330 	.word	0x0801e330
 800f22c:	0801e308 	.word	0x0801e308
 800f230:	08021754 	.word	0x08021754
 800f234:	08021755 	.word	0x08021755
 800f238:	08021756 	.word	0x08021756

0800f23c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b088      	sub	sp, #32
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d105      	bne.n	800f25c <recv_udp+0x20>
 800f250:	4b34      	ldr	r3, [pc, #208]	; (800f324 <recv_udp+0xe8>)
 800f252:	22e5      	movs	r2, #229	; 0xe5
 800f254:	4934      	ldr	r1, [pc, #208]	; (800f328 <recv_udp+0xec>)
 800f256:	4835      	ldr	r0, [pc, #212]	; (800f32c <recv_udp+0xf0>)
 800f258:	f00c ff64 	bl	801c124 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d105      	bne.n	800f26e <recv_udp+0x32>
 800f262:	4b30      	ldr	r3, [pc, #192]	; (800f324 <recv_udp+0xe8>)
 800f264:	22e6      	movs	r2, #230	; 0xe6
 800f266:	4932      	ldr	r1, [pc, #200]	; (800f330 <recv_udp+0xf4>)
 800f268:	4830      	ldr	r0, [pc, #192]	; (800f32c <recv_udp+0xf0>)
 800f26a:	f00c ff5b 	bl	801c124 <iprintf>
  conn = (struct netconn *)arg;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d103      	bne.n	800f280 <recv_udp+0x44>
    pbuf_free(p);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f003 f98d 	bl	8012598 <pbuf_free>
    return;
 800f27e:	e04d      	b.n	800f31c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	429a      	cmp	r2, r3
 800f288:	d005      	beq.n	800f296 <recv_udp+0x5a>
 800f28a:	4b26      	ldr	r3, [pc, #152]	; (800f324 <recv_udp+0xe8>)
 800f28c:	22ee      	movs	r2, #238	; 0xee
 800f28e:	4929      	ldr	r1, [pc, #164]	; (800f334 <recv_udp+0xf8>)
 800f290:	4826      	ldr	r0, [pc, #152]	; (800f32c <recv_udp+0xf0>)
 800f292:	f00c ff47 	bl	801c124 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	3310      	adds	r3, #16
 800f29a:	4618      	mov	r0, r3
 800f29c:	f00c fc60 	bl	801bb60 <sys_mbox_valid>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d103      	bne.n	800f2ae <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f003 f976 	bl	8012598 <pbuf_free>
    return;
 800f2ac:	e036      	b.n	800f31c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f2ae:	2006      	movs	r0, #6
 800f2b0:	f002 fa7c 	bl	80117ac <memp_malloc>
 800f2b4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d103      	bne.n	800f2c4 <recv_udp+0x88>
    pbuf_free(p);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f003 f96b 	bl	8012598 <pbuf_free>
    return;
 800f2c2:	e02b      	b.n	800f31c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d002      	beq.n	800f2dc <recv_udp+0xa0>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	e000      	b.n	800f2de <recv_udp+0xa2>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	69ba      	ldr	r2, [r7, #24]
 800f2e0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f2e6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	891b      	ldrh	r3, [r3, #8]
 800f2ec:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	3310      	adds	r3, #16
 800f2f2:	69b9      	ldr	r1, [r7, #24]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f00c fbd1 	bl	801ba9c <sys_mbox_trypost>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f300:	69b8      	ldr	r0, [r7, #24]
 800f302:	f001 fb03 	bl	801090c <netbuf_delete>
    return;
 800f306:	e009      	b.n	800f31c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d005      	beq.n	800f31c <recv_udp+0xe0>
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	8afa      	ldrh	r2, [r7, #22]
 800f316:	2100      	movs	r1, #0
 800f318:	69f8      	ldr	r0, [r7, #28]
 800f31a:	4798      	blx	r3
  }
}
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	0801e2c4 	.word	0x0801e2c4
 800f328:	0801e33c 	.word	0x0801e33c
 800f32c:	0801e308 	.word	0x0801e308
 800f330:	0801e360 	.word	0x0801e360
 800f334:	0801e380 	.word	0x0801e380

0800f338 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b088      	sub	sp, #32
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d106      	bne.n	800f35a <recv_tcp+0x22>
 800f34c:	4b36      	ldr	r3, [pc, #216]	; (800f428 <recv_tcp+0xf0>)
 800f34e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f352:	4936      	ldr	r1, [pc, #216]	; (800f42c <recv_tcp+0xf4>)
 800f354:	4836      	ldr	r0, [pc, #216]	; (800f430 <recv_tcp+0xf8>)
 800f356:	f00c fee5 	bl	801c124 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d106      	bne.n	800f36e <recv_tcp+0x36>
 800f360:	4b31      	ldr	r3, [pc, #196]	; (800f428 <recv_tcp+0xf0>)
 800f362:	f240 122d 	movw	r2, #301	; 0x12d
 800f366:	4933      	ldr	r1, [pc, #204]	; (800f434 <recv_tcp+0xfc>)
 800f368:	4831      	ldr	r0, [pc, #196]	; (800f430 <recv_tcp+0xf8>)
 800f36a:	f00c fedb 	bl	801c124 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f36e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <recv_tcp+0x4c>
 800f376:	4b2c      	ldr	r3, [pc, #176]	; (800f428 <recv_tcp+0xf0>)
 800f378:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f37c:	492e      	ldr	r1, [pc, #184]	; (800f438 <recv_tcp+0x100>)
 800f37e:	482c      	ldr	r0, [pc, #176]	; (800f430 <recv_tcp+0xf8>)
 800f380:	f00c fed0 	bl	801c124 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d102      	bne.n	800f394 <recv_tcp+0x5c>
    return ERR_VAL;
 800f38e:	f06f 0305 	mvn.w	r3, #5
 800f392:	e045      	b.n	800f420 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d006      	beq.n	800f3ac <recv_tcp+0x74>
 800f39e:	4b22      	ldr	r3, [pc, #136]	; (800f428 <recv_tcp+0xf0>)
 800f3a0:	f240 1235 	movw	r2, #309	; 0x135
 800f3a4:	4925      	ldr	r1, [pc, #148]	; (800f43c <recv_tcp+0x104>)
 800f3a6:	4822      	ldr	r0, [pc, #136]	; (800f430 <recv_tcp+0xf8>)
 800f3a8:	f00c febc 	bl	801c124 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	3310      	adds	r3, #16
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f00c fbd5 	bl	801bb60 <sys_mbox_valid>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d10d      	bne.n	800f3d8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d008      	beq.n	800f3d4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	891b      	ldrh	r3, [r3, #8]
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	68b8      	ldr	r0, [r7, #8]
 800f3ca:	f004 f89d 	bl	8013508 <tcp_recved>
      pbuf_free(p);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f003 f8e2 	bl	8012598 <pbuf_free>
    }
    return ERR_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e023      	b.n	800f420 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d005      	beq.n	800f3ea <recv_tcp+0xb2>
    msg = p;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	891b      	ldrh	r3, [r3, #8]
 800f3e6:	83fb      	strh	r3, [r7, #30]
 800f3e8:	e003      	b.n	800f3f2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f3ea:	4b15      	ldr	r3, [pc, #84]	; (800f440 <recv_tcp+0x108>)
 800f3ec:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	3310      	adds	r3, #16
 800f3f6:	69b9      	ldr	r1, [r7, #24]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f00c fb4f 	bl	801ba9c <sys_mbox_trypost>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f408:	e00a      	b.n	800f420 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d005      	beq.n	800f41e <recv_tcp+0xe6>
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f416:	8bfa      	ldrh	r2, [r7, #30]
 800f418:	2100      	movs	r1, #0
 800f41a:	6978      	ldr	r0, [r7, #20]
 800f41c:	4798      	blx	r3
  }

  return ERR_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3720      	adds	r7, #32
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	0801e2c4 	.word	0x0801e2c4
 800f42c:	0801e3a0 	.word	0x0801e3a0
 800f430:	0801e308 	.word	0x0801e308
 800f434:	0801e3c4 	.word	0x0801e3c4
 800f438:	0801e3e4 	.word	0x0801e3e4
 800f43c:	0801e3fc 	.word	0x0801e3fc
 800f440:	08021756 	.word	0x08021756

0800f444 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <poll_tcp+0x22>
 800f458:	4b2a      	ldr	r3, [pc, #168]	; (800f504 <poll_tcp+0xc0>)
 800f45a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f45e:	492a      	ldr	r1, [pc, #168]	; (800f508 <poll_tcp+0xc4>)
 800f460:	482a      	ldr	r0, [pc, #168]	; (800f50c <poll_tcp+0xc8>)
 800f462:	f00c fe5f 	bl	801c124 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	785b      	ldrb	r3, [r3, #1]
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d104      	bne.n	800f478 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f46e:	2101      	movs	r1, #1
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f000 ff65 	bl	8010340 <lwip_netconn_do_writemore>
 800f476:	e016      	b.n	800f4a6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	785b      	ldrb	r3, [r3, #1]
 800f47c:	2b04      	cmp	r3, #4
 800f47e:	d112      	bne.n	800f4a6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6a1b      	ldr	r3, [r3, #32]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00a      	beq.n	800f49e <poll_tcp+0x5a>
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6a1b      	ldr	r3, [r3, #32]
 800f48c:	7a5b      	ldrb	r3, [r3, #9]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d005      	beq.n	800f49e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	7a5a      	ldrb	r2, [r3, #9]
 800f498:	3a01      	subs	r2, #1
 800f49a:	b2d2      	uxtb	r2, r2
 800f49c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f49e:	2101      	movs	r1, #1
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f000 fbfb 	bl	800fc9c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	7f1b      	ldrb	r3, [r3, #28]
 800f4aa:	f003 0310 	and.w	r3, r3, #16
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d022      	beq.n	800f4f8 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d01e      	beq.n	800f4f8 <poll_tcp+0xb4>
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f4c2:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d916      	bls.n	800f4f8 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f4d2:	2b04      	cmp	r3, #4
 800f4d4:	d810      	bhi.n	800f4f8 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	7f1b      	ldrb	r3, [r3, #28]
 800f4da:	f023 0310 	bic.w	r3, r3, #16
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d005      	beq.n	800f4f8 <poll_tcp+0xb4>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	2102      	movs	r1, #2
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f4f8:	2300      	movs	r3, #0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	0801e2c4 	.word	0x0801e2c4
 800f508:	0801e41c 	.word	0x0801e41c
 800f50c:	0801e308 	.word	0x0801e308

0800f510 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	4613      	mov	r3, r2
 800f51c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d106      	bne.n	800f536 <sent_tcp+0x26>
 800f528:	4b21      	ldr	r3, [pc, #132]	; (800f5b0 <sent_tcp+0xa0>)
 800f52a:	f240 1293 	movw	r2, #403	; 0x193
 800f52e:	4921      	ldr	r1, [pc, #132]	; (800f5b4 <sent_tcp+0xa4>)
 800f530:	4821      	ldr	r0, [pc, #132]	; (800f5b8 <sent_tcp+0xa8>)
 800f532:	f00c fdf7 	bl	801c124 <iprintf>

  if (conn) {
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d033      	beq.n	800f5a4 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	785b      	ldrb	r3, [r3, #1]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d104      	bne.n	800f54e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f544:	2101      	movs	r1, #1
 800f546:	6978      	ldr	r0, [r7, #20]
 800f548:	f000 fefa 	bl	8010340 <lwip_netconn_do_writemore>
 800f54c:	e007      	b.n	800f55e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	785b      	ldrb	r3, [r3, #1]
 800f552:	2b04      	cmp	r3, #4
 800f554:	d103      	bne.n	800f55e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f556:	2101      	movs	r1, #1
 800f558:	6978      	ldr	r0, [r7, #20]
 800f55a:	f000 fb9f 	bl	800fc9c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d01e      	beq.n	800f5a4 <sent_tcp+0x94>
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f56e:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800f572:	4293      	cmp	r3, r2
 800f574:	d916      	bls.n	800f5a4 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f57e:	2b04      	cmp	r3, #4
 800f580:	d810      	bhi.n	800f5a4 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	7f1b      	ldrb	r3, [r3, #28]
 800f586:	f023 0310 	bic.w	r3, r3, #16
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f594:	2b00      	cmp	r3, #0
 800f596:	d005      	beq.n	800f5a4 <sent_tcp+0x94>
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59c:	88fa      	ldrh	r2, [r7, #6]
 800f59e:	2102      	movs	r1, #2
 800f5a0:	6978      	ldr	r0, [r7, #20]
 800f5a2:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	0801e2c4 	.word	0x0801e2c4
 800f5b4:	0801e41c 	.word	0x0801e41c
 800f5b8:	0801e308 	.word	0x0801e308

0800f5bc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b088      	sub	sp, #32
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d106      	bne.n	800f5e0 <err_tcp+0x24>
 800f5d2:	4b5f      	ldr	r3, [pc, #380]	; (800f750 <err_tcp+0x194>)
 800f5d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f5d8:	495e      	ldr	r1, [pc, #376]	; (800f754 <err_tcp+0x198>)
 800f5da:	485f      	ldr	r0, [pc, #380]	; (800f758 <err_tcp+0x19c>)
 800f5dc:	f00c fda2 	bl	801c124 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f5e0:	f00c fbc8 	bl	801bd74 <sys_arch_protect>
 800f5e4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	78fa      	ldrb	r2, [r7, #3]
 800f5f0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	7f1b      	ldrb	r3, [r3, #28]
 800f5f6:	f043 0301 	orr.w	r3, r3, #1
 800f5fa:	b2da      	uxtb	r2, r3
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	785b      	ldrb	r3, [r3, #1]
 800f604:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	2200      	movs	r2, #0
 800f60a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f60c:	69b8      	ldr	r0, [r7, #24]
 800f60e:	f00c fbbf 	bl	801bd90 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f616:	2b00      	cmp	r3, #0
 800f618:	d005      	beq.n	800f626 <err_tcp+0x6a>
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61e:	2200      	movs	r2, #0
 800f620:	2104      	movs	r1, #4
 800f622:	69f8      	ldr	r0, [r7, #28]
 800f624:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d005      	beq.n	800f63a <err_tcp+0x7e>
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f632:	2200      	movs	r2, #0
 800f634:	2100      	movs	r1, #0
 800f636:	69f8      	ldr	r0, [r7, #28]
 800f638:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d005      	beq.n	800f64e <err_tcp+0x92>
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f646:	2200      	movs	r2, #0
 800f648:	2102      	movs	r1, #2
 800f64a:	69f8      	ldr	r0, [r7, #28]
 800f64c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f64e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff fd82 	bl	800f15c <lwip_netconn_err_to_msg>
 800f658:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	3310      	adds	r3, #16
 800f65e:	4618      	mov	r0, r3
 800f660:	f00c fa7e 	bl	801bb60 <sys_mbox_valid>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	3310      	adds	r3, #16
 800f66e:	6939      	ldr	r1, [r7, #16]
 800f670:	4618      	mov	r0, r3
 800f672:	f00c fa13 	bl	801ba9c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	3314      	adds	r3, #20
 800f67a:	4618      	mov	r0, r3
 800f67c:	f00c fa70 	bl	801bb60 <sys_mbox_valid>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d005      	beq.n	800f692 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	3314      	adds	r3, #20
 800f68a:	6939      	ldr	r1, [r7, #16]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f00c fa05 	bl	801ba9c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f692:	7dfb      	ldrb	r3, [r7, #23]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d005      	beq.n	800f6a4 <err_tcp+0xe8>
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	2b04      	cmp	r3, #4
 800f69c:	d002      	beq.n	800f6a4 <err_tcp+0xe8>
 800f69e:	7dfb      	ldrb	r3, [r7, #23]
 800f6a0:	2b03      	cmp	r3, #3
 800f6a2:	d143      	bne.n	800f72c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	7f1b      	ldrb	r3, [r3, #28]
 800f6a8:	f003 0304 	and.w	r3, r3, #4
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	bf14      	ite	ne
 800f6b0:	2301      	movne	r3, #1
 800f6b2:	2300      	moveq	r3, #0
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	7f1b      	ldrb	r3, [r3, #28]
 800f6bc:	f023 0304 	bic.w	r3, r3, #4
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d13b      	bne.n	800f744 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	6a1b      	ldr	r3, [r3, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d106      	bne.n	800f6e2 <err_tcp+0x126>
 800f6d4:	4b1e      	ldr	r3, [pc, #120]	; (800f750 <err_tcp+0x194>)
 800f6d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f6da:	4920      	ldr	r1, [pc, #128]	; (800f75c <err_tcp+0x1a0>)
 800f6dc:	481e      	ldr	r0, [pc, #120]	; (800f758 <err_tcp+0x19c>)
 800f6de:	f00c fd21 	bl	801c124 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f6e2:	7dfb      	ldrb	r3, [r7, #23]
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	d104      	bne.n	800f6f2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	6a1b      	ldr	r3, [r3, #32]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	711a      	strb	r2, [r3, #4]
 800f6f0:	e003      	b.n	800f6fa <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	78fa      	ldrb	r2, [r7, #3]
 800f6f8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	6a1b      	ldr	r3, [r3, #32]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	330c      	adds	r3, #12
 800f702:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f704:	68b8      	ldr	r0, [r7, #8]
 800f706:	f00c fab9 	bl	801bc7c <sys_sem_valid>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d106      	bne.n	800f71e <err_tcp+0x162>
 800f710:	4b0f      	ldr	r3, [pc, #60]	; (800f750 <err_tcp+0x194>)
 800f712:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f716:	4912      	ldr	r1, [pc, #72]	; (800f760 <err_tcp+0x1a4>)
 800f718:	480f      	ldr	r0, [pc, #60]	; (800f758 <err_tcp+0x19c>)
 800f71a:	f00c fd03 	bl	801c124 <iprintf>
      conn->current_msg = NULL;
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	2200      	movs	r2, #0
 800f722:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f724:	68b8      	ldr	r0, [r7, #8]
 800f726:	f00c fa8f 	bl	801bc48 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f72a:	e00b      	b.n	800f744 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	6a1b      	ldr	r3, [r3, #32]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d008      	beq.n	800f746 <err_tcp+0x18a>
 800f734:	4b06      	ldr	r3, [pc, #24]	; (800f750 <err_tcp+0x194>)
 800f736:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f73a:	490a      	ldr	r1, [pc, #40]	; (800f764 <err_tcp+0x1a8>)
 800f73c:	4806      	ldr	r0, [pc, #24]	; (800f758 <err_tcp+0x19c>)
 800f73e:	f00c fcf1 	bl	801c124 <iprintf>
  }
}
 800f742:	e000      	b.n	800f746 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f744:	bf00      	nop
}
 800f746:	bf00      	nop
 800f748:	3720      	adds	r7, #32
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	0801e2c4 	.word	0x0801e2c4
 800f754:	0801e41c 	.word	0x0801e41c
 800f758:	0801e308 	.word	0x0801e308
 800f75c:	0801e42c 	.word	0x0801e42c
 800f760:	0801e448 	.word	0x0801e448
 800f764:	0801e464 	.word	0x0801e464

0800f768 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f776:	6879      	ldr	r1, [r7, #4]
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f004 fd8b 	bl	8014294 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f77e:	490a      	ldr	r1, [pc, #40]	; (800f7a8 <setup_tcp+0x40>)
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f004 fd99 	bl	80142b8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f786:	4909      	ldr	r1, [pc, #36]	; (800f7ac <setup_tcp+0x44>)
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f004 fdb7 	bl	80142fc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f78e:	2202      	movs	r2, #2
 800f790:	4907      	ldr	r1, [pc, #28]	; (800f7b0 <setup_tcp+0x48>)
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f004 fe0e 	bl	80143b4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f798:	4906      	ldr	r1, [pc, #24]	; (800f7b4 <setup_tcp+0x4c>)
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f004 fdd0 	bl	8014340 <tcp_err>
}
 800f7a0:	bf00      	nop
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	0800f339 	.word	0x0800f339
 800f7ac:	0800f511 	.word	0x0800f511
 800f7b0:	0800f445 	.word	0x0800f445
 800f7b4:	0800f5bd 	.word	0x0800f5bd

0800f7b8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f7b8:	b590      	push	{r4, r7, lr}
 800f7ba:	b089      	sub	sp, #36	; 0x24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d102      	bne.n	800f7d6 <accept_function+0x1e>
    return ERR_VAL;
 800f7d0:	f06f 0305 	mvn.w	r3, #5
 800f7d4:	e0a1      	b.n	800f91a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	3314      	adds	r3, #20
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f00c f9c0 	bl	801bb60 <sys_mbox_valid>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d102      	bne.n	800f7ec <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f7e6:	f06f 0305 	mvn.w	r3, #5
 800f7ea:	e096      	b.n	800f91a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d11b      	bne.n	800f82a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	f103 0414 	add.w	r4, r3, #20
 800f7f8:	f06f 000c 	mvn.w	r0, #12
 800f7fc:	f7ff fcae 	bl	800f15c <lwip_netconn_err_to_msg>
 800f800:	4603      	mov	r3, r0
 800f802:	4619      	mov	r1, r3
 800f804:	4620      	mov	r0, r4
 800f806:	f00c f949 	bl	801ba9c <sys_mbox_trypost>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d109      	bne.n	800f824 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <accept_function+0x6c>
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81c:	2200      	movs	r2, #0
 800f81e:	2100      	movs	r1, #0
 800f820:	69f8      	ldr	r0, [r7, #28]
 800f822:	4798      	blx	r3
    }
    return ERR_VAL;
 800f824:	f06f 0305 	mvn.w	r3, #5
 800f828:	e077      	b.n	800f91a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d006      	beq.n	800f840 <accept_function+0x88>
 800f832:	4b3c      	ldr	r3, [pc, #240]	; (800f924 <accept_function+0x16c>)
 800f834:	f240 222a 	movw	r2, #554	; 0x22a
 800f838:	493b      	ldr	r1, [pc, #236]	; (800f928 <accept_function+0x170>)
 800f83a:	483c      	ldr	r0, [pc, #240]	; (800f92c <accept_function+0x174>)
 800f83c:	f00c fc72 	bl	801c124 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	781a      	ldrb	r2, [r3, #0]
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f848:	4619      	mov	r1, r3
 800f84a:	4610      	mov	r0, r2
 800f84c:	f000 f8f0 	bl	800fa30 <netconn_alloc>
 800f850:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d11b      	bne.n	800f890 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	f103 0414 	add.w	r4, r3, #20
 800f85e:	f06f 000c 	mvn.w	r0, #12
 800f862:	f7ff fc7b 	bl	800f15c <lwip_netconn_err_to_msg>
 800f866:	4603      	mov	r3, r0
 800f868:	4619      	mov	r1, r3
 800f86a:	4620      	mov	r0, r4
 800f86c:	f00c f916 	bl	801ba9c <sys_mbox_trypost>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d109      	bne.n	800f88a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d005      	beq.n	800f88a <accept_function+0xd2>
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f882:	2200      	movs	r2, #0
 800f884:	2100      	movs	r1, #0
 800f886:	69f8      	ldr	r0, [r7, #28]
 800f888:	4798      	blx	r3
    }
    return ERR_MEM;
 800f88a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f88e:	e044      	b.n	800f91a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f896:	69b8      	ldr	r0, [r7, #24]
 800f898:	f7ff ff66 	bl	800f768 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	3314      	adds	r3, #20
 800f8a0:	69b9      	ldr	r1, [r7, #24]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f00c f8fa 	bl	801ba9c <sys_mbox_trypost>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d02a      	beq.n	800f904 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	6978      	ldr	r0, [r7, #20]
 800f8b8:	f004 fcec 	bl	8014294 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f8bc:	2100      	movs	r1, #0
 800f8be:	6978      	ldr	r0, [r7, #20]
 800f8c0:	f004 fcfa 	bl	80142b8 <tcp_recv>
    tcp_sent(pcb, NULL);
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	6978      	ldr	r0, [r7, #20]
 800f8c8:	f004 fd18 	bl	80142fc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	6978      	ldr	r0, [r7, #20]
 800f8d2:	f004 fd6f 	bl	80143b4 <tcp_poll>
    tcp_err(pcb, NULL);
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	6978      	ldr	r0, [r7, #20]
 800f8da:	f004 fd31 	bl	8014340 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	3310      	adds	r3, #16
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f00c f8c5 	bl	801ba78 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	3310      	adds	r3, #16
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f00c f945 	bl	801bb82 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f8f8:	69b8      	ldr	r0, [r7, #24]
 800f8fa:	f000 f907 	bl	800fb0c <netconn_free>
    return ERR_MEM;
 800f8fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f902:	e00a      	b.n	800f91a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d005      	beq.n	800f918 <accept_function+0x160>
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f910:	2200      	movs	r2, #0
 800f912:	2100      	movs	r1, #0
 800f914:	69f8      	ldr	r0, [r7, #28]
 800f916:	4798      	blx	r3
  }

  return ERR_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3724      	adds	r7, #36	; 0x24
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd90      	pop	{r4, r7, pc}
 800f922:	bf00      	nop
 800f924:	0801e2c4 	.word	0x0801e2c4
 800f928:	0801e480 	.word	0x0801e480
 800f92c:	0801e308 	.word	0x0801e308

0800f930 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f930:	b590      	push	{r4, r7, lr}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d006      	beq.n	800f954 <pcb_new+0x24>
 800f946:	4b2b      	ldr	r3, [pc, #172]	; (800f9f4 <pcb_new+0xc4>)
 800f948:	f240 2265 	movw	r2, #613	; 0x265
 800f94c:	492a      	ldr	r1, [pc, #168]	; (800f9f8 <pcb_new+0xc8>)
 800f94e:	482b      	ldr	r0, [pc, #172]	; (800f9fc <pcb_new+0xcc>)
 800f950:	f00c fbe8 	bl	801c124 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f95e:	2b10      	cmp	r3, #16
 800f960:	d022      	beq.n	800f9a8 <pcb_new+0x78>
 800f962:	2b20      	cmp	r3, #32
 800f964:	d133      	bne.n	800f9ce <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681c      	ldr	r4, [r3, #0]
 800f96a:	7bfb      	ldrb	r3, [r7, #15]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f009 fd6c 	bl	801944a <udp_new_ip_type>
 800f972:	4603      	mov	r3, r0
 800f974:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d02a      	beq.n	800f9d6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	2b22      	cmp	r3, #34	; 0x22
 800f988:	d104      	bne.n	800f994 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	2201      	movs	r2, #1
 800f992:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	6858      	ldr	r0, [r3, #4]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	4917      	ldr	r1, [pc, #92]	; (800fa00 <pcb_new+0xd0>)
 800f9a2:	f009 fcd9 	bl	8019358 <udp_recv>
      }
      break;
 800f9a6:	e016      	b.n	800f9d6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681c      	ldr	r4, [r3, #0]
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f004 fc62 	bl	8014278 <tcp_new_ip_type>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00b      	beq.n	800f9da <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7ff fece 	bl	800f768 <setup_tcp>
      }
      break;
 800f9cc:	e005      	b.n	800f9da <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	22fa      	movs	r2, #250	; 0xfa
 800f9d2:	711a      	strb	r2, [r3, #4]
      return;
 800f9d4:	e00a      	b.n	800f9ec <pcb_new+0xbc>
      break;
 800f9d6:	bf00      	nop
 800f9d8:	e000      	b.n	800f9dc <pcb_new+0xac>
      break;
 800f9da:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d102      	bne.n	800f9ec <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	22ff      	movs	r2, #255	; 0xff
 800f9ea:	711a      	strb	r2, [r3, #4]
  }
}
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd90      	pop	{r4, r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0801e2c4 	.word	0x0801e2c4
 800f9f8:	0801e4a8 	.word	0x0801e4a8
 800f9fc:	0801e308 	.word	0x0801e308
 800fa00:	0800f23d 	.word	0x0800f23d

0800fa04 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d102      	bne.n	800fa26 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff ff85 	bl	800f930 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fa26:	bf00      	nop
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
	...

0800fa30 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	4603      	mov	r3, r0
 800fa38:	6039      	str	r1, [r7, #0]
 800fa3a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fa40:	2007      	movs	r0, #7
 800fa42:	f001 feb3 	bl	80117ac <memp_malloc>
 800fa46:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d101      	bne.n	800fa52 <netconn_alloc+0x22>
    return NULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	e052      	b.n	800faf8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2200      	movs	r2, #0
 800fa56:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	79fa      	ldrb	r2, [r7, #7]
 800fa5c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fa64:	79fb      	ldrb	r3, [r7, #7]
 800fa66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa6a:	2b10      	cmp	r3, #16
 800fa6c:	d004      	beq.n	800fa78 <netconn_alloc+0x48>
 800fa6e:	2b20      	cmp	r3, #32
 800fa70:	d105      	bne.n	800fa7e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fa72:	2306      	movs	r3, #6
 800fa74:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800fa76:	e00a      	b.n	800fa8e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800fa78:	2306      	movs	r3, #6
 800fa7a:	617b      	str	r3, [r7, #20]
      break;
 800fa7c:	e007      	b.n	800fa8e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800fa7e:	4b20      	ldr	r3, [pc, #128]	; (800fb00 <netconn_alloc+0xd0>)
 800fa80:	f240 22e5 	movw	r2, #741	; 0x2e5
 800fa84:	491f      	ldr	r1, [pc, #124]	; (800fb04 <netconn_alloc+0xd4>)
 800fa86:	4820      	ldr	r0, [pc, #128]	; (800fb08 <netconn_alloc+0xd8>)
 800fa88:	f00c fb4c 	bl	801c124 <iprintf>
      goto free_and_return;
 800fa8c:	e02f      	b.n	800faee <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3310      	adds	r3, #16
 800fa92:	6979      	ldr	r1, [r7, #20]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f00b ffd5 	bl	801ba44 <sys_mbox_new>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d125      	bne.n	800faec <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	330c      	adds	r3, #12
 800faa4:	2100      	movs	r1, #0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f00c f878 	bl	801bb9c <sys_sem_new>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d005      	beq.n	800fabe <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	3310      	adds	r3, #16
 800fab6:	4618      	mov	r0, r3
 800fab8:	f00b ffde 	bl	801ba78 <sys_mbox_free>
    goto free_and_return;
 800fabc:	e017      	b.n	800faee <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	3314      	adds	r3, #20
 800fac2:	4618      	mov	r0, r3
 800fac4:	f00c f85d 	bl	801bb82 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2200      	movs	r2, #0
 800facc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fad4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	683a      	ldr	r2, [r7, #0]
 800fada:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2200      	movs	r2, #0
 800fae0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	7cfa      	ldrb	r2, [r7, #19]
 800fae6:	771a      	strb	r2, [r3, #28]
  return conn;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	e005      	b.n	800faf8 <netconn_alloc+0xc8>
    goto free_and_return;
 800faec:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800faee:	68f9      	ldr	r1, [r7, #12]
 800faf0:	2007      	movs	r0, #7
 800faf2:	f001 fead 	bl	8011850 <memp_free>
  return NULL;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	0801e2c4 	.word	0x0801e2c4
 800fb04:	0801e4c8 	.word	0x0801e4c8
 800fb08:	0801e308 	.word	0x0801e308

0800fb0c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d006      	beq.n	800fb2a <netconn_free+0x1e>
 800fb1c:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <netconn_free+0x80>)
 800fb1e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fb22:	491b      	ldr	r1, [pc, #108]	; (800fb90 <netconn_free+0x84>)
 800fb24:	481b      	ldr	r0, [pc, #108]	; (800fb94 <netconn_free+0x88>)
 800fb26:	f00c fafd 	bl	801c124 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3310      	adds	r3, #16
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f00c f816 	bl	801bb60 <sys_mbox_valid>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d006      	beq.n	800fb48 <netconn_free+0x3c>
 800fb3a:	4b14      	ldr	r3, [pc, #80]	; (800fb8c <netconn_free+0x80>)
 800fb3c:	f240 3223 	movw	r2, #803	; 0x323
 800fb40:	4915      	ldr	r1, [pc, #84]	; (800fb98 <netconn_free+0x8c>)
 800fb42:	4814      	ldr	r0, [pc, #80]	; (800fb94 <netconn_free+0x88>)
 800fb44:	f00c faee 	bl	801c124 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	3314      	adds	r3, #20
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f00c f807 	bl	801bb60 <sys_mbox_valid>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d006      	beq.n	800fb66 <netconn_free+0x5a>
 800fb58:	4b0c      	ldr	r3, [pc, #48]	; (800fb8c <netconn_free+0x80>)
 800fb5a:	f240 3226 	movw	r2, #806	; 0x326
 800fb5e:	490f      	ldr	r1, [pc, #60]	; (800fb9c <netconn_free+0x90>)
 800fb60:	480c      	ldr	r0, [pc, #48]	; (800fb94 <netconn_free+0x88>)
 800fb62:	f00c fadf 	bl	801c124 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	330c      	adds	r3, #12
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f00c f879 	bl	801bc62 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	330c      	adds	r3, #12
 800fb74:	4618      	mov	r0, r3
 800fb76:	f00c f892 	bl	801bc9e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800fb7a:	6879      	ldr	r1, [r7, #4]
 800fb7c:	2007      	movs	r0, #7
 800fb7e:	f001 fe67 	bl	8011850 <memp_free>
}
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	0801e2c4 	.word	0x0801e2c4
 800fb90:	0801e4f0 	.word	0x0801e4f0
 800fb94:	0801e308 	.word	0x0801e308
 800fb98:	0801e520 	.word	0x0801e520
 800fb9c:	0801e55c 	.word	0x0801e55c

0800fba0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	3310      	adds	r3, #16
 800fbac:	4618      	mov	r0, r3
 800fbae:	f00b ffd7 	bl	801bb60 <sys_mbox_valid>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d02f      	beq.n	800fc18 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fbb8:	e018      	b.n	800fbec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbc2:	2b10      	cmp	r3, #16
 800fbc4:	d10e      	bne.n	800fbe4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	f107 020f 	add.w	r2, r7, #15
 800fbcc:	4611      	mov	r1, r2
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7ff fafa 	bl	800f1c8 <lwip_netconn_is_err_msg>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d108      	bne.n	800fbec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f002 fcdb 	bl	8012598 <pbuf_free>
 800fbe2:	e003      	b.n	800fbec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f000 fe90 	bl	801090c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3310      	adds	r3, #16
 800fbf0:	f107 0210 	add.w	r2, r7, #16
 800fbf4:	4611      	mov	r1, r2
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f00b ff9b 	bl	801bb32 <sys_arch_mbox_tryfetch>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc02:	d1da      	bne.n	800fbba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	3310      	adds	r3, #16
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f00b ff35 	bl	801ba78 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	3310      	adds	r3, #16
 800fc12:	4618      	mov	r0, r3
 800fc14:	f00b ffb5 	bl	801bb82 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	3314      	adds	r3, #20
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f00b ff9f 	bl	801bb60 <sys_mbox_valid>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d034      	beq.n	800fc92 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc28:	e01d      	b.n	800fc66 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	f107 020e 	add.w	r2, r7, #14
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fac8 	bl	800f1c8 <lwip_netconn_is_err_msg>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d113      	bne.n	800fc66 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fc42:	6978      	ldr	r0, [r7, #20]
 800fc44:	f7ff ffac 	bl	800fba0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d007      	beq.n	800fc60 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	4618      	mov	r0, r3
 800fc56:	f003 fa8f 	bl	8013178 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fc60:	6978      	ldr	r0, [r7, #20]
 800fc62:	f7ff ff53 	bl	800fb0c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3314      	adds	r3, #20
 800fc6a:	f107 0210 	add.w	r2, r7, #16
 800fc6e:	4611      	mov	r1, r2
 800fc70:	4618      	mov	r0, r3
 800fc72:	f00b ff5e 	bl	801bb32 <sys_arch_mbox_tryfetch>
 800fc76:	4603      	mov	r3, r0
 800fc78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc7c:	d1d5      	bne.n	800fc2a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	3314      	adds	r3, #20
 800fc82:	4618      	mov	r0, r3
 800fc84:	f00b fef8 	bl	801ba78 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3314      	adds	r3, #20
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f00b ff78 	bl	801bb82 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fc92:	bf00      	nop
 800fc94:	3718      	adds	r7, #24
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
	...

0800fc9c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b086      	sub	sp, #24
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d106      	bne.n	800fcc0 <lwip_netconn_do_close_internal+0x24>
 800fcb2:	4ba1      	ldr	r3, [pc, #644]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800fcb4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fcb8:	49a0      	ldr	r1, [pc, #640]	; (800ff3c <lwip_netconn_do_close_internal+0x2a0>)
 800fcba:	48a1      	ldr	r0, [pc, #644]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800fcbc:	f00c fa32 	bl	801c124 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcc8:	2b10      	cmp	r3, #16
 800fcca:	d006      	beq.n	800fcda <lwip_netconn_do_close_internal+0x3e>
 800fccc:	4b9a      	ldr	r3, [pc, #616]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800fcce:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fcd2:	499c      	ldr	r1, [pc, #624]	; (800ff44 <lwip_netconn_do_close_internal+0x2a8>)
 800fcd4:	489a      	ldr	r0, [pc, #616]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800fcd6:	f00c fa25 	bl	801c124 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	785b      	ldrb	r3, [r3, #1]
 800fcde:	2b04      	cmp	r3, #4
 800fce0:	d006      	beq.n	800fcf0 <lwip_netconn_do_close_internal+0x54>
 800fce2:	4b95      	ldr	r3, [pc, #596]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800fce4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800fce8:	4997      	ldr	r1, [pc, #604]	; (800ff48 <lwip_netconn_do_close_internal+0x2ac>)
 800fcea:	4895      	ldr	r0, [pc, #596]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800fcec:	f00c fa1a 	bl	801c124 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d106      	bne.n	800fd06 <lwip_netconn_do_close_internal+0x6a>
 800fcf8:	4b8f      	ldr	r3, [pc, #572]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800fcfa:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fcfe:	4993      	ldr	r1, [pc, #588]	; (800ff4c <lwip_netconn_do_close_internal+0x2b0>)
 800fd00:	488f      	ldr	r0, [pc, #572]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800fd02:	f00c fa0f 	bl	801c124 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d106      	bne.n	800fd1c <lwip_netconn_do_close_internal+0x80>
 800fd0e:	4b8a      	ldr	r3, [pc, #552]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800fd10:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fd14:	498e      	ldr	r1, [pc, #568]	; (800ff50 <lwip_netconn_do_close_internal+0x2b4>)
 800fd16:	488a      	ldr	r0, [pc, #552]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800fd18:	f00c fa04 	bl	801c124 <iprintf>

  tpcb = conn->pcb.tcp;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a1b      	ldr	r3, [r3, #32]
 800fd26:	7a1b      	ldrb	r3, [r3, #8]
 800fd28:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
 800fd2c:	f003 0301 	and.w	r3, r3, #1
 800fd30:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fd32:	7bfb      	ldrb	r3, [r7, #15]
 800fd34:	f003 0302 	and.w	r3, r3, #2
 800fd38:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	2b03      	cmp	r3, #3
 800fd3e:	d102      	bne.n	800fd46 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800fd40:	2301      	movs	r3, #1
 800fd42:	75bb      	strb	r3, [r7, #22]
 800fd44:	e01f      	b.n	800fd86 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800fd46:	7bbb      	ldrb	r3, [r7, #14]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00e      	beq.n	800fd6a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fd50:	2b05      	cmp	r3, #5
 800fd52:	d007      	beq.n	800fd64 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fd58:	2b06      	cmp	r3, #6
 800fd5a:	d003      	beq.n	800fd64 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fd60:	2b08      	cmp	r3, #8
 800fd62:	d102      	bne.n	800fd6a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fd64:	2301      	movs	r3, #1
 800fd66:	75bb      	strb	r3, [r7, #22]
 800fd68:	e00d      	b.n	800fd86 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fd6a:	7b7b      	ldrb	r3, [r7, #13]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d008      	beq.n	800fd82 <lwip_netconn_do_close_internal+0xe6>
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	8b5b      	ldrh	r3, [r3, #26]
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d002      	beq.n	800fd82 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	75bb      	strb	r3, [r7, #22]
 800fd80:	e001      	b.n	800fd86 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fd86:	7dbb      	ldrb	r3, [r7, #22]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	6938      	ldr	r0, [r7, #16]
 800fd90:	f004 fa80 	bl	8014294 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	7d1b      	ldrb	r3, [r3, #20]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d104      	bne.n	800fda6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	6938      	ldr	r0, [r7, #16]
 800fda0:	f004 faf0 	bl	8014384 <tcp_accept>
 800fda4:	e01d      	b.n	800fde2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800fda6:	7bbb      	ldrb	r3, [r7, #14]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d007      	beq.n	800fdbc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fdac:	2100      	movs	r1, #0
 800fdae:	6938      	ldr	r0, [r7, #16]
 800fdb0:	f004 fa82 	bl	80142b8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	6938      	ldr	r0, [r7, #16]
 800fdb8:	f004 fae4 	bl	8014384 <tcp_accept>
    }
    if (shut_tx) {
 800fdbc:	7b7b      	ldrb	r3, [r7, #13]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d003      	beq.n	800fdca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800fdc2:	2100      	movs	r1, #0
 800fdc4:	6938      	ldr	r0, [r7, #16]
 800fdc6:	f004 fa99 	bl	80142fc <tcp_sent>
    }
    if (shut_close) {
 800fdca:	7dbb      	ldrb	r3, [r7, #22]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d008      	beq.n	800fde2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	6938      	ldr	r0, [r7, #16]
 800fdd6:	f004 faed 	bl	80143b4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800fdda:	2100      	movs	r1, #0
 800fddc:	6938      	ldr	r0, [r7, #16]
 800fdde:	f004 faaf 	bl	8014340 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fde2:	7dbb      	ldrb	r3, [r7, #22]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d005      	beq.n	800fdf4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800fde8:	6938      	ldr	r0, [r7, #16]
 800fdea:	f003 f87f 	bl	8012eec <tcp_close>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	75fb      	strb	r3, [r7, #23]
 800fdf2:	e007      	b.n	800fe04 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800fdf4:	7bbb      	ldrb	r3, [r7, #14]
 800fdf6:	7b7a      	ldrb	r2, [r7, #13]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	6938      	ldr	r0, [r7, #16]
 800fdfc:	f003 f8a2 	bl	8012f44 <tcp_shutdown>
 800fe00:	4603      	mov	r3, r0
 800fe02:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800fe04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d102      	bne.n	800fe12 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	757b      	strb	r3, [r7, #21]
 800fe10:	e016      	b.n	800fe40 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800fe12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe1a:	d10f      	bne.n	800fe3c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a1b      	ldr	r3, [r3, #32]
 800fe20:	7a5b      	ldrb	r3, [r3, #9]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d10c      	bne.n	800fe40 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800fe26:	2301      	movs	r3, #1
 800fe28:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800fe2a:	7dbb      	ldrb	r3, [r7, #22]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d007      	beq.n	800fe40 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fe30:	6938      	ldr	r0, [r7, #16]
 800fe32:	f003 f9a1 	bl	8013178 <tcp_abort>
          err = ERR_OK;
 800fe36:	2300      	movs	r3, #0
 800fe38:	75fb      	strb	r3, [r7, #23]
 800fe3a:	e001      	b.n	800fe40 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800fe40:	7d7b      	ldrb	r3, [r7, #21]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d044      	beq.n	800fed0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a1b      	ldr	r3, [r3, #32]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	330c      	adds	r3, #12
 800fe4e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a1b      	ldr	r3, [r3, #32]
 800fe54:	7dfa      	ldrb	r2, [r7, #23]
 800fe56:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800fe64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d129      	bne.n	800fec0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800fe6c:	7dbb      	ldrb	r3, [r7, #22]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00c      	beq.n	800fe8c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d005      	beq.n	800fe8c <lwip_netconn_do_close_internal+0x1f0>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	2200      	movs	r2, #0
 800fe86:	2104      	movs	r1, #4
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	4798      	blx	r3
      }
      if (shut_rx) {
 800fe8c:	7bbb      	ldrb	r3, [r7, #14]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d009      	beq.n	800fea6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d005      	beq.n	800fea6 <lwip_netconn_do_close_internal+0x20a>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9e:	2200      	movs	r2, #0
 800fea0:	2100      	movs	r1, #0
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	4798      	blx	r3
      }
      if (shut_tx) {
 800fea6:	7b7b      	ldrb	r3, [r7, #13]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d009      	beq.n	800fec0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d005      	beq.n	800fec0 <lwip_netconn_do_close_internal+0x224>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb8:	2200      	movs	r2, #0
 800feba:	2102      	movs	r1, #2
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fec0:	78fb      	ldrb	r3, [r7, #3]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d002      	beq.n	800fecc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800fec6:	68b8      	ldr	r0, [r7, #8]
 800fec8:	f00b febe 	bl	801bc48 <sys_sem_signal>
    }
    return ERR_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	e02e      	b.n	800ff2e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800fed0:	7d7b      	ldrb	r3, [r7, #21]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d11e      	bne.n	800ff14 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	7d1b      	ldrb	r3, [r3, #20]
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d106      	bne.n	800feec <lwip_netconn_do_close_internal+0x250>
 800fede:	4b16      	ldr	r3, [pc, #88]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800fee0:	f240 4241 	movw	r2, #1089	; 0x441
 800fee4:	491b      	ldr	r1, [pc, #108]	; (800ff54 <lwip_netconn_do_close_internal+0x2b8>)
 800fee6:	4816      	ldr	r0, [pc, #88]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800fee8:	f00c f91c 	bl	801c124 <iprintf>
    if (shut_tx) {
 800feec:	7b7b      	ldrb	r3, [r7, #13]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d003      	beq.n	800fefa <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800fef2:	4919      	ldr	r1, [pc, #100]	; (800ff58 <lwip_netconn_do_close_internal+0x2bc>)
 800fef4:	6938      	ldr	r0, [r7, #16]
 800fef6:	f004 fa01 	bl	80142fc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800fefa:	2201      	movs	r2, #1
 800fefc:	4917      	ldr	r1, [pc, #92]	; (800ff5c <lwip_netconn_do_close_internal+0x2c0>)
 800fefe:	6938      	ldr	r0, [r7, #16]
 800ff00:	f004 fa58 	bl	80143b4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ff04:	4916      	ldr	r1, [pc, #88]	; (800ff60 <lwip_netconn_do_close_internal+0x2c4>)
 800ff06:	6938      	ldr	r0, [r7, #16]
 800ff08:	f004 fa1a 	bl	8014340 <tcp_err>
    tcp_arg(tpcb, conn);
 800ff0c:	6879      	ldr	r1, [r7, #4]
 800ff0e:	6938      	ldr	r0, [r7, #16]
 800ff10:	f004 f9c0 	bl	8014294 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ff14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d106      	bne.n	800ff2a <lwip_netconn_do_close_internal+0x28e>
 800ff1c:	4b06      	ldr	r3, [pc, #24]	; (800ff38 <lwip_netconn_do_close_internal+0x29c>)
 800ff1e:	f240 424d 	movw	r2, #1101	; 0x44d
 800ff22:	4910      	ldr	r1, [pc, #64]	; (800ff64 <lwip_netconn_do_close_internal+0x2c8>)
 800ff24:	4806      	ldr	r0, [pc, #24]	; (800ff40 <lwip_netconn_do_close_internal+0x2a4>)
 800ff26:	f00c f8fd 	bl	801c124 <iprintf>
  return err;
 800ff2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	0801e2c4 	.word	0x0801e2c4
 800ff3c:	0801e598 	.word	0x0801e598
 800ff40:	0801e308 	.word	0x0801e308
 800ff44:	0801e5a8 	.word	0x0801e5a8
 800ff48:	0801e5c8 	.word	0x0801e5c8
 800ff4c:	0801e5ec 	.word	0x0801e5ec
 800ff50:	0801e42c 	.word	0x0801e42c
 800ff54:	0801e600 	.word	0x0801e600
 800ff58:	0800f511 	.word	0x0800f511
 800ff5c:	0800f445 	.word	0x0800f445
 800ff60:	0800f5bd 	.word	0x0800f5bd
 800ff64:	0801e624 	.word	0x0801e624

0800ff68 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	785b      	ldrb	r3, [r3, #1]
 800ff7a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ff7c:	7afb      	ldrb	r3, [r7, #11]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00d      	beq.n	800ff9e <lwip_netconn_do_delconn+0x36>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff8c:	2b10      	cmp	r3, #16
 800ff8e:	d006      	beq.n	800ff9e <lwip_netconn_do_delconn+0x36>
 800ff90:	4b60      	ldr	r3, [pc, #384]	; (8010114 <lwip_netconn_do_delconn+0x1ac>)
 800ff92:	f240 425e 	movw	r2, #1118	; 0x45e
 800ff96:	4960      	ldr	r1, [pc, #384]	; (8010118 <lwip_netconn_do_delconn+0x1b0>)
 800ff98:	4860      	ldr	r0, [pc, #384]	; (801011c <lwip_netconn_do_delconn+0x1b4>)
 800ff9a:	f00c f8c3 	bl	801c124 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ff9e:	7afb      	ldrb	r3, [r7, #11]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d005      	beq.n	800ffb0 <lwip_netconn_do_delconn+0x48>
 800ffa4:	7afb      	ldrb	r3, [r7, #11]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d002      	beq.n	800ffb0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ffaa:	7afb      	ldrb	r3, [r7, #11]
 800ffac:	2b03      	cmp	r3, #3
 800ffae:	d109      	bne.n	800ffc4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ffb0:	7afb      	ldrb	r3, [r7, #11]
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d10a      	bne.n	800ffcc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	7f1b      	ldrb	r3, [r3, #28]
 800ffbc:	f003 0304 	and.w	r3, r3, #4
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d103      	bne.n	800ffcc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	22fb      	movs	r2, #251	; 0xfb
 800ffc8:	711a      	strb	r2, [r3, #4]
 800ffca:	e097      	b.n	80100fc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ffcc:	7afb      	ldrb	r3, [r7, #11]
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d10d      	bne.n	800ffee <lwip_netconn_do_delconn+0x86>
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	7f1b      	ldrb	r3, [r3, #28]
 800ffd8:	f003 0304 	and.w	r3, r3, #4
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <lwip_netconn_do_delconn+0x86>
 800ffe0:	4b4c      	ldr	r3, [pc, #304]	; (8010114 <lwip_netconn_do_delconn+0x1ac>)
 800ffe2:	f240 427a 	movw	r2, #1146	; 0x47a
 800ffe6:	494e      	ldr	r1, [pc, #312]	; (8010120 <lwip_netconn_do_delconn+0x1b8>)
 800ffe8:	484c      	ldr	r0, [pc, #304]	; (801011c <lwip_netconn_do_delconn+0x1b4>)
 800ffea:	f00c f89b 	bl	801c124 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2200      	movs	r2, #0
 800fff2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7ff fdd1 	bl	800fba0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d05f      	beq.n	80100c8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010012:	2b10      	cmp	r3, #16
 8010014:	d00d      	beq.n	8010032 <lwip_netconn_do_delconn+0xca>
 8010016:	2b20      	cmp	r3, #32
 8010018:	d151      	bne.n	80100be <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	f009 f9b4 	bl	8019398 <udp_remove>
          break;
 8010030:	e046      	b.n	80100c0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	6a1b      	ldr	r3, [r3, #32]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d006      	beq.n	801004a <lwip_netconn_do_delconn+0xe2>
 801003c:	4b35      	ldr	r3, [pc, #212]	; (8010114 <lwip_netconn_do_delconn+0x1ac>)
 801003e:	f240 4294 	movw	r2, #1172	; 0x494
 8010042:	4938      	ldr	r1, [pc, #224]	; (8010124 <lwip_netconn_do_delconn+0x1bc>)
 8010044:	4835      	ldr	r0, [pc, #212]	; (801011c <lwip_netconn_do_delconn+0x1b4>)
 8010046:	f00c f86d 	bl	801c124 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2204      	movs	r2, #4
 8010050:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2203      	movs	r2, #3
 8010056:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2100      	movs	r1, #0
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff fe18 	bl	800fc9c <lwip_netconn_do_close_internal>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d04b      	beq.n	801010a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	785b      	ldrb	r3, [r3, #1]
 8010078:	2b04      	cmp	r3, #4
 801007a:	d006      	beq.n	801008a <lwip_netconn_do_delconn+0x122>
 801007c:	4b25      	ldr	r3, [pc, #148]	; (8010114 <lwip_netconn_do_delconn+0x1ac>)
 801007e:	f240 429a 	movw	r2, #1178	; 0x49a
 8010082:	4929      	ldr	r1, [pc, #164]	; (8010128 <lwip_netconn_do_delconn+0x1c0>)
 8010084:	4825      	ldr	r0, [pc, #148]	; (801011c <lwip_netconn_do_delconn+0x1b4>)
 8010086:	f00c f84d 	bl	801c124 <iprintf>
            UNLOCK_TCPIP_CORE();
 801008a:	4828      	ldr	r0, [pc, #160]	; (801012c <lwip_netconn_do_delconn+0x1c4>)
 801008c:	f00b fe45 	bl	801bd1a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	330c      	adds	r3, #12
 8010096:	2100      	movs	r1, #0
 8010098:	4618      	mov	r0, r3
 801009a:	f00b fda4 	bl	801bbe6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801009e:	4823      	ldr	r0, [pc, #140]	; (801012c <lwip_netconn_do_delconn+0x1c4>)
 80100a0:	f00b fe2c 	bl	801bcfc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	785b      	ldrb	r3, [r3, #1]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d02d      	beq.n	801010a <lwip_netconn_do_delconn+0x1a2>
 80100ae:	4b19      	ldr	r3, [pc, #100]	; (8010114 <lwip_netconn_do_delconn+0x1ac>)
 80100b0:	f240 429e 	movw	r2, #1182	; 0x49e
 80100b4:	491c      	ldr	r1, [pc, #112]	; (8010128 <lwip_netconn_do_delconn+0x1c0>)
 80100b6:	4819      	ldr	r0, [pc, #100]	; (801011c <lwip_netconn_do_delconn+0x1b4>)
 80100b8:	f00c f834 	bl	801c124 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80100bc:	e025      	b.n	801010a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80100be:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2200      	movs	r2, #0
 80100c6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d007      	beq.n	80100e2 <lwip_netconn_do_delconn+0x17a>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	6810      	ldr	r0, [r2, #0]
 80100dc:	2200      	movs	r2, #0
 80100de:	2100      	movs	r1, #0
 80100e0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d007      	beq.n	80100fc <lwip_netconn_do_delconn+0x194>
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	6810      	ldr	r0, [r2, #0]
 80100f6:	2200      	movs	r2, #0
 80100f8:	2102      	movs	r1, #2
 80100fa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	330c      	adds	r3, #12
 8010102:	4618      	mov	r0, r3
 8010104:	f00b fdba 	bl	801bc7c <sys_sem_valid>
 8010108:	e000      	b.n	801010c <lwip_netconn_do_delconn+0x1a4>
          return;
 801010a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	0801e2c4 	.word	0x0801e2c4
 8010118:	0801e634 	.word	0x0801e634
 801011c:	0801e308 	.word	0x0801e308
 8010120:	0801e648 	.word	0x0801e648
 8010124:	0801e668 	.word	0x0801e668
 8010128:	0801e684 	.word	0x0801e684
 801012c:	2000facc 	.word	0x2000facc

08010130 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d025      	beq.n	8010192 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010150:	2b10      	cmp	r3, #16
 8010152:	d00e      	beq.n	8010172 <lwip_netconn_do_bind+0x42>
 8010154:	2b20      	cmp	r3, #32
 8010156:	d119      	bne.n	801018c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	6858      	ldr	r0, [r3, #4]
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	6899      	ldr	r1, [r3, #8]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	899b      	ldrh	r3, [r3, #12]
 8010166:	461a      	mov	r2, r3
 8010168:	f009 f86e 	bl	8019248 <udp_bind>
 801016c:	4603      	mov	r3, r0
 801016e:	73fb      	strb	r3, [r7, #15]
        break;
 8010170:	e011      	b.n	8010196 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6858      	ldr	r0, [r3, #4]
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	6899      	ldr	r1, [r3, #8]
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	899b      	ldrh	r3, [r3, #12]
 8010180:	461a      	mov	r2, r3
 8010182:	f003 f805 	bl	8013190 <tcp_bind>
 8010186:	4603      	mov	r3, r0
 8010188:	73fb      	strb	r3, [r7, #15]
        break;
 801018a:	e004      	b.n	8010196 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801018c:	23fa      	movs	r3, #250	; 0xfa
 801018e:	73fb      	strb	r3, [r7, #15]
        break;
 8010190:	e001      	b.n	8010196 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010192:	23fa      	movs	r3, #250	; 0xfa
 8010194:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	7bfa      	ldrb	r2, [r7, #15]
 801019a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801019c:	bf00      	nop
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d07f      	beq.n	80102ba <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101c4:	2b10      	cmp	r3, #16
 80101c6:	d175      	bne.n	80102b4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	785b      	ldrb	r3, [r3, #1]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d165      	bne.n	801029e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	7d1b      	ldrb	r3, [r3, #20]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d002      	beq.n	80101e4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80101de:	23fa      	movs	r3, #250	; 0xfa
 80101e0:	72fb      	strb	r3, [r7, #11]
 80101e2:	e06c      	b.n	80102be <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80101e4:	23ff      	movs	r3, #255	; 0xff
 80101e6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	f107 020b 	add.w	r2, r7, #11
 80101f2:	7cf9      	ldrb	r1, [r7, #19]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f003 f883 	bl	8013300 <tcp_listen_with_backlog_and_err>
 80101fa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d05d      	beq.n	80102be <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	3310      	adds	r3, #16
 8010208:	4618      	mov	r0, r3
 801020a:	f00b fca9 	bl	801bb60 <sys_mbox_valid>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d00b      	beq.n	801022c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	3310      	adds	r3, #16
 801021a:	4618      	mov	r0, r3
 801021c:	f00b fc2c 	bl	801ba78 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3310      	adds	r3, #16
 8010226:	4618      	mov	r0, r3
 8010228:	f00b fcab 	bl	801bb82 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801022c:	2300      	movs	r3, #0
 801022e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3314      	adds	r3, #20
 8010236:	4618      	mov	r0, r3
 8010238:	f00b fc92 	bl	801bb60 <sys_mbox_valid>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d108      	bne.n	8010254 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3314      	adds	r3, #20
 8010248:	2106      	movs	r1, #6
 801024a:	4618      	mov	r0, r3
 801024c:	f00b fbfa 	bl	801ba44 <sys_mbox_new>
 8010250:	4603      	mov	r3, r0
 8010252:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010254:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d118      	bne.n	801028e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2202      	movs	r2, #2
 8010262:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	685a      	ldr	r2, [r3, #4]
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4619      	mov	r1, r3
 8010278:	4610      	mov	r0, r2
 801027a:	f004 f80b 	bl	8014294 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	4912      	ldr	r1, [pc, #72]	; (80102d0 <lwip_netconn_do_listen+0x12c>)
 8010286:	4618      	mov	r0, r3
 8010288:	f004 f87c 	bl	8014384 <tcp_accept>
 801028c:	e017      	b.n	80102be <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f002 fe2c 	bl	8012eec <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2200      	movs	r2, #0
 801029a:	605a      	str	r2, [r3, #4]
 801029c:	e00f      	b.n	80102be <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	785b      	ldrb	r3, [r3, #1]
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	d102      	bne.n	80102ae <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	72fb      	strb	r3, [r7, #11]
 80102ac:	e007      	b.n	80102be <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80102ae:	23f5      	movs	r3, #245	; 0xf5
 80102b0:	72fb      	strb	r3, [r7, #11]
 80102b2:	e004      	b.n	80102be <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80102b4:	23f0      	movs	r3, #240	; 0xf0
 80102b6:	72fb      	strb	r3, [r7, #11]
 80102b8:	e001      	b.n	80102be <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80102ba:	23f5      	movs	r3, #245	; 0xf5
 80102bc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80102be:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80102c6:	bf00      	nop
 80102c8:	3718      	adds	r7, #24
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	0800f7b9 	.word	0x0800f7b9

080102d4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b086      	sub	sp, #24
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	2200      	movs	r2, #0
 80102e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d022      	beq.n	8010336 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102fa:	2b10      	cmp	r3, #16
 80102fc:	d11b      	bne.n	8010336 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	689b      	ldr	r3, [r3, #8]
 8010302:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801030a:	d202      	bcs.n	8010312 <lwip_netconn_do_recv+0x3e>
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	b29b      	uxth	r3, r3
 8010310:	e001      	b.n	8010316 <lwip_netconn_do_recv+0x42>
 8010312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010316:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	89fa      	ldrh	r2, [r7, #14]
 8010320:	4611      	mov	r1, r2
 8010322:	4618      	mov	r0, r3
 8010324:	f003 f8f0 	bl	8013508 <tcp_recved>
        remaining -= recved;
 8010328:	89fb      	ldrh	r3, [r7, #14]
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	1ad3      	subs	r3, r2, r3
 801032e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d1e6      	bne.n	8010304 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010336:	bf00      	nop
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
	...

08010340 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	460b      	mov	r3, r1
 801034a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801034c:	2300      	movs	r3, #0
 801034e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <lwip_netconn_do_writemore+0x24>
 8010356:	4b96      	ldr	r3, [pc, #600]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 8010358:	f240 6273 	movw	r2, #1651	; 0x673
 801035c:	4995      	ldr	r1, [pc, #596]	; (80105b4 <lwip_netconn_do_writemore+0x274>)
 801035e:	4896      	ldr	r0, [pc, #600]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 8010360:	f00b fee0 	bl	801c124 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	785b      	ldrb	r3, [r3, #1]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d006      	beq.n	801037a <lwip_netconn_do_writemore+0x3a>
 801036c:	4b90      	ldr	r3, [pc, #576]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 801036e:	f240 6274 	movw	r2, #1652	; 0x674
 8010372:	4992      	ldr	r1, [pc, #584]	; (80105bc <lwip_netconn_do_writemore+0x27c>)
 8010374:	4890      	ldr	r0, [pc, #576]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 8010376:	f00b fed5 	bl	801c124 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d106      	bne.n	8010390 <lwip_netconn_do_writemore+0x50>
 8010382:	4b8b      	ldr	r3, [pc, #556]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 8010384:	f240 6275 	movw	r2, #1653	; 0x675
 8010388:	498d      	ldr	r1, [pc, #564]	; (80105c0 <lwip_netconn_do_writemore+0x280>)
 801038a:	488b      	ldr	r0, [pc, #556]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 801038c:	f00b feca 	bl	801c124 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d106      	bne.n	80103a6 <lwip_netconn_do_writemore+0x66>
 8010398:	4b85      	ldr	r3, [pc, #532]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 801039a:	f240 6276 	movw	r2, #1654	; 0x676
 801039e:	4989      	ldr	r1, [pc, #548]	; (80105c4 <lwip_netconn_do_writemore+0x284>)
 80103a0:	4885      	ldr	r0, [pc, #532]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 80103a2:	f00b febf 	bl	801c124 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6a1b      	ldr	r3, [r3, #32]
 80103aa:	699a      	ldr	r2, [r3, #24]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6a1b      	ldr	r3, [r3, #32]
 80103b0:	695b      	ldr	r3, [r3, #20]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d306      	bcc.n	80103c4 <lwip_netconn_do_writemore+0x84>
 80103b6:	4b7e      	ldr	r3, [pc, #504]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 80103b8:	f240 6277 	movw	r2, #1655	; 0x677
 80103bc:	4982      	ldr	r1, [pc, #520]	; (80105c8 <lwip_netconn_do_writemore+0x288>)
 80103be:	487e      	ldr	r0, [pc, #504]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 80103c0:	f00b feb0 	bl	801c124 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a1b      	ldr	r3, [r3, #32]
 80103c8:	899b      	ldrh	r3, [r3, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <lwip_netconn_do_writemore+0x9c>
 80103ce:	4b78      	ldr	r3, [pc, #480]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 80103d0:	f240 6279 	movw	r2, #1657	; 0x679
 80103d4:	497d      	ldr	r1, [pc, #500]	; (80105cc <lwip_netconn_do_writemore+0x28c>)
 80103d6:	4878      	ldr	r0, [pc, #480]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 80103d8:	f00b fea4 	bl	801c124 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a1b      	ldr	r3, [r3, #32]
 80103e0:	7f1b      	ldrb	r3, [r3, #28]
 80103e2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	7f1b      	ldrb	r3, [r3, #28]
 80103e8:	f003 0302 	and.w	r3, r3, #2
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d104      	bne.n	80103fa <lwip_netconn_do_writemore+0xba>
 80103f0:	7ebb      	ldrb	r3, [r7, #26]
 80103f2:	f003 0304 	and.w	r3, r3, #4
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <lwip_netconn_do_writemore+0xbe>
 80103fa:	2301      	movs	r3, #1
 80103fc:	e000      	b.n	8010400 <lwip_netconn_do_writemore+0xc0>
 80103fe:	2300      	movs	r3, #0
 8010400:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	691b      	ldr	r3, [r3, #16]
 8010410:	4413      	add	r3, r2
 8010412:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a1b      	ldr	r3, [r3, #32]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	685a      	ldr	r2, [r3, #4]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6a1b      	ldr	r3, [r3, #32]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	1ad3      	subs	r3, r2, r3
 8010424:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801042c:	d307      	bcc.n	801043e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801042e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010432:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010434:	7ebb      	ldrb	r3, [r7, #26]
 8010436:	f043 0302 	orr.w	r3, r3, #2
 801043a:	76bb      	strb	r3, [r7, #26]
 801043c:	e001      	b.n	8010442 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801044a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801044c:	89fa      	ldrh	r2, [r7, #14]
 801044e:	8bbb      	ldrh	r3, [r7, #28]
 8010450:	429a      	cmp	r2, r3
 8010452:	d216      	bcs.n	8010482 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010454:	89fb      	ldrh	r3, [r7, #14]
 8010456:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010458:	7e3b      	ldrb	r3, [r7, #24]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d00d      	beq.n	801047a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801045e:	8bbb      	ldrh	r3, [r7, #28]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d10e      	bne.n	8010482 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a1b      	ldr	r3, [r3, #32]
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d102      	bne.n	8010474 <lwip_netconn_do_writemore+0x134>
 801046e:	f06f 0306 	mvn.w	r3, #6
 8010472:	e000      	b.n	8010476 <lwip_netconn_do_writemore+0x136>
 8010474:	2300      	movs	r3, #0
 8010476:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010478:	e07d      	b.n	8010576 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801047a:	7ebb      	ldrb	r3, [r7, #26]
 801047c:	f043 0302 	orr.w	r3, r3, #2
 8010480:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	691a      	ldr	r2, [r3, #16]
 8010488:	8bbb      	ldrh	r3, [r7, #28]
 801048a:	441a      	add	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a1b      	ldr	r3, [r3, #32]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	429a      	cmp	r2, r3
 8010496:	d906      	bls.n	80104a6 <lwip_netconn_do_writemore+0x166>
 8010498:	4b45      	ldr	r3, [pc, #276]	; (80105b0 <lwip_netconn_do_writemore+0x270>)
 801049a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801049e:	494c      	ldr	r1, [pc, #304]	; (80105d0 <lwip_netconn_do_writemore+0x290>)
 80104a0:	4845      	ldr	r0, [pc, #276]	; (80105b8 <lwip_netconn_do_writemore+0x278>)
 80104a2:	f00b fe3f 	bl	801c124 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80104a6:	8bbb      	ldrh	r3, [r7, #28]
 80104a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d103      	bne.n	80104b8 <lwip_netconn_do_writemore+0x178>
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104b6:	d209      	bcs.n	80104cc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80104bc:	8bba      	ldrh	r2, [r7, #28]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d10b      	bne.n	80104da <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	899b      	ldrh	r3, [r3, #12]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d906      	bls.n	80104da <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80104cc:	2301      	movs	r3, #1
 80104ce:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80104d0:	7ebb      	ldrb	r3, [r7, #26]
 80104d2:	f043 0302 	orr.w	r3, r3, #2
 80104d6:	76bb      	strb	r3, [r7, #26]
 80104d8:	e001      	b.n	80104de <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6858      	ldr	r0, [r3, #4]
 80104e2:	7ebb      	ldrb	r3, [r7, #26]
 80104e4:	8bba      	ldrh	r2, [r7, #28]
 80104e6:	6979      	ldr	r1, [r7, #20]
 80104e8:	f006 fe12 	bl	8017110 <tcp_write>
 80104ec:	4603      	mov	r3, r0
 80104ee:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80104f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d12c      	bne.n	8010552 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6a1b      	ldr	r3, [r3, #32]
 80104fc:	6999      	ldr	r1, [r3, #24]
 80104fe:	8bba      	ldrh	r2, [r7, #28]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a1b      	ldr	r3, [r3, #32]
 8010504:	440a      	add	r2, r1
 8010506:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a1b      	ldr	r3, [r3, #32]
 801050c:	6919      	ldr	r1, [r3, #16]
 801050e:	8bba      	ldrh	r2, [r7, #28]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6a1b      	ldr	r3, [r3, #32]
 8010514:	440a      	add	r2, r1
 8010516:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6a1b      	ldr	r3, [r3, #32]
 801051c:	691a      	ldr	r2, [r3, #16]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a1b      	ldr	r3, [r3, #32]
 8010522:	689b      	ldr	r3, [r3, #8]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	429a      	cmp	r2, r3
 8010528:	d113      	bne.n	8010552 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a1b      	ldr	r3, [r3, #32]
 801052e:	899a      	ldrh	r2, [r3, #12]
 8010530:	3a01      	subs	r2, #1
 8010532:	b292      	uxth	r2, r2
 8010534:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6a1b      	ldr	r3, [r3, #32]
 801053a:	899b      	ldrh	r3, [r3, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d008      	beq.n	8010552 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6a1b      	ldr	r3, [r3, #32]
 8010544:	689a      	ldr	r2, [r3, #8]
 8010546:	3208      	adds	r2, #8
 8010548:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	2200      	movs	r2, #0
 8010550:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010552:	7e7b      	ldrb	r3, [r7, #25]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d004      	beq.n	8010562 <lwip_netconn_do_writemore+0x222>
 8010558:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801055c:	2b00      	cmp	r3, #0
 801055e:	f43f af50 	beq.w	8010402 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010562:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d004      	beq.n	8010574 <lwip_netconn_do_writemore+0x234>
 801056a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801056e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010572:	d147      	bne.n	8010604 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8010574:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010576:	7e3b      	ldrb	r3, [r7, #24]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d02b      	beq.n	80105d4 <lwip_netconn_do_writemore+0x294>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6a1b      	ldr	r3, [r3, #32]
 8010580:	699a      	ldr	r2, [r3, #24]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	695b      	ldr	r3, [r3, #20]
 8010588:	429a      	cmp	r2, r3
 801058a:	d223      	bcs.n	80105d4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010590:	2b00      	cmp	r3, #0
 8010592:	d005      	beq.n	80105a0 <lwip_netconn_do_writemore+0x260>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010598:	2200      	movs	r2, #0
 801059a:	2103      	movs	r1, #3
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7f1b      	ldrb	r3, [r3, #28]
 80105a4:	f043 0310 	orr.w	r3, r3, #16
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	771a      	strb	r2, [r3, #28]
 80105ae:	e029      	b.n	8010604 <lwip_netconn_do_writemore+0x2c4>
 80105b0:	0801e2c4 	.word	0x0801e2c4
 80105b4:	0801e41c 	.word	0x0801e41c
 80105b8:	0801e308 	.word	0x0801e308
 80105bc:	0801e724 	.word	0x0801e724
 80105c0:	0801e42c 	.word	0x0801e42c
 80105c4:	0801e744 	.word	0x0801e744
 80105c8:	0801e75c 	.word	0x0801e75c
 80105cc:	0801e79c 	.word	0x0801e79c
 80105d0:	0801e7c4 	.word	0x0801e7c4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80105dc:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d905      	bls.n	80105f0 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80105ec:	2b04      	cmp	r3, #4
 80105ee:	d909      	bls.n	8010604 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d005      	beq.n	8010604 <lwip_netconn_do_writemore+0x2c4>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fc:	2200      	movs	r2, #0
 80105fe:	2103      	movs	r1, #3
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010604:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d11d      	bne.n	8010648 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6a1b      	ldr	r3, [r3, #32]
 8010610:	699a      	ldr	r2, [r3, #24]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a1b      	ldr	r3, [r3, #32]
 8010616:	695b      	ldr	r3, [r3, #20]
 8010618:	429a      	cmp	r2, r3
 801061a:	d002      	beq.n	8010622 <lwip_netconn_do_writemore+0x2e2>
 801061c:	7e3b      	ldrb	r3, [r7, #24]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d001      	beq.n	8010626 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010622:	2301      	movs	r3, #1
 8010624:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	4618      	mov	r0, r3
 801062c:	f007 fb5a 	bl	8017ce4 <tcp_output>
 8010630:	4603      	mov	r3, r0
 8010632:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010634:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010638:	f113 0f04 	cmn.w	r3, #4
 801063c:	d12c      	bne.n	8010698 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801063e:	7b3b      	ldrb	r3, [r7, #12]
 8010640:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010642:	2301      	movs	r3, #1
 8010644:	76fb      	strb	r3, [r7, #27]
 8010646:	e027      	b.n	8010698 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8010648:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801064c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010650:	d120      	bne.n	8010694 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	4618      	mov	r0, r3
 8010658:	f007 fb44 	bl	8017ce4 <tcp_output>
 801065c:	4603      	mov	r3, r0
 801065e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010660:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010664:	f113 0f04 	cmn.w	r3, #4
 8010668:	d104      	bne.n	8010674 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801066a:	7b7b      	ldrb	r3, [r7, #13]
 801066c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801066e:	2301      	movs	r3, #1
 8010670:	76fb      	strb	r3, [r7, #27]
 8010672:	e011      	b.n	8010698 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8010674:	7e3b      	ldrb	r3, [r7, #24]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00e      	beq.n	8010698 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d102      	bne.n	801068a <lwip_netconn_do_writemore+0x34a>
 8010684:	f06f 0306 	mvn.w	r3, #6
 8010688:	e000      	b.n	801068c <lwip_netconn_do_writemore+0x34c>
 801068a:	2300      	movs	r3, #0
 801068c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801068e:	2301      	movs	r3, #1
 8010690:	76fb      	strb	r3, [r7, #27]
 8010692:	e001      	b.n	8010698 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010694:	2301      	movs	r3, #1
 8010696:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010698:	7efb      	ldrb	r3, [r7, #27]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d015      	beq.n	80106ca <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a1b      	ldr	r3, [r3, #32]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	330c      	adds	r3, #12
 80106a6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6a1b      	ldr	r3, [r3, #32]
 80106ac:	7ffa      	ldrb	r2, [r7, #31]
 80106ae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80106bc:	78fb      	ldrb	r3, [r7, #3]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d006      	beq.n	80106d0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80106c2:	68b8      	ldr	r0, [r7, #8]
 80106c4:	f00b fac0 	bl	801bc48 <sys_sem_signal>
 80106c8:	e002      	b.n	80106d0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80106ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106ce:	e000      	b.n	80106d2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3720      	adds	r7, #32
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop

080106dc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fe fd1a 	bl	800f126 <netconn_err>
 80106f2:	4603      	mov	r3, r0
 80106f4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80106f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d166      	bne.n	80107cc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010708:	2b10      	cmp	r3, #16
 801070a:	d15d      	bne.n	80107c8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	785b      	ldrb	r3, [r3, #1]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010716:	23fb      	movs	r3, #251	; 0xfb
 8010718:	73fb      	strb	r3, [r7, #15]
 801071a:	e057      	b.n	80107cc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d04d      	beq.n	80107c2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2201      	movs	r2, #1
 801072c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	6a1b      	ldr	r3, [r3, #32]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d006      	beq.n	8010746 <lwip_netconn_do_write+0x6a>
 8010738:	4b28      	ldr	r3, [pc, #160]	; (80107dc <lwip_netconn_do_write+0x100>)
 801073a:	f240 7223 	movw	r2, #1827	; 0x723
 801073e:	4928      	ldr	r1, [pc, #160]	; (80107e0 <lwip_netconn_do_write+0x104>)
 8010740:	4828      	ldr	r0, [pc, #160]	; (80107e4 <lwip_netconn_do_write+0x108>)
 8010742:	f00b fcef 	bl	801c124 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	695b      	ldr	r3, [r3, #20]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d106      	bne.n	801075c <lwip_netconn_do_write+0x80>
 801074e:	4b23      	ldr	r3, [pc, #140]	; (80107dc <lwip_netconn_do_write+0x100>)
 8010750:	f240 7224 	movw	r2, #1828	; 0x724
 8010754:	4924      	ldr	r1, [pc, #144]	; (80107e8 <lwip_netconn_do_write+0x10c>)
 8010756:	4823      	ldr	r0, [pc, #140]	; (80107e4 <lwip_netconn_do_write+0x108>)
 8010758:	f00b fce4 	bl	801c124 <iprintf>
        msg->conn->current_msg = msg;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2100      	movs	r1, #0
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fde8 	bl	8010340 <lwip_netconn_do_writemore>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d02e      	beq.n	80107d4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	785b      	ldrb	r3, [r3, #1]
 801077c:	2b01      	cmp	r3, #1
 801077e:	d006      	beq.n	801078e <lwip_netconn_do_write+0xb2>
 8010780:	4b16      	ldr	r3, [pc, #88]	; (80107dc <lwip_netconn_do_write+0x100>)
 8010782:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010786:	4919      	ldr	r1, [pc, #100]	; (80107ec <lwip_netconn_do_write+0x110>)
 8010788:	4816      	ldr	r0, [pc, #88]	; (80107e4 <lwip_netconn_do_write+0x108>)
 801078a:	f00b fccb 	bl	801c124 <iprintf>
          UNLOCK_TCPIP_CORE();
 801078e:	4818      	ldr	r0, [pc, #96]	; (80107f0 <lwip_netconn_do_write+0x114>)
 8010790:	f00b fac3 	bl	801bd1a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	330c      	adds	r3, #12
 801079a:	2100      	movs	r1, #0
 801079c:	4618      	mov	r0, r3
 801079e:	f00b fa22 	bl	801bbe6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80107a2:	4813      	ldr	r0, [pc, #76]	; (80107f0 <lwip_netconn_do_write+0x114>)
 80107a4:	f00b faaa 	bl	801bcfc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	785b      	ldrb	r3, [r3, #1]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d110      	bne.n	80107d4 <lwip_netconn_do_write+0xf8>
 80107b2:	4b0a      	ldr	r3, [pc, #40]	; (80107dc <lwip_netconn_do_write+0x100>)
 80107b4:	f240 722c 	movw	r2, #1836	; 0x72c
 80107b8:	490c      	ldr	r1, [pc, #48]	; (80107ec <lwip_netconn_do_write+0x110>)
 80107ba:	480a      	ldr	r0, [pc, #40]	; (80107e4 <lwip_netconn_do_write+0x108>)
 80107bc:	f00b fcb2 	bl	801c124 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80107c0:	e008      	b.n	80107d4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80107c2:	23f5      	movs	r3, #245	; 0xf5
 80107c4:	73fb      	strb	r3, [r7, #15]
 80107c6:	e001      	b.n	80107cc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80107c8:	23fa      	movs	r3, #250	; 0xfa
 80107ca:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	7bfa      	ldrb	r2, [r7, #15]
 80107d0:	711a      	strb	r2, [r3, #4]
 80107d2:	e000      	b.n	80107d6 <lwip_netconn_do_write+0xfa>
        return;
 80107d4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	0801e2c4 	.word	0x0801e2c4
 80107e0:	0801e668 	.word	0x0801e668
 80107e4:	0801e308 	.word	0x0801e308
 80107e8:	0801e7f0 	.word	0x0801e7f0
 80107ec:	0801e684 	.word	0x0801e684
 80107f0:	2000facc 	.word	0x2000facc

080107f4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	785b      	ldrb	r3, [r3, #1]
 8010806:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d069      	beq.n	80108e6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801081c:	2b10      	cmp	r3, #16
 801081e:	d162      	bne.n	80108e6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010824:	2b03      	cmp	r3, #3
 8010826:	d002      	beq.n	801082e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010828:	7afb      	ldrb	r3, [r7, #11]
 801082a:	2b02      	cmp	r3, #2
 801082c:	d05b      	beq.n	80108e6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801082e:	7afb      	ldrb	r3, [r7, #11]
 8010830:	2b03      	cmp	r3, #3
 8010832:	d103      	bne.n	801083c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	22f5      	movs	r2, #245	; 0xf5
 8010838:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801083a:	e059      	b.n	80108f0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801083c:	7afb      	ldrb	r3, [r7, #11]
 801083e:	2b01      	cmp	r3, #1
 8010840:	d103      	bne.n	801084a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	22fb      	movs	r2, #251	; 0xfb
 8010846:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010848:	e052      	b.n	80108f0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	7a1b      	ldrb	r3, [r3, #8]
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	d004      	beq.n	8010860 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4618      	mov	r0, r3
 801085c:	f7ff f9a0 	bl	800fba0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	6a1b      	ldr	r3, [r3, #32]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d006      	beq.n	8010878 <lwip_netconn_do_close+0x84>
 801086a:	4b23      	ldr	r3, [pc, #140]	; (80108f8 <lwip_netconn_do_close+0x104>)
 801086c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010870:	4922      	ldr	r1, [pc, #136]	; (80108fc <lwip_netconn_do_close+0x108>)
 8010872:	4823      	ldr	r0, [pc, #140]	; (8010900 <lwip_netconn_do_close+0x10c>)
 8010874:	f00b fc56 	bl	801c124 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2204      	movs	r2, #4
 801087e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2100      	movs	r1, #0
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fa04 	bl	800fc9c <lwip_netconn_do_close_internal>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d029      	beq.n	80108ee <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	785b      	ldrb	r3, [r3, #1]
 80108a0:	2b04      	cmp	r3, #4
 80108a2:	d006      	beq.n	80108b2 <lwip_netconn_do_close+0xbe>
 80108a4:	4b14      	ldr	r3, [pc, #80]	; (80108f8 <lwip_netconn_do_close+0x104>)
 80108a6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80108aa:	4916      	ldr	r1, [pc, #88]	; (8010904 <lwip_netconn_do_close+0x110>)
 80108ac:	4814      	ldr	r0, [pc, #80]	; (8010900 <lwip_netconn_do_close+0x10c>)
 80108ae:	f00b fc39 	bl	801c124 <iprintf>
        UNLOCK_TCPIP_CORE();
 80108b2:	4815      	ldr	r0, [pc, #84]	; (8010908 <lwip_netconn_do_close+0x114>)
 80108b4:	f00b fa31 	bl	801bd1a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	330c      	adds	r3, #12
 80108be:	2100      	movs	r1, #0
 80108c0:	4618      	mov	r0, r3
 80108c2:	f00b f990 	bl	801bbe6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80108c6:	4810      	ldr	r0, [pc, #64]	; (8010908 <lwip_netconn_do_close+0x114>)
 80108c8:	f00b fa18 	bl	801bcfc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	785b      	ldrb	r3, [r3, #1]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00b      	beq.n	80108ee <lwip_netconn_do_close+0xfa>
 80108d6:	4b08      	ldr	r3, [pc, #32]	; (80108f8 <lwip_netconn_do_close+0x104>)
 80108d8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80108dc:	4909      	ldr	r1, [pc, #36]	; (8010904 <lwip_netconn_do_close+0x110>)
 80108de:	4808      	ldr	r0, [pc, #32]	; (8010900 <lwip_netconn_do_close+0x10c>)
 80108e0:	f00b fc20 	bl	801c124 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80108e4:	e003      	b.n	80108ee <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	22f5      	movs	r2, #245	; 0xf5
 80108ea:	711a      	strb	r2, [r3, #4]
 80108ec:	e000      	b.n	80108f0 <lwip_netconn_do_close+0xfc>
      return;
 80108ee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	0801e2c4 	.word	0x0801e2c4
 80108fc:	0801e668 	.word	0x0801e668
 8010900:	0801e308 	.word	0x0801e308
 8010904:	0801e684 	.word	0x0801e684
 8010908:	2000facc 	.word	0x2000facc

0801090c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d013      	beq.n	8010942 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00b      	beq.n	801093a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4618      	mov	r0, r3
 8010928:	f001 fe36 	bl	8012598 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	605a      	str	r2, [r3, #4]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801093a:	6879      	ldr	r1, [r7, #4]
 801093c:	2006      	movs	r0, #6
 801093e:	f000 ff87 	bl	8011850 <memp_free>
  }
}
 8010942:	bf00      	nop
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
	...

0801094c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d108      	bne.n	8010970 <netbuf_data+0x24>
 801095e:	4b1b      	ldr	r3, [pc, #108]	; (80109cc <netbuf_data+0x80>)
 8010960:	22c6      	movs	r2, #198	; 0xc6
 8010962:	491b      	ldr	r1, [pc, #108]	; (80109d0 <netbuf_data+0x84>)
 8010964:	481b      	ldr	r0, [pc, #108]	; (80109d4 <netbuf_data+0x88>)
 8010966:	f00b fbdd 	bl	801c124 <iprintf>
 801096a:	f06f 030f 	mvn.w	r3, #15
 801096e:	e029      	b.n	80109c4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d108      	bne.n	8010988 <netbuf_data+0x3c>
 8010976:	4b15      	ldr	r3, [pc, #84]	; (80109cc <netbuf_data+0x80>)
 8010978:	22c7      	movs	r2, #199	; 0xc7
 801097a:	4917      	ldr	r1, [pc, #92]	; (80109d8 <netbuf_data+0x8c>)
 801097c:	4815      	ldr	r0, [pc, #84]	; (80109d4 <netbuf_data+0x88>)
 801097e:	f00b fbd1 	bl	801c124 <iprintf>
 8010982:	f06f 030f 	mvn.w	r3, #15
 8010986:	e01d      	b.n	80109c4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d108      	bne.n	80109a0 <netbuf_data+0x54>
 801098e:	4b0f      	ldr	r3, [pc, #60]	; (80109cc <netbuf_data+0x80>)
 8010990:	22c8      	movs	r2, #200	; 0xc8
 8010992:	4912      	ldr	r1, [pc, #72]	; (80109dc <netbuf_data+0x90>)
 8010994:	480f      	ldr	r0, [pc, #60]	; (80109d4 <netbuf_data+0x88>)
 8010996:	f00b fbc5 	bl	801c124 <iprintf>
 801099a:	f06f 030f 	mvn.w	r3, #15
 801099e:	e011      	b.n	80109c4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d102      	bne.n	80109ae <netbuf_data+0x62>
    return ERR_BUF;
 80109a8:	f06f 0301 	mvn.w	r3, #1
 80109ac:	e00a      	b.n	80109c4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	685a      	ldr	r2, [r3, #4]
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	895a      	ldrh	r2, [r3, #10]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	0801e81c 	.word	0x0801e81c
 80109d0:	0801e924 	.word	0x0801e924
 80109d4:	0801e86c 	.word	0x0801e86c
 80109d8:	0801e940 	.word	0x0801e940
 80109dc:	0801e960 	.word	0x0801e960

080109e0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d108      	bne.n	8010a00 <netbuf_next+0x20>
 80109ee:	4b11      	ldr	r3, [pc, #68]	; (8010a34 <netbuf_next+0x54>)
 80109f0:	22e0      	movs	r2, #224	; 0xe0
 80109f2:	4911      	ldr	r1, [pc, #68]	; (8010a38 <netbuf_next+0x58>)
 80109f4:	4811      	ldr	r0, [pc, #68]	; (8010a3c <netbuf_next+0x5c>)
 80109f6:	f00b fb95 	bl	801c124 <iprintf>
 80109fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109fe:	e014      	b.n	8010a2a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d102      	bne.n	8010a10 <netbuf_next+0x30>
    return -1;
 8010a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a0e:	e00c      	b.n	8010a2a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d101      	bne.n	8010a28 <netbuf_next+0x48>
    return 1;
 8010a24:	2301      	movs	r3, #1
 8010a26:	e000      	b.n	8010a2a <netbuf_next+0x4a>
  }
  return 0;
 8010a28:	2300      	movs	r3, #0
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	0801e81c 	.word	0x0801e81c
 8010a38:	0801e97c 	.word	0x0801e97c
 8010a3c:	0801e86c 	.word	0x0801e86c

08010a40 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010a4a:	f008 fa03 	bl	8018e54 <sys_timeouts_sleeptime>
 8010a4e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a56:	d10b      	bne.n	8010a70 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010a58:	4813      	ldr	r0, [pc, #76]	; (8010aa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a5a:	f00b f95e 	bl	801bd1a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010a5e:	2200      	movs	r2, #0
 8010a60:	6839      	ldr	r1, [r7, #0]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f00b f834 	bl	801bad0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010a68:	480f      	ldr	r0, [pc, #60]	; (8010aa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a6a:	f00b f947 	bl	801bcfc <sys_mutex_lock>
    return;
 8010a6e:	e018      	b.n	8010aa2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d102      	bne.n	8010a7c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010a76:	f008 f9b3 	bl	8018de0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a7a:	e7e6      	b.n	8010a4a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010a7c:	480a      	ldr	r0, [pc, #40]	; (8010aa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a7e:	f00b f94c 	bl	801bd1a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f00b f822 	bl	801bad0 <sys_arch_mbox_fetch>
 8010a8c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010a8e:	4806      	ldr	r0, [pc, #24]	; (8010aa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a90:	f00b f934 	bl	801bcfc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a9a:	d102      	bne.n	8010aa2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010a9c:	f008 f9a0 	bl	8018de0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010aa0:	e7d3      	b.n	8010a4a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	2000facc 	.word	0x2000facc

08010aac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010ab4:	4810      	ldr	r0, [pc, #64]	; (8010af8 <tcpip_thread+0x4c>)
 8010ab6:	f00b f921 	bl	801bcfc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010aba:	4b10      	ldr	r3, [pc, #64]	; (8010afc <tcpip_thread+0x50>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d005      	beq.n	8010ace <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010ac2:	4b0e      	ldr	r3, [pc, #56]	; (8010afc <tcpip_thread+0x50>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a0e      	ldr	r2, [pc, #56]	; (8010b00 <tcpip_thread+0x54>)
 8010ac8:	6812      	ldr	r2, [r2, #0]
 8010aca:	4610      	mov	r0, r2
 8010acc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010ace:	f107 030c 	add.w	r3, r7, #12
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	480b      	ldr	r0, [pc, #44]	; (8010b04 <tcpip_thread+0x58>)
 8010ad6:	f7ff ffb3 	bl	8010a40 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d106      	bne.n	8010aee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010ae0:	4b09      	ldr	r3, [pc, #36]	; (8010b08 <tcpip_thread+0x5c>)
 8010ae2:	2291      	movs	r2, #145	; 0x91
 8010ae4:	4909      	ldr	r1, [pc, #36]	; (8010b0c <tcpip_thread+0x60>)
 8010ae6:	480a      	ldr	r0, [pc, #40]	; (8010b10 <tcpip_thread+0x64>)
 8010ae8:	f00b fb1c 	bl	801c124 <iprintf>
      continue;
 8010aec:	e003      	b.n	8010af6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 f80f 	bl	8010b14 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010af6:	e7ea      	b.n	8010ace <tcpip_thread+0x22>
 8010af8:	2000facc 	.word	0x2000facc
 8010afc:	20009874 	.word	0x20009874
 8010b00:	20009878 	.word	0x20009878
 8010b04:	2000987c 	.word	0x2000987c
 8010b08:	0801e9b4 	.word	0x0801e9b4
 8010b0c:	0801e9e4 	.word	0x0801e9e4
 8010b10:	0801ea04 	.word	0x0801ea04

08010b14 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	2b02      	cmp	r3, #2
 8010b22:	d026      	beq.n	8010b72 <tcpip_thread_handle_msg+0x5e>
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	dc2b      	bgt.n	8010b80 <tcpip_thread_handle_msg+0x6c>
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d002      	beq.n	8010b32 <tcpip_thread_handle_msg+0x1e>
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d015      	beq.n	8010b5c <tcpip_thread_handle_msg+0x48>
 8010b30:	e026      	b.n	8010b80 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	6850      	ldr	r0, [r2, #4]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	6892      	ldr	r2, [r2, #8]
 8010b3e:	4611      	mov	r1, r2
 8010b40:	4798      	blx	r3
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d004      	beq.n	8010b52 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f001 fd23 	bl	8012598 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010b52:	6879      	ldr	r1, [r7, #4]
 8010b54:	2009      	movs	r0, #9
 8010b56:	f000 fe7b 	bl	8011850 <memp_free>
      break;
 8010b5a:	e018      	b.n	8010b8e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	6892      	ldr	r2, [r2, #8]
 8010b64:	4610      	mov	r0, r2
 8010b66:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	2008      	movs	r0, #8
 8010b6c:	f000 fe70 	bl	8011850 <memp_free>
      break;
 8010b70:	e00d      	b.n	8010b8e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	6892      	ldr	r2, [r2, #8]
 8010b7a:	4610      	mov	r0, r2
 8010b7c:	4798      	blx	r3
      break;
 8010b7e:	e006      	b.n	8010b8e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010b80:	4b05      	ldr	r3, [pc, #20]	; (8010b98 <tcpip_thread_handle_msg+0x84>)
 8010b82:	22cf      	movs	r2, #207	; 0xcf
 8010b84:	4905      	ldr	r1, [pc, #20]	; (8010b9c <tcpip_thread_handle_msg+0x88>)
 8010b86:	4806      	ldr	r0, [pc, #24]	; (8010ba0 <tcpip_thread_handle_msg+0x8c>)
 8010b88:	f00b facc 	bl	801c124 <iprintf>
      break;
 8010b8c:	bf00      	nop
  }
}
 8010b8e:	bf00      	nop
 8010b90:	3708      	adds	r7, #8
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	0801e9b4 	.word	0x0801e9b4
 8010b9c:	0801e9e4 	.word	0x0801e9e4
 8010ba0:	0801ea04 	.word	0x0801ea04

08010ba4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010bb0:	481a      	ldr	r0, [pc, #104]	; (8010c1c <tcpip_inpkt+0x78>)
 8010bb2:	f00a ffd5 	bl	801bb60 <sys_mbox_valid>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d105      	bne.n	8010bc8 <tcpip_inpkt+0x24>
 8010bbc:	4b18      	ldr	r3, [pc, #96]	; (8010c20 <tcpip_inpkt+0x7c>)
 8010bbe:	22fc      	movs	r2, #252	; 0xfc
 8010bc0:	4918      	ldr	r1, [pc, #96]	; (8010c24 <tcpip_inpkt+0x80>)
 8010bc2:	4819      	ldr	r0, [pc, #100]	; (8010c28 <tcpip_inpkt+0x84>)
 8010bc4:	f00b faae 	bl	801c124 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010bc8:	2009      	movs	r0, #9
 8010bca:	f000 fdef 	bl	80117ac <memp_malloc>
 8010bce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d102      	bne.n	8010bdc <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bda:	e01a      	b.n	8010c12 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	2200      	movs	r2, #0
 8010be0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	68ba      	ldr	r2, [r7, #8]
 8010bec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010bf4:	6979      	ldr	r1, [r7, #20]
 8010bf6:	4809      	ldr	r0, [pc, #36]	; (8010c1c <tcpip_inpkt+0x78>)
 8010bf8:	f00a ff50 	bl	801ba9c <sys_mbox_trypost>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d006      	beq.n	8010c10 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010c02:	6979      	ldr	r1, [r7, #20]
 8010c04:	2009      	movs	r0, #9
 8010c06:	f000 fe23 	bl	8011850 <memp_free>
    return ERR_MEM;
 8010c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c0e:	e000      	b.n	8010c12 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010c10:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3718      	adds	r7, #24
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	2000987c 	.word	0x2000987c
 8010c20:	0801e9b4 	.word	0x0801e9b4
 8010c24:	0801ea2c 	.word	0x0801ea2c
 8010c28:	0801ea04 	.word	0x0801ea04

08010c2c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c3c:	f003 0318 	and.w	r3, r3, #24
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d006      	beq.n	8010c52 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010c44:	4a08      	ldr	r2, [pc, #32]	; (8010c68 <tcpip_input+0x3c>)
 8010c46:	6839      	ldr	r1, [r7, #0]
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7ff ffab 	bl	8010ba4 <tcpip_inpkt>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	e005      	b.n	8010c5e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010c52:	4a06      	ldr	r2, [pc, #24]	; (8010c6c <tcpip_input+0x40>)
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7ff ffa4 	bl	8010ba4 <tcpip_inpkt>
 8010c5c:	4603      	mov	r3, r0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	0801b899 	.word	0x0801b899
 8010c6c:	0801a7ad 	.word	0x0801a7ad

08010c70 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010c7a:	4819      	ldr	r0, [pc, #100]	; (8010ce0 <tcpip_try_callback+0x70>)
 8010c7c:	f00a ff70 	bl	801bb60 <sys_mbox_valid>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d106      	bne.n	8010c94 <tcpip_try_callback+0x24>
 8010c86:	4b17      	ldr	r3, [pc, #92]	; (8010ce4 <tcpip_try_callback+0x74>)
 8010c88:	f240 125d 	movw	r2, #349	; 0x15d
 8010c8c:	4916      	ldr	r1, [pc, #88]	; (8010ce8 <tcpip_try_callback+0x78>)
 8010c8e:	4817      	ldr	r0, [pc, #92]	; (8010cec <tcpip_try_callback+0x7c>)
 8010c90:	f00b fa48 	bl	801c124 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010c94:	2008      	movs	r0, #8
 8010c96:	f000 fd89 	bl	80117ac <memp_malloc>
 8010c9a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d102      	bne.n	8010ca8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ca6:	e017      	b.n	8010cd8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2201      	movs	r2, #1
 8010cac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	683a      	ldr	r2, [r7, #0]
 8010cb8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010cba:	68f9      	ldr	r1, [r7, #12]
 8010cbc:	4808      	ldr	r0, [pc, #32]	; (8010ce0 <tcpip_try_callback+0x70>)
 8010cbe:	f00a feed 	bl	801ba9c <sys_mbox_trypost>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d006      	beq.n	8010cd6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010cc8:	68f9      	ldr	r1, [r7, #12]
 8010cca:	2008      	movs	r0, #8
 8010ccc:	f000 fdc0 	bl	8011850 <memp_free>
    return ERR_MEM;
 8010cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cd4:	e000      	b.n	8010cd8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	2000987c 	.word	0x2000987c
 8010ce4:	0801e9b4 	.word	0x0801e9b4
 8010ce8:	0801ea2c 	.word	0x0801ea2c
 8010cec:	0801ea04 	.word	0x0801ea04

08010cf0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010cfc:	4806      	ldr	r0, [pc, #24]	; (8010d18 <tcpip_send_msg_wait_sem+0x28>)
 8010cfe:	f00a fffd 	bl	801bcfc <sys_mutex_lock>
  fn(apimsg);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	68b8      	ldr	r0, [r7, #8]
 8010d06:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010d08:	4803      	ldr	r0, [pc, #12]	; (8010d18 <tcpip_send_msg_wait_sem+0x28>)
 8010d0a:	f00b f806 	bl	801bd1a <sys_mutex_unlock>
  return ERR_OK;
 8010d0e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	2000facc 	.word	0x2000facc

08010d1c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af02      	add	r7, sp, #8
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010d26:	f000 f8b9 	bl	8010e9c <lwip_init>

  tcpip_init_done = initfunc;
 8010d2a:	4a17      	ldr	r2, [pc, #92]	; (8010d88 <tcpip_init+0x6c>)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010d30:	4a16      	ldr	r2, [pc, #88]	; (8010d8c <tcpip_init+0x70>)
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010d36:	2106      	movs	r1, #6
 8010d38:	4815      	ldr	r0, [pc, #84]	; (8010d90 <tcpip_init+0x74>)
 8010d3a:	f00a fe83 	bl	801ba44 <sys_mbox_new>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d006      	beq.n	8010d52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010d44:	4b13      	ldr	r3, [pc, #76]	; (8010d94 <tcpip_init+0x78>)
 8010d46:	f240 2261 	movw	r2, #609	; 0x261
 8010d4a:	4913      	ldr	r1, [pc, #76]	; (8010d98 <tcpip_init+0x7c>)
 8010d4c:	4813      	ldr	r0, [pc, #76]	; (8010d9c <tcpip_init+0x80>)
 8010d4e:	f00b f9e9 	bl	801c124 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010d52:	4813      	ldr	r0, [pc, #76]	; (8010da0 <tcpip_init+0x84>)
 8010d54:	f00a ffbc 	bl	801bcd0 <sys_mutex_new>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d006      	beq.n	8010d6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010d5e:	4b0d      	ldr	r3, [pc, #52]	; (8010d94 <tcpip_init+0x78>)
 8010d60:	f240 2265 	movw	r2, #613	; 0x265
 8010d64:	490f      	ldr	r1, [pc, #60]	; (8010da4 <tcpip_init+0x88>)
 8010d66:	480d      	ldr	r0, [pc, #52]	; (8010d9c <tcpip_init+0x80>)
 8010d68:	f00b f9dc 	bl	801c124 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010d6c:	2318      	movs	r3, #24
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8010d74:	2200      	movs	r2, #0
 8010d76:	490c      	ldr	r1, [pc, #48]	; (8010da8 <tcpip_init+0x8c>)
 8010d78:	480c      	ldr	r0, [pc, #48]	; (8010dac <tcpip_init+0x90>)
 8010d7a:	f00a ffdb 	bl	801bd34 <sys_thread_new>
}
 8010d7e:	bf00      	nop
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20009874 	.word	0x20009874
 8010d8c:	20009878 	.word	0x20009878
 8010d90:	2000987c 	.word	0x2000987c
 8010d94:	0801e9b4 	.word	0x0801e9b4
 8010d98:	0801ea3c 	.word	0x0801ea3c
 8010d9c:	0801ea04 	.word	0x0801ea04
 8010da0:	2000facc 	.word	0x2000facc
 8010da4:	0801ea60 	.word	0x0801ea60
 8010da8:	08010aad 	.word	0x08010aad
 8010dac:	0801ea84 	.word	0x0801ea84

08010db0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <fs_open+0x16>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d102      	bne.n	8010dcc <fs_open+0x1c>
    return ERR_ARG;
 8010dc6:	f06f 030f 	mvn.w	r3, #15
 8010dca:	e028      	b.n	8010e1e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010dcc:	4b16      	ldr	r3, [pc, #88]	; (8010e28 <fs_open+0x78>)
 8010dce:	60fb      	str	r3, [r7, #12]
 8010dd0:	e020      	b.n	8010e14 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6838      	ldr	r0, [r7, #0]
 8010dda:	f7ef f9f9 	bl	80001d0 <strcmp>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d114      	bne.n	8010e0e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	689a      	ldr	r2, [r3, #8]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	68da      	ldr	r2, [r3, #12]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	68da      	ldr	r2, [r3, #12]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	7c1a      	ldrb	r2, [r3, #16]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	e007      	b.n	8010e1e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	60fb      	str	r3, [r7, #12]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1db      	bne.n	8010dd2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8010e1a:	f06f 0305 	mvn.w	r3, #5
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	08024414 	.word	0x08024414

08010e2c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8010e34:	bf00      	nop
 8010e36:	370c      	adds	r7, #12
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	4603      	mov	r3, r0
 8010e48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010e4a:	88fb      	ldrh	r3, [r7, #6]
 8010e4c:	021b      	lsls	r3, r3, #8
 8010e4e:	b21a      	sxth	r2, r3
 8010e50:	88fb      	ldrh	r3, [r7, #6]
 8010e52:	0a1b      	lsrs	r3, r3, #8
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	b21b      	sxth	r3, r3
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	b21b      	sxth	r3, r3
 8010e5c:	b29b      	uxth	r3, r3
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	370c      	adds	r7, #12
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010e6a:	b480      	push	{r7}
 8010e6c:	b083      	sub	sp, #12
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	061a      	lsls	r2, r3, #24
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	021b      	lsls	r3, r3, #8
 8010e7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010e7e:	431a      	orrs	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	0a1b      	lsrs	r3, r3, #8
 8010e84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010e88:	431a      	orrs	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	0e1b      	lsrs	r3, r3, #24
 8010e8e:	4313      	orrs	r3, r2
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010ea6:	f00a ff07 	bl	801bcb8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010eaa:	f000 f8d5 	bl	8011058 <mem_init>
  memp_init();
 8010eae:	f000 fc31 	bl	8011714 <memp_init>
  pbuf_init();
  netif_init();
 8010eb2:	f000 fcf7 	bl	80118a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010eb6:	f008 f805 	bl	8018ec4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010eba:	f001 fe07 	bl	8012acc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010ebe:	f007 ff47 	bl	8018d50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
	...

08010ecc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010ed6:	4b05      	ldr	r3, [pc, #20]	; (8010eec <ptr_to_mem+0x20>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	88fb      	ldrh	r3, [r7, #6]
 8010edc:	4413      	add	r3, r2
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	20009880 	.word	0x20009880

08010ef0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010ef8:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <mem_to_ptr+0x20>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	b29b      	uxth	r3, r3
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	20009880 	.word	0x20009880

08010f14 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010f14:	b590      	push	{r4, r7, lr}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010f1c:	4b45      	ldr	r3, [pc, #276]	; (8011034 <plug_holes+0x120>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d206      	bcs.n	8010f34 <plug_holes+0x20>
 8010f26:	4b44      	ldr	r3, [pc, #272]	; (8011038 <plug_holes+0x124>)
 8010f28:	f240 12df 	movw	r2, #479	; 0x1df
 8010f2c:	4943      	ldr	r1, [pc, #268]	; (801103c <plug_holes+0x128>)
 8010f2e:	4844      	ldr	r0, [pc, #272]	; (8011040 <plug_holes+0x12c>)
 8010f30:	f00b f8f8 	bl	801c124 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010f34:	4b43      	ldr	r3, [pc, #268]	; (8011044 <plug_holes+0x130>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d306      	bcc.n	8010f4c <plug_holes+0x38>
 8010f3e:	4b3e      	ldr	r3, [pc, #248]	; (8011038 <plug_holes+0x124>)
 8010f40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010f44:	4940      	ldr	r1, [pc, #256]	; (8011048 <plug_holes+0x134>)
 8010f46:	483e      	ldr	r0, [pc, #248]	; (8011040 <plug_holes+0x12c>)
 8010f48:	f00b f8ec 	bl	801c124 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	791b      	ldrb	r3, [r3, #4]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d006      	beq.n	8010f62 <plug_holes+0x4e>
 8010f54:	4b38      	ldr	r3, [pc, #224]	; (8011038 <plug_holes+0x124>)
 8010f56:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010f5a:	493c      	ldr	r1, [pc, #240]	; (801104c <plug_holes+0x138>)
 8010f5c:	4838      	ldr	r0, [pc, #224]	; (8011040 <plug_holes+0x12c>)
 8010f5e:	f00b f8e1 	bl	801c124 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	881b      	ldrh	r3, [r3, #0]
 8010f66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f6a:	d906      	bls.n	8010f7a <plug_holes+0x66>
 8010f6c:	4b32      	ldr	r3, [pc, #200]	; (8011038 <plug_holes+0x124>)
 8010f6e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010f72:	4937      	ldr	r1, [pc, #220]	; (8011050 <plug_holes+0x13c>)
 8010f74:	4832      	ldr	r0, [pc, #200]	; (8011040 <plug_holes+0x12c>)
 8010f76:	f00b f8d5 	bl	801c124 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	881b      	ldrh	r3, [r3, #0]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7ff ffa4 	bl	8010ecc <ptr_to_mem>
 8010f84:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d024      	beq.n	8010fd8 <plug_holes+0xc4>
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	791b      	ldrb	r3, [r3, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d120      	bne.n	8010fd8 <plug_holes+0xc4>
 8010f96:	4b2b      	ldr	r3, [pc, #172]	; (8011044 <plug_holes+0x130>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	68fa      	ldr	r2, [r7, #12]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d01b      	beq.n	8010fd8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010fa0:	4b2c      	ldr	r3, [pc, #176]	; (8011054 <plug_holes+0x140>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d102      	bne.n	8010fb0 <plug_holes+0x9c>
      lfree = mem;
 8010faa:	4a2a      	ldr	r2, [pc, #168]	; (8011054 <plug_holes+0x140>)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	881a      	ldrh	r2, [r3, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010fc0:	d00a      	beq.n	8010fd8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7ff ff80 	bl	8010ecc <ptr_to_mem>
 8010fcc:	4604      	mov	r4, r0
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f7ff ff8e 	bl	8010ef0 <mem_to_ptr>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	885b      	ldrh	r3, [r3, #2]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff ff75 	bl	8010ecc <ptr_to_mem>
 8010fe2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d01f      	beq.n	801102c <plug_holes+0x118>
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	791b      	ldrb	r3, [r3, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d11b      	bne.n	801102c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010ff4:	4b17      	ldr	r3, [pc, #92]	; (8011054 <plug_holes+0x140>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d102      	bne.n	8011004 <plug_holes+0xf0>
      lfree = pmem;
 8010ffe:	4a15      	ldr	r2, [pc, #84]	; (8011054 <plug_holes+0x140>)
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	881a      	ldrh	r2, [r3, #0]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011014:	d00a      	beq.n	801102c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	4618      	mov	r0, r3
 801101c:	f7ff ff56 	bl	8010ecc <ptr_to_mem>
 8011020:	4604      	mov	r4, r0
 8011022:	68b8      	ldr	r0, [r7, #8]
 8011024:	f7ff ff64 	bl	8010ef0 <mem_to_ptr>
 8011028:	4603      	mov	r3, r0
 801102a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801102c:	bf00      	nop
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	bd90      	pop	{r4, r7, pc}
 8011034:	20009880 	.word	0x20009880
 8011038:	0801ea94 	.word	0x0801ea94
 801103c:	0801eac4 	.word	0x0801eac4
 8011040:	0801eadc 	.word	0x0801eadc
 8011044:	20009884 	.word	0x20009884
 8011048:	0801eb04 	.word	0x0801eb04
 801104c:	0801eb20 	.word	0x0801eb20
 8011050:	0801eb3c 	.word	0x0801eb3c
 8011054:	2000988c 	.word	0x2000988c

08011058 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801105e:	4b1f      	ldr	r3, [pc, #124]	; (80110dc <mem_init+0x84>)
 8011060:	3303      	adds	r3, #3
 8011062:	f023 0303 	bic.w	r3, r3, #3
 8011066:	461a      	mov	r2, r3
 8011068:	4b1d      	ldr	r3, [pc, #116]	; (80110e0 <mem_init+0x88>)
 801106a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801106c:	4b1c      	ldr	r3, [pc, #112]	; (80110e0 <mem_init+0x88>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011078:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011086:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801108a:	f7ff ff1f 	bl	8010ecc <ptr_to_mem>
 801108e:	4603      	mov	r3, r0
 8011090:	4a14      	ldr	r2, [pc, #80]	; (80110e4 <mem_init+0x8c>)
 8011092:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011094:	4b13      	ldr	r3, [pc, #76]	; (80110e4 <mem_init+0x8c>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2201      	movs	r2, #1
 801109a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801109c:	4b11      	ldr	r3, [pc, #68]	; (80110e4 <mem_init+0x8c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80110a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80110a6:	4b0f      	ldr	r3, [pc, #60]	; (80110e4 <mem_init+0x8c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80110ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80110b0:	4b0b      	ldr	r3, [pc, #44]	; (80110e0 <mem_init+0x88>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a0c      	ldr	r2, [pc, #48]	; (80110e8 <mem_init+0x90>)
 80110b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80110b8:	480c      	ldr	r0, [pc, #48]	; (80110ec <mem_init+0x94>)
 80110ba:	f00a fe09 	bl	801bcd0 <sys_mutex_new>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d006      	beq.n	80110d2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80110c4:	4b0a      	ldr	r3, [pc, #40]	; (80110f0 <mem_init+0x98>)
 80110c6:	f240 221f 	movw	r2, #543	; 0x21f
 80110ca:	490a      	ldr	r1, [pc, #40]	; (80110f4 <mem_init+0x9c>)
 80110cc:	480a      	ldr	r0, [pc, #40]	; (80110f8 <mem_init+0xa0>)
 80110ce:	f00b f829 	bl	801c124 <iprintf>
  }
}
 80110d2:	bf00      	nop
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	2000fae8 	.word	0x2000fae8
 80110e0:	20009880 	.word	0x20009880
 80110e4:	20009884 	.word	0x20009884
 80110e8:	2000988c 	.word	0x2000988c
 80110ec:	20009888 	.word	0x20009888
 80110f0:	0801ea94 	.word	0x0801ea94
 80110f4:	0801eb68 	.word	0x0801eb68
 80110f8:	0801eadc 	.word	0x0801eadc

080110fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff fef3 	bl	8010ef0 <mem_to_ptr>
 801110a:	4603      	mov	r3, r0
 801110c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	881b      	ldrh	r3, [r3, #0]
 8011112:	4618      	mov	r0, r3
 8011114:	f7ff feda 	bl	8010ecc <ptr_to_mem>
 8011118:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	885b      	ldrh	r3, [r3, #2]
 801111e:	4618      	mov	r0, r3
 8011120:	f7ff fed4 	bl	8010ecc <ptr_to_mem>
 8011124:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801112e:	d818      	bhi.n	8011162 <mem_link_valid+0x66>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	885b      	ldrh	r3, [r3, #2]
 8011134:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011138:	d813      	bhi.n	8011162 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801113e:	8afa      	ldrh	r2, [r7, #22]
 8011140:	429a      	cmp	r2, r3
 8011142:	d004      	beq.n	801114e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	8afa      	ldrh	r2, [r7, #22]
 801114a:	429a      	cmp	r2, r3
 801114c:	d109      	bne.n	8011162 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801114e:	4b08      	ldr	r3, [pc, #32]	; (8011170 <mem_link_valid+0x74>)
 8011150:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011152:	693a      	ldr	r2, [r7, #16]
 8011154:	429a      	cmp	r2, r3
 8011156:	d006      	beq.n	8011166 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	885b      	ldrh	r3, [r3, #2]
 801115c:	8afa      	ldrh	r2, [r7, #22]
 801115e:	429a      	cmp	r2, r3
 8011160:	d001      	beq.n	8011166 <mem_link_valid+0x6a>
    return 0;
 8011162:	2300      	movs	r3, #0
 8011164:	e000      	b.n	8011168 <mem_link_valid+0x6c>
  }
  return 1;
 8011166:	2301      	movs	r3, #1
}
 8011168:	4618      	mov	r0, r3
 801116a:	3718      	adds	r7, #24
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	20009884 	.word	0x20009884

08011174 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d070      	beq.n	8011264 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f003 0303 	and.w	r3, r3, #3
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00d      	beq.n	80111a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801118c:	4b37      	ldr	r3, [pc, #220]	; (801126c <mem_free+0xf8>)
 801118e:	f240 2273 	movw	r2, #627	; 0x273
 8011192:	4937      	ldr	r1, [pc, #220]	; (8011270 <mem_free+0xfc>)
 8011194:	4837      	ldr	r0, [pc, #220]	; (8011274 <mem_free+0x100>)
 8011196:	f00a ffc5 	bl	801c124 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801119a:	f00a fdeb 	bl	801bd74 <sys_arch_protect>
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	68f8      	ldr	r0, [r7, #12]
 80111a2:	f00a fdf5 	bl	801bd90 <sys_arch_unprotect>
    return;
 80111a6:	e05e      	b.n	8011266 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3b08      	subs	r3, #8
 80111ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80111ae:	4b32      	ldr	r3, [pc, #200]	; (8011278 <mem_free+0x104>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	69fa      	ldr	r2, [r7, #28]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d306      	bcc.n	80111c6 <mem_free+0x52>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f103 020c 	add.w	r2, r3, #12
 80111be:	4b2f      	ldr	r3, [pc, #188]	; (801127c <mem_free+0x108>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d90d      	bls.n	80111e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80111c6:	4b29      	ldr	r3, [pc, #164]	; (801126c <mem_free+0xf8>)
 80111c8:	f240 227f 	movw	r2, #639	; 0x27f
 80111cc:	492c      	ldr	r1, [pc, #176]	; (8011280 <mem_free+0x10c>)
 80111ce:	4829      	ldr	r0, [pc, #164]	; (8011274 <mem_free+0x100>)
 80111d0:	f00a ffa8 	bl	801c124 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80111d4:	f00a fdce 	bl	801bd74 <sys_arch_protect>
 80111d8:	6138      	str	r0, [r7, #16]
 80111da:	6938      	ldr	r0, [r7, #16]
 80111dc:	f00a fdd8 	bl	801bd90 <sys_arch_unprotect>
    return;
 80111e0:	e041      	b.n	8011266 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80111e2:	4828      	ldr	r0, [pc, #160]	; (8011284 <mem_free+0x110>)
 80111e4:	f00a fd8a 	bl	801bcfc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	791b      	ldrb	r3, [r3, #4]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d110      	bne.n	8011212 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80111f0:	4b1e      	ldr	r3, [pc, #120]	; (801126c <mem_free+0xf8>)
 80111f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80111f6:	4924      	ldr	r1, [pc, #144]	; (8011288 <mem_free+0x114>)
 80111f8:	481e      	ldr	r0, [pc, #120]	; (8011274 <mem_free+0x100>)
 80111fa:	f00a ff93 	bl	801c124 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80111fe:	4821      	ldr	r0, [pc, #132]	; (8011284 <mem_free+0x110>)
 8011200:	f00a fd8b 	bl	801bd1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011204:	f00a fdb6 	bl	801bd74 <sys_arch_protect>
 8011208:	6178      	str	r0, [r7, #20]
 801120a:	6978      	ldr	r0, [r7, #20]
 801120c:	f00a fdc0 	bl	801bd90 <sys_arch_unprotect>
    return;
 8011210:	e029      	b.n	8011266 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011212:	69f8      	ldr	r0, [r7, #28]
 8011214:	f7ff ff72 	bl	80110fc <mem_link_valid>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d110      	bne.n	8011240 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801121e:	4b13      	ldr	r3, [pc, #76]	; (801126c <mem_free+0xf8>)
 8011220:	f240 2295 	movw	r2, #661	; 0x295
 8011224:	4919      	ldr	r1, [pc, #100]	; (801128c <mem_free+0x118>)
 8011226:	4813      	ldr	r0, [pc, #76]	; (8011274 <mem_free+0x100>)
 8011228:	f00a ff7c 	bl	801c124 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801122c:	4815      	ldr	r0, [pc, #84]	; (8011284 <mem_free+0x110>)
 801122e:	f00a fd74 	bl	801bd1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011232:	f00a fd9f 	bl	801bd74 <sys_arch_protect>
 8011236:	61b8      	str	r0, [r7, #24]
 8011238:	69b8      	ldr	r0, [r7, #24]
 801123a:	f00a fda9 	bl	801bd90 <sys_arch_unprotect>
    return;
 801123e:	e012      	b.n	8011266 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	2200      	movs	r2, #0
 8011244:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011246:	4b12      	ldr	r3, [pc, #72]	; (8011290 <mem_free+0x11c>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	69fa      	ldr	r2, [r7, #28]
 801124c:	429a      	cmp	r2, r3
 801124e:	d202      	bcs.n	8011256 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011250:	4a0f      	ldr	r2, [pc, #60]	; (8011290 <mem_free+0x11c>)
 8011252:	69fb      	ldr	r3, [r7, #28]
 8011254:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011256:	69f8      	ldr	r0, [r7, #28]
 8011258:	f7ff fe5c 	bl	8010f14 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801125c:	4809      	ldr	r0, [pc, #36]	; (8011284 <mem_free+0x110>)
 801125e:	f00a fd5c 	bl	801bd1a <sys_mutex_unlock>
 8011262:	e000      	b.n	8011266 <mem_free+0xf2>
    return;
 8011264:	bf00      	nop
}
 8011266:	3720      	adds	r7, #32
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	0801ea94 	.word	0x0801ea94
 8011270:	0801eb84 	.word	0x0801eb84
 8011274:	0801eadc 	.word	0x0801eadc
 8011278:	20009880 	.word	0x20009880
 801127c:	20009884 	.word	0x20009884
 8011280:	0801eba8 	.word	0x0801eba8
 8011284:	20009888 	.word	0x20009888
 8011288:	0801ebc4 	.word	0x0801ebc4
 801128c:	0801ebec 	.word	0x0801ebec
 8011290:	2000988c 	.word	0x2000988c

08011294 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b088      	sub	sp, #32
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	460b      	mov	r3, r1
 801129e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80112a0:	887b      	ldrh	r3, [r7, #2]
 80112a2:	3303      	adds	r3, #3
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	f023 0303 	bic.w	r3, r3, #3
 80112aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80112ac:	8bfb      	ldrh	r3, [r7, #30]
 80112ae:	2b0b      	cmp	r3, #11
 80112b0:	d801      	bhi.n	80112b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80112b2:	230c      	movs	r3, #12
 80112b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80112b6:	8bfb      	ldrh	r3, [r7, #30]
 80112b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80112bc:	d803      	bhi.n	80112c6 <mem_trim+0x32>
 80112be:	8bfa      	ldrh	r2, [r7, #30]
 80112c0:	887b      	ldrh	r3, [r7, #2]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d201      	bcs.n	80112ca <mem_trim+0x36>
    return NULL;
 80112c6:	2300      	movs	r3, #0
 80112c8:	e0d8      	b.n	801147c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80112ca:	4b6e      	ldr	r3, [pc, #440]	; (8011484 <mem_trim+0x1f0>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d304      	bcc.n	80112de <mem_trim+0x4a>
 80112d4:	4b6c      	ldr	r3, [pc, #432]	; (8011488 <mem_trim+0x1f4>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d306      	bcc.n	80112ec <mem_trim+0x58>
 80112de:	4b6b      	ldr	r3, [pc, #428]	; (801148c <mem_trim+0x1f8>)
 80112e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80112e4:	496a      	ldr	r1, [pc, #424]	; (8011490 <mem_trim+0x1fc>)
 80112e6:	486b      	ldr	r0, [pc, #428]	; (8011494 <mem_trim+0x200>)
 80112e8:	f00a ff1c 	bl	801c124 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80112ec:	4b65      	ldr	r3, [pc, #404]	; (8011484 <mem_trim+0x1f0>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d304      	bcc.n	8011300 <mem_trim+0x6c>
 80112f6:	4b64      	ldr	r3, [pc, #400]	; (8011488 <mem_trim+0x1f4>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d307      	bcc.n	8011310 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011300:	f00a fd38 	bl	801bd74 <sys_arch_protect>
 8011304:	60b8      	str	r0, [r7, #8]
 8011306:	68b8      	ldr	r0, [r7, #8]
 8011308:	f00a fd42 	bl	801bd90 <sys_arch_unprotect>
    return rmem;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	e0b5      	b.n	801147c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	3b08      	subs	r3, #8
 8011314:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011316:	69b8      	ldr	r0, [r7, #24]
 8011318:	f7ff fdea 	bl	8010ef0 <mem_to_ptr>
 801131c:	4603      	mov	r3, r0
 801131e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	881a      	ldrh	r2, [r3, #0]
 8011324:	8afb      	ldrh	r3, [r7, #22]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	b29b      	uxth	r3, r3
 801132a:	3b08      	subs	r3, #8
 801132c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801132e:	8bfa      	ldrh	r2, [r7, #30]
 8011330:	8abb      	ldrh	r3, [r7, #20]
 8011332:	429a      	cmp	r2, r3
 8011334:	d906      	bls.n	8011344 <mem_trim+0xb0>
 8011336:	4b55      	ldr	r3, [pc, #340]	; (801148c <mem_trim+0x1f8>)
 8011338:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801133c:	4956      	ldr	r1, [pc, #344]	; (8011498 <mem_trim+0x204>)
 801133e:	4855      	ldr	r0, [pc, #340]	; (8011494 <mem_trim+0x200>)
 8011340:	f00a fef0 	bl	801c124 <iprintf>
  if (newsize > size) {
 8011344:	8bfa      	ldrh	r2, [r7, #30]
 8011346:	8abb      	ldrh	r3, [r7, #20]
 8011348:	429a      	cmp	r2, r3
 801134a:	d901      	bls.n	8011350 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801134c:	2300      	movs	r3, #0
 801134e:	e095      	b.n	801147c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011350:	8bfa      	ldrh	r2, [r7, #30]
 8011352:	8abb      	ldrh	r3, [r7, #20]
 8011354:	429a      	cmp	r2, r3
 8011356:	d101      	bne.n	801135c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	e08f      	b.n	801147c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801135c:	484f      	ldr	r0, [pc, #316]	; (801149c <mem_trim+0x208>)
 801135e:	f00a fccd 	bl	801bcfc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff fdb0 	bl	8010ecc <ptr_to_mem>
 801136c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	791b      	ldrb	r3, [r3, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d13f      	bne.n	80113f6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	881b      	ldrh	r3, [r3, #0]
 801137a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801137e:	d106      	bne.n	801138e <mem_trim+0xfa>
 8011380:	4b42      	ldr	r3, [pc, #264]	; (801148c <mem_trim+0x1f8>)
 8011382:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011386:	4946      	ldr	r1, [pc, #280]	; (80114a0 <mem_trim+0x20c>)
 8011388:	4842      	ldr	r0, [pc, #264]	; (8011494 <mem_trim+0x200>)
 801138a:	f00a fecb 	bl	801c124 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011394:	8afa      	ldrh	r2, [r7, #22]
 8011396:	8bfb      	ldrh	r3, [r7, #30]
 8011398:	4413      	add	r3, r2
 801139a:	b29b      	uxth	r3, r3
 801139c:	3308      	adds	r3, #8
 801139e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80113a0:	4b40      	ldr	r3, [pc, #256]	; (80114a4 <mem_trim+0x210>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	693a      	ldr	r2, [r7, #16]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d106      	bne.n	80113b8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80113aa:	89fb      	ldrh	r3, [r7, #14]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7ff fd8d 	bl	8010ecc <ptr_to_mem>
 80113b2:	4603      	mov	r3, r0
 80113b4:	4a3b      	ldr	r2, [pc, #236]	; (80114a4 <mem_trim+0x210>)
 80113b6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80113b8:	89fb      	ldrh	r3, [r7, #14]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff fd86 	bl	8010ecc <ptr_to_mem>
 80113c0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	2200      	movs	r2, #0
 80113c6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	89ba      	ldrh	r2, [r7, #12]
 80113cc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	8afa      	ldrh	r2, [r7, #22]
 80113d2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	89fa      	ldrh	r2, [r7, #14]
 80113d8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	881b      	ldrh	r3, [r3, #0]
 80113de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80113e2:	d047      	beq.n	8011474 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	881b      	ldrh	r3, [r3, #0]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7ff fd6f 	bl	8010ecc <ptr_to_mem>
 80113ee:	4602      	mov	r2, r0
 80113f0:	89fb      	ldrh	r3, [r7, #14]
 80113f2:	8053      	strh	r3, [r2, #2]
 80113f4:	e03e      	b.n	8011474 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80113f6:	8bfb      	ldrh	r3, [r7, #30]
 80113f8:	f103 0214 	add.w	r2, r3, #20
 80113fc:	8abb      	ldrh	r3, [r7, #20]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d838      	bhi.n	8011474 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011402:	8afa      	ldrh	r2, [r7, #22]
 8011404:	8bfb      	ldrh	r3, [r7, #30]
 8011406:	4413      	add	r3, r2
 8011408:	b29b      	uxth	r3, r3
 801140a:	3308      	adds	r3, #8
 801140c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	881b      	ldrh	r3, [r3, #0]
 8011412:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011416:	d106      	bne.n	8011426 <mem_trim+0x192>
 8011418:	4b1c      	ldr	r3, [pc, #112]	; (801148c <mem_trim+0x1f8>)
 801141a:	f240 3216 	movw	r2, #790	; 0x316
 801141e:	4920      	ldr	r1, [pc, #128]	; (80114a0 <mem_trim+0x20c>)
 8011420:	481c      	ldr	r0, [pc, #112]	; (8011494 <mem_trim+0x200>)
 8011422:	f00a fe7f 	bl	801c124 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011426:	89fb      	ldrh	r3, [r7, #14]
 8011428:	4618      	mov	r0, r3
 801142a:	f7ff fd4f 	bl	8010ecc <ptr_to_mem>
 801142e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011430:	4b1c      	ldr	r3, [pc, #112]	; (80114a4 <mem_trim+0x210>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	693a      	ldr	r2, [r7, #16]
 8011436:	429a      	cmp	r2, r3
 8011438:	d202      	bcs.n	8011440 <mem_trim+0x1ac>
      lfree = mem2;
 801143a:	4a1a      	ldr	r2, [pc, #104]	; (80114a4 <mem_trim+0x210>)
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	2200      	movs	r2, #0
 8011444:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	881a      	ldrh	r2, [r3, #0]
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	8afa      	ldrh	r2, [r7, #22]
 8011452:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	89fa      	ldrh	r2, [r7, #14]
 8011458:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011462:	d007      	beq.n	8011474 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	881b      	ldrh	r3, [r3, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fd2f 	bl	8010ecc <ptr_to_mem>
 801146e:	4602      	mov	r2, r0
 8011470:	89fb      	ldrh	r3, [r7, #14]
 8011472:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011474:	4809      	ldr	r0, [pc, #36]	; (801149c <mem_trim+0x208>)
 8011476:	f00a fc50 	bl	801bd1a <sys_mutex_unlock>
  return rmem;
 801147a:	687b      	ldr	r3, [r7, #4]
}
 801147c:	4618      	mov	r0, r3
 801147e:	3720      	adds	r7, #32
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	20009880 	.word	0x20009880
 8011488:	20009884 	.word	0x20009884
 801148c:	0801ea94 	.word	0x0801ea94
 8011490:	0801ec20 	.word	0x0801ec20
 8011494:	0801eadc 	.word	0x0801eadc
 8011498:	0801ec38 	.word	0x0801ec38
 801149c:	20009888 	.word	0x20009888
 80114a0:	0801ec58 	.word	0x0801ec58
 80114a4:	2000988c 	.word	0x2000988c

080114a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b088      	sub	sp, #32
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	4603      	mov	r3, r0
 80114b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80114b2:	88fb      	ldrh	r3, [r7, #6]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d101      	bne.n	80114bc <mem_malloc+0x14>
    return NULL;
 80114b8:	2300      	movs	r3, #0
 80114ba:	e0e2      	b.n	8011682 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80114bc:	88fb      	ldrh	r3, [r7, #6]
 80114be:	3303      	adds	r3, #3
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	f023 0303 	bic.w	r3, r3, #3
 80114c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80114c8:	8bbb      	ldrh	r3, [r7, #28]
 80114ca:	2b0b      	cmp	r3, #11
 80114cc:	d801      	bhi.n	80114d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80114ce:	230c      	movs	r3, #12
 80114d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80114d2:	8bbb      	ldrh	r3, [r7, #28]
 80114d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80114d8:	d803      	bhi.n	80114e2 <mem_malloc+0x3a>
 80114da:	8bba      	ldrh	r2, [r7, #28]
 80114dc:	88fb      	ldrh	r3, [r7, #6]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d201      	bcs.n	80114e6 <mem_malloc+0x3e>
    return NULL;
 80114e2:	2300      	movs	r3, #0
 80114e4:	e0cd      	b.n	8011682 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80114e6:	4869      	ldr	r0, [pc, #420]	; (801168c <mem_malloc+0x1e4>)
 80114e8:	f00a fc08 	bl	801bcfc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80114ec:	4b68      	ldr	r3, [pc, #416]	; (8011690 <mem_malloc+0x1e8>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7ff fcfd 	bl	8010ef0 <mem_to_ptr>
 80114f6:	4603      	mov	r3, r0
 80114f8:	83fb      	strh	r3, [r7, #30]
 80114fa:	e0b7      	b.n	801166c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80114fc:	8bfb      	ldrh	r3, [r7, #30]
 80114fe:	4618      	mov	r0, r3
 8011500:	f7ff fce4 	bl	8010ecc <ptr_to_mem>
 8011504:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	791b      	ldrb	r3, [r3, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f040 80a7 	bne.w	801165e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	461a      	mov	r2, r3
 8011516:	8bfb      	ldrh	r3, [r7, #30]
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	f1a3 0208 	sub.w	r2, r3, #8
 801151e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011520:	429a      	cmp	r2, r3
 8011522:	f0c0 809c 	bcc.w	801165e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	8bfb      	ldrh	r3, [r7, #30]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	f1a3 0208 	sub.w	r2, r3, #8
 8011534:	8bbb      	ldrh	r3, [r7, #28]
 8011536:	3314      	adds	r3, #20
 8011538:	429a      	cmp	r2, r3
 801153a:	d333      	bcc.n	80115a4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801153c:	8bfa      	ldrh	r2, [r7, #30]
 801153e:	8bbb      	ldrh	r3, [r7, #28]
 8011540:	4413      	add	r3, r2
 8011542:	b29b      	uxth	r3, r3
 8011544:	3308      	adds	r3, #8
 8011546:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011548:	8a7b      	ldrh	r3, [r7, #18]
 801154a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801154e:	d106      	bne.n	801155e <mem_malloc+0xb6>
 8011550:	4b50      	ldr	r3, [pc, #320]	; (8011694 <mem_malloc+0x1ec>)
 8011552:	f240 3287 	movw	r2, #903	; 0x387
 8011556:	4950      	ldr	r1, [pc, #320]	; (8011698 <mem_malloc+0x1f0>)
 8011558:	4850      	ldr	r0, [pc, #320]	; (801169c <mem_malloc+0x1f4>)
 801155a:	f00a fde3 	bl	801c124 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801155e:	8a7b      	ldrh	r3, [r7, #18]
 8011560:	4618      	mov	r0, r3
 8011562:	f7ff fcb3 	bl	8010ecc <ptr_to_mem>
 8011566:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2200      	movs	r2, #0
 801156c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	881a      	ldrh	r2, [r3, #0]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	8bfa      	ldrh	r2, [r7, #30]
 801157a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	8a7a      	ldrh	r2, [r7, #18]
 8011580:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	2201      	movs	r2, #1
 8011586:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	881b      	ldrh	r3, [r3, #0]
 801158c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011590:	d00b      	beq.n	80115aa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fc98 	bl	8010ecc <ptr_to_mem>
 801159c:	4602      	mov	r2, r0
 801159e:	8a7b      	ldrh	r3, [r7, #18]
 80115a0:	8053      	strh	r3, [r2, #2]
 80115a2:	e002      	b.n	80115aa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	2201      	movs	r2, #1
 80115a8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80115aa:	4b39      	ldr	r3, [pc, #228]	; (8011690 <mem_malloc+0x1e8>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	697a      	ldr	r2, [r7, #20]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d127      	bne.n	8011604 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80115b4:	4b36      	ldr	r3, [pc, #216]	; (8011690 <mem_malloc+0x1e8>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80115ba:	e005      	b.n	80115c8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80115bc:	69bb      	ldr	r3, [r7, #24]
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff fc83 	bl	8010ecc <ptr_to_mem>
 80115c6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	791b      	ldrb	r3, [r3, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d004      	beq.n	80115da <mem_malloc+0x132>
 80115d0:	4b33      	ldr	r3, [pc, #204]	; (80116a0 <mem_malloc+0x1f8>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	69ba      	ldr	r2, [r7, #24]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d1f0      	bne.n	80115bc <mem_malloc+0x114>
          }
          lfree = cur;
 80115da:	4a2d      	ldr	r2, [pc, #180]	; (8011690 <mem_malloc+0x1e8>)
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80115e0:	4b2b      	ldr	r3, [pc, #172]	; (8011690 <mem_malloc+0x1e8>)
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	4b2e      	ldr	r3, [pc, #184]	; (80116a0 <mem_malloc+0x1f8>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d00b      	beq.n	8011604 <mem_malloc+0x15c>
 80115ec:	4b28      	ldr	r3, [pc, #160]	; (8011690 <mem_malloc+0x1e8>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	791b      	ldrb	r3, [r3, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d006      	beq.n	8011604 <mem_malloc+0x15c>
 80115f6:	4b27      	ldr	r3, [pc, #156]	; (8011694 <mem_malloc+0x1ec>)
 80115f8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80115fc:	4929      	ldr	r1, [pc, #164]	; (80116a4 <mem_malloc+0x1fc>)
 80115fe:	4827      	ldr	r0, [pc, #156]	; (801169c <mem_malloc+0x1f4>)
 8011600:	f00a fd90 	bl	801c124 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011604:	4821      	ldr	r0, [pc, #132]	; (801168c <mem_malloc+0x1e4>)
 8011606:	f00a fb88 	bl	801bd1a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801160a:	8bba      	ldrh	r2, [r7, #28]
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	4413      	add	r3, r2
 8011610:	3308      	adds	r3, #8
 8011612:	4a23      	ldr	r2, [pc, #140]	; (80116a0 <mem_malloc+0x1f8>)
 8011614:	6812      	ldr	r2, [r2, #0]
 8011616:	4293      	cmp	r3, r2
 8011618:	d906      	bls.n	8011628 <mem_malloc+0x180>
 801161a:	4b1e      	ldr	r3, [pc, #120]	; (8011694 <mem_malloc+0x1ec>)
 801161c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011620:	4921      	ldr	r1, [pc, #132]	; (80116a8 <mem_malloc+0x200>)
 8011622:	481e      	ldr	r0, [pc, #120]	; (801169c <mem_malloc+0x1f4>)
 8011624:	f00a fd7e 	bl	801c124 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	f003 0303 	and.w	r3, r3, #3
 801162e:	2b00      	cmp	r3, #0
 8011630:	d006      	beq.n	8011640 <mem_malloc+0x198>
 8011632:	4b18      	ldr	r3, [pc, #96]	; (8011694 <mem_malloc+0x1ec>)
 8011634:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011638:	491c      	ldr	r1, [pc, #112]	; (80116ac <mem_malloc+0x204>)
 801163a:	4818      	ldr	r0, [pc, #96]	; (801169c <mem_malloc+0x1f4>)
 801163c:	f00a fd72 	bl	801c124 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	f003 0303 	and.w	r3, r3, #3
 8011646:	2b00      	cmp	r3, #0
 8011648:	d006      	beq.n	8011658 <mem_malloc+0x1b0>
 801164a:	4b12      	ldr	r3, [pc, #72]	; (8011694 <mem_malloc+0x1ec>)
 801164c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011650:	4917      	ldr	r1, [pc, #92]	; (80116b0 <mem_malloc+0x208>)
 8011652:	4812      	ldr	r0, [pc, #72]	; (801169c <mem_malloc+0x1f4>)
 8011654:	f00a fd66 	bl	801c124 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	3308      	adds	r3, #8
 801165c:	e011      	b.n	8011682 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801165e:	8bfb      	ldrh	r3, [r7, #30]
 8011660:	4618      	mov	r0, r3
 8011662:	f7ff fc33 	bl	8010ecc <ptr_to_mem>
 8011666:	4603      	mov	r3, r0
 8011668:	881b      	ldrh	r3, [r3, #0]
 801166a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801166c:	8bfa      	ldrh	r2, [r7, #30]
 801166e:	8bbb      	ldrh	r3, [r7, #28]
 8011670:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011674:	429a      	cmp	r2, r3
 8011676:	f4ff af41 	bcc.w	80114fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801167a:	4804      	ldr	r0, [pc, #16]	; (801168c <mem_malloc+0x1e4>)
 801167c:	f00a fb4d 	bl	801bd1a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3720      	adds	r7, #32
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20009888 	.word	0x20009888
 8011690:	2000988c 	.word	0x2000988c
 8011694:	0801ea94 	.word	0x0801ea94
 8011698:	0801ec58 	.word	0x0801ec58
 801169c:	0801eadc 	.word	0x0801eadc
 80116a0:	20009884 	.word	0x20009884
 80116a4:	0801ec6c 	.word	0x0801ec6c
 80116a8:	0801ec88 	.word	0x0801ec88
 80116ac:	0801ecb8 	.word	0x0801ecb8
 80116b0:	0801ece8 	.word	0x0801ece8

080116b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b085      	sub	sp, #20
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	689b      	ldr	r3, [r3, #8]
 80116c0:	2200      	movs	r2, #0
 80116c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	3303      	adds	r3, #3
 80116ca:	f023 0303 	bic.w	r3, r3, #3
 80116ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80116d0:	2300      	movs	r3, #0
 80116d2:	60fb      	str	r3, [r7, #12]
 80116d4:	e011      	b.n	80116fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	689b      	ldr	r3, [r3, #8]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	689b      	ldr	r3, [r3, #8]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	881b      	ldrh	r3, [r3, #0]
 80116ec:	461a      	mov	r2, r3
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	4413      	add	r3, r2
 80116f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	3301      	adds	r3, #1
 80116f8:	60fb      	str	r3, [r7, #12]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	885b      	ldrh	r3, [r3, #2]
 80116fe:	461a      	mov	r2, r3
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	4293      	cmp	r3, r2
 8011704:	dbe7      	blt.n	80116d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011706:	bf00      	nop
 8011708:	bf00      	nop
 801170a:	3714      	adds	r7, #20
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801171a:	2300      	movs	r3, #0
 801171c:	80fb      	strh	r3, [r7, #6]
 801171e:	e009      	b.n	8011734 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011720:	88fb      	ldrh	r3, [r7, #6]
 8011722:	4a08      	ldr	r2, [pc, #32]	; (8011744 <memp_init+0x30>)
 8011724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011728:	4618      	mov	r0, r3
 801172a:	f7ff ffc3 	bl	80116b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801172e:	88fb      	ldrh	r3, [r7, #6]
 8011730:	3301      	adds	r3, #1
 8011732:	80fb      	strh	r3, [r7, #6]
 8011734:	88fb      	ldrh	r3, [r7, #6]
 8011736:	2b0c      	cmp	r3, #12
 8011738:	d9f2      	bls.n	8011720 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801173a:	bf00      	nop
 801173c:	bf00      	nop
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	080244c4 	.word	0x080244c4

08011748 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011750:	f00a fb10 	bl	801bd74 <sys_arch_protect>
 8011754:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	689b      	ldr	r3, [r3, #8]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d015      	beq.n	8011790 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	689b      	ldr	r3, [r3, #8]
 8011768:	68ba      	ldr	r2, [r7, #8]
 801176a:	6812      	ldr	r2, [r2, #0]
 801176c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	f003 0303 	and.w	r3, r3, #3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <do_memp_malloc_pool+0x3e>
 8011778:	4b09      	ldr	r3, [pc, #36]	; (80117a0 <do_memp_malloc_pool+0x58>)
 801177a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801177e:	4909      	ldr	r1, [pc, #36]	; (80117a4 <do_memp_malloc_pool+0x5c>)
 8011780:	4809      	ldr	r0, [pc, #36]	; (80117a8 <do_memp_malloc_pool+0x60>)
 8011782:	f00a fccf 	bl	801c124 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f00a fb02 	bl	801bd90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	e003      	b.n	8011798 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f00a fafd 	bl	801bd90 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011796:	2300      	movs	r3, #0
}
 8011798:	4618      	mov	r0, r3
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	0801ed0c 	.word	0x0801ed0c
 80117a4:	0801ed3c 	.word	0x0801ed3c
 80117a8:	0801ed60 	.word	0x0801ed60

080117ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	4603      	mov	r3, r0
 80117b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80117b6:	79fb      	ldrb	r3, [r7, #7]
 80117b8:	2b0c      	cmp	r3, #12
 80117ba:	d908      	bls.n	80117ce <memp_malloc+0x22>
 80117bc:	4b0a      	ldr	r3, [pc, #40]	; (80117e8 <memp_malloc+0x3c>)
 80117be:	f240 1257 	movw	r2, #343	; 0x157
 80117c2:	490a      	ldr	r1, [pc, #40]	; (80117ec <memp_malloc+0x40>)
 80117c4:	480a      	ldr	r0, [pc, #40]	; (80117f0 <memp_malloc+0x44>)
 80117c6:	f00a fcad 	bl	801c124 <iprintf>
 80117ca:	2300      	movs	r3, #0
 80117cc:	e008      	b.n	80117e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80117ce:	79fb      	ldrb	r3, [r7, #7]
 80117d0:	4a08      	ldr	r2, [pc, #32]	; (80117f4 <memp_malloc+0x48>)
 80117d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7ff ffb6 	bl	8011748 <do_memp_malloc_pool>
 80117dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80117de:	68fb      	ldr	r3, [r7, #12]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	0801ed0c 	.word	0x0801ed0c
 80117ec:	0801ed9c 	.word	0x0801ed9c
 80117f0:	0801ed60 	.word	0x0801ed60
 80117f4:	080244c4 	.word	0x080244c4

080117f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	f003 0303 	and.w	r3, r3, #3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d006      	beq.n	801181a <do_memp_free_pool+0x22>
 801180c:	4b0d      	ldr	r3, [pc, #52]	; (8011844 <do_memp_free_pool+0x4c>)
 801180e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011812:	490d      	ldr	r1, [pc, #52]	; (8011848 <do_memp_free_pool+0x50>)
 8011814:	480d      	ldr	r0, [pc, #52]	; (801184c <do_memp_free_pool+0x54>)
 8011816:	f00a fc85 	bl	801c124 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801181e:	f00a faa9 	bl	801bd74 <sys_arch_protect>
 8011822:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011836:	68b8      	ldr	r0, [r7, #8]
 8011838:	f00a faaa 	bl	801bd90 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801183c:	bf00      	nop
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	0801ed0c 	.word	0x0801ed0c
 8011848:	0801edbc 	.word	0x0801edbc
 801184c:	0801ed60 	.word	0x0801ed60

08011850 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	4603      	mov	r3, r0
 8011858:	6039      	str	r1, [r7, #0]
 801185a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801185c:	79fb      	ldrb	r3, [r7, #7]
 801185e:	2b0c      	cmp	r3, #12
 8011860:	d907      	bls.n	8011872 <memp_free+0x22>
 8011862:	4b0c      	ldr	r3, [pc, #48]	; (8011894 <memp_free+0x44>)
 8011864:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011868:	490b      	ldr	r1, [pc, #44]	; (8011898 <memp_free+0x48>)
 801186a:	480c      	ldr	r0, [pc, #48]	; (801189c <memp_free+0x4c>)
 801186c:	f00a fc5a 	bl	801c124 <iprintf>
 8011870:	e00c      	b.n	801188c <memp_free+0x3c>

  if (mem == NULL) {
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d008      	beq.n	801188a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011878:	79fb      	ldrb	r3, [r7, #7]
 801187a:	4a09      	ldr	r2, [pc, #36]	; (80118a0 <memp_free+0x50>)
 801187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff ffb8 	bl	80117f8 <do_memp_free_pool>
 8011888:	e000      	b.n	801188c <memp_free+0x3c>
    return;
 801188a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	0801ed0c 	.word	0x0801ed0c
 8011898:	0801eddc 	.word	0x0801eddc
 801189c:	0801ed60 	.word	0x0801ed60
 80118a0:	080244c4 	.word	0x080244c4

080118a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80118a4:	b480      	push	{r7}
 80118a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80118a8:	bf00      	nop
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
	...

080118b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d108      	bne.n	80118da <netif_add+0x26>
 80118c8:	4b57      	ldr	r3, [pc, #348]	; (8011a28 <netif_add+0x174>)
 80118ca:	f240 1227 	movw	r2, #295	; 0x127
 80118ce:	4957      	ldr	r1, [pc, #348]	; (8011a2c <netif_add+0x178>)
 80118d0:	4857      	ldr	r0, [pc, #348]	; (8011a30 <netif_add+0x17c>)
 80118d2:	f00a fc27 	bl	801c124 <iprintf>
 80118d6:	2300      	movs	r3, #0
 80118d8:	e0a2      	b.n	8011a20 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d108      	bne.n	80118f2 <netif_add+0x3e>
 80118e0:	4b51      	ldr	r3, [pc, #324]	; (8011a28 <netif_add+0x174>)
 80118e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80118e6:	4953      	ldr	r1, [pc, #332]	; (8011a34 <netif_add+0x180>)
 80118e8:	4851      	ldr	r0, [pc, #324]	; (8011a30 <netif_add+0x17c>)
 80118ea:	f00a fc1b 	bl	801c124 <iprintf>
 80118ee:	2300      	movs	r3, #0
 80118f0:	e096      	b.n	8011a20 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d101      	bne.n	80118fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80118f8:	4b4f      	ldr	r3, [pc, #316]	; (8011a38 <netif_add+0x184>)
 80118fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d101      	bne.n	8011906 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011902:	4b4d      	ldr	r3, [pc, #308]	; (8011a38 <netif_add+0x184>)
 8011904:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d101      	bne.n	8011910 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801190c:	4b4a      	ldr	r3, [pc, #296]	; (8011a38 <netif_add+0x184>)
 801190e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2200      	movs	r2, #0
 8011920:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	4a45      	ldr	r2, [pc, #276]	; (8011a3c <netif_add+0x188>)
 8011926:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2200      	movs	r2, #0
 801192c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2200      	movs	r2, #0
 8011932:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2200      	movs	r2, #0
 801193a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6a3a      	ldr	r2, [r7, #32]
 8011940:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011942:	4b3f      	ldr	r3, [pc, #252]	; (8011a40 <netif_add+0x18c>)
 8011944:	781a      	ldrb	r2, [r3, #0]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011950:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	68b9      	ldr	r1, [r7, #8]
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f000 f913 	bl	8011b84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	4798      	blx	r3
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d001      	beq.n	801196e <netif_add+0xba>
    return NULL;
 801196a:	2300      	movs	r3, #0
 801196c:	e058      	b.n	8011a20 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011974:	2bff      	cmp	r3, #255	; 0xff
 8011976:	d103      	bne.n	8011980 <netif_add+0xcc>
        netif->num = 0;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2200      	movs	r2, #0
 801197c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8011980:	2300      	movs	r3, #0
 8011982:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011984:	4b2f      	ldr	r3, [pc, #188]	; (8011a44 <netif_add+0x190>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	617b      	str	r3, [r7, #20]
 801198a:	e02b      	b.n	80119e4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801198c:	697a      	ldr	r2, [r7, #20]
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	429a      	cmp	r2, r3
 8011992:	d106      	bne.n	80119a2 <netif_add+0xee>
 8011994:	4b24      	ldr	r3, [pc, #144]	; (8011a28 <netif_add+0x174>)
 8011996:	f240 128b 	movw	r2, #395	; 0x18b
 801199a:	492b      	ldr	r1, [pc, #172]	; (8011a48 <netif_add+0x194>)
 801199c:	4824      	ldr	r0, [pc, #144]	; (8011a30 <netif_add+0x17c>)
 801199e:	f00a fbc1 	bl	801c124 <iprintf>
        num_netifs++;
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	3301      	adds	r3, #1
 80119a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2bff      	cmp	r3, #255	; 0xff
 80119ac:	dd06      	ble.n	80119bc <netif_add+0x108>
 80119ae:	4b1e      	ldr	r3, [pc, #120]	; (8011a28 <netif_add+0x174>)
 80119b0:	f240 128d 	movw	r2, #397	; 0x18d
 80119b4:	4925      	ldr	r1, [pc, #148]	; (8011a4c <netif_add+0x198>)
 80119b6:	481e      	ldr	r0, [pc, #120]	; (8011a30 <netif_add+0x17c>)
 80119b8:	f00a fbb4 	bl	801c124 <iprintf>
        if (netif2->num == netif->num) {
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d108      	bne.n	80119de <netif_add+0x12a>
          netif->num++;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119d2:	3301      	adds	r3, #1
 80119d4:	b2da      	uxtb	r2, r3
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80119dc:	e005      	b.n	80119ea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	617b      	str	r3, [r7, #20]
 80119e4:	697b      	ldr	r3, [r7, #20]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1d0      	bne.n	801198c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1be      	bne.n	801196e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119f6:	2bfe      	cmp	r3, #254	; 0xfe
 80119f8:	d103      	bne.n	8011a02 <netif_add+0x14e>
    netif_num = 0;
 80119fa:	4b11      	ldr	r3, [pc, #68]	; (8011a40 <netif_add+0x18c>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	e006      	b.n	8011a10 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a08:	3301      	adds	r3, #1
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	4b0c      	ldr	r3, [pc, #48]	; (8011a40 <netif_add+0x18c>)
 8011a0e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011a10:	4b0c      	ldr	r3, [pc, #48]	; (8011a44 <netif_add+0x190>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011a18:	4a0a      	ldr	r2, [pc, #40]	; (8011a44 <netif_add+0x190>)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	0801edf8 	.word	0x0801edf8
 8011a2c:	0801ee8c 	.word	0x0801ee8c
 8011a30:	0801ee48 	.word	0x0801ee48
 8011a34:	0801eea8 	.word	0x0801eea8
 8011a38:	08024538 	.word	0x08024538
 8011a3c:	08011e5f 	.word	0x08011e5f
 8011a40:	200098c4 	.word	0x200098c4
 8011a44:	20014f54 	.word	0x20014f54
 8011a48:	0801eecc 	.word	0x0801eecc
 8011a4c:	0801eee0 	.word	0x0801eee0

08011a50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011a5a:	6839      	ldr	r1, [r7, #0]
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f002 fe4f 	bl	8014700 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011a62:	6839      	ldr	r1, [r7, #0]
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f007 fcfd 	bl	8019464 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011a6a:	bf00      	nop
 8011a6c:	3708      	adds	r7, #8
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
	...

08011a74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b086      	sub	sp, #24
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d106      	bne.n	8011a94 <netif_do_set_ipaddr+0x20>
 8011a86:	4b1d      	ldr	r3, [pc, #116]	; (8011afc <netif_do_set_ipaddr+0x88>)
 8011a88:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011a8c:	491c      	ldr	r1, [pc, #112]	; (8011b00 <netif_do_set_ipaddr+0x8c>)
 8011a8e:	481d      	ldr	r0, [pc, #116]	; (8011b04 <netif_do_set_ipaddr+0x90>)
 8011a90:	f00a fb48 	bl	801c124 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d106      	bne.n	8011aa8 <netif_do_set_ipaddr+0x34>
 8011a9a:	4b18      	ldr	r3, [pc, #96]	; (8011afc <netif_do_set_ipaddr+0x88>)
 8011a9c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011aa0:	4917      	ldr	r1, [pc, #92]	; (8011b00 <netif_do_set_ipaddr+0x8c>)
 8011aa2:	4818      	ldr	r0, [pc, #96]	; (8011b04 <netif_do_set_ipaddr+0x90>)
 8011aa4:	f00a fb3e 	bl	801c124 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	3304      	adds	r3, #4
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d01c      	beq.n	8011af0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011ac6:	f107 0314 	add.w	r3, r7, #20
 8011aca:	4619      	mov	r1, r3
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f7ff ffbf 	bl	8011a50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <netif_do_set_ipaddr+0x6a>
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	e000      	b.n	8011ae0 <netif_do_set_ipaddr+0x6c>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	68fa      	ldr	r2, [r7, #12]
 8011ae2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f000 f8d2 	bl	8011c90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011aec:	2301      	movs	r3, #1
 8011aee:	e000      	b.n	8011af2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3718      	adds	r7, #24
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	0801edf8 	.word	0x0801edf8
 8011b00:	0801ef10 	.word	0x0801ef10
 8011b04:	0801ee48 	.word	0x0801ee48

08011b08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	60b9      	str	r1, [r7, #8]
 8011b12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	3308      	adds	r3, #8
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d00a      	beq.n	8011b38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d002      	beq.n	8011b2e <netif_do_set_netmask+0x26>
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	e000      	b.n	8011b30 <netif_do_set_netmask+0x28>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011b34:	2301      	movs	r3, #1
 8011b36:	e000      	b.n	8011b3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011b38:	2300      	movs	r3, #0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3714      	adds	r7, #20
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr

08011b46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011b46:	b480      	push	{r7}
 8011b48:	b085      	sub	sp, #20
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	60f8      	str	r0, [r7, #12]
 8011b4e:	60b9      	str	r1, [r7, #8]
 8011b50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	330c      	adds	r3, #12
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d00a      	beq.n	8011b76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d002      	beq.n	8011b6c <netif_do_set_gw+0x26>
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	e000      	b.n	8011b6e <netif_do_set_gw+0x28>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011b72:	2301      	movs	r3, #1
 8011b74:	e000      	b.n	8011b78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b088      	sub	sp, #32
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	607a      	str	r2, [r7, #4]
 8011b90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011b92:	2300      	movs	r3, #0
 8011b94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011b96:	2300      	movs	r3, #0
 8011b98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d101      	bne.n	8011ba4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011ba0:	4b1c      	ldr	r3, [pc, #112]	; (8011c14 <netif_set_addr+0x90>)
 8011ba2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d101      	bne.n	8011bae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011baa:	4b1a      	ldr	r3, [pc, #104]	; (8011c14 <netif_set_addr+0x90>)
 8011bac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d101      	bne.n	8011bb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011bb4:	4b17      	ldr	r3, [pc, #92]	; (8011c14 <netif_set_addr+0x90>)
 8011bb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d003      	beq.n	8011bc6 <netif_set_addr+0x42>
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d101      	bne.n	8011bca <netif_set_addr+0x46>
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e000      	b.n	8011bcc <netif_set_addr+0x48>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d006      	beq.n	8011be2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011bd4:	f107 0310 	add.w	r3, r7, #16
 8011bd8:	461a      	mov	r2, r3
 8011bda:	68b9      	ldr	r1, [r7, #8]
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f7ff ff49 	bl	8011a74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011be2:	69fa      	ldr	r2, [r7, #28]
 8011be4:	6879      	ldr	r1, [r7, #4]
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f7ff ff8e 	bl	8011b08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011bec:	69ba      	ldr	r2, [r7, #24]
 8011bee:	6839      	ldr	r1, [r7, #0]
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f7ff ffa8 	bl	8011b46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d106      	bne.n	8011c0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011bfc:	f107 0310 	add.w	r3, r7, #16
 8011c00:	461a      	mov	r2, r3
 8011c02:	68b9      	ldr	r1, [r7, #8]
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f7ff ff35 	bl	8011a74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011c0a:	bf00      	nop
 8011c0c:	3720      	adds	r7, #32
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	08024538 	.word	0x08024538

08011c18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011c20:	4a04      	ldr	r2, [pc, #16]	; (8011c34 <netif_set_default+0x1c>)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011c26:	bf00      	nop
 8011c28:	370c      	adds	r7, #12
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	20014f58 	.word	0x20014f58

08011c38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d107      	bne.n	8011c56 <netif_set_up+0x1e>
 8011c46:	4b0f      	ldr	r3, [pc, #60]	; (8011c84 <netif_set_up+0x4c>)
 8011c48:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011c4c:	490e      	ldr	r1, [pc, #56]	; (8011c88 <netif_set_up+0x50>)
 8011c4e:	480f      	ldr	r0, [pc, #60]	; (8011c8c <netif_set_up+0x54>)
 8011c50:	f00a fa68 	bl	801c124 <iprintf>
 8011c54:	e013      	b.n	8011c7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c5c:	f003 0301 	and.w	r3, r3, #1
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d10c      	bne.n	8011c7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c6a:	f043 0301 	orr.w	r3, r3, #1
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011c76:	2103      	movs	r1, #3
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f000 f809 	bl	8011c90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011c7e:	3708      	adds	r7, #8
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	0801edf8 	.word	0x0801edf8
 8011c88:	0801ef80 	.word	0x0801ef80
 8011c8c:	0801ee48 	.word	0x0801ee48

08011c90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	460b      	mov	r3, r1
 8011c9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d106      	bne.n	8011cb0 <netif_issue_reports+0x20>
 8011ca2:	4b18      	ldr	r3, [pc, #96]	; (8011d04 <netif_issue_reports+0x74>)
 8011ca4:	f240 326d 	movw	r2, #877	; 0x36d
 8011ca8:	4917      	ldr	r1, [pc, #92]	; (8011d08 <netif_issue_reports+0x78>)
 8011caa:	4818      	ldr	r0, [pc, #96]	; (8011d0c <netif_issue_reports+0x7c>)
 8011cac:	f00a fa3a 	bl	801c124 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cb6:	f003 0304 	and.w	r3, r3, #4
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d01e      	beq.n	8011cfc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d017      	beq.n	8011cfc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011ccc:	78fb      	ldrb	r3, [r7, #3]
 8011cce:	f003 0301 	and.w	r3, r3, #1
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d013      	beq.n	8011cfe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	3304      	adds	r3, #4
 8011cda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00e      	beq.n	8011cfe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ce6:	f003 0308 	and.w	r3, r3, #8
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d007      	beq.n	8011cfe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f008 fb1f 	bl	801a338 <etharp_request>
 8011cfa:	e000      	b.n	8011cfe <netif_issue_reports+0x6e>
    return;
 8011cfc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	0801edf8 	.word	0x0801edf8
 8011d08:	0801ef9c 	.word	0x0801ef9c
 8011d0c:	0801ee48 	.word	0x0801ee48

08011d10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d107      	bne.n	8011d2e <netif_set_down+0x1e>
 8011d1e:	4b12      	ldr	r3, [pc, #72]	; (8011d68 <netif_set_down+0x58>)
 8011d20:	f240 329b 	movw	r2, #923	; 0x39b
 8011d24:	4911      	ldr	r1, [pc, #68]	; (8011d6c <netif_set_down+0x5c>)
 8011d26:	4812      	ldr	r0, [pc, #72]	; (8011d70 <netif_set_down+0x60>)
 8011d28:	f00a f9fc 	bl	801c124 <iprintf>
 8011d2c:	e019      	b.n	8011d62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d34:	f003 0301 	and.w	r3, r3, #1
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d012      	beq.n	8011d62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d42:	f023 0301 	bic.w	r3, r3, #1
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d54:	f003 0308 	and.w	r3, r3, #8
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d002      	beq.n	8011d62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f007 fea9 	bl	8019ab4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	0801edf8 	.word	0x0801edf8
 8011d6c:	0801efc0 	.word	0x0801efc0
 8011d70:	0801ee48 	.word	0x0801ee48

08011d74 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d107      	bne.n	8011d92 <netif_set_link_up+0x1e>
 8011d82:	4b13      	ldr	r3, [pc, #76]	; (8011dd0 <netif_set_link_up+0x5c>)
 8011d84:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011d88:	4912      	ldr	r1, [pc, #72]	; (8011dd4 <netif_set_link_up+0x60>)
 8011d8a:	4813      	ldr	r0, [pc, #76]	; (8011dd8 <netif_set_link_up+0x64>)
 8011d8c:	f00a f9ca 	bl	801c124 <iprintf>
 8011d90:	e01b      	b.n	8011dca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d98:	f003 0304 	and.w	r3, r3, #4
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d114      	bne.n	8011dca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011da6:	f043 0304 	orr.w	r3, r3, #4
 8011daa:	b2da      	uxtb	r2, r3
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011db2:	2103      	movs	r1, #3
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f7ff ff6b 	bl	8011c90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	69db      	ldr	r3, [r3, #28]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d003      	beq.n	8011dca <netif_set_link_up+0x56>
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	69db      	ldr	r3, [r3, #28]
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	0801edf8 	.word	0x0801edf8
 8011dd4:	0801efe0 	.word	0x0801efe0
 8011dd8:	0801ee48 	.word	0x0801ee48

08011ddc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d107      	bne.n	8011dfa <netif_set_link_down+0x1e>
 8011dea:	4b11      	ldr	r3, [pc, #68]	; (8011e30 <netif_set_link_down+0x54>)
 8011dec:	f240 4206 	movw	r2, #1030	; 0x406
 8011df0:	4910      	ldr	r1, [pc, #64]	; (8011e34 <netif_set_link_down+0x58>)
 8011df2:	4811      	ldr	r0, [pc, #68]	; (8011e38 <netif_set_link_down+0x5c>)
 8011df4:	f00a f996 	bl	801c124 <iprintf>
 8011df8:	e017      	b.n	8011e2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e00:	f003 0304 	and.w	r3, r3, #4
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d010      	beq.n	8011e2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e0e:	f023 0304 	bic.w	r3, r3, #4
 8011e12:	b2da      	uxtb	r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	69db      	ldr	r3, [r3, #28]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d003      	beq.n	8011e2a <netif_set_link_down+0x4e>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	69db      	ldr	r3, [r3, #28]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	0801edf8 	.word	0x0801edf8
 8011e34:	0801f004 	.word	0x0801f004
 8011e38:	0801ee48 	.word	0x0801ee48

08011e3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d002      	beq.n	8011e52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	683a      	ldr	r2, [r7, #0]
 8011e50:	61da      	str	r2, [r3, #28]
  }
}
 8011e52:	bf00      	nop
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b085      	sub	sp, #20
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	60f8      	str	r0, [r7, #12]
 8011e66:	60b9      	str	r1, [r7, #8]
 8011e68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011e6a:	f06f 030b 	mvn.w	r3, #11
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
	...

08011e7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011e86:	79fb      	ldrb	r3, [r7, #7]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d013      	beq.n	8011eb4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011e8c:	4b0d      	ldr	r3, [pc, #52]	; (8011ec4 <netif_get_by_index+0x48>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	60fb      	str	r3, [r7, #12]
 8011e92:	e00c      	b.n	8011eae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	79fa      	ldrb	r2, [r7, #7]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d101      	bne.n	8011ea8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	e006      	b.n	8011eb6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	60fb      	str	r3, [r7, #12]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1ef      	bne.n	8011e94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3714      	adds	r7, #20
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr
 8011ec2:	bf00      	nop
 8011ec4:	20014f54 	.word	0x20014f54

08011ec8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011ece:	f009 ff51 	bl	801bd74 <sys_arch_protect>
 8011ed2:	6038      	str	r0, [r7, #0]
 8011ed4:	4b0d      	ldr	r3, [pc, #52]	; (8011f0c <pbuf_free_ooseq+0x44>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	701a      	strb	r2, [r3, #0]
 8011eda:	6838      	ldr	r0, [r7, #0]
 8011edc:	f009 ff58 	bl	801bd90 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011ee0:	4b0b      	ldr	r3, [pc, #44]	; (8011f10 <pbuf_free_ooseq+0x48>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	607b      	str	r3, [r7, #4]
 8011ee6:	e00a      	b.n	8011efe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d003      	beq.n	8011ef8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f002 fc43 	bl	801477c <tcp_free_ooseq>
      return;
 8011ef6:	e005      	b.n	8011f04 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	607b      	str	r3, [r7, #4]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1f1      	bne.n	8011ee8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	20014f5c 	.word	0x20014f5c
 8011f10:	20014f64 	.word	0x20014f64

08011f14 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011f1c:	f7ff ffd4 	bl	8011ec8 <pbuf_free_ooseq>
}
 8011f20:	bf00      	nop
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011f2e:	f009 ff21 	bl	801bd74 <sys_arch_protect>
 8011f32:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011f34:	4b0f      	ldr	r3, [pc, #60]	; (8011f74 <pbuf_pool_is_empty+0x4c>)
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011f3a:	4b0e      	ldr	r3, [pc, #56]	; (8011f74 <pbuf_pool_is_empty+0x4c>)
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f009 ff25 	bl	801bd90 <sys_arch_unprotect>

  if (!queued) {
 8011f46:	78fb      	ldrb	r3, [r7, #3]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10f      	bne.n	8011f6c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	480a      	ldr	r0, [pc, #40]	; (8011f78 <pbuf_pool_is_empty+0x50>)
 8011f50:	f7fe fe8e 	bl	8010c70 <tcpip_try_callback>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d008      	beq.n	8011f6c <pbuf_pool_is_empty+0x44>
 8011f5a:	f009 ff0b 	bl	801bd74 <sys_arch_protect>
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	4b04      	ldr	r3, [pc, #16]	; (8011f74 <pbuf_pool_is_empty+0x4c>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	701a      	strb	r2, [r3, #0]
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f009 ff12 	bl	801bd90 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011f6c:	bf00      	nop
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	20014f5c 	.word	0x20014f5c
 8011f78:	08011f15 	.word	0x08011f15

08011f7c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	4611      	mov	r1, r2
 8011f88:	461a      	mov	r2, r3
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	80fb      	strh	r3, [r7, #6]
 8011f8e:	4613      	mov	r3, r2
 8011f90:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	68ba      	ldr	r2, [r7, #8]
 8011f9c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	88fa      	ldrh	r2, [r7, #6]
 8011fa2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	88ba      	ldrh	r2, [r7, #4]
 8011fa8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011faa:	8b3b      	ldrh	r3, [r7, #24]
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	7f3a      	ldrb	r2, [r7, #28]
 8011fb6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	73da      	strb	r2, [r3, #15]
}
 8011fc4:	bf00      	nop
 8011fc6:	3714      	adds	r7, #20
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08c      	sub	sp, #48	; 0x30
 8011fd4:	af02      	add	r7, sp, #8
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	71fb      	strb	r3, [r7, #7]
 8011fda:	460b      	mov	r3, r1
 8011fdc:	80bb      	strh	r3, [r7, #4]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011fe2:	79fb      	ldrb	r3, [r7, #7]
 8011fe4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011fe6:	887b      	ldrh	r3, [r7, #2]
 8011fe8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011fec:	d07f      	beq.n	80120ee <pbuf_alloc+0x11e>
 8011fee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011ff2:	f300 80c8 	bgt.w	8012186 <pbuf_alloc+0x1b6>
 8011ff6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011ffa:	d010      	beq.n	801201e <pbuf_alloc+0x4e>
 8011ffc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012000:	f300 80c1 	bgt.w	8012186 <pbuf_alloc+0x1b6>
 8012004:	2b01      	cmp	r3, #1
 8012006:	d002      	beq.n	801200e <pbuf_alloc+0x3e>
 8012008:	2b41      	cmp	r3, #65	; 0x41
 801200a:	f040 80bc 	bne.w	8012186 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801200e:	887a      	ldrh	r2, [r7, #2]
 8012010:	88bb      	ldrh	r3, [r7, #4]
 8012012:	4619      	mov	r1, r3
 8012014:	2000      	movs	r0, #0
 8012016:	f000 f8d1 	bl	80121bc <pbuf_alloc_reference>
 801201a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801201c:	e0bd      	b.n	801219a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801201e:	2300      	movs	r3, #0
 8012020:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012022:	2300      	movs	r3, #0
 8012024:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012026:	88bb      	ldrh	r3, [r7, #4]
 8012028:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801202a:	200c      	movs	r0, #12
 801202c:	f7ff fbbe 	bl	80117ac <memp_malloc>
 8012030:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d109      	bne.n	801204c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012038:	f7ff ff76 	bl	8011f28 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	2b00      	cmp	r3, #0
 8012040:	d002      	beq.n	8012048 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012044:	f000 faa8 	bl	8012598 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012048:	2300      	movs	r3, #0
 801204a:	e0a7      	b.n	801219c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801204c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801204e:	3303      	adds	r3, #3
 8012050:	b29b      	uxth	r3, r3
 8012052:	f023 0303 	bic.w	r3, r3, #3
 8012056:	b29b      	uxth	r3, r3
 8012058:	f5c3 6384 	rsb	r3, r3, #1056	; 0x420
 801205c:	b29b      	uxth	r3, r3
 801205e:	8b7a      	ldrh	r2, [r7, #26]
 8012060:	4293      	cmp	r3, r2
 8012062:	bf28      	it	cs
 8012064:	4613      	movcs	r3, r2
 8012066:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801206a:	3310      	adds	r3, #16
 801206c:	693a      	ldr	r2, [r7, #16]
 801206e:	4413      	add	r3, r2
 8012070:	3303      	adds	r3, #3
 8012072:	f023 0303 	bic.w	r3, r3, #3
 8012076:	4618      	mov	r0, r3
 8012078:	89f9      	ldrh	r1, [r7, #14]
 801207a:	8b7a      	ldrh	r2, [r7, #26]
 801207c:	2300      	movs	r3, #0
 801207e:	9301      	str	r3, [sp, #4]
 8012080:	887b      	ldrh	r3, [r7, #2]
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	460b      	mov	r3, r1
 8012086:	4601      	mov	r1, r0
 8012088:	6938      	ldr	r0, [r7, #16]
 801208a:	f7ff ff77 	bl	8011f7c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	f003 0303 	and.w	r3, r3, #3
 8012096:	2b00      	cmp	r3, #0
 8012098:	d006      	beq.n	80120a8 <pbuf_alloc+0xd8>
 801209a:	4b42      	ldr	r3, [pc, #264]	; (80121a4 <pbuf_alloc+0x1d4>)
 801209c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80120a0:	4941      	ldr	r1, [pc, #260]	; (80121a8 <pbuf_alloc+0x1d8>)
 80120a2:	4842      	ldr	r0, [pc, #264]	; (80121ac <pbuf_alloc+0x1dc>)
 80120a4:	f00a f83e 	bl	801c124 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80120a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120aa:	3303      	adds	r3, #3
 80120ac:	f023 0303 	bic.w	r3, r3, #3
 80120b0:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80120b4:	d106      	bne.n	80120c4 <pbuf_alloc+0xf4>
 80120b6:	4b3b      	ldr	r3, [pc, #236]	; (80121a4 <pbuf_alloc+0x1d4>)
 80120b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80120bc:	493c      	ldr	r1, [pc, #240]	; (80121b0 <pbuf_alloc+0x1e0>)
 80120be:	483b      	ldr	r0, [pc, #236]	; (80121ac <pbuf_alloc+0x1dc>)
 80120c0:	f00a f830 	bl	801c124 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80120c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d102      	bne.n	80120d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	627b      	str	r3, [r7, #36]	; 0x24
 80120ce:	e002      	b.n	80120d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	693a      	ldr	r2, [r7, #16]
 80120d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80120da:	8b7a      	ldrh	r2, [r7, #26]
 80120dc:	89fb      	ldrh	r3, [r7, #14]
 80120de:	1ad3      	subs	r3, r2, r3
 80120e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80120e6:	8b7b      	ldrh	r3, [r7, #26]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d19e      	bne.n	801202a <pbuf_alloc+0x5a>
      break;
 80120ec:	e055      	b.n	801219a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80120ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120f0:	3303      	adds	r3, #3
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	f023 0303 	bic.w	r3, r3, #3
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	88bb      	ldrh	r3, [r7, #4]
 80120fc:	3303      	adds	r3, #3
 80120fe:	b29b      	uxth	r3, r3
 8012100:	f023 0303 	bic.w	r3, r3, #3
 8012104:	b29b      	uxth	r3, r3
 8012106:	4413      	add	r3, r2
 8012108:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801210a:	8b3b      	ldrh	r3, [r7, #24]
 801210c:	3310      	adds	r3, #16
 801210e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012110:	8b3a      	ldrh	r2, [r7, #24]
 8012112:	88bb      	ldrh	r3, [r7, #4]
 8012114:	3303      	adds	r3, #3
 8012116:	f023 0303 	bic.w	r3, r3, #3
 801211a:	429a      	cmp	r2, r3
 801211c:	d306      	bcc.n	801212c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801211e:	8afa      	ldrh	r2, [r7, #22]
 8012120:	88bb      	ldrh	r3, [r7, #4]
 8012122:	3303      	adds	r3, #3
 8012124:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012128:	429a      	cmp	r2, r3
 801212a:	d201      	bcs.n	8012130 <pbuf_alloc+0x160>
        return NULL;
 801212c:	2300      	movs	r3, #0
 801212e:	e035      	b.n	801219c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012130:	8afb      	ldrh	r3, [r7, #22]
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff f9b8 	bl	80114a8 <mem_malloc>
 8012138:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213c:	2b00      	cmp	r3, #0
 801213e:	d101      	bne.n	8012144 <pbuf_alloc+0x174>
        return NULL;
 8012140:	2300      	movs	r3, #0
 8012142:	e02b      	b.n	801219c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012146:	3310      	adds	r3, #16
 8012148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801214a:	4413      	add	r3, r2
 801214c:	3303      	adds	r3, #3
 801214e:	f023 0303 	bic.w	r3, r3, #3
 8012152:	4618      	mov	r0, r3
 8012154:	88b9      	ldrh	r1, [r7, #4]
 8012156:	88ba      	ldrh	r2, [r7, #4]
 8012158:	2300      	movs	r3, #0
 801215a:	9301      	str	r3, [sp, #4]
 801215c:	887b      	ldrh	r3, [r7, #2]
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	460b      	mov	r3, r1
 8012162:	4601      	mov	r1, r0
 8012164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012166:	f7ff ff09 	bl	8011f7c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	f003 0303 	and.w	r3, r3, #3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d010      	beq.n	8012198 <pbuf_alloc+0x1c8>
 8012176:	4b0b      	ldr	r3, [pc, #44]	; (80121a4 <pbuf_alloc+0x1d4>)
 8012178:	f44f 7291 	mov.w	r2, #290	; 0x122
 801217c:	490d      	ldr	r1, [pc, #52]	; (80121b4 <pbuf_alloc+0x1e4>)
 801217e:	480b      	ldr	r0, [pc, #44]	; (80121ac <pbuf_alloc+0x1dc>)
 8012180:	f009 ffd0 	bl	801c124 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012184:	e008      	b.n	8012198 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012186:	4b07      	ldr	r3, [pc, #28]	; (80121a4 <pbuf_alloc+0x1d4>)
 8012188:	f240 1227 	movw	r2, #295	; 0x127
 801218c:	490a      	ldr	r1, [pc, #40]	; (80121b8 <pbuf_alloc+0x1e8>)
 801218e:	4807      	ldr	r0, [pc, #28]	; (80121ac <pbuf_alloc+0x1dc>)
 8012190:	f009 ffc8 	bl	801c124 <iprintf>
      return NULL;
 8012194:	2300      	movs	r3, #0
 8012196:	e001      	b.n	801219c <pbuf_alloc+0x1cc>
      break;
 8012198:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801219c:	4618      	mov	r0, r3
 801219e:	3728      	adds	r7, #40	; 0x28
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	0801f028 	.word	0x0801f028
 80121a8:	0801f058 	.word	0x0801f058
 80121ac:	0801f088 	.word	0x0801f088
 80121b0:	0801f0b0 	.word	0x0801f0b0
 80121b4:	0801f0e4 	.word	0x0801f0e4
 80121b8:	0801f110 	.word	0x0801f110

080121bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b086      	sub	sp, #24
 80121c0:	af02      	add	r7, sp, #8
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	460b      	mov	r3, r1
 80121c6:	807b      	strh	r3, [r7, #2]
 80121c8:	4613      	mov	r3, r2
 80121ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80121cc:	883b      	ldrh	r3, [r7, #0]
 80121ce:	2b41      	cmp	r3, #65	; 0x41
 80121d0:	d009      	beq.n	80121e6 <pbuf_alloc_reference+0x2a>
 80121d2:	883b      	ldrh	r3, [r7, #0]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d006      	beq.n	80121e6 <pbuf_alloc_reference+0x2a>
 80121d8:	4b0f      	ldr	r3, [pc, #60]	; (8012218 <pbuf_alloc_reference+0x5c>)
 80121da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80121de:	490f      	ldr	r1, [pc, #60]	; (801221c <pbuf_alloc_reference+0x60>)
 80121e0:	480f      	ldr	r0, [pc, #60]	; (8012220 <pbuf_alloc_reference+0x64>)
 80121e2:	f009 ff9f 	bl	801c124 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80121e6:	200b      	movs	r0, #11
 80121e8:	f7ff fae0 	bl	80117ac <memp_malloc>
 80121ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d101      	bne.n	80121f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80121f4:	2300      	movs	r3, #0
 80121f6:	e00b      	b.n	8012210 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80121f8:	8879      	ldrh	r1, [r7, #2]
 80121fa:	887a      	ldrh	r2, [r7, #2]
 80121fc:	2300      	movs	r3, #0
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	883b      	ldrh	r3, [r7, #0]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	460b      	mov	r3, r1
 8012206:	6879      	ldr	r1, [r7, #4]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f7ff feb7 	bl	8011f7c <pbuf_init_alloced_pbuf>
  return p;
 801220e:	68fb      	ldr	r3, [r7, #12]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3710      	adds	r7, #16
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	0801f028 	.word	0x0801f028
 801221c:	0801f12c 	.word	0x0801f12c
 8012220:	0801f088 	.word	0x0801f088

08012224 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b088      	sub	sp, #32
 8012228:	af02      	add	r7, sp, #8
 801222a:	607b      	str	r3, [r7, #4]
 801222c:	4603      	mov	r3, r0
 801222e:	73fb      	strb	r3, [r7, #15]
 8012230:	460b      	mov	r3, r1
 8012232:	81bb      	strh	r3, [r7, #12]
 8012234:	4613      	mov	r3, r2
 8012236:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012238:	7bfb      	ldrb	r3, [r7, #15]
 801223a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801223c:	8a7b      	ldrh	r3, [r7, #18]
 801223e:	3303      	adds	r3, #3
 8012240:	f023 0203 	bic.w	r2, r3, #3
 8012244:	89bb      	ldrh	r3, [r7, #12]
 8012246:	441a      	add	r2, r3
 8012248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801224a:	429a      	cmp	r2, r3
 801224c:	d901      	bls.n	8012252 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801224e:	2300      	movs	r3, #0
 8012250:	e018      	b.n	8012284 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012252:	6a3b      	ldr	r3, [r7, #32]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d007      	beq.n	8012268 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012258:	8a7b      	ldrh	r3, [r7, #18]
 801225a:	3303      	adds	r3, #3
 801225c:	f023 0303 	bic.w	r3, r3, #3
 8012260:	6a3a      	ldr	r2, [r7, #32]
 8012262:	4413      	add	r3, r2
 8012264:	617b      	str	r3, [r7, #20]
 8012266:	e001      	b.n	801226c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012268:	2300      	movs	r3, #0
 801226a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	89b9      	ldrh	r1, [r7, #12]
 8012270:	89ba      	ldrh	r2, [r7, #12]
 8012272:	2302      	movs	r3, #2
 8012274:	9301      	str	r3, [sp, #4]
 8012276:	897b      	ldrh	r3, [r7, #10]
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	460b      	mov	r3, r1
 801227c:	6979      	ldr	r1, [r7, #20]
 801227e:	f7ff fe7d 	bl	8011f7c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012282:	687b      	ldr	r3, [r7, #4]
}
 8012284:	4618      	mov	r0, r3
 8012286:	3718      	adds	r7, #24
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	460b      	mov	r3, r1
 8012296:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d106      	bne.n	80122ac <pbuf_realloc+0x20>
 801229e:	4b3a      	ldr	r3, [pc, #232]	; (8012388 <pbuf_realloc+0xfc>)
 80122a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80122a4:	4939      	ldr	r1, [pc, #228]	; (801238c <pbuf_realloc+0x100>)
 80122a6:	483a      	ldr	r0, [pc, #232]	; (8012390 <pbuf_realloc+0x104>)
 80122a8:	f009 ff3c 	bl	801c124 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	891b      	ldrh	r3, [r3, #8]
 80122b0:	887a      	ldrh	r2, [r7, #2]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d263      	bcs.n	801237e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	891a      	ldrh	r2, [r3, #8]
 80122ba:	887b      	ldrh	r3, [r7, #2]
 80122bc:	1ad3      	subs	r3, r2, r3
 80122be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80122c0:	887b      	ldrh	r3, [r7, #2]
 80122c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80122c8:	e018      	b.n	80122fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	895b      	ldrh	r3, [r3, #10]
 80122ce:	897a      	ldrh	r2, [r7, #10]
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	891a      	ldrh	r2, [r3, #8]
 80122d8:	893b      	ldrh	r3, [r7, #8]
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	b29a      	uxth	r2, r3
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d106      	bne.n	80122fc <pbuf_realloc+0x70>
 80122ee:	4b26      	ldr	r3, [pc, #152]	; (8012388 <pbuf_realloc+0xfc>)
 80122f0:	f240 12af 	movw	r2, #431	; 0x1af
 80122f4:	4927      	ldr	r1, [pc, #156]	; (8012394 <pbuf_realloc+0x108>)
 80122f6:	4826      	ldr	r0, [pc, #152]	; (8012390 <pbuf_realloc+0x104>)
 80122f8:	f009 ff14 	bl	801c124 <iprintf>
  while (rem_len > q->len) {
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	895b      	ldrh	r3, [r3, #10]
 8012300:	897a      	ldrh	r2, [r7, #10]
 8012302:	429a      	cmp	r2, r3
 8012304:	d8e1      	bhi.n	80122ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	7b1b      	ldrb	r3, [r3, #12]
 801230a:	f003 030f 	and.w	r3, r3, #15
 801230e:	2b00      	cmp	r3, #0
 8012310:	d121      	bne.n	8012356 <pbuf_realloc+0xca>
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	895b      	ldrh	r3, [r3, #10]
 8012316:	897a      	ldrh	r2, [r7, #10]
 8012318:	429a      	cmp	r2, r3
 801231a:	d01c      	beq.n	8012356 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	7b5b      	ldrb	r3, [r3, #13]
 8012320:	f003 0302 	and.w	r3, r3, #2
 8012324:	2b00      	cmp	r3, #0
 8012326:	d116      	bne.n	8012356 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	685a      	ldr	r2, [r3, #4]
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	b29a      	uxth	r2, r3
 8012332:	897b      	ldrh	r3, [r7, #10]
 8012334:	4413      	add	r3, r2
 8012336:	b29b      	uxth	r3, r3
 8012338:	4619      	mov	r1, r3
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	f7fe ffaa 	bl	8011294 <mem_trim>
 8012340:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d106      	bne.n	8012356 <pbuf_realloc+0xca>
 8012348:	4b0f      	ldr	r3, [pc, #60]	; (8012388 <pbuf_realloc+0xfc>)
 801234a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801234e:	4912      	ldr	r1, [pc, #72]	; (8012398 <pbuf_realloc+0x10c>)
 8012350:	480f      	ldr	r0, [pc, #60]	; (8012390 <pbuf_realloc+0x104>)
 8012352:	f009 fee7 	bl	801c124 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	897a      	ldrh	r2, [r7, #10]
 801235a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	895a      	ldrh	r2, [r3, #10]
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d004      	beq.n	8012376 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4618      	mov	r0, r3
 8012372:	f000 f911 	bl	8012598 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	e000      	b.n	8012380 <pbuf_realloc+0xf4>
    return;
 801237e:	bf00      	nop

}
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	0801f028 	.word	0x0801f028
 801238c:	0801f140 	.word	0x0801f140
 8012390:	0801f088 	.word	0x0801f088
 8012394:	0801f158 	.word	0x0801f158
 8012398:	0801f170 	.word	0x0801f170

0801239c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b086      	sub	sp, #24
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	4613      	mov	r3, r2
 80123a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d106      	bne.n	80123be <pbuf_add_header_impl+0x22>
 80123b0:	4b2b      	ldr	r3, [pc, #172]	; (8012460 <pbuf_add_header_impl+0xc4>)
 80123b2:	f240 12df 	movw	r2, #479	; 0x1df
 80123b6:	492b      	ldr	r1, [pc, #172]	; (8012464 <pbuf_add_header_impl+0xc8>)
 80123b8:	482b      	ldr	r0, [pc, #172]	; (8012468 <pbuf_add_header_impl+0xcc>)
 80123ba:	f009 feb3 	bl	801c124 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d003      	beq.n	80123cc <pbuf_add_header_impl+0x30>
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123ca:	d301      	bcc.n	80123d0 <pbuf_add_header_impl+0x34>
    return 1;
 80123cc:	2301      	movs	r3, #1
 80123ce:	e043      	b.n	8012458 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d101      	bne.n	80123da <pbuf_add_header_impl+0x3e>
    return 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	e03e      	b.n	8012458 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	891a      	ldrh	r2, [r3, #8]
 80123e2:	8a7b      	ldrh	r3, [r7, #18]
 80123e4:	4413      	add	r3, r2
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	8a7a      	ldrh	r2, [r7, #18]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d901      	bls.n	80123f2 <pbuf_add_header_impl+0x56>
    return 1;
 80123ee:	2301      	movs	r3, #1
 80123f0:	e032      	b.n	8012458 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	7b1b      	ldrb	r3, [r3, #12]
 80123f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80123f8:	8a3b      	ldrh	r3, [r7, #16]
 80123fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00c      	beq.n	801241c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	425b      	negs	r3, r3
 801240a:	4413      	add	r3, r2
 801240c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	3310      	adds	r3, #16
 8012412:	697a      	ldr	r2, [r7, #20]
 8012414:	429a      	cmp	r2, r3
 8012416:	d20d      	bcs.n	8012434 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012418:	2301      	movs	r3, #1
 801241a:	e01d      	b.n	8012458 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801241c:	79fb      	ldrb	r3, [r7, #7]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d006      	beq.n	8012430 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	685a      	ldr	r2, [r3, #4]
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	425b      	negs	r3, r3
 801242a:	4413      	add	r3, r2
 801242c:	617b      	str	r3, [r7, #20]
 801242e:	e001      	b.n	8012434 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012430:	2301      	movs	r3, #1
 8012432:	e011      	b.n	8012458 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	697a      	ldr	r2, [r7, #20]
 8012438:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	895a      	ldrh	r2, [r3, #10]
 801243e:	8a7b      	ldrh	r3, [r7, #18]
 8012440:	4413      	add	r3, r2
 8012442:	b29a      	uxth	r2, r3
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	891a      	ldrh	r2, [r3, #8]
 801244c:	8a7b      	ldrh	r3, [r7, #18]
 801244e:	4413      	add	r3, r2
 8012450:	b29a      	uxth	r2, r3
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	811a      	strh	r2, [r3, #8]


  return 0;
 8012456:	2300      	movs	r3, #0
}
 8012458:	4618      	mov	r0, r3
 801245a:	3718      	adds	r7, #24
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	0801f028 	.word	0x0801f028
 8012464:	0801f18c 	.word	0x0801f18c
 8012468:	0801f088 	.word	0x0801f088

0801246c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012476:	2200      	movs	r2, #0
 8012478:	6839      	ldr	r1, [r7, #0]
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7ff ff8e 	bl	801239c <pbuf_add_header_impl>
 8012480:	4603      	mov	r3, r0
}
 8012482:	4618      	mov	r0, r3
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
	...

0801248c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d106      	bne.n	80124aa <pbuf_remove_header+0x1e>
 801249c:	4b20      	ldr	r3, [pc, #128]	; (8012520 <pbuf_remove_header+0x94>)
 801249e:	f240 224b 	movw	r2, #587	; 0x24b
 80124a2:	4920      	ldr	r1, [pc, #128]	; (8012524 <pbuf_remove_header+0x98>)
 80124a4:	4820      	ldr	r0, [pc, #128]	; (8012528 <pbuf_remove_header+0x9c>)
 80124a6:	f009 fe3d 	bl	801c124 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d003      	beq.n	80124b8 <pbuf_remove_header+0x2c>
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124b6:	d301      	bcc.n	80124bc <pbuf_remove_header+0x30>
    return 1;
 80124b8:	2301      	movs	r3, #1
 80124ba:	e02c      	b.n	8012516 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d101      	bne.n	80124c6 <pbuf_remove_header+0x3a>
    return 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	e027      	b.n	8012516 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	895b      	ldrh	r3, [r3, #10]
 80124ce:	89fa      	ldrh	r2, [r7, #14]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d908      	bls.n	80124e6 <pbuf_remove_header+0x5a>
 80124d4:	4b12      	ldr	r3, [pc, #72]	; (8012520 <pbuf_remove_header+0x94>)
 80124d6:	f240 2255 	movw	r2, #597	; 0x255
 80124da:	4914      	ldr	r1, [pc, #80]	; (801252c <pbuf_remove_header+0xa0>)
 80124dc:	4812      	ldr	r0, [pc, #72]	; (8012528 <pbuf_remove_header+0x9c>)
 80124de:	f009 fe21 	bl	801c124 <iprintf>
 80124e2:	2301      	movs	r3, #1
 80124e4:	e017      	b.n	8012516 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	685a      	ldr	r2, [r3, #4]
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	441a      	add	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	895a      	ldrh	r2, [r3, #10]
 80124fc:	89fb      	ldrh	r3, [r7, #14]
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	b29a      	uxth	r2, r3
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	891a      	ldrh	r2, [r3, #8]
 801250a:	89fb      	ldrh	r3, [r7, #14]
 801250c:	1ad3      	subs	r3, r2, r3
 801250e:	b29a      	uxth	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	0801f028 	.word	0x0801f028
 8012524:	0801f18c 	.word	0x0801f18c
 8012528:	0801f088 	.word	0x0801f088
 801252c:	0801f198 	.word	0x0801f198

08012530 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	460b      	mov	r3, r1
 801253a:	807b      	strh	r3, [r7, #2]
 801253c:	4613      	mov	r3, r2
 801253e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012544:	2b00      	cmp	r3, #0
 8012546:	da08      	bge.n	801255a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801254c:	425b      	negs	r3, r3
 801254e:	4619      	mov	r1, r3
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f7ff ff9b 	bl	801248c <pbuf_remove_header>
 8012556:	4603      	mov	r3, r0
 8012558:	e007      	b.n	801256a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801255a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801255e:	787a      	ldrb	r2, [r7, #1]
 8012560:	4619      	mov	r1, r3
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7ff ff1a 	bl	801239c <pbuf_add_header_impl>
 8012568:	4603      	mov	r3, r0
  }
}
 801256a:	4618      	mov	r0, r3
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b082      	sub	sp, #8
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	460b      	mov	r3, r1
 801257c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801257e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012582:	2201      	movs	r2, #1
 8012584:	4619      	mov	r1, r3
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f7ff ffd2 	bl	8012530 <pbuf_header_impl>
 801258c:	4603      	mov	r3, r0
}
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
	...

08012598 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b088      	sub	sp, #32
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d10b      	bne.n	80125be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <pbuf_free+0x22>
 80125ac:	4b3b      	ldr	r3, [pc, #236]	; (801269c <pbuf_free+0x104>)
 80125ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80125b2:	493b      	ldr	r1, [pc, #236]	; (80126a0 <pbuf_free+0x108>)
 80125b4:	483b      	ldr	r0, [pc, #236]	; (80126a4 <pbuf_free+0x10c>)
 80125b6:	f009 fdb5 	bl	801c124 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	e069      	b.n	8012692 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80125c2:	e062      	b.n	801268a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80125c4:	f009 fbd6 	bl	801bd74 <sys_arch_protect>
 80125c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	7b9b      	ldrb	r3, [r3, #14]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d106      	bne.n	80125e0 <pbuf_free+0x48>
 80125d2:	4b32      	ldr	r3, [pc, #200]	; (801269c <pbuf_free+0x104>)
 80125d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80125d8:	4933      	ldr	r1, [pc, #204]	; (80126a8 <pbuf_free+0x110>)
 80125da:	4832      	ldr	r0, [pc, #200]	; (80126a4 <pbuf_free+0x10c>)
 80125dc:	f009 fda2 	bl	801c124 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	7b9b      	ldrb	r3, [r3, #14]
 80125e4:	3b01      	subs	r3, #1
 80125e6:	b2da      	uxtb	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	739a      	strb	r2, [r3, #14]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	7b9b      	ldrb	r3, [r3, #14]
 80125f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80125f2:	69b8      	ldr	r0, [r7, #24]
 80125f4:	f009 fbcc 	bl	801bd90 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80125f8:	7dfb      	ldrb	r3, [r7, #23]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d143      	bne.n	8012686 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	7b1b      	ldrb	r3, [r3, #12]
 8012608:	f003 030f 	and.w	r3, r3, #15
 801260c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	7b5b      	ldrb	r3, [r3, #13]
 8012612:	f003 0302 	and.w	r3, r3, #2
 8012616:	2b00      	cmp	r3, #0
 8012618:	d011      	beq.n	801263e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	691b      	ldr	r3, [r3, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d106      	bne.n	8012634 <pbuf_free+0x9c>
 8012626:	4b1d      	ldr	r3, [pc, #116]	; (801269c <pbuf_free+0x104>)
 8012628:	f240 22ff 	movw	r2, #767	; 0x2ff
 801262c:	491f      	ldr	r1, [pc, #124]	; (80126ac <pbuf_free+0x114>)
 801262e:	481d      	ldr	r0, [pc, #116]	; (80126a4 <pbuf_free+0x10c>)
 8012630:	f009 fd78 	bl	801c124 <iprintf>
        pc->custom_free_function(p);
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	691b      	ldr	r3, [r3, #16]
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	4798      	blx	r3
 801263c:	e01d      	b.n	801267a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801263e:	7bfb      	ldrb	r3, [r7, #15]
 8012640:	2b02      	cmp	r3, #2
 8012642:	d104      	bne.n	801264e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012644:	6879      	ldr	r1, [r7, #4]
 8012646:	200c      	movs	r0, #12
 8012648:	f7ff f902 	bl	8011850 <memp_free>
 801264c:	e015      	b.n	801267a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801264e:	7bfb      	ldrb	r3, [r7, #15]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d104      	bne.n	801265e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012654:	6879      	ldr	r1, [r7, #4]
 8012656:	200b      	movs	r0, #11
 8012658:	f7ff f8fa 	bl	8011850 <memp_free>
 801265c:	e00d      	b.n	801267a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801265e:	7bfb      	ldrb	r3, [r7, #15]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d103      	bne.n	801266c <pbuf_free+0xd4>
          mem_free(p);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f7fe fd85 	bl	8011174 <mem_free>
 801266a:	e006      	b.n	801267a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801266c:	4b0b      	ldr	r3, [pc, #44]	; (801269c <pbuf_free+0x104>)
 801266e:	f240 320f 	movw	r2, #783	; 0x30f
 8012672:	490f      	ldr	r1, [pc, #60]	; (80126b0 <pbuf_free+0x118>)
 8012674:	480b      	ldr	r0, [pc, #44]	; (80126a4 <pbuf_free+0x10c>)
 8012676:	f009 fd55 	bl	801c124 <iprintf>
        }
      }
      count++;
 801267a:	7ffb      	ldrb	r3, [r7, #31]
 801267c:	3301      	adds	r3, #1
 801267e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	607b      	str	r3, [r7, #4]
 8012684:	e001      	b.n	801268a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012686:	2300      	movs	r3, #0
 8012688:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d199      	bne.n	80125c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012690:	7ffb      	ldrb	r3, [r7, #31]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3720      	adds	r7, #32
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	0801f028 	.word	0x0801f028
 80126a0:	0801f18c 	.word	0x0801f18c
 80126a4:	0801f088 	.word	0x0801f088
 80126a8:	0801f1b8 	.word	0x0801f1b8
 80126ac:	0801f1d0 	.word	0x0801f1d0
 80126b0:	0801f1f4 	.word	0x0801f1f4

080126b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80126c0:	e005      	b.n	80126ce <pbuf_clen+0x1a>
    ++len;
 80126c2:	89fb      	ldrh	r3, [r7, #14]
 80126c4:	3301      	adds	r3, #1
 80126c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1f6      	bne.n	80126c2 <pbuf_clen+0xe>
  }
  return len;
 80126d4:	89fb      	ldrh	r3, [r7, #14]
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3714      	adds	r7, #20
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr
	...

080126e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d016      	beq.n	8012720 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80126f2:	f009 fb3f 	bl	801bd74 <sys_arch_protect>
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	7b9b      	ldrb	r3, [r3, #14]
 80126fc:	3301      	adds	r3, #1
 80126fe:	b2da      	uxtb	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	739a      	strb	r2, [r3, #14]
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f009 fb43 	bl	801bd90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	7b9b      	ldrb	r3, [r3, #14]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d106      	bne.n	8012720 <pbuf_ref+0x3c>
 8012712:	4b05      	ldr	r3, [pc, #20]	; (8012728 <pbuf_ref+0x44>)
 8012714:	f240 3242 	movw	r2, #834	; 0x342
 8012718:	4904      	ldr	r1, [pc, #16]	; (801272c <pbuf_ref+0x48>)
 801271a:	4805      	ldr	r0, [pc, #20]	; (8012730 <pbuf_ref+0x4c>)
 801271c:	f009 fd02 	bl	801c124 <iprintf>
  }
}
 8012720:	bf00      	nop
 8012722:	3710      	adds	r7, #16
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	0801f028 	.word	0x0801f028
 801272c:	0801f208 	.word	0x0801f208
 8012730:	0801f088 	.word	0x0801f088

08012734 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <pbuf_cat+0x16>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d107      	bne.n	801275a <pbuf_cat+0x26>
 801274a:	4b20      	ldr	r3, [pc, #128]	; (80127cc <pbuf_cat+0x98>)
 801274c:	f240 3259 	movw	r2, #857	; 0x359
 8012750:	491f      	ldr	r1, [pc, #124]	; (80127d0 <pbuf_cat+0x9c>)
 8012752:	4820      	ldr	r0, [pc, #128]	; (80127d4 <pbuf_cat+0xa0>)
 8012754:	f009 fce6 	bl	801c124 <iprintf>
 8012758:	e034      	b.n	80127c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	60fb      	str	r3, [r7, #12]
 801275e:	e00a      	b.n	8012776 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	891a      	ldrh	r2, [r3, #8]
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	891b      	ldrh	r3, [r3, #8]
 8012768:	4413      	add	r3, r2
 801276a:	b29a      	uxth	r2, r3
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	60fb      	str	r3, [r7, #12]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d1f0      	bne.n	8012760 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	891a      	ldrh	r2, [r3, #8]
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	895b      	ldrh	r3, [r3, #10]
 8012786:	429a      	cmp	r2, r3
 8012788:	d006      	beq.n	8012798 <pbuf_cat+0x64>
 801278a:	4b10      	ldr	r3, [pc, #64]	; (80127cc <pbuf_cat+0x98>)
 801278c:	f240 3262 	movw	r2, #866	; 0x362
 8012790:	4911      	ldr	r1, [pc, #68]	; (80127d8 <pbuf_cat+0xa4>)
 8012792:	4810      	ldr	r0, [pc, #64]	; (80127d4 <pbuf_cat+0xa0>)
 8012794:	f009 fcc6 	bl	801c124 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d006      	beq.n	80127ae <pbuf_cat+0x7a>
 80127a0:	4b0a      	ldr	r3, [pc, #40]	; (80127cc <pbuf_cat+0x98>)
 80127a2:	f240 3263 	movw	r2, #867	; 0x363
 80127a6:	490d      	ldr	r1, [pc, #52]	; (80127dc <pbuf_cat+0xa8>)
 80127a8:	480a      	ldr	r0, [pc, #40]	; (80127d4 <pbuf_cat+0xa0>)
 80127aa:	f009 fcbb 	bl	801c124 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	891a      	ldrh	r2, [r3, #8]
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	891b      	ldrh	r3, [r3, #8]
 80127b6:	4413      	add	r3, r2
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	683a      	ldr	r2, [r7, #0]
 80127c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	0801f028 	.word	0x0801f028
 80127d0:	0801f21c 	.word	0x0801f21c
 80127d4:	0801f088 	.word	0x0801f088
 80127d8:	0801f254 	.word	0x0801f254
 80127dc:	0801f284 	.word	0x0801f284

080127e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80127ea:	2300      	movs	r3, #0
 80127ec:	617b      	str	r3, [r7, #20]
 80127ee:	2300      	movs	r3, #0
 80127f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d008      	beq.n	801280a <pbuf_copy+0x2a>
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d005      	beq.n	801280a <pbuf_copy+0x2a>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	891a      	ldrh	r2, [r3, #8]
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	891b      	ldrh	r3, [r3, #8]
 8012806:	429a      	cmp	r2, r3
 8012808:	d209      	bcs.n	801281e <pbuf_copy+0x3e>
 801280a:	4b57      	ldr	r3, [pc, #348]	; (8012968 <pbuf_copy+0x188>)
 801280c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012810:	4956      	ldr	r1, [pc, #344]	; (801296c <pbuf_copy+0x18c>)
 8012812:	4857      	ldr	r0, [pc, #348]	; (8012970 <pbuf_copy+0x190>)
 8012814:	f009 fc86 	bl	801c124 <iprintf>
 8012818:	f06f 030f 	mvn.w	r3, #15
 801281c:	e09f      	b.n	801295e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	895b      	ldrh	r3, [r3, #10]
 8012822:	461a      	mov	r2, r3
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	1ad2      	subs	r2, r2, r3
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	895b      	ldrh	r3, [r3, #10]
 801282c:	4619      	mov	r1, r3
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	1acb      	subs	r3, r1, r3
 8012832:	429a      	cmp	r2, r3
 8012834:	d306      	bcc.n	8012844 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	895b      	ldrh	r3, [r3, #10]
 801283a:	461a      	mov	r2, r3
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	1ad3      	subs	r3, r2, r3
 8012840:	60fb      	str	r3, [r7, #12]
 8012842:	e005      	b.n	8012850 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	895b      	ldrh	r3, [r3, #10]
 8012848:	461a      	mov	r2, r3
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	685a      	ldr	r2, [r3, #4]
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	18d0      	adds	r0, r2, r3
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	685a      	ldr	r2, [r3, #4]
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	4413      	add	r3, r2
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	4619      	mov	r1, r3
 8012864:	f009 fbd3 	bl	801c00e <memcpy>
    offset_to += len;
 8012868:	697a      	ldr	r2, [r7, #20]
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	4413      	add	r3, r2
 801286e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012870:	693a      	ldr	r2, [r7, #16]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	4413      	add	r3, r2
 8012876:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	895b      	ldrh	r3, [r3, #10]
 801287c:	461a      	mov	r2, r3
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	4293      	cmp	r3, r2
 8012882:	d906      	bls.n	8012892 <pbuf_copy+0xb2>
 8012884:	4b38      	ldr	r3, [pc, #224]	; (8012968 <pbuf_copy+0x188>)
 8012886:	f240 32d9 	movw	r2, #985	; 0x3d9
 801288a:	493a      	ldr	r1, [pc, #232]	; (8012974 <pbuf_copy+0x194>)
 801288c:	4838      	ldr	r0, [pc, #224]	; (8012970 <pbuf_copy+0x190>)
 801288e:	f009 fc49 	bl	801c124 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	895b      	ldrh	r3, [r3, #10]
 8012896:	461a      	mov	r2, r3
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	4293      	cmp	r3, r2
 801289c:	d906      	bls.n	80128ac <pbuf_copy+0xcc>
 801289e:	4b32      	ldr	r3, [pc, #200]	; (8012968 <pbuf_copy+0x188>)
 80128a0:	f240 32da 	movw	r2, #986	; 0x3da
 80128a4:	4934      	ldr	r1, [pc, #208]	; (8012978 <pbuf_copy+0x198>)
 80128a6:	4832      	ldr	r0, [pc, #200]	; (8012970 <pbuf_copy+0x190>)
 80128a8:	f009 fc3c 	bl	801c124 <iprintf>
    if (offset_from >= p_from->len) {
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	895b      	ldrh	r3, [r3, #10]
 80128b0:	461a      	mov	r2, r3
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d304      	bcc.n	80128c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80128b8:	2300      	movs	r3, #0
 80128ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	895b      	ldrh	r3, [r3, #10]
 80128c6:	461a      	mov	r2, r3
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d114      	bne.n	80128f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80128ce:	2300      	movs	r3, #0
 80128d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d10c      	bne.n	80128f8 <pbuf_copy+0x118>
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d009      	beq.n	80128f8 <pbuf_copy+0x118>
 80128e4:	4b20      	ldr	r3, [pc, #128]	; (8012968 <pbuf_copy+0x188>)
 80128e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80128ea:	4924      	ldr	r1, [pc, #144]	; (801297c <pbuf_copy+0x19c>)
 80128ec:	4820      	ldr	r0, [pc, #128]	; (8012970 <pbuf_copy+0x190>)
 80128ee:	f009 fc19 	bl	801c124 <iprintf>
 80128f2:	f06f 030f 	mvn.w	r3, #15
 80128f6:	e032      	b.n	801295e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d013      	beq.n	8012926 <pbuf_copy+0x146>
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	895a      	ldrh	r2, [r3, #10]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	891b      	ldrh	r3, [r3, #8]
 8012906:	429a      	cmp	r2, r3
 8012908:	d10d      	bne.n	8012926 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d009      	beq.n	8012926 <pbuf_copy+0x146>
 8012912:	4b15      	ldr	r3, [pc, #84]	; (8012968 <pbuf_copy+0x188>)
 8012914:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012918:	4919      	ldr	r1, [pc, #100]	; (8012980 <pbuf_copy+0x1a0>)
 801291a:	4815      	ldr	r0, [pc, #84]	; (8012970 <pbuf_copy+0x190>)
 801291c:	f009 fc02 	bl	801c124 <iprintf>
 8012920:	f06f 0305 	mvn.w	r3, #5
 8012924:	e01b      	b.n	801295e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d013      	beq.n	8012954 <pbuf_copy+0x174>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	895a      	ldrh	r2, [r3, #10]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	891b      	ldrh	r3, [r3, #8]
 8012934:	429a      	cmp	r2, r3
 8012936:	d10d      	bne.n	8012954 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d009      	beq.n	8012954 <pbuf_copy+0x174>
 8012940:	4b09      	ldr	r3, [pc, #36]	; (8012968 <pbuf_copy+0x188>)
 8012942:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012946:	490e      	ldr	r1, [pc, #56]	; (8012980 <pbuf_copy+0x1a0>)
 8012948:	4809      	ldr	r0, [pc, #36]	; (8012970 <pbuf_copy+0x190>)
 801294a:	f009 fbeb 	bl	801c124 <iprintf>
 801294e:	f06f 0305 	mvn.w	r3, #5
 8012952:	e004      	b.n	801295e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	f47f af61 	bne.w	801281e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3718      	adds	r7, #24
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	0801f028 	.word	0x0801f028
 801296c:	0801f2d0 	.word	0x0801f2d0
 8012970:	0801f088 	.word	0x0801f088
 8012974:	0801f300 	.word	0x0801f300
 8012978:	0801f318 	.word	0x0801f318
 801297c:	0801f334 	.word	0x0801f334
 8012980:	0801f344 	.word	0x0801f344

08012984 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b088      	sub	sp, #32
 8012988:	af00      	add	r7, sp, #0
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	4611      	mov	r1, r2
 8012990:	461a      	mov	r2, r3
 8012992:	460b      	mov	r3, r1
 8012994:	80fb      	strh	r3, [r7, #6]
 8012996:	4613      	mov	r3, r2
 8012998:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801299e:	2300      	movs	r3, #0
 80129a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d108      	bne.n	80129ba <pbuf_copy_partial+0x36>
 80129a8:	4b2b      	ldr	r3, [pc, #172]	; (8012a58 <pbuf_copy_partial+0xd4>)
 80129aa:	f240 420a 	movw	r2, #1034	; 0x40a
 80129ae:	492b      	ldr	r1, [pc, #172]	; (8012a5c <pbuf_copy_partial+0xd8>)
 80129b0:	482b      	ldr	r0, [pc, #172]	; (8012a60 <pbuf_copy_partial+0xdc>)
 80129b2:	f009 fbb7 	bl	801c124 <iprintf>
 80129b6:	2300      	movs	r3, #0
 80129b8:	e04a      	b.n	8012a50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d108      	bne.n	80129d2 <pbuf_copy_partial+0x4e>
 80129c0:	4b25      	ldr	r3, [pc, #148]	; (8012a58 <pbuf_copy_partial+0xd4>)
 80129c2:	f240 420b 	movw	r2, #1035	; 0x40b
 80129c6:	4927      	ldr	r1, [pc, #156]	; (8012a64 <pbuf_copy_partial+0xe0>)
 80129c8:	4825      	ldr	r0, [pc, #148]	; (8012a60 <pbuf_copy_partial+0xdc>)
 80129ca:	f009 fbab 	bl	801c124 <iprintf>
 80129ce:	2300      	movs	r3, #0
 80129d0:	e03e      	b.n	8012a50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	61fb      	str	r3, [r7, #28]
 80129d6:	e034      	b.n	8012a42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80129d8:	88bb      	ldrh	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00a      	beq.n	80129f4 <pbuf_copy_partial+0x70>
 80129de:	69fb      	ldr	r3, [r7, #28]
 80129e0:	895b      	ldrh	r3, [r3, #10]
 80129e2:	88ba      	ldrh	r2, [r7, #4]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d305      	bcc.n	80129f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	895b      	ldrh	r3, [r3, #10]
 80129ec:	88ba      	ldrh	r2, [r7, #4]
 80129ee:	1ad3      	subs	r3, r2, r3
 80129f0:	80bb      	strh	r3, [r7, #4]
 80129f2:	e023      	b.n	8012a3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	895a      	ldrh	r2, [r3, #10]
 80129f8:	88bb      	ldrh	r3, [r7, #4]
 80129fa:	1ad3      	subs	r3, r2, r3
 80129fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80129fe:	8b3a      	ldrh	r2, [r7, #24]
 8012a00:	88fb      	ldrh	r3, [r7, #6]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d901      	bls.n	8012a0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012a06:	88fb      	ldrh	r3, [r7, #6]
 8012a08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012a0a:	8b7b      	ldrh	r3, [r7, #26]
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	18d0      	adds	r0, r2, r3
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	685a      	ldr	r2, [r3, #4]
 8012a14:	88bb      	ldrh	r3, [r7, #4]
 8012a16:	4413      	add	r3, r2
 8012a18:	8b3a      	ldrh	r2, [r7, #24]
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	f009 faf7 	bl	801c00e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012a20:	8afa      	ldrh	r2, [r7, #22]
 8012a22:	8b3b      	ldrh	r3, [r7, #24]
 8012a24:	4413      	add	r3, r2
 8012a26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012a28:	8b7a      	ldrh	r2, [r7, #26]
 8012a2a:	8b3b      	ldrh	r3, [r7, #24]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012a30:	88fa      	ldrh	r2, [r7, #6]
 8012a32:	8b3b      	ldrh	r3, [r7, #24]
 8012a34:	1ad3      	subs	r3, r2, r3
 8012a36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	61fb      	str	r3, [r7, #28]
 8012a42:	88fb      	ldrh	r3, [r7, #6]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <pbuf_copy_partial+0xca>
 8012a48:	69fb      	ldr	r3, [r7, #28]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d1c4      	bne.n	80129d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012a4e:	8afb      	ldrh	r3, [r7, #22]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3720      	adds	r7, #32
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	0801f028 	.word	0x0801f028
 8012a5c:	0801f370 	.word	0x0801f370
 8012a60:	0801f088 	.word	0x0801f088
 8012a64:	0801f390 	.word	0x0801f390

08012a68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	603a      	str	r2, [r7, #0]
 8012a72:	71fb      	strb	r3, [r7, #7]
 8012a74:	460b      	mov	r3, r1
 8012a76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	8919      	ldrh	r1, [r3, #8]
 8012a7c:	88ba      	ldrh	r2, [r7, #4]
 8012a7e:	79fb      	ldrb	r3, [r7, #7]
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7ff faa5 	bl	8011fd0 <pbuf_alloc>
 8012a86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d101      	bne.n	8012a92 <pbuf_clone+0x2a>
    return NULL;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	e011      	b.n	8012ab6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012a92:	6839      	ldr	r1, [r7, #0]
 8012a94:	68f8      	ldr	r0, [r7, #12]
 8012a96:	f7ff fea3 	bl	80127e0 <pbuf_copy>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012a9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d006      	beq.n	8012ab4 <pbuf_clone+0x4c>
 8012aa6:	4b06      	ldr	r3, [pc, #24]	; (8012ac0 <pbuf_clone+0x58>)
 8012aa8:	f240 5224 	movw	r2, #1316	; 0x524
 8012aac:	4905      	ldr	r1, [pc, #20]	; (8012ac4 <pbuf_clone+0x5c>)
 8012aae:	4806      	ldr	r0, [pc, #24]	; (8012ac8 <pbuf_clone+0x60>)
 8012ab0:	f009 fb38 	bl	801c124 <iprintf>
  return q;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3710      	adds	r7, #16
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	0801f028 	.word	0x0801f028
 8012ac4:	0801f49c 	.word	0x0801f49c
 8012ac8:	0801f088 	.word	0x0801f088

08012acc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012ad0:	f009 fbb6 	bl	801c240 <rand>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	4b01      	ldr	r3, [pc, #4]	; (8012aec <tcp_init+0x20>)
 8012ae6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ae8:	bf00      	nop
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	2000049c 	.word	0x2000049c

08012af0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	7d1b      	ldrb	r3, [r3, #20]
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d105      	bne.n	8012b0c <tcp_free+0x1c>
 8012b00:	4b06      	ldr	r3, [pc, #24]	; (8012b1c <tcp_free+0x2c>)
 8012b02:	22d4      	movs	r2, #212	; 0xd4
 8012b04:	4906      	ldr	r1, [pc, #24]	; (8012b20 <tcp_free+0x30>)
 8012b06:	4807      	ldr	r0, [pc, #28]	; (8012b24 <tcp_free+0x34>)
 8012b08:	f009 fb0c 	bl	801c124 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012b0c:	6879      	ldr	r1, [r7, #4]
 8012b0e:	2001      	movs	r0, #1
 8012b10:	f7fe fe9e 	bl	8011850 <memp_free>
}
 8012b14:	bf00      	nop
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	0801f528 	.word	0x0801f528
 8012b20:	0801f558 	.word	0x0801f558
 8012b24:	0801f56c 	.word	0x0801f56c

08012b28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	7d1b      	ldrb	r3, [r3, #20]
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d105      	bne.n	8012b44 <tcp_free_listen+0x1c>
 8012b38:	4b06      	ldr	r3, [pc, #24]	; (8012b54 <tcp_free_listen+0x2c>)
 8012b3a:	22df      	movs	r2, #223	; 0xdf
 8012b3c:	4906      	ldr	r1, [pc, #24]	; (8012b58 <tcp_free_listen+0x30>)
 8012b3e:	4807      	ldr	r0, [pc, #28]	; (8012b5c <tcp_free_listen+0x34>)
 8012b40:	f009 faf0 	bl	801c124 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012b44:	6879      	ldr	r1, [r7, #4]
 8012b46:	2002      	movs	r0, #2
 8012b48:	f7fe fe82 	bl	8011850 <memp_free>
}
 8012b4c:	bf00      	nop
 8012b4e:	3708      	adds	r7, #8
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	0801f528 	.word	0x0801f528
 8012b58:	0801f594 	.word	0x0801f594
 8012b5c:	0801f56c 	.word	0x0801f56c

08012b60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012b64:	f001 f8a6 	bl	8013cb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012b68:	4b07      	ldr	r3, [pc, #28]	; (8012b88 <tcp_tmr+0x28>)
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	3301      	adds	r3, #1
 8012b6e:	b2da      	uxtb	r2, r3
 8012b70:	4b05      	ldr	r3, [pc, #20]	; (8012b88 <tcp_tmr+0x28>)
 8012b72:	701a      	strb	r2, [r3, #0]
 8012b74:	4b04      	ldr	r3, [pc, #16]	; (8012b88 <tcp_tmr+0x28>)
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	f003 0301 	and.w	r3, r3, #1
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d001      	beq.n	8012b84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012b80:	f000 fd58 	bl	8013634 <tcp_slowtmr>
  }
}
 8012b84:	bf00      	nop
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	200098c5 	.word	0x200098c5

08012b8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b084      	sub	sp, #16
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d105      	bne.n	8012ba8 <tcp_remove_listener+0x1c>
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	; (8012bd4 <tcp_remove_listener+0x48>)
 8012b9e:	22ff      	movs	r2, #255	; 0xff
 8012ba0:	490d      	ldr	r1, [pc, #52]	; (8012bd8 <tcp_remove_listener+0x4c>)
 8012ba2:	480e      	ldr	r0, [pc, #56]	; (8012bdc <tcp_remove_listener+0x50>)
 8012ba4:	f009 fabe 	bl	801c124 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	60fb      	str	r3, [r7, #12]
 8012bac:	e00a      	b.n	8012bc4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012bb2:	683a      	ldr	r2, [r7, #0]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d102      	bne.n	8012bbe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	60fb      	str	r3, [r7, #12]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d1f1      	bne.n	8012bae <tcp_remove_listener+0x22>
    }
  }
}
 8012bca:	bf00      	nop
 8012bcc:	bf00      	nop
 8012bce:	3710      	adds	r7, #16
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	0801f528 	.word	0x0801f528
 8012bd8:	0801f5b0 	.word	0x0801f5b0
 8012bdc:	0801f56c 	.word	0x0801f56c

08012be0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d106      	bne.n	8012bfc <tcp_listen_closed+0x1c>
 8012bee:	4b14      	ldr	r3, [pc, #80]	; (8012c40 <tcp_listen_closed+0x60>)
 8012bf0:	f240 1211 	movw	r2, #273	; 0x111
 8012bf4:	4913      	ldr	r1, [pc, #76]	; (8012c44 <tcp_listen_closed+0x64>)
 8012bf6:	4814      	ldr	r0, [pc, #80]	; (8012c48 <tcp_listen_closed+0x68>)
 8012bf8:	f009 fa94 	bl	801c124 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	7d1b      	ldrb	r3, [r3, #20]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d006      	beq.n	8012c12 <tcp_listen_closed+0x32>
 8012c04:	4b0e      	ldr	r3, [pc, #56]	; (8012c40 <tcp_listen_closed+0x60>)
 8012c06:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012c0a:	4910      	ldr	r1, [pc, #64]	; (8012c4c <tcp_listen_closed+0x6c>)
 8012c0c:	480e      	ldr	r0, [pc, #56]	; (8012c48 <tcp_listen_closed+0x68>)
 8012c0e:	f009 fa89 	bl	801c124 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012c12:	2301      	movs	r3, #1
 8012c14:	60fb      	str	r3, [r7, #12]
 8012c16:	e00b      	b.n	8012c30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012c18:	4a0d      	ldr	r2, [pc, #52]	; (8012c50 <tcp_listen_closed+0x70>)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	6879      	ldr	r1, [r7, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7ff ffb1 	bl	8012b8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	60fb      	str	r3, [r7, #12]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	2b03      	cmp	r3, #3
 8012c34:	d9f0      	bls.n	8012c18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012c36:	bf00      	nop
 8012c38:	bf00      	nop
 8012c3a:	3710      	adds	r7, #16
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	0801f528 	.word	0x0801f528
 8012c44:	0801f5d8 	.word	0x0801f5d8
 8012c48:	0801f56c 	.word	0x0801f56c
 8012c4c:	0801f5e4 	.word	0x0801f5e4
 8012c50:	08024510 	.word	0x08024510

08012c54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012c54:	b5b0      	push	{r4, r5, r7, lr}
 8012c56:	b088      	sub	sp, #32
 8012c58:	af04      	add	r7, sp, #16
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_close_shutdown+0x20>
 8012c66:	4b63      	ldr	r3, [pc, #396]	; (8012df4 <tcp_close_shutdown+0x1a0>)
 8012c68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012c6c:	4962      	ldr	r1, [pc, #392]	; (8012df8 <tcp_close_shutdown+0x1a4>)
 8012c6e:	4863      	ldr	r0, [pc, #396]	; (8012dfc <tcp_close_shutdown+0x1a8>)
 8012c70:	f009 fa58 	bl	801c124 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d066      	beq.n	8012d48 <tcp_close_shutdown+0xf4>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	7d1b      	ldrb	r3, [r3, #20]
 8012c7e:	2b04      	cmp	r3, #4
 8012c80:	d003      	beq.n	8012c8a <tcp_close_shutdown+0x36>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	7d1b      	ldrb	r3, [r3, #20]
 8012c86:	2b07      	cmp	r3, #7
 8012c88:	d15e      	bne.n	8012d48 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d104      	bne.n	8012c9c <tcp_close_shutdown+0x48>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c96:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8012c9a:	d055      	beq.n	8012d48 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	8b5b      	ldrh	r3, [r3, #26]
 8012ca0:	f003 0310 	and.w	r3, r3, #16
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d106      	bne.n	8012cb6 <tcp_close_shutdown+0x62>
 8012ca8:	4b52      	ldr	r3, [pc, #328]	; (8012df4 <tcp_close_shutdown+0x1a0>)
 8012caa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012cae:	4954      	ldr	r1, [pc, #336]	; (8012e00 <tcp_close_shutdown+0x1ac>)
 8012cb0:	4852      	ldr	r0, [pc, #328]	; (8012dfc <tcp_close_shutdown+0x1a8>)
 8012cb2:	f009 fa37 	bl	801c124 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012cbe:	687d      	ldr	r5, [r7, #4]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	3304      	adds	r3, #4
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	8ad2      	ldrh	r2, [r2, #22]
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	8b09      	ldrh	r1, [r1, #24]
 8012ccc:	9102      	str	r1, [sp, #8]
 8012cce:	9201      	str	r2, [sp, #4]
 8012cd0:	9300      	str	r3, [sp, #0]
 8012cd2:	462b      	mov	r3, r5
 8012cd4:	4622      	mov	r2, r4
 8012cd6:	4601      	mov	r1, r0
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f005 fdb7 	bl	801884c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f001 fb98 	bl	8014414 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012ce4:	4b47      	ldr	r3, [pc, #284]	; (8012e04 <tcp_close_shutdown+0x1b0>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d105      	bne.n	8012cfa <tcp_close_shutdown+0xa6>
 8012cee:	4b45      	ldr	r3, [pc, #276]	; (8012e04 <tcp_close_shutdown+0x1b0>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	4a43      	ldr	r2, [pc, #268]	; (8012e04 <tcp_close_shutdown+0x1b0>)
 8012cf6:	6013      	str	r3, [r2, #0]
 8012cf8:	e013      	b.n	8012d22 <tcp_close_shutdown+0xce>
 8012cfa:	4b42      	ldr	r3, [pc, #264]	; (8012e04 <tcp_close_shutdown+0x1b0>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	60fb      	str	r3, [r7, #12]
 8012d00:	e00c      	b.n	8012d1c <tcp_close_shutdown+0xc8>
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	68db      	ldr	r3, [r3, #12]
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d104      	bne.n	8012d16 <tcp_close_shutdown+0xc2>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	68da      	ldr	r2, [r3, #12]
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	60da      	str	r2, [r3, #12]
 8012d14:	e005      	b.n	8012d22 <tcp_close_shutdown+0xce>
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	68db      	ldr	r3, [r3, #12]
 8012d1a:	60fb      	str	r3, [r7, #12]
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d1ef      	bne.n	8012d02 <tcp_close_shutdown+0xae>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	60da      	str	r2, [r3, #12]
 8012d28:	4b37      	ldr	r3, [pc, #220]	; (8012e08 <tcp_close_shutdown+0x1b4>)
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012d2e:	4b37      	ldr	r3, [pc, #220]	; (8012e0c <tcp_close_shutdown+0x1b8>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d102      	bne.n	8012d3e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012d38:	f004 f82c 	bl	8016d94 <tcp_trigger_input_pcb_close>
 8012d3c:	e002      	b.n	8012d44 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f7ff fed6 	bl	8012af0 <tcp_free>
      }
      return ERR_OK;
 8012d44:	2300      	movs	r3, #0
 8012d46:	e050      	b.n	8012dea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	7d1b      	ldrb	r3, [r3, #20]
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d03b      	beq.n	8012dc8 <tcp_close_shutdown+0x174>
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	dc44      	bgt.n	8012dde <tcp_close_shutdown+0x18a>
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <tcp_close_shutdown+0x10a>
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d02a      	beq.n	8012db2 <tcp_close_shutdown+0x15e>
 8012d5c:	e03f      	b.n	8012dde <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8adb      	ldrh	r3, [r3, #22]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d021      	beq.n	8012daa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d66:	4b2a      	ldr	r3, [pc, #168]	; (8012e10 <tcp_close_shutdown+0x1bc>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d105      	bne.n	8012d7c <tcp_close_shutdown+0x128>
 8012d70:	4b27      	ldr	r3, [pc, #156]	; (8012e10 <tcp_close_shutdown+0x1bc>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	68db      	ldr	r3, [r3, #12]
 8012d76:	4a26      	ldr	r2, [pc, #152]	; (8012e10 <tcp_close_shutdown+0x1bc>)
 8012d78:	6013      	str	r3, [r2, #0]
 8012d7a:	e013      	b.n	8012da4 <tcp_close_shutdown+0x150>
 8012d7c:	4b24      	ldr	r3, [pc, #144]	; (8012e10 <tcp_close_shutdown+0x1bc>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	60bb      	str	r3, [r7, #8]
 8012d82:	e00c      	b.n	8012d9e <tcp_close_shutdown+0x14a>
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	68db      	ldr	r3, [r3, #12]
 8012d88:	687a      	ldr	r2, [r7, #4]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d104      	bne.n	8012d98 <tcp_close_shutdown+0x144>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	68da      	ldr	r2, [r3, #12]
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	60da      	str	r2, [r3, #12]
 8012d96:	e005      	b.n	8012da4 <tcp_close_shutdown+0x150>
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	60bb      	str	r3, [r7, #8]
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1ef      	bne.n	8012d84 <tcp_close_shutdown+0x130>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2200      	movs	r2, #0
 8012da8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f7ff fea0 	bl	8012af0 <tcp_free>
      break;
 8012db0:	e01a      	b.n	8012de8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7ff ff14 	bl	8012be0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012db8:	6879      	ldr	r1, [r7, #4]
 8012dba:	4816      	ldr	r0, [pc, #88]	; (8012e14 <tcp_close_shutdown+0x1c0>)
 8012dbc:	f001 fb7a 	bl	80144b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7ff feb1 	bl	8012b28 <tcp_free_listen>
      break;
 8012dc6:	e00f      	b.n	8012de8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012dc8:	6879      	ldr	r1, [r7, #4]
 8012dca:	480e      	ldr	r0, [pc, #56]	; (8012e04 <tcp_close_shutdown+0x1b0>)
 8012dcc:	f001 fb72 	bl	80144b4 <tcp_pcb_remove>
 8012dd0:	4b0d      	ldr	r3, [pc, #52]	; (8012e08 <tcp_close_shutdown+0x1b4>)
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f7ff fe8a 	bl	8012af0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012ddc:	e004      	b.n	8012de8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 f81a 	bl	8012e18 <tcp_close_shutdown_fin>
 8012de4:	4603      	mov	r3, r0
 8012de6:	e000      	b.n	8012dea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012de8:	2300      	movs	r3, #0
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3710      	adds	r7, #16
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bdb0      	pop	{r4, r5, r7, pc}
 8012df2:	bf00      	nop
 8012df4:	0801f528 	.word	0x0801f528
 8012df8:	0801f5fc 	.word	0x0801f5fc
 8012dfc:	0801f56c 	.word	0x0801f56c
 8012e00:	0801f61c 	.word	0x0801f61c
 8012e04:	20014f64 	.word	0x20014f64
 8012e08:	20014f60 	.word	0x20014f60
 8012e0c:	20014f78 	.word	0x20014f78
 8012e10:	20014f70 	.word	0x20014f70
 8012e14:	20014f6c 	.word	0x20014f6c

08012e18 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d106      	bne.n	8012e34 <tcp_close_shutdown_fin+0x1c>
 8012e26:	4b2e      	ldr	r3, [pc, #184]	; (8012ee0 <tcp_close_shutdown_fin+0xc8>)
 8012e28:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012e2c:	492d      	ldr	r1, [pc, #180]	; (8012ee4 <tcp_close_shutdown_fin+0xcc>)
 8012e2e:	482e      	ldr	r0, [pc, #184]	; (8012ee8 <tcp_close_shutdown_fin+0xd0>)
 8012e30:	f009 f978 	bl	801c124 <iprintf>

  switch (pcb->state) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	7d1b      	ldrb	r3, [r3, #20]
 8012e38:	2b07      	cmp	r3, #7
 8012e3a:	d020      	beq.n	8012e7e <tcp_close_shutdown_fin+0x66>
 8012e3c:	2b07      	cmp	r3, #7
 8012e3e:	dc2b      	bgt.n	8012e98 <tcp_close_shutdown_fin+0x80>
 8012e40:	2b03      	cmp	r3, #3
 8012e42:	d002      	beq.n	8012e4a <tcp_close_shutdown_fin+0x32>
 8012e44:	2b04      	cmp	r3, #4
 8012e46:	d00d      	beq.n	8012e64 <tcp_close_shutdown_fin+0x4c>
 8012e48:	e026      	b.n	8012e98 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f004 fe0c 	bl	8017a68 <tcp_send_fin>
 8012e50:	4603      	mov	r3, r0
 8012e52:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d11f      	bne.n	8012e9c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2205      	movs	r2, #5
 8012e60:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e62:	e01b      	b.n	8012e9c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f004 fdff 	bl	8017a68 <tcp_send_fin>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d114      	bne.n	8012ea0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2205      	movs	r2, #5
 8012e7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e7c:	e010      	b.n	8012ea0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f004 fdf2 	bl	8017a68 <tcp_send_fin>
 8012e84:	4603      	mov	r3, r0
 8012e86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d109      	bne.n	8012ea4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2209      	movs	r2, #9
 8012e94:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e96:	e005      	b.n	8012ea4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e01c      	b.n	8012ed6 <tcp_close_shutdown_fin+0xbe>
      break;
 8012e9c:	bf00      	nop
 8012e9e:	e002      	b.n	8012ea6 <tcp_close_shutdown_fin+0x8e>
      break;
 8012ea0:	bf00      	nop
 8012ea2:	e000      	b.n	8012ea6 <tcp_close_shutdown_fin+0x8e>
      break;
 8012ea4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d103      	bne.n	8012eb6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f004 ff18 	bl	8017ce4 <tcp_output>
 8012eb4:	e00d      	b.n	8012ed2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ebe:	d108      	bne.n	8012ed2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	8b5b      	ldrh	r3, [r3, #26]
 8012ec4:	f043 0308 	orr.w	r3, r3, #8
 8012ec8:	b29a      	uxth	r2, r3
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	e001      	b.n	8012ed6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	0801f528 	.word	0x0801f528
 8012ee4:	0801f5d8 	.word	0x0801f5d8
 8012ee8:	0801f56c 	.word	0x0801f56c

08012eec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d109      	bne.n	8012f0e <tcp_close+0x22>
 8012efa:	4b0f      	ldr	r3, [pc, #60]	; (8012f38 <tcp_close+0x4c>)
 8012efc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012f00:	490e      	ldr	r1, [pc, #56]	; (8012f3c <tcp_close+0x50>)
 8012f02:	480f      	ldr	r0, [pc, #60]	; (8012f40 <tcp_close+0x54>)
 8012f04:	f009 f90e 	bl	801c124 <iprintf>
 8012f08:	f06f 030f 	mvn.w	r3, #15
 8012f0c:	e00f      	b.n	8012f2e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7d1b      	ldrb	r3, [r3, #20]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d006      	beq.n	8012f24 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	8b5b      	ldrh	r3, [r3, #26]
 8012f1a:	f043 0310 	orr.w	r3, r3, #16
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012f24:	2101      	movs	r1, #1
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7ff fe94 	bl	8012c54 <tcp_close_shutdown>
 8012f2c:	4603      	mov	r3, r0
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	0801f528 	.word	0x0801f528
 8012f3c:	0801f638 	.word	0x0801f638
 8012f40:	0801f56c 	.word	0x0801f56c

08012f44 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d109      	bne.n	8012f6a <tcp_shutdown+0x26>
 8012f56:	4b26      	ldr	r3, [pc, #152]	; (8012ff0 <tcp_shutdown+0xac>)
 8012f58:	f240 2207 	movw	r2, #519	; 0x207
 8012f5c:	4925      	ldr	r1, [pc, #148]	; (8012ff4 <tcp_shutdown+0xb0>)
 8012f5e:	4826      	ldr	r0, [pc, #152]	; (8012ff8 <tcp_shutdown+0xb4>)
 8012f60:	f009 f8e0 	bl	801c124 <iprintf>
 8012f64:	f06f 030f 	mvn.w	r3, #15
 8012f68:	e03d      	b.n	8012fe6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	7d1b      	ldrb	r3, [r3, #20]
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	d102      	bne.n	8012f78 <tcp_shutdown+0x34>
    return ERR_CONN;
 8012f72:	f06f 030a 	mvn.w	r3, #10
 8012f76:	e036      	b.n	8012fe6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d01b      	beq.n	8012fb6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	8b5b      	ldrh	r3, [r3, #26]
 8012f82:	f043 0310 	orr.w	r3, r3, #16
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d005      	beq.n	8012f9e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012f92:	2101      	movs	r1, #1
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f7ff fe5d 	bl	8012c54 <tcp_close_shutdown>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	e023      	b.n	8012fe6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d007      	beq.n	8012fb6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff faf4 	bl	8012598 <pbuf_free>
      pcb->refused_data = NULL;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d013      	beq.n	8012fe4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	7d1b      	ldrb	r3, [r3, #20]
 8012fc0:	2b04      	cmp	r3, #4
 8012fc2:	dc02      	bgt.n	8012fca <tcp_shutdown+0x86>
 8012fc4:	2b03      	cmp	r3, #3
 8012fc6:	da02      	bge.n	8012fce <tcp_shutdown+0x8a>
 8012fc8:	e009      	b.n	8012fde <tcp_shutdown+0x9a>
 8012fca:	2b07      	cmp	r3, #7
 8012fcc:	d107      	bne.n	8012fde <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f7ff fe3d 	bl	8012c54 <tcp_close_shutdown>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	e003      	b.n	8012fe6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012fde:	f06f 030a 	mvn.w	r3, #10
 8012fe2:	e000      	b.n	8012fe6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	0801f528 	.word	0x0801f528
 8012ff4:	0801f650 	.word	0x0801f650
 8012ff8:	0801f56c 	.word	0x0801f56c

08012ffc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b08e      	sub	sp, #56	; 0x38
 8013000:	af04      	add	r7, sp, #16
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d107      	bne.n	801301c <tcp_abandon+0x20>
 801300c:	4b52      	ldr	r3, [pc, #328]	; (8013158 <tcp_abandon+0x15c>)
 801300e:	f240 223d 	movw	r2, #573	; 0x23d
 8013012:	4952      	ldr	r1, [pc, #328]	; (801315c <tcp_abandon+0x160>)
 8013014:	4852      	ldr	r0, [pc, #328]	; (8013160 <tcp_abandon+0x164>)
 8013016:	f009 f885 	bl	801c124 <iprintf>
 801301a:	e099      	b.n	8013150 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	7d1b      	ldrb	r3, [r3, #20]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d106      	bne.n	8013032 <tcp_abandon+0x36>
 8013024:	4b4c      	ldr	r3, [pc, #304]	; (8013158 <tcp_abandon+0x15c>)
 8013026:	f44f 7210 	mov.w	r2, #576	; 0x240
 801302a:	494e      	ldr	r1, [pc, #312]	; (8013164 <tcp_abandon+0x168>)
 801302c:	484c      	ldr	r0, [pc, #304]	; (8013160 <tcp_abandon+0x164>)
 801302e:	f009 f879 	bl	801c124 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	7d1b      	ldrb	r3, [r3, #20]
 8013036:	2b0a      	cmp	r3, #10
 8013038:	d107      	bne.n	801304a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801303a:	6879      	ldr	r1, [r7, #4]
 801303c:	484a      	ldr	r0, [pc, #296]	; (8013168 <tcp_abandon+0x16c>)
 801303e:	f001 fa39 	bl	80144b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7ff fd54 	bl	8012af0 <tcp_free>
 8013048:	e082      	b.n	8013150 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801304e:	2300      	movs	r3, #0
 8013050:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013056:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801305c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013064:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	691b      	ldr	r3, [r3, #16]
 801306a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	7d1b      	ldrb	r3, [r3, #20]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d126      	bne.n	80130c2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	8adb      	ldrh	r3, [r3, #22]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d02e      	beq.n	80130da <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801307c:	4b3b      	ldr	r3, [pc, #236]	; (801316c <tcp_abandon+0x170>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	429a      	cmp	r2, r3
 8013084:	d105      	bne.n	8013092 <tcp_abandon+0x96>
 8013086:	4b39      	ldr	r3, [pc, #228]	; (801316c <tcp_abandon+0x170>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	68db      	ldr	r3, [r3, #12]
 801308c:	4a37      	ldr	r2, [pc, #220]	; (801316c <tcp_abandon+0x170>)
 801308e:	6013      	str	r3, [r2, #0]
 8013090:	e013      	b.n	80130ba <tcp_abandon+0xbe>
 8013092:	4b36      	ldr	r3, [pc, #216]	; (801316c <tcp_abandon+0x170>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	61fb      	str	r3, [r7, #28]
 8013098:	e00c      	b.n	80130b4 <tcp_abandon+0xb8>
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d104      	bne.n	80130ae <tcp_abandon+0xb2>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	68da      	ldr	r2, [r3, #12]
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	60da      	str	r2, [r3, #12]
 80130ac:	e005      	b.n	80130ba <tcp_abandon+0xbe>
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	68db      	ldr	r3, [r3, #12]
 80130b2:	61fb      	str	r3, [r7, #28]
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d1ef      	bne.n	801309a <tcp_abandon+0x9e>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2200      	movs	r2, #0
 80130be:	60da      	str	r2, [r3, #12]
 80130c0:	e00b      	b.n	80130da <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	8adb      	ldrh	r3, [r3, #22]
 80130ca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80130cc:	6879      	ldr	r1, [r7, #4]
 80130ce:	4828      	ldr	r0, [pc, #160]	; (8013170 <tcp_abandon+0x174>)
 80130d0:	f001 f9f0 	bl	80144b4 <tcp_pcb_remove>
 80130d4:	4b27      	ldr	r3, [pc, #156]	; (8013174 <tcp_abandon+0x178>)
 80130d6:	2201      	movs	r2, #1
 80130d8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d004      	beq.n	80130ec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130e6:	4618      	mov	r0, r3
 80130e8:	f000 fec4 	bl	8013e74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d004      	beq.n	80130fe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130f8:	4618      	mov	r0, r3
 80130fa:	f000 febb 	bl	8013e74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013102:	2b00      	cmp	r3, #0
 8013104:	d004      	beq.n	8013110 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801310a:	4618      	mov	r0, r3
 801310c:	f000 feb2 	bl	8013e74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	2b00      	cmp	r3, #0
 8013114:	d00e      	beq.n	8013134 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	3304      	adds	r3, #4
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	8b12      	ldrh	r2, [r2, #24]
 8013120:	9202      	str	r2, [sp, #8]
 8013122:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013124:	9201      	str	r2, [sp, #4]
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	460b      	mov	r3, r1
 801312a:	697a      	ldr	r2, [r7, #20]
 801312c:	69b9      	ldr	r1, [r7, #24]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f005 fb8c 	bl	801884c <tcp_rst>
    }
    last_state = pcb->state;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	7d1b      	ldrb	r3, [r3, #20]
 8013138:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7ff fcd8 	bl	8012af0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d004      	beq.n	8013150 <tcp_abandon+0x154>
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	f06f 010c 	mvn.w	r1, #12
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	4798      	blx	r3
  }
}
 8013150:	3728      	adds	r7, #40	; 0x28
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	0801f528 	.word	0x0801f528
 801315c:	0801f66c 	.word	0x0801f66c
 8013160:	0801f56c 	.word	0x0801f56c
 8013164:	0801f688 	.word	0x0801f688
 8013168:	20014f74 	.word	0x20014f74
 801316c:	20014f70 	.word	0x20014f70
 8013170:	20014f64 	.word	0x20014f64
 8013174:	20014f60 	.word	0x20014f60

08013178 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013180:	2101      	movs	r1, #1
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff ff3a 	bl	8012ffc <tcp_abandon>
}
 8013188:	bf00      	nop
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b088      	sub	sp, #32
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	4613      	mov	r3, r2
 801319c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801319e:	2304      	movs	r3, #4
 80131a0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d101      	bne.n	80131ac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80131a8:	4b3e      	ldr	r3, [pc, #248]	; (80132a4 <tcp_bind+0x114>)
 80131aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d109      	bne.n	80131c6 <tcp_bind+0x36>
 80131b2:	4b3d      	ldr	r3, [pc, #244]	; (80132a8 <tcp_bind+0x118>)
 80131b4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80131b8:	493c      	ldr	r1, [pc, #240]	; (80132ac <tcp_bind+0x11c>)
 80131ba:	483d      	ldr	r0, [pc, #244]	; (80132b0 <tcp_bind+0x120>)
 80131bc:	f008 ffb2 	bl	801c124 <iprintf>
 80131c0:	f06f 030f 	mvn.w	r3, #15
 80131c4:	e06a      	b.n	801329c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	7d1b      	ldrb	r3, [r3, #20]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d009      	beq.n	80131e2 <tcp_bind+0x52>
 80131ce:	4b36      	ldr	r3, [pc, #216]	; (80132a8 <tcp_bind+0x118>)
 80131d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80131d4:	4937      	ldr	r1, [pc, #220]	; (80132b4 <tcp_bind+0x124>)
 80131d6:	4836      	ldr	r0, [pc, #216]	; (80132b0 <tcp_bind+0x120>)
 80131d8:	f008 ffa4 	bl	801c124 <iprintf>
 80131dc:	f06f 0305 	mvn.w	r3, #5
 80131e0:	e05c      	b.n	801329c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80131e2:	88fb      	ldrh	r3, [r7, #6]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d109      	bne.n	80131fc <tcp_bind+0x6c>
    port = tcp_new_port();
 80131e8:	f000 f9de 	bl	80135a8 <tcp_new_port>
 80131ec:	4603      	mov	r3, r0
 80131ee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80131f0:	88fb      	ldrh	r3, [r7, #6]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d135      	bne.n	8013262 <tcp_bind+0xd2>
      return ERR_BUF;
 80131f6:	f06f 0301 	mvn.w	r3, #1
 80131fa:	e04f      	b.n	801329c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80131fc:	2300      	movs	r3, #0
 80131fe:	61fb      	str	r3, [r7, #28]
 8013200:	e02b      	b.n	801325a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013202:	4a2d      	ldr	r2, [pc, #180]	; (80132b8 <tcp_bind+0x128>)
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	61bb      	str	r3, [r7, #24]
 801320e:	e01e      	b.n	801324e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	8adb      	ldrh	r3, [r3, #22]
 8013214:	88fa      	ldrh	r2, [r7, #6]
 8013216:	429a      	cmp	r2, r3
 8013218:	d116      	bne.n	8013248 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801321a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801321c:	2b00      	cmp	r3, #0
 801321e:	d010      	beq.n	8013242 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d00c      	beq.n	8013242 <tcp_bind+0xb2>
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d009      	beq.n	8013242 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d005      	beq.n	8013242 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801323e:	429a      	cmp	r2, r3
 8013240:	d102      	bne.n	8013248 <tcp_bind+0xb8>
              return ERR_USE;
 8013242:	f06f 0307 	mvn.w	r3, #7
 8013246:	e029      	b.n	801329c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	68db      	ldr	r3, [r3, #12]
 801324c:	61bb      	str	r3, [r7, #24]
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d1dd      	bne.n	8013210 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	3301      	adds	r3, #1
 8013258:	61fb      	str	r3, [r7, #28]
 801325a:	69fa      	ldr	r2, [r7, #28]
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	429a      	cmp	r2, r3
 8013260:	dbcf      	blt.n	8013202 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00c      	beq.n	8013282 <tcp_bind+0xf2>
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d008      	beq.n	8013282 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <tcp_bind+0xec>
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	e000      	b.n	801327e <tcp_bind+0xee>
 801327c:	2300      	movs	r3, #0
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	88fa      	ldrh	r2, [r7, #6]
 8013286:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013288:	4b0c      	ldr	r3, [pc, #48]	; (80132bc <tcp_bind+0x12c>)
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	60da      	str	r2, [r3, #12]
 8013290:	4a0a      	ldr	r2, [pc, #40]	; (80132bc <tcp_bind+0x12c>)
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	f005 fc9b 	bl	8018bd0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3720      	adds	r7, #32
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	08024538 	.word	0x08024538
 80132a8:	0801f528 	.word	0x0801f528
 80132ac:	0801f6bc 	.word	0x0801f6bc
 80132b0:	0801f56c 	.word	0x0801f56c
 80132b4:	0801f6d4 	.word	0x0801f6d4
 80132b8:	08024510 	.word	0x08024510
 80132bc:	20014f70 	.word	0x20014f70

080132c0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	4613      	mov	r3, r2
 80132cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d106      	bne.n	80132e2 <tcp_accept_null+0x22>
 80132d4:	4b07      	ldr	r3, [pc, #28]	; (80132f4 <tcp_accept_null+0x34>)
 80132d6:	f240 320f 	movw	r2, #783	; 0x30f
 80132da:	4907      	ldr	r1, [pc, #28]	; (80132f8 <tcp_accept_null+0x38>)
 80132dc:	4807      	ldr	r0, [pc, #28]	; (80132fc <tcp_accept_null+0x3c>)
 80132de:	f008 ff21 	bl	801c124 <iprintf>

  tcp_abort(pcb);
 80132e2:	68b8      	ldr	r0, [r7, #8]
 80132e4:	f7ff ff48 	bl	8013178 <tcp_abort>

  return ERR_ABRT;
 80132e8:	f06f 030c 	mvn.w	r3, #12
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3710      	adds	r7, #16
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	0801f528 	.word	0x0801f528
 80132f8:	0801f6fc 	.word	0x0801f6fc
 80132fc:	0801f56c 	.word	0x0801f56c

08013300 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b088      	sub	sp, #32
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	460b      	mov	r3, r1
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801330e:	2300      	movs	r3, #0
 8013310:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d109      	bne.n	801332c <tcp_listen_with_backlog_and_err+0x2c>
 8013318:	4b47      	ldr	r3, [pc, #284]	; (8013438 <tcp_listen_with_backlog_and_err+0x138>)
 801331a:	f240 3259 	movw	r2, #857	; 0x359
 801331e:	4947      	ldr	r1, [pc, #284]	; (801343c <tcp_listen_with_backlog_and_err+0x13c>)
 8013320:	4847      	ldr	r0, [pc, #284]	; (8013440 <tcp_listen_with_backlog_and_err+0x140>)
 8013322:	f008 feff 	bl	801c124 <iprintf>
 8013326:	23f0      	movs	r3, #240	; 0xf0
 8013328:	76fb      	strb	r3, [r7, #27]
 801332a:	e079      	b.n	8013420 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	7d1b      	ldrb	r3, [r3, #20]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d009      	beq.n	8013348 <tcp_listen_with_backlog_and_err+0x48>
 8013334:	4b40      	ldr	r3, [pc, #256]	; (8013438 <tcp_listen_with_backlog_and_err+0x138>)
 8013336:	f240 325a 	movw	r2, #858	; 0x35a
 801333a:	4942      	ldr	r1, [pc, #264]	; (8013444 <tcp_listen_with_backlog_and_err+0x144>)
 801333c:	4840      	ldr	r0, [pc, #256]	; (8013440 <tcp_listen_with_backlog_and_err+0x140>)
 801333e:	f008 fef1 	bl	801c124 <iprintf>
 8013342:	23f1      	movs	r3, #241	; 0xf1
 8013344:	76fb      	strb	r3, [r7, #27]
 8013346:	e06b      	b.n	8013420 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	7d1b      	ldrb	r3, [r3, #20]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d104      	bne.n	801335a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013354:	23f7      	movs	r3, #247	; 0xf7
 8013356:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013358:	e062      	b.n	8013420 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801335a:	2002      	movs	r0, #2
 801335c:	f7fe fa26 	bl	80117ac <memp_malloc>
 8013360:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d102      	bne.n	801336e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013368:	23ff      	movs	r3, #255	; 0xff
 801336a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801336c:	e058      	b.n	8013420 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	691a      	ldr	r2, [r3, #16]
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	8ada      	ldrh	r2, [r3, #22]
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801337e:	69fb      	ldr	r3, [r7, #28]
 8013380:	2201      	movs	r2, #1
 8013382:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	7d5a      	ldrb	r2, [r3, #21]
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	7a5a      	ldrb	r2, [r3, #9]
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	2200      	movs	r2, #0
 8013398:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	7ada      	ldrb	r2, [r3, #11]
 801339e:	69fb      	ldr	r3, [r7, #28]
 80133a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	7a9a      	ldrb	r2, [r3, #10]
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	8adb      	ldrh	r3, [r3, #22]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d021      	beq.n	80133fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80133ba:	4b23      	ldr	r3, [pc, #140]	; (8013448 <tcp_listen_with_backlog_and_err+0x148>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	68fa      	ldr	r2, [r7, #12]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d105      	bne.n	80133d0 <tcp_listen_with_backlog_and_err+0xd0>
 80133c4:	4b20      	ldr	r3, [pc, #128]	; (8013448 <tcp_listen_with_backlog_and_err+0x148>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	4a1f      	ldr	r2, [pc, #124]	; (8013448 <tcp_listen_with_backlog_and_err+0x148>)
 80133cc:	6013      	str	r3, [r2, #0]
 80133ce:	e013      	b.n	80133f8 <tcp_listen_with_backlog_and_err+0xf8>
 80133d0:	4b1d      	ldr	r3, [pc, #116]	; (8013448 <tcp_listen_with_backlog_and_err+0x148>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	617b      	str	r3, [r7, #20]
 80133d6:	e00c      	b.n	80133f2 <tcp_listen_with_backlog_and_err+0xf2>
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d104      	bne.n	80133ec <tcp_listen_with_backlog_and_err+0xec>
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	68da      	ldr	r2, [r3, #12]
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	60da      	str	r2, [r3, #12]
 80133ea:	e005      	b.n	80133f8 <tcp_listen_with_backlog_and_err+0xf8>
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	617b      	str	r3, [r7, #20]
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1ef      	bne.n	80133d8 <tcp_listen_with_backlog_and_err+0xd8>
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2200      	movs	r2, #0
 80133fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80133fe:	68f8      	ldr	r0, [r7, #12]
 8013400:	f7ff fb76 	bl	8012af0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	4a11      	ldr	r2, [pc, #68]	; (801344c <tcp_listen_with_backlog_and_err+0x14c>)
 8013408:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801340a:	4b11      	ldr	r3, [pc, #68]	; (8013450 <tcp_listen_with_backlog_and_err+0x150>)
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	60da      	str	r2, [r3, #12]
 8013412:	4a0f      	ldr	r2, [pc, #60]	; (8013450 <tcp_listen_with_backlog_and_err+0x150>)
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	6013      	str	r3, [r2, #0]
 8013418:	f005 fbda 	bl	8018bd0 <tcp_timer_needed>
  res = ERR_OK;
 801341c:	2300      	movs	r3, #0
 801341e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d002      	beq.n	801342c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	7efa      	ldrb	r2, [r7, #27]
 801342a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801342c:	69fb      	ldr	r3, [r7, #28]
}
 801342e:	4618      	mov	r0, r3
 8013430:	3720      	adds	r7, #32
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	0801f528 	.word	0x0801f528
 801343c:	0801f71c 	.word	0x0801f71c
 8013440:	0801f56c 	.word	0x0801f56c
 8013444:	0801f74c 	.word	0x0801f74c
 8013448:	20014f70 	.word	0x20014f70
 801344c:	080132c1 	.word	0x080132c1
 8013450:	20014f6c 	.word	0x20014f6c

08013454 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <tcp_update_rcv_ann_wnd+0x1c>
 8013462:	4b25      	ldr	r3, [pc, #148]	; (80134f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8013464:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013468:	4924      	ldr	r1, [pc, #144]	; (80134fc <tcp_update_rcv_ann_wnd+0xa8>)
 801346a:	4825      	ldr	r0, [pc, #148]	; (8013500 <tcp_update_rcv_ann_wnd+0xac>)
 801346c:	f008 fe5a 	bl	801c124 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013478:	4413      	add	r3, r2
 801347a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013484:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8013488:	bf28      	it	cs
 801348a:	f44f 62fa 	movcs.w	r2, #2000	; 0x7d0
 801348e:	b292      	uxth	r2, r2
 8013490:	4413      	add	r3, r2
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	1ad3      	subs	r3, r2, r3
 8013496:	2b00      	cmp	r3, #0
 8013498:	db08      	blt.n	80134ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	1ad3      	subs	r3, r2, r3
 80134aa:	e020      	b.n	80134ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b4:	1ad3      	subs	r3, r2, r3
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	dd03      	ble.n	80134c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2200      	movs	r2, #0
 80134be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80134c0:	e014      	b.n	80134ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ca:	1ad3      	subs	r3, r2, r3
 80134cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134d4:	d306      	bcc.n	80134e4 <tcp_update_rcv_ann_wnd+0x90>
 80134d6:	4b08      	ldr	r3, [pc, #32]	; (80134f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80134d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80134dc:	4909      	ldr	r1, [pc, #36]	; (8013504 <tcp_update_rcv_ann_wnd+0xb0>)
 80134de:	4808      	ldr	r0, [pc, #32]	; (8013500 <tcp_update_rcv_ann_wnd+0xac>)
 80134e0:	f008 fe20 	bl	801c124 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	b29a      	uxth	r2, r3
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80134ec:	2300      	movs	r3, #0
  }
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	0801f528 	.word	0x0801f528
 80134fc:	0801f784 	.word	0x0801f784
 8013500:	0801f56c 	.word	0x0801f56c
 8013504:	0801f7a8 	.word	0x0801f7a8

08013508 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	460b      	mov	r3, r1
 8013512:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d107      	bne.n	801352a <tcp_recved+0x22>
 801351a:	4b1f      	ldr	r3, [pc, #124]	; (8013598 <tcp_recved+0x90>)
 801351c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013520:	491e      	ldr	r1, [pc, #120]	; (801359c <tcp_recved+0x94>)
 8013522:	481f      	ldr	r0, [pc, #124]	; (80135a0 <tcp_recved+0x98>)
 8013524:	f008 fdfe 	bl	801c124 <iprintf>
 8013528:	e032      	b.n	8013590 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	7d1b      	ldrb	r3, [r3, #20]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d106      	bne.n	8013540 <tcp_recved+0x38>
 8013532:	4b19      	ldr	r3, [pc, #100]	; (8013598 <tcp_recved+0x90>)
 8013534:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013538:	491a      	ldr	r1, [pc, #104]	; (80135a4 <tcp_recved+0x9c>)
 801353a:	4819      	ldr	r0, [pc, #100]	; (80135a0 <tcp_recved+0x98>)
 801353c:	f008 fdf2 	bl	801c124 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013544:	887b      	ldrh	r3, [r7, #2]
 8013546:	4413      	add	r3, r2
 8013548:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801354a:	89fb      	ldrh	r3, [r7, #14]
 801354c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8013550:	d804      	bhi.n	801355c <tcp_recved+0x54>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013556:	89fa      	ldrh	r2, [r7, #14]
 8013558:	429a      	cmp	r2, r3
 801355a:	d204      	bcs.n	8013566 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8013562:	851a      	strh	r2, [r3, #40]	; 0x28
 8013564:	e002      	b.n	801356c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	89fa      	ldrh	r2, [r7, #14]
 801356a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7ff ff71 	bl	8013454 <tcp_update_rcv_ann_wnd>
 8013572:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801357a:	d309      	bcc.n	8013590 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	8b5b      	ldrh	r3, [r3, #26]
 8013580:	f043 0302 	orr.w	r3, r3, #2
 8013584:	b29a      	uxth	r2, r3
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f004 fbaa 	bl	8017ce4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013590:	3710      	adds	r7, #16
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
 8013596:	bf00      	nop
 8013598:	0801f528 	.word	0x0801f528
 801359c:	0801f7c4 	.word	0x0801f7c4
 80135a0:	0801f56c 	.word	0x0801f56c
 80135a4:	0801f7dc 	.word	0x0801f7dc

080135a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80135a8:	b480      	push	{r7}
 80135aa:	b083      	sub	sp, #12
 80135ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80135b2:	4b1e      	ldr	r3, [pc, #120]	; (801362c <tcp_new_port+0x84>)
 80135b4:	881b      	ldrh	r3, [r3, #0]
 80135b6:	3301      	adds	r3, #1
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	4b1c      	ldr	r3, [pc, #112]	; (801362c <tcp_new_port+0x84>)
 80135bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80135be:	4b1b      	ldr	r3, [pc, #108]	; (801362c <tcp_new_port+0x84>)
 80135c0:	881b      	ldrh	r3, [r3, #0]
 80135c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135c6:	4293      	cmp	r3, r2
 80135c8:	d103      	bne.n	80135d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80135ca:	4b18      	ldr	r3, [pc, #96]	; (801362c <tcp_new_port+0x84>)
 80135cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80135d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80135d2:	2300      	movs	r3, #0
 80135d4:	71fb      	strb	r3, [r7, #7]
 80135d6:	e01e      	b.n	8013616 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80135d8:	79fb      	ldrb	r3, [r7, #7]
 80135da:	4a15      	ldr	r2, [pc, #84]	; (8013630 <tcp_new_port+0x88>)
 80135dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	603b      	str	r3, [r7, #0]
 80135e4:	e011      	b.n	801360a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	8ada      	ldrh	r2, [r3, #22]
 80135ea:	4b10      	ldr	r3, [pc, #64]	; (801362c <tcp_new_port+0x84>)
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d108      	bne.n	8013604 <tcp_new_port+0x5c>
        n++;
 80135f2:	88bb      	ldrh	r3, [r7, #4]
 80135f4:	3301      	adds	r3, #1
 80135f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80135f8:	88bb      	ldrh	r3, [r7, #4]
 80135fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80135fe:	d3d8      	bcc.n	80135b2 <tcp_new_port+0xa>
          return 0;
 8013600:	2300      	movs	r3, #0
 8013602:	e00d      	b.n	8013620 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	68db      	ldr	r3, [r3, #12]
 8013608:	603b      	str	r3, [r7, #0]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1ea      	bne.n	80135e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013610:	79fb      	ldrb	r3, [r7, #7]
 8013612:	3301      	adds	r3, #1
 8013614:	71fb      	strb	r3, [r7, #7]
 8013616:	79fb      	ldrb	r3, [r7, #7]
 8013618:	2b03      	cmp	r3, #3
 801361a:	d9dd      	bls.n	80135d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801361c:	4b03      	ldr	r3, [pc, #12]	; (801362c <tcp_new_port+0x84>)
 801361e:	881b      	ldrh	r3, [r3, #0]
}
 8013620:	4618      	mov	r0, r3
 8013622:	370c      	adds	r7, #12
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr
 801362c:	2000049c 	.word	0x2000049c
 8013630:	08024510 	.word	0x08024510

08013634 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013634:	b5b0      	push	{r4, r5, r7, lr}
 8013636:	b090      	sub	sp, #64	; 0x40
 8013638:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801363a:	2300      	movs	r3, #0
 801363c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013640:	4b94      	ldr	r3, [pc, #592]	; (8013894 <tcp_slowtmr+0x260>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	3301      	adds	r3, #1
 8013646:	4a93      	ldr	r2, [pc, #588]	; (8013894 <tcp_slowtmr+0x260>)
 8013648:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801364a:	4b93      	ldr	r3, [pc, #588]	; (8013898 <tcp_slowtmr+0x264>)
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	3301      	adds	r3, #1
 8013650:	b2da      	uxtb	r2, r3
 8013652:	4b91      	ldr	r3, [pc, #580]	; (8013898 <tcp_slowtmr+0x264>)
 8013654:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013656:	2300      	movs	r3, #0
 8013658:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801365a:	4b90      	ldr	r3, [pc, #576]	; (801389c <tcp_slowtmr+0x268>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013660:	e29f      	b.n	8013ba2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013664:	7d1b      	ldrb	r3, [r3, #20]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d106      	bne.n	8013678 <tcp_slowtmr+0x44>
 801366a:	4b8d      	ldr	r3, [pc, #564]	; (80138a0 <tcp_slowtmr+0x26c>)
 801366c:	f240 42be 	movw	r2, #1214	; 0x4be
 8013670:	498c      	ldr	r1, [pc, #560]	; (80138a4 <tcp_slowtmr+0x270>)
 8013672:	488d      	ldr	r0, [pc, #564]	; (80138a8 <tcp_slowtmr+0x274>)
 8013674:	f008 fd56 	bl	801c124 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367a:	7d1b      	ldrb	r3, [r3, #20]
 801367c:	2b01      	cmp	r3, #1
 801367e:	d106      	bne.n	801368e <tcp_slowtmr+0x5a>
 8013680:	4b87      	ldr	r3, [pc, #540]	; (80138a0 <tcp_slowtmr+0x26c>)
 8013682:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013686:	4989      	ldr	r1, [pc, #548]	; (80138ac <tcp_slowtmr+0x278>)
 8013688:	4887      	ldr	r0, [pc, #540]	; (80138a8 <tcp_slowtmr+0x274>)
 801368a:	f008 fd4b 	bl	801c124 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013690:	7d1b      	ldrb	r3, [r3, #20]
 8013692:	2b0a      	cmp	r3, #10
 8013694:	d106      	bne.n	80136a4 <tcp_slowtmr+0x70>
 8013696:	4b82      	ldr	r3, [pc, #520]	; (80138a0 <tcp_slowtmr+0x26c>)
 8013698:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801369c:	4984      	ldr	r1, [pc, #528]	; (80138b0 <tcp_slowtmr+0x27c>)
 801369e:	4882      	ldr	r0, [pc, #520]	; (80138a8 <tcp_slowtmr+0x274>)
 80136a0:	f008 fd40 	bl	801c124 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80136a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a6:	7f9a      	ldrb	r2, [r3, #30]
 80136a8:	4b7b      	ldr	r3, [pc, #492]	; (8013898 <tcp_slowtmr+0x264>)
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d105      	bne.n	80136bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80136b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80136b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80136ba:	e272      	b.n	8013ba2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80136bc:	4b76      	ldr	r3, [pc, #472]	; (8013898 <tcp_slowtmr+0x264>)
 80136be:	781a      	ldrb	r2, [r3, #0]
 80136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	7d1b      	ldrb	r3, [r3, #20]
 80136d4:	2b02      	cmp	r3, #2
 80136d6:	d10a      	bne.n	80136ee <tcp_slowtmr+0xba>
 80136d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136de:	2b05      	cmp	r3, #5
 80136e0:	d905      	bls.n	80136ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80136e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136e6:	3301      	adds	r3, #1
 80136e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136ec:	e11e      	b.n	801392c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80136ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136f4:	2b0b      	cmp	r3, #11
 80136f6:	d905      	bls.n	8013704 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80136f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136fc:	3301      	adds	r3, #1
 80136fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013702:	e113      	b.n	801392c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801370a:	2b00      	cmp	r3, #0
 801370c:	d075      	beq.n	80137fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013712:	2b00      	cmp	r3, #0
 8013714:	d006      	beq.n	8013724 <tcp_slowtmr+0xf0>
 8013716:	4b62      	ldr	r3, [pc, #392]	; (80138a0 <tcp_slowtmr+0x26c>)
 8013718:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801371c:	4965      	ldr	r1, [pc, #404]	; (80138b4 <tcp_slowtmr+0x280>)
 801371e:	4862      	ldr	r0, [pc, #392]	; (80138a8 <tcp_slowtmr+0x274>)
 8013720:	f008 fd00 	bl	801c124 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013728:	2b00      	cmp	r3, #0
 801372a:	d106      	bne.n	801373a <tcp_slowtmr+0x106>
 801372c:	4b5c      	ldr	r3, [pc, #368]	; (80138a0 <tcp_slowtmr+0x26c>)
 801372e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013732:	4961      	ldr	r1, [pc, #388]	; (80138b8 <tcp_slowtmr+0x284>)
 8013734:	485c      	ldr	r0, [pc, #368]	; (80138a8 <tcp_slowtmr+0x274>)
 8013736:	f008 fcf5 	bl	801c124 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013740:	2b0b      	cmp	r3, #11
 8013742:	d905      	bls.n	8013750 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013748:	3301      	adds	r3, #1
 801374a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801374e:	e0ed      	b.n	801392c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013752:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013756:	3b01      	subs	r3, #1
 8013758:	4a58      	ldr	r2, [pc, #352]	; (80138bc <tcp_slowtmr+0x288>)
 801375a:	5cd3      	ldrb	r3, [r2, r3]
 801375c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013760:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013764:	7c7a      	ldrb	r2, [r7, #17]
 8013766:	429a      	cmp	r2, r3
 8013768:	d907      	bls.n	801377a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013770:	3301      	adds	r3, #1
 8013772:	b2da      	uxtb	r2, r3
 8013774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013776:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013780:	7c7a      	ldrb	r2, [r7, #17]
 8013782:	429a      	cmp	r2, r3
 8013784:	f200 80d2 	bhi.w	801392c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013788:	2301      	movs	r3, #1
 801378a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013792:	2b00      	cmp	r3, #0
 8013794:	d108      	bne.n	80137a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013798:	f005 f94c 	bl	8018a34 <tcp_zero_window_probe>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d014      	beq.n	80137cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80137a2:	2300      	movs	r3, #0
 80137a4:	623b      	str	r3, [r7, #32]
 80137a6:	e011      	b.n	80137cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80137a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80137ae:	4619      	mov	r1, r3
 80137b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137b2:	f004 f811 	bl	80177d8 <tcp_split_unsent_seg>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d107      	bne.n	80137cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80137bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137be:	f004 fa91 	bl	8017ce4 <tcp_output>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d101      	bne.n	80137cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80137c8:	2300      	movs	r3, #0
 80137ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80137cc:	6a3b      	ldr	r3, [r7, #32]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	f000 80ac 	beq.w	801392c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80137d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d6:	2200      	movs	r2, #0
 80137d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80137dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80137e2:	2b06      	cmp	r3, #6
 80137e4:	f200 80a2 	bhi.w	801392c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80137e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80137ee:	3301      	adds	r3, #1
 80137f0:	b2da      	uxtb	r2, r3
 80137f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80137f8:	e098      	b.n	801392c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80137fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013800:	2b00      	cmp	r3, #0
 8013802:	db0f      	blt.n	8013824 <tcp_slowtmr+0x1f0>
 8013804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013806:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801380a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801380e:	4293      	cmp	r3, r2
 8013810:	d008      	beq.n	8013824 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013814:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013818:	b29b      	uxth	r3, r3
 801381a:	3301      	adds	r3, #1
 801381c:	b29b      	uxth	r3, r3
 801381e:	b21a      	sxth	r2, r3
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013826:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013830:	429a      	cmp	r2, r3
 8013832:	db7b      	blt.n	801392c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013836:	f004 fd47 	bl	80182c8 <tcp_rexmit_rto_prepare>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d007      	beq.n	8013850 <tcp_slowtmr+0x21c>
 8013840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013844:	2b00      	cmp	r3, #0
 8013846:	d171      	bne.n	801392c <tcp_slowtmr+0x2f8>
 8013848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801384c:	2b00      	cmp	r3, #0
 801384e:	d06d      	beq.n	801392c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013852:	7d1b      	ldrb	r3, [r3, #20]
 8013854:	2b02      	cmp	r3, #2
 8013856:	d03a      	beq.n	80138ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801385e:	2b0c      	cmp	r3, #12
 8013860:	bf28      	it	cs
 8013862:	230c      	movcs	r3, #12
 8013864:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013868:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801386c:	10db      	asrs	r3, r3, #3
 801386e:	b21b      	sxth	r3, r3
 8013870:	461a      	mov	r2, r3
 8013872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013874:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013878:	4413      	add	r3, r2
 801387a:	7efa      	ldrb	r2, [r7, #27]
 801387c:	4910      	ldr	r1, [pc, #64]	; (80138c0 <tcp_slowtmr+0x28c>)
 801387e:	5c8a      	ldrb	r2, [r1, r2]
 8013880:	4093      	lsls	r3, r2
 8013882:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801388a:	4293      	cmp	r3, r2
 801388c:	dc1a      	bgt.n	80138c4 <tcp_slowtmr+0x290>
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	b21a      	sxth	r2, r3
 8013892:	e019      	b.n	80138c8 <tcp_slowtmr+0x294>
 8013894:	20014f68 	.word	0x20014f68
 8013898:	200098c6 	.word	0x200098c6
 801389c:	20014f64 	.word	0x20014f64
 80138a0:	0801f528 	.word	0x0801f528
 80138a4:	0801f86c 	.word	0x0801f86c
 80138a8:	0801f56c 	.word	0x0801f56c
 80138ac:	0801f898 	.word	0x0801f898
 80138b0:	0801f8c4 	.word	0x0801f8c4
 80138b4:	0801f8f4 	.word	0x0801f8f4
 80138b8:	0801f928 	.word	0x0801f928
 80138bc:	08024508 	.word	0x08024508
 80138c0:	080244f8 	.word	0x080244f8
 80138c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80138c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80138ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d0:	2200      	movs	r2, #0
 80138d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80138d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80138da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138e0:	4293      	cmp	r3, r2
 80138e2:	bf28      	it	cs
 80138e4:	4613      	movcs	r3, r2
 80138e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80138e8:	8a7b      	ldrh	r3, [r7, #18]
 80138ea:	085b      	lsrs	r3, r3, #1
 80138ec:	b29a      	uxth	r2, r3
 80138ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80138f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80138fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138fe:	005b      	lsls	r3, r3, #1
 8013900:	b29b      	uxth	r3, r3
 8013902:	429a      	cmp	r2, r3
 8013904:	d206      	bcs.n	8013914 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801390a:	005b      	lsls	r3, r3, #1
 801390c:	b29a      	uxth	r2, r3
 801390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013910:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013916:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013920:	2200      	movs	r2, #0
 8013922:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013928:	f004 fd3e 	bl	80183a8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801392e:	7d1b      	ldrb	r3, [r3, #20]
 8013930:	2b06      	cmp	r3, #6
 8013932:	d111      	bne.n	8013958 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013936:	8b5b      	ldrh	r3, [r3, #26]
 8013938:	f003 0310 	and.w	r3, r3, #16
 801393c:	2b00      	cmp	r3, #0
 801393e:	d00b      	beq.n	8013958 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013940:	4b9d      	ldr	r3, [pc, #628]	; (8013bb8 <tcp_slowtmr+0x584>)
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013946:	6a1b      	ldr	r3, [r3, #32]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	2b28      	cmp	r3, #40	; 0x28
 801394c:	d904      	bls.n	8013958 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801394e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013952:	3301      	adds	r3, #1
 8013954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395a:	7a5b      	ldrb	r3, [r3, #9]
 801395c:	f003 0308 	and.w	r3, r3, #8
 8013960:	2b00      	cmp	r3, #0
 8013962:	d04c      	beq.n	80139fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013966:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013968:	2b04      	cmp	r3, #4
 801396a:	d003      	beq.n	8013974 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801396e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013970:	2b07      	cmp	r3, #7
 8013972:	d144      	bne.n	80139fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013974:	4b90      	ldr	r3, [pc, #576]	; (8013bb8 <tcp_slowtmr+0x584>)
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397a:	6a1b      	ldr	r3, [r3, #32]
 801397c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013984:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013988:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801398c:	498b      	ldr	r1, [pc, #556]	; (8013bbc <tcp_slowtmr+0x588>)
 801398e:	fba1 1303 	umull	r1, r3, r1, r3
 8013992:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013994:	429a      	cmp	r2, r3
 8013996:	d90a      	bls.n	80139ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801399c:	3301      	adds	r3, #1
 801399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80139a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139a6:	3301      	adds	r3, #1
 80139a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80139ac:	e027      	b.n	80139fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139ae:	4b82      	ldr	r3, [pc, #520]	; (8013bb8 <tcp_slowtmr+0x584>)
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b4:	6a1b      	ldr	r3, [r3, #32]
 80139b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80139b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80139be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80139c4:	4618      	mov	r0, r3
 80139c6:	4b7e      	ldr	r3, [pc, #504]	; (8013bc0 <tcp_slowtmr+0x58c>)
 80139c8:	fb03 f300 	mul.w	r3, r3, r0
 80139cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80139ce:	497b      	ldr	r1, [pc, #492]	; (8013bbc <tcp_slowtmr+0x588>)
 80139d0:	fba1 1303 	umull	r1, r3, r1, r3
 80139d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d911      	bls.n	80139fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80139da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139dc:	f004 ffea 	bl	80189b4 <tcp_keepalive>
 80139e0:	4603      	mov	r3, r0
 80139e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80139e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d107      	bne.n	80139fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80139ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80139f4:	3301      	adds	r3, #1
 80139f6:	b2da      	uxtb	r2, r3
 80139f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80139fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d011      	beq.n	8013a2a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013a06:	4b6c      	ldr	r3, [pc, #432]	; (8013bb8 <tcp_slowtmr+0x584>)
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0c:	6a1b      	ldr	r3, [r3, #32]
 8013a0e:	1ad2      	subs	r2, r2, r3
 8013a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013a16:	4619      	mov	r1, r3
 8013a18:	460b      	mov	r3, r1
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	440b      	add	r3, r1
 8013a1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d302      	bcc.n	8013a2a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a26:	f000 fea9 	bl	801477c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2c:	7d1b      	ldrb	r3, [r3, #20]
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	d10b      	bne.n	8013a4a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013a32:	4b61      	ldr	r3, [pc, #388]	; (8013bb8 <tcp_slowtmr+0x584>)
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a38:	6a1b      	ldr	r3, [r3, #32]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	2b28      	cmp	r3, #40	; 0x28
 8013a3e:	d904      	bls.n	8013a4a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a44:	3301      	adds	r3, #1
 8013a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a4c:	7d1b      	ldrb	r3, [r3, #20]
 8013a4e:	2b09      	cmp	r3, #9
 8013a50:	d10b      	bne.n	8013a6a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013a52:	4b59      	ldr	r3, [pc, #356]	; (8013bb8 <tcp_slowtmr+0x584>)
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a58:	6a1b      	ldr	r3, [r3, #32]
 8013a5a:	1ad3      	subs	r3, r2, r3
 8013a5c:	2bf0      	cmp	r3, #240	; 0xf0
 8013a5e:	d904      	bls.n	8013a6a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a64:	3301      	adds	r3, #1
 8013a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d060      	beq.n	8013b34 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a7c:	f000 fcca 	bl	8014414 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d010      	beq.n	8013aa8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013a86:	4b4f      	ldr	r3, [pc, #316]	; (8013bc4 <tcp_slowtmr+0x590>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d106      	bne.n	8013a9e <tcp_slowtmr+0x46a>
 8013a90:	4b4d      	ldr	r3, [pc, #308]	; (8013bc8 <tcp_slowtmr+0x594>)
 8013a92:	f240 526d 	movw	r2, #1389	; 0x56d
 8013a96:	494d      	ldr	r1, [pc, #308]	; (8013bcc <tcp_slowtmr+0x598>)
 8013a98:	484d      	ldr	r0, [pc, #308]	; (8013bd0 <tcp_slowtmr+0x59c>)
 8013a9a:	f008 fb43 	bl	801c124 <iprintf>
        prev->next = pcb->next;
 8013a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa0:	68da      	ldr	r2, [r3, #12]
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	60da      	str	r2, [r3, #12]
 8013aa6:	e00f      	b.n	8013ac8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013aa8:	4b46      	ldr	r3, [pc, #280]	; (8013bc4 <tcp_slowtmr+0x590>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d006      	beq.n	8013ac0 <tcp_slowtmr+0x48c>
 8013ab2:	4b45      	ldr	r3, [pc, #276]	; (8013bc8 <tcp_slowtmr+0x594>)
 8013ab4:	f240 5271 	movw	r2, #1393	; 0x571
 8013ab8:	4946      	ldr	r1, [pc, #280]	; (8013bd4 <tcp_slowtmr+0x5a0>)
 8013aba:	4845      	ldr	r0, [pc, #276]	; (8013bd0 <tcp_slowtmr+0x59c>)
 8013abc:	f008 fb32 	bl	801c124 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	4a3f      	ldr	r2, [pc, #252]	; (8013bc4 <tcp_slowtmr+0x590>)
 8013ac6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013ac8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d013      	beq.n	8013af8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013ad8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	3304      	adds	r3, #4
 8013ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ae0:	8ad2      	ldrh	r2, [r2, #22]
 8013ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ae4:	8b09      	ldrh	r1, [r1, #24]
 8013ae6:	9102      	str	r1, [sp, #8]
 8013ae8:	9201      	str	r2, [sp, #4]
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	462b      	mov	r3, r5
 8013aee:	4622      	mov	r2, r4
 8013af0:	4601      	mov	r1, r0
 8013af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013af4:	f004 feaa 	bl	801884c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013afa:	691b      	ldr	r3, [r3, #16]
 8013afc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b00:	7d1b      	ldrb	r3, [r3, #20]
 8013b02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013b0e:	6838      	ldr	r0, [r7, #0]
 8013b10:	f7fe ffee 	bl	8012af0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013b14:	4b30      	ldr	r3, [pc, #192]	; (8013bd8 <tcp_slowtmr+0x5a4>)
 8013b16:	2200      	movs	r2, #0
 8013b18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d004      	beq.n	8013b2a <tcp_slowtmr+0x4f6>
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f06f 010c 	mvn.w	r1, #12
 8013b26:	68b8      	ldr	r0, [r7, #8]
 8013b28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013b2a:	4b2b      	ldr	r3, [pc, #172]	; (8013bd8 <tcp_slowtmr+0x5a4>)
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d037      	beq.n	8013ba2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013b32:	e590      	b.n	8013656 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b40:	7f1b      	ldrb	r3, [r3, #28]
 8013b42:	3301      	adds	r3, #1
 8013b44:	b2da      	uxtb	r2, r3
 8013b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4c:	7f1a      	ldrb	r2, [r3, #28]
 8013b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b50:	7f5b      	ldrb	r3, [r3, #29]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d325      	bcc.n	8013ba2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b58:	2200      	movs	r2, #0
 8013b5a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013b5c:	4b1e      	ldr	r3, [pc, #120]	; (8013bd8 <tcp_slowtmr+0x5a4>)
 8013b5e:	2200      	movs	r2, #0
 8013b60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d00b      	beq.n	8013b84 <tcp_slowtmr+0x550>
 8013b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b74:	6912      	ldr	r2, [r2, #16]
 8013b76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013b78:	4610      	mov	r0, r2
 8013b7a:	4798      	blx	r3
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013b82:	e002      	b.n	8013b8a <tcp_slowtmr+0x556>
 8013b84:	2300      	movs	r3, #0
 8013b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013b8a:	4b13      	ldr	r3, [pc, #76]	; (8013bd8 <tcp_slowtmr+0x5a4>)
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d000      	beq.n	8013b94 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8013b92:	e560      	b.n	8013656 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013b94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d102      	bne.n	8013ba2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b9e:	f004 f8a1 	bl	8017ce4 <tcp_output>
  while (pcb != NULL) {
 8013ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f47f ad5c 	bne.w	8013662 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013baa:	2300      	movs	r3, #0
 8013bac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013bae:	4b0b      	ldr	r3, [pc, #44]	; (8013bdc <tcp_slowtmr+0x5a8>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013bb4:	e067      	b.n	8013c86 <tcp_slowtmr+0x652>
 8013bb6:	bf00      	nop
 8013bb8:	20014f68 	.word	0x20014f68
 8013bbc:	10624dd3 	.word	0x10624dd3
 8013bc0:	000124f8 	.word	0x000124f8
 8013bc4:	20014f64 	.word	0x20014f64
 8013bc8:	0801f528 	.word	0x0801f528
 8013bcc:	0801f960 	.word	0x0801f960
 8013bd0:	0801f56c 	.word	0x0801f56c
 8013bd4:	0801f98c 	.word	0x0801f98c
 8013bd8:	20014f60 	.word	0x20014f60
 8013bdc:	20014f74 	.word	0x20014f74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	7d1b      	ldrb	r3, [r3, #20]
 8013be4:	2b0a      	cmp	r3, #10
 8013be6:	d006      	beq.n	8013bf6 <tcp_slowtmr+0x5c2>
 8013be8:	4b2b      	ldr	r3, [pc, #172]	; (8013c98 <tcp_slowtmr+0x664>)
 8013bea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013bee:	492b      	ldr	r1, [pc, #172]	; (8013c9c <tcp_slowtmr+0x668>)
 8013bf0:	482b      	ldr	r0, [pc, #172]	; (8013ca0 <tcp_slowtmr+0x66c>)
 8013bf2:	f008 fa97 	bl	801c124 <iprintf>
    pcb_remove = 0;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013bfc:	4b29      	ldr	r3, [pc, #164]	; (8013ca4 <tcp_slowtmr+0x670>)
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c02:	6a1b      	ldr	r3, [r3, #32]
 8013c04:	1ad3      	subs	r3, r2, r3
 8013c06:	2bf0      	cmp	r3, #240	; 0xf0
 8013c08:	d904      	bls.n	8013c14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c0e:	3301      	adds	r3, #1
 8013c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d02f      	beq.n	8013c7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c1e:	f000 fbf9 	bl	8014414 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d010      	beq.n	8013c4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013c28:	4b1f      	ldr	r3, [pc, #124]	; (8013ca8 <tcp_slowtmr+0x674>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d106      	bne.n	8013c40 <tcp_slowtmr+0x60c>
 8013c32:	4b19      	ldr	r3, [pc, #100]	; (8013c98 <tcp_slowtmr+0x664>)
 8013c34:	f240 52af 	movw	r2, #1455	; 0x5af
 8013c38:	491c      	ldr	r1, [pc, #112]	; (8013cac <tcp_slowtmr+0x678>)
 8013c3a:	4819      	ldr	r0, [pc, #100]	; (8013ca0 <tcp_slowtmr+0x66c>)
 8013c3c:	f008 fa72 	bl	801c124 <iprintf>
        prev->next = pcb->next;
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	68da      	ldr	r2, [r3, #12]
 8013c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c46:	60da      	str	r2, [r3, #12]
 8013c48:	e00f      	b.n	8013c6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013c4a:	4b17      	ldr	r3, [pc, #92]	; (8013ca8 <tcp_slowtmr+0x674>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d006      	beq.n	8013c62 <tcp_slowtmr+0x62e>
 8013c54:	4b10      	ldr	r3, [pc, #64]	; (8013c98 <tcp_slowtmr+0x664>)
 8013c56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013c5a:	4915      	ldr	r1, [pc, #84]	; (8013cb0 <tcp_slowtmr+0x67c>)
 8013c5c:	4810      	ldr	r0, [pc, #64]	; (8013ca0 <tcp_slowtmr+0x66c>)
 8013c5e:	f008 fa61 	bl	801c124 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	4a10      	ldr	r2, [pc, #64]	; (8013ca8 <tcp_slowtmr+0x674>)
 8013c68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013c74:	69f8      	ldr	r0, [r7, #28]
 8013c76:	f7fe ff3b 	bl	8012af0 <tcp_free>
 8013c7a:	e004      	b.n	8013c86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d1a9      	bne.n	8013be0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013c8c:	bf00      	nop
 8013c8e:	bf00      	nop
 8013c90:	3730      	adds	r7, #48	; 0x30
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bdb0      	pop	{r4, r5, r7, pc}
 8013c96:	bf00      	nop
 8013c98:	0801f528 	.word	0x0801f528
 8013c9c:	0801f9b8 	.word	0x0801f9b8
 8013ca0:	0801f56c 	.word	0x0801f56c
 8013ca4:	20014f68 	.word	0x20014f68
 8013ca8:	20014f74 	.word	0x20014f74
 8013cac:	0801f9e8 	.word	0x0801f9e8
 8013cb0:	0801fa10 	.word	0x0801fa10

08013cb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b082      	sub	sp, #8
 8013cb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013cba:	4b2d      	ldr	r3, [pc, #180]	; (8013d70 <tcp_fasttmr+0xbc>)
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	4b2b      	ldr	r3, [pc, #172]	; (8013d70 <tcp_fasttmr+0xbc>)
 8013cc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013cc6:	4b2b      	ldr	r3, [pc, #172]	; (8013d74 <tcp_fasttmr+0xc0>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013ccc:	e048      	b.n	8013d60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	7f9a      	ldrb	r2, [r3, #30]
 8013cd2:	4b27      	ldr	r3, [pc, #156]	; (8013d70 <tcp_fasttmr+0xbc>)
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d03f      	beq.n	8013d5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013cda:	4b25      	ldr	r3, [pc, #148]	; (8013d70 <tcp_fasttmr+0xbc>)
 8013cdc:	781a      	ldrb	r2, [r3, #0]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	8b5b      	ldrh	r3, [r3, #26]
 8013ce6:	f003 0301 	and.w	r3, r3, #1
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d010      	beq.n	8013d10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	8b5b      	ldrh	r3, [r3, #26]
 8013cf2:	f043 0302 	orr.w	r3, r3, #2
 8013cf6:	b29a      	uxth	r2, r3
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f003 fff1 	bl	8017ce4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	8b5b      	ldrh	r3, [r3, #26]
 8013d06:	f023 0303 	bic.w	r3, r3, #3
 8013d0a:	b29a      	uxth	r2, r3
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	8b5b      	ldrh	r3, [r3, #26]
 8013d14:	f003 0308 	and.w	r3, r3, #8
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d009      	beq.n	8013d30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	8b5b      	ldrh	r3, [r3, #26]
 8013d20:	f023 0308 	bic.w	r3, r3, #8
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7ff f874 	bl	8012e18 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	68db      	ldr	r3, [r3, #12]
 8013d34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d00a      	beq.n	8013d54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013d3e:	4b0e      	ldr	r3, [pc, #56]	; (8013d78 <tcp_fasttmr+0xc4>)
 8013d40:	2200      	movs	r2, #0
 8013d42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f000 f819 	bl	8013d7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013d4a:	4b0b      	ldr	r3, [pc, #44]	; (8013d78 <tcp_fasttmr+0xc4>)
 8013d4c:	781b      	ldrb	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d000      	beq.n	8013d54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013d52:	e7b8      	b.n	8013cc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	607b      	str	r3, [r7, #4]
 8013d58:	e002      	b.n	8013d60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d1b3      	bne.n	8013cce <tcp_fasttmr+0x1a>
    }
  }
}
 8013d66:	bf00      	nop
 8013d68:	bf00      	nop
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	200098c6 	.word	0x200098c6
 8013d74:	20014f64 	.word	0x20014f64
 8013d78:	20014f60 	.word	0x20014f60

08013d7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013d7c:	b590      	push	{r4, r7, lr}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d109      	bne.n	8013d9e <tcp_process_refused_data+0x22>
 8013d8a:	4b37      	ldr	r3, [pc, #220]	; (8013e68 <tcp_process_refused_data+0xec>)
 8013d8c:	f240 6209 	movw	r2, #1545	; 0x609
 8013d90:	4936      	ldr	r1, [pc, #216]	; (8013e6c <tcp_process_refused_data+0xf0>)
 8013d92:	4837      	ldr	r0, [pc, #220]	; (8013e70 <tcp_process_refused_data+0xf4>)
 8013d94:	f008 f9c6 	bl	801c124 <iprintf>
 8013d98:	f06f 030f 	mvn.w	r3, #15
 8013d9c:	e060      	b.n	8013e60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013da2:	7b5b      	ldrb	r3, [r3, #13]
 8013da4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013daa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2200      	movs	r2, #0
 8013db0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00b      	beq.n	8013dd4 <tcp_process_refused_data+0x58>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6918      	ldr	r0, [r3, #16]
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	6879      	ldr	r1, [r7, #4]
 8013dcc:	47a0      	blx	r4
 8013dce:	4603      	mov	r3, r0
 8013dd0:	73fb      	strb	r3, [r7, #15]
 8013dd2:	e007      	b.n	8013de4 <tcp_process_refused_data+0x68>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	68ba      	ldr	r2, [r7, #8]
 8013dd8:	6879      	ldr	r1, [r7, #4]
 8013dda:	2000      	movs	r0, #0
 8013ddc:	f000 f8a4 	bl	8013f28 <tcp_recv_null>
 8013de0:	4603      	mov	r3, r0
 8013de2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d12a      	bne.n	8013e42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013dec:	7bbb      	ldrb	r3, [r7, #14]
 8013dee:	f003 0320 	and.w	r3, r3, #32
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d033      	beq.n	8013e5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dfa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8013dfe:	d005      	beq.n	8013e0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e04:	3301      	adds	r3, #1
 8013e06:	b29a      	uxth	r2, r3
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d00b      	beq.n	8013e2e <tcp_process_refused_data+0xb2>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6918      	ldr	r0, [r3, #16]
 8013e20:	2300      	movs	r3, #0
 8013e22:	2200      	movs	r2, #0
 8013e24:	6879      	ldr	r1, [r7, #4]
 8013e26:	47a0      	blx	r4
 8013e28:	4603      	mov	r3, r0
 8013e2a:	73fb      	strb	r3, [r7, #15]
 8013e2c:	e001      	b.n	8013e32 <tcp_process_refused_data+0xb6>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e36:	f113 0f0d 	cmn.w	r3, #13
 8013e3a:	d110      	bne.n	8013e5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013e3c:	f06f 030c 	mvn.w	r3, #12
 8013e40:	e00e      	b.n	8013e60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e46:	f113 0f0d 	cmn.w	r3, #13
 8013e4a:	d102      	bne.n	8013e52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013e4c:	f06f 030c 	mvn.w	r3, #12
 8013e50:	e006      	b.n	8013e60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013e58:	f06f 0304 	mvn.w	r3, #4
 8013e5c:	e000      	b.n	8013e60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013e5e:	2300      	movs	r3, #0
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3714      	adds	r7, #20
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd90      	pop	{r4, r7, pc}
 8013e68:	0801f528 	.word	0x0801f528
 8013e6c:	0801fa38 	.word	0x0801fa38
 8013e70:	0801f56c 	.word	0x0801f56c

08013e74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013e7c:	e007      	b.n	8013e8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 f80a 	bl	8013e9e <tcp_seg_free>
    seg = next;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d1f4      	bne.n	8013e7e <tcp_segs_free+0xa>
  }
}
 8013e94:	bf00      	nop
 8013e96:	bf00      	nop
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}

08013e9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013e9e:	b580      	push	{r7, lr}
 8013ea0:	b082      	sub	sp, #8
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d00c      	beq.n	8013ec6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d004      	beq.n	8013ebe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fe fb6d 	bl	8012598 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013ebe:	6879      	ldr	r1, [r7, #4]
 8013ec0:	2003      	movs	r0, #3
 8013ec2:	f7fd fcc5 	bl	8011850 <memp_free>
  }
}
 8013ec6:	bf00      	nop
 8013ec8:	3708      	adds	r7, #8
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
	...

08013ed0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d106      	bne.n	8013eec <tcp_seg_copy+0x1c>
 8013ede:	4b0f      	ldr	r3, [pc, #60]	; (8013f1c <tcp_seg_copy+0x4c>)
 8013ee0:	f240 6282 	movw	r2, #1666	; 0x682
 8013ee4:	490e      	ldr	r1, [pc, #56]	; (8013f20 <tcp_seg_copy+0x50>)
 8013ee6:	480f      	ldr	r0, [pc, #60]	; (8013f24 <tcp_seg_copy+0x54>)
 8013ee8:	f008 f91c 	bl	801c124 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013eec:	2003      	movs	r0, #3
 8013eee:	f7fd fc5d 	bl	80117ac <memp_malloc>
 8013ef2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d101      	bne.n	8013efe <tcp_seg_copy+0x2e>
    return NULL;
 8013efa:	2300      	movs	r3, #0
 8013efc:	e00a      	b.n	8013f14 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013efe:	2210      	movs	r2, #16
 8013f00:	6879      	ldr	r1, [r7, #4]
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f008 f883 	bl	801c00e <memcpy>
  pbuf_ref(cseg->p);
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	685b      	ldr	r3, [r3, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fe fbe9 	bl	80126e4 <pbuf_ref>
  return cseg;
 8013f12:	68fb      	ldr	r3, [r7, #12]
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3710      	adds	r7, #16
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	0801f528 	.word	0x0801f528
 8013f20:	0801fa7c 	.word	0x0801fa7c
 8013f24:	0801f56c 	.word	0x0801f56c

08013f28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d109      	bne.n	8013f50 <tcp_recv_null+0x28>
 8013f3c:	4b12      	ldr	r3, [pc, #72]	; (8013f88 <tcp_recv_null+0x60>)
 8013f3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013f42:	4912      	ldr	r1, [pc, #72]	; (8013f8c <tcp_recv_null+0x64>)
 8013f44:	4812      	ldr	r0, [pc, #72]	; (8013f90 <tcp_recv_null+0x68>)
 8013f46:	f008 f8ed 	bl	801c124 <iprintf>
 8013f4a:	f06f 030f 	mvn.w	r3, #15
 8013f4e:	e016      	b.n	8013f7e <tcp_recv_null+0x56>

  if (p != NULL) {
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d009      	beq.n	8013f6a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	891b      	ldrh	r3, [r3, #8]
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	68b8      	ldr	r0, [r7, #8]
 8013f5e:	f7ff fad3 	bl	8013508 <tcp_recved>
    pbuf_free(p);
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f7fe fb18 	bl	8012598 <pbuf_free>
 8013f68:	e008      	b.n	8013f7c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d104      	bne.n	8013f7c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013f72:	68b8      	ldr	r0, [r7, #8]
 8013f74:	f7fe ffba 	bl	8012eec <tcp_close>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	e000      	b.n	8013f7e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013f7c:	2300      	movs	r3, #0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3710      	adds	r7, #16
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	0801f528 	.word	0x0801f528
 8013f8c:	0801fa98 	.word	0x0801fa98
 8013f90:	0801f56c 	.word	0x0801f56c

08013f94 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b086      	sub	sp, #24
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	db01      	blt.n	8013faa <tcp_kill_prio+0x16>
 8013fa6:	79fb      	ldrb	r3, [r7, #7]
 8013fa8:	e000      	b.n	8013fac <tcp_kill_prio+0x18>
 8013faa:	237f      	movs	r3, #127	; 0x7f
 8013fac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013fae:	7afb      	ldrb	r3, [r7, #11]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d034      	beq.n	801401e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013fb4:	7afb      	ldrb	r3, [r7, #11]
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fc2:	4b19      	ldr	r3, [pc, #100]	; (8014028 <tcp_kill_prio+0x94>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	617b      	str	r3, [r7, #20]
 8013fc8:	e01f      	b.n	801400a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	7d5b      	ldrb	r3, [r3, #21]
 8013fce:	7afa      	ldrb	r2, [r7, #11]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d80c      	bhi.n	8013fee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013fd8:	7afa      	ldrb	r2, [r7, #11]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d112      	bne.n	8014004 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013fde:	4b13      	ldr	r3, [pc, #76]	; (801402c <tcp_kill_prio+0x98>)
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	6a1b      	ldr	r3, [r3, #32]
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	68fa      	ldr	r2, [r7, #12]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d80a      	bhi.n	8014004 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013fee:	4b0f      	ldr	r3, [pc, #60]	; (801402c <tcp_kill_prio+0x98>)
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	6a1b      	ldr	r3, [r3, #32]
 8013ff6:	1ad3      	subs	r3, r2, r3
 8013ff8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	7d5b      	ldrb	r3, [r3, #21]
 8014002:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	617b      	str	r3, [r7, #20]
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d1dc      	bne.n	8013fca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d004      	beq.n	8014020 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014016:	6938      	ldr	r0, [r7, #16]
 8014018:	f7ff f8ae 	bl	8013178 <tcp_abort>
 801401c:	e000      	b.n	8014020 <tcp_kill_prio+0x8c>
    return;
 801401e:	bf00      	nop
  }
}
 8014020:	3718      	adds	r7, #24
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	20014f64 	.word	0x20014f64
 801402c:	20014f68 	.word	0x20014f68

08014030 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b086      	sub	sp, #24
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801403a:	79fb      	ldrb	r3, [r7, #7]
 801403c:	2b08      	cmp	r3, #8
 801403e:	d009      	beq.n	8014054 <tcp_kill_state+0x24>
 8014040:	79fb      	ldrb	r3, [r7, #7]
 8014042:	2b09      	cmp	r3, #9
 8014044:	d006      	beq.n	8014054 <tcp_kill_state+0x24>
 8014046:	4b1a      	ldr	r3, [pc, #104]	; (80140b0 <tcp_kill_state+0x80>)
 8014048:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801404c:	4919      	ldr	r1, [pc, #100]	; (80140b4 <tcp_kill_state+0x84>)
 801404e:	481a      	ldr	r0, [pc, #104]	; (80140b8 <tcp_kill_state+0x88>)
 8014050:	f008 f868 	bl	801c124 <iprintf>

  inactivity = 0;
 8014054:	2300      	movs	r3, #0
 8014056:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014058:	2300      	movs	r3, #0
 801405a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801405c:	4b17      	ldr	r3, [pc, #92]	; (80140bc <tcp_kill_state+0x8c>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	617b      	str	r3, [r7, #20]
 8014062:	e017      	b.n	8014094 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	7d1b      	ldrb	r3, [r3, #20]
 8014068:	79fa      	ldrb	r2, [r7, #7]
 801406a:	429a      	cmp	r2, r3
 801406c:	d10f      	bne.n	801408e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801406e:	4b14      	ldr	r3, [pc, #80]	; (80140c0 <tcp_kill_state+0x90>)
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	6a1b      	ldr	r3, [r3, #32]
 8014076:	1ad3      	subs	r3, r2, r3
 8014078:	68fa      	ldr	r2, [r7, #12]
 801407a:	429a      	cmp	r2, r3
 801407c:	d807      	bhi.n	801408e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801407e:	4b10      	ldr	r3, [pc, #64]	; (80140c0 <tcp_kill_state+0x90>)
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	6a1b      	ldr	r3, [r3, #32]
 8014086:	1ad3      	subs	r3, r2, r3
 8014088:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	617b      	str	r3, [r7, #20]
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d1e4      	bne.n	8014064 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d003      	beq.n	80140a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80140a0:	2100      	movs	r1, #0
 80140a2:	6938      	ldr	r0, [r7, #16]
 80140a4:	f7fe ffaa 	bl	8012ffc <tcp_abandon>
  }
}
 80140a8:	bf00      	nop
 80140aa:	3718      	adds	r7, #24
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	0801f528 	.word	0x0801f528
 80140b4:	0801fab4 	.word	0x0801fab4
 80140b8:	0801f56c 	.word	0x0801f56c
 80140bc:	20014f64 	.word	0x20014f64
 80140c0:	20014f68 	.word	0x20014f68

080140c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80140ca:	2300      	movs	r3, #0
 80140cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80140ce:	2300      	movs	r3, #0
 80140d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80140d2:	4b12      	ldr	r3, [pc, #72]	; (801411c <tcp_kill_timewait+0x58>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	60fb      	str	r3, [r7, #12]
 80140d8:	e012      	b.n	8014100 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80140da:	4b11      	ldr	r3, [pc, #68]	; (8014120 <tcp_kill_timewait+0x5c>)
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	6a1b      	ldr	r3, [r3, #32]
 80140e2:	1ad3      	subs	r3, r2, r3
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d807      	bhi.n	80140fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80140ea:	4b0d      	ldr	r3, [pc, #52]	; (8014120 <tcp_kill_timewait+0x5c>)
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	6a1b      	ldr	r3, [r3, #32]
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	60fb      	str	r3, [r7, #12]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d1e9      	bne.n	80140da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d002      	beq.n	8014112 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801410c:	68b8      	ldr	r0, [r7, #8]
 801410e:	f7ff f833 	bl	8013178 <tcp_abort>
  }
}
 8014112:	bf00      	nop
 8014114:	3710      	adds	r7, #16
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	20014f74 	.word	0x20014f74
 8014120:	20014f68 	.word	0x20014f68

08014124 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801412a:	4b10      	ldr	r3, [pc, #64]	; (801416c <tcp_handle_closepend+0x48>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014130:	e014      	b.n	801415c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	8b5b      	ldrh	r3, [r3, #26]
 801413c:	f003 0308 	and.w	r3, r3, #8
 8014140:	2b00      	cmp	r3, #0
 8014142:	d009      	beq.n	8014158 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	8b5b      	ldrh	r3, [r3, #26]
 8014148:	f023 0308 	bic.w	r3, r3, #8
 801414c:	b29a      	uxth	r2, r3
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7fe fe60 	bl	8012e18 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d1e7      	bne.n	8014132 <tcp_handle_closepend+0xe>
  }
}
 8014162:	bf00      	nop
 8014164:	bf00      	nop
 8014166:	3708      	adds	r7, #8
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	20014f64 	.word	0x20014f64

08014170 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	af00      	add	r7, sp, #0
 8014176:	4603      	mov	r3, r0
 8014178:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801417a:	2001      	movs	r0, #1
 801417c:	f7fd fb16 	bl	80117ac <memp_malloc>
 8014180:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d126      	bne.n	80141d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014188:	f7ff ffcc 	bl	8014124 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801418c:	f7ff ff9a 	bl	80140c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014190:	2001      	movs	r0, #1
 8014192:	f7fd fb0b 	bl	80117ac <memp_malloc>
 8014196:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d11b      	bne.n	80141d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801419e:	2009      	movs	r0, #9
 80141a0:	f7ff ff46 	bl	8014030 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141a4:	2001      	movs	r0, #1
 80141a6:	f7fd fb01 	bl	80117ac <memp_malloc>
 80141aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d111      	bne.n	80141d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80141b2:	2008      	movs	r0, #8
 80141b4:	f7ff ff3c 	bl	8014030 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141b8:	2001      	movs	r0, #1
 80141ba:	f7fd faf7 	bl	80117ac <memp_malloc>
 80141be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d107      	bne.n	80141d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80141c6:	79fb      	ldrb	r3, [r7, #7]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ff fee3 	bl	8013f94 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141ce:	2001      	movs	r0, #1
 80141d0:	f7fd faec 	bl	80117ac <memp_malloc>
 80141d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d03f      	beq.n	801425c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80141dc:	229c      	movs	r2, #156	; 0x9c
 80141de:	2100      	movs	r1, #0
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f007 ff3c 	bl	801c05e <memset>
    pcb->prio = prio;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	79fa      	ldrb	r2, [r7, #7]
 80141ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80141f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80141fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	22ff      	movs	r2, #255	; 0xff
 801420a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014212:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2206      	movs	r2, #6
 8014218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	2206      	movs	r2, #6
 8014220:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014228:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2201      	movs	r2, #1
 801422e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014232:	4b0d      	ldr	r3, [pc, #52]	; (8014268 <tcp_alloc+0xf8>)
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801423a:	4b0c      	ldr	r3, [pc, #48]	; (801426c <tcp_alloc+0xfc>)
 801423c:	781a      	ldrb	r2, [r3, #0]
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014248:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	4a08      	ldr	r2, [pc, #32]	; (8014270 <tcp_alloc+0x100>)
 8014250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	4a07      	ldr	r2, [pc, #28]	; (8014274 <tcp_alloc+0x104>)
 8014258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801425c:	68fb      	ldr	r3, [r7, #12]
}
 801425e:	4618      	mov	r0, r3
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	20014f68 	.word	0x20014f68
 801426c:	200098c6 	.word	0x200098c6
 8014270:	08013f29 	.word	0x08013f29
 8014274:	006ddd00 	.word	0x006ddd00

08014278 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	4603      	mov	r3, r0
 8014280:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014282:	2040      	movs	r0, #64	; 0x40
 8014284:	f7ff ff74 	bl	8014170 <tcp_alloc>
 8014288:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801428a:	68fb      	ldr	r3, [r7, #12]
}
 801428c:	4618      	mov	r0, r3
 801428e:	3710      	adds	r7, #16
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d002      	beq.n	80142aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	611a      	str	r2, [r3, #16]
  }
}
 80142aa:	bf00      	nop
 80142ac:	370c      	adds	r7, #12
 80142ae:	46bd      	mov	sp, r7
 80142b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b4:	4770      	bx	lr
	...

080142b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d00e      	beq.n	80142e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	7d1b      	ldrb	r3, [r3, #20]
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d106      	bne.n	80142de <tcp_recv+0x26>
 80142d0:	4b07      	ldr	r3, [pc, #28]	; (80142f0 <tcp_recv+0x38>)
 80142d2:	f240 72df 	movw	r2, #2015	; 0x7df
 80142d6:	4907      	ldr	r1, [pc, #28]	; (80142f4 <tcp_recv+0x3c>)
 80142d8:	4807      	ldr	r0, [pc, #28]	; (80142f8 <tcp_recv+0x40>)
 80142da:	f007 ff23 	bl	801c124 <iprintf>
    pcb->recv = recv;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	683a      	ldr	r2, [r7, #0]
 80142e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80142e6:	bf00      	nop
 80142e8:	3708      	adds	r7, #8
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	0801f528 	.word	0x0801f528
 80142f4:	0801fac4 	.word	0x0801fac4
 80142f8:	0801f56c 	.word	0x0801f56c

080142fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d00e      	beq.n	801432a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	7d1b      	ldrb	r3, [r3, #20]
 8014310:	2b01      	cmp	r3, #1
 8014312:	d106      	bne.n	8014322 <tcp_sent+0x26>
 8014314:	4b07      	ldr	r3, [pc, #28]	; (8014334 <tcp_sent+0x38>)
 8014316:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801431a:	4907      	ldr	r1, [pc, #28]	; (8014338 <tcp_sent+0x3c>)
 801431c:	4807      	ldr	r0, [pc, #28]	; (801433c <tcp_sent+0x40>)
 801431e:	f007 ff01 	bl	801c124 <iprintf>
    pcb->sent = sent;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	683a      	ldr	r2, [r7, #0]
 8014326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801432a:	bf00      	nop
 801432c:	3708      	adds	r7, #8
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	0801f528 	.word	0x0801f528
 8014338:	0801faec 	.word	0x0801faec
 801433c:	0801f56c 	.word	0x0801f56c

08014340 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00e      	beq.n	801436e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	7d1b      	ldrb	r3, [r3, #20]
 8014354:	2b01      	cmp	r3, #1
 8014356:	d106      	bne.n	8014366 <tcp_err+0x26>
 8014358:	4b07      	ldr	r3, [pc, #28]	; (8014378 <tcp_err+0x38>)
 801435a:	f640 020d 	movw	r2, #2061	; 0x80d
 801435e:	4907      	ldr	r1, [pc, #28]	; (801437c <tcp_err+0x3c>)
 8014360:	4807      	ldr	r0, [pc, #28]	; (8014380 <tcp_err+0x40>)
 8014362:	f007 fedf 	bl	801c124 <iprintf>
    pcb->errf = err;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	683a      	ldr	r2, [r7, #0]
 801436a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801436e:	bf00      	nop
 8014370:	3708      	adds	r7, #8
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	0801f528 	.word	0x0801f528
 801437c:	0801fb14 	.word	0x0801fb14
 8014380:	0801f56c 	.word	0x0801f56c

08014384 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d008      	beq.n	80143a6 <tcp_accept+0x22>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	7d1b      	ldrb	r3, [r3, #20]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d104      	bne.n	80143a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	683a      	ldr	r2, [r7, #0]
 80143a4:	619a      	str	r2, [r3, #24]
  }
}
 80143a6:	bf00      	nop
 80143a8:	3714      	adds	r7, #20
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr
	...

080143b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	4613      	mov	r3, r2
 80143c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d107      	bne.n	80143d8 <tcp_poll+0x24>
 80143c8:	4b0e      	ldr	r3, [pc, #56]	; (8014404 <tcp_poll+0x50>)
 80143ca:	f640 023d 	movw	r2, #2109	; 0x83d
 80143ce:	490e      	ldr	r1, [pc, #56]	; (8014408 <tcp_poll+0x54>)
 80143d0:	480e      	ldr	r0, [pc, #56]	; (801440c <tcp_poll+0x58>)
 80143d2:	f007 fea7 	bl	801c124 <iprintf>
 80143d6:	e011      	b.n	80143fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	7d1b      	ldrb	r3, [r3, #20]
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d106      	bne.n	80143ee <tcp_poll+0x3a>
 80143e0:	4b08      	ldr	r3, [pc, #32]	; (8014404 <tcp_poll+0x50>)
 80143e2:	f640 023e 	movw	r2, #2110	; 0x83e
 80143e6:	490a      	ldr	r1, [pc, #40]	; (8014410 <tcp_poll+0x5c>)
 80143e8:	4808      	ldr	r0, [pc, #32]	; (801440c <tcp_poll+0x58>)
 80143ea:	f007 fe9b 	bl	801c124 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	68ba      	ldr	r2, [r7, #8]
 80143f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	79fa      	ldrb	r2, [r7, #7]
 80143fa:	775a      	strb	r2, [r3, #29]
}
 80143fc:	3710      	adds	r7, #16
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	0801f528 	.word	0x0801f528
 8014408:	0801fb3c 	.word	0x0801fb3c
 801440c:	0801f56c 	.word	0x0801f56c
 8014410:	0801fb54 	.word	0x0801fb54

08014414 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d107      	bne.n	8014432 <tcp_pcb_purge+0x1e>
 8014422:	4b21      	ldr	r3, [pc, #132]	; (80144a8 <tcp_pcb_purge+0x94>)
 8014424:	f640 0251 	movw	r2, #2129	; 0x851
 8014428:	4920      	ldr	r1, [pc, #128]	; (80144ac <tcp_pcb_purge+0x98>)
 801442a:	4821      	ldr	r0, [pc, #132]	; (80144b0 <tcp_pcb_purge+0x9c>)
 801442c:	f007 fe7a 	bl	801c124 <iprintf>
 8014430:	e037      	b.n	80144a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	7d1b      	ldrb	r3, [r3, #20]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d033      	beq.n	80144a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801443e:	2b0a      	cmp	r3, #10
 8014440:	d02f      	beq.n	80144a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014446:	2b01      	cmp	r3, #1
 8014448:	d02b      	beq.n	80144a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801444e:	2b00      	cmp	r3, #0
 8014450:	d007      	beq.n	8014462 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014456:	4618      	mov	r0, r3
 8014458:	f7fe f89e 	bl	8012598 <pbuf_free>
      pcb->refused_data = NULL;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2200      	movs	r2, #0
 8014460:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014466:	2b00      	cmp	r3, #0
 8014468:	d002      	beq.n	8014470 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 f986 	bl	801477c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014476:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801447c:	4618      	mov	r0, r3
 801447e:	f7ff fcf9 	bl	8013e74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014486:	4618      	mov	r0, r3
 8014488:	f7ff fcf4 	bl	8013e74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	66da      	str	r2, [r3, #108]	; 0x6c
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	0801f528 	.word	0x0801f528
 80144ac:	0801fb74 	.word	0x0801fb74
 80144b0:	0801f56c 	.word	0x0801f56c

080144b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d106      	bne.n	80144d2 <tcp_pcb_remove+0x1e>
 80144c4:	4b3e      	ldr	r3, [pc, #248]	; (80145c0 <tcp_pcb_remove+0x10c>)
 80144c6:	f640 0283 	movw	r2, #2179	; 0x883
 80144ca:	493e      	ldr	r1, [pc, #248]	; (80145c4 <tcp_pcb_remove+0x110>)
 80144cc:	483e      	ldr	r0, [pc, #248]	; (80145c8 <tcp_pcb_remove+0x114>)
 80144ce:	f007 fe29 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d106      	bne.n	80144e6 <tcp_pcb_remove+0x32>
 80144d8:	4b39      	ldr	r3, [pc, #228]	; (80145c0 <tcp_pcb_remove+0x10c>)
 80144da:	f640 0284 	movw	r2, #2180	; 0x884
 80144de:	493b      	ldr	r1, [pc, #236]	; (80145cc <tcp_pcb_remove+0x118>)
 80144e0:	4839      	ldr	r0, [pc, #228]	; (80145c8 <tcp_pcb_remove+0x114>)
 80144e2:	f007 fe1f 	bl	801c124 <iprintf>

  TCP_RMV(pcblist, pcb);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	683a      	ldr	r2, [r7, #0]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d105      	bne.n	80144fc <tcp_pcb_remove+0x48>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	68da      	ldr	r2, [r3, #12]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	e013      	b.n	8014524 <tcp_pcb_remove+0x70>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	e00c      	b.n	801451e <tcp_pcb_remove+0x6a>
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	683a      	ldr	r2, [r7, #0]
 801450a:	429a      	cmp	r2, r3
 801450c:	d104      	bne.n	8014518 <tcp_pcb_remove+0x64>
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	68da      	ldr	r2, [r3, #12]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	60da      	str	r2, [r3, #12]
 8014516:	e005      	b.n	8014524 <tcp_pcb_remove+0x70>
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	60fb      	str	r3, [r7, #12]
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d1ef      	bne.n	8014504 <tcp_pcb_remove+0x50>
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	2200      	movs	r2, #0
 8014528:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801452a:	6838      	ldr	r0, [r7, #0]
 801452c:	f7ff ff72 	bl	8014414 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	7d1b      	ldrb	r3, [r3, #20]
 8014534:	2b0a      	cmp	r3, #10
 8014536:	d013      	beq.n	8014560 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801453c:	2b01      	cmp	r3, #1
 801453e:	d00f      	beq.n	8014560 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	8b5b      	ldrh	r3, [r3, #26]
 8014544:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014548:	2b00      	cmp	r3, #0
 801454a:	d009      	beq.n	8014560 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	8b5b      	ldrh	r3, [r3, #26]
 8014550:	f043 0302 	orr.w	r3, r3, #2
 8014554:	b29a      	uxth	r2, r3
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801455a:	6838      	ldr	r0, [r7, #0]
 801455c:	f003 fbc2 	bl	8017ce4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	7d1b      	ldrb	r3, [r3, #20]
 8014564:	2b01      	cmp	r3, #1
 8014566:	d020      	beq.n	80145aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801456c:	2b00      	cmp	r3, #0
 801456e:	d006      	beq.n	801457e <tcp_pcb_remove+0xca>
 8014570:	4b13      	ldr	r3, [pc, #76]	; (80145c0 <tcp_pcb_remove+0x10c>)
 8014572:	f640 0293 	movw	r2, #2195	; 0x893
 8014576:	4916      	ldr	r1, [pc, #88]	; (80145d0 <tcp_pcb_remove+0x11c>)
 8014578:	4813      	ldr	r0, [pc, #76]	; (80145c8 <tcp_pcb_remove+0x114>)
 801457a:	f007 fdd3 	bl	801c124 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014582:	2b00      	cmp	r3, #0
 8014584:	d006      	beq.n	8014594 <tcp_pcb_remove+0xe0>
 8014586:	4b0e      	ldr	r3, [pc, #56]	; (80145c0 <tcp_pcb_remove+0x10c>)
 8014588:	f640 0294 	movw	r2, #2196	; 0x894
 801458c:	4911      	ldr	r1, [pc, #68]	; (80145d4 <tcp_pcb_remove+0x120>)
 801458e:	480e      	ldr	r0, [pc, #56]	; (80145c8 <tcp_pcb_remove+0x114>)
 8014590:	f007 fdc8 	bl	801c124 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014598:	2b00      	cmp	r3, #0
 801459a:	d006      	beq.n	80145aa <tcp_pcb_remove+0xf6>
 801459c:	4b08      	ldr	r3, [pc, #32]	; (80145c0 <tcp_pcb_remove+0x10c>)
 801459e:	f640 0296 	movw	r2, #2198	; 0x896
 80145a2:	490d      	ldr	r1, [pc, #52]	; (80145d8 <tcp_pcb_remove+0x124>)
 80145a4:	4808      	ldr	r0, [pc, #32]	; (80145c8 <tcp_pcb_remove+0x114>)
 80145a6:	f007 fdbd 	bl	801c124 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	2200      	movs	r2, #0
 80145ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2200      	movs	r2, #0
 80145b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80145b6:	bf00      	nop
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	0801f528 	.word	0x0801f528
 80145c4:	0801fb90 	.word	0x0801fb90
 80145c8:	0801f56c 	.word	0x0801f56c
 80145cc:	0801fbac 	.word	0x0801fbac
 80145d0:	0801fbcc 	.word	0x0801fbcc
 80145d4:	0801fbe4 	.word	0x0801fbe4
 80145d8:	0801fc00 	.word	0x0801fc00

080145dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d106      	bne.n	80145f8 <tcp_next_iss+0x1c>
 80145ea:	4b0a      	ldr	r3, [pc, #40]	; (8014614 <tcp_next_iss+0x38>)
 80145ec:	f640 02af 	movw	r2, #2223	; 0x8af
 80145f0:	4909      	ldr	r1, [pc, #36]	; (8014618 <tcp_next_iss+0x3c>)
 80145f2:	480a      	ldr	r0, [pc, #40]	; (801461c <tcp_next_iss+0x40>)
 80145f4:	f007 fd96 	bl	801c124 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80145f8:	4b09      	ldr	r3, [pc, #36]	; (8014620 <tcp_next_iss+0x44>)
 80145fa:	681a      	ldr	r2, [r3, #0]
 80145fc:	4b09      	ldr	r3, [pc, #36]	; (8014624 <tcp_next_iss+0x48>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4413      	add	r3, r2
 8014602:	4a07      	ldr	r2, [pc, #28]	; (8014620 <tcp_next_iss+0x44>)
 8014604:	6013      	str	r3, [r2, #0]
  return iss;
 8014606:	4b06      	ldr	r3, [pc, #24]	; (8014620 <tcp_next_iss+0x44>)
 8014608:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801460a:	4618      	mov	r0, r3
 801460c:	3708      	adds	r7, #8
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	0801f528 	.word	0x0801f528
 8014618:	0801fc18 	.word	0x0801fc18
 801461c:	0801f56c 	.word	0x0801f56c
 8014620:	200004a0 	.word	0x200004a0
 8014624:	20014f68 	.word	0x20014f68

08014628 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b086      	sub	sp, #24
 801462c:	af00      	add	r7, sp, #0
 801462e:	4603      	mov	r3, r0
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d106      	bne.n	801464a <tcp_eff_send_mss_netif+0x22>
 801463c:	4b14      	ldr	r3, [pc, #80]	; (8014690 <tcp_eff_send_mss_netif+0x68>)
 801463e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014642:	4914      	ldr	r1, [pc, #80]	; (8014694 <tcp_eff_send_mss_netif+0x6c>)
 8014644:	4814      	ldr	r0, [pc, #80]	; (8014698 <tcp_eff_send_mss_netif+0x70>)
 8014646:	f007 fd6d 	bl	801c124 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d101      	bne.n	8014654 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014650:	89fb      	ldrh	r3, [r7, #14]
 8014652:	e019      	b.n	8014688 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014658:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801465a:	8afb      	ldrh	r3, [r7, #22]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d012      	beq.n	8014686 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014660:	2328      	movs	r3, #40	; 0x28
 8014662:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014664:	8afa      	ldrh	r2, [r7, #22]
 8014666:	8abb      	ldrh	r3, [r7, #20]
 8014668:	429a      	cmp	r2, r3
 801466a:	d904      	bls.n	8014676 <tcp_eff_send_mss_netif+0x4e>
 801466c:	8afa      	ldrh	r2, [r7, #22]
 801466e:	8abb      	ldrh	r3, [r7, #20]
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	b29b      	uxth	r3, r3
 8014674:	e000      	b.n	8014678 <tcp_eff_send_mss_netif+0x50>
 8014676:	2300      	movs	r3, #0
 8014678:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801467a:	8a7a      	ldrh	r2, [r7, #18]
 801467c:	89fb      	ldrh	r3, [r7, #14]
 801467e:	4293      	cmp	r3, r2
 8014680:	bf28      	it	cs
 8014682:	4613      	movcs	r3, r2
 8014684:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014686:	89fb      	ldrh	r3, [r7, #14]
}
 8014688:	4618      	mov	r0, r3
 801468a:	3718      	adds	r7, #24
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	0801f528 	.word	0x0801f528
 8014694:	0801fc34 	.word	0x0801fc34
 8014698:	0801f56c 	.word	0x0801f56c

0801469c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d119      	bne.n	80146e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80146b0:	4b10      	ldr	r3, [pc, #64]	; (80146f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80146b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80146b6:	4910      	ldr	r1, [pc, #64]	; (80146f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80146b8:	4810      	ldr	r0, [pc, #64]	; (80146fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80146ba:	f007 fd33 	bl	801c124 <iprintf>

  while (pcb != NULL) {
 80146be:	e011      	b.n	80146e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d108      	bne.n	80146de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f7fe fd50 	bl	8013178 <tcp_abort>
      pcb = next;
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	60fb      	str	r3, [r7, #12]
 80146dc:	e002      	b.n	80146e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d1ea      	bne.n	80146c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80146ea:	bf00      	nop
 80146ec:	bf00      	nop
 80146ee:	3710      	adds	r7, #16
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	0801f528 	.word	0x0801f528
 80146f8:	0801fc5c 	.word	0x0801fc5c
 80146fc:	0801f56c 	.word	0x0801f56c

08014700 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b084      	sub	sp, #16
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d02a      	beq.n	8014766 <tcp_netif_ip_addr_changed+0x66>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d026      	beq.n	8014766 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014718:	4b15      	ldr	r3, [pc, #84]	; (8014770 <tcp_netif_ip_addr_changed+0x70>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4619      	mov	r1, r3
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f7ff ffbc 	bl	801469c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014724:	4b13      	ldr	r3, [pc, #76]	; (8014774 <tcp_netif_ip_addr_changed+0x74>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	4619      	mov	r1, r3
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f7ff ffb6 	bl	801469c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d017      	beq.n	8014766 <tcp_netif_ip_addr_changed+0x66>
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d013      	beq.n	8014766 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801473e:	4b0e      	ldr	r3, [pc, #56]	; (8014778 <tcp_netif_ip_addr_changed+0x78>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	60fb      	str	r3, [r7, #12]
 8014744:	e00c      	b.n	8014760 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	429a      	cmp	r2, r3
 8014750:	d103      	bne.n	801475a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	681a      	ldr	r2, [r3, #0]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	68db      	ldr	r3, [r3, #12]
 801475e:	60fb      	str	r3, [r7, #12]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d1ef      	bne.n	8014746 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014766:	bf00      	nop
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	20014f64 	.word	0x20014f64
 8014774:	20014f70 	.word	0x20014f70
 8014778:	20014f6c 	.word	0x20014f6c

0801477c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014788:	2b00      	cmp	r3, #0
 801478a:	d007      	beq.n	801479c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014790:	4618      	mov	r0, r3
 8014792:	f7ff fb6f 	bl	8013e74 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2200      	movs	r2, #0
 801479a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801479c:	bf00      	nop
 801479e:	3708      	adds	r7, #8
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80147a4:	b590      	push	{r4, r7, lr}
 80147a6:	b08d      	sub	sp, #52	; 0x34
 80147a8:	af04      	add	r7, sp, #16
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d105      	bne.n	80147c0 <tcp_input+0x1c>
 80147b4:	4b9b      	ldr	r3, [pc, #620]	; (8014a24 <tcp_input+0x280>)
 80147b6:	2283      	movs	r2, #131	; 0x83
 80147b8:	499b      	ldr	r1, [pc, #620]	; (8014a28 <tcp_input+0x284>)
 80147ba:	489c      	ldr	r0, [pc, #624]	; (8014a2c <tcp_input+0x288>)
 80147bc:	f007 fcb2 	bl	801c124 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	4a9a      	ldr	r2, [pc, #616]	; (8014a30 <tcp_input+0x28c>)
 80147c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	895b      	ldrh	r3, [r3, #10]
 80147cc:	2b13      	cmp	r3, #19
 80147ce:	f240 83c4 	bls.w	8014f5a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80147d2:	4b98      	ldr	r3, [pc, #608]	; (8014a34 <tcp_input+0x290>)
 80147d4:	695b      	ldr	r3, [r3, #20]
 80147d6:	4a97      	ldr	r2, [pc, #604]	; (8014a34 <tcp_input+0x290>)
 80147d8:	6812      	ldr	r2, [r2, #0]
 80147da:	4611      	mov	r1, r2
 80147dc:	4618      	mov	r0, r3
 80147de:	f006 f9e1 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f040 83ba 	bne.w	8014f5e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80147ea:	4b92      	ldr	r3, [pc, #584]	; (8014a34 <tcp_input+0x290>)
 80147ec:	695b      	ldr	r3, [r3, #20]
 80147ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80147f2:	2be0      	cmp	r3, #224	; 0xe0
 80147f4:	f000 83b3 	beq.w	8014f5e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80147f8:	4b8d      	ldr	r3, [pc, #564]	; (8014a30 <tcp_input+0x28c>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	899b      	ldrh	r3, [r3, #12]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	4618      	mov	r0, r3
 8014802:	f7fc fb1d 	bl	8010e40 <lwip_htons>
 8014806:	4603      	mov	r3, r0
 8014808:	0b1b      	lsrs	r3, r3, #12
 801480a:	b29b      	uxth	r3, r3
 801480c:	b2db      	uxtb	r3, r3
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014812:	7cbb      	ldrb	r3, [r7, #18]
 8014814:	2b13      	cmp	r3, #19
 8014816:	f240 83a4 	bls.w	8014f62 <tcp_input+0x7be>
 801481a:	7cbb      	ldrb	r3, [r7, #18]
 801481c:	b29a      	uxth	r2, r3
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	891b      	ldrh	r3, [r3, #8]
 8014822:	429a      	cmp	r2, r3
 8014824:	f200 839d 	bhi.w	8014f62 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014828:	7cbb      	ldrb	r3, [r7, #18]
 801482a:	b29b      	uxth	r3, r3
 801482c:	3b14      	subs	r3, #20
 801482e:	b29a      	uxth	r2, r3
 8014830:	4b81      	ldr	r3, [pc, #516]	; (8014a38 <tcp_input+0x294>)
 8014832:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014834:	4b81      	ldr	r3, [pc, #516]	; (8014a3c <tcp_input+0x298>)
 8014836:	2200      	movs	r2, #0
 8014838:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	895a      	ldrh	r2, [r3, #10]
 801483e:	7cbb      	ldrb	r3, [r7, #18]
 8014840:	b29b      	uxth	r3, r3
 8014842:	429a      	cmp	r2, r3
 8014844:	d309      	bcc.n	801485a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014846:	4b7c      	ldr	r3, [pc, #496]	; (8014a38 <tcp_input+0x294>)
 8014848:	881a      	ldrh	r2, [r3, #0]
 801484a:	4b7d      	ldr	r3, [pc, #500]	; (8014a40 <tcp_input+0x29c>)
 801484c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801484e:	7cbb      	ldrb	r3, [r7, #18]
 8014850:	4619      	mov	r1, r3
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7fd fe1a 	bl	801248c <pbuf_remove_header>
 8014858:	e04e      	b.n	80148f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d105      	bne.n	801486e <tcp_input+0xca>
 8014862:	4b70      	ldr	r3, [pc, #448]	; (8014a24 <tcp_input+0x280>)
 8014864:	22c2      	movs	r2, #194	; 0xc2
 8014866:	4977      	ldr	r1, [pc, #476]	; (8014a44 <tcp_input+0x2a0>)
 8014868:	4870      	ldr	r0, [pc, #448]	; (8014a2c <tcp_input+0x288>)
 801486a:	f007 fc5b 	bl	801c124 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801486e:	2114      	movs	r1, #20
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f7fd fe0b 	bl	801248c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	895a      	ldrh	r2, [r3, #10]
 801487a:	4b71      	ldr	r3, [pc, #452]	; (8014a40 <tcp_input+0x29c>)
 801487c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801487e:	4b6e      	ldr	r3, [pc, #440]	; (8014a38 <tcp_input+0x294>)
 8014880:	881a      	ldrh	r2, [r3, #0]
 8014882:	4b6f      	ldr	r3, [pc, #444]	; (8014a40 <tcp_input+0x29c>)
 8014884:	881b      	ldrh	r3, [r3, #0]
 8014886:	1ad3      	subs	r3, r2, r3
 8014888:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801488a:	4b6d      	ldr	r3, [pc, #436]	; (8014a40 <tcp_input+0x29c>)
 801488c:	881b      	ldrh	r3, [r3, #0]
 801488e:	4619      	mov	r1, r3
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f7fd fdfb 	bl	801248c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	895b      	ldrh	r3, [r3, #10]
 801489c:	8a3a      	ldrh	r2, [r7, #16]
 801489e:	429a      	cmp	r2, r3
 80148a0:	f200 8361 	bhi.w	8014f66 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	4a64      	ldr	r2, [pc, #400]	; (8014a3c <tcp_input+0x298>)
 80148ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	8a3a      	ldrh	r2, [r7, #16]
 80148b4:	4611      	mov	r1, r2
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7fd fde8 	bl	801248c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	891a      	ldrh	r2, [r3, #8]
 80148c0:	8a3b      	ldrh	r3, [r7, #16]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	b29a      	uxth	r2, r3
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	895b      	ldrh	r3, [r3, #10]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d005      	beq.n	80148de <tcp_input+0x13a>
 80148d2:	4b54      	ldr	r3, [pc, #336]	; (8014a24 <tcp_input+0x280>)
 80148d4:	22df      	movs	r2, #223	; 0xdf
 80148d6:	495c      	ldr	r1, [pc, #368]	; (8014a48 <tcp_input+0x2a4>)
 80148d8:	4854      	ldr	r0, [pc, #336]	; (8014a2c <tcp_input+0x288>)
 80148da:	f007 fc23 	bl	801c124 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	891a      	ldrh	r2, [r3, #8]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	891b      	ldrh	r3, [r3, #8]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d005      	beq.n	80148f8 <tcp_input+0x154>
 80148ec:	4b4d      	ldr	r3, [pc, #308]	; (8014a24 <tcp_input+0x280>)
 80148ee:	22e0      	movs	r2, #224	; 0xe0
 80148f0:	4956      	ldr	r1, [pc, #344]	; (8014a4c <tcp_input+0x2a8>)
 80148f2:	484e      	ldr	r0, [pc, #312]	; (8014a2c <tcp_input+0x288>)
 80148f4:	f007 fc16 	bl	801c124 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80148f8:	4b4d      	ldr	r3, [pc, #308]	; (8014a30 <tcp_input+0x28c>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	4a4b      	ldr	r2, [pc, #300]	; (8014a30 <tcp_input+0x28c>)
 8014902:	6814      	ldr	r4, [r2, #0]
 8014904:	4618      	mov	r0, r3
 8014906:	f7fc fa9b 	bl	8010e40 <lwip_htons>
 801490a:	4603      	mov	r3, r0
 801490c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801490e:	4b48      	ldr	r3, [pc, #288]	; (8014a30 <tcp_input+0x28c>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	885b      	ldrh	r3, [r3, #2]
 8014914:	b29b      	uxth	r3, r3
 8014916:	4a46      	ldr	r2, [pc, #280]	; (8014a30 <tcp_input+0x28c>)
 8014918:	6814      	ldr	r4, [r2, #0]
 801491a:	4618      	mov	r0, r3
 801491c:	f7fc fa90 	bl	8010e40 <lwip_htons>
 8014920:	4603      	mov	r3, r0
 8014922:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014924:	4b42      	ldr	r3, [pc, #264]	; (8014a30 <tcp_input+0x28c>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	4a41      	ldr	r2, [pc, #260]	; (8014a30 <tcp_input+0x28c>)
 801492c:	6814      	ldr	r4, [r2, #0]
 801492e:	4618      	mov	r0, r3
 8014930:	f7fc fa9b 	bl	8010e6a <lwip_htonl>
 8014934:	4603      	mov	r3, r0
 8014936:	6063      	str	r3, [r4, #4]
 8014938:	6863      	ldr	r3, [r4, #4]
 801493a:	4a45      	ldr	r2, [pc, #276]	; (8014a50 <tcp_input+0x2ac>)
 801493c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801493e:	4b3c      	ldr	r3, [pc, #240]	; (8014a30 <tcp_input+0x28c>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	689b      	ldr	r3, [r3, #8]
 8014944:	4a3a      	ldr	r2, [pc, #232]	; (8014a30 <tcp_input+0x28c>)
 8014946:	6814      	ldr	r4, [r2, #0]
 8014948:	4618      	mov	r0, r3
 801494a:	f7fc fa8e 	bl	8010e6a <lwip_htonl>
 801494e:	4603      	mov	r3, r0
 8014950:	60a3      	str	r3, [r4, #8]
 8014952:	68a3      	ldr	r3, [r4, #8]
 8014954:	4a3f      	ldr	r2, [pc, #252]	; (8014a54 <tcp_input+0x2b0>)
 8014956:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014958:	4b35      	ldr	r3, [pc, #212]	; (8014a30 <tcp_input+0x28c>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	89db      	ldrh	r3, [r3, #14]
 801495e:	b29b      	uxth	r3, r3
 8014960:	4a33      	ldr	r2, [pc, #204]	; (8014a30 <tcp_input+0x28c>)
 8014962:	6814      	ldr	r4, [r2, #0]
 8014964:	4618      	mov	r0, r3
 8014966:	f7fc fa6b 	bl	8010e40 <lwip_htons>
 801496a:	4603      	mov	r3, r0
 801496c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801496e:	4b30      	ldr	r3, [pc, #192]	; (8014a30 <tcp_input+0x28c>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	899b      	ldrh	r3, [r3, #12]
 8014974:	b29b      	uxth	r3, r3
 8014976:	4618      	mov	r0, r3
 8014978:	f7fc fa62 	bl	8010e40 <lwip_htons>
 801497c:	4603      	mov	r3, r0
 801497e:	b2db      	uxtb	r3, r3
 8014980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014984:	b2da      	uxtb	r2, r3
 8014986:	4b34      	ldr	r3, [pc, #208]	; (8014a58 <tcp_input+0x2b4>)
 8014988:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	891a      	ldrh	r2, [r3, #8]
 801498e:	4b33      	ldr	r3, [pc, #204]	; (8014a5c <tcp_input+0x2b8>)
 8014990:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014992:	4b31      	ldr	r3, [pc, #196]	; (8014a58 <tcp_input+0x2b4>)
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	f003 0303 	and.w	r3, r3, #3
 801499a:	2b00      	cmp	r3, #0
 801499c:	d00c      	beq.n	80149b8 <tcp_input+0x214>
    tcplen++;
 801499e:	4b2f      	ldr	r3, [pc, #188]	; (8014a5c <tcp_input+0x2b8>)
 80149a0:	881b      	ldrh	r3, [r3, #0]
 80149a2:	3301      	adds	r3, #1
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	4b2d      	ldr	r3, [pc, #180]	; (8014a5c <tcp_input+0x2b8>)
 80149a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	891a      	ldrh	r2, [r3, #8]
 80149ae:	4b2b      	ldr	r3, [pc, #172]	; (8014a5c <tcp_input+0x2b8>)
 80149b0:	881b      	ldrh	r3, [r3, #0]
 80149b2:	429a      	cmp	r2, r3
 80149b4:	f200 82d9 	bhi.w	8014f6a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80149b8:	2300      	movs	r3, #0
 80149ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80149bc:	4b28      	ldr	r3, [pc, #160]	; (8014a60 <tcp_input+0x2bc>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	61fb      	str	r3, [r7, #28]
 80149c2:	e09d      	b.n	8014b00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80149c4:	69fb      	ldr	r3, [r7, #28]
 80149c6:	7d1b      	ldrb	r3, [r3, #20]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d105      	bne.n	80149d8 <tcp_input+0x234>
 80149cc:	4b15      	ldr	r3, [pc, #84]	; (8014a24 <tcp_input+0x280>)
 80149ce:	22fb      	movs	r2, #251	; 0xfb
 80149d0:	4924      	ldr	r1, [pc, #144]	; (8014a64 <tcp_input+0x2c0>)
 80149d2:	4816      	ldr	r0, [pc, #88]	; (8014a2c <tcp_input+0x288>)
 80149d4:	f007 fba6 	bl	801c124 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80149d8:	69fb      	ldr	r3, [r7, #28]
 80149da:	7d1b      	ldrb	r3, [r3, #20]
 80149dc:	2b0a      	cmp	r3, #10
 80149de:	d105      	bne.n	80149ec <tcp_input+0x248>
 80149e0:	4b10      	ldr	r3, [pc, #64]	; (8014a24 <tcp_input+0x280>)
 80149e2:	22fc      	movs	r2, #252	; 0xfc
 80149e4:	4920      	ldr	r1, [pc, #128]	; (8014a68 <tcp_input+0x2c4>)
 80149e6:	4811      	ldr	r0, [pc, #68]	; (8014a2c <tcp_input+0x288>)
 80149e8:	f007 fb9c 	bl	801c124 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	7d1b      	ldrb	r3, [r3, #20]
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d105      	bne.n	8014a00 <tcp_input+0x25c>
 80149f4:	4b0b      	ldr	r3, [pc, #44]	; (8014a24 <tcp_input+0x280>)
 80149f6:	22fd      	movs	r2, #253	; 0xfd
 80149f8:	491c      	ldr	r1, [pc, #112]	; (8014a6c <tcp_input+0x2c8>)
 80149fa:	480c      	ldr	r0, [pc, #48]	; (8014a2c <tcp_input+0x288>)
 80149fc:	f007 fb92 	bl	801c124 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014a00:	69fb      	ldr	r3, [r7, #28]
 8014a02:	7a1b      	ldrb	r3, [r3, #8]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d033      	beq.n	8014a70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	7a1a      	ldrb	r2, [r3, #8]
 8014a0c:	4b09      	ldr	r3, [pc, #36]	; (8014a34 <tcp_input+0x290>)
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a14:	3301      	adds	r3, #1
 8014a16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d029      	beq.n	8014a70 <tcp_input+0x2cc>
      prev = pcb;
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	61bb      	str	r3, [r7, #24]
      continue;
 8014a20:	e06b      	b.n	8014afa <tcp_input+0x356>
 8014a22:	bf00      	nop
 8014a24:	0801fc90 	.word	0x0801fc90
 8014a28:	0801fcc4 	.word	0x0801fcc4
 8014a2c:	0801fcdc 	.word	0x0801fcdc
 8014a30:	200098d8 	.word	0x200098d8
 8014a34:	2000fad0 	.word	0x2000fad0
 8014a38:	200098dc 	.word	0x200098dc
 8014a3c:	200098e0 	.word	0x200098e0
 8014a40:	200098de 	.word	0x200098de
 8014a44:	0801fd04 	.word	0x0801fd04
 8014a48:	0801fd14 	.word	0x0801fd14
 8014a4c:	0801fd20 	.word	0x0801fd20
 8014a50:	200098e8 	.word	0x200098e8
 8014a54:	200098ec 	.word	0x200098ec
 8014a58:	200098f4 	.word	0x200098f4
 8014a5c:	200098f2 	.word	0x200098f2
 8014a60:	20014f64 	.word	0x20014f64
 8014a64:	0801fd40 	.word	0x0801fd40
 8014a68:	0801fd68 	.word	0x0801fd68
 8014a6c:	0801fd94 	.word	0x0801fd94
    }

    if (pcb->remote_port == tcphdr->src &&
 8014a70:	69fb      	ldr	r3, [r7, #28]
 8014a72:	8b1a      	ldrh	r2, [r3, #24]
 8014a74:	4b94      	ldr	r3, [pc, #592]	; (8014cc8 <tcp_input+0x524>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	881b      	ldrh	r3, [r3, #0]
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d13a      	bne.n	8014af6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	8ada      	ldrh	r2, [r3, #22]
 8014a84:	4b90      	ldr	r3, [pc, #576]	; (8014cc8 <tcp_input+0x524>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	885b      	ldrh	r3, [r3, #2]
 8014a8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d132      	bne.n	8014af6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	685a      	ldr	r2, [r3, #4]
 8014a94:	4b8d      	ldr	r3, [pc, #564]	; (8014ccc <tcp_input+0x528>)
 8014a96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d12c      	bne.n	8014af6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014a9c:	69fb      	ldr	r3, [r7, #28]
 8014a9e:	681a      	ldr	r2, [r3, #0]
 8014aa0:	4b8a      	ldr	r3, [pc, #552]	; (8014ccc <tcp_input+0x528>)
 8014aa2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d126      	bne.n	8014af6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	69fa      	ldr	r2, [r7, #28]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d106      	bne.n	8014ac0 <tcp_input+0x31c>
 8014ab2:	4b87      	ldr	r3, [pc, #540]	; (8014cd0 <tcp_input+0x52c>)
 8014ab4:	f240 120d 	movw	r2, #269	; 0x10d
 8014ab8:	4986      	ldr	r1, [pc, #536]	; (8014cd4 <tcp_input+0x530>)
 8014aba:	4887      	ldr	r0, [pc, #540]	; (8014cd8 <tcp_input+0x534>)
 8014abc:	f007 fb32 	bl	801c124 <iprintf>
      if (prev != NULL) {
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d00a      	beq.n	8014adc <tcp_input+0x338>
        prev->next = pcb->next;
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	68da      	ldr	r2, [r3, #12]
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014ace:	4b83      	ldr	r3, [pc, #524]	; (8014cdc <tcp_input+0x538>)
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014ad6:	4a81      	ldr	r2, [pc, #516]	; (8014cdc <tcp_input+0x538>)
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	69fa      	ldr	r2, [r7, #28]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d111      	bne.n	8014b0a <tcp_input+0x366>
 8014ae6:	4b7a      	ldr	r3, [pc, #488]	; (8014cd0 <tcp_input+0x52c>)
 8014ae8:	f240 1215 	movw	r2, #277	; 0x115
 8014aec:	497c      	ldr	r1, [pc, #496]	; (8014ce0 <tcp_input+0x53c>)
 8014aee:	487a      	ldr	r0, [pc, #488]	; (8014cd8 <tcp_input+0x534>)
 8014af0:	f007 fb18 	bl	801c124 <iprintf>
      break;
 8014af4:	e009      	b.n	8014b0a <tcp_input+0x366>
    }
    prev = pcb;
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014afa:	69fb      	ldr	r3, [r7, #28]
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	61fb      	str	r3, [r7, #28]
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f47f af5e 	bne.w	80149c4 <tcp_input+0x220>
 8014b08:	e000      	b.n	8014b0c <tcp_input+0x368>
      break;
 8014b0a:	bf00      	nop
  }

  if (pcb == NULL) {
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f040 8095 	bne.w	8014c3e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b14:	4b73      	ldr	r3, [pc, #460]	; (8014ce4 <tcp_input+0x540>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	61fb      	str	r3, [r7, #28]
 8014b1a:	e03f      	b.n	8014b9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	7d1b      	ldrb	r3, [r3, #20]
 8014b20:	2b0a      	cmp	r3, #10
 8014b22:	d006      	beq.n	8014b32 <tcp_input+0x38e>
 8014b24:	4b6a      	ldr	r3, [pc, #424]	; (8014cd0 <tcp_input+0x52c>)
 8014b26:	f240 121f 	movw	r2, #287	; 0x11f
 8014b2a:	496f      	ldr	r1, [pc, #444]	; (8014ce8 <tcp_input+0x544>)
 8014b2c:	486a      	ldr	r0, [pc, #424]	; (8014cd8 <tcp_input+0x534>)
 8014b2e:	f007 faf9 	bl	801c124 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	7a1b      	ldrb	r3, [r3, #8]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d009      	beq.n	8014b4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	7a1a      	ldrb	r2, [r3, #8]
 8014b3e:	4b63      	ldr	r3, [pc, #396]	; (8014ccc <tcp_input+0x528>)
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b46:	3301      	adds	r3, #1
 8014b48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d122      	bne.n	8014b94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	8b1a      	ldrh	r2, [r3, #24]
 8014b52:	4b5d      	ldr	r3, [pc, #372]	; (8014cc8 <tcp_input+0x524>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	881b      	ldrh	r3, [r3, #0]
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d11b      	bne.n	8014b96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014b5e:	69fb      	ldr	r3, [r7, #28]
 8014b60:	8ada      	ldrh	r2, [r3, #22]
 8014b62:	4b59      	ldr	r3, [pc, #356]	; (8014cc8 <tcp_input+0x524>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	885b      	ldrh	r3, [r3, #2]
 8014b68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d113      	bne.n	8014b96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	685a      	ldr	r2, [r3, #4]
 8014b72:	4b56      	ldr	r3, [pc, #344]	; (8014ccc <tcp_input+0x528>)
 8014b74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d10d      	bne.n	8014b96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014b7a:	69fb      	ldr	r3, [r7, #28]
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	4b53      	ldr	r3, [pc, #332]	; (8014ccc <tcp_input+0x528>)
 8014b80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d107      	bne.n	8014b96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014b86:	69f8      	ldr	r0, [r7, #28]
 8014b88:	f000 fb54 	bl	8015234 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f7fd fd03 	bl	8012598 <pbuf_free>
        return;
 8014b92:	e1f0      	b.n	8014f76 <tcp_input+0x7d2>
        continue;
 8014b94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	61fb      	str	r3, [r7, #28]
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d1bc      	bne.n	8014b1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014ba6:	4b51      	ldr	r3, [pc, #324]	; (8014cec <tcp_input+0x548>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	617b      	str	r3, [r7, #20]
 8014bac:	e02a      	b.n	8014c04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	7a1b      	ldrb	r3, [r3, #8]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00c      	beq.n	8014bd0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	7a1a      	ldrb	r2, [r3, #8]
 8014bba:	4b44      	ldr	r3, [pc, #272]	; (8014ccc <tcp_input+0x528>)
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d002      	beq.n	8014bd0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	61bb      	str	r3, [r7, #24]
        continue;
 8014bce:	e016      	b.n	8014bfe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	8ada      	ldrh	r2, [r3, #22]
 8014bd4:	4b3c      	ldr	r3, [pc, #240]	; (8014cc8 <tcp_input+0x524>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	885b      	ldrh	r3, [r3, #2]
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d10c      	bne.n	8014bfa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	4b39      	ldr	r3, [pc, #228]	; (8014ccc <tcp_input+0x528>)
 8014be6:	695b      	ldr	r3, [r3, #20]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d00f      	beq.n	8014c0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d00d      	beq.n	8014c0e <tcp_input+0x46a>
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d009      	beq.n	8014c0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	617b      	str	r3, [r7, #20]
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d1d1      	bne.n	8014bae <tcp_input+0x40a>
 8014c0a:	e000      	b.n	8014c0e <tcp_input+0x46a>
            break;
 8014c0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d014      	beq.n	8014c3e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00a      	beq.n	8014c30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	68da      	ldr	r2, [r3, #12]
 8014c1e:	69bb      	ldr	r3, [r7, #24]
 8014c20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014c22:	4b32      	ldr	r3, [pc, #200]	; (8014cec <tcp_input+0x548>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014c2a:	4a30      	ldr	r2, [pc, #192]	; (8014cec <tcp_input+0x548>)
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014c30:	6978      	ldr	r0, [r7, #20]
 8014c32:	f000 fa01 	bl	8015038 <tcp_listen_input>
      }
      pbuf_free(p);
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7fd fcae 	bl	8012598 <pbuf_free>
      return;
 8014c3c:	e19b      	b.n	8014f76 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	f000 8160 	beq.w	8014f06 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014c46:	4b2a      	ldr	r3, [pc, #168]	; (8014cf0 <tcp_input+0x54c>)
 8014c48:	2200      	movs	r2, #0
 8014c4a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	891a      	ldrh	r2, [r3, #8]
 8014c50:	4b27      	ldr	r3, [pc, #156]	; (8014cf0 <tcp_input+0x54c>)
 8014c52:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014c54:	4a26      	ldr	r2, [pc, #152]	; (8014cf0 <tcp_input+0x54c>)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014c5a:	4b1b      	ldr	r3, [pc, #108]	; (8014cc8 <tcp_input+0x524>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	4a24      	ldr	r2, [pc, #144]	; (8014cf0 <tcp_input+0x54c>)
 8014c60:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014c62:	4b24      	ldr	r3, [pc, #144]	; (8014cf4 <tcp_input+0x550>)
 8014c64:	2200      	movs	r2, #0
 8014c66:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014c68:	4b23      	ldr	r3, [pc, #140]	; (8014cf8 <tcp_input+0x554>)
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014c6e:	4b23      	ldr	r3, [pc, #140]	; (8014cfc <tcp_input+0x558>)
 8014c70:	2200      	movs	r2, #0
 8014c72:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014c74:	4b22      	ldr	r3, [pc, #136]	; (8014d00 <tcp_input+0x55c>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 0308 	and.w	r3, r3, #8
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d006      	beq.n	8014c8e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7b5b      	ldrb	r3, [r3, #13]
 8014c84:	f043 0301 	orr.w	r3, r3, #1
 8014c88:	b2da      	uxtb	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d038      	beq.n	8014d08 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014c96:	69f8      	ldr	r0, [r7, #28]
 8014c98:	f7ff f870 	bl	8013d7c <tcp_process_refused_data>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	f113 0f0d 	cmn.w	r3, #13
 8014ca2:	d007      	beq.n	8014cb4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d02d      	beq.n	8014d08 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014cac:	4b15      	ldr	r3, [pc, #84]	; (8014d04 <tcp_input+0x560>)
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d029      	beq.n	8014d08 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	f040 8104 	bne.w	8014ec6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014cbe:	69f8      	ldr	r0, [r7, #28]
 8014cc0:	f003 fe16 	bl	80188f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014cc4:	e0ff      	b.n	8014ec6 <tcp_input+0x722>
 8014cc6:	bf00      	nop
 8014cc8:	200098d8 	.word	0x200098d8
 8014ccc:	2000fad0 	.word	0x2000fad0
 8014cd0:	0801fc90 	.word	0x0801fc90
 8014cd4:	0801fdbc 	.word	0x0801fdbc
 8014cd8:	0801fcdc 	.word	0x0801fcdc
 8014cdc:	20014f64 	.word	0x20014f64
 8014ce0:	0801fde8 	.word	0x0801fde8
 8014ce4:	20014f74 	.word	0x20014f74
 8014ce8:	0801fe14 	.word	0x0801fe14
 8014cec:	20014f6c 	.word	0x20014f6c
 8014cf0:	200098c8 	.word	0x200098c8
 8014cf4:	200098f8 	.word	0x200098f8
 8014cf8:	200098f5 	.word	0x200098f5
 8014cfc:	200098f0 	.word	0x200098f0
 8014d00:	200098f4 	.word	0x200098f4
 8014d04:	200098f2 	.word	0x200098f2
      }
    }
    tcp_input_pcb = pcb;
 8014d08:	4a9c      	ldr	r2, [pc, #624]	; (8014f7c <tcp_input+0x7d8>)
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014d0e:	69f8      	ldr	r0, [r7, #28]
 8014d10:	f000 fb0a 	bl	8015328 <tcp_process>
 8014d14:	4603      	mov	r3, r0
 8014d16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014d18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d1c:	f113 0f0d 	cmn.w	r3, #13
 8014d20:	f000 80d3 	beq.w	8014eca <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8014d24:	4b96      	ldr	r3, [pc, #600]	; (8014f80 <tcp_input+0x7dc>)
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	f003 0308 	and.w	r3, r3, #8
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d015      	beq.n	8014d5c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014d30:	69fb      	ldr	r3, [r7, #28]
 8014d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d008      	beq.n	8014d4c <tcp_input+0x5a8>
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d40:	69fa      	ldr	r2, [r7, #28]
 8014d42:	6912      	ldr	r2, [r2, #16]
 8014d44:	f06f 010d 	mvn.w	r1, #13
 8014d48:	4610      	mov	r0, r2
 8014d4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014d4c:	69f9      	ldr	r1, [r7, #28]
 8014d4e:	488d      	ldr	r0, [pc, #564]	; (8014f84 <tcp_input+0x7e0>)
 8014d50:	f7ff fbb0 	bl	80144b4 <tcp_pcb_remove>
        tcp_free(pcb);
 8014d54:	69f8      	ldr	r0, [r7, #28]
 8014d56:	f7fd fecb 	bl	8012af0 <tcp_free>
 8014d5a:	e0c1      	b.n	8014ee0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014d60:	4b89      	ldr	r3, [pc, #548]	; (8014f88 <tcp_input+0x7e4>)
 8014d62:	881b      	ldrh	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d01d      	beq.n	8014da4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014d68:	4b87      	ldr	r3, [pc, #540]	; (8014f88 <tcp_input+0x7e4>)
 8014d6a:	881b      	ldrh	r3, [r3, #0]
 8014d6c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d00a      	beq.n	8014d8e <tcp_input+0x5ea>
 8014d78:	69fb      	ldr	r3, [r7, #28]
 8014d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d7e:	69fa      	ldr	r2, [r7, #28]
 8014d80:	6910      	ldr	r0, [r2, #16]
 8014d82:	89fa      	ldrh	r2, [r7, #14]
 8014d84:	69f9      	ldr	r1, [r7, #28]
 8014d86:	4798      	blx	r3
 8014d88:	4603      	mov	r3, r0
 8014d8a:	74fb      	strb	r3, [r7, #19]
 8014d8c:	e001      	b.n	8014d92 <tcp_input+0x5ee>
 8014d8e:	2300      	movs	r3, #0
 8014d90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014d92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d96:	f113 0f0d 	cmn.w	r3, #13
 8014d9a:	f000 8098 	beq.w	8014ece <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014d9e:	4b7a      	ldr	r3, [pc, #488]	; (8014f88 <tcp_input+0x7e4>)
 8014da0:	2200      	movs	r2, #0
 8014da2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014da4:	69f8      	ldr	r0, [r7, #28]
 8014da6:	f000 f907 	bl	8014fb8 <tcp_input_delayed_close>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f040 8090 	bne.w	8014ed2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014db2:	4b76      	ldr	r3, [pc, #472]	; (8014f8c <tcp_input+0x7e8>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d041      	beq.n	8014e3e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014dba:	69fb      	ldr	r3, [r7, #28]
 8014dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d006      	beq.n	8014dd0 <tcp_input+0x62c>
 8014dc2:	4b73      	ldr	r3, [pc, #460]	; (8014f90 <tcp_input+0x7ec>)
 8014dc4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014dc8:	4972      	ldr	r1, [pc, #456]	; (8014f94 <tcp_input+0x7f0>)
 8014dca:	4873      	ldr	r0, [pc, #460]	; (8014f98 <tcp_input+0x7f4>)
 8014dcc:	f007 f9aa 	bl	801c124 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	8b5b      	ldrh	r3, [r3, #26]
 8014dd4:	f003 0310 	and.w	r3, r3, #16
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d008      	beq.n	8014dee <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014ddc:	4b6b      	ldr	r3, [pc, #428]	; (8014f8c <tcp_input+0x7e8>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7fd fbd9 	bl	8012598 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014de6:	69f8      	ldr	r0, [r7, #28]
 8014de8:	f7fe f9c6 	bl	8013178 <tcp_abort>
            goto aborted;
 8014dec:	e078      	b.n	8014ee0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014dee:	69fb      	ldr	r3, [r7, #28]
 8014df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d00c      	beq.n	8014e12 <tcp_input+0x66e>
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	6918      	ldr	r0, [r3, #16]
 8014e02:	4b62      	ldr	r3, [pc, #392]	; (8014f8c <tcp_input+0x7e8>)
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	2300      	movs	r3, #0
 8014e08:	69f9      	ldr	r1, [r7, #28]
 8014e0a:	47a0      	blx	r4
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	74fb      	strb	r3, [r7, #19]
 8014e10:	e008      	b.n	8014e24 <tcp_input+0x680>
 8014e12:	4b5e      	ldr	r3, [pc, #376]	; (8014f8c <tcp_input+0x7e8>)
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	2300      	movs	r3, #0
 8014e18:	69f9      	ldr	r1, [r7, #28]
 8014e1a:	2000      	movs	r0, #0
 8014e1c:	f7ff f884 	bl	8013f28 <tcp_recv_null>
 8014e20:	4603      	mov	r3, r0
 8014e22:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014e24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e28:	f113 0f0d 	cmn.w	r3, #13
 8014e2c:	d053      	beq.n	8014ed6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014e2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d003      	beq.n	8014e3e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014e36:	4b55      	ldr	r3, [pc, #340]	; (8014f8c <tcp_input+0x7e8>)
 8014e38:	681a      	ldr	r2, [r3, #0]
 8014e3a:	69fb      	ldr	r3, [r7, #28]
 8014e3c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014e3e:	4b50      	ldr	r3, [pc, #320]	; (8014f80 <tcp_input+0x7dc>)
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	f003 0320 	and.w	r3, r3, #32
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d030      	beq.n	8014eac <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d009      	beq.n	8014e66 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014e52:	69fb      	ldr	r3, [r7, #28]
 8014e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e56:	7b5a      	ldrb	r2, [r3, #13]
 8014e58:	69fb      	ldr	r3, [r7, #28]
 8014e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e5c:	f042 0220 	orr.w	r2, r2, #32
 8014e60:	b2d2      	uxtb	r2, r2
 8014e62:	735a      	strb	r2, [r3, #13]
 8014e64:	e022      	b.n	8014eac <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014e66:	69fb      	ldr	r3, [r7, #28]
 8014e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e6a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8014e6e:	d005      	beq.n	8014e7c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8014e70:	69fb      	ldr	r3, [r7, #28]
 8014e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e74:	3301      	adds	r3, #1
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	69fb      	ldr	r3, [r7, #28]
 8014e7a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d00b      	beq.n	8014e9e <tcp_input+0x6fa>
 8014e86:	69fb      	ldr	r3, [r7, #28]
 8014e88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	6918      	ldr	r0, [r3, #16]
 8014e90:	2300      	movs	r3, #0
 8014e92:	2200      	movs	r2, #0
 8014e94:	69f9      	ldr	r1, [r7, #28]
 8014e96:	47a0      	blx	r4
 8014e98:	4603      	mov	r3, r0
 8014e9a:	74fb      	strb	r3, [r7, #19]
 8014e9c:	e001      	b.n	8014ea2 <tcp_input+0x6fe>
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014ea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ea6:	f113 0f0d 	cmn.w	r3, #13
 8014eaa:	d016      	beq.n	8014eda <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014eac:	4b33      	ldr	r3, [pc, #204]	; (8014f7c <tcp_input+0x7d8>)
 8014eae:	2200      	movs	r2, #0
 8014eb0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014eb2:	69f8      	ldr	r0, [r7, #28]
 8014eb4:	f000 f880 	bl	8014fb8 <tcp_input_delayed_close>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d10f      	bne.n	8014ede <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014ebe:	69f8      	ldr	r0, [r7, #28]
 8014ec0:	f002 ff10 	bl	8017ce4 <tcp_output>
 8014ec4:	e00c      	b.n	8014ee0 <tcp_input+0x73c>
        goto aborted;
 8014ec6:	bf00      	nop
 8014ec8:	e00a      	b.n	8014ee0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014eca:	bf00      	nop
 8014ecc:	e008      	b.n	8014ee0 <tcp_input+0x73c>
              goto aborted;
 8014ece:	bf00      	nop
 8014ed0:	e006      	b.n	8014ee0 <tcp_input+0x73c>
          goto aborted;
 8014ed2:	bf00      	nop
 8014ed4:	e004      	b.n	8014ee0 <tcp_input+0x73c>
            goto aborted;
 8014ed6:	bf00      	nop
 8014ed8:	e002      	b.n	8014ee0 <tcp_input+0x73c>
              goto aborted;
 8014eda:	bf00      	nop
 8014edc:	e000      	b.n	8014ee0 <tcp_input+0x73c>
          goto aborted;
 8014ede:	bf00      	nop
    tcp_input_pcb = NULL;
 8014ee0:	4b26      	ldr	r3, [pc, #152]	; (8014f7c <tcp_input+0x7d8>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014ee6:	4b29      	ldr	r3, [pc, #164]	; (8014f8c <tcp_input+0x7e8>)
 8014ee8:	2200      	movs	r2, #0
 8014eea:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014eec:	4b2b      	ldr	r3, [pc, #172]	; (8014f9c <tcp_input+0x7f8>)
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d03f      	beq.n	8014f74 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8014ef4:	4b29      	ldr	r3, [pc, #164]	; (8014f9c <tcp_input+0x7f8>)
 8014ef6:	685b      	ldr	r3, [r3, #4]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7fd fb4d 	bl	8012598 <pbuf_free>
      inseg.p = NULL;
 8014efe:	4b27      	ldr	r3, [pc, #156]	; (8014f9c <tcp_input+0x7f8>)
 8014f00:	2200      	movs	r2, #0
 8014f02:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014f04:	e036      	b.n	8014f74 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014f06:	4b26      	ldr	r3, [pc, #152]	; (8014fa0 <tcp_input+0x7fc>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	899b      	ldrh	r3, [r3, #12]
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7fb ff96 	bl	8010e40 <lwip_htons>
 8014f14:	4603      	mov	r3, r0
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	f003 0304 	and.w	r3, r3, #4
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d118      	bne.n	8014f52 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f20:	4b20      	ldr	r3, [pc, #128]	; (8014fa4 <tcp_input+0x800>)
 8014f22:	6819      	ldr	r1, [r3, #0]
 8014f24:	4b20      	ldr	r3, [pc, #128]	; (8014fa8 <tcp_input+0x804>)
 8014f26:	881b      	ldrh	r3, [r3, #0]
 8014f28:	461a      	mov	r2, r3
 8014f2a:	4b20      	ldr	r3, [pc, #128]	; (8014fac <tcp_input+0x808>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f30:	4b1b      	ldr	r3, [pc, #108]	; (8014fa0 <tcp_input+0x7fc>)
 8014f32:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f34:	885b      	ldrh	r3, [r3, #2]
 8014f36:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f38:	4a19      	ldr	r2, [pc, #100]	; (8014fa0 <tcp_input+0x7fc>)
 8014f3a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f3c:	8812      	ldrh	r2, [r2, #0]
 8014f3e:	b292      	uxth	r2, r2
 8014f40:	9202      	str	r2, [sp, #8]
 8014f42:	9301      	str	r3, [sp, #4]
 8014f44:	4b1a      	ldr	r3, [pc, #104]	; (8014fb0 <tcp_input+0x80c>)
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	4b1a      	ldr	r3, [pc, #104]	; (8014fb4 <tcp_input+0x810>)
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	f003 fc7d 	bl	801884c <tcp_rst>
    pbuf_free(p);
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f7fd fb20 	bl	8012598 <pbuf_free>
  return;
 8014f58:	e00c      	b.n	8014f74 <tcp_input+0x7d0>
    goto dropped;
 8014f5a:	bf00      	nop
 8014f5c:	e006      	b.n	8014f6c <tcp_input+0x7c8>
    goto dropped;
 8014f5e:	bf00      	nop
 8014f60:	e004      	b.n	8014f6c <tcp_input+0x7c8>
    goto dropped;
 8014f62:	bf00      	nop
 8014f64:	e002      	b.n	8014f6c <tcp_input+0x7c8>
      goto dropped;
 8014f66:	bf00      	nop
 8014f68:	e000      	b.n	8014f6c <tcp_input+0x7c8>
      goto dropped;
 8014f6a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f7fd fb13 	bl	8012598 <pbuf_free>
 8014f72:	e000      	b.n	8014f76 <tcp_input+0x7d2>
  return;
 8014f74:	bf00      	nop
}
 8014f76:	3724      	adds	r7, #36	; 0x24
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd90      	pop	{r4, r7, pc}
 8014f7c:	20014f78 	.word	0x20014f78
 8014f80:	200098f5 	.word	0x200098f5
 8014f84:	20014f64 	.word	0x20014f64
 8014f88:	200098f0 	.word	0x200098f0
 8014f8c:	200098f8 	.word	0x200098f8
 8014f90:	0801fc90 	.word	0x0801fc90
 8014f94:	0801fe44 	.word	0x0801fe44
 8014f98:	0801fcdc 	.word	0x0801fcdc
 8014f9c:	200098c8 	.word	0x200098c8
 8014fa0:	200098d8 	.word	0x200098d8
 8014fa4:	200098ec 	.word	0x200098ec
 8014fa8:	200098f2 	.word	0x200098f2
 8014fac:	200098e8 	.word	0x200098e8
 8014fb0:	2000fae0 	.word	0x2000fae0
 8014fb4:	2000fae4 	.word	0x2000fae4

08014fb8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d106      	bne.n	8014fd4 <tcp_input_delayed_close+0x1c>
 8014fc6:	4b17      	ldr	r3, [pc, #92]	; (8015024 <tcp_input_delayed_close+0x6c>)
 8014fc8:	f240 225a 	movw	r2, #602	; 0x25a
 8014fcc:	4916      	ldr	r1, [pc, #88]	; (8015028 <tcp_input_delayed_close+0x70>)
 8014fce:	4817      	ldr	r0, [pc, #92]	; (801502c <tcp_input_delayed_close+0x74>)
 8014fd0:	f007 f8a8 	bl	801c124 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014fd4:	4b16      	ldr	r3, [pc, #88]	; (8015030 <tcp_input_delayed_close+0x78>)
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	f003 0310 	and.w	r3, r3, #16
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d01c      	beq.n	801501a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	8b5b      	ldrh	r3, [r3, #26]
 8014fe4:	f003 0310 	and.w	r3, r3, #16
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d10d      	bne.n	8015008 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d008      	beq.n	8015008 <tcp_input_delayed_close+0x50>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ffc:	687a      	ldr	r2, [r7, #4]
 8014ffe:	6912      	ldr	r2, [r2, #16]
 8015000:	f06f 010e 	mvn.w	r1, #14
 8015004:	4610      	mov	r0, r2
 8015006:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015008:	6879      	ldr	r1, [r7, #4]
 801500a:	480a      	ldr	r0, [pc, #40]	; (8015034 <tcp_input_delayed_close+0x7c>)
 801500c:	f7ff fa52 	bl	80144b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7fd fd6d 	bl	8012af0 <tcp_free>
    return 1;
 8015016:	2301      	movs	r3, #1
 8015018:	e000      	b.n	801501c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801501a:	2300      	movs	r3, #0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	0801fc90 	.word	0x0801fc90
 8015028:	0801fe60 	.word	0x0801fe60
 801502c:	0801fcdc 	.word	0x0801fcdc
 8015030:	200098f5 	.word	0x200098f5
 8015034:	20014f64 	.word	0x20014f64

08015038 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015038:	b590      	push	{r4, r7, lr}
 801503a:	b08b      	sub	sp, #44	; 0x2c
 801503c:	af04      	add	r7, sp, #16
 801503e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015040:	4b6f      	ldr	r3, [pc, #444]	; (8015200 <tcp_listen_input+0x1c8>)
 8015042:	781b      	ldrb	r3, [r3, #0]
 8015044:	f003 0304 	and.w	r3, r3, #4
 8015048:	2b00      	cmp	r3, #0
 801504a:	f040 80d2 	bne.w	80151f2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d106      	bne.n	8015062 <tcp_listen_input+0x2a>
 8015054:	4b6b      	ldr	r3, [pc, #428]	; (8015204 <tcp_listen_input+0x1cc>)
 8015056:	f240 2281 	movw	r2, #641	; 0x281
 801505a:	496b      	ldr	r1, [pc, #428]	; (8015208 <tcp_listen_input+0x1d0>)
 801505c:	486b      	ldr	r0, [pc, #428]	; (801520c <tcp_listen_input+0x1d4>)
 801505e:	f007 f861 	bl	801c124 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015062:	4b67      	ldr	r3, [pc, #412]	; (8015200 <tcp_listen_input+0x1c8>)
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	f003 0310 	and.w	r3, r3, #16
 801506a:	2b00      	cmp	r3, #0
 801506c:	d019      	beq.n	80150a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801506e:	4b68      	ldr	r3, [pc, #416]	; (8015210 <tcp_listen_input+0x1d8>)
 8015070:	6819      	ldr	r1, [r3, #0]
 8015072:	4b68      	ldr	r3, [pc, #416]	; (8015214 <tcp_listen_input+0x1dc>)
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	461a      	mov	r2, r3
 8015078:	4b67      	ldr	r3, [pc, #412]	; (8015218 <tcp_listen_input+0x1e0>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801507e:	4b67      	ldr	r3, [pc, #412]	; (801521c <tcp_listen_input+0x1e4>)
 8015080:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015082:	885b      	ldrh	r3, [r3, #2]
 8015084:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015086:	4a65      	ldr	r2, [pc, #404]	; (801521c <tcp_listen_input+0x1e4>)
 8015088:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801508a:	8812      	ldrh	r2, [r2, #0]
 801508c:	b292      	uxth	r2, r2
 801508e:	9202      	str	r2, [sp, #8]
 8015090:	9301      	str	r3, [sp, #4]
 8015092:	4b63      	ldr	r3, [pc, #396]	; (8015220 <tcp_listen_input+0x1e8>)
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	4b63      	ldr	r3, [pc, #396]	; (8015224 <tcp_listen_input+0x1ec>)
 8015098:	4602      	mov	r2, r0
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f003 fbd6 	bl	801884c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80150a0:	e0a9      	b.n	80151f6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80150a2:	4b57      	ldr	r3, [pc, #348]	; (8015200 <tcp_listen_input+0x1c8>)
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	f003 0302 	and.w	r3, r3, #2
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	f000 80a3 	beq.w	80151f6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	7d5b      	ldrb	r3, [r3, #21]
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7ff f85b 	bl	8014170 <tcp_alloc>
 80150ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d111      	bne.n	80150e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	699b      	ldr	r3, [r3, #24]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d00a      	beq.n	80150e0 <tcp_listen_input+0xa8>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	699b      	ldr	r3, [r3, #24]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	6910      	ldr	r0, [r2, #16]
 80150d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150d6:	2100      	movs	r1, #0
 80150d8:	4798      	blx	r3
 80150da:	4603      	mov	r3, r0
 80150dc:	73bb      	strb	r3, [r7, #14]
      return;
 80150de:	e08b      	b.n	80151f8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80150e0:	23f0      	movs	r3, #240	; 0xf0
 80150e2:	73bb      	strb	r3, [r7, #14]
      return;
 80150e4:	e088      	b.n	80151f8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80150e6:	4b50      	ldr	r3, [pc, #320]	; (8015228 <tcp_listen_input+0x1f0>)
 80150e8:	695a      	ldr	r2, [r3, #20]
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80150ee:	4b4e      	ldr	r3, [pc, #312]	; (8015228 <tcp_listen_input+0x1f0>)
 80150f0:	691a      	ldr	r2, [r3, #16]
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	8ada      	ldrh	r2, [r3, #22]
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80150fe:	4b47      	ldr	r3, [pc, #284]	; (801521c <tcp_listen_input+0x1e4>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	b29a      	uxth	r2, r3
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2203      	movs	r2, #3
 801510e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015110:	4b41      	ldr	r3, [pc, #260]	; (8015218 <tcp_listen_input+0x1e0>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015122:	6978      	ldr	r0, [r7, #20]
 8015124:	f7ff fa5a 	bl	80145dc <tcp_next_iss>
 8015128:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	693a      	ldr	r2, [r7, #16]
 801512e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	693a      	ldr	r2, [r7, #16]
 8015134:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	693a      	ldr	r2, [r7, #16]
 801513a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	693a      	ldr	r2, [r7, #16]
 8015140:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015142:	4b35      	ldr	r3, [pc, #212]	; (8015218 <tcp_listen_input+0x1e0>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	1e5a      	subs	r2, r3, #1
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	691a      	ldr	r2, [r3, #16]
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	7a5b      	ldrb	r3, [r3, #9]
 801515e:	f003 030c 	and.w	r3, r3, #12
 8015162:	b2da      	uxtb	r2, r3
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	7a1a      	ldrb	r2, [r3, #8]
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015170:	4b2e      	ldr	r3, [pc, #184]	; (801522c <tcp_listen_input+0x1f4>)
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	60da      	str	r2, [r3, #12]
 8015178:	4a2c      	ldr	r2, [pc, #176]	; (801522c <tcp_listen_input+0x1f4>)
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	6013      	str	r3, [r2, #0]
 801517e:	f003 fd27 	bl	8018bd0 <tcp_timer_needed>
 8015182:	4b2b      	ldr	r3, [pc, #172]	; (8015230 <tcp_listen_input+0x1f8>)
 8015184:	2201      	movs	r2, #1
 8015186:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015188:	6978      	ldr	r0, [r7, #20]
 801518a:	f001 fd8d 	bl	8016ca8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801518e:	4b23      	ldr	r3, [pc, #140]	; (801521c <tcp_listen_input+0x1e4>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	89db      	ldrh	r3, [r3, #14]
 8015194:	b29a      	uxth	r2, r3
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	3304      	adds	r3, #4
 80151b0:	4618      	mov	r0, r3
 80151b2:	f005 fa61 	bl	801a678 <ip4_route>
 80151b6:	4601      	mov	r1, r0
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	3304      	adds	r3, #4
 80151bc:	461a      	mov	r2, r3
 80151be:	4620      	mov	r0, r4
 80151c0:	f7ff fa32 	bl	8014628 <tcp_eff_send_mss_netif>
 80151c4:	4603      	mov	r3, r0
 80151c6:	461a      	mov	r2, r3
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80151cc:	2112      	movs	r1, #18
 80151ce:	6978      	ldr	r0, [r7, #20]
 80151d0:	f002 fc9a 	bl	8017b08 <tcp_enqueue_flags>
 80151d4:	4603      	mov	r3, r0
 80151d6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80151d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d004      	beq.n	80151ea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80151e0:	2100      	movs	r1, #0
 80151e2:	6978      	ldr	r0, [r7, #20]
 80151e4:	f7fd ff0a 	bl	8012ffc <tcp_abandon>
      return;
 80151e8:	e006      	b.n	80151f8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80151ea:	6978      	ldr	r0, [r7, #20]
 80151ec:	f002 fd7a 	bl	8017ce4 <tcp_output>
  return;
 80151f0:	e001      	b.n	80151f6 <tcp_listen_input+0x1be>
    return;
 80151f2:	bf00      	nop
 80151f4:	e000      	b.n	80151f8 <tcp_listen_input+0x1c0>
  return;
 80151f6:	bf00      	nop
}
 80151f8:	371c      	adds	r7, #28
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd90      	pop	{r4, r7, pc}
 80151fe:	bf00      	nop
 8015200:	200098f4 	.word	0x200098f4
 8015204:	0801fc90 	.word	0x0801fc90
 8015208:	0801fe88 	.word	0x0801fe88
 801520c:	0801fcdc 	.word	0x0801fcdc
 8015210:	200098ec 	.word	0x200098ec
 8015214:	200098f2 	.word	0x200098f2
 8015218:	200098e8 	.word	0x200098e8
 801521c:	200098d8 	.word	0x200098d8
 8015220:	2000fae0 	.word	0x2000fae0
 8015224:	2000fae4 	.word	0x2000fae4
 8015228:	2000fad0 	.word	0x2000fad0
 801522c:	20014f64 	.word	0x20014f64
 8015230:	20014f60 	.word	0x20014f60

08015234 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b086      	sub	sp, #24
 8015238:	af04      	add	r7, sp, #16
 801523a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801523c:	4b2f      	ldr	r3, [pc, #188]	; (80152fc <tcp_timewait_input+0xc8>)
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	f003 0304 	and.w	r3, r3, #4
 8015244:	2b00      	cmp	r3, #0
 8015246:	d153      	bne.n	80152f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d106      	bne.n	801525c <tcp_timewait_input+0x28>
 801524e:	4b2c      	ldr	r3, [pc, #176]	; (8015300 <tcp_timewait_input+0xcc>)
 8015250:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015254:	492b      	ldr	r1, [pc, #172]	; (8015304 <tcp_timewait_input+0xd0>)
 8015256:	482c      	ldr	r0, [pc, #176]	; (8015308 <tcp_timewait_input+0xd4>)
 8015258:	f006 ff64 	bl	801c124 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801525c:	4b27      	ldr	r3, [pc, #156]	; (80152fc <tcp_timewait_input+0xc8>)
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	f003 0302 	and.w	r3, r3, #2
 8015264:	2b00      	cmp	r3, #0
 8015266:	d02a      	beq.n	80152be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015268:	4b28      	ldr	r3, [pc, #160]	; (801530c <tcp_timewait_input+0xd8>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	2b00      	cmp	r3, #0
 8015274:	db2d      	blt.n	80152d2 <tcp_timewait_input+0x9e>
 8015276:	4b25      	ldr	r3, [pc, #148]	; (801530c <tcp_timewait_input+0xd8>)
 8015278:	681a      	ldr	r2, [r3, #0]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527e:	6879      	ldr	r1, [r7, #4]
 8015280:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015282:	440b      	add	r3, r1
 8015284:	1ad3      	subs	r3, r2, r3
 8015286:	2b00      	cmp	r3, #0
 8015288:	dc23      	bgt.n	80152d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801528a:	4b21      	ldr	r3, [pc, #132]	; (8015310 <tcp_timewait_input+0xdc>)
 801528c:	6819      	ldr	r1, [r3, #0]
 801528e:	4b21      	ldr	r3, [pc, #132]	; (8015314 <tcp_timewait_input+0xe0>)
 8015290:	881b      	ldrh	r3, [r3, #0]
 8015292:	461a      	mov	r2, r3
 8015294:	4b1d      	ldr	r3, [pc, #116]	; (801530c <tcp_timewait_input+0xd8>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801529a:	4b1f      	ldr	r3, [pc, #124]	; (8015318 <tcp_timewait_input+0xe4>)
 801529c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801529e:	885b      	ldrh	r3, [r3, #2]
 80152a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80152a2:	4a1d      	ldr	r2, [pc, #116]	; (8015318 <tcp_timewait_input+0xe4>)
 80152a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80152a6:	8812      	ldrh	r2, [r2, #0]
 80152a8:	b292      	uxth	r2, r2
 80152aa:	9202      	str	r2, [sp, #8]
 80152ac:	9301      	str	r3, [sp, #4]
 80152ae:	4b1b      	ldr	r3, [pc, #108]	; (801531c <tcp_timewait_input+0xe8>)
 80152b0:	9300      	str	r3, [sp, #0]
 80152b2:	4b1b      	ldr	r3, [pc, #108]	; (8015320 <tcp_timewait_input+0xec>)
 80152b4:	4602      	mov	r2, r0
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f003 fac8 	bl	801884c <tcp_rst>
      return;
 80152bc:	e01b      	b.n	80152f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80152be:	4b0f      	ldr	r3, [pc, #60]	; (80152fc <tcp_timewait_input+0xc8>)
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	f003 0301 	and.w	r3, r3, #1
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d003      	beq.n	80152d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80152ca:	4b16      	ldr	r3, [pc, #88]	; (8015324 <tcp_timewait_input+0xf0>)
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80152d2:	4b10      	ldr	r3, [pc, #64]	; (8015314 <tcp_timewait_input+0xe0>)
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d00c      	beq.n	80152f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	8b5b      	ldrh	r3, [r3, #26]
 80152de:	f043 0302 	orr.w	r3, r3, #2
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f002 fcfb 	bl	8017ce4 <tcp_output>
  }
  return;
 80152ee:	e001      	b.n	80152f4 <tcp_timewait_input+0xc0>
    return;
 80152f0:	bf00      	nop
 80152f2:	e000      	b.n	80152f6 <tcp_timewait_input+0xc2>
  return;
 80152f4:	bf00      	nop
}
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	200098f4 	.word	0x200098f4
 8015300:	0801fc90 	.word	0x0801fc90
 8015304:	0801fea8 	.word	0x0801fea8
 8015308:	0801fcdc 	.word	0x0801fcdc
 801530c:	200098e8 	.word	0x200098e8
 8015310:	200098ec 	.word	0x200098ec
 8015314:	200098f2 	.word	0x200098f2
 8015318:	200098d8 	.word	0x200098d8
 801531c:	2000fae0 	.word	0x2000fae0
 8015320:	2000fae4 	.word	0x2000fae4
 8015324:	20014f68 	.word	0x20014f68

08015328 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b08d      	sub	sp, #52	; 0x34
 801532c:	af04      	add	r7, sp, #16
 801532e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015330:	2300      	movs	r3, #0
 8015332:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015334:	2300      	movs	r3, #0
 8015336:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d106      	bne.n	801534c <tcp_process+0x24>
 801533e:	4ba5      	ldr	r3, [pc, #660]	; (80155d4 <tcp_process+0x2ac>)
 8015340:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015344:	49a4      	ldr	r1, [pc, #656]	; (80155d8 <tcp_process+0x2b0>)
 8015346:	48a5      	ldr	r0, [pc, #660]	; (80155dc <tcp_process+0x2b4>)
 8015348:	f006 feec 	bl	801c124 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801534c:	4ba4      	ldr	r3, [pc, #656]	; (80155e0 <tcp_process+0x2b8>)
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	f003 0304 	and.w	r3, r3, #4
 8015354:	2b00      	cmp	r3, #0
 8015356:	d04e      	beq.n	80153f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	7d1b      	ldrb	r3, [r3, #20]
 801535c:	2b02      	cmp	r3, #2
 801535e:	d108      	bne.n	8015372 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015364:	4b9f      	ldr	r3, [pc, #636]	; (80155e4 <tcp_process+0x2bc>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	429a      	cmp	r2, r3
 801536a:	d123      	bne.n	80153b4 <tcp_process+0x8c>
        acceptable = 1;
 801536c:	2301      	movs	r3, #1
 801536e:	76fb      	strb	r3, [r7, #27]
 8015370:	e020      	b.n	80153b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015376:	4b9c      	ldr	r3, [pc, #624]	; (80155e8 <tcp_process+0x2c0>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	429a      	cmp	r2, r3
 801537c:	d102      	bne.n	8015384 <tcp_process+0x5c>
        acceptable = 1;
 801537e:	2301      	movs	r3, #1
 8015380:	76fb      	strb	r3, [r7, #27]
 8015382:	e017      	b.n	80153b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015384:	4b98      	ldr	r3, [pc, #608]	; (80155e8 <tcp_process+0x2c0>)
 8015386:	681a      	ldr	r2, [r3, #0]
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801538c:	1ad3      	subs	r3, r2, r3
 801538e:	2b00      	cmp	r3, #0
 8015390:	db10      	blt.n	80153b4 <tcp_process+0x8c>
 8015392:	4b95      	ldr	r3, [pc, #596]	; (80155e8 <tcp_process+0x2c0>)
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801539a:	6879      	ldr	r1, [r7, #4]
 801539c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801539e:	440b      	add	r3, r1
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	dc06      	bgt.n	80153b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	8b5b      	ldrh	r3, [r3, #26]
 80153aa:	f043 0302 	orr.w	r3, r3, #2
 80153ae:	b29a      	uxth	r2, r3
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80153b4:	7efb      	ldrb	r3, [r7, #27]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d01b      	beq.n	80153f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	7d1b      	ldrb	r3, [r3, #20]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d106      	bne.n	80153d0 <tcp_process+0xa8>
 80153c2:	4b84      	ldr	r3, [pc, #528]	; (80155d4 <tcp_process+0x2ac>)
 80153c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80153c8:	4988      	ldr	r1, [pc, #544]	; (80155ec <tcp_process+0x2c4>)
 80153ca:	4884      	ldr	r0, [pc, #528]	; (80155dc <tcp_process+0x2b4>)
 80153cc:	f006 feaa 	bl	801c124 <iprintf>
      recv_flags |= TF_RESET;
 80153d0:	4b87      	ldr	r3, [pc, #540]	; (80155f0 <tcp_process+0x2c8>)
 80153d2:	781b      	ldrb	r3, [r3, #0]
 80153d4:	f043 0308 	orr.w	r3, r3, #8
 80153d8:	b2da      	uxtb	r2, r3
 80153da:	4b85      	ldr	r3, [pc, #532]	; (80155f0 <tcp_process+0x2c8>)
 80153dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	8b5b      	ldrh	r3, [r3, #26]
 80153e2:	f023 0301 	bic.w	r3, r3, #1
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80153ec:	f06f 030d 	mvn.w	r3, #13
 80153f0:	e37a      	b.n	8015ae8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80153f2:	2300      	movs	r3, #0
 80153f4:	e378      	b.n	8015ae8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80153f6:	4b7a      	ldr	r3, [pc, #488]	; (80155e0 <tcp_process+0x2b8>)
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	f003 0302 	and.w	r3, r3, #2
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d010      	beq.n	8015424 <tcp_process+0xfc>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	7d1b      	ldrb	r3, [r3, #20]
 8015406:	2b02      	cmp	r3, #2
 8015408:	d00c      	beq.n	8015424 <tcp_process+0xfc>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	7d1b      	ldrb	r3, [r3, #20]
 801540e:	2b03      	cmp	r3, #3
 8015410:	d008      	beq.n	8015424 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	8b5b      	ldrh	r3, [r3, #26]
 8015416:	f043 0302 	orr.w	r3, r3, #2
 801541a:	b29a      	uxth	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015420:	2300      	movs	r3, #0
 8015422:	e361      	b.n	8015ae8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	8b5b      	ldrh	r3, [r3, #26]
 8015428:	f003 0310 	and.w	r3, r3, #16
 801542c:	2b00      	cmp	r3, #0
 801542e:	d103      	bne.n	8015438 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015430:	4b70      	ldr	r3, [pc, #448]	; (80155f4 <tcp_process+0x2cc>)
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2200      	movs	r2, #0
 8015444:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f001 fc2d 	bl	8016ca8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	7d1b      	ldrb	r3, [r3, #20]
 8015452:	3b02      	subs	r3, #2
 8015454:	2b07      	cmp	r3, #7
 8015456:	f200 8337 	bhi.w	8015ac8 <tcp_process+0x7a0>
 801545a:	a201      	add	r2, pc, #4	; (adr r2, 8015460 <tcp_process+0x138>)
 801545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015460:	08015481 	.word	0x08015481
 8015464:	080156b1 	.word	0x080156b1
 8015468:	08015829 	.word	0x08015829
 801546c:	08015853 	.word	0x08015853
 8015470:	08015977 	.word	0x08015977
 8015474:	08015829 	.word	0x08015829
 8015478:	08015a03 	.word	0x08015a03
 801547c:	08015a93 	.word	0x08015a93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015480:	4b57      	ldr	r3, [pc, #348]	; (80155e0 <tcp_process+0x2b8>)
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	f003 0310 	and.w	r3, r3, #16
 8015488:	2b00      	cmp	r3, #0
 801548a:	f000 80e4 	beq.w	8015656 <tcp_process+0x32e>
 801548e:	4b54      	ldr	r3, [pc, #336]	; (80155e0 <tcp_process+0x2b8>)
 8015490:	781b      	ldrb	r3, [r3, #0]
 8015492:	f003 0302 	and.w	r3, r3, #2
 8015496:	2b00      	cmp	r3, #0
 8015498:	f000 80dd 	beq.w	8015656 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154a0:	1c5a      	adds	r2, r3, #1
 80154a2:	4b50      	ldr	r3, [pc, #320]	; (80155e4 <tcp_process+0x2bc>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	f040 80d5 	bne.w	8015656 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80154ac:	4b4e      	ldr	r3, [pc, #312]	; (80155e8 <tcp_process+0x2c0>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	1c5a      	adds	r2, r3, #1
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80154be:	4b49      	ldr	r3, [pc, #292]	; (80155e4 <tcp_process+0x2bc>)
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80154c6:	4b4c      	ldr	r3, [pc, #304]	; (80155f8 <tcp_process+0x2d0>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	89db      	ldrh	r3, [r3, #14]
 80154cc:	b29a      	uxth	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80154e0:	4b41      	ldr	r3, [pc, #260]	; (80155e8 <tcp_process+0x2c0>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	1e5a      	subs	r2, r3, #1
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2204      	movs	r2, #4
 80154ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	3304      	adds	r3, #4
 80154f8:	4618      	mov	r0, r3
 80154fa:	f005 f8bd 	bl	801a678 <ip4_route>
 80154fe:	4601      	mov	r1, r0
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	3304      	adds	r3, #4
 8015504:	461a      	mov	r2, r3
 8015506:	4620      	mov	r0, r4
 8015508:	f7ff f88e 	bl	8014628 <tcp_eff_send_mss_netif>
 801550c:	4603      	mov	r3, r0
 801550e:	461a      	mov	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015518:	009a      	lsls	r2, r3, #2
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	f241 111c 	movw	r1, #4380	; 0x111c
 8015524:	428b      	cmp	r3, r1
 8015526:	bf38      	it	cc
 8015528:	460b      	movcc	r3, r1
 801552a:	429a      	cmp	r2, r3
 801552c:	d204      	bcs.n	8015538 <tcp_process+0x210>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	b29b      	uxth	r3, r3
 8015536:	e00d      	b.n	8015554 <tcp_process+0x22c>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801553c:	005b      	lsls	r3, r3, #1
 801553e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015542:	4293      	cmp	r3, r2
 8015544:	d904      	bls.n	8015550 <tcp_process+0x228>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801554a:	005b      	lsls	r3, r3, #1
 801554c:	b29b      	uxth	r3, r3
 801554e:	e001      	b.n	8015554 <tcp_process+0x22c>
 8015550:	f241 131c 	movw	r3, #4380	; 0x111c
 8015554:	687a      	ldr	r2, [r7, #4]
 8015556:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015560:	2b00      	cmp	r3, #0
 8015562:	d106      	bne.n	8015572 <tcp_process+0x24a>
 8015564:	4b1b      	ldr	r3, [pc, #108]	; (80155d4 <tcp_process+0x2ac>)
 8015566:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801556a:	4924      	ldr	r1, [pc, #144]	; (80155fc <tcp_process+0x2d4>)
 801556c:	481b      	ldr	r0, [pc, #108]	; (80155dc <tcp_process+0x2b4>)
 801556e:	f006 fdd9 	bl	801c124 <iprintf>
        --pcb->snd_queuelen;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015578:	3b01      	subs	r3, #1
 801557a:	b29a      	uxth	r2, r3
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015586:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d111      	bne.n	80155b2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015592:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d106      	bne.n	80155a8 <tcp_process+0x280>
 801559a:	4b0e      	ldr	r3, [pc, #56]	; (80155d4 <tcp_process+0x2ac>)
 801559c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80155a0:	4917      	ldr	r1, [pc, #92]	; (8015600 <tcp_process+0x2d8>)
 80155a2:	480e      	ldr	r0, [pc, #56]	; (80155dc <tcp_process+0x2b4>)
 80155a4:	f006 fdbe 	bl	801c124 <iprintf>
          pcb->unsent = rseg->next;
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80155b0:	e003      	b.n	80155ba <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80155b2:	69fb      	ldr	r3, [r7, #28]
 80155b4:	681a      	ldr	r2, [r3, #0]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80155ba:	69f8      	ldr	r0, [r7, #28]
 80155bc:	f7fe fc6f 	bl	8013e9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d11d      	bne.n	8015604 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155ce:	861a      	strh	r2, [r3, #48]	; 0x30
 80155d0:	e01f      	b.n	8015612 <tcp_process+0x2ea>
 80155d2:	bf00      	nop
 80155d4:	0801fc90 	.word	0x0801fc90
 80155d8:	0801fec8 	.word	0x0801fec8
 80155dc:	0801fcdc 	.word	0x0801fcdc
 80155e0:	200098f4 	.word	0x200098f4
 80155e4:	200098ec 	.word	0x200098ec
 80155e8:	200098e8 	.word	0x200098e8
 80155ec:	0801fee4 	.word	0x0801fee4
 80155f0:	200098f5 	.word	0x200098f5
 80155f4:	20014f68 	.word	0x20014f68
 80155f8:	200098d8 	.word	0x200098d8
 80155fc:	0801ff04 	.word	0x0801ff04
 8015600:	0801ff1c 	.word	0x0801ff1c
        } else {
          pcb->rtime = 0;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2200      	movs	r2, #0
 8015608:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2200      	movs	r2, #0
 801560e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015618:	2b00      	cmp	r3, #0
 801561a:	d00a      	beq.n	8015632 <tcp_process+0x30a>
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015622:	687a      	ldr	r2, [r7, #4]
 8015624:	6910      	ldr	r0, [r2, #16]
 8015626:	2200      	movs	r2, #0
 8015628:	6879      	ldr	r1, [r7, #4]
 801562a:	4798      	blx	r3
 801562c:	4603      	mov	r3, r0
 801562e:	76bb      	strb	r3, [r7, #26]
 8015630:	e001      	b.n	8015636 <tcp_process+0x30e>
 8015632:	2300      	movs	r3, #0
 8015634:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015636:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801563a:	f113 0f0d 	cmn.w	r3, #13
 801563e:	d102      	bne.n	8015646 <tcp_process+0x31e>
          return ERR_ABRT;
 8015640:	f06f 030c 	mvn.w	r3, #12
 8015644:	e250      	b.n	8015ae8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	8b5b      	ldrh	r3, [r3, #26]
 801564a:	f043 0302 	orr.w	r3, r3, #2
 801564e:	b29a      	uxth	r2, r3
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015654:	e23a      	b.n	8015acc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015656:	4b9d      	ldr	r3, [pc, #628]	; (80158cc <tcp_process+0x5a4>)
 8015658:	781b      	ldrb	r3, [r3, #0]
 801565a:	f003 0310 	and.w	r3, r3, #16
 801565e:	2b00      	cmp	r3, #0
 8015660:	f000 8234 	beq.w	8015acc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015664:	4b9a      	ldr	r3, [pc, #616]	; (80158d0 <tcp_process+0x5a8>)
 8015666:	6819      	ldr	r1, [r3, #0]
 8015668:	4b9a      	ldr	r3, [pc, #616]	; (80158d4 <tcp_process+0x5ac>)
 801566a:	881b      	ldrh	r3, [r3, #0]
 801566c:	461a      	mov	r2, r3
 801566e:	4b9a      	ldr	r3, [pc, #616]	; (80158d8 <tcp_process+0x5b0>)
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015674:	4b99      	ldr	r3, [pc, #612]	; (80158dc <tcp_process+0x5b4>)
 8015676:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015678:	885b      	ldrh	r3, [r3, #2]
 801567a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801567c:	4a97      	ldr	r2, [pc, #604]	; (80158dc <tcp_process+0x5b4>)
 801567e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015680:	8812      	ldrh	r2, [r2, #0]
 8015682:	b292      	uxth	r2, r2
 8015684:	9202      	str	r2, [sp, #8]
 8015686:	9301      	str	r3, [sp, #4]
 8015688:	4b95      	ldr	r3, [pc, #596]	; (80158e0 <tcp_process+0x5b8>)
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	4b95      	ldr	r3, [pc, #596]	; (80158e4 <tcp_process+0x5bc>)
 801568e:	4602      	mov	r2, r0
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f003 f8db 	bl	801884c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801569c:	2b05      	cmp	r3, #5
 801569e:	f200 8215 	bhi.w	8015acc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f002 fea5 	bl	80183f8 <tcp_rexmit_rto>
      break;
 80156ae:	e20d      	b.n	8015acc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80156b0:	4b86      	ldr	r3, [pc, #536]	; (80158cc <tcp_process+0x5a4>)
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	f003 0310 	and.w	r3, r3, #16
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f000 80a1 	beq.w	8015800 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80156be:	4b84      	ldr	r3, [pc, #528]	; (80158d0 <tcp_process+0x5a8>)
 80156c0:	681a      	ldr	r2, [r3, #0]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	3b01      	subs	r3, #1
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	db7e      	blt.n	80157cc <tcp_process+0x4a4>
 80156ce:	4b80      	ldr	r3, [pc, #512]	; (80158d0 <tcp_process+0x5a8>)
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	2b00      	cmp	r3, #0
 80156da:	dc77      	bgt.n	80157cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2204      	movs	r2, #4
 80156e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d102      	bne.n	80156f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80156ea:	23fa      	movs	r3, #250	; 0xfa
 80156ec:	76bb      	strb	r3, [r7, #26]
 80156ee:	e01d      	b.n	801572c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156f4:	699b      	ldr	r3, [r3, #24]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d106      	bne.n	8015708 <tcp_process+0x3e0>
 80156fa:	4b7b      	ldr	r3, [pc, #492]	; (80158e8 <tcp_process+0x5c0>)
 80156fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015700:	497a      	ldr	r1, [pc, #488]	; (80158ec <tcp_process+0x5c4>)
 8015702:	487b      	ldr	r0, [pc, #492]	; (80158f0 <tcp_process+0x5c8>)
 8015704:	f006 fd0e 	bl	801c124 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801570c:	699b      	ldr	r3, [r3, #24]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00a      	beq.n	8015728 <tcp_process+0x400>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015716:	699b      	ldr	r3, [r3, #24]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	6910      	ldr	r0, [r2, #16]
 801571c:	2200      	movs	r2, #0
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	4798      	blx	r3
 8015722:	4603      	mov	r3, r0
 8015724:	76bb      	strb	r3, [r7, #26]
 8015726:	e001      	b.n	801572c <tcp_process+0x404>
 8015728:	23f0      	movs	r3, #240	; 0xf0
 801572a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801572c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d00a      	beq.n	801574a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015734:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015738:	f113 0f0d 	cmn.w	r3, #13
 801573c:	d002      	beq.n	8015744 <tcp_process+0x41c>
              tcp_abort(pcb);
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7fd fd1a 	bl	8013178 <tcp_abort>
            }
            return ERR_ABRT;
 8015744:	f06f 030c 	mvn.w	r3, #12
 8015748:	e1ce      	b.n	8015ae8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f000 fae0 	bl	8015d10 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015750:	4b68      	ldr	r3, [pc, #416]	; (80158f4 <tcp_process+0x5cc>)
 8015752:	881b      	ldrh	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d005      	beq.n	8015764 <tcp_process+0x43c>
            recv_acked--;
 8015758:	4b66      	ldr	r3, [pc, #408]	; (80158f4 <tcp_process+0x5cc>)
 801575a:	881b      	ldrh	r3, [r3, #0]
 801575c:	3b01      	subs	r3, #1
 801575e:	b29a      	uxth	r2, r3
 8015760:	4b64      	ldr	r3, [pc, #400]	; (80158f4 <tcp_process+0x5cc>)
 8015762:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015768:	009a      	lsls	r2, r3, #2
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801576e:	005b      	lsls	r3, r3, #1
 8015770:	f241 111c 	movw	r1, #4380	; 0x111c
 8015774:	428b      	cmp	r3, r1
 8015776:	bf38      	it	cc
 8015778:	460b      	movcc	r3, r1
 801577a:	429a      	cmp	r2, r3
 801577c:	d204      	bcs.n	8015788 <tcp_process+0x460>
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	b29b      	uxth	r3, r3
 8015786:	e00d      	b.n	80157a4 <tcp_process+0x47c>
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801578c:	005b      	lsls	r3, r3, #1
 801578e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015792:	4293      	cmp	r3, r2
 8015794:	d904      	bls.n	80157a0 <tcp_process+0x478>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	b29b      	uxth	r3, r3
 801579e:	e001      	b.n	80157a4 <tcp_process+0x47c>
 80157a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80157aa:	4b53      	ldr	r3, [pc, #332]	; (80158f8 <tcp_process+0x5d0>)
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	f003 0320 	and.w	r3, r3, #32
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d037      	beq.n	8015826 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	8b5b      	ldrh	r3, [r3, #26]
 80157ba:	f043 0302 	orr.w	r3, r3, #2
 80157be:	b29a      	uxth	r2, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2207      	movs	r2, #7
 80157c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80157ca:	e02c      	b.n	8015826 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157cc:	4b40      	ldr	r3, [pc, #256]	; (80158d0 <tcp_process+0x5a8>)
 80157ce:	6819      	ldr	r1, [r3, #0]
 80157d0:	4b40      	ldr	r3, [pc, #256]	; (80158d4 <tcp_process+0x5ac>)
 80157d2:	881b      	ldrh	r3, [r3, #0]
 80157d4:	461a      	mov	r2, r3
 80157d6:	4b40      	ldr	r3, [pc, #256]	; (80158d8 <tcp_process+0x5b0>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157dc:	4b3f      	ldr	r3, [pc, #252]	; (80158dc <tcp_process+0x5b4>)
 80157de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157e0:	885b      	ldrh	r3, [r3, #2]
 80157e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157e4:	4a3d      	ldr	r2, [pc, #244]	; (80158dc <tcp_process+0x5b4>)
 80157e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157e8:	8812      	ldrh	r2, [r2, #0]
 80157ea:	b292      	uxth	r2, r2
 80157ec:	9202      	str	r2, [sp, #8]
 80157ee:	9301      	str	r3, [sp, #4]
 80157f0:	4b3b      	ldr	r3, [pc, #236]	; (80158e0 <tcp_process+0x5b8>)
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	4b3b      	ldr	r3, [pc, #236]	; (80158e4 <tcp_process+0x5bc>)
 80157f6:	4602      	mov	r2, r0
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f003 f827 	bl	801884c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80157fe:	e167      	b.n	8015ad0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015800:	4b32      	ldr	r3, [pc, #200]	; (80158cc <tcp_process+0x5a4>)
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f003 0302 	and.w	r3, r3, #2
 8015808:	2b00      	cmp	r3, #0
 801580a:	f000 8161 	beq.w	8015ad0 <tcp_process+0x7a8>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015812:	1e5a      	subs	r2, r3, #1
 8015814:	4b30      	ldr	r3, [pc, #192]	; (80158d8 <tcp_process+0x5b0>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	429a      	cmp	r2, r3
 801581a:	f040 8159 	bne.w	8015ad0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f002 fe0c 	bl	801843c <tcp_rexmit>
      break;
 8015824:	e154      	b.n	8015ad0 <tcp_process+0x7a8>
 8015826:	e153      	b.n	8015ad0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f000 fa71 	bl	8015d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801582e:	4b32      	ldr	r3, [pc, #200]	; (80158f8 <tcp_process+0x5d0>)
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	f003 0320 	and.w	r3, r3, #32
 8015836:	2b00      	cmp	r3, #0
 8015838:	f000 814c 	beq.w	8015ad4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	8b5b      	ldrh	r3, [r3, #26]
 8015840:	f043 0302 	orr.w	r3, r3, #2
 8015844:	b29a      	uxth	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2207      	movs	r2, #7
 801584e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015850:	e140      	b.n	8015ad4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 fa5c 	bl	8015d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015858:	4b27      	ldr	r3, [pc, #156]	; (80158f8 <tcp_process+0x5d0>)
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	f003 0320 	and.w	r3, r3, #32
 8015860:	2b00      	cmp	r3, #0
 8015862:	d071      	beq.n	8015948 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015864:	4b19      	ldr	r3, [pc, #100]	; (80158cc <tcp_process+0x5a4>)
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	f003 0310 	and.w	r3, r3, #16
 801586c:	2b00      	cmp	r3, #0
 801586e:	d060      	beq.n	8015932 <tcp_process+0x60a>
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015874:	4b16      	ldr	r3, [pc, #88]	; (80158d0 <tcp_process+0x5a8>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	429a      	cmp	r2, r3
 801587a:	d15a      	bne.n	8015932 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015880:	2b00      	cmp	r3, #0
 8015882:	d156      	bne.n	8015932 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	8b5b      	ldrh	r3, [r3, #26]
 8015888:	f043 0302 	orr.w	r3, r3, #2
 801588c:	b29a      	uxth	r2, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7fe fdbe 	bl	8014414 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015898:	4b18      	ldr	r3, [pc, #96]	; (80158fc <tcp_process+0x5d4>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	429a      	cmp	r2, r3
 80158a0:	d105      	bne.n	80158ae <tcp_process+0x586>
 80158a2:	4b16      	ldr	r3, [pc, #88]	; (80158fc <tcp_process+0x5d4>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	4a14      	ldr	r2, [pc, #80]	; (80158fc <tcp_process+0x5d4>)
 80158aa:	6013      	str	r3, [r2, #0]
 80158ac:	e02e      	b.n	801590c <tcp_process+0x5e4>
 80158ae:	4b13      	ldr	r3, [pc, #76]	; (80158fc <tcp_process+0x5d4>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	617b      	str	r3, [r7, #20]
 80158b4:	e027      	b.n	8015906 <tcp_process+0x5de>
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d11f      	bne.n	8015900 <tcp_process+0x5d8>
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	68da      	ldr	r2, [r3, #12]
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	60da      	str	r2, [r3, #12]
 80158c8:	e020      	b.n	801590c <tcp_process+0x5e4>
 80158ca:	bf00      	nop
 80158cc:	200098f4 	.word	0x200098f4
 80158d0:	200098ec 	.word	0x200098ec
 80158d4:	200098f2 	.word	0x200098f2
 80158d8:	200098e8 	.word	0x200098e8
 80158dc:	200098d8 	.word	0x200098d8
 80158e0:	2000fae0 	.word	0x2000fae0
 80158e4:	2000fae4 	.word	0x2000fae4
 80158e8:	0801fc90 	.word	0x0801fc90
 80158ec:	0801ff30 	.word	0x0801ff30
 80158f0:	0801fcdc 	.word	0x0801fcdc
 80158f4:	200098f0 	.word	0x200098f0
 80158f8:	200098f5 	.word	0x200098f5
 80158fc:	20014f64 	.word	0x20014f64
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	617b      	str	r3, [r7, #20]
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d1d4      	bne.n	80158b6 <tcp_process+0x58e>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2200      	movs	r2, #0
 8015910:	60da      	str	r2, [r3, #12]
 8015912:	4b77      	ldr	r3, [pc, #476]	; (8015af0 <tcp_process+0x7c8>)
 8015914:	2201      	movs	r2, #1
 8015916:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	220a      	movs	r2, #10
 801591c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801591e:	4b75      	ldr	r3, [pc, #468]	; (8015af4 <tcp_process+0x7cc>)
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	60da      	str	r2, [r3, #12]
 8015926:	4a73      	ldr	r2, [pc, #460]	; (8015af4 <tcp_process+0x7cc>)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6013      	str	r3, [r2, #0]
 801592c:	f003 f950 	bl	8018bd0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015930:	e0d2      	b.n	8015ad8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	8b5b      	ldrh	r3, [r3, #26]
 8015936:	f043 0302 	orr.w	r3, r3, #2
 801593a:	b29a      	uxth	r2, r3
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2208      	movs	r2, #8
 8015944:	751a      	strb	r2, [r3, #20]
      break;
 8015946:	e0c7      	b.n	8015ad8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015948:	4b6b      	ldr	r3, [pc, #428]	; (8015af8 <tcp_process+0x7d0>)
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	f003 0310 	and.w	r3, r3, #16
 8015950:	2b00      	cmp	r3, #0
 8015952:	f000 80c1 	beq.w	8015ad8 <tcp_process+0x7b0>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801595a:	4b68      	ldr	r3, [pc, #416]	; (8015afc <tcp_process+0x7d4>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	429a      	cmp	r2, r3
 8015960:	f040 80ba 	bne.w	8015ad8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015968:	2b00      	cmp	r3, #0
 801596a:	f040 80b5 	bne.w	8015ad8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2206      	movs	r2, #6
 8015972:	751a      	strb	r2, [r3, #20]
      break;
 8015974:	e0b0      	b.n	8015ad8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 f9ca 	bl	8015d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801597c:	4b60      	ldr	r3, [pc, #384]	; (8015b00 <tcp_process+0x7d8>)
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	f003 0320 	and.w	r3, r3, #32
 8015984:	2b00      	cmp	r3, #0
 8015986:	f000 80a9 	beq.w	8015adc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	8b5b      	ldrh	r3, [r3, #26]
 801598e:	f043 0302 	orr.w	r3, r3, #2
 8015992:	b29a      	uxth	r2, r3
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f7fe fd3b 	bl	8014414 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801599e:	4b59      	ldr	r3, [pc, #356]	; (8015b04 <tcp_process+0x7dc>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d105      	bne.n	80159b4 <tcp_process+0x68c>
 80159a8:	4b56      	ldr	r3, [pc, #344]	; (8015b04 <tcp_process+0x7dc>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	68db      	ldr	r3, [r3, #12]
 80159ae:	4a55      	ldr	r2, [pc, #340]	; (8015b04 <tcp_process+0x7dc>)
 80159b0:	6013      	str	r3, [r2, #0]
 80159b2:	e013      	b.n	80159dc <tcp_process+0x6b4>
 80159b4:	4b53      	ldr	r3, [pc, #332]	; (8015b04 <tcp_process+0x7dc>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	613b      	str	r3, [r7, #16]
 80159ba:	e00c      	b.n	80159d6 <tcp_process+0x6ae>
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d104      	bne.n	80159d0 <tcp_process+0x6a8>
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	68da      	ldr	r2, [r3, #12]
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	60da      	str	r2, [r3, #12]
 80159ce:	e005      	b.n	80159dc <tcp_process+0x6b4>
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	613b      	str	r3, [r7, #16]
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d1ef      	bne.n	80159bc <tcp_process+0x694>
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2200      	movs	r2, #0
 80159e0:	60da      	str	r2, [r3, #12]
 80159e2:	4b43      	ldr	r3, [pc, #268]	; (8015af0 <tcp_process+0x7c8>)
 80159e4:	2201      	movs	r2, #1
 80159e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	220a      	movs	r2, #10
 80159ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80159ee:	4b41      	ldr	r3, [pc, #260]	; (8015af4 <tcp_process+0x7cc>)
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	60da      	str	r2, [r3, #12]
 80159f6:	4a3f      	ldr	r2, [pc, #252]	; (8015af4 <tcp_process+0x7cc>)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	6013      	str	r3, [r2, #0]
 80159fc:	f003 f8e8 	bl	8018bd0 <tcp_timer_needed>
      }
      break;
 8015a00:	e06c      	b.n	8015adc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f000 f984 	bl	8015d10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015a08:	4b3b      	ldr	r3, [pc, #236]	; (8015af8 <tcp_process+0x7d0>)
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	f003 0310 	and.w	r3, r3, #16
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d065      	beq.n	8015ae0 <tcp_process+0x7b8>
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a18:	4b38      	ldr	r3, [pc, #224]	; (8015afc <tcp_process+0x7d4>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d15f      	bne.n	8015ae0 <tcp_process+0x7b8>
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d15b      	bne.n	8015ae0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7fe fcf3 	bl	8014414 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015a2e:	4b35      	ldr	r3, [pc, #212]	; (8015b04 <tcp_process+0x7dc>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d105      	bne.n	8015a44 <tcp_process+0x71c>
 8015a38:	4b32      	ldr	r3, [pc, #200]	; (8015b04 <tcp_process+0x7dc>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	4a31      	ldr	r2, [pc, #196]	; (8015b04 <tcp_process+0x7dc>)
 8015a40:	6013      	str	r3, [r2, #0]
 8015a42:	e013      	b.n	8015a6c <tcp_process+0x744>
 8015a44:	4b2f      	ldr	r3, [pc, #188]	; (8015b04 <tcp_process+0x7dc>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	60fb      	str	r3, [r7, #12]
 8015a4a:	e00c      	b.n	8015a66 <tcp_process+0x73e>
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d104      	bne.n	8015a60 <tcp_process+0x738>
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	68da      	ldr	r2, [r3, #12]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	60da      	str	r2, [r3, #12]
 8015a5e:	e005      	b.n	8015a6c <tcp_process+0x744>
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	60fb      	str	r3, [r7, #12]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1ef      	bne.n	8015a4c <tcp_process+0x724>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	60da      	str	r2, [r3, #12]
 8015a72:	4b1f      	ldr	r3, [pc, #124]	; (8015af0 <tcp_process+0x7c8>)
 8015a74:	2201      	movs	r2, #1
 8015a76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	220a      	movs	r2, #10
 8015a7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015a7e:	4b1d      	ldr	r3, [pc, #116]	; (8015af4 <tcp_process+0x7cc>)
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	60da      	str	r2, [r3, #12]
 8015a86:	4a1b      	ldr	r2, [pc, #108]	; (8015af4 <tcp_process+0x7cc>)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6013      	str	r3, [r2, #0]
 8015a8c:	f003 f8a0 	bl	8018bd0 <tcp_timer_needed>
      }
      break;
 8015a90:	e026      	b.n	8015ae0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 f93c 	bl	8015d10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015a98:	4b17      	ldr	r3, [pc, #92]	; (8015af8 <tcp_process+0x7d0>)
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	f003 0310 	and.w	r3, r3, #16
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d01f      	beq.n	8015ae4 <tcp_process+0x7bc>
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015aa8:	4b14      	ldr	r3, [pc, #80]	; (8015afc <tcp_process+0x7d4>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d119      	bne.n	8015ae4 <tcp_process+0x7bc>
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d115      	bne.n	8015ae4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015ab8:	4b11      	ldr	r3, [pc, #68]	; (8015b00 <tcp_process+0x7d8>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	f043 0310 	orr.w	r3, r3, #16
 8015ac0:	b2da      	uxtb	r2, r3
 8015ac2:	4b0f      	ldr	r3, [pc, #60]	; (8015b00 <tcp_process+0x7d8>)
 8015ac4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015ac6:	e00d      	b.n	8015ae4 <tcp_process+0x7bc>
    default:
      break;
 8015ac8:	bf00      	nop
 8015aca:	e00c      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015acc:	bf00      	nop
 8015ace:	e00a      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ad0:	bf00      	nop
 8015ad2:	e008      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ad4:	bf00      	nop
 8015ad6:	e006      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ad8:	bf00      	nop
 8015ada:	e004      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015adc:	bf00      	nop
 8015ade:	e002      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ae0:	bf00      	nop
 8015ae2:	e000      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ae4:	bf00      	nop
  }
  return ERR_OK;
 8015ae6:	2300      	movs	r3, #0
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3724      	adds	r7, #36	; 0x24
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd90      	pop	{r4, r7, pc}
 8015af0:	20014f60 	.word	0x20014f60
 8015af4:	20014f74 	.word	0x20014f74
 8015af8:	200098f4 	.word	0x200098f4
 8015afc:	200098ec 	.word	0x200098ec
 8015b00:	200098f5 	.word	0x200098f5
 8015b04:	20014f64 	.word	0x20014f64

08015b08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015b08:	b590      	push	{r4, r7, lr}
 8015b0a:	b085      	sub	sp, #20
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d106      	bne.n	8015b26 <tcp_oos_insert_segment+0x1e>
 8015b18:	4b3b      	ldr	r3, [pc, #236]	; (8015c08 <tcp_oos_insert_segment+0x100>)
 8015b1a:	f240 421f 	movw	r2, #1055	; 0x41f
 8015b1e:	493b      	ldr	r1, [pc, #236]	; (8015c0c <tcp_oos_insert_segment+0x104>)
 8015b20:	483b      	ldr	r0, [pc, #236]	; (8015c10 <tcp_oos_insert_segment+0x108>)
 8015b22:	f006 faff 	bl	801c124 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	899b      	ldrh	r3, [r3, #12]
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7fb f986 	bl	8010e40 <lwip_htons>
 8015b34:	4603      	mov	r3, r0
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	f003 0301 	and.w	r3, r3, #1
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d028      	beq.n	8015b92 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015b40:	6838      	ldr	r0, [r7, #0]
 8015b42:	f7fe f997 	bl	8013e74 <tcp_segs_free>
    next = NULL;
 8015b46:	2300      	movs	r3, #0
 8015b48:	603b      	str	r3, [r7, #0]
 8015b4a:	e056      	b.n	8015bfa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	899b      	ldrh	r3, [r3, #12]
 8015b52:	b29b      	uxth	r3, r3
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7fb f973 	bl	8010e40 <lwip_htons>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	f003 0301 	and.w	r3, r3, #1
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00d      	beq.n	8015b82 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	899b      	ldrh	r3, [r3, #12]
 8015b6c:	b29c      	uxth	r4, r3
 8015b6e:	2001      	movs	r0, #1
 8015b70:	f7fb f966 	bl	8010e40 <lwip_htons>
 8015b74:	4603      	mov	r3, r0
 8015b76:	461a      	mov	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	4322      	orrs	r2, r4
 8015b7e:	b292      	uxth	r2, r2
 8015b80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015b8c:	68f8      	ldr	r0, [r7, #12]
 8015b8e:	f7fe f986 	bl	8013e9e <tcp_seg_free>
    while (next &&
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d00e      	beq.n	8015bb6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	891b      	ldrh	r3, [r3, #8]
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	4b1d      	ldr	r3, [pc, #116]	; (8015c14 <tcp_oos_insert_segment+0x10c>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	441a      	add	r2, r3
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	6839      	ldr	r1, [r7, #0]
 8015bac:	8909      	ldrh	r1, [r1, #8]
 8015bae:	440b      	add	r3, r1
 8015bb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	daca      	bge.n	8015b4c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d01e      	beq.n	8015bfa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	891b      	ldrh	r3, [r3, #8]
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	4b14      	ldr	r3, [pc, #80]	; (8015c14 <tcp_oos_insert_segment+0x10c>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	441a      	add	r2, r3
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	dd12      	ble.n	8015bfa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	b29a      	uxth	r2, r3
 8015bdc:	4b0d      	ldr	r3, [pc, #52]	; (8015c14 <tcp_oos_insert_segment+0x10c>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	b29b      	uxth	r3, r3
 8015be2:	1ad3      	subs	r3, r2, r3
 8015be4:	b29a      	uxth	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	685a      	ldr	r2, [r3, #4]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	891b      	ldrh	r3, [r3, #8]
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	4610      	mov	r0, r2
 8015bf6:	f7fc fb49 	bl	801228c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	683a      	ldr	r2, [r7, #0]
 8015bfe:	601a      	str	r2, [r3, #0]
}
 8015c00:	bf00      	nop
 8015c02:	3714      	adds	r7, #20
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd90      	pop	{r4, r7, pc}
 8015c08:	0801fc90 	.word	0x0801fc90
 8015c0c:	0801ff50 	.word	0x0801ff50
 8015c10:	0801fcdc 	.word	0x0801fcdc
 8015c14:	200098e8 	.word	0x200098e8

08015c18 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015c18:	b5b0      	push	{r4, r5, r7, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	60f8      	str	r0, [r7, #12]
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
 8015c24:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015c26:	e03e      	b.n	8015ca6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7fc fd3c 	bl	80126b4 <pbuf_clen>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c46:	8a7a      	ldrh	r2, [r7, #18]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d906      	bls.n	8015c5a <tcp_free_acked_segments+0x42>
 8015c4c:	4b2a      	ldr	r3, [pc, #168]	; (8015cf8 <tcp_free_acked_segments+0xe0>)
 8015c4e:	f240 4257 	movw	r2, #1111	; 0x457
 8015c52:	492a      	ldr	r1, [pc, #168]	; (8015cfc <tcp_free_acked_segments+0xe4>)
 8015c54:	482a      	ldr	r0, [pc, #168]	; (8015d00 <tcp_free_acked_segments+0xe8>)
 8015c56:	f006 fa65 	bl	801c124 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015c60:	8a7b      	ldrh	r3, [r7, #18]
 8015c62:	1ad3      	subs	r3, r2, r3
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	891a      	ldrh	r2, [r3, #8]
 8015c70:	4b24      	ldr	r3, [pc, #144]	; (8015d04 <tcp_free_acked_segments+0xec>)
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	4413      	add	r3, r2
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	4b22      	ldr	r3, [pc, #136]	; (8015d04 <tcp_free_acked_segments+0xec>)
 8015c7a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015c7c:	6978      	ldr	r0, [r7, #20]
 8015c7e:	f7fe f90e 	bl	8013e9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00c      	beq.n	8015ca6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d109      	bne.n	8015ca6 <tcp_free_acked_segments+0x8e>
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d106      	bne.n	8015ca6 <tcp_free_acked_segments+0x8e>
 8015c98:	4b17      	ldr	r3, [pc, #92]	; (8015cf8 <tcp_free_acked_segments+0xe0>)
 8015c9a:	f240 4261 	movw	r2, #1121	; 0x461
 8015c9e:	491a      	ldr	r1, [pc, #104]	; (8015d08 <tcp_free_acked_segments+0xf0>)
 8015ca0:	4817      	ldr	r0, [pc, #92]	; (8015d00 <tcp_free_acked_segments+0xe8>)
 8015ca2:	f006 fa3f 	bl	801c124 <iprintf>
  while (seg_list != NULL &&
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d020      	beq.n	8015cee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	68db      	ldr	r3, [r3, #12]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7fb f8d9 	bl	8010e6a <lwip_htonl>
 8015cb8:	4604      	mov	r4, r0
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	891b      	ldrh	r3, [r3, #8]
 8015cbe:	461d      	mov	r5, r3
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	899b      	ldrh	r3, [r3, #12]
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7fb f8b9 	bl	8010e40 <lwip_htons>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	f003 0303 	and.w	r3, r3, #3
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d001      	beq.n	8015cde <tcp_free_acked_segments+0xc6>
 8015cda:	2301      	movs	r3, #1
 8015cdc:	e000      	b.n	8015ce0 <tcp_free_acked_segments+0xc8>
 8015cde:	2300      	movs	r3, #0
 8015ce0:	442b      	add	r3, r5
 8015ce2:	18e2      	adds	r2, r4, r3
 8015ce4:	4b09      	ldr	r3, [pc, #36]	; (8015d0c <tcp_free_acked_segments+0xf4>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	dd9c      	ble.n	8015c28 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015cee:	68bb      	ldr	r3, [r7, #8]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3718      	adds	r7, #24
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8015cf8:	0801fc90 	.word	0x0801fc90
 8015cfc:	0801ff78 	.word	0x0801ff78
 8015d00:	0801fcdc 	.word	0x0801fcdc
 8015d04:	200098f0 	.word	0x200098f0
 8015d08:	0801ffa0 	.word	0x0801ffa0
 8015d0c:	200098ec 	.word	0x200098ec

08015d10 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015d10:	b5b0      	push	{r4, r5, r7, lr}
 8015d12:	b094      	sub	sp, #80	; 0x50
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d106      	bne.n	8015d30 <tcp_receive+0x20>
 8015d22:	4ba6      	ldr	r3, [pc, #664]	; (8015fbc <tcp_receive+0x2ac>)
 8015d24:	f240 427b 	movw	r2, #1147	; 0x47b
 8015d28:	49a5      	ldr	r1, [pc, #660]	; (8015fc0 <tcp_receive+0x2b0>)
 8015d2a:	48a6      	ldr	r0, [pc, #664]	; (8015fc4 <tcp_receive+0x2b4>)
 8015d2c:	f006 f9fa 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	7d1b      	ldrb	r3, [r3, #20]
 8015d34:	2b03      	cmp	r3, #3
 8015d36:	d806      	bhi.n	8015d46 <tcp_receive+0x36>
 8015d38:	4ba0      	ldr	r3, [pc, #640]	; (8015fbc <tcp_receive+0x2ac>)
 8015d3a:	f240 427c 	movw	r2, #1148	; 0x47c
 8015d3e:	49a2      	ldr	r1, [pc, #648]	; (8015fc8 <tcp_receive+0x2b8>)
 8015d40:	48a0      	ldr	r0, [pc, #640]	; (8015fc4 <tcp_receive+0x2b4>)
 8015d42:	f006 f9ef 	bl	801c124 <iprintf>

  if (flags & TCP_ACK) {
 8015d46:	4ba1      	ldr	r3, [pc, #644]	; (8015fcc <tcp_receive+0x2bc>)
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	f003 0310 	and.w	r3, r3, #16
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f000 8263 	beq.w	801621a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d60:	4413      	add	r3, r2
 8015d62:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015d68:	4b99      	ldr	r3, [pc, #612]	; (8015fd0 <tcp_receive+0x2c0>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	1ad3      	subs	r3, r2, r3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	db1b      	blt.n	8015daa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015d76:	4b96      	ldr	r3, [pc, #600]	; (8015fd0 <tcp_receive+0x2c0>)
 8015d78:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d106      	bne.n	8015d8c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015d82:	4b94      	ldr	r3, [pc, #592]	; (8015fd4 <tcp_receive+0x2c4>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	db0e      	blt.n	8015daa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015d90:	4b90      	ldr	r3, [pc, #576]	; (8015fd4 <tcp_receive+0x2c4>)
 8015d92:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d125      	bne.n	8015de4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015d98:	4b8f      	ldr	r3, [pc, #572]	; (8015fd8 <tcp_receive+0x2c8>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	89db      	ldrh	r3, [r3, #14]
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d91c      	bls.n	8015de4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015daa:	4b8b      	ldr	r3, [pc, #556]	; (8015fd8 <tcp_receive+0x2c8>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	89db      	ldrh	r3, [r3, #14]
 8015db0:	b29a      	uxth	r2, r3
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d205      	bcs.n	8015dd4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015dd4:	4b7e      	ldr	r3, [pc, #504]	; (8015fd0 <tcp_receive+0x2c0>)
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015ddc:	4b7d      	ldr	r3, [pc, #500]	; (8015fd4 <tcp_receive+0x2c4>)
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015de4:	4b7b      	ldr	r3, [pc, #492]	; (8015fd4 <tcp_receive+0x2c4>)
 8015de6:	681a      	ldr	r2, [r3, #0]
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dec:	1ad3      	subs	r3, r2, r3
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	dc58      	bgt.n	8015ea4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015df2:	4b7a      	ldr	r3, [pc, #488]	; (8015fdc <tcp_receive+0x2cc>)
 8015df4:	881b      	ldrh	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d14b      	bne.n	8015e92 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015e04:	4413      	add	r3, r2
 8015e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d142      	bne.n	8015e92 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	db3d      	blt.n	8015e92 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015e1a:	4b6e      	ldr	r3, [pc, #440]	; (8015fd4 <tcp_receive+0x2c4>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d137      	bne.n	8015e92 <tcp_receive+0x182>
              found_dupack = 1;
 8015e22:	2301      	movs	r3, #1
 8015e24:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e2c:	2bff      	cmp	r3, #255	; 0xff
 8015e2e:	d007      	beq.n	8015e40 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e36:	3301      	adds	r3, #1
 8015e38:	b2da      	uxtb	r2, r3
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e46:	2b03      	cmp	r3, #3
 8015e48:	d91b      	bls.n	8015e82 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e54:	4413      	add	r3, r2
 8015e56:	b29a      	uxth	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d30a      	bcc.n	8015e78 <tcp_receive+0x168>
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e6c:	4413      	add	r3, r2
 8015e6e:	b29a      	uxth	r2, r3
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015e76:	e004      	b.n	8015e82 <tcp_receive+0x172>
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e88:	2b02      	cmp	r3, #2
 8015e8a:	d902      	bls.n	8015e92 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f002 fb41 	bl	8018514 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f040 8160 	bne.w	801615a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015ea2:	e15a      	b.n	801615a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ea4:	4b4b      	ldr	r3, [pc, #300]	; (8015fd4 <tcp_receive+0x2c4>)
 8015ea6:	681a      	ldr	r2, [r3, #0]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	3b01      	subs	r3, #1
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f2c0 814d 	blt.w	8016150 <tcp_receive+0x440>
 8015eb6:	4b47      	ldr	r3, [pc, #284]	; (8015fd4 <tcp_receive+0x2c4>)
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ebe:	1ad3      	subs	r3, r2, r3
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	f300 8145 	bgt.w	8016150 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	8b5b      	ldrh	r3, [r3, #26]
 8015eca:	f003 0304 	and.w	r3, r3, #4
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d010      	beq.n	8015ef4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	8b5b      	ldrh	r3, [r3, #26]
 8015ed6:	f023 0304 	bic.w	r3, r3, #4
 8015eda:	b29a      	uxth	r2, r3
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015f02:	10db      	asrs	r3, r3, #3
 8015f04:	b21b      	sxth	r3, r3
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	4413      	add	r3, r2
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	b21a      	sxth	r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015f1c:	4b2d      	ldr	r3, [pc, #180]	; (8015fd4 <tcp_receive+0x2c4>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	b29a      	uxth	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015f34:	4b27      	ldr	r3, [pc, #156]	; (8015fd4 <tcp_receive+0x2c4>)
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	7d1b      	ldrb	r3, [r3, #20]
 8015f40:	2b03      	cmp	r3, #3
 8015f42:	f240 8096 	bls.w	8016072 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d244      	bcs.n	8015fe0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	8b5b      	ldrh	r3, [r3, #26]
 8015f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d001      	beq.n	8015f66 <tcp_receive+0x256>
 8015f62:	2301      	movs	r3, #1
 8015f64:	e000      	b.n	8015f68 <tcp_receive+0x258>
 8015f66:	2302      	movs	r3, #2
 8015f68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015f6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f76:	fb12 f303 	smulbb	r3, r2, r3
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	bf28      	it	cs
 8015f82:	4613      	movcs	r3, r2
 8015f84:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015f8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f8e:	4413      	add	r3, r2
 8015f90:	b29a      	uxth	r2, r3
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d309      	bcc.n	8015fb0 <tcp_receive+0x2a0>
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015fa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fa4:	4413      	add	r3, r2
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015fae:	e060      	b.n	8016072 <tcp_receive+0x362>
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015fba:	e05a      	b.n	8016072 <tcp_receive+0x362>
 8015fbc:	0801fc90 	.word	0x0801fc90
 8015fc0:	0801ffc0 	.word	0x0801ffc0
 8015fc4:	0801fcdc 	.word	0x0801fcdc
 8015fc8:	0801ffdc 	.word	0x0801ffdc
 8015fcc:	200098f4 	.word	0x200098f4
 8015fd0:	200098e8 	.word	0x200098e8
 8015fd4:	200098ec 	.word	0x200098ec
 8015fd8:	200098d8 	.word	0x200098d8
 8015fdc:	200098f2 	.word	0x200098f2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015fe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015fe8:	4413      	add	r3, r2
 8015fea:	b29a      	uxth	r2, r3
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d309      	bcc.n	801600a <tcp_receive+0x2fa>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015ffc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015ffe:	4413      	add	r3, r2
 8016000:	b29a      	uxth	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016008:	e004      	b.n	8016014 <tcp_receive+0x304>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016020:	429a      	cmp	r2, r3
 8016022:	d326      	bcc.n	8016072 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016030:	1ad3      	subs	r3, r2, r3
 8016032:	b29a      	uxth	r2, r3
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016044:	4413      	add	r3, r2
 8016046:	b29a      	uxth	r2, r3
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801604e:	429a      	cmp	r2, r3
 8016050:	d30a      	bcc.n	8016068 <tcp_receive+0x358>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801605c:	4413      	add	r3, r2
 801605e:	b29a      	uxth	r2, r3
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016066:	e004      	b.n	8016072 <tcp_receive+0x362>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801606e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801607a:	4a98      	ldr	r2, [pc, #608]	; (80162dc <tcp_receive+0x5cc>)
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f7ff fdcb 	bl	8015c18 <tcp_free_acked_segments>
 8016082:	4602      	mov	r2, r0
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016090:	4a93      	ldr	r2, [pc, #588]	; (80162e0 <tcp_receive+0x5d0>)
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7ff fdc0 	bl	8015c18 <tcp_free_acked_segments>
 8016098:	4602      	mov	r2, r0
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d104      	bne.n	80160b0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160ac:	861a      	strh	r2, [r3, #48]	; 0x30
 80160ae:	e002      	b.n	80160b6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2200      	movs	r2, #0
 80160b4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2200      	movs	r2, #0
 80160ba:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d103      	bne.n	80160cc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2200      	movs	r2, #0
 80160c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80160d2:	4b84      	ldr	r3, [pc, #528]	; (80162e4 <tcp_receive+0x5d4>)
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	4413      	add	r3, r2
 80160d8:	b29a      	uxth	r2, r3
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	8b5b      	ldrh	r3, [r3, #26]
 80160e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d035      	beq.n	8016158 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d118      	bne.n	8016126 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00c      	beq.n	8016116 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016104:	68db      	ldr	r3, [r3, #12]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	4618      	mov	r0, r3
 801610a:	f7fa feae 	bl	8010e6a <lwip_htonl>
 801610e:	4603      	mov	r3, r0
 8016110:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016112:	2b00      	cmp	r3, #0
 8016114:	dc20      	bgt.n	8016158 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	8b5b      	ldrh	r3, [r3, #26]
 801611a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801611e:	b29a      	uxth	r2, r3
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016124:	e018      	b.n	8016158 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801612e:	68db      	ldr	r3, [r3, #12]
 8016130:	685b      	ldr	r3, [r3, #4]
 8016132:	4618      	mov	r0, r3
 8016134:	f7fa fe99 	bl	8010e6a <lwip_htonl>
 8016138:	4603      	mov	r3, r0
 801613a:	1ae3      	subs	r3, r4, r3
 801613c:	2b00      	cmp	r3, #0
 801613e:	dc0b      	bgt.n	8016158 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	8b5b      	ldrh	r3, [r3, #26]
 8016144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016148:	b29a      	uxth	r2, r3
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801614e:	e003      	b.n	8016158 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f002 fbcd 	bl	80188f0 <tcp_send_empty_ack>
 8016156:	e000      	b.n	801615a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016158:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801615e:	2b00      	cmp	r3, #0
 8016160:	d05b      	beq.n	801621a <tcp_receive+0x50a>
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016166:	4b60      	ldr	r3, [pc, #384]	; (80162e8 <tcp_receive+0x5d8>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	2b00      	cmp	r3, #0
 801616e:	da54      	bge.n	801621a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016170:	4b5e      	ldr	r3, [pc, #376]	; (80162ec <tcp_receive+0x5dc>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	b29a      	uxth	r2, r3
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801617a:	b29b      	uxth	r3, r3
 801617c:	1ad3      	subs	r3, r2, r3
 801617e:	b29b      	uxth	r3, r3
 8016180:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016184:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801618e:	10db      	asrs	r3, r3, #3
 8016190:	b21b      	sxth	r3, r3
 8016192:	b29b      	uxth	r3, r3
 8016194:	1ad3      	subs	r3, r2, r3
 8016196:	b29b      	uxth	r3, r3
 8016198:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161a2:	b29a      	uxth	r2, r3
 80161a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80161a8:	4413      	add	r3, r2
 80161aa:	b29b      	uxth	r3, r3
 80161ac:	b21a      	sxth	r2, r3
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80161b2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	da05      	bge.n	80161c6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80161ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80161be:	425b      	negs	r3, r3
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80161c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80161d0:	109b      	asrs	r3, r3, #2
 80161d2:	b21b      	sxth	r3, r3
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	1ad3      	subs	r3, r2, r3
 80161d8:	b29b      	uxth	r3, r3
 80161da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80161e4:	b29a      	uxth	r2, r3
 80161e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80161ea:	4413      	add	r3, r2
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	b21a      	sxth	r2, r3
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161fa:	10db      	asrs	r3, r3, #3
 80161fc:	b21b      	sxth	r3, r3
 80161fe:	b29a      	uxth	r2, r3
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016206:	b29b      	uxth	r3, r3
 8016208:	4413      	add	r3, r2
 801620a:	b29b      	uxth	r3, r3
 801620c:	b21a      	sxth	r2, r3
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801621a:	4b35      	ldr	r3, [pc, #212]	; (80162f0 <tcp_receive+0x5e0>)
 801621c:	881b      	ldrh	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	f000 84e1 	beq.w	8016be6 <tcp_receive+0xed6>
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	7d1b      	ldrb	r3, [r3, #20]
 8016228:	2b06      	cmp	r3, #6
 801622a:	f200 84dc 	bhi.w	8016be6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016232:	4b30      	ldr	r3, [pc, #192]	; (80162f4 <tcp_receive+0x5e4>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	1ad3      	subs	r3, r2, r3
 8016238:	3b01      	subs	r3, #1
 801623a:	2b00      	cmp	r3, #0
 801623c:	f2c0 808e 	blt.w	801635c <tcp_receive+0x64c>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016244:	4b2a      	ldr	r3, [pc, #168]	; (80162f0 <tcp_receive+0x5e0>)
 8016246:	881b      	ldrh	r3, [r3, #0]
 8016248:	4619      	mov	r1, r3
 801624a:	4b2a      	ldr	r3, [pc, #168]	; (80162f4 <tcp_receive+0x5e4>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	440b      	add	r3, r1
 8016250:	1ad3      	subs	r3, r2, r3
 8016252:	3301      	adds	r3, #1
 8016254:	2b00      	cmp	r3, #0
 8016256:	f300 8081 	bgt.w	801635c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801625a:	4b27      	ldr	r3, [pc, #156]	; (80162f8 <tcp_receive+0x5e8>)
 801625c:	685b      	ldr	r3, [r3, #4]
 801625e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016264:	4b23      	ldr	r3, [pc, #140]	; (80162f4 <tcp_receive+0x5e4>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	1ad3      	subs	r3, r2, r3
 801626a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801626c:	4b22      	ldr	r3, [pc, #136]	; (80162f8 <tcp_receive+0x5e8>)
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d106      	bne.n	8016282 <tcp_receive+0x572>
 8016274:	4b21      	ldr	r3, [pc, #132]	; (80162fc <tcp_receive+0x5ec>)
 8016276:	f240 5294 	movw	r2, #1428	; 0x594
 801627a:	4921      	ldr	r1, [pc, #132]	; (8016300 <tcp_receive+0x5f0>)
 801627c:	4821      	ldr	r0, [pc, #132]	; (8016304 <tcp_receive+0x5f4>)
 801627e:	f005 ff51 	bl	801c124 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016284:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016288:	4293      	cmp	r3, r2
 801628a:	d906      	bls.n	801629a <tcp_receive+0x58a>
 801628c:	4b1b      	ldr	r3, [pc, #108]	; (80162fc <tcp_receive+0x5ec>)
 801628e:	f240 5295 	movw	r2, #1429	; 0x595
 8016292:	491d      	ldr	r1, [pc, #116]	; (8016308 <tcp_receive+0x5f8>)
 8016294:	481b      	ldr	r0, [pc, #108]	; (8016304 <tcp_receive+0x5f4>)
 8016296:	f005 ff45 	bl	801c124 <iprintf>
      off = (u16_t)off32;
 801629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80162a0:	4b15      	ldr	r3, [pc, #84]	; (80162f8 <tcp_receive+0x5e8>)
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	891b      	ldrh	r3, [r3, #8]
 80162a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d906      	bls.n	80162bc <tcp_receive+0x5ac>
 80162ae:	4b13      	ldr	r3, [pc, #76]	; (80162fc <tcp_receive+0x5ec>)
 80162b0:	f240 5297 	movw	r2, #1431	; 0x597
 80162b4:	4915      	ldr	r1, [pc, #84]	; (801630c <tcp_receive+0x5fc>)
 80162b6:	4813      	ldr	r0, [pc, #76]	; (8016304 <tcp_receive+0x5f4>)
 80162b8:	f005 ff34 	bl	801c124 <iprintf>
      inseg.len -= off;
 80162bc:	4b0e      	ldr	r3, [pc, #56]	; (80162f8 <tcp_receive+0x5e8>)
 80162be:	891a      	ldrh	r2, [r3, #8]
 80162c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162c4:	1ad3      	subs	r3, r2, r3
 80162c6:	b29a      	uxth	r2, r3
 80162c8:	4b0b      	ldr	r3, [pc, #44]	; (80162f8 <tcp_receive+0x5e8>)
 80162ca:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80162cc:	4b0a      	ldr	r3, [pc, #40]	; (80162f8 <tcp_receive+0x5e8>)
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	891a      	ldrh	r2, [r3, #8]
 80162d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162d6:	1ad3      	subs	r3, r2, r3
 80162d8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80162da:	e029      	b.n	8016330 <tcp_receive+0x620>
 80162dc:	0801fff8 	.word	0x0801fff8
 80162e0:	08020000 	.word	0x08020000
 80162e4:	200098f0 	.word	0x200098f0
 80162e8:	200098ec 	.word	0x200098ec
 80162ec:	20014f68 	.word	0x20014f68
 80162f0:	200098f2 	.word	0x200098f2
 80162f4:	200098e8 	.word	0x200098e8
 80162f8:	200098c8 	.word	0x200098c8
 80162fc:	0801fc90 	.word	0x0801fc90
 8016300:	08020008 	.word	0x08020008
 8016304:	0801fcdc 	.word	0x0801fcdc
 8016308:	08020018 	.word	0x08020018
 801630c:	08020028 	.word	0x08020028
        off -= p->len;
 8016310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016312:	895b      	ldrh	r3, [r3, #10]
 8016314:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016320:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016322:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016326:	2200      	movs	r2, #0
 8016328:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801632a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016332:	895b      	ldrh	r3, [r3, #10]
 8016334:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016338:	429a      	cmp	r2, r3
 801633a:	d8e9      	bhi.n	8016310 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801633c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016340:	4619      	mov	r1, r3
 8016342:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016344:	f7fc f8a2 	bl	801248c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801634c:	4a91      	ldr	r2, [pc, #580]	; (8016594 <tcp_receive+0x884>)
 801634e:	6013      	str	r3, [r2, #0]
 8016350:	4b91      	ldr	r3, [pc, #580]	; (8016598 <tcp_receive+0x888>)
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	4a8f      	ldr	r2, [pc, #572]	; (8016594 <tcp_receive+0x884>)
 8016356:	6812      	ldr	r2, [r2, #0]
 8016358:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801635a:	e00d      	b.n	8016378 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801635c:	4b8d      	ldr	r3, [pc, #564]	; (8016594 <tcp_receive+0x884>)
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016364:	1ad3      	subs	r3, r2, r3
 8016366:	2b00      	cmp	r3, #0
 8016368:	da06      	bge.n	8016378 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	8b5b      	ldrh	r3, [r3, #26]
 801636e:	f043 0302 	orr.w	r3, r3, #2
 8016372:	b29a      	uxth	r2, r3
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016378:	4b86      	ldr	r3, [pc, #536]	; (8016594 <tcp_receive+0x884>)
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	2b00      	cmp	r3, #0
 8016384:	f2c0 842a 	blt.w	8016bdc <tcp_receive+0xecc>
 8016388:	4b82      	ldr	r3, [pc, #520]	; (8016594 <tcp_receive+0x884>)
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016390:	6879      	ldr	r1, [r7, #4]
 8016392:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016394:	440b      	add	r3, r1
 8016396:	1ad3      	subs	r3, r2, r3
 8016398:	3301      	adds	r3, #1
 801639a:	2b00      	cmp	r3, #0
 801639c:	f300 841e 	bgt.w	8016bdc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80163a4:	4b7b      	ldr	r3, [pc, #492]	; (8016594 <tcp_receive+0x884>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	f040 829a 	bne.w	80168e2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80163ae:	4b7a      	ldr	r3, [pc, #488]	; (8016598 <tcp_receive+0x888>)
 80163b0:	891c      	ldrh	r4, [r3, #8]
 80163b2:	4b79      	ldr	r3, [pc, #484]	; (8016598 <tcp_receive+0x888>)
 80163b4:	68db      	ldr	r3, [r3, #12]
 80163b6:	899b      	ldrh	r3, [r3, #12]
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7fa fd40 	bl	8010e40 <lwip_htons>
 80163c0:	4603      	mov	r3, r0
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	f003 0303 	and.w	r3, r3, #3
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d001      	beq.n	80163d0 <tcp_receive+0x6c0>
 80163cc:	2301      	movs	r3, #1
 80163ce:	e000      	b.n	80163d2 <tcp_receive+0x6c2>
 80163d0:	2300      	movs	r3, #0
 80163d2:	4423      	add	r3, r4
 80163d4:	b29a      	uxth	r2, r3
 80163d6:	4b71      	ldr	r3, [pc, #452]	; (801659c <tcp_receive+0x88c>)
 80163d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80163de:	4b6f      	ldr	r3, [pc, #444]	; (801659c <tcp_receive+0x88c>)
 80163e0:	881b      	ldrh	r3, [r3, #0]
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d275      	bcs.n	80164d2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80163e6:	4b6c      	ldr	r3, [pc, #432]	; (8016598 <tcp_receive+0x888>)
 80163e8:	68db      	ldr	r3, [r3, #12]
 80163ea:	899b      	ldrh	r3, [r3, #12]
 80163ec:	b29b      	uxth	r3, r3
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7fa fd26 	bl	8010e40 <lwip_htons>
 80163f4:	4603      	mov	r3, r0
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	f003 0301 	and.w	r3, r3, #1
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d01f      	beq.n	8016440 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016400:	4b65      	ldr	r3, [pc, #404]	; (8016598 <tcp_receive+0x888>)
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	899b      	ldrh	r3, [r3, #12]
 8016406:	b29b      	uxth	r3, r3
 8016408:	b21b      	sxth	r3, r3
 801640a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801640e:	b21c      	sxth	r4, r3
 8016410:	4b61      	ldr	r3, [pc, #388]	; (8016598 <tcp_receive+0x888>)
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	899b      	ldrh	r3, [r3, #12]
 8016416:	b29b      	uxth	r3, r3
 8016418:	4618      	mov	r0, r3
 801641a:	f7fa fd11 	bl	8010e40 <lwip_htons>
 801641e:	4603      	mov	r3, r0
 8016420:	b2db      	uxtb	r3, r3
 8016422:	b29b      	uxth	r3, r3
 8016424:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016428:	b29b      	uxth	r3, r3
 801642a:	4618      	mov	r0, r3
 801642c:	f7fa fd08 	bl	8010e40 <lwip_htons>
 8016430:	4603      	mov	r3, r0
 8016432:	b21b      	sxth	r3, r3
 8016434:	4323      	orrs	r3, r4
 8016436:	b21a      	sxth	r2, r3
 8016438:	4b57      	ldr	r3, [pc, #348]	; (8016598 <tcp_receive+0x888>)
 801643a:	68db      	ldr	r3, [r3, #12]
 801643c:	b292      	uxth	r2, r2
 801643e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016444:	4b54      	ldr	r3, [pc, #336]	; (8016598 <tcp_receive+0x888>)
 8016446:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016448:	4b53      	ldr	r3, [pc, #332]	; (8016598 <tcp_receive+0x888>)
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	899b      	ldrh	r3, [r3, #12]
 801644e:	b29b      	uxth	r3, r3
 8016450:	4618      	mov	r0, r3
 8016452:	f7fa fcf5 	bl	8010e40 <lwip_htons>
 8016456:	4603      	mov	r3, r0
 8016458:	b2db      	uxtb	r3, r3
 801645a:	f003 0302 	and.w	r3, r3, #2
 801645e:	2b00      	cmp	r3, #0
 8016460:	d005      	beq.n	801646e <tcp_receive+0x75e>
            inseg.len -= 1;
 8016462:	4b4d      	ldr	r3, [pc, #308]	; (8016598 <tcp_receive+0x888>)
 8016464:	891b      	ldrh	r3, [r3, #8]
 8016466:	3b01      	subs	r3, #1
 8016468:	b29a      	uxth	r2, r3
 801646a:	4b4b      	ldr	r3, [pc, #300]	; (8016598 <tcp_receive+0x888>)
 801646c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801646e:	4b4a      	ldr	r3, [pc, #296]	; (8016598 <tcp_receive+0x888>)
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	4a49      	ldr	r2, [pc, #292]	; (8016598 <tcp_receive+0x888>)
 8016474:	8912      	ldrh	r2, [r2, #8]
 8016476:	4611      	mov	r1, r2
 8016478:	4618      	mov	r0, r3
 801647a:	f7fb ff07 	bl	801228c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801647e:	4b46      	ldr	r3, [pc, #280]	; (8016598 <tcp_receive+0x888>)
 8016480:	891c      	ldrh	r4, [r3, #8]
 8016482:	4b45      	ldr	r3, [pc, #276]	; (8016598 <tcp_receive+0x888>)
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	899b      	ldrh	r3, [r3, #12]
 8016488:	b29b      	uxth	r3, r3
 801648a:	4618      	mov	r0, r3
 801648c:	f7fa fcd8 	bl	8010e40 <lwip_htons>
 8016490:	4603      	mov	r3, r0
 8016492:	b2db      	uxtb	r3, r3
 8016494:	f003 0303 	and.w	r3, r3, #3
 8016498:	2b00      	cmp	r3, #0
 801649a:	d001      	beq.n	80164a0 <tcp_receive+0x790>
 801649c:	2301      	movs	r3, #1
 801649e:	e000      	b.n	80164a2 <tcp_receive+0x792>
 80164a0:	2300      	movs	r3, #0
 80164a2:	4423      	add	r3, r4
 80164a4:	b29a      	uxth	r2, r3
 80164a6:	4b3d      	ldr	r3, [pc, #244]	; (801659c <tcp_receive+0x88c>)
 80164a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80164aa:	4b3c      	ldr	r3, [pc, #240]	; (801659c <tcp_receive+0x88c>)
 80164ac:	881b      	ldrh	r3, [r3, #0]
 80164ae:	461a      	mov	r2, r3
 80164b0:	4b38      	ldr	r3, [pc, #224]	; (8016594 <tcp_receive+0x884>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	441a      	add	r2, r3
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ba:	6879      	ldr	r1, [r7, #4]
 80164bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80164be:	440b      	add	r3, r1
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d006      	beq.n	80164d2 <tcp_receive+0x7c2>
 80164c4:	4b36      	ldr	r3, [pc, #216]	; (80165a0 <tcp_receive+0x890>)
 80164c6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80164ca:	4936      	ldr	r1, [pc, #216]	; (80165a4 <tcp_receive+0x894>)
 80164cc:	4836      	ldr	r0, [pc, #216]	; (80165a8 <tcp_receive+0x898>)
 80164ce:	f005 fe29 	bl	801c124 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	f000 80e7 	beq.w	80166aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80164dc:	4b2e      	ldr	r3, [pc, #184]	; (8016598 <tcp_receive+0x888>)
 80164de:	68db      	ldr	r3, [r3, #12]
 80164e0:	899b      	ldrh	r3, [r3, #12]
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7fa fcab 	bl	8010e40 <lwip_htons>
 80164ea:	4603      	mov	r3, r0
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	f003 0301 	and.w	r3, r3, #1
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d010      	beq.n	8016518 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80164f6:	e00a      	b.n	801650e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016508:	68f8      	ldr	r0, [r7, #12]
 801650a:	f7fd fcc8 	bl	8013e9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016512:	2b00      	cmp	r3, #0
 8016514:	d1f0      	bne.n	80164f8 <tcp_receive+0x7e8>
 8016516:	e0c8      	b.n	80166aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801651c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801651e:	e052      	b.n	80165c6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016522:	68db      	ldr	r3, [r3, #12]
 8016524:	899b      	ldrh	r3, [r3, #12]
 8016526:	b29b      	uxth	r3, r3
 8016528:	4618      	mov	r0, r3
 801652a:	f7fa fc89 	bl	8010e40 <lwip_htons>
 801652e:	4603      	mov	r3, r0
 8016530:	b2db      	uxtb	r3, r3
 8016532:	f003 0301 	and.w	r3, r3, #1
 8016536:	2b00      	cmp	r3, #0
 8016538:	d03d      	beq.n	80165b6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801653a:	4b17      	ldr	r3, [pc, #92]	; (8016598 <tcp_receive+0x888>)
 801653c:	68db      	ldr	r3, [r3, #12]
 801653e:	899b      	ldrh	r3, [r3, #12]
 8016540:	b29b      	uxth	r3, r3
 8016542:	4618      	mov	r0, r3
 8016544:	f7fa fc7c 	bl	8010e40 <lwip_htons>
 8016548:	4603      	mov	r3, r0
 801654a:	b2db      	uxtb	r3, r3
 801654c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016550:	2b00      	cmp	r3, #0
 8016552:	d130      	bne.n	80165b6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016554:	4b10      	ldr	r3, [pc, #64]	; (8016598 <tcp_receive+0x888>)
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	899b      	ldrh	r3, [r3, #12]
 801655a:	b29c      	uxth	r4, r3
 801655c:	2001      	movs	r0, #1
 801655e:	f7fa fc6f 	bl	8010e40 <lwip_htons>
 8016562:	4603      	mov	r3, r0
 8016564:	461a      	mov	r2, r3
 8016566:	4b0c      	ldr	r3, [pc, #48]	; (8016598 <tcp_receive+0x888>)
 8016568:	68db      	ldr	r3, [r3, #12]
 801656a:	4322      	orrs	r2, r4
 801656c:	b292      	uxth	r2, r2
 801656e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016570:	4b09      	ldr	r3, [pc, #36]	; (8016598 <tcp_receive+0x888>)
 8016572:	891c      	ldrh	r4, [r3, #8]
 8016574:	4b08      	ldr	r3, [pc, #32]	; (8016598 <tcp_receive+0x888>)
 8016576:	68db      	ldr	r3, [r3, #12]
 8016578:	899b      	ldrh	r3, [r3, #12]
 801657a:	b29b      	uxth	r3, r3
 801657c:	4618      	mov	r0, r3
 801657e:	f7fa fc5f 	bl	8010e40 <lwip_htons>
 8016582:	4603      	mov	r3, r0
 8016584:	b2db      	uxtb	r3, r3
 8016586:	f003 0303 	and.w	r3, r3, #3
 801658a:	2b00      	cmp	r3, #0
 801658c:	d00e      	beq.n	80165ac <tcp_receive+0x89c>
 801658e:	2301      	movs	r3, #1
 8016590:	e00d      	b.n	80165ae <tcp_receive+0x89e>
 8016592:	bf00      	nop
 8016594:	200098e8 	.word	0x200098e8
 8016598:	200098c8 	.word	0x200098c8
 801659c:	200098f2 	.word	0x200098f2
 80165a0:	0801fc90 	.word	0x0801fc90
 80165a4:	08020038 	.word	0x08020038
 80165a8:	0801fcdc 	.word	0x0801fcdc
 80165ac:	2300      	movs	r3, #0
 80165ae:	4423      	add	r3, r4
 80165b0:	b29a      	uxth	r2, r3
 80165b2:	4b98      	ldr	r3, [pc, #608]	; (8016814 <tcp_receive+0xb04>)
 80165b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80165b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80165ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80165c0:	6938      	ldr	r0, [r7, #16]
 80165c2:	f7fd fc6c 	bl	8013e9e <tcp_seg_free>
            while (next &&
 80165c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d00e      	beq.n	80165ea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80165cc:	4b91      	ldr	r3, [pc, #580]	; (8016814 <tcp_receive+0xb04>)
 80165ce:	881b      	ldrh	r3, [r3, #0]
 80165d0:	461a      	mov	r2, r3
 80165d2:	4b91      	ldr	r3, [pc, #580]	; (8016818 <tcp_receive+0xb08>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	441a      	add	r2, r3
 80165d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165da:	68db      	ldr	r3, [r3, #12]
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80165e0:	8909      	ldrh	r1, [r1, #8]
 80165e2:	440b      	add	r3, r1
 80165e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	da9a      	bge.n	8016520 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80165ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d059      	beq.n	80166a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80165f0:	4b88      	ldr	r3, [pc, #544]	; (8016814 <tcp_receive+0xb04>)
 80165f2:	881b      	ldrh	r3, [r3, #0]
 80165f4:	461a      	mov	r2, r3
 80165f6:	4b88      	ldr	r3, [pc, #544]	; (8016818 <tcp_receive+0xb08>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	441a      	add	r2, r3
 80165fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016604:	2b00      	cmp	r3, #0
 8016606:	dd4d      	ble.n	80166a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801660a:	68db      	ldr	r3, [r3, #12]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	b29a      	uxth	r2, r3
 8016610:	4b81      	ldr	r3, [pc, #516]	; (8016818 <tcp_receive+0xb08>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	b29b      	uxth	r3, r3
 8016616:	1ad3      	subs	r3, r2, r3
 8016618:	b29a      	uxth	r2, r3
 801661a:	4b80      	ldr	r3, [pc, #512]	; (801681c <tcp_receive+0xb0c>)
 801661c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801661e:	4b7f      	ldr	r3, [pc, #508]	; (801681c <tcp_receive+0xb0c>)
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	899b      	ldrh	r3, [r3, #12]
 8016624:	b29b      	uxth	r3, r3
 8016626:	4618      	mov	r0, r3
 8016628:	f7fa fc0a 	bl	8010e40 <lwip_htons>
 801662c:	4603      	mov	r3, r0
 801662e:	b2db      	uxtb	r3, r3
 8016630:	f003 0302 	and.w	r3, r3, #2
 8016634:	2b00      	cmp	r3, #0
 8016636:	d005      	beq.n	8016644 <tcp_receive+0x934>
                inseg.len -= 1;
 8016638:	4b78      	ldr	r3, [pc, #480]	; (801681c <tcp_receive+0xb0c>)
 801663a:	891b      	ldrh	r3, [r3, #8]
 801663c:	3b01      	subs	r3, #1
 801663e:	b29a      	uxth	r2, r3
 8016640:	4b76      	ldr	r3, [pc, #472]	; (801681c <tcp_receive+0xb0c>)
 8016642:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016644:	4b75      	ldr	r3, [pc, #468]	; (801681c <tcp_receive+0xb0c>)
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	4a74      	ldr	r2, [pc, #464]	; (801681c <tcp_receive+0xb0c>)
 801664a:	8912      	ldrh	r2, [r2, #8]
 801664c:	4611      	mov	r1, r2
 801664e:	4618      	mov	r0, r3
 8016650:	f7fb fe1c 	bl	801228c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016654:	4b71      	ldr	r3, [pc, #452]	; (801681c <tcp_receive+0xb0c>)
 8016656:	891c      	ldrh	r4, [r3, #8]
 8016658:	4b70      	ldr	r3, [pc, #448]	; (801681c <tcp_receive+0xb0c>)
 801665a:	68db      	ldr	r3, [r3, #12]
 801665c:	899b      	ldrh	r3, [r3, #12]
 801665e:	b29b      	uxth	r3, r3
 8016660:	4618      	mov	r0, r3
 8016662:	f7fa fbed 	bl	8010e40 <lwip_htons>
 8016666:	4603      	mov	r3, r0
 8016668:	b2db      	uxtb	r3, r3
 801666a:	f003 0303 	and.w	r3, r3, #3
 801666e:	2b00      	cmp	r3, #0
 8016670:	d001      	beq.n	8016676 <tcp_receive+0x966>
 8016672:	2301      	movs	r3, #1
 8016674:	e000      	b.n	8016678 <tcp_receive+0x968>
 8016676:	2300      	movs	r3, #0
 8016678:	4423      	add	r3, r4
 801667a:	b29a      	uxth	r2, r3
 801667c:	4b65      	ldr	r3, [pc, #404]	; (8016814 <tcp_receive+0xb04>)
 801667e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016680:	4b64      	ldr	r3, [pc, #400]	; (8016814 <tcp_receive+0xb04>)
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	461a      	mov	r2, r3
 8016686:	4b64      	ldr	r3, [pc, #400]	; (8016818 <tcp_receive+0xb08>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	441a      	add	r2, r3
 801668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801668e:	68db      	ldr	r3, [r3, #12]
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	429a      	cmp	r2, r3
 8016694:	d006      	beq.n	80166a4 <tcp_receive+0x994>
 8016696:	4b62      	ldr	r3, [pc, #392]	; (8016820 <tcp_receive+0xb10>)
 8016698:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801669c:	4961      	ldr	r1, [pc, #388]	; (8016824 <tcp_receive+0xb14>)
 801669e:	4862      	ldr	r0, [pc, #392]	; (8016828 <tcp_receive+0xb18>)
 80166a0:	f005 fd40 	bl	801c124 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80166a8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80166aa:	4b5a      	ldr	r3, [pc, #360]	; (8016814 <tcp_receive+0xb04>)
 80166ac:	881b      	ldrh	r3, [r3, #0]
 80166ae:	461a      	mov	r2, r3
 80166b0:	4b59      	ldr	r3, [pc, #356]	; (8016818 <tcp_receive+0xb08>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	441a      	add	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80166be:	4b55      	ldr	r3, [pc, #340]	; (8016814 <tcp_receive+0xb04>)
 80166c0:	881b      	ldrh	r3, [r3, #0]
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d206      	bcs.n	80166d4 <tcp_receive+0x9c4>
 80166c6:	4b56      	ldr	r3, [pc, #344]	; (8016820 <tcp_receive+0xb10>)
 80166c8:	f240 6207 	movw	r2, #1543	; 0x607
 80166cc:	4957      	ldr	r1, [pc, #348]	; (801682c <tcp_receive+0xb1c>)
 80166ce:	4856      	ldr	r0, [pc, #344]	; (8016828 <tcp_receive+0xb18>)
 80166d0:	f005 fd28 	bl	801c124 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80166d8:	4b4e      	ldr	r3, [pc, #312]	; (8016814 <tcp_receive+0xb04>)
 80166da:	881b      	ldrh	r3, [r3, #0]
 80166dc:	1ad3      	subs	r3, r2, r3
 80166de:	b29a      	uxth	r2, r3
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7fc feb5 	bl	8013454 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80166ea:	4b4c      	ldr	r3, [pc, #304]	; (801681c <tcp_receive+0xb0c>)
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	891b      	ldrh	r3, [r3, #8]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d006      	beq.n	8016702 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80166f4:	4b49      	ldr	r3, [pc, #292]	; (801681c <tcp_receive+0xb0c>)
 80166f6:	685b      	ldr	r3, [r3, #4]
 80166f8:	4a4d      	ldr	r2, [pc, #308]	; (8016830 <tcp_receive+0xb20>)
 80166fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80166fc:	4b47      	ldr	r3, [pc, #284]	; (801681c <tcp_receive+0xb0c>)
 80166fe:	2200      	movs	r2, #0
 8016700:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016702:	4b46      	ldr	r3, [pc, #280]	; (801681c <tcp_receive+0xb0c>)
 8016704:	68db      	ldr	r3, [r3, #12]
 8016706:	899b      	ldrh	r3, [r3, #12]
 8016708:	b29b      	uxth	r3, r3
 801670a:	4618      	mov	r0, r3
 801670c:	f7fa fb98 	bl	8010e40 <lwip_htons>
 8016710:	4603      	mov	r3, r0
 8016712:	b2db      	uxtb	r3, r3
 8016714:	f003 0301 	and.w	r3, r3, #1
 8016718:	2b00      	cmp	r3, #0
 801671a:	f000 80b8 	beq.w	801688e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801671e:	4b45      	ldr	r3, [pc, #276]	; (8016834 <tcp_receive+0xb24>)
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	f043 0320 	orr.w	r3, r3, #32
 8016726:	b2da      	uxtb	r2, r3
 8016728:	4b42      	ldr	r3, [pc, #264]	; (8016834 <tcp_receive+0xb24>)
 801672a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801672c:	e0af      	b.n	801688e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016732:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016738:	68db      	ldr	r3, [r3, #12]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	4a36      	ldr	r2, [pc, #216]	; (8016818 <tcp_receive+0xb08>)
 801673e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	891b      	ldrh	r3, [r3, #8]
 8016744:	461c      	mov	r4, r3
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	899b      	ldrh	r3, [r3, #12]
 801674c:	b29b      	uxth	r3, r3
 801674e:	4618      	mov	r0, r3
 8016750:	f7fa fb76 	bl	8010e40 <lwip_htons>
 8016754:	4603      	mov	r3, r0
 8016756:	b2db      	uxtb	r3, r3
 8016758:	f003 0303 	and.w	r3, r3, #3
 801675c:	2b00      	cmp	r3, #0
 801675e:	d001      	beq.n	8016764 <tcp_receive+0xa54>
 8016760:	2301      	movs	r3, #1
 8016762:	e000      	b.n	8016766 <tcp_receive+0xa56>
 8016764:	2300      	movs	r3, #0
 8016766:	191a      	adds	r2, r3, r4
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801676c:	441a      	add	r2, r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016776:	461c      	mov	r4, r3
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	891b      	ldrh	r3, [r3, #8]
 801677c:	461d      	mov	r5, r3
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	68db      	ldr	r3, [r3, #12]
 8016782:	899b      	ldrh	r3, [r3, #12]
 8016784:	b29b      	uxth	r3, r3
 8016786:	4618      	mov	r0, r3
 8016788:	f7fa fb5a 	bl	8010e40 <lwip_htons>
 801678c:	4603      	mov	r3, r0
 801678e:	b2db      	uxtb	r3, r3
 8016790:	f003 0303 	and.w	r3, r3, #3
 8016794:	2b00      	cmp	r3, #0
 8016796:	d001      	beq.n	801679c <tcp_receive+0xa8c>
 8016798:	2301      	movs	r3, #1
 801679a:	e000      	b.n	801679e <tcp_receive+0xa8e>
 801679c:	2300      	movs	r3, #0
 801679e:	442b      	add	r3, r5
 80167a0:	429c      	cmp	r4, r3
 80167a2:	d206      	bcs.n	80167b2 <tcp_receive+0xaa2>
 80167a4:	4b1e      	ldr	r3, [pc, #120]	; (8016820 <tcp_receive+0xb10>)
 80167a6:	f240 622b 	movw	r2, #1579	; 0x62b
 80167aa:	4923      	ldr	r1, [pc, #140]	; (8016838 <tcp_receive+0xb28>)
 80167ac:	481e      	ldr	r0, [pc, #120]	; (8016828 <tcp_receive+0xb18>)
 80167ae:	f005 fcb9 	bl	801c124 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	891b      	ldrh	r3, [r3, #8]
 80167b6:	461c      	mov	r4, r3
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	68db      	ldr	r3, [r3, #12]
 80167bc:	899b      	ldrh	r3, [r3, #12]
 80167be:	b29b      	uxth	r3, r3
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7fa fb3d 	bl	8010e40 <lwip_htons>
 80167c6:	4603      	mov	r3, r0
 80167c8:	b2db      	uxtb	r3, r3
 80167ca:	f003 0303 	and.w	r3, r3, #3
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d001      	beq.n	80167d6 <tcp_receive+0xac6>
 80167d2:	2301      	movs	r3, #1
 80167d4:	e000      	b.n	80167d8 <tcp_receive+0xac8>
 80167d6:	2300      	movs	r3, #0
 80167d8:	1919      	adds	r1, r3, r4
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80167de:	b28b      	uxth	r3, r1
 80167e0:	1ad3      	subs	r3, r2, r3
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7fc fe33 	bl	8013454 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	891b      	ldrh	r3, [r3, #8]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d028      	beq.n	801684a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80167f8:	4b0d      	ldr	r3, [pc, #52]	; (8016830 <tcp_receive+0xb20>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d01d      	beq.n	801683c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016800:	4b0b      	ldr	r3, [pc, #44]	; (8016830 <tcp_receive+0xb20>)
 8016802:	681a      	ldr	r2, [r3, #0]
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	4619      	mov	r1, r3
 801680a:	4610      	mov	r0, r2
 801680c:	f7fb ff92 	bl	8012734 <pbuf_cat>
 8016810:	e018      	b.n	8016844 <tcp_receive+0xb34>
 8016812:	bf00      	nop
 8016814:	200098f2 	.word	0x200098f2
 8016818:	200098e8 	.word	0x200098e8
 801681c:	200098c8 	.word	0x200098c8
 8016820:	0801fc90 	.word	0x0801fc90
 8016824:	08020070 	.word	0x08020070
 8016828:	0801fcdc 	.word	0x0801fcdc
 801682c:	080200ac 	.word	0x080200ac
 8016830:	200098f8 	.word	0x200098f8
 8016834:	200098f5 	.word	0x200098f5
 8016838:	080200cc 	.word	0x080200cc
            } else {
              recv_data = cseg->p;
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	4a70      	ldr	r2, [pc, #448]	; (8016a04 <tcp_receive+0xcf4>)
 8016842:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	2200      	movs	r2, #0
 8016848:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	68db      	ldr	r3, [r3, #12]
 801684e:	899b      	ldrh	r3, [r3, #12]
 8016850:	b29b      	uxth	r3, r3
 8016852:	4618      	mov	r0, r3
 8016854:	f7fa faf4 	bl	8010e40 <lwip_htons>
 8016858:	4603      	mov	r3, r0
 801685a:	b2db      	uxtb	r3, r3
 801685c:	f003 0301 	and.w	r3, r3, #1
 8016860:	2b00      	cmp	r3, #0
 8016862:	d00d      	beq.n	8016880 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016864:	4b68      	ldr	r3, [pc, #416]	; (8016a08 <tcp_receive+0xcf8>)
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	f043 0320 	orr.w	r3, r3, #32
 801686c:	b2da      	uxtb	r2, r3
 801686e:	4b66      	ldr	r3, [pc, #408]	; (8016a08 <tcp_receive+0xcf8>)
 8016870:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	7d1b      	ldrb	r3, [r3, #20]
 8016876:	2b04      	cmp	r3, #4
 8016878:	d102      	bne.n	8016880 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2207      	movs	r2, #7
 801687e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	681a      	ldr	r2, [r3, #0]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016888:	68b8      	ldr	r0, [r7, #8]
 801688a:	f7fd fb08 	bl	8013e9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016892:	2b00      	cmp	r3, #0
 8016894:	d008      	beq.n	80168a8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	685a      	ldr	r2, [r3, #4]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80168a2:	429a      	cmp	r2, r3
 80168a4:	f43f af43 	beq.w	801672e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	8b5b      	ldrh	r3, [r3, #26]
 80168ac:	f003 0301 	and.w	r3, r3, #1
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d00e      	beq.n	80168d2 <tcp_receive+0xbc2>
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	8b5b      	ldrh	r3, [r3, #26]
 80168b8:	f023 0301 	bic.w	r3, r3, #1
 80168bc:	b29a      	uxth	r2, r3
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	835a      	strh	r2, [r3, #26]
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	8b5b      	ldrh	r3, [r3, #26]
 80168c6:	f043 0302 	orr.w	r3, r3, #2
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80168d0:	e188      	b.n	8016be4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	8b5b      	ldrh	r3, [r3, #26]
 80168d6:	f043 0301 	orr.w	r3, r3, #1
 80168da:	b29a      	uxth	r2, r3
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80168e0:	e180      	b.n	8016be4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d106      	bne.n	80168f8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80168ea:	4848      	ldr	r0, [pc, #288]	; (8016a0c <tcp_receive+0xcfc>)
 80168ec:	f7fd faf0 	bl	8013ed0 <tcp_seg_copy>
 80168f0:	4602      	mov	r2, r0
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	675a      	str	r2, [r3, #116]	; 0x74
 80168f6:	e16d      	b.n	8016bd4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80168f8:	2300      	movs	r3, #0
 80168fa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016900:	63bb      	str	r3, [r7, #56]	; 0x38
 8016902:	e157      	b.n	8016bb4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8016904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	685a      	ldr	r2, [r3, #4]
 801690a:	4b41      	ldr	r3, [pc, #260]	; (8016a10 <tcp_receive+0xd00>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	429a      	cmp	r2, r3
 8016910:	d11d      	bne.n	801694e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016912:	4b3e      	ldr	r3, [pc, #248]	; (8016a0c <tcp_receive+0xcfc>)
 8016914:	891a      	ldrh	r2, [r3, #8]
 8016916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016918:	891b      	ldrh	r3, [r3, #8]
 801691a:	429a      	cmp	r2, r3
 801691c:	f240 814f 	bls.w	8016bbe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016920:	483a      	ldr	r0, [pc, #232]	; (8016a0c <tcp_receive+0xcfc>)
 8016922:	f7fd fad5 	bl	8013ed0 <tcp_seg_copy>
 8016926:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	2b00      	cmp	r3, #0
 801692c:	f000 8149 	beq.w	8016bc2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8016930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016932:	2b00      	cmp	r3, #0
 8016934:	d003      	beq.n	801693e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8016936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016938:	697a      	ldr	r2, [r7, #20]
 801693a:	601a      	str	r2, [r3, #0]
 801693c:	e002      	b.n	8016944 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	697a      	ldr	r2, [r7, #20]
 8016942:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016944:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016946:	6978      	ldr	r0, [r7, #20]
 8016948:	f7ff f8de 	bl	8015b08 <tcp_oos_insert_segment>
                }
                break;
 801694c:	e139      	b.n	8016bc2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016950:	2b00      	cmp	r3, #0
 8016952:	d117      	bne.n	8016984 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016954:	4b2e      	ldr	r3, [pc, #184]	; (8016a10 <tcp_receive+0xd00>)
 8016956:	681a      	ldr	r2, [r3, #0]
 8016958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801695a:	68db      	ldr	r3, [r3, #12]
 801695c:	685b      	ldr	r3, [r3, #4]
 801695e:	1ad3      	subs	r3, r2, r3
 8016960:	2b00      	cmp	r3, #0
 8016962:	da57      	bge.n	8016a14 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016964:	4829      	ldr	r0, [pc, #164]	; (8016a0c <tcp_receive+0xcfc>)
 8016966:	f7fd fab3 	bl	8013ed0 <tcp_seg_copy>
 801696a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	2b00      	cmp	r3, #0
 8016970:	f000 8129 	beq.w	8016bc6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	69ba      	ldr	r2, [r7, #24]
 8016978:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801697a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801697c:	69b8      	ldr	r0, [r7, #24]
 801697e:	f7ff f8c3 	bl	8015b08 <tcp_oos_insert_segment>
                  }
                  break;
 8016982:	e120      	b.n	8016bc6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016984:	4b22      	ldr	r3, [pc, #136]	; (8016a10 <tcp_receive+0xd00>)
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801698a:	68db      	ldr	r3, [r3, #12]
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	1ad3      	subs	r3, r2, r3
 8016990:	3b01      	subs	r3, #1
 8016992:	2b00      	cmp	r3, #0
 8016994:	db3e      	blt.n	8016a14 <tcp_receive+0xd04>
 8016996:	4b1e      	ldr	r3, [pc, #120]	; (8016a10 <tcp_receive+0xd00>)
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699c:	68db      	ldr	r3, [r3, #12]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	3301      	adds	r3, #1
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	dc35      	bgt.n	8016a14 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80169a8:	4818      	ldr	r0, [pc, #96]	; (8016a0c <tcp_receive+0xcfc>)
 80169aa:	f7fd fa91 	bl	8013ed0 <tcp_seg_copy>
 80169ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f000 8109 	beq.w	8016bca <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80169b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169ba:	68db      	ldr	r3, [r3, #12]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169c0:	8912      	ldrh	r2, [r2, #8]
 80169c2:	441a      	add	r2, r3
 80169c4:	4b12      	ldr	r3, [pc, #72]	; (8016a10 <tcp_receive+0xd00>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	1ad3      	subs	r3, r2, r3
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	dd12      	ble.n	80169f4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80169ce:	4b10      	ldr	r3, [pc, #64]	; (8016a10 <tcp_receive+0xd00>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	b29a      	uxth	r2, r3
 80169d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169d6:	68db      	ldr	r3, [r3, #12]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	b29b      	uxth	r3, r3
 80169dc:	1ad3      	subs	r3, r2, r3
 80169de:	b29a      	uxth	r2, r3
 80169e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80169e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169e6:	685a      	ldr	r2, [r3, #4]
 80169e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169ea:	891b      	ldrh	r3, [r3, #8]
 80169ec:	4619      	mov	r1, r3
 80169ee:	4610      	mov	r0, r2
 80169f0:	f7fb fc4c 	bl	801228c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80169f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169f6:	69fa      	ldr	r2, [r7, #28]
 80169f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80169fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80169fc:	69f8      	ldr	r0, [r7, #28]
 80169fe:	f7ff f883 	bl	8015b08 <tcp_oos_insert_segment>
                  }
                  break;
 8016a02:	e0e2      	b.n	8016bca <tcp_receive+0xeba>
 8016a04:	200098f8 	.word	0x200098f8
 8016a08:	200098f5 	.word	0x200098f5
 8016a0c:	200098c8 	.word	0x200098c8
 8016a10:	200098e8 	.word	0x200098e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a16:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f040 80c6 	bne.w	8016bae <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016a22:	4b80      	ldr	r3, [pc, #512]	; (8016c24 <tcp_receive+0xf14>)
 8016a24:	681a      	ldr	r2, [r3, #0]
 8016a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a28:	68db      	ldr	r3, [r3, #12]
 8016a2a:	685b      	ldr	r3, [r3, #4]
 8016a2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	f340 80bd 	ble.w	8016bae <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a36:	68db      	ldr	r3, [r3, #12]
 8016a38:	899b      	ldrh	r3, [r3, #12]
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fa f9ff 	bl	8010e40 <lwip_htons>
 8016a42:	4603      	mov	r3, r0
 8016a44:	b2db      	uxtb	r3, r3
 8016a46:	f003 0301 	and.w	r3, r3, #1
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f040 80bf 	bne.w	8016bce <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016a50:	4875      	ldr	r0, [pc, #468]	; (8016c28 <tcp_receive+0xf18>)
 8016a52:	f7fd fa3d 	bl	8013ed0 <tcp_seg_copy>
 8016a56:	4602      	mov	r2, r0
 8016a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f000 80b6 	beq.w	8016bd2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016a6e:	8912      	ldrh	r2, [r2, #8]
 8016a70:	441a      	add	r2, r3
 8016a72:	4b6c      	ldr	r3, [pc, #432]	; (8016c24 <tcp_receive+0xf14>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	1ad3      	subs	r3, r2, r3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	dd12      	ble.n	8016aa2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016a7c:	4b69      	ldr	r3, [pc, #420]	; (8016c24 <tcp_receive+0xf14>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a84:	68db      	ldr	r3, [r3, #12]
 8016a86:	685b      	ldr	r3, [r3, #4]
 8016a88:	b29b      	uxth	r3, r3
 8016a8a:	1ad3      	subs	r3, r2, r3
 8016a8c:	b29a      	uxth	r2, r3
 8016a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a94:	685a      	ldr	r2, [r3, #4]
 8016a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a98:	891b      	ldrh	r3, [r3, #8]
 8016a9a:	4619      	mov	r1, r3
 8016a9c:	4610      	mov	r0, r2
 8016a9e:	f7fb fbf5 	bl	801228c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016aa2:	4b62      	ldr	r3, [pc, #392]	; (8016c2c <tcp_receive+0xf1c>)
 8016aa4:	881b      	ldrh	r3, [r3, #0]
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	4b5e      	ldr	r3, [pc, #376]	; (8016c24 <tcp_receive+0xf14>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	441a      	add	r2, r3
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab2:	6879      	ldr	r1, [r7, #4]
 8016ab4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016ab6:	440b      	add	r3, r1
 8016ab8:	1ad3      	subs	r3, r2, r3
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	f340 8089 	ble.w	8016bd2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	68db      	ldr	r3, [r3, #12]
 8016ac6:	899b      	ldrh	r3, [r3, #12]
 8016ac8:	b29b      	uxth	r3, r3
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fa f9b8 	bl	8010e40 <lwip_htons>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	f003 0301 	and.w	r3, r3, #1
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d022      	beq.n	8016b22 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	68db      	ldr	r3, [r3, #12]
 8016ae2:	899b      	ldrh	r3, [r3, #12]
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	b21b      	sxth	r3, r3
 8016ae8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016aec:	b21c      	sxth	r4, r3
 8016aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	899b      	ldrh	r3, [r3, #12]
 8016af6:	b29b      	uxth	r3, r3
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7fa f9a1 	bl	8010e40 <lwip_htons>
 8016afe:	4603      	mov	r3, r0
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	b29b      	uxth	r3, r3
 8016b04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fa f998 	bl	8010e40 <lwip_htons>
 8016b10:	4603      	mov	r3, r0
 8016b12:	b21b      	sxth	r3, r3
 8016b14:	4323      	orrs	r3, r4
 8016b16:	b21a      	sxth	r2, r3
 8016b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	b292      	uxth	r2, r2
 8016b20:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b26:	b29a      	uxth	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b2c:	4413      	add	r3, r2
 8016b2e:	b299      	uxth	r1, r3
 8016b30:	4b3c      	ldr	r3, [pc, #240]	; (8016c24 <tcp_receive+0xf14>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	b29a      	uxth	r2, r3
 8016b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	1a8a      	subs	r2, r1, r2
 8016b3c:	b292      	uxth	r2, r2
 8016b3e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	685a      	ldr	r2, [r3, #4]
 8016b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	891b      	ldrh	r3, [r3, #8]
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	4610      	mov	r0, r2
 8016b50:	f7fb fb9c 	bl	801228c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	891c      	ldrh	r4, [r3, #8]
 8016b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	68db      	ldr	r3, [r3, #12]
 8016b60:	899b      	ldrh	r3, [r3, #12]
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7fa f96b 	bl	8010e40 <lwip_htons>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	b2db      	uxtb	r3, r3
 8016b6e:	f003 0303 	and.w	r3, r3, #3
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d001      	beq.n	8016b7a <tcp_receive+0xe6a>
 8016b76:	2301      	movs	r3, #1
 8016b78:	e000      	b.n	8016b7c <tcp_receive+0xe6c>
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	4423      	add	r3, r4
 8016b7e:	b29a      	uxth	r2, r3
 8016b80:	4b2a      	ldr	r3, [pc, #168]	; (8016c2c <tcp_receive+0xf1c>)
 8016b82:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016b84:	4b29      	ldr	r3, [pc, #164]	; (8016c2c <tcp_receive+0xf1c>)
 8016b86:	881b      	ldrh	r3, [r3, #0]
 8016b88:	461a      	mov	r2, r3
 8016b8a:	4b26      	ldr	r3, [pc, #152]	; (8016c24 <tcp_receive+0xf14>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	441a      	add	r2, r3
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b94:	6879      	ldr	r1, [r7, #4]
 8016b96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016b98:	440b      	add	r3, r1
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d019      	beq.n	8016bd2 <tcp_receive+0xec2>
 8016b9e:	4b24      	ldr	r3, [pc, #144]	; (8016c30 <tcp_receive+0xf20>)
 8016ba0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016ba4:	4923      	ldr	r1, [pc, #140]	; (8016c34 <tcp_receive+0xf24>)
 8016ba6:	4824      	ldr	r0, [pc, #144]	; (8016c38 <tcp_receive+0xf28>)
 8016ba8:	f005 fabc 	bl	801c124 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016bac:	e011      	b.n	8016bd2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8016bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	f47f aea4 	bne.w	8016904 <tcp_receive+0xbf4>
 8016bbc:	e00a      	b.n	8016bd4 <tcp_receive+0xec4>
                break;
 8016bbe:	bf00      	nop
 8016bc0:	e008      	b.n	8016bd4 <tcp_receive+0xec4>
                break;
 8016bc2:	bf00      	nop
 8016bc4:	e006      	b.n	8016bd4 <tcp_receive+0xec4>
                  break;
 8016bc6:	bf00      	nop
 8016bc8:	e004      	b.n	8016bd4 <tcp_receive+0xec4>
                  break;
 8016bca:	bf00      	nop
 8016bcc:	e002      	b.n	8016bd4 <tcp_receive+0xec4>
                  break;
 8016bce:	bf00      	nop
 8016bd0:	e000      	b.n	8016bd4 <tcp_receive+0xec4>
                break;
 8016bd2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f001 fe8b 	bl	80188f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016bda:	e003      	b.n	8016be4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f001 fe87 	bl	80188f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016be2:	e01a      	b.n	8016c1a <tcp_receive+0xf0a>
 8016be4:	e019      	b.n	8016c1a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016be6:	4b0f      	ldr	r3, [pc, #60]	; (8016c24 <tcp_receive+0xf14>)
 8016be8:	681a      	ldr	r2, [r3, #0]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bee:	1ad3      	subs	r3, r2, r3
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	db0a      	blt.n	8016c0a <tcp_receive+0xefa>
 8016bf4:	4b0b      	ldr	r3, [pc, #44]	; (8016c24 <tcp_receive+0xf14>)
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bfc:	6879      	ldr	r1, [r7, #4]
 8016bfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016c00:	440b      	add	r3, r1
 8016c02:	1ad3      	subs	r3, r2, r3
 8016c04:	3301      	adds	r3, #1
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	dd07      	ble.n	8016c1a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	8b5b      	ldrh	r3, [r3, #26]
 8016c0e:	f043 0302 	orr.w	r3, r3, #2
 8016c12:	b29a      	uxth	r2, r3
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016c18:	e7ff      	b.n	8016c1a <tcp_receive+0xf0a>
 8016c1a:	bf00      	nop
 8016c1c:	3750      	adds	r7, #80	; 0x50
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bdb0      	pop	{r4, r5, r7, pc}
 8016c22:	bf00      	nop
 8016c24:	200098e8 	.word	0x200098e8
 8016c28:	200098c8 	.word	0x200098c8
 8016c2c:	200098f2 	.word	0x200098f2
 8016c30:	0801fc90 	.word	0x0801fc90
 8016c34:	08020038 	.word	0x08020038
 8016c38:	0801fcdc 	.word	0x0801fcdc

08016c3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016c42:	4b15      	ldr	r3, [pc, #84]	; (8016c98 <tcp_get_next_optbyte+0x5c>)
 8016c44:	881b      	ldrh	r3, [r3, #0]
 8016c46:	1c5a      	adds	r2, r3, #1
 8016c48:	b291      	uxth	r1, r2
 8016c4a:	4a13      	ldr	r2, [pc, #76]	; (8016c98 <tcp_get_next_optbyte+0x5c>)
 8016c4c:	8011      	strh	r1, [r2, #0]
 8016c4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016c50:	4b12      	ldr	r3, [pc, #72]	; (8016c9c <tcp_get_next_optbyte+0x60>)
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d004      	beq.n	8016c62 <tcp_get_next_optbyte+0x26>
 8016c58:	4b11      	ldr	r3, [pc, #68]	; (8016ca0 <tcp_get_next_optbyte+0x64>)
 8016c5a:	881b      	ldrh	r3, [r3, #0]
 8016c5c:	88fa      	ldrh	r2, [r7, #6]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d208      	bcs.n	8016c74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016c62:	4b10      	ldr	r3, [pc, #64]	; (8016ca4 <tcp_get_next_optbyte+0x68>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	3314      	adds	r3, #20
 8016c68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016c6a:	88fb      	ldrh	r3, [r7, #6]
 8016c6c:	683a      	ldr	r2, [r7, #0]
 8016c6e:	4413      	add	r3, r2
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	e00b      	b.n	8016c8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016c74:	88fb      	ldrh	r3, [r7, #6]
 8016c76:	b2da      	uxtb	r2, r3
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <tcp_get_next_optbyte+0x64>)
 8016c7a:	881b      	ldrh	r3, [r3, #0]
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	1ad3      	subs	r3, r2, r3
 8016c80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016c82:	4b06      	ldr	r3, [pc, #24]	; (8016c9c <tcp_get_next_optbyte+0x60>)
 8016c84:	681a      	ldr	r2, [r3, #0]
 8016c86:	797b      	ldrb	r3, [r7, #5]
 8016c88:	4413      	add	r3, r2
 8016c8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	370c      	adds	r7, #12
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr
 8016c98:	200098e4 	.word	0x200098e4
 8016c9c:	200098e0 	.word	0x200098e0
 8016ca0:	200098de 	.word	0x200098de
 8016ca4:	200098d8 	.word	0x200098d8

08016ca8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d106      	bne.n	8016cc4 <tcp_parseopt+0x1c>
 8016cb6:	4b32      	ldr	r3, [pc, #200]	; (8016d80 <tcp_parseopt+0xd8>)
 8016cb8:	f240 727d 	movw	r2, #1917	; 0x77d
 8016cbc:	4931      	ldr	r1, [pc, #196]	; (8016d84 <tcp_parseopt+0xdc>)
 8016cbe:	4832      	ldr	r0, [pc, #200]	; (8016d88 <tcp_parseopt+0xe0>)
 8016cc0:	f005 fa30 	bl	801c124 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016cc4:	4b31      	ldr	r3, [pc, #196]	; (8016d8c <tcp_parseopt+0xe4>)
 8016cc6:	881b      	ldrh	r3, [r3, #0]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d055      	beq.n	8016d78 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016ccc:	4b30      	ldr	r3, [pc, #192]	; (8016d90 <tcp_parseopt+0xe8>)
 8016cce:	2200      	movs	r2, #0
 8016cd0:	801a      	strh	r2, [r3, #0]
 8016cd2:	e045      	b.n	8016d60 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016cd4:	f7ff ffb2 	bl	8016c3c <tcp_get_next_optbyte>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016cdc:	7bfb      	ldrb	r3, [r7, #15]
 8016cde:	2b02      	cmp	r3, #2
 8016ce0:	d006      	beq.n	8016cf0 <tcp_parseopt+0x48>
 8016ce2:	2b02      	cmp	r3, #2
 8016ce4:	dc2b      	bgt.n	8016d3e <tcp_parseopt+0x96>
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d041      	beq.n	8016d6e <tcp_parseopt+0xc6>
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	d127      	bne.n	8016d3e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016cee:	e037      	b.n	8016d60 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016cf0:	f7ff ffa4 	bl	8016c3c <tcp_get_next_optbyte>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	2b04      	cmp	r3, #4
 8016cf8:	d13b      	bne.n	8016d72 <tcp_parseopt+0xca>
 8016cfa:	4b25      	ldr	r3, [pc, #148]	; (8016d90 <tcp_parseopt+0xe8>)
 8016cfc:	881b      	ldrh	r3, [r3, #0]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	4a22      	ldr	r2, [pc, #136]	; (8016d8c <tcp_parseopt+0xe4>)
 8016d02:	8812      	ldrh	r2, [r2, #0]
 8016d04:	4293      	cmp	r3, r2
 8016d06:	da34      	bge.n	8016d72 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016d08:	f7ff ff98 	bl	8016c3c <tcp_get_next_optbyte>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	021b      	lsls	r3, r3, #8
 8016d12:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016d14:	f7ff ff92 	bl	8016c3c <tcp_get_next_optbyte>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	b29a      	uxth	r2, r3
 8016d1c:	89bb      	ldrh	r3, [r7, #12]
 8016d1e:	4313      	orrs	r3, r2
 8016d20:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016d22:	89bb      	ldrh	r3, [r7, #12]
 8016d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016d28:	d804      	bhi.n	8016d34 <tcp_parseopt+0x8c>
 8016d2a:	89bb      	ldrh	r3, [r7, #12]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d001      	beq.n	8016d34 <tcp_parseopt+0x8c>
 8016d30:	89ba      	ldrh	r2, [r7, #12]
 8016d32:	e001      	b.n	8016d38 <tcp_parseopt+0x90>
 8016d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016d3c:	e010      	b.n	8016d60 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016d3e:	f7ff ff7d 	bl	8016c3c <tcp_get_next_optbyte>
 8016d42:	4603      	mov	r3, r0
 8016d44:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016d46:	7afb      	ldrb	r3, [r7, #11]
 8016d48:	2b01      	cmp	r3, #1
 8016d4a:	d914      	bls.n	8016d76 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016d4c:	7afb      	ldrb	r3, [r7, #11]
 8016d4e:	b29a      	uxth	r2, r3
 8016d50:	4b0f      	ldr	r3, [pc, #60]	; (8016d90 <tcp_parseopt+0xe8>)
 8016d52:	881b      	ldrh	r3, [r3, #0]
 8016d54:	4413      	add	r3, r2
 8016d56:	b29b      	uxth	r3, r3
 8016d58:	3b02      	subs	r3, #2
 8016d5a:	b29a      	uxth	r2, r3
 8016d5c:	4b0c      	ldr	r3, [pc, #48]	; (8016d90 <tcp_parseopt+0xe8>)
 8016d5e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016d60:	4b0b      	ldr	r3, [pc, #44]	; (8016d90 <tcp_parseopt+0xe8>)
 8016d62:	881a      	ldrh	r2, [r3, #0]
 8016d64:	4b09      	ldr	r3, [pc, #36]	; (8016d8c <tcp_parseopt+0xe4>)
 8016d66:	881b      	ldrh	r3, [r3, #0]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d3b3      	bcc.n	8016cd4 <tcp_parseopt+0x2c>
 8016d6c:	e004      	b.n	8016d78 <tcp_parseopt+0xd0>
          return;
 8016d6e:	bf00      	nop
 8016d70:	e002      	b.n	8016d78 <tcp_parseopt+0xd0>
            return;
 8016d72:	bf00      	nop
 8016d74:	e000      	b.n	8016d78 <tcp_parseopt+0xd0>
            return;
 8016d76:	bf00      	nop
      }
    }
  }
}
 8016d78:	3710      	adds	r7, #16
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
 8016d7e:	bf00      	nop
 8016d80:	0801fc90 	.word	0x0801fc90
 8016d84:	080200f4 	.word	0x080200f4
 8016d88:	0801fcdc 	.word	0x0801fcdc
 8016d8c:	200098dc 	.word	0x200098dc
 8016d90:	200098e4 	.word	0x200098e4

08016d94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016d94:	b480      	push	{r7}
 8016d96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016d98:	4b05      	ldr	r3, [pc, #20]	; (8016db0 <tcp_trigger_input_pcb_close+0x1c>)
 8016d9a:	781b      	ldrb	r3, [r3, #0]
 8016d9c:	f043 0310 	orr.w	r3, r3, #16
 8016da0:	b2da      	uxtb	r2, r3
 8016da2:	4b03      	ldr	r3, [pc, #12]	; (8016db0 <tcp_trigger_input_pcb_close+0x1c>)
 8016da4:	701a      	strb	r2, [r3, #0]
}
 8016da6:	bf00      	nop
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr
 8016db0:	200098f5 	.word	0x200098f5

08016db4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b084      	sub	sp, #16
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d00a      	beq.n	8016ddc <tcp_route+0x28>
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	7a1b      	ldrb	r3, [r3, #8]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d006      	beq.n	8016ddc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	7a1b      	ldrb	r3, [r3, #8]
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f7fb f852 	bl	8011e7c <netif_get_by_index>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	e003      	b.n	8016de4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f003 fc4b 	bl	801a678 <ip4_route>
 8016de2:	4603      	mov	r3, r0
  }
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	3710      	adds	r7, #16
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}

08016dec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016dec:	b590      	push	{r4, r7, lr}
 8016dee:	b087      	sub	sp, #28
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	60f8      	str	r0, [r7, #12]
 8016df4:	60b9      	str	r1, [r7, #8]
 8016df6:	603b      	str	r3, [r7, #0]
 8016df8:	4613      	mov	r3, r2
 8016dfa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d105      	bne.n	8016e0e <tcp_create_segment+0x22>
 8016e02:	4b44      	ldr	r3, [pc, #272]	; (8016f14 <tcp_create_segment+0x128>)
 8016e04:	22a3      	movs	r2, #163	; 0xa3
 8016e06:	4944      	ldr	r1, [pc, #272]	; (8016f18 <tcp_create_segment+0x12c>)
 8016e08:	4844      	ldr	r0, [pc, #272]	; (8016f1c <tcp_create_segment+0x130>)
 8016e0a:	f005 f98b 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d105      	bne.n	8016e20 <tcp_create_segment+0x34>
 8016e14:	4b3f      	ldr	r3, [pc, #252]	; (8016f14 <tcp_create_segment+0x128>)
 8016e16:	22a4      	movs	r2, #164	; 0xa4
 8016e18:	4941      	ldr	r1, [pc, #260]	; (8016f20 <tcp_create_segment+0x134>)
 8016e1a:	4840      	ldr	r0, [pc, #256]	; (8016f1c <tcp_create_segment+0x130>)
 8016e1c:	f005 f982 	bl	801c124 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016e20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e24:	009b      	lsls	r3, r3, #2
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	f003 0304 	and.w	r3, r3, #4
 8016e2c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016e2e:	2003      	movs	r0, #3
 8016e30:	f7fa fcbc 	bl	80117ac <memp_malloc>
 8016e34:	6138      	str	r0, [r7, #16]
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d104      	bne.n	8016e46 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016e3c:	68b8      	ldr	r0, [r7, #8]
 8016e3e:	f7fb fbab 	bl	8012598 <pbuf_free>
    return NULL;
 8016e42:	2300      	movs	r3, #0
 8016e44:	e061      	b.n	8016f0a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016e4c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016e4e:	693b      	ldr	r3, [r7, #16]
 8016e50:	2200      	movs	r2, #0
 8016e52:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	68ba      	ldr	r2, [r7, #8]
 8016e58:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	891a      	ldrh	r2, [r3, #8]
 8016e5e:	7dfb      	ldrb	r3, [r7, #23]
 8016e60:	b29b      	uxth	r3, r3
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d205      	bcs.n	8016e72 <tcp_create_segment+0x86>
 8016e66:	4b2b      	ldr	r3, [pc, #172]	; (8016f14 <tcp_create_segment+0x128>)
 8016e68:	22b0      	movs	r2, #176	; 0xb0
 8016e6a:	492e      	ldr	r1, [pc, #184]	; (8016f24 <tcp_create_segment+0x138>)
 8016e6c:	482b      	ldr	r0, [pc, #172]	; (8016f1c <tcp_create_segment+0x130>)
 8016e6e:	f005 f959 	bl	801c124 <iprintf>
  seg->len = p->tot_len - optlen;
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	891a      	ldrh	r2, [r3, #8]
 8016e76:	7dfb      	ldrb	r3, [r7, #23]
 8016e78:	b29b      	uxth	r3, r3
 8016e7a:	1ad3      	subs	r3, r2, r3
 8016e7c:	b29a      	uxth	r2, r3
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016e82:	2114      	movs	r1, #20
 8016e84:	68b8      	ldr	r0, [r7, #8]
 8016e86:	f7fb faf1 	bl	801246c <pbuf_add_header>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d004      	beq.n	8016e9a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016e90:	6938      	ldr	r0, [r7, #16]
 8016e92:	f7fd f804 	bl	8013e9e <tcp_seg_free>
    return NULL;
 8016e96:	2300      	movs	r3, #0
 8016e98:	e037      	b.n	8016f0a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	685b      	ldr	r3, [r3, #4]
 8016e9e:	685a      	ldr	r2, [r3, #4]
 8016ea0:	693b      	ldr	r3, [r7, #16]
 8016ea2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	8ada      	ldrh	r2, [r3, #22]
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	68dc      	ldr	r4, [r3, #12]
 8016eac:	4610      	mov	r0, r2
 8016eae:	f7f9 ffc7 	bl	8010e40 <lwip_htons>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	8b1a      	ldrh	r2, [r3, #24]
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	68dc      	ldr	r4, [r3, #12]
 8016ebe:	4610      	mov	r0, r2
 8016ec0:	f7f9 ffbe 	bl	8010e40 <lwip_htons>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	68dc      	ldr	r4, [r3, #12]
 8016ecc:	6838      	ldr	r0, [r7, #0]
 8016ece:	f7f9 ffcc 	bl	8010e6a <lwip_htonl>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016ed6:	7dfb      	ldrb	r3, [r7, #23]
 8016ed8:	089b      	lsrs	r3, r3, #2
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	b29b      	uxth	r3, r3
 8016ede:	3305      	adds	r3, #5
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	031b      	lsls	r3, r3, #12
 8016ee4:	b29a      	uxth	r2, r3
 8016ee6:	79fb      	ldrb	r3, [r7, #7]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	4313      	orrs	r3, r2
 8016eec:	b29a      	uxth	r2, r3
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	68dc      	ldr	r4, [r3, #12]
 8016ef2:	4610      	mov	r0, r2
 8016ef4:	f7f9 ffa4 	bl	8010e40 <lwip_htons>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	2200      	movs	r2, #0
 8016f02:	749a      	strb	r2, [r3, #18]
 8016f04:	2200      	movs	r2, #0
 8016f06:	74da      	strb	r2, [r3, #19]
  return seg;
 8016f08:	693b      	ldr	r3, [r7, #16]
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	371c      	adds	r7, #28
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd90      	pop	{r4, r7, pc}
 8016f12:	bf00      	nop
 8016f14:	08020110 	.word	0x08020110
 8016f18:	08020144 	.word	0x08020144
 8016f1c:	08020164 	.word	0x08020164
 8016f20:	0802018c 	.word	0x0802018c
 8016f24:	080201b0 	.word	0x080201b0

08016f28 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b086      	sub	sp, #24
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	607b      	str	r3, [r7, #4]
 8016f30:	4603      	mov	r3, r0
 8016f32:	73fb      	strb	r3, [r7, #15]
 8016f34:	460b      	mov	r3, r1
 8016f36:	81bb      	strh	r3, [r7, #12]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016f3c:	89bb      	ldrh	r3, [r7, #12]
 8016f3e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d105      	bne.n	8016f52 <tcp_pbuf_prealloc+0x2a>
 8016f46:	4b30      	ldr	r3, [pc, #192]	; (8017008 <tcp_pbuf_prealloc+0xe0>)
 8016f48:	22e8      	movs	r2, #232	; 0xe8
 8016f4a:	4930      	ldr	r1, [pc, #192]	; (801700c <tcp_pbuf_prealloc+0xe4>)
 8016f4c:	4830      	ldr	r0, [pc, #192]	; (8017010 <tcp_pbuf_prealloc+0xe8>)
 8016f4e:	f005 f8e9 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016f52:	6a3b      	ldr	r3, [r7, #32]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d105      	bne.n	8016f64 <tcp_pbuf_prealloc+0x3c>
 8016f58:	4b2b      	ldr	r3, [pc, #172]	; (8017008 <tcp_pbuf_prealloc+0xe0>)
 8016f5a:	22e9      	movs	r2, #233	; 0xe9
 8016f5c:	492d      	ldr	r1, [pc, #180]	; (8017014 <tcp_pbuf_prealloc+0xec>)
 8016f5e:	482c      	ldr	r0, [pc, #176]	; (8017010 <tcp_pbuf_prealloc+0xe8>)
 8016f60:	f005 f8e0 	bl	801c124 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016f64:	89ba      	ldrh	r2, [r7, #12]
 8016f66:	897b      	ldrh	r3, [r7, #10]
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d221      	bcs.n	8016fb0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016f6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f70:	f003 0302 	and.w	r3, r3, #2
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d111      	bne.n	8016f9c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016f78:	6a3b      	ldr	r3, [r7, #32]
 8016f7a:	8b5b      	ldrh	r3, [r3, #26]
 8016f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d115      	bne.n	8016fb0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016f84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d007      	beq.n	8016f9c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016f8c:	6a3b      	ldr	r3, [r7, #32]
 8016f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d103      	bne.n	8016f9c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016f94:	6a3b      	ldr	r3, [r7, #32]
 8016f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d009      	beq.n	8016fb0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016f9c:	89bb      	ldrh	r3, [r7, #12]
 8016f9e:	f203 33eb 	addw	r3, r3, #1003	; 0x3eb
 8016fa2:	f023 0203 	bic.w	r2, r3, #3
 8016fa6:	897b      	ldrh	r3, [r7, #10]
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	bf28      	it	cs
 8016fac:	4613      	movcs	r3, r2
 8016fae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016fb0:	8af9      	ldrh	r1, [r7, #22]
 8016fb2:	7bfb      	ldrb	r3, [r7, #15]
 8016fb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7fb f809 	bl	8011fd0 <pbuf_alloc>
 8016fbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016fc0:	693b      	ldr	r3, [r7, #16]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d101      	bne.n	8016fca <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	e019      	b.n	8016ffe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d006      	beq.n	8016fe0 <tcp_pbuf_prealloc+0xb8>
 8016fd2:	4b0d      	ldr	r3, [pc, #52]	; (8017008 <tcp_pbuf_prealloc+0xe0>)
 8016fd4:	f240 120b 	movw	r2, #267	; 0x10b
 8016fd8:	490f      	ldr	r1, [pc, #60]	; (8017018 <tcp_pbuf_prealloc+0xf0>)
 8016fda:	480d      	ldr	r0, [pc, #52]	; (8017010 <tcp_pbuf_prealloc+0xe8>)
 8016fdc:	f005 f8a2 	bl	801c124 <iprintf>
  *oversize = p->len - length;
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	895a      	ldrh	r2, [r3, #10]
 8016fe4:	89bb      	ldrh	r3, [r7, #12]
 8016fe6:	1ad3      	subs	r3, r2, r3
 8016fe8:	b29a      	uxth	r2, r3
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	89ba      	ldrh	r2, [r7, #12]
 8016ff2:	811a      	strh	r2, [r3, #8]
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	891a      	ldrh	r2, [r3, #8]
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	815a      	strh	r2, [r3, #10]
  return p;
 8016ffc:	693b      	ldr	r3, [r7, #16]
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3718      	adds	r7, #24
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}
 8017006:	bf00      	nop
 8017008:	08020110 	.word	0x08020110
 801700c:	080201c8 	.word	0x080201c8
 8017010:	08020164 	.word	0x08020164
 8017014:	080201ec 	.word	0x080201ec
 8017018:	0802020c 	.word	0x0802020c

0801701c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
 8017024:	460b      	mov	r3, r1
 8017026:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d106      	bne.n	801703c <tcp_write_checks+0x20>
 801702e:	4b33      	ldr	r3, [pc, #204]	; (80170fc <tcp_write_checks+0xe0>)
 8017030:	f240 1233 	movw	r2, #307	; 0x133
 8017034:	4932      	ldr	r1, [pc, #200]	; (8017100 <tcp_write_checks+0xe4>)
 8017036:	4833      	ldr	r0, [pc, #204]	; (8017104 <tcp_write_checks+0xe8>)
 8017038:	f005 f874 	bl	801c124 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	2b04      	cmp	r3, #4
 8017042:	d00e      	beq.n	8017062 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017048:	2b07      	cmp	r3, #7
 801704a:	d00a      	beq.n	8017062 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017050:	2b02      	cmp	r3, #2
 8017052:	d006      	beq.n	8017062 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017058:	2b03      	cmp	r3, #3
 801705a:	d002      	beq.n	8017062 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801705c:	f06f 030a 	mvn.w	r3, #10
 8017060:	e048      	b.n	80170f4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017062:	887b      	ldrh	r3, [r7, #2]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d101      	bne.n	801706c <tcp_write_checks+0x50>
    return ERR_OK;
 8017068:	2300      	movs	r3, #0
 801706a:	e043      	b.n	80170f4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017072:	887a      	ldrh	r2, [r7, #2]
 8017074:	429a      	cmp	r2, r3
 8017076:	d909      	bls.n	801708c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	8b5b      	ldrh	r3, [r3, #26]
 801707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017080:	b29a      	uxth	r2, r3
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801708a:	e033      	b.n	80170f4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017092:	2b08      	cmp	r3, #8
 8017094:	d909      	bls.n	80170aa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	8b5b      	ldrh	r3, [r3, #26]
 801709a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801709e:	b29a      	uxth	r2, r3
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80170a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170a8:	e024      	b.n	80170f4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d00f      	beq.n	80170d4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d11a      	bne.n	80170f2 <tcp_write_checks+0xd6>
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d116      	bne.n	80170f2 <tcp_write_checks+0xd6>
 80170c4:	4b0d      	ldr	r3, [pc, #52]	; (80170fc <tcp_write_checks+0xe0>)
 80170c6:	f240 1255 	movw	r2, #341	; 0x155
 80170ca:	490f      	ldr	r1, [pc, #60]	; (8017108 <tcp_write_checks+0xec>)
 80170cc:	480d      	ldr	r0, [pc, #52]	; (8017104 <tcp_write_checks+0xe8>)
 80170ce:	f005 f829 	bl	801c124 <iprintf>
 80170d2:	e00e      	b.n	80170f2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d103      	bne.n	80170e4 <tcp_write_checks+0xc8>
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d006      	beq.n	80170f2 <tcp_write_checks+0xd6>
 80170e4:	4b05      	ldr	r3, [pc, #20]	; (80170fc <tcp_write_checks+0xe0>)
 80170e6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80170ea:	4908      	ldr	r1, [pc, #32]	; (801710c <tcp_write_checks+0xf0>)
 80170ec:	4805      	ldr	r0, [pc, #20]	; (8017104 <tcp_write_checks+0xe8>)
 80170ee:	f005 f819 	bl	801c124 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80170f2:	2300      	movs	r3, #0
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	08020110 	.word	0x08020110
 8017100:	08020220 	.word	0x08020220
 8017104:	08020164 	.word	0x08020164
 8017108:	08020240 	.word	0x08020240
 801710c:	0802027c 	.word	0x0802027c

08017110 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017110:	b590      	push	{r4, r7, lr}
 8017112:	b09b      	sub	sp, #108	; 0x6c
 8017114:	af04      	add	r7, sp, #16
 8017116:	60f8      	str	r0, [r7, #12]
 8017118:	60b9      	str	r1, [r7, #8]
 801711a:	4611      	mov	r1, r2
 801711c:	461a      	mov	r2, r3
 801711e:	460b      	mov	r3, r1
 8017120:	80fb      	strh	r3, [r7, #6]
 8017122:	4613      	mov	r3, r2
 8017124:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017126:	2300      	movs	r3, #0
 8017128:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	653b      	str	r3, [r7, #80]	; 0x50
 801712e:	2300      	movs	r3, #0
 8017130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017132:	2300      	movs	r3, #0
 8017134:	64bb      	str	r3, [r7, #72]	; 0x48
 8017136:	2300      	movs	r3, #0
 8017138:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801713a:	2300      	movs	r3, #0
 801713c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017140:	2300      	movs	r3, #0
 8017142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017146:	2300      	movs	r3, #0
 8017148:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801714a:	2300      	movs	r3, #0
 801714c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801714e:	2300      	movs	r3, #0
 8017150:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d109      	bne.n	801716c <tcp_write+0x5c>
 8017158:	4ba4      	ldr	r3, [pc, #656]	; (80173ec <tcp_write+0x2dc>)
 801715a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801715e:	49a4      	ldr	r1, [pc, #656]	; (80173f0 <tcp_write+0x2e0>)
 8017160:	48a4      	ldr	r0, [pc, #656]	; (80173f4 <tcp_write+0x2e4>)
 8017162:	f004 ffdf 	bl	801c124 <iprintf>
 8017166:	f06f 030f 	mvn.w	r3, #15
 801716a:	e32a      	b.n	80177c2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017172:	085b      	lsrs	r3, r3, #1
 8017174:	b29a      	uxth	r2, r3
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801717a:	4293      	cmp	r3, r2
 801717c:	bf28      	it	cs
 801717e:	4613      	movcs	r3, r2
 8017180:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017184:	2b00      	cmp	r3, #0
 8017186:	d102      	bne.n	801718e <tcp_write+0x7e>
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801718c:	e000      	b.n	8017190 <tcp_write+0x80>
 801718e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017190:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d109      	bne.n	80171ac <tcp_write+0x9c>
 8017198:	4b94      	ldr	r3, [pc, #592]	; (80173ec <tcp_write+0x2dc>)
 801719a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801719e:	4996      	ldr	r1, [pc, #600]	; (80173f8 <tcp_write+0x2e8>)
 80171a0:	4894      	ldr	r0, [pc, #592]	; (80173f4 <tcp_write+0x2e4>)
 80171a2:	f004 ffbf 	bl	801c124 <iprintf>
 80171a6:	f06f 030f 	mvn.w	r3, #15
 80171aa:	e30a      	b.n	80177c2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80171ac:	88fb      	ldrh	r3, [r7, #6]
 80171ae:	4619      	mov	r1, r3
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f7ff ff33 	bl	801701c <tcp_write_checks>
 80171b6:	4603      	mov	r3, r0
 80171b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80171bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d002      	beq.n	80171ca <tcp_write+0xba>
    return err;
 80171c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80171c8:	e2fb      	b.n	80177c2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80171d4:	2300      	movs	r3, #0
 80171d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171de:	2b00      	cmp	r3, #0
 80171e0:	f000 80f6 	beq.w	80173d0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171e8:	653b      	str	r3, [r7, #80]	; 0x50
 80171ea:	e002      	b.n	80171f2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80171ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80171f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d1f8      	bne.n	80171ec <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80171fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171fc:	7a9b      	ldrb	r3, [r3, #10]
 80171fe:	009b      	lsls	r3, r3, #2
 8017200:	b29b      	uxth	r3, r3
 8017202:	f003 0304 	and.w	r3, r3, #4
 8017206:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801720a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801720c:	891b      	ldrh	r3, [r3, #8]
 801720e:	4619      	mov	r1, r3
 8017210:	8c3b      	ldrh	r3, [r7, #32]
 8017212:	440b      	add	r3, r1
 8017214:	429a      	cmp	r2, r3
 8017216:	da06      	bge.n	8017226 <tcp_write+0x116>
 8017218:	4b74      	ldr	r3, [pc, #464]	; (80173ec <tcp_write+0x2dc>)
 801721a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801721e:	4977      	ldr	r1, [pc, #476]	; (80173fc <tcp_write+0x2ec>)
 8017220:	4874      	ldr	r0, [pc, #464]	; (80173f4 <tcp_write+0x2e4>)
 8017222:	f004 ff7f 	bl	801c124 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017228:	891a      	ldrh	r2, [r3, #8]
 801722a:	8c3b      	ldrh	r3, [r7, #32]
 801722c:	4413      	add	r3, r2
 801722e:	b29b      	uxth	r3, r3
 8017230:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017232:	1ad3      	subs	r3, r2, r3
 8017234:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801723c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801723e:	8a7b      	ldrh	r3, [r7, #18]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d026      	beq.n	8017292 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017244:	8a7b      	ldrh	r3, [r7, #18]
 8017246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017248:	429a      	cmp	r2, r3
 801724a:	d206      	bcs.n	801725a <tcp_write+0x14a>
 801724c:	4b67      	ldr	r3, [pc, #412]	; (80173ec <tcp_write+0x2dc>)
 801724e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017252:	496b      	ldr	r1, [pc, #428]	; (8017400 <tcp_write+0x2f0>)
 8017254:	4867      	ldr	r0, [pc, #412]	; (80173f4 <tcp_write+0x2e4>)
 8017256:	f004 ff65 	bl	801c124 <iprintf>
      seg = last_unsent;
 801725a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801725c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801725e:	8a7b      	ldrh	r3, [r7, #18]
 8017260:	88fa      	ldrh	r2, [r7, #6]
 8017262:	4293      	cmp	r3, r2
 8017264:	bf28      	it	cs
 8017266:	4613      	movcs	r3, r2
 8017268:	b29b      	uxth	r3, r3
 801726a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801726c:	4293      	cmp	r3, r2
 801726e:	bf28      	it	cs
 8017270:	4613      	movcs	r3, r2
 8017272:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017278:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801727a:	4413      	add	r3, r2
 801727c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017280:	8a7a      	ldrh	r2, [r7, #18]
 8017282:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017284:	1ad3      	subs	r3, r2, r3
 8017286:	b29b      	uxth	r3, r3
 8017288:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801728a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801728c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801728e:	1ad3      	subs	r3, r2, r3
 8017290:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017292:	8a7b      	ldrh	r3, [r7, #18]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d00b      	beq.n	80172b0 <tcp_write+0x1a0>
 8017298:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801729c:	88fb      	ldrh	r3, [r7, #6]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d006      	beq.n	80172b0 <tcp_write+0x1a0>
 80172a2:	4b52      	ldr	r3, [pc, #328]	; (80173ec <tcp_write+0x2dc>)
 80172a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80172a8:	4956      	ldr	r1, [pc, #344]	; (8017404 <tcp_write+0x2f4>)
 80172aa:	4852      	ldr	r0, [pc, #328]	; (80173f4 <tcp_write+0x2e4>)
 80172ac:	f004 ff3a 	bl	801c124 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80172b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80172b4:	88fb      	ldrh	r3, [r7, #6]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	f080 8167 	bcs.w	801758a <tcp_write+0x47a>
 80172bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172be:	2b00      	cmp	r3, #0
 80172c0:	f000 8163 	beq.w	801758a <tcp_write+0x47a>
 80172c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172c6:	891b      	ldrh	r3, [r3, #8]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	f000 815e 	beq.w	801758a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80172ce:	88fa      	ldrh	r2, [r7, #6]
 80172d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80172d4:	1ad2      	subs	r2, r2, r3
 80172d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172d8:	4293      	cmp	r3, r2
 80172da:	bfa8      	it	ge
 80172dc:	4613      	movge	r3, r2
 80172de:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80172e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172e2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80172e4:	797b      	ldrb	r3, [r7, #5]
 80172e6:	f003 0301 	and.w	r3, r3, #1
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d027      	beq.n	801733e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80172ee:	f107 0012 	add.w	r0, r7, #18
 80172f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172f4:	8bf9      	ldrh	r1, [r7, #30]
 80172f6:	2301      	movs	r3, #1
 80172f8:	9302      	str	r3, [sp, #8]
 80172fa:	797b      	ldrb	r3, [r7, #5]
 80172fc:	9301      	str	r3, [sp, #4]
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	9300      	str	r3, [sp, #0]
 8017302:	4603      	mov	r3, r0
 8017304:	2000      	movs	r0, #0
 8017306:	f7ff fe0f 	bl	8016f28 <tcp_pbuf_prealloc>
 801730a:	6578      	str	r0, [r7, #84]	; 0x54
 801730c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801730e:	2b00      	cmp	r3, #0
 8017310:	f000 8225 	beq.w	801775e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017316:	6858      	ldr	r0, [r3, #4]
 8017318:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801731c:	68ba      	ldr	r2, [r7, #8]
 801731e:	4413      	add	r3, r2
 8017320:	8bfa      	ldrh	r2, [r7, #30]
 8017322:	4619      	mov	r1, r3
 8017324:	f004 fe73 	bl	801c00e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017328:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801732a:	f7fb f9c3 	bl	80126b4 <pbuf_clen>
 801732e:	4603      	mov	r3, r0
 8017330:	461a      	mov	r2, r3
 8017332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017336:	4413      	add	r3, r2
 8017338:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801733c:	e041      	b.n	80173c2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801733e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	637b      	str	r3, [r7, #52]	; 0x34
 8017344:	e002      	b.n	801734c <tcp_write+0x23c>
 8017346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	637b      	str	r3, [r7, #52]	; 0x34
 801734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d1f8      	bne.n	8017346 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017356:	7b1b      	ldrb	r3, [r3, #12]
 8017358:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801735c:	2b00      	cmp	r3, #0
 801735e:	d115      	bne.n	801738c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017366:	8952      	ldrh	r2, [r2, #10]
 8017368:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801736a:	68ba      	ldr	r2, [r7, #8]
 801736c:	429a      	cmp	r2, r3
 801736e:	d10d      	bne.n	801738c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017374:	2b00      	cmp	r3, #0
 8017376:	d006      	beq.n	8017386 <tcp_write+0x276>
 8017378:	4b1c      	ldr	r3, [pc, #112]	; (80173ec <tcp_write+0x2dc>)
 801737a:	f240 2231 	movw	r2, #561	; 0x231
 801737e:	4922      	ldr	r1, [pc, #136]	; (8017408 <tcp_write+0x2f8>)
 8017380:	481c      	ldr	r0, [pc, #112]	; (80173f4 <tcp_write+0x2e4>)
 8017382:	f004 fecf 	bl	801c124 <iprintf>
          extendlen = seglen;
 8017386:	8bfb      	ldrh	r3, [r7, #30]
 8017388:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801738a:	e01a      	b.n	80173c2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801738c:	8bfb      	ldrh	r3, [r7, #30]
 801738e:	2201      	movs	r2, #1
 8017390:	4619      	mov	r1, r3
 8017392:	2000      	movs	r0, #0
 8017394:	f7fa fe1c 	bl	8011fd0 <pbuf_alloc>
 8017398:	6578      	str	r0, [r7, #84]	; 0x54
 801739a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801739c:	2b00      	cmp	r3, #0
 801739e:	f000 81e0 	beq.w	8017762 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80173a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80173a6:	68ba      	ldr	r2, [r7, #8]
 80173a8:	441a      	add	r2, r3
 80173aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173ac:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80173ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80173b0:	f7fb f980 	bl	80126b4 <pbuf_clen>
 80173b4:	4603      	mov	r3, r0
 80173b6:	461a      	mov	r2, r3
 80173b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80173bc:	4413      	add	r3, r2
 80173be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80173c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80173c6:	8bfb      	ldrh	r3, [r7, #30]
 80173c8:	4413      	add	r3, r2
 80173ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80173ce:	e0dc      	b.n	801758a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	f000 80d7 	beq.w	801758a <tcp_write+0x47a>
 80173dc:	4b03      	ldr	r3, [pc, #12]	; (80173ec <tcp_write+0x2dc>)
 80173de:	f240 224a 	movw	r2, #586	; 0x24a
 80173e2:	490a      	ldr	r1, [pc, #40]	; (801740c <tcp_write+0x2fc>)
 80173e4:	4803      	ldr	r0, [pc, #12]	; (80173f4 <tcp_write+0x2e4>)
 80173e6:	f004 fe9d 	bl	801c124 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80173ea:	e0ce      	b.n	801758a <tcp_write+0x47a>
 80173ec:	08020110 	.word	0x08020110
 80173f0:	080202b0 	.word	0x080202b0
 80173f4:	08020164 	.word	0x08020164
 80173f8:	080202c8 	.word	0x080202c8
 80173fc:	080202fc 	.word	0x080202fc
 8017400:	08020314 	.word	0x08020314
 8017404:	08020334 	.word	0x08020334
 8017408:	08020354 	.word	0x08020354
 801740c:	08020380 	.word	0x08020380
    struct pbuf *p;
    u16_t left = len - pos;
 8017410:	88fa      	ldrh	r2, [r7, #6]
 8017412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017416:	1ad3      	subs	r3, r2, r3
 8017418:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801741a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801741e:	b29b      	uxth	r3, r3
 8017420:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017422:	1ad3      	subs	r3, r2, r3
 8017424:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017426:	8b7a      	ldrh	r2, [r7, #26]
 8017428:	8bbb      	ldrh	r3, [r7, #28]
 801742a:	4293      	cmp	r3, r2
 801742c:	bf28      	it	cs
 801742e:	4613      	movcs	r3, r2
 8017430:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017432:	797b      	ldrb	r3, [r7, #5]
 8017434:	f003 0301 	and.w	r3, r3, #1
 8017438:	2b00      	cmp	r3, #0
 801743a:	d036      	beq.n	80174aa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801743c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017440:	b29a      	uxth	r2, r3
 8017442:	8b3b      	ldrh	r3, [r7, #24]
 8017444:	4413      	add	r3, r2
 8017446:	b299      	uxth	r1, r3
 8017448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801744a:	2b00      	cmp	r3, #0
 801744c:	bf0c      	ite	eq
 801744e:	2301      	moveq	r3, #1
 8017450:	2300      	movne	r3, #0
 8017452:	b2db      	uxtb	r3, r3
 8017454:	f107 0012 	add.w	r0, r7, #18
 8017458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801745a:	9302      	str	r3, [sp, #8]
 801745c:	797b      	ldrb	r3, [r7, #5]
 801745e:	9301      	str	r3, [sp, #4]
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	9300      	str	r3, [sp, #0]
 8017464:	4603      	mov	r3, r0
 8017466:	2036      	movs	r0, #54	; 0x36
 8017468:	f7ff fd5e 	bl	8016f28 <tcp_pbuf_prealloc>
 801746c:	6338      	str	r0, [r7, #48]	; 0x30
 801746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017470:	2b00      	cmp	r3, #0
 8017472:	f000 8178 	beq.w	8017766 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017478:	895b      	ldrh	r3, [r3, #10]
 801747a:	8b3a      	ldrh	r2, [r7, #24]
 801747c:	429a      	cmp	r2, r3
 801747e:	d906      	bls.n	801748e <tcp_write+0x37e>
 8017480:	4b8c      	ldr	r3, [pc, #560]	; (80176b4 <tcp_write+0x5a4>)
 8017482:	f240 2266 	movw	r2, #614	; 0x266
 8017486:	498c      	ldr	r1, [pc, #560]	; (80176b8 <tcp_write+0x5a8>)
 8017488:	488c      	ldr	r0, [pc, #560]	; (80176bc <tcp_write+0x5ac>)
 801748a:	f004 fe4b 	bl	801c124 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017490:	685a      	ldr	r2, [r3, #4]
 8017492:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017496:	18d0      	adds	r0, r2, r3
 8017498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801749c:	68ba      	ldr	r2, [r7, #8]
 801749e:	4413      	add	r3, r2
 80174a0:	8b3a      	ldrh	r2, [r7, #24]
 80174a2:	4619      	mov	r1, r3
 80174a4:	f004 fdb3 	bl	801c00e <memcpy>
 80174a8:	e02f      	b.n	801750a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80174aa:	8a7b      	ldrh	r3, [r7, #18]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d006      	beq.n	80174be <tcp_write+0x3ae>
 80174b0:	4b80      	ldr	r3, [pc, #512]	; (80176b4 <tcp_write+0x5a4>)
 80174b2:	f240 2271 	movw	r2, #625	; 0x271
 80174b6:	4982      	ldr	r1, [pc, #520]	; (80176c0 <tcp_write+0x5b0>)
 80174b8:	4880      	ldr	r0, [pc, #512]	; (80176bc <tcp_write+0x5ac>)
 80174ba:	f004 fe33 	bl	801c124 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80174be:	8b3b      	ldrh	r3, [r7, #24]
 80174c0:	2201      	movs	r2, #1
 80174c2:	4619      	mov	r1, r3
 80174c4:	2036      	movs	r0, #54	; 0x36
 80174c6:	f7fa fd83 	bl	8011fd0 <pbuf_alloc>
 80174ca:	6178      	str	r0, [r7, #20]
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f000 814b 	beq.w	801776a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80174d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174d8:	68ba      	ldr	r2, [r7, #8]
 80174da:	441a      	add	r2, r3
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80174e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174ea:	4619      	mov	r1, r3
 80174ec:	2036      	movs	r0, #54	; 0x36
 80174ee:	f7fa fd6f 	bl	8011fd0 <pbuf_alloc>
 80174f2:	6338      	str	r0, [r7, #48]	; 0x30
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d103      	bne.n	8017502 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80174fa:	6978      	ldr	r0, [r7, #20]
 80174fc:	f7fb f84c 	bl	8012598 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017500:	e136      	b.n	8017770 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017502:	6979      	ldr	r1, [r7, #20]
 8017504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017506:	f7fb f915 	bl	8012734 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801750a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801750c:	f7fb f8d2 	bl	80126b4 <pbuf_clen>
 8017510:	4603      	mov	r3, r0
 8017512:	461a      	mov	r2, r3
 8017514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017518:	4413      	add	r3, r2
 801751a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801751e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017522:	2b09      	cmp	r3, #9
 8017524:	d903      	bls.n	801752e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017528:	f7fb f836 	bl	8012598 <pbuf_free>
      goto memerr;
 801752c:	e120      	b.n	8017770 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017532:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017536:	441a      	add	r2, r3
 8017538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	4613      	mov	r3, r2
 8017540:	2200      	movs	r2, #0
 8017542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017544:	68f8      	ldr	r0, [r7, #12]
 8017546:	f7ff fc51 	bl	8016dec <tcp_create_segment>
 801754a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801754c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801754e:	2b00      	cmp	r3, #0
 8017550:	f000 810d 	beq.w	801776e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017556:	2b00      	cmp	r3, #0
 8017558:	d102      	bne.n	8017560 <tcp_write+0x450>
      queue = seg;
 801755a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801755c:	647b      	str	r3, [r7, #68]	; 0x44
 801755e:	e00c      	b.n	801757a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017562:	2b00      	cmp	r3, #0
 8017564:	d106      	bne.n	8017574 <tcp_write+0x464>
 8017566:	4b53      	ldr	r3, [pc, #332]	; (80176b4 <tcp_write+0x5a4>)
 8017568:	f240 22ab 	movw	r2, #683	; 0x2ab
 801756c:	4955      	ldr	r1, [pc, #340]	; (80176c4 <tcp_write+0x5b4>)
 801756e:	4853      	ldr	r0, [pc, #332]	; (80176bc <tcp_write+0x5ac>)
 8017570:	f004 fdd8 	bl	801c124 <iprintf>
      prev_seg->next = seg;
 8017574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017578:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801757c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801757e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017582:	8b3b      	ldrh	r3, [r7, #24]
 8017584:	4413      	add	r3, r2
 8017586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801758a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801758e:	88fb      	ldrh	r3, [r7, #6]
 8017590:	429a      	cmp	r2, r3
 8017592:	f4ff af3d 	bcc.w	8017410 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017596:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017598:	2b00      	cmp	r3, #0
 801759a:	d02c      	beq.n	80175f6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801759c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801759e:	685b      	ldr	r3, [r3, #4]
 80175a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175a2:	e01e      	b.n	80175e2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80175a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a6:	891a      	ldrh	r2, [r3, #8]
 80175a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175aa:	4413      	add	r3, r2
 80175ac:	b29a      	uxth	r2, r3
 80175ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80175b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d110      	bne.n	80175dc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80175ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175c0:	8952      	ldrh	r2, [r2, #10]
 80175c2:	4413      	add	r3, r2
 80175c4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80175c6:	68b9      	ldr	r1, [r7, #8]
 80175c8:	4618      	mov	r0, r3
 80175ca:	f004 fd20 	bl	801c00e <memcpy>
        p->len += oversize_used;
 80175ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d0:	895a      	ldrh	r2, [r3, #10]
 80175d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175d4:	4413      	add	r3, r2
 80175d6:	b29a      	uxth	r2, r3
 80175d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175da:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80175dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d1dd      	bne.n	80175a4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80175e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175ea:	891a      	ldrh	r2, [r3, #8]
 80175ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175ee:	4413      	add	r3, r2
 80175f0:	b29a      	uxth	r2, r3
 80175f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175f4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80175f6:	8a7a      	ldrh	r2, [r7, #18]
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80175fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017600:	2b00      	cmp	r3, #0
 8017602:	d018      	beq.n	8017636 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017606:	2b00      	cmp	r3, #0
 8017608:	d106      	bne.n	8017618 <tcp_write+0x508>
 801760a:	4b2a      	ldr	r3, [pc, #168]	; (80176b4 <tcp_write+0x5a4>)
 801760c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017610:	492d      	ldr	r1, [pc, #180]	; (80176c8 <tcp_write+0x5b8>)
 8017612:	482a      	ldr	r0, [pc, #168]	; (80176bc <tcp_write+0x5ac>)
 8017614:	f004 fd86 	bl	801c124 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801761a:	685b      	ldr	r3, [r3, #4]
 801761c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801761e:	4618      	mov	r0, r3
 8017620:	f7fb f888 	bl	8012734 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017626:	891a      	ldrh	r2, [r3, #8]
 8017628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801762a:	891b      	ldrh	r3, [r3, #8]
 801762c:	4413      	add	r3, r2
 801762e:	b29a      	uxth	r2, r3
 8017630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017632:	811a      	strh	r2, [r3, #8]
 8017634:	e037      	b.n	80176a6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017636:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017638:	2b00      	cmp	r3, #0
 801763a:	d034      	beq.n	80176a6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801763c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801763e:	2b00      	cmp	r3, #0
 8017640:	d003      	beq.n	801764a <tcp_write+0x53a>
 8017642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d106      	bne.n	8017658 <tcp_write+0x548>
 801764a:	4b1a      	ldr	r3, [pc, #104]	; (80176b4 <tcp_write+0x5a4>)
 801764c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017650:	491e      	ldr	r1, [pc, #120]	; (80176cc <tcp_write+0x5bc>)
 8017652:	481a      	ldr	r0, [pc, #104]	; (80176bc <tcp_write+0x5ac>)
 8017654:	f004 fd66 	bl	801c124 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	62bb      	str	r3, [r7, #40]	; 0x28
 801765e:	e009      	b.n	8017674 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017662:	891a      	ldrh	r2, [r3, #8]
 8017664:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017666:	4413      	add	r3, r2
 8017668:	b29a      	uxth	r2, r3
 801766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	62bb      	str	r3, [r7, #40]	; 0x28
 8017674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d1f1      	bne.n	8017660 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767e:	891a      	ldrh	r2, [r3, #8]
 8017680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017682:	4413      	add	r3, r2
 8017684:	b29a      	uxth	r2, r3
 8017686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017688:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768c:	895a      	ldrh	r2, [r3, #10]
 801768e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017690:	4413      	add	r3, r2
 8017692:	b29a      	uxth	r2, r3
 8017694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017696:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801769a:	891a      	ldrh	r2, [r3, #8]
 801769c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801769e:	4413      	add	r3, r2
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176a4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80176a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d111      	bne.n	80176d0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80176b2:	e010      	b.n	80176d6 <tcp_write+0x5c6>
 80176b4:	08020110 	.word	0x08020110
 80176b8:	080203b0 	.word	0x080203b0
 80176bc:	08020164 	.word	0x08020164
 80176c0:	080203f0 	.word	0x080203f0
 80176c4:	08020400 	.word	0x08020400
 80176c8:	08020414 	.word	0x08020414
 80176cc:	0802044c 	.word	0x0802044c
  } else {
    last_unsent->next = queue;
 80176d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176d4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80176da:	88fb      	ldrh	r3, [r7, #6]
 80176dc:	441a      	add	r2, r3
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80176e8:	88fb      	ldrh	r3, [r7, #6]
 80176ea:	1ad3      	subs	r3, r2, r3
 80176ec:	b29a      	uxth	r2, r3
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80176fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017704:	2b00      	cmp	r3, #0
 8017706:	d00e      	beq.n	8017726 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801770c:	2b00      	cmp	r3, #0
 801770e:	d10a      	bne.n	8017726 <tcp_write+0x616>
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017714:	2b00      	cmp	r3, #0
 8017716:	d106      	bne.n	8017726 <tcp_write+0x616>
 8017718:	4b2c      	ldr	r3, [pc, #176]	; (80177cc <tcp_write+0x6bc>)
 801771a:	f240 3212 	movw	r2, #786	; 0x312
 801771e:	492c      	ldr	r1, [pc, #176]	; (80177d0 <tcp_write+0x6c0>)
 8017720:	482c      	ldr	r0, [pc, #176]	; (80177d4 <tcp_write+0x6c4>)
 8017722:	f004 fcff 	bl	801c124 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017728:	2b00      	cmp	r3, #0
 801772a:	d016      	beq.n	801775a <tcp_write+0x64a>
 801772c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801772e:	68db      	ldr	r3, [r3, #12]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d012      	beq.n	801775a <tcp_write+0x64a>
 8017734:	797b      	ldrb	r3, [r7, #5]
 8017736:	f003 0302 	and.w	r3, r3, #2
 801773a:	2b00      	cmp	r3, #0
 801773c:	d10d      	bne.n	801775a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801773e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017740:	68db      	ldr	r3, [r3, #12]
 8017742:	899b      	ldrh	r3, [r3, #12]
 8017744:	b29c      	uxth	r4, r3
 8017746:	2008      	movs	r0, #8
 8017748:	f7f9 fb7a 	bl	8010e40 <lwip_htons>
 801774c:	4603      	mov	r3, r0
 801774e:	461a      	mov	r2, r3
 8017750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017752:	68db      	ldr	r3, [r3, #12]
 8017754:	4322      	orrs	r2, r4
 8017756:	b292      	uxth	r2, r2
 8017758:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801775a:	2300      	movs	r3, #0
 801775c:	e031      	b.n	80177c2 <tcp_write+0x6b2>
          goto memerr;
 801775e:	bf00      	nop
 8017760:	e006      	b.n	8017770 <tcp_write+0x660>
            goto memerr;
 8017762:	bf00      	nop
 8017764:	e004      	b.n	8017770 <tcp_write+0x660>
        goto memerr;
 8017766:	bf00      	nop
 8017768:	e002      	b.n	8017770 <tcp_write+0x660>
        goto memerr;
 801776a:	bf00      	nop
 801776c:	e000      	b.n	8017770 <tcp_write+0x660>
      goto memerr;
 801776e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	8b5b      	ldrh	r3, [r3, #26]
 8017774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017778:	b29a      	uxth	r2, r3
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801777e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017780:	2b00      	cmp	r3, #0
 8017782:	d002      	beq.n	801778a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017784:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017786:	f7fa ff07 	bl	8012598 <pbuf_free>
  }
  if (queue != NULL) {
 801778a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801778c:	2b00      	cmp	r3, #0
 801778e:	d002      	beq.n	8017796 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017790:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017792:	f7fc fb6f 	bl	8013e74 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801779c:	2b00      	cmp	r3, #0
 801779e:	d00e      	beq.n	80177be <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d10a      	bne.n	80177be <tcp_write+0x6ae>
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d106      	bne.n	80177be <tcp_write+0x6ae>
 80177b0:	4b06      	ldr	r3, [pc, #24]	; (80177cc <tcp_write+0x6bc>)
 80177b2:	f240 3227 	movw	r2, #807	; 0x327
 80177b6:	4906      	ldr	r1, [pc, #24]	; (80177d0 <tcp_write+0x6c0>)
 80177b8:	4806      	ldr	r0, [pc, #24]	; (80177d4 <tcp_write+0x6c4>)
 80177ba:	f004 fcb3 	bl	801c124 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80177be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	375c      	adds	r7, #92	; 0x5c
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd90      	pop	{r4, r7, pc}
 80177ca:	bf00      	nop
 80177cc:	08020110 	.word	0x08020110
 80177d0:	08020484 	.word	0x08020484
 80177d4:	08020164 	.word	0x08020164

080177d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80177d8:	b590      	push	{r4, r7, lr}
 80177da:	b08b      	sub	sp, #44	; 0x2c
 80177dc:	af02      	add	r7, sp, #8
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	460b      	mov	r3, r1
 80177e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80177e4:	2300      	movs	r3, #0
 80177e6:	61fb      	str	r3, [r7, #28]
 80177e8:	2300      	movs	r3, #0
 80177ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80177ec:	2300      	movs	r3, #0
 80177ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d106      	bne.n	8017804 <tcp_split_unsent_seg+0x2c>
 80177f6:	4b95      	ldr	r3, [pc, #596]	; (8017a4c <tcp_split_unsent_seg+0x274>)
 80177f8:	f240 324b 	movw	r2, #843	; 0x34b
 80177fc:	4994      	ldr	r1, [pc, #592]	; (8017a50 <tcp_split_unsent_seg+0x278>)
 80177fe:	4895      	ldr	r0, [pc, #596]	; (8017a54 <tcp_split_unsent_seg+0x27c>)
 8017800:	f004 fc90 	bl	801c124 <iprintf>

  useg = pcb->unsent;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017808:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d102      	bne.n	8017816 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017814:	e116      	b.n	8017a44 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017816:	887b      	ldrh	r3, [r7, #2]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d109      	bne.n	8017830 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801781c:	4b8b      	ldr	r3, [pc, #556]	; (8017a4c <tcp_split_unsent_seg+0x274>)
 801781e:	f240 3253 	movw	r2, #851	; 0x353
 8017822:	498d      	ldr	r1, [pc, #564]	; (8017a58 <tcp_split_unsent_seg+0x280>)
 8017824:	488b      	ldr	r0, [pc, #556]	; (8017a54 <tcp_split_unsent_seg+0x27c>)
 8017826:	f004 fc7d 	bl	801c124 <iprintf>
    return ERR_VAL;
 801782a:	f06f 0305 	mvn.w	r3, #5
 801782e:	e109      	b.n	8017a44 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	891b      	ldrh	r3, [r3, #8]
 8017834:	887a      	ldrh	r2, [r7, #2]
 8017836:	429a      	cmp	r2, r3
 8017838:	d301      	bcc.n	801783e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801783a:	2300      	movs	r3, #0
 801783c:	e102      	b.n	8017a44 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017842:	887a      	ldrh	r2, [r7, #2]
 8017844:	429a      	cmp	r2, r3
 8017846:	d906      	bls.n	8017856 <tcp_split_unsent_seg+0x7e>
 8017848:	4b80      	ldr	r3, [pc, #512]	; (8017a4c <tcp_split_unsent_seg+0x274>)
 801784a:	f240 325b 	movw	r2, #859	; 0x35b
 801784e:	4983      	ldr	r1, [pc, #524]	; (8017a5c <tcp_split_unsent_seg+0x284>)
 8017850:	4880      	ldr	r0, [pc, #512]	; (8017a54 <tcp_split_unsent_seg+0x27c>)
 8017852:	f004 fc67 	bl	801c124 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	891b      	ldrh	r3, [r3, #8]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d106      	bne.n	801786c <tcp_split_unsent_seg+0x94>
 801785e:	4b7b      	ldr	r3, [pc, #492]	; (8017a4c <tcp_split_unsent_seg+0x274>)
 8017860:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017864:	497e      	ldr	r1, [pc, #504]	; (8017a60 <tcp_split_unsent_seg+0x288>)
 8017866:	487b      	ldr	r0, [pc, #492]	; (8017a54 <tcp_split_unsent_seg+0x27c>)
 8017868:	f004 fc5c 	bl	801c124 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801786c:	697b      	ldr	r3, [r7, #20]
 801786e:	7a9b      	ldrb	r3, [r3, #10]
 8017870:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017872:	7bfb      	ldrb	r3, [r7, #15]
 8017874:	009b      	lsls	r3, r3, #2
 8017876:	b2db      	uxtb	r3, r3
 8017878:	f003 0304 	and.w	r3, r3, #4
 801787c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801787e:	697b      	ldr	r3, [r7, #20]
 8017880:	891a      	ldrh	r2, [r3, #8]
 8017882:	887b      	ldrh	r3, [r7, #2]
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017888:	7bbb      	ldrb	r3, [r7, #14]
 801788a:	b29a      	uxth	r2, r3
 801788c:	89bb      	ldrh	r3, [r7, #12]
 801788e:	4413      	add	r3, r2
 8017890:	b29b      	uxth	r3, r3
 8017892:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017896:	4619      	mov	r1, r3
 8017898:	2036      	movs	r0, #54	; 0x36
 801789a:	f7fa fb99 	bl	8011fd0 <pbuf_alloc>
 801789e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	f000 80b7 	beq.w	8017a16 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	685b      	ldr	r3, [r3, #4]
 80178ac:	891a      	ldrh	r2, [r3, #8]
 80178ae:	697b      	ldr	r3, [r7, #20]
 80178b0:	891b      	ldrh	r3, [r3, #8]
 80178b2:	1ad3      	subs	r3, r2, r3
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	887b      	ldrh	r3, [r7, #2]
 80178b8:	4413      	add	r3, r2
 80178ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	6858      	ldr	r0, [r3, #4]
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	685a      	ldr	r2, [r3, #4]
 80178c4:	7bbb      	ldrb	r3, [r7, #14]
 80178c6:	18d1      	adds	r1, r2, r3
 80178c8:	897b      	ldrh	r3, [r7, #10]
 80178ca:	89ba      	ldrh	r2, [r7, #12]
 80178cc:	f7fb f85a 	bl	8012984 <pbuf_copy_partial>
 80178d0:	4603      	mov	r3, r0
 80178d2:	461a      	mov	r2, r3
 80178d4:	89bb      	ldrh	r3, [r7, #12]
 80178d6:	4293      	cmp	r3, r2
 80178d8:	f040 809f 	bne.w	8017a1a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	899b      	ldrh	r3, [r3, #12]
 80178e2:	b29b      	uxth	r3, r3
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7f9 faab 	bl	8010e40 <lwip_htons>
 80178ea:	4603      	mov	r3, r0
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80178f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80178f4:	2300      	movs	r3, #0
 80178f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80178f8:	7efb      	ldrb	r3, [r7, #27]
 80178fa:	f003 0308 	and.w	r3, r3, #8
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d007      	beq.n	8017912 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017902:	7efb      	ldrb	r3, [r7, #27]
 8017904:	f023 0308 	bic.w	r3, r3, #8
 8017908:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801790a:	7ebb      	ldrb	r3, [r7, #26]
 801790c:	f043 0308 	orr.w	r3, r3, #8
 8017910:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017912:	7efb      	ldrb	r3, [r7, #27]
 8017914:	f003 0301 	and.w	r3, r3, #1
 8017918:	2b00      	cmp	r3, #0
 801791a:	d007      	beq.n	801792c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801791c:	7efb      	ldrb	r3, [r7, #27]
 801791e:	f023 0301 	bic.w	r3, r3, #1
 8017922:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017924:	7ebb      	ldrb	r3, [r7, #26]
 8017926:	f043 0301 	orr.w	r3, r3, #1
 801792a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	68db      	ldr	r3, [r3, #12]
 8017930:	685b      	ldr	r3, [r3, #4]
 8017932:	4618      	mov	r0, r3
 8017934:	f7f9 fa99 	bl	8010e6a <lwip_htonl>
 8017938:	4602      	mov	r2, r0
 801793a:	887b      	ldrh	r3, [r7, #2]
 801793c:	18d1      	adds	r1, r2, r3
 801793e:	7eba      	ldrb	r2, [r7, #26]
 8017940:	7bfb      	ldrb	r3, [r7, #15]
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	460b      	mov	r3, r1
 8017946:	6939      	ldr	r1, [r7, #16]
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7ff fa4f 	bl	8016dec <tcp_create_segment>
 801794e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017950:	69fb      	ldr	r3, [r7, #28]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d063      	beq.n	8017a1e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	4618      	mov	r0, r3
 801795c:	f7fa feaa 	bl	80126b4 <pbuf_clen>
 8017960:	4603      	mov	r3, r0
 8017962:	461a      	mov	r2, r3
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801796a:	1a9b      	subs	r3, r3, r2
 801796c:	b29a      	uxth	r2, r3
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017974:	697b      	ldr	r3, [r7, #20]
 8017976:	6858      	ldr	r0, [r3, #4]
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	685b      	ldr	r3, [r3, #4]
 801797c:	891a      	ldrh	r2, [r3, #8]
 801797e:	89bb      	ldrh	r3, [r7, #12]
 8017980:	1ad3      	subs	r3, r2, r3
 8017982:	b29b      	uxth	r3, r3
 8017984:	4619      	mov	r1, r3
 8017986:	f7fa fc81 	bl	801228c <pbuf_realloc>
  useg->len -= remainder;
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	891a      	ldrh	r2, [r3, #8]
 801798e:	89bb      	ldrh	r3, [r7, #12]
 8017990:	1ad3      	subs	r3, r2, r3
 8017992:	b29a      	uxth	r2, r3
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	68db      	ldr	r3, [r3, #12]
 801799c:	899b      	ldrh	r3, [r3, #12]
 801799e:	b29c      	uxth	r4, r3
 80179a0:	7efb      	ldrb	r3, [r7, #27]
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	4618      	mov	r0, r3
 80179a6:	f7f9 fa4b 	bl	8010e40 <lwip_htons>
 80179aa:	4603      	mov	r3, r0
 80179ac:	461a      	mov	r2, r3
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	4322      	orrs	r2, r4
 80179b4:	b292      	uxth	r2, r2
 80179b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	4618      	mov	r0, r3
 80179be:	f7fa fe79 	bl	80126b4 <pbuf_clen>
 80179c2:	4603      	mov	r3, r0
 80179c4:	461a      	mov	r2, r3
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80179cc:	4413      	add	r3, r2
 80179ce:	b29a      	uxth	r2, r3
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80179d6:	69fb      	ldr	r3, [r7, #28]
 80179d8:	685b      	ldr	r3, [r3, #4]
 80179da:	4618      	mov	r0, r3
 80179dc:	f7fa fe6a 	bl	80126b4 <pbuf_clen>
 80179e0:	4603      	mov	r3, r0
 80179e2:	461a      	mov	r2, r3
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80179ea:	4413      	add	r3, r2
 80179ec:	b29a      	uxth	r2, r3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	69fb      	ldr	r3, [r7, #28]
 80179fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80179fc:	697b      	ldr	r3, [r7, #20]
 80179fe:	69fa      	ldr	r2, [r7, #28]
 8017a00:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017a02:	69fb      	ldr	r3, [r7, #28]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d103      	bne.n	8017a12 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017a12:	2300      	movs	r3, #0
 8017a14:	e016      	b.n	8017a44 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017a16:	bf00      	nop
 8017a18:	e002      	b.n	8017a20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017a1a:	bf00      	nop
 8017a1c:	e000      	b.n	8017a20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017a1e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d006      	beq.n	8017a34 <tcp_split_unsent_seg+0x25c>
 8017a26:	4b09      	ldr	r3, [pc, #36]	; (8017a4c <tcp_split_unsent_seg+0x274>)
 8017a28:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017a2c:	490d      	ldr	r1, [pc, #52]	; (8017a64 <tcp_split_unsent_seg+0x28c>)
 8017a2e:	4809      	ldr	r0, [pc, #36]	; (8017a54 <tcp_split_unsent_seg+0x27c>)
 8017a30:	f004 fb78 	bl	801c124 <iprintf>
  if (p != NULL) {
 8017a34:	693b      	ldr	r3, [r7, #16]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d002      	beq.n	8017a40 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017a3a:	6938      	ldr	r0, [r7, #16]
 8017a3c:	f7fa fdac 	bl	8012598 <pbuf_free>
  }

  return ERR_MEM;
 8017a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3724      	adds	r7, #36	; 0x24
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd90      	pop	{r4, r7, pc}
 8017a4c:	08020110 	.word	0x08020110
 8017a50:	080204a4 	.word	0x080204a4
 8017a54:	08020164 	.word	0x08020164
 8017a58:	080204c8 	.word	0x080204c8
 8017a5c:	080204ec 	.word	0x080204ec
 8017a60:	080204fc 	.word	0x080204fc
 8017a64:	0802050c 	.word	0x0802050c

08017a68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017a68:	b590      	push	{r4, r7, lr}
 8017a6a:	b085      	sub	sp, #20
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d106      	bne.n	8017a84 <tcp_send_fin+0x1c>
 8017a76:	4b21      	ldr	r3, [pc, #132]	; (8017afc <tcp_send_fin+0x94>)
 8017a78:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017a7c:	4920      	ldr	r1, [pc, #128]	; (8017b00 <tcp_send_fin+0x98>)
 8017a7e:	4821      	ldr	r0, [pc, #132]	; (8017b04 <tcp_send_fin+0x9c>)
 8017a80:	f004 fb50 	bl	801c124 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d02e      	beq.n	8017aea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a90:	60fb      	str	r3, [r7, #12]
 8017a92:	e002      	b.n	8017a9a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d1f8      	bne.n	8017a94 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	68db      	ldr	r3, [r3, #12]
 8017aa6:	899b      	ldrh	r3, [r3, #12]
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7f9 f9c8 	bl	8010e40 <lwip_htons>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	b2db      	uxtb	r3, r3
 8017ab4:	f003 0307 	and.w	r3, r3, #7
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d116      	bne.n	8017aea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	68db      	ldr	r3, [r3, #12]
 8017ac0:	899b      	ldrh	r3, [r3, #12]
 8017ac2:	b29c      	uxth	r4, r3
 8017ac4:	2001      	movs	r0, #1
 8017ac6:	f7f9 f9bb 	bl	8010e40 <lwip_htons>
 8017aca:	4603      	mov	r3, r0
 8017acc:	461a      	mov	r2, r3
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	68db      	ldr	r3, [r3, #12]
 8017ad2:	4322      	orrs	r2, r4
 8017ad4:	b292      	uxth	r2, r2
 8017ad6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	8b5b      	ldrh	r3, [r3, #26]
 8017adc:	f043 0320 	orr.w	r3, r3, #32
 8017ae0:	b29a      	uxth	r2, r3
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	e004      	b.n	8017af4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017aea:	2101      	movs	r1, #1
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f000 f80b 	bl	8017b08 <tcp_enqueue_flags>
 8017af2:	4603      	mov	r3, r0
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3714      	adds	r7, #20
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd90      	pop	{r4, r7, pc}
 8017afc:	08020110 	.word	0x08020110
 8017b00:	08020518 	.word	0x08020518
 8017b04:	08020164 	.word	0x08020164

08017b08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b08a      	sub	sp, #40	; 0x28
 8017b0c:	af02      	add	r7, sp, #8
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	460b      	mov	r3, r1
 8017b12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017b14:	2300      	movs	r3, #0
 8017b16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017b1c:	78fb      	ldrb	r3, [r7, #3]
 8017b1e:	f003 0303 	and.w	r3, r3, #3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d106      	bne.n	8017b34 <tcp_enqueue_flags+0x2c>
 8017b26:	4b67      	ldr	r3, [pc, #412]	; (8017cc4 <tcp_enqueue_flags+0x1bc>)
 8017b28:	f240 4211 	movw	r2, #1041	; 0x411
 8017b2c:	4966      	ldr	r1, [pc, #408]	; (8017cc8 <tcp_enqueue_flags+0x1c0>)
 8017b2e:	4867      	ldr	r0, [pc, #412]	; (8017ccc <tcp_enqueue_flags+0x1c4>)
 8017b30:	f004 faf8 	bl	801c124 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d106      	bne.n	8017b48 <tcp_enqueue_flags+0x40>
 8017b3a:	4b62      	ldr	r3, [pc, #392]	; (8017cc4 <tcp_enqueue_flags+0x1bc>)
 8017b3c:	f240 4213 	movw	r2, #1043	; 0x413
 8017b40:	4963      	ldr	r1, [pc, #396]	; (8017cd0 <tcp_enqueue_flags+0x1c8>)
 8017b42:	4862      	ldr	r0, [pc, #392]	; (8017ccc <tcp_enqueue_flags+0x1c4>)
 8017b44:	f004 faee 	bl	801c124 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017b48:	78fb      	ldrb	r3, [r7, #3]
 8017b4a:	f003 0302 	and.w	r3, r3, #2
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d001      	beq.n	8017b56 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017b52:	2301      	movs	r3, #1
 8017b54:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017b56:	7ffb      	ldrb	r3, [r7, #31]
 8017b58:	009b      	lsls	r3, r3, #2
 8017b5a:	b2db      	uxtb	r3, r3
 8017b5c:	f003 0304 	and.w	r3, r3, #4
 8017b60:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017b62:	7dfb      	ldrb	r3, [r7, #23]
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	2036      	movs	r0, #54	; 0x36
 8017b6e:	f7fa fa2f 	bl	8011fd0 <pbuf_alloc>
 8017b72:	6138      	str	r0, [r7, #16]
 8017b74:	693b      	ldr	r3, [r7, #16]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d109      	bne.n	8017b8e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	8b5b      	ldrh	r3, [r3, #26]
 8017b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b82:	b29a      	uxth	r2, r3
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b8c:	e095      	b.n	8017cba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	895a      	ldrh	r2, [r3, #10]
 8017b92:	7dfb      	ldrb	r3, [r7, #23]
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d206      	bcs.n	8017ba8 <tcp_enqueue_flags+0xa0>
 8017b9a:	4b4a      	ldr	r3, [pc, #296]	; (8017cc4 <tcp_enqueue_flags+0x1bc>)
 8017b9c:	f240 4239 	movw	r2, #1081	; 0x439
 8017ba0:	494c      	ldr	r1, [pc, #304]	; (8017cd4 <tcp_enqueue_flags+0x1cc>)
 8017ba2:	484a      	ldr	r0, [pc, #296]	; (8017ccc <tcp_enqueue_flags+0x1c4>)
 8017ba4:	f004 fabe 	bl	801c124 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017bac:	78fa      	ldrb	r2, [r7, #3]
 8017bae:	7ffb      	ldrb	r3, [r7, #31]
 8017bb0:	9300      	str	r3, [sp, #0]
 8017bb2:	460b      	mov	r3, r1
 8017bb4:	6939      	ldr	r1, [r7, #16]
 8017bb6:	6878      	ldr	r0, [r7, #4]
 8017bb8:	f7ff f918 	bl	8016dec <tcp_create_segment>
 8017bbc:	60f8      	str	r0, [r7, #12]
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d109      	bne.n	8017bd8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	8b5b      	ldrh	r3, [r3, #26]
 8017bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bcc:	b29a      	uxth	r2, r3
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bd6:	e070      	b.n	8017cba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	68db      	ldr	r3, [r3, #12]
 8017bdc:	f003 0303 	and.w	r3, r3, #3
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d006      	beq.n	8017bf2 <tcp_enqueue_flags+0xea>
 8017be4:	4b37      	ldr	r3, [pc, #220]	; (8017cc4 <tcp_enqueue_flags+0x1bc>)
 8017be6:	f240 4242 	movw	r2, #1090	; 0x442
 8017bea:	493b      	ldr	r1, [pc, #236]	; (8017cd8 <tcp_enqueue_flags+0x1d0>)
 8017bec:	4837      	ldr	r0, [pc, #220]	; (8017ccc <tcp_enqueue_flags+0x1c4>)
 8017bee:	f004 fa99 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	891b      	ldrh	r3, [r3, #8]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d006      	beq.n	8017c08 <tcp_enqueue_flags+0x100>
 8017bfa:	4b32      	ldr	r3, [pc, #200]	; (8017cc4 <tcp_enqueue_flags+0x1bc>)
 8017bfc:	f240 4243 	movw	r2, #1091	; 0x443
 8017c00:	4936      	ldr	r1, [pc, #216]	; (8017cdc <tcp_enqueue_flags+0x1d4>)
 8017c02:	4832      	ldr	r0, [pc, #200]	; (8017ccc <tcp_enqueue_flags+0x1c4>)
 8017c04:	f004 fa8e 	bl	801c124 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d103      	bne.n	8017c18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	68fa      	ldr	r2, [r7, #12]
 8017c14:	66da      	str	r2, [r3, #108]	; 0x6c
 8017c16:	e00d      	b.n	8017c34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c1c:	61bb      	str	r3, [r7, #24]
 8017c1e:	e002      	b.n	8017c26 <tcp_enqueue_flags+0x11e>
 8017c20:	69bb      	ldr	r3, [r7, #24]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	61bb      	str	r3, [r7, #24]
 8017c26:	69bb      	ldr	r3, [r7, #24]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d1f8      	bne.n	8017c20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017c2e:	69bb      	ldr	r3, [r7, #24]
 8017c30:	68fa      	ldr	r2, [r7, #12]
 8017c32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2200      	movs	r2, #0
 8017c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017c3c:	78fb      	ldrb	r3, [r7, #3]
 8017c3e:	f003 0302 	and.w	r3, r3, #2
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d104      	bne.n	8017c50 <tcp_enqueue_flags+0x148>
 8017c46:	78fb      	ldrb	r3, [r7, #3]
 8017c48:	f003 0301 	and.w	r3, r3, #1
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d004      	beq.n	8017c5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017c54:	1c5a      	adds	r2, r3, #1
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017c5a:	78fb      	ldrb	r3, [r7, #3]
 8017c5c:	f003 0301 	and.w	r3, r3, #1
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d006      	beq.n	8017c72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	8b5b      	ldrh	r3, [r3, #26]
 8017c68:	f043 0320 	orr.w	r3, r3, #32
 8017c6c:	b29a      	uxth	r2, r3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	685b      	ldr	r3, [r3, #4]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7fa fd1c 	bl	80126b4 <pbuf_clen>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	461a      	mov	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c86:	4413      	add	r3, r2
 8017c88:	b29a      	uxth	r2, r3
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d00e      	beq.n	8017cb8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d10a      	bne.n	8017cb8 <tcp_enqueue_flags+0x1b0>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d106      	bne.n	8017cb8 <tcp_enqueue_flags+0x1b0>
 8017caa:	4b06      	ldr	r3, [pc, #24]	; (8017cc4 <tcp_enqueue_flags+0x1bc>)
 8017cac:	f240 4265 	movw	r2, #1125	; 0x465
 8017cb0:	490b      	ldr	r1, [pc, #44]	; (8017ce0 <tcp_enqueue_flags+0x1d8>)
 8017cb2:	4806      	ldr	r0, [pc, #24]	; (8017ccc <tcp_enqueue_flags+0x1c4>)
 8017cb4:	f004 fa36 	bl	801c124 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017cb8:	2300      	movs	r3, #0
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3720      	adds	r7, #32
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	08020110 	.word	0x08020110
 8017cc8:	08020534 	.word	0x08020534
 8017ccc:	08020164 	.word	0x08020164
 8017cd0:	0802058c 	.word	0x0802058c
 8017cd4:	080205ac 	.word	0x080205ac
 8017cd8:	080205e8 	.word	0x080205e8
 8017cdc:	08020600 	.word	0x08020600
 8017ce0:	0802062c 	.word	0x0802062c

08017ce4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017ce4:	b5b0      	push	{r4, r5, r7, lr}
 8017ce6:	b08a      	sub	sp, #40	; 0x28
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d106      	bne.n	8017d00 <tcp_output+0x1c>
 8017cf2:	4b9e      	ldr	r3, [pc, #632]	; (8017f6c <tcp_output+0x288>)
 8017cf4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017cf8:	499d      	ldr	r1, [pc, #628]	; (8017f70 <tcp_output+0x28c>)
 8017cfa:	489e      	ldr	r0, [pc, #632]	; (8017f74 <tcp_output+0x290>)
 8017cfc:	f004 fa12 	bl	801c124 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	7d1b      	ldrb	r3, [r3, #20]
 8017d04:	2b01      	cmp	r3, #1
 8017d06:	d106      	bne.n	8017d16 <tcp_output+0x32>
 8017d08:	4b98      	ldr	r3, [pc, #608]	; (8017f6c <tcp_output+0x288>)
 8017d0a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017d0e:	499a      	ldr	r1, [pc, #616]	; (8017f78 <tcp_output+0x294>)
 8017d10:	4898      	ldr	r0, [pc, #608]	; (8017f74 <tcp_output+0x290>)
 8017d12:	f004 fa07 	bl	801c124 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017d16:	4b99      	ldr	r3, [pc, #612]	; (8017f7c <tcp_output+0x298>)
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	687a      	ldr	r2, [r7, #4]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d101      	bne.n	8017d24 <tcp_output+0x40>
    return ERR_OK;
 8017d20:	2300      	movs	r3, #0
 8017d22:	e1ce      	b.n	80180c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d30:	4293      	cmp	r3, r2
 8017d32:	bf28      	it	cs
 8017d34:	4613      	movcs	r3, r2
 8017d36:	b29b      	uxth	r3, r3
 8017d38:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d10b      	bne.n	8017d5e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	8b5b      	ldrh	r3, [r3, #26]
 8017d4a:	f003 0302 	and.w	r3, r3, #2
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	f000 81aa 	beq.w	80180a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f000 fdcb 	bl	80188f0 <tcp_send_empty_ack>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	e1b1      	b.n	80180c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017d5e:	6879      	ldr	r1, [r7, #4]
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	3304      	adds	r3, #4
 8017d64:	461a      	mov	r2, r3
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	f7ff f824 	bl	8016db4 <tcp_route>
 8017d6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017d6e:	697b      	ldr	r3, [r7, #20]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d102      	bne.n	8017d7a <tcp_output+0x96>
    return ERR_RTE;
 8017d74:	f06f 0303 	mvn.w	r3, #3
 8017d78:	e1a3      	b.n	80180c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d003      	beq.n	8017d88 <tcp_output+0xa4>
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d111      	bne.n	8017dac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d002      	beq.n	8017d94 <tcp_output+0xb0>
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	3304      	adds	r3, #4
 8017d92:	e000      	b.n	8017d96 <tcp_output+0xb2>
 8017d94:	2300      	movs	r3, #0
 8017d96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d102      	bne.n	8017da4 <tcp_output+0xc0>
      return ERR_RTE;
 8017d9e:	f06f 0303 	mvn.w	r3, #3
 8017da2:	e18e      	b.n	80180c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	681a      	ldr	r2, [r3, #0]
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7f9 f859 	bl	8010e6a <lwip_htonl>
 8017db8:	4602      	mov	r2, r0
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dbe:	1ad3      	subs	r3, r2, r3
 8017dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dc2:	8912      	ldrh	r2, [r2, #8]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	69ba      	ldr	r2, [r7, #24]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d227      	bcs.n	8017e1c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017dd2:	461a      	mov	r2, r3
 8017dd4:	69bb      	ldr	r3, [r7, #24]
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	d114      	bne.n	8017e04 <tcp_output+0x120>
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d110      	bne.n	8017e04 <tcp_output+0x120>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d10b      	bne.n	8017e04 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2200      	movs	r2, #0
 8017df0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	2201      	movs	r2, #1
 8017df8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	8b5b      	ldrh	r3, [r3, #26]
 8017e08:	f003 0302 	and.w	r3, r3, #2
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f000 814d 	beq.w	80180ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f000 fd6c 	bl	80188f0 <tcp_send_empty_ack>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	e152      	b.n	80180c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	2200      	movs	r2, #0
 8017e20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017e2a:	6a3b      	ldr	r3, [r7, #32]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f000 811c 	beq.w	801806a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017e32:	e002      	b.n	8017e3a <tcp_output+0x156>
 8017e34:	6a3b      	ldr	r3, [r7, #32]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	623b      	str	r3, [r7, #32]
 8017e3a:	6a3b      	ldr	r3, [r7, #32]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d1f8      	bne.n	8017e34 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017e42:	e112      	b.n	801806a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e46:	68db      	ldr	r3, [r3, #12]
 8017e48:	899b      	ldrh	r3, [r3, #12]
 8017e4a:	b29b      	uxth	r3, r3
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7f8 fff7 	bl	8010e40 <lwip_htons>
 8017e52:	4603      	mov	r3, r0
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	f003 0304 	and.w	r3, r3, #4
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d006      	beq.n	8017e6c <tcp_output+0x188>
 8017e5e:	4b43      	ldr	r3, [pc, #268]	; (8017f6c <tcp_output+0x288>)
 8017e60:	f240 5236 	movw	r2, #1334	; 0x536
 8017e64:	4946      	ldr	r1, [pc, #280]	; (8017f80 <tcp_output+0x29c>)
 8017e66:	4843      	ldr	r0, [pc, #268]	; (8017f74 <tcp_output+0x290>)
 8017e68:	f004 f95c 	bl	801c124 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d01f      	beq.n	8017eb4 <tcp_output+0x1d0>
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	8b5b      	ldrh	r3, [r3, #26]
 8017e78:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d119      	bne.n	8017eb4 <tcp_output+0x1d0>
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d00b      	beq.n	8017ea0 <tcp_output+0x1bc>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d110      	bne.n	8017eb4 <tcp_output+0x1d0>
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e96:	891a      	ldrh	r2, [r3, #8]
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d209      	bcs.n	8017eb4 <tcp_output+0x1d0>
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d004      	beq.n	8017eb4 <tcp_output+0x1d0>
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017eb0:	2b08      	cmp	r3, #8
 8017eb2:	d901      	bls.n	8017eb8 <tcp_output+0x1d4>
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	e000      	b.n	8017eba <tcp_output+0x1d6>
 8017eb8:	2300      	movs	r3, #0
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d106      	bne.n	8017ecc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	8b5b      	ldrh	r3, [r3, #26]
 8017ec2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	f000 80e4 	beq.w	8018094 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	7d1b      	ldrb	r3, [r3, #20]
 8017ed0:	2b02      	cmp	r3, #2
 8017ed2:	d00d      	beq.n	8017ef0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed6:	68db      	ldr	r3, [r3, #12]
 8017ed8:	899b      	ldrh	r3, [r3, #12]
 8017eda:	b29c      	uxth	r4, r3
 8017edc:	2010      	movs	r0, #16
 8017ede:	f7f8 ffaf 	bl	8010e40 <lwip_htons>
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	461a      	mov	r2, r3
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	68db      	ldr	r3, [r3, #12]
 8017eea:	4322      	orrs	r2, r4
 8017eec:	b292      	uxth	r2, r2
 8017eee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017ef0:	697a      	ldr	r2, [r7, #20]
 8017ef2:	6879      	ldr	r1, [r7, #4]
 8017ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ef6:	f000 f909 	bl	801810c <tcp_output_segment>
 8017efa:	4603      	mov	r3, r0
 8017efc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d009      	beq.n	8017f1a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	8b5b      	ldrh	r3, [r3, #26]
 8017f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	835a      	strh	r2, [r3, #26]
      return err;
 8017f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f18:	e0d3      	b.n	80180c2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1c:	681a      	ldr	r2, [r3, #0]
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	7d1b      	ldrb	r3, [r3, #20]
 8017f26:	2b02      	cmp	r3, #2
 8017f28:	d006      	beq.n	8017f38 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	8b5b      	ldrh	r3, [r3, #26]
 8017f2e:	f023 0303 	bic.w	r3, r3, #3
 8017f32:	b29a      	uxth	r2, r3
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3a:	68db      	ldr	r3, [r3, #12]
 8017f3c:	685b      	ldr	r3, [r3, #4]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7f8 ff93 	bl	8010e6a <lwip_htonl>
 8017f44:	4604      	mov	r4, r0
 8017f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f48:	891b      	ldrh	r3, [r3, #8]
 8017f4a:	461d      	mov	r5, r3
 8017f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4e:	68db      	ldr	r3, [r3, #12]
 8017f50:	899b      	ldrh	r3, [r3, #12]
 8017f52:	b29b      	uxth	r3, r3
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7f8 ff73 	bl	8010e40 <lwip_htons>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	b2db      	uxtb	r3, r3
 8017f5e:	f003 0303 	and.w	r3, r3, #3
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d00e      	beq.n	8017f84 <tcp_output+0x2a0>
 8017f66:	2301      	movs	r3, #1
 8017f68:	e00d      	b.n	8017f86 <tcp_output+0x2a2>
 8017f6a:	bf00      	nop
 8017f6c:	08020110 	.word	0x08020110
 8017f70:	08020654 	.word	0x08020654
 8017f74:	08020164 	.word	0x08020164
 8017f78:	0802066c 	.word	0x0802066c
 8017f7c:	20014f78 	.word	0x20014f78
 8017f80:	08020694 	.word	0x08020694
 8017f84:	2300      	movs	r3, #0
 8017f86:	442b      	add	r3, r5
 8017f88:	4423      	add	r3, r4
 8017f8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	1ad3      	subs	r3, r2, r3
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	da02      	bge.n	8017f9e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	68ba      	ldr	r2, [r7, #8]
 8017f9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa0:	891b      	ldrh	r3, [r3, #8]
 8017fa2:	461c      	mov	r4, r3
 8017fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	899b      	ldrh	r3, [r3, #12]
 8017faa:	b29b      	uxth	r3, r3
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7f8 ff47 	bl	8010e40 <lwip_htons>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	b2db      	uxtb	r3, r3
 8017fb6:	f003 0303 	and.w	r3, r3, #3
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d001      	beq.n	8017fc2 <tcp_output+0x2de>
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	e000      	b.n	8017fc4 <tcp_output+0x2e0>
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	4423      	add	r3, r4
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d049      	beq.n	801805e <tcp_output+0x37a>
      seg->next = NULL;
 8017fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fcc:	2200      	movs	r2, #0
 8017fce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d105      	bne.n	8017fe4 <tcp_output+0x300>
        pcb->unacked = seg;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fdc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe0:	623b      	str	r3, [r7, #32]
 8017fe2:	e03f      	b.n	8018064 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	685b      	ldr	r3, [r3, #4]
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7f8 ff3d 	bl	8010e6a <lwip_htonl>
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	6a3b      	ldr	r3, [r7, #32]
 8017ff4:	68db      	ldr	r3, [r3, #12]
 8017ff6:	685b      	ldr	r3, [r3, #4]
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7f8 ff36 	bl	8010e6a <lwip_htonl>
 8017ffe:	4603      	mov	r3, r0
 8018000:	1ae3      	subs	r3, r4, r3
 8018002:	2b00      	cmp	r3, #0
 8018004:	da24      	bge.n	8018050 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	3370      	adds	r3, #112	; 0x70
 801800a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801800c:	e002      	b.n	8018014 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801800e:	69fb      	ldr	r3, [r7, #28]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018014:	69fb      	ldr	r3, [r7, #28]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d011      	beq.n	8018040 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	68db      	ldr	r3, [r3, #12]
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	4618      	mov	r0, r3
 8018026:	f7f8 ff20 	bl	8010e6a <lwip_htonl>
 801802a:	4604      	mov	r4, r0
 801802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801802e:	68db      	ldr	r3, [r3, #12]
 8018030:	685b      	ldr	r3, [r3, #4]
 8018032:	4618      	mov	r0, r3
 8018034:	f7f8 ff19 	bl	8010e6a <lwip_htonl>
 8018038:	4603      	mov	r3, r0
 801803a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801803c:	2b00      	cmp	r3, #0
 801803e:	dbe6      	blt.n	801800e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018046:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018048:	69fb      	ldr	r3, [r7, #28]
 801804a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801804c:	601a      	str	r2, [r3, #0]
 801804e:	e009      	b.n	8018064 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018050:	6a3b      	ldr	r3, [r7, #32]
 8018052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018054:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018056:	6a3b      	ldr	r3, [r7, #32]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	623b      	str	r3, [r7, #32]
 801805c:	e002      	b.n	8018064 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801805e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018060:	f7fb ff1d 	bl	8013e9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018068:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	2b00      	cmp	r3, #0
 801806e:	d012      	beq.n	8018096 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018072:	68db      	ldr	r3, [r3, #12]
 8018074:	685b      	ldr	r3, [r3, #4]
 8018076:	4618      	mov	r0, r3
 8018078:	f7f8 fef7 	bl	8010e6a <lwip_htonl>
 801807c:	4602      	mov	r2, r0
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018082:	1ad3      	subs	r3, r2, r3
 8018084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018086:	8912      	ldrh	r2, [r2, #8]
 8018088:	4413      	add	r3, r2
  while (seg != NULL &&
 801808a:	69ba      	ldr	r2, [r7, #24]
 801808c:	429a      	cmp	r2, r3
 801808e:	f4bf aed9 	bcs.w	8017e44 <tcp_output+0x160>
 8018092:	e000      	b.n	8018096 <tcp_output+0x3b2>
      break;
 8018094:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801809a:	2b00      	cmp	r3, #0
 801809c:	d108      	bne.n	80180b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	2200      	movs	r2, #0
 80180a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80180a6:	e004      	b.n	80180b2 <tcp_output+0x3ce>
    goto output_done;
 80180a8:	bf00      	nop
 80180aa:	e002      	b.n	80180b2 <tcp_output+0x3ce>
    goto output_done;
 80180ac:	bf00      	nop
 80180ae:	e000      	b.n	80180b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80180b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	8b5b      	ldrh	r3, [r3, #26]
 80180b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80180ba:	b29a      	uxth	r2, r3
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80180c0:	2300      	movs	r3, #0
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3728      	adds	r7, #40	; 0x28
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bdb0      	pop	{r4, r5, r7, pc}
 80180ca:	bf00      	nop

080180cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d106      	bne.n	80180e8 <tcp_output_segment_busy+0x1c>
 80180da:	4b09      	ldr	r3, [pc, #36]	; (8018100 <tcp_output_segment_busy+0x34>)
 80180dc:	f240 529a 	movw	r2, #1434	; 0x59a
 80180e0:	4908      	ldr	r1, [pc, #32]	; (8018104 <tcp_output_segment_busy+0x38>)
 80180e2:	4809      	ldr	r0, [pc, #36]	; (8018108 <tcp_output_segment_busy+0x3c>)
 80180e4:	f004 f81e 	bl	801c124 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	7b9b      	ldrb	r3, [r3, #14]
 80180ee:	2b01      	cmp	r3, #1
 80180f0:	d001      	beq.n	80180f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80180f2:	2301      	movs	r3, #1
 80180f4:	e000      	b.n	80180f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80180f6:	2300      	movs	r3, #0
}
 80180f8:	4618      	mov	r0, r3
 80180fa:	3708      	adds	r7, #8
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}
 8018100:	08020110 	.word	0x08020110
 8018104:	080206ac 	.word	0x080206ac
 8018108:	08020164 	.word	0x08020164

0801810c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801810c:	b5b0      	push	{r4, r5, r7, lr}
 801810e:	b08c      	sub	sp, #48	; 0x30
 8018110:	af04      	add	r7, sp, #16
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d106      	bne.n	801812c <tcp_output_segment+0x20>
 801811e:	4b63      	ldr	r3, [pc, #396]	; (80182ac <tcp_output_segment+0x1a0>)
 8018120:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018124:	4962      	ldr	r1, [pc, #392]	; (80182b0 <tcp_output_segment+0x1a4>)
 8018126:	4863      	ldr	r0, [pc, #396]	; (80182b4 <tcp_output_segment+0x1a8>)
 8018128:	f003 fffc 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d106      	bne.n	8018140 <tcp_output_segment+0x34>
 8018132:	4b5e      	ldr	r3, [pc, #376]	; (80182ac <tcp_output_segment+0x1a0>)
 8018134:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018138:	495f      	ldr	r1, [pc, #380]	; (80182b8 <tcp_output_segment+0x1ac>)
 801813a:	485e      	ldr	r0, [pc, #376]	; (80182b4 <tcp_output_segment+0x1a8>)
 801813c:	f003 fff2 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d106      	bne.n	8018154 <tcp_output_segment+0x48>
 8018146:	4b59      	ldr	r3, [pc, #356]	; (80182ac <tcp_output_segment+0x1a0>)
 8018148:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801814c:	495b      	ldr	r1, [pc, #364]	; (80182bc <tcp_output_segment+0x1b0>)
 801814e:	4859      	ldr	r0, [pc, #356]	; (80182b4 <tcp_output_segment+0x1a8>)
 8018150:	f003 ffe8 	bl	801c124 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018154:	68f8      	ldr	r0, [r7, #12]
 8018156:	f7ff ffb9 	bl	80180cc <tcp_output_segment_busy>
 801815a:	4603      	mov	r3, r0
 801815c:	2b00      	cmp	r3, #0
 801815e:	d001      	beq.n	8018164 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018160:	2300      	movs	r3, #0
 8018162:	e09f      	b.n	80182a4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	68dc      	ldr	r4, [r3, #12]
 801816c:	4610      	mov	r0, r2
 801816e:	f7f8 fe7c 	bl	8010e6a <lwip_htonl>
 8018172:	4603      	mov	r3, r0
 8018174:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018176:	68bb      	ldr	r3, [r7, #8]
 8018178:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	68dc      	ldr	r4, [r3, #12]
 801817e:	4610      	mov	r0, r2
 8018180:	f7f8 fe5e 	bl	8010e40 <lwip_htons>
 8018184:	4603      	mov	r3, r0
 8018186:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801818c:	68ba      	ldr	r2, [r7, #8]
 801818e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018190:	441a      	add	r2, r3
 8018192:	68bb      	ldr	r3, [r7, #8]
 8018194:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	68db      	ldr	r3, [r3, #12]
 801819a:	3314      	adds	r3, #20
 801819c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	7a9b      	ldrb	r3, [r3, #10]
 80181a2:	f003 0301 	and.w	r3, r3, #1
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d015      	beq.n	80181d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80181aa:	68bb      	ldr	r3, [r7, #8]
 80181ac:	3304      	adds	r3, #4
 80181ae:	461a      	mov	r2, r3
 80181b0:	6879      	ldr	r1, [r7, #4]
 80181b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80181b6:	f7fc fa37 	bl	8014628 <tcp_eff_send_mss_netif>
 80181ba:	4603      	mov	r3, r0
 80181bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80181be:	8b7b      	ldrh	r3, [r7, #26]
 80181c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7f8 fe50 	bl	8010e6a <lwip_htonl>
 80181ca:	4602      	mov	r2, r0
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 80181d0:	69fb      	ldr	r3, [r7, #28]
 80181d2:	3304      	adds	r3, #4
 80181d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80181dc:	2b00      	cmp	r3, #0
 80181de:	da02      	bge.n	80181e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	2200      	movs	r2, #0
 80181e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d10c      	bne.n	8018208 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80181ee:	4b34      	ldr	r3, [pc, #208]	; (80182c0 <tcp_output_segment+0x1b4>)
 80181f0:	681a      	ldr	r2, [r3, #0]
 80181f2:	68bb      	ldr	r3, [r7, #8]
 80181f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	68db      	ldr	r3, [r3, #12]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7f8 fe34 	bl	8010e6a <lwip_htonl>
 8018202:	4602      	mov	r2, r0
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	68da      	ldr	r2, [r3, #12]
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	685b      	ldr	r3, [r3, #4]
 8018212:	1ad3      	subs	r3, r2, r3
 8018214:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	8959      	ldrh	r1, [r3, #10]
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	685b      	ldr	r3, [r3, #4]
 8018220:	8b3a      	ldrh	r2, [r7, #24]
 8018222:	1a8a      	subs	r2, r1, r2
 8018224:	b292      	uxth	r2, r2
 8018226:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	8919      	ldrh	r1, [r3, #8]
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	685b      	ldr	r3, [r3, #4]
 8018232:	8b3a      	ldrh	r2, [r7, #24]
 8018234:	1a8a      	subs	r2, r1, r2
 8018236:	b292      	uxth	r2, r2
 8018238:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	68fa      	ldr	r2, [r7, #12]
 8018240:	68d2      	ldr	r2, [r2, #12]
 8018242:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	68db      	ldr	r3, [r3, #12]
 8018248:	2200      	movs	r2, #0
 801824a:	741a      	strb	r2, [r3, #16]
 801824c:	2200      	movs	r2, #0
 801824e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	68db      	ldr	r3, [r3, #12]
 8018254:	f103 0214 	add.w	r2, r3, #20
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	7a9b      	ldrb	r3, [r3, #10]
 801825c:	009b      	lsls	r3, r3, #2
 801825e:	f003 0304 	and.w	r3, r3, #4
 8018262:	4413      	add	r3, r2
 8018264:	69fa      	ldr	r2, [r7, #28]
 8018266:	429a      	cmp	r2, r3
 8018268:	d006      	beq.n	8018278 <tcp_output_segment+0x16c>
 801826a:	4b10      	ldr	r3, [pc, #64]	; (80182ac <tcp_output_segment+0x1a0>)
 801826c:	f240 621c 	movw	r2, #1564	; 0x61c
 8018270:	4914      	ldr	r1, [pc, #80]	; (80182c4 <tcp_output_segment+0x1b8>)
 8018272:	4810      	ldr	r0, [pc, #64]	; (80182b4 <tcp_output_segment+0x1a8>)
 8018274:	f003 ff56 	bl	801c124 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	6858      	ldr	r0, [r3, #4]
 801827c:	68b9      	ldr	r1, [r7, #8]
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	1d1c      	adds	r4, r3, #4
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	7add      	ldrb	r5, [r3, #11]
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	7a9b      	ldrb	r3, [r3, #10]
 801828a:	687a      	ldr	r2, [r7, #4]
 801828c:	9202      	str	r2, [sp, #8]
 801828e:	2206      	movs	r2, #6
 8018290:	9201      	str	r2, [sp, #4]
 8018292:	9300      	str	r3, [sp, #0]
 8018294:	462b      	mov	r3, r5
 8018296:	4622      	mov	r2, r4
 8018298:	f002 fbac 	bl	801a9f4 <ip4_output_if>
 801829c:	4603      	mov	r3, r0
 801829e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80182a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3720      	adds	r7, #32
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bdb0      	pop	{r4, r5, r7, pc}
 80182ac:	08020110 	.word	0x08020110
 80182b0:	080206d4 	.word	0x080206d4
 80182b4:	08020164 	.word	0x08020164
 80182b8:	080206f4 	.word	0x080206f4
 80182bc:	08020714 	.word	0x08020714
 80182c0:	20014f68 	.word	0x20014f68
 80182c4:	08020738 	.word	0x08020738

080182c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80182c8:	b5b0      	push	{r4, r5, r7, lr}
 80182ca:	b084      	sub	sp, #16
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d106      	bne.n	80182e4 <tcp_rexmit_rto_prepare+0x1c>
 80182d6:	4b31      	ldr	r3, [pc, #196]	; (801839c <tcp_rexmit_rto_prepare+0xd4>)
 80182d8:	f240 6263 	movw	r2, #1635	; 0x663
 80182dc:	4930      	ldr	r1, [pc, #192]	; (80183a0 <tcp_rexmit_rto_prepare+0xd8>)
 80182de:	4831      	ldr	r0, [pc, #196]	; (80183a4 <tcp_rexmit_rto_prepare+0xdc>)
 80182e0:	f003 ff20 	bl	801c124 <iprintf>

  if (pcb->unacked == NULL) {
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d102      	bne.n	80182f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80182ec:	f06f 0305 	mvn.w	r3, #5
 80182f0:	e050      	b.n	8018394 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182f6:	60fb      	str	r3, [r7, #12]
 80182f8:	e00b      	b.n	8018312 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80182fa:	68f8      	ldr	r0, [r7, #12]
 80182fc:	f7ff fee6 	bl	80180cc <tcp_output_segment_busy>
 8018300:	4603      	mov	r3, r0
 8018302:	2b00      	cmp	r3, #0
 8018304:	d002      	beq.n	801830c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018306:	f06f 0305 	mvn.w	r3, #5
 801830a:	e043      	b.n	8018394 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	60fb      	str	r3, [r7, #12]
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d1ef      	bne.n	80182fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801831a:	68f8      	ldr	r0, [r7, #12]
 801831c:	f7ff fed6 	bl	80180cc <tcp_output_segment_busy>
 8018320:	4603      	mov	r3, r0
 8018322:	2b00      	cmp	r3, #0
 8018324:	d002      	beq.n	801832c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018326:	f06f 0305 	mvn.w	r3, #5
 801832a:	e033      	b.n	8018394 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	2200      	movs	r2, #0
 8018340:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	8b5b      	ldrh	r3, [r3, #26]
 8018346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801834a:	b29a      	uxth	r2, r3
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	68db      	ldr	r3, [r3, #12]
 8018354:	685b      	ldr	r3, [r3, #4]
 8018356:	4618      	mov	r0, r3
 8018358:	f7f8 fd87 	bl	8010e6a <lwip_htonl>
 801835c:	4604      	mov	r4, r0
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	891b      	ldrh	r3, [r3, #8]
 8018362:	461d      	mov	r5, r3
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	68db      	ldr	r3, [r3, #12]
 8018368:	899b      	ldrh	r3, [r3, #12]
 801836a:	b29b      	uxth	r3, r3
 801836c:	4618      	mov	r0, r3
 801836e:	f7f8 fd67 	bl	8010e40 <lwip_htons>
 8018372:	4603      	mov	r3, r0
 8018374:	b2db      	uxtb	r3, r3
 8018376:	f003 0303 	and.w	r3, r3, #3
 801837a:	2b00      	cmp	r3, #0
 801837c:	d001      	beq.n	8018382 <tcp_rexmit_rto_prepare+0xba>
 801837e:	2301      	movs	r3, #1
 8018380:	e000      	b.n	8018384 <tcp_rexmit_rto_prepare+0xbc>
 8018382:	2300      	movs	r3, #0
 8018384:	442b      	add	r3, r5
 8018386:	18e2      	adds	r2, r4, r3
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2200      	movs	r2, #0
 8018390:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018392:	2300      	movs	r3, #0
}
 8018394:	4618      	mov	r0, r3
 8018396:	3710      	adds	r7, #16
 8018398:	46bd      	mov	sp, r7
 801839a:	bdb0      	pop	{r4, r5, r7, pc}
 801839c:	08020110 	.word	0x08020110
 80183a0:	0802074c 	.word	0x0802074c
 80183a4:	08020164 	.word	0x08020164

080183a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b082      	sub	sp, #8
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d106      	bne.n	80183c4 <tcp_rexmit_rto_commit+0x1c>
 80183b6:	4b0d      	ldr	r3, [pc, #52]	; (80183ec <tcp_rexmit_rto_commit+0x44>)
 80183b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80183bc:	490c      	ldr	r1, [pc, #48]	; (80183f0 <tcp_rexmit_rto_commit+0x48>)
 80183be:	480d      	ldr	r0, [pc, #52]	; (80183f4 <tcp_rexmit_rto_commit+0x4c>)
 80183c0:	f003 feb0 	bl	801c124 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80183ca:	2bff      	cmp	r3, #255	; 0xff
 80183cc:	d007      	beq.n	80183de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80183d4:	3301      	adds	r3, #1
 80183d6:	b2da      	uxtb	r2, r3
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7ff fc80 	bl	8017ce4 <tcp_output>
}
 80183e4:	bf00      	nop
 80183e6:	3708      	adds	r7, #8
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	08020110 	.word	0x08020110
 80183f0:	08020770 	.word	0x08020770
 80183f4:	08020164 	.word	0x08020164

080183f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d106      	bne.n	8018414 <tcp_rexmit_rto+0x1c>
 8018406:	4b0a      	ldr	r3, [pc, #40]	; (8018430 <tcp_rexmit_rto+0x38>)
 8018408:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801840c:	4909      	ldr	r1, [pc, #36]	; (8018434 <tcp_rexmit_rto+0x3c>)
 801840e:	480a      	ldr	r0, [pc, #40]	; (8018438 <tcp_rexmit_rto+0x40>)
 8018410:	f003 fe88 	bl	801c124 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f7ff ff57 	bl	80182c8 <tcp_rexmit_rto_prepare>
 801841a:	4603      	mov	r3, r0
 801841c:	2b00      	cmp	r3, #0
 801841e:	d102      	bne.n	8018426 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f7ff ffc1 	bl	80183a8 <tcp_rexmit_rto_commit>
  }
}
 8018426:	bf00      	nop
 8018428:	3708      	adds	r7, #8
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}
 801842e:	bf00      	nop
 8018430:	08020110 	.word	0x08020110
 8018434:	08020794 	.word	0x08020794
 8018438:	08020164 	.word	0x08020164

0801843c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801843c:	b590      	push	{r4, r7, lr}
 801843e:	b085      	sub	sp, #20
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d106      	bne.n	8018458 <tcp_rexmit+0x1c>
 801844a:	4b2f      	ldr	r3, [pc, #188]	; (8018508 <tcp_rexmit+0xcc>)
 801844c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018450:	492e      	ldr	r1, [pc, #184]	; (801850c <tcp_rexmit+0xd0>)
 8018452:	482f      	ldr	r0, [pc, #188]	; (8018510 <tcp_rexmit+0xd4>)
 8018454:	f003 fe66 	bl	801c124 <iprintf>

  if (pcb->unacked == NULL) {
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801845c:	2b00      	cmp	r3, #0
 801845e:	d102      	bne.n	8018466 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018460:	f06f 0305 	mvn.w	r3, #5
 8018464:	e04c      	b.n	8018500 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801846a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801846c:	68b8      	ldr	r0, [r7, #8]
 801846e:	f7ff fe2d 	bl	80180cc <tcp_output_segment_busy>
 8018472:	4603      	mov	r3, r0
 8018474:	2b00      	cmp	r3, #0
 8018476:	d002      	beq.n	801847e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018478:	f06f 0305 	mvn.w	r3, #5
 801847c:	e040      	b.n	8018500 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801847e:	68bb      	ldr	r3, [r7, #8]
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	336c      	adds	r3, #108	; 0x6c
 801848a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801848c:	e002      	b.n	8018494 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d011      	beq.n	80184c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	68db      	ldr	r3, [r3, #12]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f8 fce0 	bl	8010e6a <lwip_htonl>
 80184aa:	4604      	mov	r4, r0
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	68db      	ldr	r3, [r3, #12]
 80184b0:	685b      	ldr	r3, [r3, #4]
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7f8 fcd9 	bl	8010e6a <lwip_htonl>
 80184b8:	4603      	mov	r3, r0
 80184ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80184bc:	2b00      	cmp	r3, #0
 80184be:	dbe6      	blt.n	801848e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	68ba      	ldr	r2, [r7, #8]
 80184cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d103      	bne.n	80184de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2200      	movs	r2, #0
 80184da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80184e4:	2bff      	cmp	r3, #255	; 0xff
 80184e6:	d007      	beq.n	80184f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80184ee:	3301      	adds	r3, #1
 80184f0:	b2da      	uxtb	r2, r3
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	2200      	movs	r2, #0
 80184fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80184fe:	2300      	movs	r3, #0
}
 8018500:	4618      	mov	r0, r3
 8018502:	3714      	adds	r7, #20
 8018504:	46bd      	mov	sp, r7
 8018506:	bd90      	pop	{r4, r7, pc}
 8018508:	08020110 	.word	0x08020110
 801850c:	080207b0 	.word	0x080207b0
 8018510:	08020164 	.word	0x08020164

08018514 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b082      	sub	sp, #8
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d106      	bne.n	8018530 <tcp_rexmit_fast+0x1c>
 8018522:	4b2a      	ldr	r3, [pc, #168]	; (80185cc <tcp_rexmit_fast+0xb8>)
 8018524:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018528:	4929      	ldr	r1, [pc, #164]	; (80185d0 <tcp_rexmit_fast+0xbc>)
 801852a:	482a      	ldr	r0, [pc, #168]	; (80185d4 <tcp_rexmit_fast+0xc0>)
 801852c:	f003 fdfa 	bl	801c124 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018534:	2b00      	cmp	r3, #0
 8018536:	d044      	beq.n	80185c2 <tcp_rexmit_fast+0xae>
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	8b5b      	ldrh	r3, [r3, #26]
 801853c:	f003 0304 	and.w	r3, r3, #4
 8018540:	2b00      	cmp	r3, #0
 8018542:	d13e      	bne.n	80185c2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f7ff ff79 	bl	801843c <tcp_rexmit>
 801854a:	4603      	mov	r3, r0
 801854c:	2b00      	cmp	r3, #0
 801854e:	d138      	bne.n	80185c2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801855c:	4293      	cmp	r3, r2
 801855e:	bf28      	it	cs
 8018560:	4613      	movcs	r3, r2
 8018562:	b29b      	uxth	r3, r3
 8018564:	0fda      	lsrs	r2, r3, #31
 8018566:	4413      	add	r3, r2
 8018568:	105b      	asrs	r3, r3, #1
 801856a:	b29a      	uxth	r2, r3
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018578:	461a      	mov	r2, r3
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	429a      	cmp	r2, r3
 8018582:	d206      	bcs.n	8018592 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018588:	005b      	lsls	r3, r3, #1
 801858a:	b29a      	uxth	r2, r3
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801859c:	4619      	mov	r1, r3
 801859e:	0049      	lsls	r1, r1, #1
 80185a0:	440b      	add	r3, r1
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	4413      	add	r3, r2
 80185a6:	b29a      	uxth	r2, r3
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	8b5b      	ldrh	r3, [r3, #26]
 80185b2:	f043 0304 	orr.w	r3, r3, #4
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	2200      	movs	r2, #0
 80185c0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80185c2:	bf00      	nop
 80185c4:	3708      	adds	r7, #8
 80185c6:	46bd      	mov	sp, r7
 80185c8:	bd80      	pop	{r7, pc}
 80185ca:	bf00      	nop
 80185cc:	08020110 	.word	0x08020110
 80185d0:	080207c8 	.word	0x080207c8
 80185d4:	08020164 	.word	0x08020164

080185d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b086      	sub	sp, #24
 80185dc:	af00      	add	r7, sp, #0
 80185de:	60f8      	str	r0, [r7, #12]
 80185e0:	607b      	str	r3, [r7, #4]
 80185e2:	460b      	mov	r3, r1
 80185e4:	817b      	strh	r3, [r7, #10]
 80185e6:	4613      	mov	r3, r2
 80185e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80185ea:	897a      	ldrh	r2, [r7, #10]
 80185ec:	893b      	ldrh	r3, [r7, #8]
 80185ee:	4413      	add	r3, r2
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	3314      	adds	r3, #20
 80185f4:	b29b      	uxth	r3, r3
 80185f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80185fa:	4619      	mov	r1, r3
 80185fc:	2022      	movs	r0, #34	; 0x22
 80185fe:	f7f9 fce7 	bl	8011fd0 <pbuf_alloc>
 8018602:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018604:	697b      	ldr	r3, [r7, #20]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d04d      	beq.n	80186a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801860a:	897b      	ldrh	r3, [r7, #10]
 801860c:	3313      	adds	r3, #19
 801860e:	697a      	ldr	r2, [r7, #20]
 8018610:	8952      	ldrh	r2, [r2, #10]
 8018612:	4293      	cmp	r3, r2
 8018614:	db06      	blt.n	8018624 <tcp_output_alloc_header_common+0x4c>
 8018616:	4b26      	ldr	r3, [pc, #152]	; (80186b0 <tcp_output_alloc_header_common+0xd8>)
 8018618:	f240 7223 	movw	r2, #1827	; 0x723
 801861c:	4925      	ldr	r1, [pc, #148]	; (80186b4 <tcp_output_alloc_header_common+0xdc>)
 801861e:	4826      	ldr	r0, [pc, #152]	; (80186b8 <tcp_output_alloc_header_common+0xe0>)
 8018620:	f003 fd80 	bl	801c124 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	685b      	ldr	r3, [r3, #4]
 8018628:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801862a:	8c3b      	ldrh	r3, [r7, #32]
 801862c:	4618      	mov	r0, r3
 801862e:	f7f8 fc07 	bl	8010e40 <lwip_htons>
 8018632:	4603      	mov	r3, r0
 8018634:	461a      	mov	r2, r3
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801863a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801863c:	4618      	mov	r0, r3
 801863e:	f7f8 fbff 	bl	8010e40 <lwip_htons>
 8018642:	4603      	mov	r3, r0
 8018644:	461a      	mov	r2, r3
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801864a:	693b      	ldr	r3, [r7, #16]
 801864c:	687a      	ldr	r2, [r7, #4]
 801864e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018650:	68f8      	ldr	r0, [r7, #12]
 8018652:	f7f8 fc0a 	bl	8010e6a <lwip_htonl>
 8018656:	4602      	mov	r2, r0
 8018658:	693b      	ldr	r3, [r7, #16]
 801865a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801865c:	897b      	ldrh	r3, [r7, #10]
 801865e:	089b      	lsrs	r3, r3, #2
 8018660:	b29b      	uxth	r3, r3
 8018662:	3305      	adds	r3, #5
 8018664:	b29b      	uxth	r3, r3
 8018666:	031b      	lsls	r3, r3, #12
 8018668:	b29a      	uxth	r2, r3
 801866a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801866e:	b29b      	uxth	r3, r3
 8018670:	4313      	orrs	r3, r2
 8018672:	b29b      	uxth	r3, r3
 8018674:	4618      	mov	r0, r3
 8018676:	f7f8 fbe3 	bl	8010e40 <lwip_htons>
 801867a:	4603      	mov	r3, r0
 801867c:	461a      	mov	r2, r3
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018682:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018684:	4618      	mov	r0, r3
 8018686:	f7f8 fbdb 	bl	8010e40 <lwip_htons>
 801868a:	4603      	mov	r3, r0
 801868c:	461a      	mov	r2, r3
 801868e:	693b      	ldr	r3, [r7, #16]
 8018690:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	2200      	movs	r2, #0
 8018696:	741a      	strb	r2, [r3, #16]
 8018698:	2200      	movs	r2, #0
 801869a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	2200      	movs	r2, #0
 80186a0:	749a      	strb	r2, [r3, #18]
 80186a2:	2200      	movs	r2, #0
 80186a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80186a6:	697b      	ldr	r3, [r7, #20]
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	3718      	adds	r7, #24
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	08020110 	.word	0x08020110
 80186b4:	080207e8 	.word	0x080207e8
 80186b8:	08020164 	.word	0x08020164

080186bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80186bc:	b5b0      	push	{r4, r5, r7, lr}
 80186be:	b08a      	sub	sp, #40	; 0x28
 80186c0:	af04      	add	r7, sp, #16
 80186c2:	60f8      	str	r0, [r7, #12]
 80186c4:	607b      	str	r3, [r7, #4]
 80186c6:	460b      	mov	r3, r1
 80186c8:	817b      	strh	r3, [r7, #10]
 80186ca:	4613      	mov	r3, r2
 80186cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d106      	bne.n	80186e2 <tcp_output_alloc_header+0x26>
 80186d4:	4b15      	ldr	r3, [pc, #84]	; (801872c <tcp_output_alloc_header+0x70>)
 80186d6:	f240 7242 	movw	r2, #1858	; 0x742
 80186da:	4915      	ldr	r1, [pc, #84]	; (8018730 <tcp_output_alloc_header+0x74>)
 80186dc:	4815      	ldr	r0, [pc, #84]	; (8018734 <tcp_output_alloc_header+0x78>)
 80186de:	f003 fd21 	bl	801c124 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	8adb      	ldrh	r3, [r3, #22]
 80186ea:	68fa      	ldr	r2, [r7, #12]
 80186ec:	8b12      	ldrh	r2, [r2, #24]
 80186ee:	68f9      	ldr	r1, [r7, #12]
 80186f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80186f2:	893d      	ldrh	r5, [r7, #8]
 80186f4:	897c      	ldrh	r4, [r7, #10]
 80186f6:	9103      	str	r1, [sp, #12]
 80186f8:	2110      	movs	r1, #16
 80186fa:	9102      	str	r1, [sp, #8]
 80186fc:	9201      	str	r2, [sp, #4]
 80186fe:	9300      	str	r3, [sp, #0]
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	462a      	mov	r2, r5
 8018704:	4621      	mov	r1, r4
 8018706:	f7ff ff67 	bl	80185d8 <tcp_output_alloc_header_common>
 801870a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d006      	beq.n	8018720 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018716:	68fa      	ldr	r2, [r7, #12]
 8018718:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801871a:	441a      	add	r2, r3
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018720:	697b      	ldr	r3, [r7, #20]
}
 8018722:	4618      	mov	r0, r3
 8018724:	3718      	adds	r7, #24
 8018726:	46bd      	mov	sp, r7
 8018728:	bdb0      	pop	{r4, r5, r7, pc}
 801872a:	bf00      	nop
 801872c:	08020110 	.word	0x08020110
 8018730:	08020818 	.word	0x08020818
 8018734:	08020164 	.word	0x08020164

08018738 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b088      	sub	sp, #32
 801873c:	af00      	add	r7, sp, #0
 801873e:	60f8      	str	r0, [r7, #12]
 8018740:	60b9      	str	r1, [r7, #8]
 8018742:	4611      	mov	r1, r2
 8018744:	461a      	mov	r2, r3
 8018746:	460b      	mov	r3, r1
 8018748:	71fb      	strb	r3, [r7, #7]
 801874a:	4613      	mov	r3, r2
 801874c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801874e:	2300      	movs	r3, #0
 8018750:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d106      	bne.n	8018766 <tcp_output_fill_options+0x2e>
 8018758:	4b13      	ldr	r3, [pc, #76]	; (80187a8 <tcp_output_fill_options+0x70>)
 801875a:	f240 7256 	movw	r2, #1878	; 0x756
 801875e:	4913      	ldr	r1, [pc, #76]	; (80187ac <tcp_output_fill_options+0x74>)
 8018760:	4813      	ldr	r0, [pc, #76]	; (80187b0 <tcp_output_fill_options+0x78>)
 8018762:	f003 fcdf 	bl	801c124 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	685b      	ldr	r3, [r3, #4]
 801876a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801876c:	69bb      	ldr	r3, [r7, #24]
 801876e:	3314      	adds	r3, #20
 8018770:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018772:	69bb      	ldr	r3, [r7, #24]
 8018774:	f103 0214 	add.w	r2, r3, #20
 8018778:	8bfb      	ldrh	r3, [r7, #30]
 801877a:	009b      	lsls	r3, r3, #2
 801877c:	4619      	mov	r1, r3
 801877e:	79fb      	ldrb	r3, [r7, #7]
 8018780:	009b      	lsls	r3, r3, #2
 8018782:	f003 0304 	and.w	r3, r3, #4
 8018786:	440b      	add	r3, r1
 8018788:	4413      	add	r3, r2
 801878a:	697a      	ldr	r2, [r7, #20]
 801878c:	429a      	cmp	r2, r3
 801878e:	d006      	beq.n	801879e <tcp_output_fill_options+0x66>
 8018790:	4b05      	ldr	r3, [pc, #20]	; (80187a8 <tcp_output_fill_options+0x70>)
 8018792:	f240 7275 	movw	r2, #1909	; 0x775
 8018796:	4907      	ldr	r1, [pc, #28]	; (80187b4 <tcp_output_fill_options+0x7c>)
 8018798:	4805      	ldr	r0, [pc, #20]	; (80187b0 <tcp_output_fill_options+0x78>)
 801879a:	f003 fcc3 	bl	801c124 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801879e:	bf00      	nop
 80187a0:	3720      	adds	r7, #32
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}
 80187a6:	bf00      	nop
 80187a8:	08020110 	.word	0x08020110
 80187ac:	08020840 	.word	0x08020840
 80187b0:	08020164 	.word	0x08020164
 80187b4:	08020738 	.word	0x08020738

080187b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b08a      	sub	sp, #40	; 0x28
 80187bc:	af04      	add	r7, sp, #16
 80187be:	60f8      	str	r0, [r7, #12]
 80187c0:	60b9      	str	r1, [r7, #8]
 80187c2:	607a      	str	r2, [r7, #4]
 80187c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d106      	bne.n	80187da <tcp_output_control_segment+0x22>
 80187cc:	4b1c      	ldr	r3, [pc, #112]	; (8018840 <tcp_output_control_segment+0x88>)
 80187ce:	f240 7287 	movw	r2, #1927	; 0x787
 80187d2:	491c      	ldr	r1, [pc, #112]	; (8018844 <tcp_output_control_segment+0x8c>)
 80187d4:	481c      	ldr	r0, [pc, #112]	; (8018848 <tcp_output_control_segment+0x90>)
 80187d6:	f003 fca5 	bl	801c124 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80187da:	683a      	ldr	r2, [r7, #0]
 80187dc:	6879      	ldr	r1, [r7, #4]
 80187de:	68f8      	ldr	r0, [r7, #12]
 80187e0:	f7fe fae8 	bl	8016db4 <tcp_route>
 80187e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80187e6:	693b      	ldr	r3, [r7, #16]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d102      	bne.n	80187f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80187ec:	23fc      	movs	r3, #252	; 0xfc
 80187ee:	75fb      	strb	r3, [r7, #23]
 80187f0:	e01c      	b.n	801882c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d006      	beq.n	8018806 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	7adb      	ldrb	r3, [r3, #11]
 80187fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	7a9b      	ldrb	r3, [r3, #10]
 8018802:	757b      	strb	r3, [r7, #21]
 8018804:	e003      	b.n	801880e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018806:	23ff      	movs	r3, #255	; 0xff
 8018808:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801880a:	2300      	movs	r3, #0
 801880c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801880e:	7dba      	ldrb	r2, [r7, #22]
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	9302      	str	r3, [sp, #8]
 8018814:	2306      	movs	r3, #6
 8018816:	9301      	str	r3, [sp, #4]
 8018818:	7d7b      	ldrb	r3, [r7, #21]
 801881a:	9300      	str	r3, [sp, #0]
 801881c:	4613      	mov	r3, r2
 801881e:	683a      	ldr	r2, [r7, #0]
 8018820:	6879      	ldr	r1, [r7, #4]
 8018822:	68b8      	ldr	r0, [r7, #8]
 8018824:	f002 f8e6 	bl	801a9f4 <ip4_output_if>
 8018828:	4603      	mov	r3, r0
 801882a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801882c:	68b8      	ldr	r0, [r7, #8]
 801882e:	f7f9 feb3 	bl	8012598 <pbuf_free>
  return err;
 8018832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018836:	4618      	mov	r0, r3
 8018838:	3718      	adds	r7, #24
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	08020110 	.word	0x08020110
 8018844:	08020868 	.word	0x08020868
 8018848:	08020164 	.word	0x08020164

0801884c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801884c:	b590      	push	{r4, r7, lr}
 801884e:	b08b      	sub	sp, #44	; 0x2c
 8018850:	af04      	add	r7, sp, #16
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	607a      	str	r2, [r7, #4]
 8018858:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801885a:	683b      	ldr	r3, [r7, #0]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d106      	bne.n	801886e <tcp_rst+0x22>
 8018860:	4b1f      	ldr	r3, [pc, #124]	; (80188e0 <tcp_rst+0x94>)
 8018862:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018866:	491f      	ldr	r1, [pc, #124]	; (80188e4 <tcp_rst+0x98>)
 8018868:	481f      	ldr	r0, [pc, #124]	; (80188e8 <tcp_rst+0x9c>)
 801886a:	f003 fc5b 	bl	801c124 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018870:	2b00      	cmp	r3, #0
 8018872:	d106      	bne.n	8018882 <tcp_rst+0x36>
 8018874:	4b1a      	ldr	r3, [pc, #104]	; (80188e0 <tcp_rst+0x94>)
 8018876:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801887a:	491c      	ldr	r1, [pc, #112]	; (80188ec <tcp_rst+0xa0>)
 801887c:	481a      	ldr	r0, [pc, #104]	; (80188e8 <tcp_rst+0x9c>)
 801887e:	f003 fc51 	bl	801c124 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018882:	2300      	movs	r3, #0
 8018884:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018886:	f24a 030f 	movw	r3, #40975	; 0xa00f
 801888a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801888c:	7dfb      	ldrb	r3, [r7, #23]
 801888e:	b29c      	uxth	r4, r3
 8018890:	68b8      	ldr	r0, [r7, #8]
 8018892:	f7f8 faea 	bl	8010e6a <lwip_htonl>
 8018896:	4602      	mov	r2, r0
 8018898:	8abb      	ldrh	r3, [r7, #20]
 801889a:	9303      	str	r3, [sp, #12]
 801889c:	2314      	movs	r3, #20
 801889e:	9302      	str	r3, [sp, #8]
 80188a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80188a2:	9301      	str	r3, [sp, #4]
 80188a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80188a6:	9300      	str	r3, [sp, #0]
 80188a8:	4613      	mov	r3, r2
 80188aa:	2200      	movs	r2, #0
 80188ac:	4621      	mov	r1, r4
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	f7ff fe92 	bl	80185d8 <tcp_output_alloc_header_common>
 80188b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80188b6:	693b      	ldr	r3, [r7, #16]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d00c      	beq.n	80188d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80188bc:	7dfb      	ldrb	r3, [r7, #23]
 80188be:	2200      	movs	r2, #0
 80188c0:	6939      	ldr	r1, [r7, #16]
 80188c2:	68f8      	ldr	r0, [r7, #12]
 80188c4:	f7ff ff38 	bl	8018738 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80188c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ca:	683a      	ldr	r2, [r7, #0]
 80188cc:	6939      	ldr	r1, [r7, #16]
 80188ce:	68f8      	ldr	r0, [r7, #12]
 80188d0:	f7ff ff72 	bl	80187b8 <tcp_output_control_segment>
 80188d4:	e000      	b.n	80188d8 <tcp_rst+0x8c>
    return;
 80188d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80188d8:	371c      	adds	r7, #28
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd90      	pop	{r4, r7, pc}
 80188de:	bf00      	nop
 80188e0:	08020110 	.word	0x08020110
 80188e4:	08020894 	.word	0x08020894
 80188e8:	08020164 	.word	0x08020164
 80188ec:	080208b0 	.word	0x080208b0

080188f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80188f0:	b590      	push	{r4, r7, lr}
 80188f2:	b087      	sub	sp, #28
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80188f8:	2300      	movs	r3, #0
 80188fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80188fc:	2300      	movs	r3, #0
 80188fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d106      	bne.n	8018914 <tcp_send_empty_ack+0x24>
 8018906:	4b28      	ldr	r3, [pc, #160]	; (80189a8 <tcp_send_empty_ack+0xb8>)
 8018908:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801890c:	4927      	ldr	r1, [pc, #156]	; (80189ac <tcp_send_empty_ack+0xbc>)
 801890e:	4828      	ldr	r0, [pc, #160]	; (80189b0 <tcp_send_empty_ack+0xc0>)
 8018910:	f003 fc08 	bl	801c124 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018914:	7dfb      	ldrb	r3, [r7, #23]
 8018916:	009b      	lsls	r3, r3, #2
 8018918:	b2db      	uxtb	r3, r3
 801891a:	f003 0304 	and.w	r3, r3, #4
 801891e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018920:	7d7b      	ldrb	r3, [r7, #21]
 8018922:	b29c      	uxth	r4, r3
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018928:	4618      	mov	r0, r3
 801892a:	f7f8 fa9e 	bl	8010e6a <lwip_htonl>
 801892e:	4603      	mov	r3, r0
 8018930:	2200      	movs	r2, #0
 8018932:	4621      	mov	r1, r4
 8018934:	6878      	ldr	r0, [r7, #4]
 8018936:	f7ff fec1 	bl	80186bc <tcp_output_alloc_header>
 801893a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801893c:	693b      	ldr	r3, [r7, #16]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d109      	bne.n	8018956 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	8b5b      	ldrh	r3, [r3, #26]
 8018946:	f043 0303 	orr.w	r3, r3, #3
 801894a:	b29a      	uxth	r2, r3
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018950:	f06f 0301 	mvn.w	r3, #1
 8018954:	e023      	b.n	801899e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018956:	7dbb      	ldrb	r3, [r7, #22]
 8018958:	7dfa      	ldrb	r2, [r7, #23]
 801895a:	6939      	ldr	r1, [r7, #16]
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7ff feeb 	bl	8018738 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018962:	687a      	ldr	r2, [r7, #4]
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	3304      	adds	r3, #4
 8018968:	6939      	ldr	r1, [r7, #16]
 801896a:	6878      	ldr	r0, [r7, #4]
 801896c:	f7ff ff24 	bl	80187b8 <tcp_output_control_segment>
 8018970:	4603      	mov	r3, r0
 8018972:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d007      	beq.n	801898c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	8b5b      	ldrh	r3, [r3, #26]
 8018980:	f043 0303 	orr.w	r3, r3, #3
 8018984:	b29a      	uxth	r2, r3
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	835a      	strh	r2, [r3, #26]
 801898a:	e006      	b.n	801899a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	8b5b      	ldrh	r3, [r3, #26]
 8018990:	f023 0303 	bic.w	r3, r3, #3
 8018994:	b29a      	uxth	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801899a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801899e:	4618      	mov	r0, r3
 80189a0:	371c      	adds	r7, #28
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd90      	pop	{r4, r7, pc}
 80189a6:	bf00      	nop
 80189a8:	08020110 	.word	0x08020110
 80189ac:	080208cc 	.word	0x080208cc
 80189b0:	08020164 	.word	0x08020164

080189b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80189b4:	b590      	push	{r4, r7, lr}
 80189b6:	b087      	sub	sp, #28
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80189bc:	2300      	movs	r3, #0
 80189be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d106      	bne.n	80189d4 <tcp_keepalive+0x20>
 80189c6:	4b18      	ldr	r3, [pc, #96]	; (8018a28 <tcp_keepalive+0x74>)
 80189c8:	f640 0224 	movw	r2, #2084	; 0x824
 80189cc:	4917      	ldr	r1, [pc, #92]	; (8018a2c <tcp_keepalive+0x78>)
 80189ce:	4818      	ldr	r0, [pc, #96]	; (8018a30 <tcp_keepalive+0x7c>)
 80189d0:	f003 fba8 	bl	801c124 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80189d4:	7dfb      	ldrb	r3, [r7, #23]
 80189d6:	b29c      	uxth	r4, r3
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189dc:	3b01      	subs	r3, #1
 80189de:	4618      	mov	r0, r3
 80189e0:	f7f8 fa43 	bl	8010e6a <lwip_htonl>
 80189e4:	4603      	mov	r3, r0
 80189e6:	2200      	movs	r2, #0
 80189e8:	4621      	mov	r1, r4
 80189ea:	6878      	ldr	r0, [r7, #4]
 80189ec:	f7ff fe66 	bl	80186bc <tcp_output_alloc_header>
 80189f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d102      	bne.n	80189fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80189f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189fc:	e010      	b.n	8018a20 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80189fe:	7dfb      	ldrb	r3, [r7, #23]
 8018a00:	2200      	movs	r2, #0
 8018a02:	6939      	ldr	r1, [r7, #16]
 8018a04:	6878      	ldr	r0, [r7, #4]
 8018a06:	f7ff fe97 	bl	8018738 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018a0a:	687a      	ldr	r2, [r7, #4]
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	3304      	adds	r3, #4
 8018a10:	6939      	ldr	r1, [r7, #16]
 8018a12:	6878      	ldr	r0, [r7, #4]
 8018a14:	f7ff fed0 	bl	80187b8 <tcp_output_control_segment>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	371c      	adds	r7, #28
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd90      	pop	{r4, r7, pc}
 8018a28:	08020110 	.word	0x08020110
 8018a2c:	080208ec 	.word	0x080208ec
 8018a30:	08020164 	.word	0x08020164

08018a34 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018a34:	b590      	push	{r4, r7, lr}
 8018a36:	b08b      	sub	sp, #44	; 0x2c
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d106      	bne.n	8018a56 <tcp_zero_window_probe+0x22>
 8018a48:	4b4c      	ldr	r3, [pc, #304]	; (8018b7c <tcp_zero_window_probe+0x148>)
 8018a4a:	f640 024f 	movw	r2, #2127	; 0x84f
 8018a4e:	494c      	ldr	r1, [pc, #304]	; (8018b80 <tcp_zero_window_probe+0x14c>)
 8018a50:	484c      	ldr	r0, [pc, #304]	; (8018b84 <tcp_zero_window_probe+0x150>)
 8018a52:	f003 fb67 	bl	801c124 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a5a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018a5c:	6a3b      	ldr	r3, [r7, #32]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d101      	bne.n	8018a66 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018a62:	2300      	movs	r3, #0
 8018a64:	e086      	b.n	8018b74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018a6c:	2bff      	cmp	r3, #255	; 0xff
 8018a6e:	d007      	beq.n	8018a80 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018a76:	3301      	adds	r3, #1
 8018a78:	b2da      	uxtb	r2, r3
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	68db      	ldr	r3, [r3, #12]
 8018a84:	899b      	ldrh	r3, [r3, #12]
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f7f8 f9d9 	bl	8010e40 <lwip_htons>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	f003 0301 	and.w	r3, r3, #1
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d005      	beq.n	8018aa6 <tcp_zero_window_probe+0x72>
 8018a9a:	6a3b      	ldr	r3, [r7, #32]
 8018a9c:	891b      	ldrh	r3, [r3, #8]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d101      	bne.n	8018aa6 <tcp_zero_window_probe+0x72>
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	e000      	b.n	8018aa8 <tcp_zero_window_probe+0x74>
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018aaa:	7ffb      	ldrb	r3, [r7, #31]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	bf0c      	ite	eq
 8018ab0:	2301      	moveq	r3, #1
 8018ab2:	2300      	movne	r3, #0
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018abc:	b299      	uxth	r1, r3
 8018abe:	6a3b      	ldr	r3, [r7, #32]
 8018ac0:	68db      	ldr	r3, [r3, #12]
 8018ac2:	685b      	ldr	r3, [r3, #4]
 8018ac4:	8bba      	ldrh	r2, [r7, #28]
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f7ff fdf8 	bl	80186bc <tcp_output_alloc_header>
 8018acc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018ace:	69bb      	ldr	r3, [r7, #24]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d102      	bne.n	8018ada <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ad8:	e04c      	b.n	8018b74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018ada:	69bb      	ldr	r3, [r7, #24]
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018ae0:	7ffb      	ldrb	r3, [r7, #31]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d011      	beq.n	8018b0a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018ae6:	697b      	ldr	r3, [r7, #20]
 8018ae8:	899b      	ldrh	r3, [r3, #12]
 8018aea:	b29b      	uxth	r3, r3
 8018aec:	b21b      	sxth	r3, r3
 8018aee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018af2:	b21c      	sxth	r4, r3
 8018af4:	2011      	movs	r0, #17
 8018af6:	f7f8 f9a3 	bl	8010e40 <lwip_htons>
 8018afa:	4603      	mov	r3, r0
 8018afc:	b21b      	sxth	r3, r3
 8018afe:	4323      	orrs	r3, r4
 8018b00:	b21b      	sxth	r3, r3
 8018b02:	b29a      	uxth	r2, r3
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	819a      	strh	r2, [r3, #12]
 8018b08:	e010      	b.n	8018b2c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	3314      	adds	r3, #20
 8018b10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018b12:	6a3b      	ldr	r3, [r7, #32]
 8018b14:	6858      	ldr	r0, [r3, #4]
 8018b16:	6a3b      	ldr	r3, [r7, #32]
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	891a      	ldrh	r2, [r3, #8]
 8018b1c:	6a3b      	ldr	r3, [r7, #32]
 8018b1e:	891b      	ldrh	r3, [r3, #8]
 8018b20:	1ad3      	subs	r3, r2, r3
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	2201      	movs	r2, #1
 8018b26:	6939      	ldr	r1, [r7, #16]
 8018b28:	f7f9 ff2c 	bl	8012984 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018b2c:	6a3b      	ldr	r3, [r7, #32]
 8018b2e:	68db      	ldr	r3, [r3, #12]
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7f8 f999 	bl	8010e6a <lwip_htonl>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	1ad3      	subs	r3, r2, r3
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	da02      	bge.n	8018b50 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b54:	2200      	movs	r2, #0
 8018b56:	69b9      	ldr	r1, [r7, #24]
 8018b58:	6878      	ldr	r0, [r7, #4]
 8018b5a:	f7ff fded 	bl	8018738 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	3304      	adds	r3, #4
 8018b64:	69b9      	ldr	r1, [r7, #24]
 8018b66:	6878      	ldr	r0, [r7, #4]
 8018b68:	f7ff fe26 	bl	80187b8 <tcp_output_control_segment>
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018b70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	372c      	adds	r7, #44	; 0x2c
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd90      	pop	{r4, r7, pc}
 8018b7c:	08020110 	.word	0x08020110
 8018b80:	08020908 	.word	0x08020908
 8018b84:	08020164 	.word	0x08020164

08018b88 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018b90:	f7f9 ffe6 	bl	8012b60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018b94:	4b0a      	ldr	r3, [pc, #40]	; (8018bc0 <tcpip_tcp_timer+0x38>)
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d103      	bne.n	8018ba4 <tcpip_tcp_timer+0x1c>
 8018b9c:	4b09      	ldr	r3, [pc, #36]	; (8018bc4 <tcpip_tcp_timer+0x3c>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d005      	beq.n	8018bb0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	4908      	ldr	r1, [pc, #32]	; (8018bc8 <tcpip_tcp_timer+0x40>)
 8018ba8:	20fa      	movs	r0, #250	; 0xfa
 8018baa:	f000 f8f3 	bl	8018d94 <sys_timeout>
 8018bae:	e003      	b.n	8018bb8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018bb0:	4b06      	ldr	r3, [pc, #24]	; (8018bcc <tcpip_tcp_timer+0x44>)
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	601a      	str	r2, [r3, #0]
  }
}
 8018bb6:	bf00      	nop
 8018bb8:	bf00      	nop
 8018bba:	3708      	adds	r7, #8
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	20014f64 	.word	0x20014f64
 8018bc4:	20014f74 	.word	0x20014f74
 8018bc8:	08018b89 	.word	0x08018b89
 8018bcc:	20009904 	.word	0x20009904

08018bd0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018bd4:	4b0a      	ldr	r3, [pc, #40]	; (8018c00 <tcp_timer_needed+0x30>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d10f      	bne.n	8018bfc <tcp_timer_needed+0x2c>
 8018bdc:	4b09      	ldr	r3, [pc, #36]	; (8018c04 <tcp_timer_needed+0x34>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d103      	bne.n	8018bec <tcp_timer_needed+0x1c>
 8018be4:	4b08      	ldr	r3, [pc, #32]	; (8018c08 <tcp_timer_needed+0x38>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d007      	beq.n	8018bfc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018bec:	4b04      	ldr	r3, [pc, #16]	; (8018c00 <tcp_timer_needed+0x30>)
 8018bee:	2201      	movs	r2, #1
 8018bf0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	4905      	ldr	r1, [pc, #20]	; (8018c0c <tcp_timer_needed+0x3c>)
 8018bf6:	20fa      	movs	r0, #250	; 0xfa
 8018bf8:	f000 f8cc 	bl	8018d94 <sys_timeout>
  }
}
 8018bfc:	bf00      	nop
 8018bfe:	bd80      	pop	{r7, pc}
 8018c00:	20009904 	.word	0x20009904
 8018c04:	20014f64 	.word	0x20014f64
 8018c08:	20014f74 	.word	0x20014f74
 8018c0c:	08018b89 	.word	0x08018b89

08018c10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b086      	sub	sp, #24
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	60f8      	str	r0, [r7, #12]
 8018c18:	60b9      	str	r1, [r7, #8]
 8018c1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018c1c:	200a      	movs	r0, #10
 8018c1e:	f7f8 fdc5 	bl	80117ac <memp_malloc>
 8018c22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018c24:	693b      	ldr	r3, [r7, #16]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d109      	bne.n	8018c3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018c2a:	693b      	ldr	r3, [r7, #16]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d151      	bne.n	8018cd4 <sys_timeout_abs+0xc4>
 8018c30:	4b2a      	ldr	r3, [pc, #168]	; (8018cdc <sys_timeout_abs+0xcc>)
 8018c32:	22be      	movs	r2, #190	; 0xbe
 8018c34:	492a      	ldr	r1, [pc, #168]	; (8018ce0 <sys_timeout_abs+0xd0>)
 8018c36:	482b      	ldr	r0, [pc, #172]	; (8018ce4 <sys_timeout_abs+0xd4>)
 8018c38:	f003 fa74 	bl	801c124 <iprintf>
    return;
 8018c3c:	e04a      	b.n	8018cd4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018c3e:	693b      	ldr	r3, [r7, #16]
 8018c40:	2200      	movs	r2, #0
 8018c42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018c44:	693b      	ldr	r3, [r7, #16]
 8018c46:	68ba      	ldr	r2, [r7, #8]
 8018c48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	687a      	ldr	r2, [r7, #4]
 8018c4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018c50:	693b      	ldr	r3, [r7, #16]
 8018c52:	68fa      	ldr	r2, [r7, #12]
 8018c54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018c56:	4b24      	ldr	r3, [pc, #144]	; (8018ce8 <sys_timeout_abs+0xd8>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d103      	bne.n	8018c66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018c5e:	4a22      	ldr	r2, [pc, #136]	; (8018ce8 <sys_timeout_abs+0xd8>)
 8018c60:	693b      	ldr	r3, [r7, #16]
 8018c62:	6013      	str	r3, [r2, #0]
    return;
 8018c64:	e037      	b.n	8018cd6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018c66:	693b      	ldr	r3, [r7, #16]
 8018c68:	685a      	ldr	r2, [r3, #4]
 8018c6a:	4b1f      	ldr	r3, [pc, #124]	; (8018ce8 <sys_timeout_abs+0xd8>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	685b      	ldr	r3, [r3, #4]
 8018c70:	1ad3      	subs	r3, r2, r3
 8018c72:	0fdb      	lsrs	r3, r3, #31
 8018c74:	f003 0301 	and.w	r3, r3, #1
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d007      	beq.n	8018c8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018c7e:	4b1a      	ldr	r3, [pc, #104]	; (8018ce8 <sys_timeout_abs+0xd8>)
 8018c80:	681a      	ldr	r2, [r3, #0]
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018c86:	4a18      	ldr	r2, [pc, #96]	; (8018ce8 <sys_timeout_abs+0xd8>)
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	6013      	str	r3, [r2, #0]
 8018c8c:	e023      	b.n	8018cd6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018c8e:	4b16      	ldr	r3, [pc, #88]	; (8018ce8 <sys_timeout_abs+0xd8>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	617b      	str	r3, [r7, #20]
 8018c94:	e01a      	b.n	8018ccc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018c96:	697b      	ldr	r3, [r7, #20]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d00b      	beq.n	8018cb6 <sys_timeout_abs+0xa6>
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	685a      	ldr	r2, [r3, #4]
 8018ca2:	697b      	ldr	r3, [r7, #20]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	685b      	ldr	r3, [r3, #4]
 8018ca8:	1ad3      	subs	r3, r2, r3
 8018caa:	0fdb      	lsrs	r3, r3, #31
 8018cac:	f003 0301 	and.w	r3, r3, #1
 8018cb0:	b2db      	uxtb	r3, r3
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d007      	beq.n	8018cc6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	681a      	ldr	r2, [r3, #0]
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018cbe:	697b      	ldr	r3, [r7, #20]
 8018cc0:	693a      	ldr	r2, [r7, #16]
 8018cc2:	601a      	str	r2, [r3, #0]
        break;
 8018cc4:	e007      	b.n	8018cd6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018cc6:	697b      	ldr	r3, [r7, #20]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	617b      	str	r3, [r7, #20]
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d1e1      	bne.n	8018c96 <sys_timeout_abs+0x86>
 8018cd2:	e000      	b.n	8018cd6 <sys_timeout_abs+0xc6>
    return;
 8018cd4:	bf00      	nop
      }
    }
  }
}
 8018cd6:	3718      	adds	r7, #24
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd80      	pop	{r7, pc}
 8018cdc:	0802092c 	.word	0x0802092c
 8018ce0:	08020960 	.word	0x08020960
 8018ce4:	080209a0 	.word	0x080209a0
 8018ce8:	200098fc 	.word	0x200098fc

08018cec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b086      	sub	sp, #24
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	685b      	ldr	r3, [r3, #4]
 8018cfc:	4798      	blx	r3

  now = sys_now();
 8018cfe:	f7ef fa27 	bl	8008150 <sys_now>
 8018d02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018d04:	697b      	ldr	r3, [r7, #20]
 8018d06:	681a      	ldr	r2, [r3, #0]
 8018d08:	4b0f      	ldr	r3, [pc, #60]	; (8018d48 <lwip_cyclic_timer+0x5c>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	4413      	add	r3, r2
 8018d0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018d10:	68fa      	ldr	r2, [r7, #12]
 8018d12:	693b      	ldr	r3, [r7, #16]
 8018d14:	1ad3      	subs	r3, r2, r3
 8018d16:	0fdb      	lsrs	r3, r3, #31
 8018d18:	f003 0301 	and.w	r3, r3, #1
 8018d1c:	b2db      	uxtb	r3, r3
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d009      	beq.n	8018d36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018d22:	697b      	ldr	r3, [r7, #20]
 8018d24:	681a      	ldr	r2, [r3, #0]
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	4413      	add	r3, r2
 8018d2a:	687a      	ldr	r2, [r7, #4]
 8018d2c:	4907      	ldr	r1, [pc, #28]	; (8018d4c <lwip_cyclic_timer+0x60>)
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7ff ff6e 	bl	8018c10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018d34:	e004      	b.n	8018d40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	4904      	ldr	r1, [pc, #16]	; (8018d4c <lwip_cyclic_timer+0x60>)
 8018d3a:	68f8      	ldr	r0, [r7, #12]
 8018d3c:	f7ff ff68 	bl	8018c10 <sys_timeout_abs>
}
 8018d40:	bf00      	nop
 8018d42:	3718      	adds	r7, #24
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bd80      	pop	{r7, pc}
 8018d48:	20009900 	.word	0x20009900
 8018d4c:	08018ced 	.word	0x08018ced

08018d50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018d56:	2301      	movs	r3, #1
 8018d58:	607b      	str	r3, [r7, #4]
 8018d5a:	e00e      	b.n	8018d7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018d5c:	4a0b      	ldr	r2, [pc, #44]	; (8018d8c <sys_timeouts_init+0x3c>)
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	00db      	lsls	r3, r3, #3
 8018d68:	4a08      	ldr	r2, [pc, #32]	; (8018d8c <sys_timeouts_init+0x3c>)
 8018d6a:	4413      	add	r3, r2
 8018d6c:	461a      	mov	r2, r3
 8018d6e:	4908      	ldr	r1, [pc, #32]	; (8018d90 <sys_timeouts_init+0x40>)
 8018d70:	f000 f810 	bl	8018d94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	3301      	adds	r3, #1
 8018d78:	607b      	str	r3, [r7, #4]
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2b02      	cmp	r3, #2
 8018d7e:	d9ed      	bls.n	8018d5c <sys_timeouts_init+0xc>
  }
}
 8018d80:	bf00      	nop
 8018d82:	bf00      	nop
 8018d84:	3708      	adds	r7, #8
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}
 8018d8a:	bf00      	nop
 8018d8c:	08024520 	.word	0x08024520
 8018d90:	08018ced 	.word	0x08018ced

08018d94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b086      	sub	sp, #24
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	60b9      	str	r1, [r7, #8]
 8018d9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018da6:	d306      	bcc.n	8018db6 <sys_timeout+0x22>
 8018da8:	4b0a      	ldr	r3, [pc, #40]	; (8018dd4 <sys_timeout+0x40>)
 8018daa:	f240 1229 	movw	r2, #297	; 0x129
 8018dae:	490a      	ldr	r1, [pc, #40]	; (8018dd8 <sys_timeout+0x44>)
 8018db0:	480a      	ldr	r0, [pc, #40]	; (8018ddc <sys_timeout+0x48>)
 8018db2:	f003 f9b7 	bl	801c124 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018db6:	f7ef f9cb 	bl	8008150 <sys_now>
 8018dba:	4602      	mov	r2, r0
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	4413      	add	r3, r2
 8018dc0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018dc2:	687a      	ldr	r2, [r7, #4]
 8018dc4:	68b9      	ldr	r1, [r7, #8]
 8018dc6:	6978      	ldr	r0, [r7, #20]
 8018dc8:	f7ff ff22 	bl	8018c10 <sys_timeout_abs>
#endif
}
 8018dcc:	bf00      	nop
 8018dce:	3718      	adds	r7, #24
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	bd80      	pop	{r7, pc}
 8018dd4:	0802092c 	.word	0x0802092c
 8018dd8:	080209c8 	.word	0x080209c8
 8018ddc:	080209a0 	.word	0x080209a0

08018de0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b084      	sub	sp, #16
 8018de4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018de6:	f7ef f9b3 	bl	8008150 <sys_now>
 8018dea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018dec:	4b17      	ldr	r3, [pc, #92]	; (8018e4c <sys_check_timeouts+0x6c>)
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d022      	beq.n	8018e3e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018df8:	68bb      	ldr	r3, [r7, #8]
 8018dfa:	685b      	ldr	r3, [r3, #4]
 8018dfc:	68fa      	ldr	r2, [r7, #12]
 8018dfe:	1ad3      	subs	r3, r2, r3
 8018e00:	0fdb      	lsrs	r3, r3, #31
 8018e02:	f003 0301 	and.w	r3, r3, #1
 8018e06:	b2db      	uxtb	r3, r3
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d11a      	bne.n	8018e42 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018e0c:	68bb      	ldr	r3, [r7, #8]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4a0e      	ldr	r2, [pc, #56]	; (8018e4c <sys_check_timeouts+0x6c>)
 8018e12:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	689b      	ldr	r3, [r3, #8]
 8018e18:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018e1a:	68bb      	ldr	r3, [r7, #8]
 8018e1c:	68db      	ldr	r3, [r3, #12]
 8018e1e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018e20:	68bb      	ldr	r3, [r7, #8]
 8018e22:	685b      	ldr	r3, [r3, #4]
 8018e24:	4a0a      	ldr	r2, [pc, #40]	; (8018e50 <sys_check_timeouts+0x70>)
 8018e26:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018e28:	68b9      	ldr	r1, [r7, #8]
 8018e2a:	200a      	movs	r0, #10
 8018e2c:	f7f8 fd10 	bl	8011850 <memp_free>
    if (handler != NULL) {
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d0da      	beq.n	8018dec <sys_check_timeouts+0xc>
      handler(arg);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	6838      	ldr	r0, [r7, #0]
 8018e3a:	4798      	blx	r3
  do {
 8018e3c:	e7d6      	b.n	8018dec <sys_check_timeouts+0xc>
      return;
 8018e3e:	bf00      	nop
 8018e40:	e000      	b.n	8018e44 <sys_check_timeouts+0x64>
      return;
 8018e42:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018e44:	3710      	adds	r7, #16
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	200098fc 	.word	0x200098fc
 8018e50:	20009900 	.word	0x20009900

08018e54 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018e5a:	4b16      	ldr	r3, [pc, #88]	; (8018eb4 <sys_timeouts_sleeptime+0x60>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d102      	bne.n	8018e68 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e66:	e020      	b.n	8018eaa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018e68:	f7ef f972 	bl	8008150 <sys_now>
 8018e6c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018e6e:	4b11      	ldr	r3, [pc, #68]	; (8018eb4 <sys_timeouts_sleeptime+0x60>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	685a      	ldr	r2, [r3, #4]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	1ad3      	subs	r3, r2, r3
 8018e78:	0fdb      	lsrs	r3, r3, #31
 8018e7a:	f003 0301 	and.w	r3, r3, #1
 8018e7e:	b2db      	uxtb	r3, r3
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d001      	beq.n	8018e88 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018e84:	2300      	movs	r3, #0
 8018e86:	e010      	b.n	8018eaa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018e88:	4b0a      	ldr	r3, [pc, #40]	; (8018eb4 <sys_timeouts_sleeptime+0x60>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	685a      	ldr	r2, [r3, #4]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	1ad3      	subs	r3, r2, r3
 8018e92:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018e94:	683b      	ldr	r3, [r7, #0]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	da06      	bge.n	8018ea8 <sys_timeouts_sleeptime+0x54>
 8018e9a:	4b07      	ldr	r3, [pc, #28]	; (8018eb8 <sys_timeouts_sleeptime+0x64>)
 8018e9c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018ea0:	4906      	ldr	r1, [pc, #24]	; (8018ebc <sys_timeouts_sleeptime+0x68>)
 8018ea2:	4807      	ldr	r0, [pc, #28]	; (8018ec0 <sys_timeouts_sleeptime+0x6c>)
 8018ea4:	f003 f93e 	bl	801c124 <iprintf>
    return ret;
 8018ea8:	683b      	ldr	r3, [r7, #0]
  }
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3708      	adds	r7, #8
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	200098fc 	.word	0x200098fc
 8018eb8:	0802092c 	.word	0x0802092c
 8018ebc:	08020a00 	.word	0x08020a00
 8018ec0:	080209a0 	.word	0x080209a0

08018ec4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018ec8:	f003 f9ba 	bl	801c240 <rand>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018eda:	b29a      	uxth	r2, r3
 8018edc:	4b01      	ldr	r3, [pc, #4]	; (8018ee4 <udp_init+0x20>)
 8018ede:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018ee0:	bf00      	nop
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	200004a4 	.word	0x200004a4

08018ee8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b083      	sub	sp, #12
 8018eec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018ef2:	4b17      	ldr	r3, [pc, #92]	; (8018f50 <udp_new_port+0x68>)
 8018ef4:	881b      	ldrh	r3, [r3, #0]
 8018ef6:	1c5a      	adds	r2, r3, #1
 8018ef8:	b291      	uxth	r1, r2
 8018efa:	4a15      	ldr	r2, [pc, #84]	; (8018f50 <udp_new_port+0x68>)
 8018efc:	8011      	strh	r1, [r2, #0]
 8018efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f02:	4293      	cmp	r3, r2
 8018f04:	d103      	bne.n	8018f0e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8018f06:	4b12      	ldr	r3, [pc, #72]	; (8018f50 <udp_new_port+0x68>)
 8018f08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018f0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f0e:	4b11      	ldr	r3, [pc, #68]	; (8018f54 <udp_new_port+0x6c>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	603b      	str	r3, [r7, #0]
 8018f14:	e011      	b.n	8018f3a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	8a5a      	ldrh	r2, [r3, #18]
 8018f1a:	4b0d      	ldr	r3, [pc, #52]	; (8018f50 <udp_new_port+0x68>)
 8018f1c:	881b      	ldrh	r3, [r3, #0]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d108      	bne.n	8018f34 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018f22:	88fb      	ldrh	r3, [r7, #6]
 8018f24:	3301      	adds	r3, #1
 8018f26:	80fb      	strh	r3, [r7, #6]
 8018f28:	88fb      	ldrh	r3, [r7, #6]
 8018f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018f2e:	d3e0      	bcc.n	8018ef2 <udp_new_port+0xa>
        return 0;
 8018f30:	2300      	movs	r3, #0
 8018f32:	e007      	b.n	8018f44 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	603b      	str	r3, [r7, #0]
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d1ea      	bne.n	8018f16 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8018f40:	4b03      	ldr	r3, [pc, #12]	; (8018f50 <udp_new_port+0x68>)
 8018f42:	881b      	ldrh	r3, [r3, #0]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	370c      	adds	r7, #12
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4e:	4770      	bx	lr
 8018f50:	200004a4 	.word	0x200004a4
 8018f54:	20014f7c 	.word	0x20014f7c

08018f58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b084      	sub	sp, #16
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	60f8      	str	r0, [r7, #12]
 8018f60:	60b9      	str	r1, [r7, #8]
 8018f62:	4613      	mov	r3, r2
 8018f64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d105      	bne.n	8018f78 <udp_input_local_match+0x20>
 8018f6c:	4b27      	ldr	r3, [pc, #156]	; (801900c <udp_input_local_match+0xb4>)
 8018f6e:	2287      	movs	r2, #135	; 0x87
 8018f70:	4927      	ldr	r1, [pc, #156]	; (8019010 <udp_input_local_match+0xb8>)
 8018f72:	4828      	ldr	r0, [pc, #160]	; (8019014 <udp_input_local_match+0xbc>)
 8018f74:	f003 f8d6 	bl	801c124 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d105      	bne.n	8018f8a <udp_input_local_match+0x32>
 8018f7e:	4b23      	ldr	r3, [pc, #140]	; (801900c <udp_input_local_match+0xb4>)
 8018f80:	2288      	movs	r2, #136	; 0x88
 8018f82:	4925      	ldr	r1, [pc, #148]	; (8019018 <udp_input_local_match+0xc0>)
 8018f84:	4823      	ldr	r0, [pc, #140]	; (8019014 <udp_input_local_match+0xbc>)
 8018f86:	f003 f8cd 	bl	801c124 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	7a1b      	ldrb	r3, [r3, #8]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d00b      	beq.n	8018faa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	7a1a      	ldrb	r2, [r3, #8]
 8018f96:	4b21      	ldr	r3, [pc, #132]	; (801901c <udp_input_local_match+0xc4>)
 8018f98:	685b      	ldr	r3, [r3, #4]
 8018f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018f9e:	3301      	adds	r3, #1
 8018fa0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018fa2:	429a      	cmp	r2, r3
 8018fa4:	d001      	beq.n	8018faa <udp_input_local_match+0x52>
    return 0;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	e02b      	b.n	8019002 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018faa:	79fb      	ldrb	r3, [r7, #7]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d018      	beq.n	8018fe2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d013      	beq.n	8018fde <udp_input_local_match+0x86>
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d00f      	beq.n	8018fde <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018fbe:	4b17      	ldr	r3, [pc, #92]	; (801901c <udp_input_local_match+0xc4>)
 8018fc0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fc6:	d00a      	beq.n	8018fde <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	681a      	ldr	r2, [r3, #0]
 8018fcc:	4b13      	ldr	r3, [pc, #76]	; (801901c <udp_input_local_match+0xc4>)
 8018fce:	695b      	ldr	r3, [r3, #20]
 8018fd0:	405a      	eors	r2, r3
 8018fd2:	68bb      	ldr	r3, [r7, #8]
 8018fd4:	3308      	adds	r3, #8
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d110      	bne.n	8019000 <udp_input_local_match+0xa8>
          return 1;
 8018fde:	2301      	movs	r3, #1
 8018fe0:	e00f      	b.n	8019002 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d009      	beq.n	8018ffc <udp_input_local_match+0xa4>
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d005      	beq.n	8018ffc <udp_input_local_match+0xa4>
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	681a      	ldr	r2, [r3, #0]
 8018ff4:	4b09      	ldr	r3, [pc, #36]	; (801901c <udp_input_local_match+0xc4>)
 8018ff6:	695b      	ldr	r3, [r3, #20]
 8018ff8:	429a      	cmp	r2, r3
 8018ffa:	d101      	bne.n	8019000 <udp_input_local_match+0xa8>
        return 1;
 8018ffc:	2301      	movs	r3, #1
 8018ffe:	e000      	b.n	8019002 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019000:	2300      	movs	r3, #0
}
 8019002:	4618      	mov	r0, r3
 8019004:	3710      	adds	r7, #16
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}
 801900a:	bf00      	nop
 801900c:	08020a14 	.word	0x08020a14
 8019010:	08020a44 	.word	0x08020a44
 8019014:	08020a68 	.word	0x08020a68
 8019018:	08020a90 	.word	0x08020a90
 801901c:	2000fad0 	.word	0x2000fad0

08019020 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019020:	b590      	push	{r4, r7, lr}
 8019022:	b08d      	sub	sp, #52	; 0x34
 8019024:	af02      	add	r7, sp, #8
 8019026:	6078      	str	r0, [r7, #4]
 8019028:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801902a:	2300      	movs	r3, #0
 801902c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d105      	bne.n	8019040 <udp_input+0x20>
 8019034:	4b7c      	ldr	r3, [pc, #496]	; (8019228 <udp_input+0x208>)
 8019036:	22cf      	movs	r2, #207	; 0xcf
 8019038:	497c      	ldr	r1, [pc, #496]	; (801922c <udp_input+0x20c>)
 801903a:	487d      	ldr	r0, [pc, #500]	; (8019230 <udp_input+0x210>)
 801903c:	f003 f872 	bl	801c124 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d105      	bne.n	8019052 <udp_input+0x32>
 8019046:	4b78      	ldr	r3, [pc, #480]	; (8019228 <udp_input+0x208>)
 8019048:	22d0      	movs	r2, #208	; 0xd0
 801904a:	497a      	ldr	r1, [pc, #488]	; (8019234 <udp_input+0x214>)
 801904c:	4878      	ldr	r0, [pc, #480]	; (8019230 <udp_input+0x210>)
 801904e:	f003 f869 	bl	801c124 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	895b      	ldrh	r3, [r3, #10]
 8019056:	2b07      	cmp	r3, #7
 8019058:	d803      	bhi.n	8019062 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	f7f9 fa9c 	bl	8012598 <pbuf_free>
    goto end;
 8019060:	e0de      	b.n	8019220 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	685b      	ldr	r3, [r3, #4]
 8019066:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019068:	4b73      	ldr	r3, [pc, #460]	; (8019238 <udp_input+0x218>)
 801906a:	695b      	ldr	r3, [r3, #20]
 801906c:	4a72      	ldr	r2, [pc, #456]	; (8019238 <udp_input+0x218>)
 801906e:	6812      	ldr	r2, [r2, #0]
 8019070:	4611      	mov	r1, r2
 8019072:	4618      	mov	r0, r3
 8019074:	f001 fd96 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 8019078:	4603      	mov	r3, r0
 801907a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	b29b      	uxth	r3, r3
 8019082:	4618      	mov	r0, r3
 8019084:	f7f7 fedc 	bl	8010e40 <lwip_htons>
 8019088:	4603      	mov	r3, r0
 801908a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	885b      	ldrh	r3, [r3, #2]
 8019090:	b29b      	uxth	r3, r3
 8019092:	4618      	mov	r0, r3
 8019094:	f7f7 fed4 	bl	8010e40 <lwip_htons>
 8019098:	4603      	mov	r3, r0
 801909a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801909c:	2300      	movs	r3, #0
 801909e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80190a0:	2300      	movs	r3, #0
 80190a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80190a4:	2300      	movs	r3, #0
 80190a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80190a8:	4b64      	ldr	r3, [pc, #400]	; (801923c <udp_input+0x21c>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	627b      	str	r3, [r7, #36]	; 0x24
 80190ae:	e054      	b.n	801915a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80190b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b2:	8a5b      	ldrh	r3, [r3, #18]
 80190b4:	89fa      	ldrh	r2, [r7, #14]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d14a      	bne.n	8019150 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80190ba:	7cfb      	ldrb	r3, [r7, #19]
 80190bc:	461a      	mov	r2, r3
 80190be:	6839      	ldr	r1, [r7, #0]
 80190c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190c2:	f7ff ff49 	bl	8018f58 <udp_input_local_match>
 80190c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d041      	beq.n	8019150 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80190cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ce:	7c1b      	ldrb	r3, [r3, #16]
 80190d0:	f003 0304 	and.w	r3, r3, #4
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d11d      	bne.n	8019114 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80190d8:	69fb      	ldr	r3, [r7, #28]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d102      	bne.n	80190e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80190de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e0:	61fb      	str	r3, [r7, #28]
 80190e2:	e017      	b.n	8019114 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80190e4:	7cfb      	ldrb	r3, [r7, #19]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d014      	beq.n	8019114 <udp_input+0xf4>
 80190ea:	4b53      	ldr	r3, [pc, #332]	; (8019238 <udp_input+0x218>)
 80190ec:	695b      	ldr	r3, [r3, #20]
 80190ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80190f2:	d10f      	bne.n	8019114 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80190f4:	69fb      	ldr	r3, [r7, #28]
 80190f6:	681a      	ldr	r2, [r3, #0]
 80190f8:	683b      	ldr	r3, [r7, #0]
 80190fa:	3304      	adds	r3, #4
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	429a      	cmp	r2, r3
 8019100:	d008      	beq.n	8019114 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019104:	681a      	ldr	r2, [r3, #0]
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	3304      	adds	r3, #4
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	429a      	cmp	r2, r3
 801910e:	d101      	bne.n	8019114 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019112:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019116:	8a9b      	ldrh	r3, [r3, #20]
 8019118:	8a3a      	ldrh	r2, [r7, #16]
 801911a:	429a      	cmp	r2, r3
 801911c:	d118      	bne.n	8019150 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019120:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019122:	2b00      	cmp	r3, #0
 8019124:	d005      	beq.n	8019132 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019128:	685a      	ldr	r2, [r3, #4]
 801912a:	4b43      	ldr	r3, [pc, #268]	; (8019238 <udp_input+0x218>)
 801912c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801912e:	429a      	cmp	r2, r3
 8019130:	d10e      	bne.n	8019150 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019132:	6a3b      	ldr	r3, [r7, #32]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d014      	beq.n	8019162 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801913a:	68da      	ldr	r2, [r3, #12]
 801913c:	6a3b      	ldr	r3, [r7, #32]
 801913e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019140:	4b3e      	ldr	r3, [pc, #248]	; (801923c <udp_input+0x21c>)
 8019142:	681a      	ldr	r2, [r3, #0]
 8019144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019146:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019148:	4a3c      	ldr	r2, [pc, #240]	; (801923c <udp_input+0x21c>)
 801914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801914c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801914e:	e008      	b.n	8019162 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019152:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019156:	68db      	ldr	r3, [r3, #12]
 8019158:	627b      	str	r3, [r7, #36]	; 0x24
 801915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915c:	2b00      	cmp	r3, #0
 801915e:	d1a7      	bne.n	80190b0 <udp_input+0x90>
 8019160:	e000      	b.n	8019164 <udp_input+0x144>
        break;
 8019162:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019166:	2b00      	cmp	r3, #0
 8019168:	d101      	bne.n	801916e <udp_input+0x14e>
    pcb = uncon_pcb;
 801916a:	69fb      	ldr	r3, [r7, #28]
 801916c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <udp_input+0x15a>
    for_us = 1;
 8019174:	2301      	movs	r3, #1
 8019176:	76fb      	strb	r3, [r7, #27]
 8019178:	e00a      	b.n	8019190 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801917a:	683b      	ldr	r3, [r7, #0]
 801917c:	3304      	adds	r3, #4
 801917e:	681a      	ldr	r2, [r3, #0]
 8019180:	4b2d      	ldr	r3, [pc, #180]	; (8019238 <udp_input+0x218>)
 8019182:	695b      	ldr	r3, [r3, #20]
 8019184:	429a      	cmp	r2, r3
 8019186:	bf0c      	ite	eq
 8019188:	2301      	moveq	r3, #1
 801918a:	2300      	movne	r3, #0
 801918c:	b2db      	uxtb	r3, r3
 801918e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019190:	7efb      	ldrb	r3, [r7, #27]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d041      	beq.n	801921a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019196:	2108      	movs	r1, #8
 8019198:	6878      	ldr	r0, [r7, #4]
 801919a:	f7f9 f977 	bl	801248c <pbuf_remove_header>
 801919e:	4603      	mov	r3, r0
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d00a      	beq.n	80191ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80191a4:	4b20      	ldr	r3, [pc, #128]	; (8019228 <udp_input+0x208>)
 80191a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80191aa:	4925      	ldr	r1, [pc, #148]	; (8019240 <udp_input+0x220>)
 80191ac:	4820      	ldr	r0, [pc, #128]	; (8019230 <udp_input+0x210>)
 80191ae:	f002 ffb9 	bl	801c124 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f7f9 f9f0 	bl	8012598 <pbuf_free>
      goto end;
 80191b8:	e032      	b.n	8019220 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80191ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d012      	beq.n	80191e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80191c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191c2:	699b      	ldr	r3, [r3, #24]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d00a      	beq.n	80191de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80191c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ca:	699c      	ldr	r4, [r3, #24]
 80191cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ce:	69d8      	ldr	r0, [r3, #28]
 80191d0:	8a3b      	ldrh	r3, [r7, #16]
 80191d2:	9300      	str	r3, [sp, #0]
 80191d4:	4b1b      	ldr	r3, [pc, #108]	; (8019244 <udp_input+0x224>)
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80191dc:	e021      	b.n	8019222 <udp_input+0x202>
        pbuf_free(p);
 80191de:	6878      	ldr	r0, [r7, #4]
 80191e0:	f7f9 f9da 	bl	8012598 <pbuf_free>
        goto end;
 80191e4:	e01c      	b.n	8019220 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80191e6:	7cfb      	ldrb	r3, [r7, #19]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d112      	bne.n	8019212 <udp_input+0x1f2>
 80191ec:	4b12      	ldr	r3, [pc, #72]	; (8019238 <udp_input+0x218>)
 80191ee:	695b      	ldr	r3, [r3, #20]
 80191f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80191f4:	2be0      	cmp	r3, #224	; 0xe0
 80191f6:	d00c      	beq.n	8019212 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80191f8:	4b0f      	ldr	r3, [pc, #60]	; (8019238 <udp_input+0x218>)
 80191fa:	899b      	ldrh	r3, [r3, #12]
 80191fc:	3308      	adds	r3, #8
 80191fe:	b29b      	uxth	r3, r3
 8019200:	b21b      	sxth	r3, r3
 8019202:	4619      	mov	r1, r3
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	f7f9 f9b4 	bl	8012572 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801920a:	2103      	movs	r1, #3
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f001 f9a9 	bl	801a564 <icmp_dest_unreach>
      pbuf_free(p);
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f7f9 f9c0 	bl	8012598 <pbuf_free>
  return;
 8019218:	e003      	b.n	8019222 <udp_input+0x202>
    pbuf_free(p);
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f7f9 f9bc 	bl	8012598 <pbuf_free>
  return;
 8019220:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019222:	372c      	adds	r7, #44	; 0x2c
 8019224:	46bd      	mov	sp, r7
 8019226:	bd90      	pop	{r4, r7, pc}
 8019228:	08020a14 	.word	0x08020a14
 801922c:	08020ab8 	.word	0x08020ab8
 8019230:	08020a68 	.word	0x08020a68
 8019234:	08020ad0 	.word	0x08020ad0
 8019238:	2000fad0 	.word	0x2000fad0
 801923c:	20014f7c 	.word	0x20014f7c
 8019240:	08020aec 	.word	0x08020aec
 8019244:	2000fae0 	.word	0x2000fae0

08019248 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b086      	sub	sp, #24
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	4613      	mov	r3, r2
 8019254:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d101      	bne.n	8019260 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801925c:	4b39      	ldr	r3, [pc, #228]	; (8019344 <udp_bind+0xfc>)
 801925e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d109      	bne.n	801927a <udp_bind+0x32>
 8019266:	4b38      	ldr	r3, [pc, #224]	; (8019348 <udp_bind+0x100>)
 8019268:	f240 32b7 	movw	r2, #951	; 0x3b7
 801926c:	4937      	ldr	r1, [pc, #220]	; (801934c <udp_bind+0x104>)
 801926e:	4838      	ldr	r0, [pc, #224]	; (8019350 <udp_bind+0x108>)
 8019270:	f002 ff58 	bl	801c124 <iprintf>
 8019274:	f06f 030f 	mvn.w	r3, #15
 8019278:	e060      	b.n	801933c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801927a:	2300      	movs	r3, #0
 801927c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801927e:	4b35      	ldr	r3, [pc, #212]	; (8019354 <udp_bind+0x10c>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	617b      	str	r3, [r7, #20]
 8019284:	e009      	b.n	801929a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019286:	68fa      	ldr	r2, [r7, #12]
 8019288:	697b      	ldr	r3, [r7, #20]
 801928a:	429a      	cmp	r2, r3
 801928c:	d102      	bne.n	8019294 <udp_bind+0x4c>
      rebind = 1;
 801928e:	2301      	movs	r3, #1
 8019290:	74fb      	strb	r3, [r7, #19]
      break;
 8019292:	e005      	b.n	80192a0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	68db      	ldr	r3, [r3, #12]
 8019298:	617b      	str	r3, [r7, #20]
 801929a:	697b      	ldr	r3, [r7, #20]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d1f2      	bne.n	8019286 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80192a0:	88fb      	ldrh	r3, [r7, #6]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d109      	bne.n	80192ba <udp_bind+0x72>
    port = udp_new_port();
 80192a6:	f7ff fe1f 	bl	8018ee8 <udp_new_port>
 80192aa:	4603      	mov	r3, r0
 80192ac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80192ae:	88fb      	ldrh	r3, [r7, #6]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d12c      	bne.n	801930e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80192b4:	f06f 0307 	mvn.w	r3, #7
 80192b8:	e040      	b.n	801933c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80192ba:	4b26      	ldr	r3, [pc, #152]	; (8019354 <udp_bind+0x10c>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	617b      	str	r3, [r7, #20]
 80192c0:	e022      	b.n	8019308 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80192c2:	68fa      	ldr	r2, [r7, #12]
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	429a      	cmp	r2, r3
 80192c8:	d01b      	beq.n	8019302 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	8a5b      	ldrh	r3, [r3, #18]
 80192ce:	88fa      	ldrh	r2, [r7, #6]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d116      	bne.n	8019302 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80192d4:	697b      	ldr	r3, [r7, #20]
 80192d6:	681a      	ldr	r2, [r3, #0]
 80192d8:	68bb      	ldr	r3, [r7, #8]
 80192da:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80192dc:	429a      	cmp	r2, r3
 80192de:	d00d      	beq.n	80192fc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80192e0:	68bb      	ldr	r3, [r7, #8]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d00a      	beq.n	80192fc <udp_bind+0xb4>
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d006      	beq.n	80192fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80192ee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d003      	beq.n	80192fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d102      	bne.n	8019302 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80192fc:	f06f 0307 	mvn.w	r3, #7
 8019300:	e01c      	b.n	801933c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	68db      	ldr	r3, [r3, #12]
 8019306:	617b      	str	r3, [r7, #20]
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d1d9      	bne.n	80192c2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801930e:	68bb      	ldr	r3, [r7, #8]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d002      	beq.n	801931a <udp_bind+0xd2>
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	e000      	b.n	801931c <udp_bind+0xd4>
 801931a:	2300      	movs	r3, #0
 801931c:	68fa      	ldr	r2, [r7, #12]
 801931e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	88fa      	ldrh	r2, [r7, #6]
 8019324:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019326:	7cfb      	ldrb	r3, [r7, #19]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d106      	bne.n	801933a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801932c:	4b09      	ldr	r3, [pc, #36]	; (8019354 <udp_bind+0x10c>)
 801932e:	681a      	ldr	r2, [r3, #0]
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019334:	4a07      	ldr	r2, [pc, #28]	; (8019354 <udp_bind+0x10c>)
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801933a:	2300      	movs	r3, #0
}
 801933c:	4618      	mov	r0, r3
 801933e:	3718      	adds	r7, #24
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}
 8019344:	08024538 	.word	0x08024538
 8019348:	08020a14 	.word	0x08020a14
 801934c:	08020cdc 	.word	0x08020cdc
 8019350:	08020a68 	.word	0x08020a68
 8019354:	20014f7c 	.word	0x20014f7c

08019358 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b084      	sub	sp, #16
 801935c:	af00      	add	r7, sp, #0
 801935e:	60f8      	str	r0, [r7, #12]
 8019360:	60b9      	str	r1, [r7, #8]
 8019362:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d107      	bne.n	801937a <udp_recv+0x22>
 801936a:	4b08      	ldr	r3, [pc, #32]	; (801938c <udp_recv+0x34>)
 801936c:	f240 428a 	movw	r2, #1162	; 0x48a
 8019370:	4907      	ldr	r1, [pc, #28]	; (8019390 <udp_recv+0x38>)
 8019372:	4808      	ldr	r0, [pc, #32]	; (8019394 <udp_recv+0x3c>)
 8019374:	f002 fed6 	bl	801c124 <iprintf>
 8019378:	e005      	b.n	8019386 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	68ba      	ldr	r2, [r7, #8]
 801937e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	687a      	ldr	r2, [r7, #4]
 8019384:	61da      	str	r2, [r3, #28]
}
 8019386:	3710      	adds	r7, #16
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	08020a14 	.word	0x08020a14
 8019390:	08020d48 	.word	0x08020d48
 8019394:	08020a68 	.word	0x08020a68

08019398 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b084      	sub	sp, #16
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d107      	bne.n	80193b6 <udp_remove+0x1e>
 80193a6:	4b19      	ldr	r3, [pc, #100]	; (801940c <udp_remove+0x74>)
 80193a8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80193ac:	4918      	ldr	r1, [pc, #96]	; (8019410 <udp_remove+0x78>)
 80193ae:	4819      	ldr	r0, [pc, #100]	; (8019414 <udp_remove+0x7c>)
 80193b0:	f002 feb8 	bl	801c124 <iprintf>
 80193b4:	e026      	b.n	8019404 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80193b6:	4b18      	ldr	r3, [pc, #96]	; (8019418 <udp_remove+0x80>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	429a      	cmp	r2, r3
 80193be:	d105      	bne.n	80193cc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80193c0:	4b15      	ldr	r3, [pc, #84]	; (8019418 <udp_remove+0x80>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	68db      	ldr	r3, [r3, #12]
 80193c6:	4a14      	ldr	r2, [pc, #80]	; (8019418 <udp_remove+0x80>)
 80193c8:	6013      	str	r3, [r2, #0]
 80193ca:	e017      	b.n	80193fc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80193cc:	4b12      	ldr	r3, [pc, #72]	; (8019418 <udp_remove+0x80>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	60fb      	str	r3, [r7, #12]
 80193d2:	e010      	b.n	80193f6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	68db      	ldr	r3, [r3, #12]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d009      	beq.n	80193f0 <udp_remove+0x58>
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	68db      	ldr	r3, [r3, #12]
 80193e0:	687a      	ldr	r2, [r7, #4]
 80193e2:	429a      	cmp	r2, r3
 80193e4:	d104      	bne.n	80193f0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	68da      	ldr	r2, [r3, #12]
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	60da      	str	r2, [r3, #12]
        break;
 80193ee:	e005      	b.n	80193fc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	68db      	ldr	r3, [r3, #12]
 80193f4:	60fb      	str	r3, [r7, #12]
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d1eb      	bne.n	80193d4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80193fc:	6879      	ldr	r1, [r7, #4]
 80193fe:	2000      	movs	r0, #0
 8019400:	f7f8 fa26 	bl	8011850 <memp_free>
}
 8019404:	3710      	adds	r7, #16
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	08020a14 	.word	0x08020a14
 8019410:	08020d60 	.word	0x08020d60
 8019414:	08020a68 	.word	0x08020a68
 8019418:	20014f7c 	.word	0x20014f7c

0801941c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b082      	sub	sp, #8
 8019420:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019422:	2000      	movs	r0, #0
 8019424:	f7f8 f9c2 	bl	80117ac <memp_malloc>
 8019428:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d007      	beq.n	8019440 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019430:	2220      	movs	r2, #32
 8019432:	2100      	movs	r1, #0
 8019434:	6878      	ldr	r0, [r7, #4]
 8019436:	f002 fe12 	bl	801c05e <memset>
    pcb->ttl = UDP_TTL;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	22ff      	movs	r2, #255	; 0xff
 801943e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019440:	687b      	ldr	r3, [r7, #4]
}
 8019442:	4618      	mov	r0, r3
 8019444:	3708      	adds	r7, #8
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}

0801944a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801944a:	b580      	push	{r7, lr}
 801944c:	b084      	sub	sp, #16
 801944e:	af00      	add	r7, sp, #0
 8019450:	4603      	mov	r3, r0
 8019452:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019454:	f7ff ffe2 	bl	801941c <udp_new>
 8019458:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801945a:	68fb      	ldr	r3, [r7, #12]
}
 801945c:	4618      	mov	r0, r3
 801945e:	3710      	adds	r7, #16
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}

08019464 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019464:	b480      	push	{r7}
 8019466:	b085      	sub	sp, #20
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
 801946c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d01e      	beq.n	80194b2 <udp_netif_ip_addr_changed+0x4e>
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d01a      	beq.n	80194b2 <udp_netif_ip_addr_changed+0x4e>
 801947c:	683b      	ldr	r3, [r7, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d017      	beq.n	80194b2 <udp_netif_ip_addr_changed+0x4e>
 8019482:	683b      	ldr	r3, [r7, #0]
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d013      	beq.n	80194b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801948a:	4b0d      	ldr	r3, [pc, #52]	; (80194c0 <udp_netif_ip_addr_changed+0x5c>)
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	60fb      	str	r3, [r7, #12]
 8019490:	e00c      	b.n	80194ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	681a      	ldr	r2, [r3, #0]
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	429a      	cmp	r2, r3
 801949c:	d103      	bne.n	80194a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	681a      	ldr	r2, [r3, #0]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	68db      	ldr	r3, [r3, #12]
 80194aa:	60fb      	str	r3, [r7, #12]
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1ef      	bne.n	8019492 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80194b2:	bf00      	nop
 80194b4:	3714      	adds	r7, #20
 80194b6:	46bd      	mov	sp, r7
 80194b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194bc:	4770      	bx	lr
 80194be:	bf00      	nop
 80194c0:	20014f7c 	.word	0x20014f7c

080194c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b082      	sub	sp, #8
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80194cc:	4915      	ldr	r1, [pc, #84]	; (8019524 <etharp_free_entry+0x60>)
 80194ce:	687a      	ldr	r2, [r7, #4]
 80194d0:	4613      	mov	r3, r2
 80194d2:	005b      	lsls	r3, r3, #1
 80194d4:	4413      	add	r3, r2
 80194d6:	00db      	lsls	r3, r3, #3
 80194d8:	440b      	add	r3, r1
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d013      	beq.n	8019508 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80194e0:	4910      	ldr	r1, [pc, #64]	; (8019524 <etharp_free_entry+0x60>)
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	4613      	mov	r3, r2
 80194e6:	005b      	lsls	r3, r3, #1
 80194e8:	4413      	add	r3, r2
 80194ea:	00db      	lsls	r3, r3, #3
 80194ec:	440b      	add	r3, r1
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	4618      	mov	r0, r3
 80194f2:	f7f9 f851 	bl	8012598 <pbuf_free>
    arp_table[i].q = NULL;
 80194f6:	490b      	ldr	r1, [pc, #44]	; (8019524 <etharp_free_entry+0x60>)
 80194f8:	687a      	ldr	r2, [r7, #4]
 80194fa:	4613      	mov	r3, r2
 80194fc:	005b      	lsls	r3, r3, #1
 80194fe:	4413      	add	r3, r2
 8019500:	00db      	lsls	r3, r3, #3
 8019502:	440b      	add	r3, r1
 8019504:	2200      	movs	r2, #0
 8019506:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019508:	4906      	ldr	r1, [pc, #24]	; (8019524 <etharp_free_entry+0x60>)
 801950a:	687a      	ldr	r2, [r7, #4]
 801950c:	4613      	mov	r3, r2
 801950e:	005b      	lsls	r3, r3, #1
 8019510:	4413      	add	r3, r2
 8019512:	00db      	lsls	r3, r3, #3
 8019514:	440b      	add	r3, r1
 8019516:	3314      	adds	r3, #20
 8019518:	2200      	movs	r2, #0
 801951a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801951c:	bf00      	nop
 801951e:	3708      	adds	r7, #8
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	20009908 	.word	0x20009908

08019528 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b082      	sub	sp, #8
 801952c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801952e:	2300      	movs	r3, #0
 8019530:	607b      	str	r3, [r7, #4]
 8019532:	e096      	b.n	8019662 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019534:	494f      	ldr	r1, [pc, #316]	; (8019674 <etharp_tmr+0x14c>)
 8019536:	687a      	ldr	r2, [r7, #4]
 8019538:	4613      	mov	r3, r2
 801953a:	005b      	lsls	r3, r3, #1
 801953c:	4413      	add	r3, r2
 801953e:	00db      	lsls	r3, r3, #3
 8019540:	440b      	add	r3, r1
 8019542:	3314      	adds	r3, #20
 8019544:	781b      	ldrb	r3, [r3, #0]
 8019546:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019548:	78fb      	ldrb	r3, [r7, #3]
 801954a:	2b00      	cmp	r3, #0
 801954c:	f000 8086 	beq.w	801965c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019550:	4948      	ldr	r1, [pc, #288]	; (8019674 <etharp_tmr+0x14c>)
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	4613      	mov	r3, r2
 8019556:	005b      	lsls	r3, r3, #1
 8019558:	4413      	add	r3, r2
 801955a:	00db      	lsls	r3, r3, #3
 801955c:	440b      	add	r3, r1
 801955e:	3312      	adds	r3, #18
 8019560:	881b      	ldrh	r3, [r3, #0]
 8019562:	3301      	adds	r3, #1
 8019564:	b298      	uxth	r0, r3
 8019566:	4943      	ldr	r1, [pc, #268]	; (8019674 <etharp_tmr+0x14c>)
 8019568:	687a      	ldr	r2, [r7, #4]
 801956a:	4613      	mov	r3, r2
 801956c:	005b      	lsls	r3, r3, #1
 801956e:	4413      	add	r3, r2
 8019570:	00db      	lsls	r3, r3, #3
 8019572:	440b      	add	r3, r1
 8019574:	3312      	adds	r3, #18
 8019576:	4602      	mov	r2, r0
 8019578:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801957a:	493e      	ldr	r1, [pc, #248]	; (8019674 <etharp_tmr+0x14c>)
 801957c:	687a      	ldr	r2, [r7, #4]
 801957e:	4613      	mov	r3, r2
 8019580:	005b      	lsls	r3, r3, #1
 8019582:	4413      	add	r3, r2
 8019584:	00db      	lsls	r3, r3, #3
 8019586:	440b      	add	r3, r1
 8019588:	3312      	adds	r3, #18
 801958a:	881b      	ldrh	r3, [r3, #0]
 801958c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019590:	d215      	bcs.n	80195be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019592:	4938      	ldr	r1, [pc, #224]	; (8019674 <etharp_tmr+0x14c>)
 8019594:	687a      	ldr	r2, [r7, #4]
 8019596:	4613      	mov	r3, r2
 8019598:	005b      	lsls	r3, r3, #1
 801959a:	4413      	add	r3, r2
 801959c:	00db      	lsls	r3, r3, #3
 801959e:	440b      	add	r3, r1
 80195a0:	3314      	adds	r3, #20
 80195a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80195a4:	2b01      	cmp	r3, #1
 80195a6:	d10e      	bne.n	80195c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80195a8:	4932      	ldr	r1, [pc, #200]	; (8019674 <etharp_tmr+0x14c>)
 80195aa:	687a      	ldr	r2, [r7, #4]
 80195ac:	4613      	mov	r3, r2
 80195ae:	005b      	lsls	r3, r3, #1
 80195b0:	4413      	add	r3, r2
 80195b2:	00db      	lsls	r3, r3, #3
 80195b4:	440b      	add	r3, r1
 80195b6:	3312      	adds	r3, #18
 80195b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80195ba:	2b04      	cmp	r3, #4
 80195bc:	d903      	bls.n	80195c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80195be:	6878      	ldr	r0, [r7, #4]
 80195c0:	f7ff ff80 	bl	80194c4 <etharp_free_entry>
 80195c4:	e04a      	b.n	801965c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80195c6:	492b      	ldr	r1, [pc, #172]	; (8019674 <etharp_tmr+0x14c>)
 80195c8:	687a      	ldr	r2, [r7, #4]
 80195ca:	4613      	mov	r3, r2
 80195cc:	005b      	lsls	r3, r3, #1
 80195ce:	4413      	add	r3, r2
 80195d0:	00db      	lsls	r3, r3, #3
 80195d2:	440b      	add	r3, r1
 80195d4:	3314      	adds	r3, #20
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	2b03      	cmp	r3, #3
 80195da:	d10a      	bne.n	80195f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80195dc:	4925      	ldr	r1, [pc, #148]	; (8019674 <etharp_tmr+0x14c>)
 80195de:	687a      	ldr	r2, [r7, #4]
 80195e0:	4613      	mov	r3, r2
 80195e2:	005b      	lsls	r3, r3, #1
 80195e4:	4413      	add	r3, r2
 80195e6:	00db      	lsls	r3, r3, #3
 80195e8:	440b      	add	r3, r1
 80195ea:	3314      	adds	r3, #20
 80195ec:	2204      	movs	r2, #4
 80195ee:	701a      	strb	r2, [r3, #0]
 80195f0:	e034      	b.n	801965c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80195f2:	4920      	ldr	r1, [pc, #128]	; (8019674 <etharp_tmr+0x14c>)
 80195f4:	687a      	ldr	r2, [r7, #4]
 80195f6:	4613      	mov	r3, r2
 80195f8:	005b      	lsls	r3, r3, #1
 80195fa:	4413      	add	r3, r2
 80195fc:	00db      	lsls	r3, r3, #3
 80195fe:	440b      	add	r3, r1
 8019600:	3314      	adds	r3, #20
 8019602:	781b      	ldrb	r3, [r3, #0]
 8019604:	2b04      	cmp	r3, #4
 8019606:	d10a      	bne.n	801961e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019608:	491a      	ldr	r1, [pc, #104]	; (8019674 <etharp_tmr+0x14c>)
 801960a:	687a      	ldr	r2, [r7, #4]
 801960c:	4613      	mov	r3, r2
 801960e:	005b      	lsls	r3, r3, #1
 8019610:	4413      	add	r3, r2
 8019612:	00db      	lsls	r3, r3, #3
 8019614:	440b      	add	r3, r1
 8019616:	3314      	adds	r3, #20
 8019618:	2202      	movs	r2, #2
 801961a:	701a      	strb	r2, [r3, #0]
 801961c:	e01e      	b.n	801965c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801961e:	4915      	ldr	r1, [pc, #84]	; (8019674 <etharp_tmr+0x14c>)
 8019620:	687a      	ldr	r2, [r7, #4]
 8019622:	4613      	mov	r3, r2
 8019624:	005b      	lsls	r3, r3, #1
 8019626:	4413      	add	r3, r2
 8019628:	00db      	lsls	r3, r3, #3
 801962a:	440b      	add	r3, r1
 801962c:	3314      	adds	r3, #20
 801962e:	781b      	ldrb	r3, [r3, #0]
 8019630:	2b01      	cmp	r3, #1
 8019632:	d113      	bne.n	801965c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019634:	490f      	ldr	r1, [pc, #60]	; (8019674 <etharp_tmr+0x14c>)
 8019636:	687a      	ldr	r2, [r7, #4]
 8019638:	4613      	mov	r3, r2
 801963a:	005b      	lsls	r3, r3, #1
 801963c:	4413      	add	r3, r2
 801963e:	00db      	lsls	r3, r3, #3
 8019640:	440b      	add	r3, r1
 8019642:	3308      	adds	r3, #8
 8019644:	6818      	ldr	r0, [r3, #0]
 8019646:	687a      	ldr	r2, [r7, #4]
 8019648:	4613      	mov	r3, r2
 801964a:	005b      	lsls	r3, r3, #1
 801964c:	4413      	add	r3, r2
 801964e:	00db      	lsls	r3, r3, #3
 8019650:	4a08      	ldr	r2, [pc, #32]	; (8019674 <etharp_tmr+0x14c>)
 8019652:	4413      	add	r3, r2
 8019654:	3304      	adds	r3, #4
 8019656:	4619      	mov	r1, r3
 8019658:	f000 fe6e 	bl	801a338 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	3301      	adds	r3, #1
 8019660:	607b      	str	r3, [r7, #4]
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	2b09      	cmp	r3, #9
 8019666:	f77f af65 	ble.w	8019534 <etharp_tmr+0xc>
      }
    }
  }
}
 801966a:	bf00      	nop
 801966c:	bf00      	nop
 801966e:	3708      	adds	r7, #8
 8019670:	46bd      	mov	sp, r7
 8019672:	bd80      	pop	{r7, pc}
 8019674:	20009908 	.word	0x20009908

08019678 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b08a      	sub	sp, #40	; 0x28
 801967c:	af00      	add	r7, sp, #0
 801967e:	60f8      	str	r0, [r7, #12]
 8019680:	460b      	mov	r3, r1
 8019682:	607a      	str	r2, [r7, #4]
 8019684:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019686:	230a      	movs	r3, #10
 8019688:	84fb      	strh	r3, [r7, #38]	; 0x26
 801968a:	230a      	movs	r3, #10
 801968c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801968e:	230a      	movs	r3, #10
 8019690:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019692:	2300      	movs	r3, #0
 8019694:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019696:	230a      	movs	r3, #10
 8019698:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801969a:	2300      	movs	r3, #0
 801969c:	83bb      	strh	r3, [r7, #28]
 801969e:	2300      	movs	r3, #0
 80196a0:	837b      	strh	r3, [r7, #26]
 80196a2:	2300      	movs	r3, #0
 80196a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80196a6:	2300      	movs	r3, #0
 80196a8:	843b      	strh	r3, [r7, #32]
 80196aa:	e0ae      	b.n	801980a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80196ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80196b0:	49a6      	ldr	r1, [pc, #664]	; (801994c <etharp_find_entry+0x2d4>)
 80196b2:	4613      	mov	r3, r2
 80196b4:	005b      	lsls	r3, r3, #1
 80196b6:	4413      	add	r3, r2
 80196b8:	00db      	lsls	r3, r3, #3
 80196ba:	440b      	add	r3, r1
 80196bc:	3314      	adds	r3, #20
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80196c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80196c6:	2b0a      	cmp	r3, #10
 80196c8:	d105      	bne.n	80196d6 <etharp_find_entry+0x5e>
 80196ca:	7dfb      	ldrb	r3, [r7, #23]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d102      	bne.n	80196d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80196d0:	8c3b      	ldrh	r3, [r7, #32]
 80196d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80196d4:	e095      	b.n	8019802 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80196d6:	7dfb      	ldrb	r3, [r7, #23]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	f000 8092 	beq.w	8019802 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80196de:	7dfb      	ldrb	r3, [r7, #23]
 80196e0:	2b01      	cmp	r3, #1
 80196e2:	d009      	beq.n	80196f8 <etharp_find_entry+0x80>
 80196e4:	7dfb      	ldrb	r3, [r7, #23]
 80196e6:	2b01      	cmp	r3, #1
 80196e8:	d806      	bhi.n	80196f8 <etharp_find_entry+0x80>
 80196ea:	4b99      	ldr	r3, [pc, #612]	; (8019950 <etharp_find_entry+0x2d8>)
 80196ec:	f240 1223 	movw	r2, #291	; 0x123
 80196f0:	4998      	ldr	r1, [pc, #608]	; (8019954 <etharp_find_entry+0x2dc>)
 80196f2:	4899      	ldr	r0, [pc, #612]	; (8019958 <etharp_find_entry+0x2e0>)
 80196f4:	f002 fd16 	bl	801c124 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d020      	beq.n	8019740 <etharp_find_entry+0xc8>
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	6819      	ldr	r1, [r3, #0]
 8019702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019706:	4891      	ldr	r0, [pc, #580]	; (801994c <etharp_find_entry+0x2d4>)
 8019708:	4613      	mov	r3, r2
 801970a:	005b      	lsls	r3, r3, #1
 801970c:	4413      	add	r3, r2
 801970e:	00db      	lsls	r3, r3, #3
 8019710:	4403      	add	r3, r0
 8019712:	3304      	adds	r3, #4
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	4299      	cmp	r1, r3
 8019718:	d112      	bne.n	8019740 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d00c      	beq.n	801973a <etharp_find_entry+0xc2>
 8019720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019724:	4989      	ldr	r1, [pc, #548]	; (801994c <etharp_find_entry+0x2d4>)
 8019726:	4613      	mov	r3, r2
 8019728:	005b      	lsls	r3, r3, #1
 801972a:	4413      	add	r3, r2
 801972c:	00db      	lsls	r3, r3, #3
 801972e:	440b      	add	r3, r1
 8019730:	3308      	adds	r3, #8
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	687a      	ldr	r2, [r7, #4]
 8019736:	429a      	cmp	r2, r3
 8019738:	d102      	bne.n	8019740 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801973a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801973e:	e100      	b.n	8019942 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019740:	7dfb      	ldrb	r3, [r7, #23]
 8019742:	2b01      	cmp	r3, #1
 8019744:	d140      	bne.n	80197c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801974a:	4980      	ldr	r1, [pc, #512]	; (801994c <etharp_find_entry+0x2d4>)
 801974c:	4613      	mov	r3, r2
 801974e:	005b      	lsls	r3, r3, #1
 8019750:	4413      	add	r3, r2
 8019752:	00db      	lsls	r3, r3, #3
 8019754:	440b      	add	r3, r1
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d01a      	beq.n	8019792 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801975c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019760:	497a      	ldr	r1, [pc, #488]	; (801994c <etharp_find_entry+0x2d4>)
 8019762:	4613      	mov	r3, r2
 8019764:	005b      	lsls	r3, r3, #1
 8019766:	4413      	add	r3, r2
 8019768:	00db      	lsls	r3, r3, #3
 801976a:	440b      	add	r3, r1
 801976c:	3312      	adds	r3, #18
 801976e:	881b      	ldrh	r3, [r3, #0]
 8019770:	8bba      	ldrh	r2, [r7, #28]
 8019772:	429a      	cmp	r2, r3
 8019774:	d845      	bhi.n	8019802 <etharp_find_entry+0x18a>
            old_queue = i;
 8019776:	8c3b      	ldrh	r3, [r7, #32]
 8019778:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801977a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801977e:	4973      	ldr	r1, [pc, #460]	; (801994c <etharp_find_entry+0x2d4>)
 8019780:	4613      	mov	r3, r2
 8019782:	005b      	lsls	r3, r3, #1
 8019784:	4413      	add	r3, r2
 8019786:	00db      	lsls	r3, r3, #3
 8019788:	440b      	add	r3, r1
 801978a:	3312      	adds	r3, #18
 801978c:	881b      	ldrh	r3, [r3, #0]
 801978e:	83bb      	strh	r3, [r7, #28]
 8019790:	e037      	b.n	8019802 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019796:	496d      	ldr	r1, [pc, #436]	; (801994c <etharp_find_entry+0x2d4>)
 8019798:	4613      	mov	r3, r2
 801979a:	005b      	lsls	r3, r3, #1
 801979c:	4413      	add	r3, r2
 801979e:	00db      	lsls	r3, r3, #3
 80197a0:	440b      	add	r3, r1
 80197a2:	3312      	adds	r3, #18
 80197a4:	881b      	ldrh	r3, [r3, #0]
 80197a6:	8b7a      	ldrh	r2, [r7, #26]
 80197a8:	429a      	cmp	r2, r3
 80197aa:	d82a      	bhi.n	8019802 <etharp_find_entry+0x18a>
            old_pending = i;
 80197ac:	8c3b      	ldrh	r3, [r7, #32]
 80197ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80197b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80197b4:	4965      	ldr	r1, [pc, #404]	; (801994c <etharp_find_entry+0x2d4>)
 80197b6:	4613      	mov	r3, r2
 80197b8:	005b      	lsls	r3, r3, #1
 80197ba:	4413      	add	r3, r2
 80197bc:	00db      	lsls	r3, r3, #3
 80197be:	440b      	add	r3, r1
 80197c0:	3312      	adds	r3, #18
 80197c2:	881b      	ldrh	r3, [r3, #0]
 80197c4:	837b      	strh	r3, [r7, #26]
 80197c6:	e01c      	b.n	8019802 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80197c8:	7dfb      	ldrb	r3, [r7, #23]
 80197ca:	2b01      	cmp	r3, #1
 80197cc:	d919      	bls.n	8019802 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80197ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80197d2:	495e      	ldr	r1, [pc, #376]	; (801994c <etharp_find_entry+0x2d4>)
 80197d4:	4613      	mov	r3, r2
 80197d6:	005b      	lsls	r3, r3, #1
 80197d8:	4413      	add	r3, r2
 80197da:	00db      	lsls	r3, r3, #3
 80197dc:	440b      	add	r3, r1
 80197de:	3312      	adds	r3, #18
 80197e0:	881b      	ldrh	r3, [r3, #0]
 80197e2:	8b3a      	ldrh	r2, [r7, #24]
 80197e4:	429a      	cmp	r2, r3
 80197e6:	d80c      	bhi.n	8019802 <etharp_find_entry+0x18a>
            old_stable = i;
 80197e8:	8c3b      	ldrh	r3, [r7, #32]
 80197ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80197ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80197f0:	4956      	ldr	r1, [pc, #344]	; (801994c <etharp_find_entry+0x2d4>)
 80197f2:	4613      	mov	r3, r2
 80197f4:	005b      	lsls	r3, r3, #1
 80197f6:	4413      	add	r3, r2
 80197f8:	00db      	lsls	r3, r3, #3
 80197fa:	440b      	add	r3, r1
 80197fc:	3312      	adds	r3, #18
 80197fe:	881b      	ldrh	r3, [r3, #0]
 8019800:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019802:	8c3b      	ldrh	r3, [r7, #32]
 8019804:	3301      	adds	r3, #1
 8019806:	b29b      	uxth	r3, r3
 8019808:	843b      	strh	r3, [r7, #32]
 801980a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801980e:	2b09      	cmp	r3, #9
 8019810:	f77f af4c 	ble.w	80196ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019814:	7afb      	ldrb	r3, [r7, #11]
 8019816:	f003 0302 	and.w	r3, r3, #2
 801981a:	2b00      	cmp	r3, #0
 801981c:	d108      	bne.n	8019830 <etharp_find_entry+0x1b8>
 801981e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019822:	2b0a      	cmp	r3, #10
 8019824:	d107      	bne.n	8019836 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019826:	7afb      	ldrb	r3, [r7, #11]
 8019828:	f003 0301 	and.w	r3, r3, #1
 801982c:	2b00      	cmp	r3, #0
 801982e:	d102      	bne.n	8019836 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019834:	e085      	b.n	8019942 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019836:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801983a:	2b09      	cmp	r3, #9
 801983c:	dc02      	bgt.n	8019844 <etharp_find_entry+0x1cc>
    i = empty;
 801983e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019840:	843b      	strh	r3, [r7, #32]
 8019842:	e039      	b.n	80198b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019844:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019848:	2b09      	cmp	r3, #9
 801984a:	dc14      	bgt.n	8019876 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801984c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801984e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019854:	493d      	ldr	r1, [pc, #244]	; (801994c <etharp_find_entry+0x2d4>)
 8019856:	4613      	mov	r3, r2
 8019858:	005b      	lsls	r3, r3, #1
 801985a:	4413      	add	r3, r2
 801985c:	00db      	lsls	r3, r3, #3
 801985e:	440b      	add	r3, r1
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d018      	beq.n	8019898 <etharp_find_entry+0x220>
 8019866:	4b3a      	ldr	r3, [pc, #232]	; (8019950 <etharp_find_entry+0x2d8>)
 8019868:	f240 126d 	movw	r2, #365	; 0x16d
 801986c:	493b      	ldr	r1, [pc, #236]	; (801995c <etharp_find_entry+0x2e4>)
 801986e:	483a      	ldr	r0, [pc, #232]	; (8019958 <etharp_find_entry+0x2e0>)
 8019870:	f002 fc58 	bl	801c124 <iprintf>
 8019874:	e010      	b.n	8019898 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019876:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801987a:	2b09      	cmp	r3, #9
 801987c:	dc02      	bgt.n	8019884 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801987e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019880:	843b      	strh	r3, [r7, #32]
 8019882:	e009      	b.n	8019898 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019888:	2b09      	cmp	r3, #9
 801988a:	dc02      	bgt.n	8019892 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801988c:	8bfb      	ldrh	r3, [r7, #30]
 801988e:	843b      	strh	r3, [r7, #32]
 8019890:	e002      	b.n	8019898 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019896:	e054      	b.n	8019942 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019898:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801989c:	2b09      	cmp	r3, #9
 801989e:	dd06      	ble.n	80198ae <etharp_find_entry+0x236>
 80198a0:	4b2b      	ldr	r3, [pc, #172]	; (8019950 <etharp_find_entry+0x2d8>)
 80198a2:	f240 127f 	movw	r2, #383	; 0x17f
 80198a6:	492e      	ldr	r1, [pc, #184]	; (8019960 <etharp_find_entry+0x2e8>)
 80198a8:	482b      	ldr	r0, [pc, #172]	; (8019958 <etharp_find_entry+0x2e0>)
 80198aa:	f002 fc3b 	bl	801c124 <iprintf>
    etharp_free_entry(i);
 80198ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7ff fe06 	bl	80194c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80198b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80198bc:	2b09      	cmp	r3, #9
 80198be:	dd06      	ble.n	80198ce <etharp_find_entry+0x256>
 80198c0:	4b23      	ldr	r3, [pc, #140]	; (8019950 <etharp_find_entry+0x2d8>)
 80198c2:	f240 1283 	movw	r2, #387	; 0x183
 80198c6:	4926      	ldr	r1, [pc, #152]	; (8019960 <etharp_find_entry+0x2e8>)
 80198c8:	4823      	ldr	r0, [pc, #140]	; (8019958 <etharp_find_entry+0x2e0>)
 80198ca:	f002 fc2b 	bl	801c124 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80198ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80198d2:	491e      	ldr	r1, [pc, #120]	; (801994c <etharp_find_entry+0x2d4>)
 80198d4:	4613      	mov	r3, r2
 80198d6:	005b      	lsls	r3, r3, #1
 80198d8:	4413      	add	r3, r2
 80198da:	00db      	lsls	r3, r3, #3
 80198dc:	440b      	add	r3, r1
 80198de:	3314      	adds	r3, #20
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d006      	beq.n	80198f4 <etharp_find_entry+0x27c>
 80198e6:	4b1a      	ldr	r3, [pc, #104]	; (8019950 <etharp_find_entry+0x2d8>)
 80198e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80198ec:	491d      	ldr	r1, [pc, #116]	; (8019964 <etharp_find_entry+0x2ec>)
 80198ee:	481a      	ldr	r0, [pc, #104]	; (8019958 <etharp_find_entry+0x2e0>)
 80198f0:	f002 fc18 	bl	801c124 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d00b      	beq.n	8019912 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80198fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	6819      	ldr	r1, [r3, #0]
 8019902:	4812      	ldr	r0, [pc, #72]	; (801994c <etharp_find_entry+0x2d4>)
 8019904:	4613      	mov	r3, r2
 8019906:	005b      	lsls	r3, r3, #1
 8019908:	4413      	add	r3, r2
 801990a:	00db      	lsls	r3, r3, #3
 801990c:	4403      	add	r3, r0
 801990e:	3304      	adds	r3, #4
 8019910:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019916:	490d      	ldr	r1, [pc, #52]	; (801994c <etharp_find_entry+0x2d4>)
 8019918:	4613      	mov	r3, r2
 801991a:	005b      	lsls	r3, r3, #1
 801991c:	4413      	add	r3, r2
 801991e:	00db      	lsls	r3, r3, #3
 8019920:	440b      	add	r3, r1
 8019922:	3312      	adds	r3, #18
 8019924:	2200      	movs	r2, #0
 8019926:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019928:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801992c:	4907      	ldr	r1, [pc, #28]	; (801994c <etharp_find_entry+0x2d4>)
 801992e:	4613      	mov	r3, r2
 8019930:	005b      	lsls	r3, r3, #1
 8019932:	4413      	add	r3, r2
 8019934:	00db      	lsls	r3, r3, #3
 8019936:	440b      	add	r3, r1
 8019938:	3308      	adds	r3, #8
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801993e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019942:	4618      	mov	r0, r3
 8019944:	3728      	adds	r7, #40	; 0x28
 8019946:	46bd      	mov	sp, r7
 8019948:	bd80      	pop	{r7, pc}
 801994a:	bf00      	nop
 801994c:	20009908 	.word	0x20009908
 8019950:	08020d78 	.word	0x08020d78
 8019954:	08020db0 	.word	0x08020db0
 8019958:	08020df0 	.word	0x08020df0
 801995c:	08020e18 	.word	0x08020e18
 8019960:	08020e30 	.word	0x08020e30
 8019964:	08020e44 	.word	0x08020e44

08019968 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b088      	sub	sp, #32
 801996c:	af02      	add	r7, sp, #8
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	60b9      	str	r1, [r7, #8]
 8019972:	607a      	str	r2, [r7, #4]
 8019974:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801997c:	2b06      	cmp	r3, #6
 801997e:	d006      	beq.n	801998e <etharp_update_arp_entry+0x26>
 8019980:	4b48      	ldr	r3, [pc, #288]	; (8019aa4 <etharp_update_arp_entry+0x13c>)
 8019982:	f240 12a9 	movw	r2, #425	; 0x1a9
 8019986:	4948      	ldr	r1, [pc, #288]	; (8019aa8 <etharp_update_arp_entry+0x140>)
 8019988:	4848      	ldr	r0, [pc, #288]	; (8019aac <etharp_update_arp_entry+0x144>)
 801998a:	f002 fbcb 	bl	801c124 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d012      	beq.n	80199ba <etharp_update_arp_entry+0x52>
 8019994:	68bb      	ldr	r3, [r7, #8]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d00e      	beq.n	80199ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	68f9      	ldr	r1, [r7, #12]
 80199a2:	4618      	mov	r0, r3
 80199a4:	f001 f8fe 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 80199a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d105      	bne.n	80199ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80199ae:	68bb      	ldr	r3, [r7, #8]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80199b6:	2be0      	cmp	r3, #224	; 0xe0
 80199b8:	d102      	bne.n	80199c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80199ba:	f06f 030f 	mvn.w	r3, #15
 80199be:	e06c      	b.n	8019a9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80199c0:	78fb      	ldrb	r3, [r7, #3]
 80199c2:	68fa      	ldr	r2, [r7, #12]
 80199c4:	4619      	mov	r1, r3
 80199c6:	68b8      	ldr	r0, [r7, #8]
 80199c8:	f7ff fe56 	bl	8019678 <etharp_find_entry>
 80199cc:	4603      	mov	r3, r0
 80199ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80199d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	da02      	bge.n	80199de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80199d8:	8afb      	ldrh	r3, [r7, #22]
 80199da:	b25b      	sxtb	r3, r3
 80199dc:	e05d      	b.n	8019a9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80199de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80199e2:	4933      	ldr	r1, [pc, #204]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 80199e4:	4613      	mov	r3, r2
 80199e6:	005b      	lsls	r3, r3, #1
 80199e8:	4413      	add	r3, r2
 80199ea:	00db      	lsls	r3, r3, #3
 80199ec:	440b      	add	r3, r1
 80199ee:	3314      	adds	r3, #20
 80199f0:	2202      	movs	r2, #2
 80199f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80199f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80199f8:	492d      	ldr	r1, [pc, #180]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 80199fa:	4613      	mov	r3, r2
 80199fc:	005b      	lsls	r3, r3, #1
 80199fe:	4413      	add	r3, r2
 8019a00:	00db      	lsls	r3, r3, #3
 8019a02:	440b      	add	r3, r1
 8019a04:	3308      	adds	r3, #8
 8019a06:	68fa      	ldr	r2, [r7, #12]
 8019a08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019a0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019a0e:	4613      	mov	r3, r2
 8019a10:	005b      	lsls	r3, r3, #1
 8019a12:	4413      	add	r3, r2
 8019a14:	00db      	lsls	r3, r3, #3
 8019a16:	3308      	adds	r3, #8
 8019a18:	4a25      	ldr	r2, [pc, #148]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 8019a1a:	4413      	add	r3, r2
 8019a1c:	3304      	adds	r3, #4
 8019a1e:	2206      	movs	r2, #6
 8019a20:	6879      	ldr	r1, [r7, #4]
 8019a22:	4618      	mov	r0, r3
 8019a24:	f002 faf3 	bl	801c00e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019a2c:	4920      	ldr	r1, [pc, #128]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 8019a2e:	4613      	mov	r3, r2
 8019a30:	005b      	lsls	r3, r3, #1
 8019a32:	4413      	add	r3, r2
 8019a34:	00db      	lsls	r3, r3, #3
 8019a36:	440b      	add	r3, r1
 8019a38:	3312      	adds	r3, #18
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019a3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019a42:	491b      	ldr	r1, [pc, #108]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 8019a44:	4613      	mov	r3, r2
 8019a46:	005b      	lsls	r3, r3, #1
 8019a48:	4413      	add	r3, r2
 8019a4a:	00db      	lsls	r3, r3, #3
 8019a4c:	440b      	add	r3, r1
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d021      	beq.n	8019a98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019a54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019a58:	4915      	ldr	r1, [pc, #84]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 8019a5a:	4613      	mov	r3, r2
 8019a5c:	005b      	lsls	r3, r3, #1
 8019a5e:	4413      	add	r3, r2
 8019a60:	00db      	lsls	r3, r3, #3
 8019a62:	440b      	add	r3, r1
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019a68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019a6c:	4910      	ldr	r1, [pc, #64]	; (8019ab0 <etharp_update_arp_entry+0x148>)
 8019a6e:	4613      	mov	r3, r2
 8019a70:	005b      	lsls	r3, r3, #1
 8019a72:	4413      	add	r3, r2
 8019a74:	00db      	lsls	r3, r3, #3
 8019a76:	440b      	add	r3, r1
 8019a78:	2200      	movs	r2, #0
 8019a7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019a86:	9300      	str	r3, [sp, #0]
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	6939      	ldr	r1, [r7, #16]
 8019a8c:	68f8      	ldr	r0, [r7, #12]
 8019a8e:	f001 ff91 	bl	801b9b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019a92:	6938      	ldr	r0, [r7, #16]
 8019a94:	f7f8 fd80 	bl	8012598 <pbuf_free>
  }
  return ERR_OK;
 8019a98:	2300      	movs	r3, #0
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3718      	adds	r7, #24
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}
 8019aa2:	bf00      	nop
 8019aa4:	08020d78 	.word	0x08020d78
 8019aa8:	08020e70 	.word	0x08020e70
 8019aac:	08020df0 	.word	0x08020df0
 8019ab0:	20009908 	.word	0x20009908

08019ab4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b084      	sub	sp, #16
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019abc:	2300      	movs	r3, #0
 8019abe:	60fb      	str	r3, [r7, #12]
 8019ac0:	e01e      	b.n	8019b00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019ac2:	4913      	ldr	r1, [pc, #76]	; (8019b10 <etharp_cleanup_netif+0x5c>)
 8019ac4:	68fa      	ldr	r2, [r7, #12]
 8019ac6:	4613      	mov	r3, r2
 8019ac8:	005b      	lsls	r3, r3, #1
 8019aca:	4413      	add	r3, r2
 8019acc:	00db      	lsls	r3, r3, #3
 8019ace:	440b      	add	r3, r1
 8019ad0:	3314      	adds	r3, #20
 8019ad2:	781b      	ldrb	r3, [r3, #0]
 8019ad4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019ad6:	7afb      	ldrb	r3, [r7, #11]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d00e      	beq.n	8019afa <etharp_cleanup_netif+0x46>
 8019adc:	490c      	ldr	r1, [pc, #48]	; (8019b10 <etharp_cleanup_netif+0x5c>)
 8019ade:	68fa      	ldr	r2, [r7, #12]
 8019ae0:	4613      	mov	r3, r2
 8019ae2:	005b      	lsls	r3, r3, #1
 8019ae4:	4413      	add	r3, r2
 8019ae6:	00db      	lsls	r3, r3, #3
 8019ae8:	440b      	add	r3, r1
 8019aea:	3308      	adds	r3, #8
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	687a      	ldr	r2, [r7, #4]
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d102      	bne.n	8019afa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019af4:	68f8      	ldr	r0, [r7, #12]
 8019af6:	f7ff fce5 	bl	80194c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	3301      	adds	r3, #1
 8019afe:	60fb      	str	r3, [r7, #12]
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	2b09      	cmp	r3, #9
 8019b04:	dddd      	ble.n	8019ac2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019b06:	bf00      	nop
 8019b08:	bf00      	nop
 8019b0a:	3710      	adds	r7, #16
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd80      	pop	{r7, pc}
 8019b10:	20009908 	.word	0x20009908

08019b14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019b14:	b5b0      	push	{r4, r5, r7, lr}
 8019b16:	b08a      	sub	sp, #40	; 0x28
 8019b18:	af04      	add	r7, sp, #16
 8019b1a:	6078      	str	r0, [r7, #4]
 8019b1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d107      	bne.n	8019b34 <etharp_input+0x20>
 8019b24:	4b3d      	ldr	r3, [pc, #244]	; (8019c1c <etharp_input+0x108>)
 8019b26:	f240 228a 	movw	r2, #650	; 0x28a
 8019b2a:	493d      	ldr	r1, [pc, #244]	; (8019c20 <etharp_input+0x10c>)
 8019b2c:	483d      	ldr	r0, [pc, #244]	; (8019c24 <etharp_input+0x110>)
 8019b2e:	f002 faf9 	bl	801c124 <iprintf>
 8019b32:	e06f      	b.n	8019c14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	685b      	ldr	r3, [r3, #4]
 8019b38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019b3a:	693b      	ldr	r3, [r7, #16]
 8019b3c:	881b      	ldrh	r3, [r3, #0]
 8019b3e:	b29b      	uxth	r3, r3
 8019b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019b44:	d10c      	bne.n	8019b60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019b4a:	2b06      	cmp	r3, #6
 8019b4c:	d108      	bne.n	8019b60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019b52:	2b04      	cmp	r3, #4
 8019b54:	d104      	bne.n	8019b60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019b56:	693b      	ldr	r3, [r7, #16]
 8019b58:	885b      	ldrh	r3, [r3, #2]
 8019b5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019b5c:	2b08      	cmp	r3, #8
 8019b5e:	d003      	beq.n	8019b68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019b60:	6878      	ldr	r0, [r7, #4]
 8019b62:	f7f8 fd19 	bl	8012598 <pbuf_free>
    return;
 8019b66:	e055      	b.n	8019c14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019b68:	693b      	ldr	r3, [r7, #16]
 8019b6a:	330e      	adds	r3, #14
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	3318      	adds	r3, #24
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	3304      	adds	r3, #4
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d102      	bne.n	8019b88 <etharp_input+0x74>
    for_us = 0;
 8019b82:	2300      	movs	r3, #0
 8019b84:	75fb      	strb	r3, [r7, #23]
 8019b86:	e009      	b.n	8019b9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019b88:	68ba      	ldr	r2, [r7, #8]
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	3304      	adds	r3, #4
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	429a      	cmp	r2, r3
 8019b92:	bf0c      	ite	eq
 8019b94:	2301      	moveq	r3, #1
 8019b96:	2300      	movne	r3, #0
 8019b98:	b2db      	uxtb	r3, r3
 8019b9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019b9c:	693b      	ldr	r3, [r7, #16]
 8019b9e:	f103 0208 	add.w	r2, r3, #8
 8019ba2:	7dfb      	ldrb	r3, [r7, #23]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d001      	beq.n	8019bac <etharp_input+0x98>
 8019ba8:	2301      	movs	r3, #1
 8019baa:	e000      	b.n	8019bae <etharp_input+0x9a>
 8019bac:	2302      	movs	r3, #2
 8019bae:	f107 010c 	add.w	r1, r7, #12
 8019bb2:	6838      	ldr	r0, [r7, #0]
 8019bb4:	f7ff fed8 	bl	8019968 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019bb8:	693b      	ldr	r3, [r7, #16]
 8019bba:	88db      	ldrh	r3, [r3, #6]
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019bc2:	d003      	beq.n	8019bcc <etharp_input+0xb8>
 8019bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019bc8:	d01e      	beq.n	8019c08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019bca:	e020      	b.n	8019c0e <etharp_input+0xfa>
      if (for_us) {
 8019bcc:	7dfb      	ldrb	r3, [r7, #23]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d01c      	beq.n	8019c0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019bd2:	683b      	ldr	r3, [r7, #0]
 8019bd4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019bde:	683b      	ldr	r3, [r7, #0]
 8019be0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019be8:	693a      	ldr	r2, [r7, #16]
 8019bea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019bec:	2102      	movs	r1, #2
 8019bee:	9103      	str	r1, [sp, #12]
 8019bf0:	f107 010c 	add.w	r1, r7, #12
 8019bf4:	9102      	str	r1, [sp, #8]
 8019bf6:	9201      	str	r2, [sp, #4]
 8019bf8:	9300      	str	r3, [sp, #0]
 8019bfa:	462b      	mov	r3, r5
 8019bfc:	4622      	mov	r2, r4
 8019bfe:	4601      	mov	r1, r0
 8019c00:	6838      	ldr	r0, [r7, #0]
 8019c02:	f000 faeb 	bl	801a1dc <etharp_raw>
      break;
 8019c06:	e001      	b.n	8019c0c <etharp_input+0xf8>
      break;
 8019c08:	bf00      	nop
 8019c0a:	e000      	b.n	8019c0e <etharp_input+0xfa>
      break;
 8019c0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f7f8 fcc2 	bl	8012598 <pbuf_free>
}
 8019c14:	3718      	adds	r7, #24
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bdb0      	pop	{r4, r5, r7, pc}
 8019c1a:	bf00      	nop
 8019c1c:	08020d78 	.word	0x08020d78
 8019c20:	08020ec8 	.word	0x08020ec8
 8019c24:	08020df0 	.word	0x08020df0

08019c28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b086      	sub	sp, #24
 8019c2c:	af02      	add	r7, sp, #8
 8019c2e:	60f8      	str	r0, [r7, #12]
 8019c30:	60b9      	str	r1, [r7, #8]
 8019c32:	4613      	mov	r3, r2
 8019c34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019c36:	79fa      	ldrb	r2, [r7, #7]
 8019c38:	4944      	ldr	r1, [pc, #272]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019c3a:	4613      	mov	r3, r2
 8019c3c:	005b      	lsls	r3, r3, #1
 8019c3e:	4413      	add	r3, r2
 8019c40:	00db      	lsls	r3, r3, #3
 8019c42:	440b      	add	r3, r1
 8019c44:	3314      	adds	r3, #20
 8019c46:	781b      	ldrb	r3, [r3, #0]
 8019c48:	2b01      	cmp	r3, #1
 8019c4a:	d806      	bhi.n	8019c5a <etharp_output_to_arp_index+0x32>
 8019c4c:	4b40      	ldr	r3, [pc, #256]	; (8019d50 <etharp_output_to_arp_index+0x128>)
 8019c4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019c52:	4940      	ldr	r1, [pc, #256]	; (8019d54 <etharp_output_to_arp_index+0x12c>)
 8019c54:	4840      	ldr	r0, [pc, #256]	; (8019d58 <etharp_output_to_arp_index+0x130>)
 8019c56:	f002 fa65 	bl	801c124 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019c5a:	79fa      	ldrb	r2, [r7, #7]
 8019c5c:	493b      	ldr	r1, [pc, #236]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019c5e:	4613      	mov	r3, r2
 8019c60:	005b      	lsls	r3, r3, #1
 8019c62:	4413      	add	r3, r2
 8019c64:	00db      	lsls	r3, r3, #3
 8019c66:	440b      	add	r3, r1
 8019c68:	3314      	adds	r3, #20
 8019c6a:	781b      	ldrb	r3, [r3, #0]
 8019c6c:	2b02      	cmp	r3, #2
 8019c6e:	d153      	bne.n	8019d18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019c70:	79fa      	ldrb	r2, [r7, #7]
 8019c72:	4936      	ldr	r1, [pc, #216]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019c74:	4613      	mov	r3, r2
 8019c76:	005b      	lsls	r3, r3, #1
 8019c78:	4413      	add	r3, r2
 8019c7a:	00db      	lsls	r3, r3, #3
 8019c7c:	440b      	add	r3, r1
 8019c7e:	3312      	adds	r3, #18
 8019c80:	881b      	ldrh	r3, [r3, #0]
 8019c82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019c86:	d919      	bls.n	8019cbc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019c88:	79fa      	ldrb	r2, [r7, #7]
 8019c8a:	4613      	mov	r3, r2
 8019c8c:	005b      	lsls	r3, r3, #1
 8019c8e:	4413      	add	r3, r2
 8019c90:	00db      	lsls	r3, r3, #3
 8019c92:	4a2e      	ldr	r2, [pc, #184]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019c94:	4413      	add	r3, r2
 8019c96:	3304      	adds	r3, #4
 8019c98:	4619      	mov	r1, r3
 8019c9a:	68f8      	ldr	r0, [r7, #12]
 8019c9c:	f000 fb4c 	bl	801a338 <etharp_request>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d138      	bne.n	8019d18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019ca6:	79fa      	ldrb	r2, [r7, #7]
 8019ca8:	4928      	ldr	r1, [pc, #160]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019caa:	4613      	mov	r3, r2
 8019cac:	005b      	lsls	r3, r3, #1
 8019cae:	4413      	add	r3, r2
 8019cb0:	00db      	lsls	r3, r3, #3
 8019cb2:	440b      	add	r3, r1
 8019cb4:	3314      	adds	r3, #20
 8019cb6:	2203      	movs	r2, #3
 8019cb8:	701a      	strb	r2, [r3, #0]
 8019cba:	e02d      	b.n	8019d18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019cbc:	79fa      	ldrb	r2, [r7, #7]
 8019cbe:	4923      	ldr	r1, [pc, #140]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019cc0:	4613      	mov	r3, r2
 8019cc2:	005b      	lsls	r3, r3, #1
 8019cc4:	4413      	add	r3, r2
 8019cc6:	00db      	lsls	r3, r3, #3
 8019cc8:	440b      	add	r3, r1
 8019cca:	3312      	adds	r3, #18
 8019ccc:	881b      	ldrh	r3, [r3, #0]
 8019cce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019cd2:	d321      	bcc.n	8019d18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019cd4:	79fa      	ldrb	r2, [r7, #7]
 8019cd6:	4613      	mov	r3, r2
 8019cd8:	005b      	lsls	r3, r3, #1
 8019cda:	4413      	add	r3, r2
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	4a1b      	ldr	r2, [pc, #108]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019ce0:	4413      	add	r3, r2
 8019ce2:	1d19      	adds	r1, r3, #4
 8019ce4:	79fa      	ldrb	r2, [r7, #7]
 8019ce6:	4613      	mov	r3, r2
 8019ce8:	005b      	lsls	r3, r3, #1
 8019cea:	4413      	add	r3, r2
 8019cec:	00db      	lsls	r3, r3, #3
 8019cee:	3308      	adds	r3, #8
 8019cf0:	4a16      	ldr	r2, [pc, #88]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019cf2:	4413      	add	r3, r2
 8019cf4:	3304      	adds	r3, #4
 8019cf6:	461a      	mov	r2, r3
 8019cf8:	68f8      	ldr	r0, [r7, #12]
 8019cfa:	f000 fafb 	bl	801a2f4 <etharp_request_dst>
 8019cfe:	4603      	mov	r3, r0
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d109      	bne.n	8019d18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019d04:	79fa      	ldrb	r2, [r7, #7]
 8019d06:	4911      	ldr	r1, [pc, #68]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019d08:	4613      	mov	r3, r2
 8019d0a:	005b      	lsls	r3, r3, #1
 8019d0c:	4413      	add	r3, r2
 8019d0e:	00db      	lsls	r3, r3, #3
 8019d10:	440b      	add	r3, r1
 8019d12:	3314      	adds	r3, #20
 8019d14:	2203      	movs	r2, #3
 8019d16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019d1e:	79fa      	ldrb	r2, [r7, #7]
 8019d20:	4613      	mov	r3, r2
 8019d22:	005b      	lsls	r3, r3, #1
 8019d24:	4413      	add	r3, r2
 8019d26:	00db      	lsls	r3, r3, #3
 8019d28:	3308      	adds	r3, #8
 8019d2a:	4a08      	ldr	r2, [pc, #32]	; (8019d4c <etharp_output_to_arp_index+0x124>)
 8019d2c:	4413      	add	r3, r2
 8019d2e:	3304      	adds	r3, #4
 8019d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019d34:	9200      	str	r2, [sp, #0]
 8019d36:	460a      	mov	r2, r1
 8019d38:	68b9      	ldr	r1, [r7, #8]
 8019d3a:	68f8      	ldr	r0, [r7, #12]
 8019d3c:	f001 fe3a 	bl	801b9b4 <ethernet_output>
 8019d40:	4603      	mov	r3, r0
}
 8019d42:	4618      	mov	r0, r3
 8019d44:	3710      	adds	r7, #16
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}
 8019d4a:	bf00      	nop
 8019d4c:	20009908 	.word	0x20009908
 8019d50:	08020d78 	.word	0x08020d78
 8019d54:	08020ee8 	.word	0x08020ee8
 8019d58:	08020df0 	.word	0x08020df0

08019d5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b08a      	sub	sp, #40	; 0x28
 8019d60:	af02      	add	r7, sp, #8
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d106      	bne.n	8019d80 <etharp_output+0x24>
 8019d72:	4b73      	ldr	r3, [pc, #460]	; (8019f40 <etharp_output+0x1e4>)
 8019d74:	f240 321e 	movw	r2, #798	; 0x31e
 8019d78:	4972      	ldr	r1, [pc, #456]	; (8019f44 <etharp_output+0x1e8>)
 8019d7a:	4873      	ldr	r0, [pc, #460]	; (8019f48 <etharp_output+0x1ec>)
 8019d7c:	f002 f9d2 	bl	801c124 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019d80:	68bb      	ldr	r3, [r7, #8]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d106      	bne.n	8019d94 <etharp_output+0x38>
 8019d86:	4b6e      	ldr	r3, [pc, #440]	; (8019f40 <etharp_output+0x1e4>)
 8019d88:	f240 321f 	movw	r2, #799	; 0x31f
 8019d8c:	496f      	ldr	r1, [pc, #444]	; (8019f4c <etharp_output+0x1f0>)
 8019d8e:	486e      	ldr	r0, [pc, #440]	; (8019f48 <etharp_output+0x1ec>)
 8019d90:	f002 f9c8 	bl	801c124 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d106      	bne.n	8019da8 <etharp_output+0x4c>
 8019d9a:	4b69      	ldr	r3, [pc, #420]	; (8019f40 <etharp_output+0x1e4>)
 8019d9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019da0:	496b      	ldr	r1, [pc, #428]	; (8019f50 <etharp_output+0x1f4>)
 8019da2:	4869      	ldr	r0, [pc, #420]	; (8019f48 <etharp_output+0x1ec>)
 8019da4:	f002 f9be 	bl	801c124 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	68f9      	ldr	r1, [r7, #12]
 8019dae:	4618      	mov	r0, r3
 8019db0:	f000 fef8 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 8019db4:	4603      	mov	r3, r0
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d002      	beq.n	8019dc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019dba:	4b66      	ldr	r3, [pc, #408]	; (8019f54 <etharp_output+0x1f8>)
 8019dbc:	61fb      	str	r3, [r7, #28]
 8019dbe:	e0af      	b.n	8019f20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019dc8:	2be0      	cmp	r3, #224	; 0xe0
 8019dca:	d118      	bne.n	8019dfe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019dcc:	2301      	movs	r3, #1
 8019dce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019dd4:	235e      	movs	r3, #94	; 0x5e
 8019dd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	3301      	adds	r3, #1
 8019ddc:	781b      	ldrb	r3, [r3, #0]
 8019dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019de2:	b2db      	uxtb	r3, r3
 8019de4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	3302      	adds	r3, #2
 8019dea:	781b      	ldrb	r3, [r3, #0]
 8019dec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	3303      	adds	r3, #3
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019df6:	f107 0310 	add.w	r3, r7, #16
 8019dfa:	61fb      	str	r3, [r7, #28]
 8019dfc:	e090      	b.n	8019f20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	681a      	ldr	r2, [r3, #0]
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	3304      	adds	r3, #4
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	405a      	eors	r2, r3
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	3308      	adds	r3, #8
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	4013      	ands	r3, r2
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d012      	beq.n	8019e3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019e1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019e20:	4293      	cmp	r3, r2
 8019e22:	d00b      	beq.n	8019e3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	330c      	adds	r3, #12
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d003      	beq.n	8019e36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	330c      	adds	r3, #12
 8019e32:	61bb      	str	r3, [r7, #24]
 8019e34:	e002      	b.n	8019e3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019e36:	f06f 0303 	mvn.w	r3, #3
 8019e3a:	e07d      	b.n	8019f38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019e3c:	4b46      	ldr	r3, [pc, #280]	; (8019f58 <etharp_output+0x1fc>)
 8019e3e:	781b      	ldrb	r3, [r3, #0]
 8019e40:	4619      	mov	r1, r3
 8019e42:	4a46      	ldr	r2, [pc, #280]	; (8019f5c <etharp_output+0x200>)
 8019e44:	460b      	mov	r3, r1
 8019e46:	005b      	lsls	r3, r3, #1
 8019e48:	440b      	add	r3, r1
 8019e4a:	00db      	lsls	r3, r3, #3
 8019e4c:	4413      	add	r3, r2
 8019e4e:	3314      	adds	r3, #20
 8019e50:	781b      	ldrb	r3, [r3, #0]
 8019e52:	2b01      	cmp	r3, #1
 8019e54:	d925      	bls.n	8019ea2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019e56:	4b40      	ldr	r3, [pc, #256]	; (8019f58 <etharp_output+0x1fc>)
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	4619      	mov	r1, r3
 8019e5c:	4a3f      	ldr	r2, [pc, #252]	; (8019f5c <etharp_output+0x200>)
 8019e5e:	460b      	mov	r3, r1
 8019e60:	005b      	lsls	r3, r3, #1
 8019e62:	440b      	add	r3, r1
 8019e64:	00db      	lsls	r3, r3, #3
 8019e66:	4413      	add	r3, r2
 8019e68:	3308      	adds	r3, #8
 8019e6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019e6c:	68fa      	ldr	r2, [r7, #12]
 8019e6e:	429a      	cmp	r2, r3
 8019e70:	d117      	bne.n	8019ea2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019e72:	69bb      	ldr	r3, [r7, #24]
 8019e74:	681a      	ldr	r2, [r3, #0]
 8019e76:	4b38      	ldr	r3, [pc, #224]	; (8019f58 <etharp_output+0x1fc>)
 8019e78:	781b      	ldrb	r3, [r3, #0]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	4937      	ldr	r1, [pc, #220]	; (8019f5c <etharp_output+0x200>)
 8019e7e:	4603      	mov	r3, r0
 8019e80:	005b      	lsls	r3, r3, #1
 8019e82:	4403      	add	r3, r0
 8019e84:	00db      	lsls	r3, r3, #3
 8019e86:	440b      	add	r3, r1
 8019e88:	3304      	adds	r3, #4
 8019e8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d108      	bne.n	8019ea2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019e90:	4b31      	ldr	r3, [pc, #196]	; (8019f58 <etharp_output+0x1fc>)
 8019e92:	781b      	ldrb	r3, [r3, #0]
 8019e94:	461a      	mov	r2, r3
 8019e96:	68b9      	ldr	r1, [r7, #8]
 8019e98:	68f8      	ldr	r0, [r7, #12]
 8019e9a:	f7ff fec5 	bl	8019c28 <etharp_output_to_arp_index>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	e04a      	b.n	8019f38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	75fb      	strb	r3, [r7, #23]
 8019ea6:	e031      	b.n	8019f0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019ea8:	7dfa      	ldrb	r2, [r7, #23]
 8019eaa:	492c      	ldr	r1, [pc, #176]	; (8019f5c <etharp_output+0x200>)
 8019eac:	4613      	mov	r3, r2
 8019eae:	005b      	lsls	r3, r3, #1
 8019eb0:	4413      	add	r3, r2
 8019eb2:	00db      	lsls	r3, r3, #3
 8019eb4:	440b      	add	r3, r1
 8019eb6:	3314      	adds	r3, #20
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d923      	bls.n	8019f06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019ebe:	7dfa      	ldrb	r2, [r7, #23]
 8019ec0:	4926      	ldr	r1, [pc, #152]	; (8019f5c <etharp_output+0x200>)
 8019ec2:	4613      	mov	r3, r2
 8019ec4:	005b      	lsls	r3, r3, #1
 8019ec6:	4413      	add	r3, r2
 8019ec8:	00db      	lsls	r3, r3, #3
 8019eca:	440b      	add	r3, r1
 8019ecc:	3308      	adds	r3, #8
 8019ece:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019ed0:	68fa      	ldr	r2, [r7, #12]
 8019ed2:	429a      	cmp	r2, r3
 8019ed4:	d117      	bne.n	8019f06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019ed6:	69bb      	ldr	r3, [r7, #24]
 8019ed8:	6819      	ldr	r1, [r3, #0]
 8019eda:	7dfa      	ldrb	r2, [r7, #23]
 8019edc:	481f      	ldr	r0, [pc, #124]	; (8019f5c <etharp_output+0x200>)
 8019ede:	4613      	mov	r3, r2
 8019ee0:	005b      	lsls	r3, r3, #1
 8019ee2:	4413      	add	r3, r2
 8019ee4:	00db      	lsls	r3, r3, #3
 8019ee6:	4403      	add	r3, r0
 8019ee8:	3304      	adds	r3, #4
 8019eea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019eec:	4299      	cmp	r1, r3
 8019eee:	d10a      	bne.n	8019f06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019ef0:	4a19      	ldr	r2, [pc, #100]	; (8019f58 <etharp_output+0x1fc>)
 8019ef2:	7dfb      	ldrb	r3, [r7, #23]
 8019ef4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019ef6:	7dfb      	ldrb	r3, [r7, #23]
 8019ef8:	461a      	mov	r2, r3
 8019efa:	68b9      	ldr	r1, [r7, #8]
 8019efc:	68f8      	ldr	r0, [r7, #12]
 8019efe:	f7ff fe93 	bl	8019c28 <etharp_output_to_arp_index>
 8019f02:	4603      	mov	r3, r0
 8019f04:	e018      	b.n	8019f38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019f06:	7dfb      	ldrb	r3, [r7, #23]
 8019f08:	3301      	adds	r3, #1
 8019f0a:	75fb      	strb	r3, [r7, #23]
 8019f0c:	7dfb      	ldrb	r3, [r7, #23]
 8019f0e:	2b09      	cmp	r3, #9
 8019f10:	d9ca      	bls.n	8019ea8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019f12:	68ba      	ldr	r2, [r7, #8]
 8019f14:	69b9      	ldr	r1, [r7, #24]
 8019f16:	68f8      	ldr	r0, [r7, #12]
 8019f18:	f000 f822 	bl	8019f60 <etharp_query>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	e00b      	b.n	8019f38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f2a:	9300      	str	r3, [sp, #0]
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	68b9      	ldr	r1, [r7, #8]
 8019f30:	68f8      	ldr	r0, [r7, #12]
 8019f32:	f001 fd3f 	bl	801b9b4 <ethernet_output>
 8019f36:	4603      	mov	r3, r0
}
 8019f38:	4618      	mov	r0, r3
 8019f3a:	3720      	adds	r7, #32
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}
 8019f40:	08020d78 	.word	0x08020d78
 8019f44:	08020ec8 	.word	0x08020ec8
 8019f48:	08020df0 	.word	0x08020df0
 8019f4c:	08020f18 	.word	0x08020f18
 8019f50:	08020eb8 	.word	0x08020eb8
 8019f54:	0802453c 	.word	0x0802453c
 8019f58:	200099f8 	.word	0x200099f8
 8019f5c:	20009908 	.word	0x20009908

08019f60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b08c      	sub	sp, #48	; 0x30
 8019f64:	af02      	add	r7, sp, #8
 8019f66:	60f8      	str	r0, [r7, #12]
 8019f68:	60b9      	str	r1, [r7, #8]
 8019f6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	3326      	adds	r3, #38	; 0x26
 8019f70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019f72:	23ff      	movs	r3, #255	; 0xff
 8019f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019f78:	2300      	movs	r3, #0
 8019f7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	68f9      	ldr	r1, [r7, #12]
 8019f82:	4618      	mov	r0, r3
 8019f84:	f000 fe0e 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d10c      	bne.n	8019fa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019f96:	2be0      	cmp	r3, #224	; 0xe0
 8019f98:	d006      	beq.n	8019fa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019f9a:	68bb      	ldr	r3, [r7, #8]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d003      	beq.n	8019fa8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d102      	bne.n	8019fae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019fa8:	f06f 030f 	mvn.w	r3, #15
 8019fac:	e101      	b.n	801a1b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019fae:	68fa      	ldr	r2, [r7, #12]
 8019fb0:	2101      	movs	r1, #1
 8019fb2:	68b8      	ldr	r0, [r7, #8]
 8019fb4:	f7ff fb60 	bl	8019678 <etharp_find_entry>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019fbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	da02      	bge.n	8019fca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019fc4:	8a7b      	ldrh	r3, [r7, #18]
 8019fc6:	b25b      	sxtb	r3, r3
 8019fc8:	e0f3      	b.n	801a1b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019fca:	8a7b      	ldrh	r3, [r7, #18]
 8019fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8019fce:	d906      	bls.n	8019fde <etharp_query+0x7e>
 8019fd0:	4b7a      	ldr	r3, [pc, #488]	; (801a1bc <etharp_query+0x25c>)
 8019fd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019fd6:	497a      	ldr	r1, [pc, #488]	; (801a1c0 <etharp_query+0x260>)
 8019fd8:	487a      	ldr	r0, [pc, #488]	; (801a1c4 <etharp_query+0x264>)
 8019fda:	f002 f8a3 	bl	801c124 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019fde:	8a7b      	ldrh	r3, [r7, #18]
 8019fe0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019fe2:	7c7a      	ldrb	r2, [r7, #17]
 8019fe4:	4978      	ldr	r1, [pc, #480]	; (801a1c8 <etharp_query+0x268>)
 8019fe6:	4613      	mov	r3, r2
 8019fe8:	005b      	lsls	r3, r3, #1
 8019fea:	4413      	add	r3, r2
 8019fec:	00db      	lsls	r3, r3, #3
 8019fee:	440b      	add	r3, r1
 8019ff0:	3314      	adds	r3, #20
 8019ff2:	781b      	ldrb	r3, [r3, #0]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d115      	bne.n	801a024 <etharp_query+0xc4>
    is_new_entry = 1;
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019ffc:	7c7a      	ldrb	r2, [r7, #17]
 8019ffe:	4972      	ldr	r1, [pc, #456]	; (801a1c8 <etharp_query+0x268>)
 801a000:	4613      	mov	r3, r2
 801a002:	005b      	lsls	r3, r3, #1
 801a004:	4413      	add	r3, r2
 801a006:	00db      	lsls	r3, r3, #3
 801a008:	440b      	add	r3, r1
 801a00a:	3314      	adds	r3, #20
 801a00c:	2201      	movs	r2, #1
 801a00e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a010:	7c7a      	ldrb	r2, [r7, #17]
 801a012:	496d      	ldr	r1, [pc, #436]	; (801a1c8 <etharp_query+0x268>)
 801a014:	4613      	mov	r3, r2
 801a016:	005b      	lsls	r3, r3, #1
 801a018:	4413      	add	r3, r2
 801a01a:	00db      	lsls	r3, r3, #3
 801a01c:	440b      	add	r3, r1
 801a01e:	3308      	adds	r3, #8
 801a020:	68fa      	ldr	r2, [r7, #12]
 801a022:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a024:	7c7a      	ldrb	r2, [r7, #17]
 801a026:	4968      	ldr	r1, [pc, #416]	; (801a1c8 <etharp_query+0x268>)
 801a028:	4613      	mov	r3, r2
 801a02a:	005b      	lsls	r3, r3, #1
 801a02c:	4413      	add	r3, r2
 801a02e:	00db      	lsls	r3, r3, #3
 801a030:	440b      	add	r3, r1
 801a032:	3314      	adds	r3, #20
 801a034:	781b      	ldrb	r3, [r3, #0]
 801a036:	2b01      	cmp	r3, #1
 801a038:	d011      	beq.n	801a05e <etharp_query+0xfe>
 801a03a:	7c7a      	ldrb	r2, [r7, #17]
 801a03c:	4962      	ldr	r1, [pc, #392]	; (801a1c8 <etharp_query+0x268>)
 801a03e:	4613      	mov	r3, r2
 801a040:	005b      	lsls	r3, r3, #1
 801a042:	4413      	add	r3, r2
 801a044:	00db      	lsls	r3, r3, #3
 801a046:	440b      	add	r3, r1
 801a048:	3314      	adds	r3, #20
 801a04a:	781b      	ldrb	r3, [r3, #0]
 801a04c:	2b01      	cmp	r3, #1
 801a04e:	d806      	bhi.n	801a05e <etharp_query+0xfe>
 801a050:	4b5a      	ldr	r3, [pc, #360]	; (801a1bc <etharp_query+0x25c>)
 801a052:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a056:	495d      	ldr	r1, [pc, #372]	; (801a1cc <etharp_query+0x26c>)
 801a058:	485a      	ldr	r0, [pc, #360]	; (801a1c4 <etharp_query+0x264>)
 801a05a:	f002 f863 	bl	801c124 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a05e:	6a3b      	ldr	r3, [r7, #32]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d102      	bne.n	801a06a <etharp_query+0x10a>
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d10c      	bne.n	801a084 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a06a:	68b9      	ldr	r1, [r7, #8]
 801a06c:	68f8      	ldr	r0, [r7, #12]
 801a06e:	f000 f963 	bl	801a338 <etharp_request>
 801a072:	4603      	mov	r3, r0
 801a074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d102      	bne.n	801a084 <etharp_query+0x124>
      return result;
 801a07e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a082:	e096      	b.n	801a1b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d106      	bne.n	801a098 <etharp_query+0x138>
 801a08a:	4b4c      	ldr	r3, [pc, #304]	; (801a1bc <etharp_query+0x25c>)
 801a08c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a090:	494f      	ldr	r1, [pc, #316]	; (801a1d0 <etharp_query+0x270>)
 801a092:	484c      	ldr	r0, [pc, #304]	; (801a1c4 <etharp_query+0x264>)
 801a094:	f002 f846 	bl	801c124 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a098:	7c7a      	ldrb	r2, [r7, #17]
 801a09a:	494b      	ldr	r1, [pc, #300]	; (801a1c8 <etharp_query+0x268>)
 801a09c:	4613      	mov	r3, r2
 801a09e:	005b      	lsls	r3, r3, #1
 801a0a0:	4413      	add	r3, r2
 801a0a2:	00db      	lsls	r3, r3, #3
 801a0a4:	440b      	add	r3, r1
 801a0a6:	3314      	adds	r3, #20
 801a0a8:	781b      	ldrb	r3, [r3, #0]
 801a0aa:	2b01      	cmp	r3, #1
 801a0ac:	d917      	bls.n	801a0de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a0ae:	4a49      	ldr	r2, [pc, #292]	; (801a1d4 <etharp_query+0x274>)
 801a0b0:	7c7b      	ldrb	r3, [r7, #17]
 801a0b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a0b4:	7c7a      	ldrb	r2, [r7, #17]
 801a0b6:	4613      	mov	r3, r2
 801a0b8:	005b      	lsls	r3, r3, #1
 801a0ba:	4413      	add	r3, r2
 801a0bc:	00db      	lsls	r3, r3, #3
 801a0be:	3308      	adds	r3, #8
 801a0c0:	4a41      	ldr	r2, [pc, #260]	; (801a1c8 <etharp_query+0x268>)
 801a0c2:	4413      	add	r3, r2
 801a0c4:	3304      	adds	r3, #4
 801a0c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a0ca:	9200      	str	r2, [sp, #0]
 801a0cc:	697a      	ldr	r2, [r7, #20]
 801a0ce:	6879      	ldr	r1, [r7, #4]
 801a0d0:	68f8      	ldr	r0, [r7, #12]
 801a0d2:	f001 fc6f 	bl	801b9b4 <ethernet_output>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a0dc:	e067      	b.n	801a1ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a0de:	7c7a      	ldrb	r2, [r7, #17]
 801a0e0:	4939      	ldr	r1, [pc, #228]	; (801a1c8 <etharp_query+0x268>)
 801a0e2:	4613      	mov	r3, r2
 801a0e4:	005b      	lsls	r3, r3, #1
 801a0e6:	4413      	add	r3, r2
 801a0e8:	00db      	lsls	r3, r3, #3
 801a0ea:	440b      	add	r3, r1
 801a0ec:	3314      	adds	r3, #20
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	2b01      	cmp	r3, #1
 801a0f2:	d15c      	bne.n	801a1ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a0fc:	e01c      	b.n	801a138 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a0fe:	69fb      	ldr	r3, [r7, #28]
 801a100:	895a      	ldrh	r2, [r3, #10]
 801a102:	69fb      	ldr	r3, [r7, #28]
 801a104:	891b      	ldrh	r3, [r3, #8]
 801a106:	429a      	cmp	r2, r3
 801a108:	d10a      	bne.n	801a120 <etharp_query+0x1c0>
 801a10a:	69fb      	ldr	r3, [r7, #28]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d006      	beq.n	801a120 <etharp_query+0x1c0>
 801a112:	4b2a      	ldr	r3, [pc, #168]	; (801a1bc <etharp_query+0x25c>)
 801a114:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a118:	492f      	ldr	r1, [pc, #188]	; (801a1d8 <etharp_query+0x278>)
 801a11a:	482a      	ldr	r0, [pc, #168]	; (801a1c4 <etharp_query+0x264>)
 801a11c:	f002 f802 	bl	801c124 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a120:	69fb      	ldr	r3, [r7, #28]
 801a122:	7b1b      	ldrb	r3, [r3, #12]
 801a124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d002      	beq.n	801a132 <etharp_query+0x1d2>
        copy_needed = 1;
 801a12c:	2301      	movs	r3, #1
 801a12e:	61bb      	str	r3, [r7, #24]
        break;
 801a130:	e005      	b.n	801a13e <etharp_query+0x1de>
      }
      p = p->next;
 801a132:	69fb      	ldr	r3, [r7, #28]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a138:	69fb      	ldr	r3, [r7, #28]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d1df      	bne.n	801a0fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a13e:	69bb      	ldr	r3, [r7, #24]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d007      	beq.n	801a154 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a144:	687a      	ldr	r2, [r7, #4]
 801a146:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a14a:	200e      	movs	r0, #14
 801a14c:	f7f8 fc8c 	bl	8012a68 <pbuf_clone>
 801a150:	61f8      	str	r0, [r7, #28]
 801a152:	e004      	b.n	801a15e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a158:	69f8      	ldr	r0, [r7, #28]
 801a15a:	f7f8 fac3 	bl	80126e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a15e:	69fb      	ldr	r3, [r7, #28]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d021      	beq.n	801a1a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a164:	7c7a      	ldrb	r2, [r7, #17]
 801a166:	4918      	ldr	r1, [pc, #96]	; (801a1c8 <etharp_query+0x268>)
 801a168:	4613      	mov	r3, r2
 801a16a:	005b      	lsls	r3, r3, #1
 801a16c:	4413      	add	r3, r2
 801a16e:	00db      	lsls	r3, r3, #3
 801a170:	440b      	add	r3, r1
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d00a      	beq.n	801a18e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a178:	7c7a      	ldrb	r2, [r7, #17]
 801a17a:	4913      	ldr	r1, [pc, #76]	; (801a1c8 <etharp_query+0x268>)
 801a17c:	4613      	mov	r3, r2
 801a17e:	005b      	lsls	r3, r3, #1
 801a180:	4413      	add	r3, r2
 801a182:	00db      	lsls	r3, r3, #3
 801a184:	440b      	add	r3, r1
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	4618      	mov	r0, r3
 801a18a:	f7f8 fa05 	bl	8012598 <pbuf_free>
      }
      arp_table[i].q = p;
 801a18e:	7c7a      	ldrb	r2, [r7, #17]
 801a190:	490d      	ldr	r1, [pc, #52]	; (801a1c8 <etharp_query+0x268>)
 801a192:	4613      	mov	r3, r2
 801a194:	005b      	lsls	r3, r3, #1
 801a196:	4413      	add	r3, r2
 801a198:	00db      	lsls	r3, r3, #3
 801a19a:	440b      	add	r3, r1
 801a19c:	69fa      	ldr	r2, [r7, #28]
 801a19e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a1a6:	e002      	b.n	801a1ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a1a8:	23ff      	movs	r3, #255	; 0xff
 801a1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a1ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	3728      	adds	r7, #40	; 0x28
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bd80      	pop	{r7, pc}
 801a1ba:	bf00      	nop
 801a1bc:	08020d78 	.word	0x08020d78
 801a1c0:	08020f24 	.word	0x08020f24
 801a1c4:	08020df0 	.word	0x08020df0
 801a1c8:	20009908 	.word	0x20009908
 801a1cc:	08020f34 	.word	0x08020f34
 801a1d0:	08020f18 	.word	0x08020f18
 801a1d4:	200099f8 	.word	0x200099f8
 801a1d8:	08020f5c 	.word	0x08020f5c

0801a1dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b08a      	sub	sp, #40	; 0x28
 801a1e0:	af02      	add	r7, sp, #8
 801a1e2:	60f8      	str	r0, [r7, #12]
 801a1e4:	60b9      	str	r1, [r7, #8]
 801a1e6:	607a      	str	r2, [r7, #4]
 801a1e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d106      	bne.n	801a202 <etharp_raw+0x26>
 801a1f4:	4b3a      	ldr	r3, [pc, #232]	; (801a2e0 <etharp_raw+0x104>)
 801a1f6:	f240 4257 	movw	r2, #1111	; 0x457
 801a1fa:	493a      	ldr	r1, [pc, #232]	; (801a2e4 <etharp_raw+0x108>)
 801a1fc:	483a      	ldr	r0, [pc, #232]	; (801a2e8 <etharp_raw+0x10c>)
 801a1fe:	f001 ff91 	bl	801c124 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a202:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a206:	211c      	movs	r1, #28
 801a208:	200e      	movs	r0, #14
 801a20a:	f7f7 fee1 	bl	8011fd0 <pbuf_alloc>
 801a20e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a210:	69bb      	ldr	r3, [r7, #24]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d102      	bne.n	801a21c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a21a:	e05d      	b.n	801a2d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a21c:	69bb      	ldr	r3, [r7, #24]
 801a21e:	895b      	ldrh	r3, [r3, #10]
 801a220:	2b1b      	cmp	r3, #27
 801a222:	d806      	bhi.n	801a232 <etharp_raw+0x56>
 801a224:	4b2e      	ldr	r3, [pc, #184]	; (801a2e0 <etharp_raw+0x104>)
 801a226:	f240 4262 	movw	r2, #1122	; 0x462
 801a22a:	4930      	ldr	r1, [pc, #192]	; (801a2ec <etharp_raw+0x110>)
 801a22c:	482e      	ldr	r0, [pc, #184]	; (801a2e8 <etharp_raw+0x10c>)
 801a22e:	f001 ff79 	bl	801c124 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a232:	69bb      	ldr	r3, [r7, #24]
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a238:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a23a:	4618      	mov	r0, r3
 801a23c:	f7f6 fe00 	bl	8010e40 <lwip_htons>
 801a240:	4603      	mov	r3, r0
 801a242:	461a      	mov	r2, r3
 801a244:	697b      	ldr	r3, [r7, #20]
 801a246:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a24e:	2b06      	cmp	r3, #6
 801a250:	d006      	beq.n	801a260 <etharp_raw+0x84>
 801a252:	4b23      	ldr	r3, [pc, #140]	; (801a2e0 <etharp_raw+0x104>)
 801a254:	f240 4269 	movw	r2, #1129	; 0x469
 801a258:	4925      	ldr	r1, [pc, #148]	; (801a2f0 <etharp_raw+0x114>)
 801a25a:	4823      	ldr	r0, [pc, #140]	; (801a2e8 <etharp_raw+0x10c>)
 801a25c:	f001 ff62 	bl	801c124 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a260:	697b      	ldr	r3, [r7, #20]
 801a262:	3308      	adds	r3, #8
 801a264:	2206      	movs	r2, #6
 801a266:	6839      	ldr	r1, [r7, #0]
 801a268:	4618      	mov	r0, r3
 801a26a:	f001 fed0 	bl	801c00e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a26e:	697b      	ldr	r3, [r7, #20]
 801a270:	3312      	adds	r3, #18
 801a272:	2206      	movs	r2, #6
 801a274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a276:	4618      	mov	r0, r3
 801a278:	f001 fec9 	bl	801c00e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a27c:	697b      	ldr	r3, [r7, #20]
 801a27e:	330e      	adds	r3, #14
 801a280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a282:	6812      	ldr	r2, [r2, #0]
 801a284:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a286:	697b      	ldr	r3, [r7, #20]
 801a288:	3318      	adds	r3, #24
 801a28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a28c:	6812      	ldr	r2, [r2, #0]
 801a28e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a290:	697b      	ldr	r3, [r7, #20]
 801a292:	2200      	movs	r2, #0
 801a294:	701a      	strb	r2, [r3, #0]
 801a296:	2200      	movs	r2, #0
 801a298:	f042 0201 	orr.w	r2, r2, #1
 801a29c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	f042 0208 	orr.w	r2, r2, #8
 801a2a6:	709a      	strb	r2, [r3, #2]
 801a2a8:	2200      	movs	r2, #0
 801a2aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a2ac:	697b      	ldr	r3, [r7, #20]
 801a2ae:	2206      	movs	r2, #6
 801a2b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a2b2:	697b      	ldr	r3, [r7, #20]
 801a2b4:	2204      	movs	r2, #4
 801a2b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a2b8:	f640 0306 	movw	r3, #2054	; 0x806
 801a2bc:	9300      	str	r3, [sp, #0]
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	68ba      	ldr	r2, [r7, #8]
 801a2c2:	69b9      	ldr	r1, [r7, #24]
 801a2c4:	68f8      	ldr	r0, [r7, #12]
 801a2c6:	f001 fb75 	bl	801b9b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a2ca:	69b8      	ldr	r0, [r7, #24]
 801a2cc:	f7f8 f964 	bl	8012598 <pbuf_free>
  p = NULL;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a2d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a2d8:	4618      	mov	r0, r3
 801a2da:	3720      	adds	r7, #32
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}
 801a2e0:	08020d78 	.word	0x08020d78
 801a2e4:	08020ec8 	.word	0x08020ec8
 801a2e8:	08020df0 	.word	0x08020df0
 801a2ec:	08020f78 	.word	0x08020f78
 801a2f0:	08020fac 	.word	0x08020fac

0801a2f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b088      	sub	sp, #32
 801a2f8:	af04      	add	r7, sp, #16
 801a2fa:	60f8      	str	r0, [r7, #12]
 801a2fc:	60b9      	str	r1, [r7, #8]
 801a2fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a310:	2201      	movs	r2, #1
 801a312:	9203      	str	r2, [sp, #12]
 801a314:	68ba      	ldr	r2, [r7, #8]
 801a316:	9202      	str	r2, [sp, #8]
 801a318:	4a06      	ldr	r2, [pc, #24]	; (801a334 <etharp_request_dst+0x40>)
 801a31a:	9201      	str	r2, [sp, #4]
 801a31c:	9300      	str	r3, [sp, #0]
 801a31e:	4603      	mov	r3, r0
 801a320:	687a      	ldr	r2, [r7, #4]
 801a322:	68f8      	ldr	r0, [r7, #12]
 801a324:	f7ff ff5a 	bl	801a1dc <etharp_raw>
 801a328:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a32a:	4618      	mov	r0, r3
 801a32c:	3710      	adds	r7, #16
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}
 801a332:	bf00      	nop
 801a334:	08024544 	.word	0x08024544

0801a338 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b082      	sub	sp, #8
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
 801a340:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a342:	4a05      	ldr	r2, [pc, #20]	; (801a358 <etharp_request+0x20>)
 801a344:	6839      	ldr	r1, [r7, #0]
 801a346:	6878      	ldr	r0, [r7, #4]
 801a348:	f7ff ffd4 	bl	801a2f4 <etharp_request_dst>
 801a34c:	4603      	mov	r3, r0
}
 801a34e:	4618      	mov	r0, r3
 801a350:	3708      	adds	r7, #8
 801a352:	46bd      	mov	sp, r7
 801a354:	bd80      	pop	{r7, pc}
 801a356:	bf00      	nop
 801a358:	0802453c 	.word	0x0802453c

0801a35c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b08e      	sub	sp, #56	; 0x38
 801a360:	af04      	add	r7, sp, #16
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a366:	4b79      	ldr	r3, [pc, #484]	; (801a54c <icmp_input+0x1f0>)
 801a368:	689b      	ldr	r3, [r3, #8]
 801a36a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36e:	781b      	ldrb	r3, [r3, #0]
 801a370:	f003 030f 	and.w	r3, r3, #15
 801a374:	b2db      	uxtb	r3, r3
 801a376:	009b      	lsls	r3, r3, #2
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a37e:	2b13      	cmp	r3, #19
 801a380:	f240 80cd 	bls.w	801a51e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	895b      	ldrh	r3, [r3, #10]
 801a388:	2b03      	cmp	r3, #3
 801a38a:	f240 80ca 	bls.w	801a522 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	685b      	ldr	r3, [r3, #4]
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a398:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	f000 80b7 	beq.w	801a510 <icmp_input+0x1b4>
 801a3a2:	2b08      	cmp	r3, #8
 801a3a4:	f040 80b7 	bne.w	801a516 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a3a8:	4b69      	ldr	r3, [pc, #420]	; (801a550 <icmp_input+0x1f4>)
 801a3aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a3ac:	4b67      	ldr	r3, [pc, #412]	; (801a54c <icmp_input+0x1f0>)
 801a3ae:	695b      	ldr	r3, [r3, #20]
 801a3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a3b4:	2be0      	cmp	r3, #224	; 0xe0
 801a3b6:	f000 80bb 	beq.w	801a530 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a3ba:	4b64      	ldr	r3, [pc, #400]	; (801a54c <icmp_input+0x1f0>)
 801a3bc:	695b      	ldr	r3, [r3, #20]
 801a3be:	4a63      	ldr	r2, [pc, #396]	; (801a54c <icmp_input+0x1f0>)
 801a3c0:	6812      	ldr	r2, [r2, #0]
 801a3c2:	4611      	mov	r1, r2
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f000 fbed 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	f040 80b1 	bne.w	801a534 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	891b      	ldrh	r3, [r3, #8]
 801a3d6:	2b07      	cmp	r3, #7
 801a3d8:	f240 80a5 	bls.w	801a526 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a3dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a3de:	330e      	adds	r3, #14
 801a3e0:	4619      	mov	r1, r3
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f7f8 f842 	bl	801246c <pbuf_add_header>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d04b      	beq.n	801a486 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	891a      	ldrh	r2, [r3, #8]
 801a3f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a3f4:	4413      	add	r3, r2
 801a3f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	891b      	ldrh	r3, [r3, #8]
 801a3fc:	8b7a      	ldrh	r2, [r7, #26]
 801a3fe:	429a      	cmp	r2, r3
 801a400:	f0c0 809a 	bcc.w	801a538 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a404:	8b7b      	ldrh	r3, [r7, #26]
 801a406:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a40a:	4619      	mov	r1, r3
 801a40c:	200e      	movs	r0, #14
 801a40e:	f7f7 fddf 	bl	8011fd0 <pbuf_alloc>
 801a412:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a414:	697b      	ldr	r3, [r7, #20]
 801a416:	2b00      	cmp	r3, #0
 801a418:	f000 8090 	beq.w	801a53c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a41c:	697b      	ldr	r3, [r7, #20]
 801a41e:	895b      	ldrh	r3, [r3, #10]
 801a420:	461a      	mov	r2, r3
 801a422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a424:	3308      	adds	r3, #8
 801a426:	429a      	cmp	r2, r3
 801a428:	d203      	bcs.n	801a432 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a42a:	6978      	ldr	r0, [r7, #20]
 801a42c:	f7f8 f8b4 	bl	8012598 <pbuf_free>
          goto icmperr;
 801a430:	e085      	b.n	801a53e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a432:	697b      	ldr	r3, [r7, #20]
 801a434:	685b      	ldr	r3, [r3, #4]
 801a436:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a43a:	4618      	mov	r0, r3
 801a43c:	f001 fde7 	bl	801c00e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a442:	4619      	mov	r1, r3
 801a444:	6978      	ldr	r0, [r7, #20]
 801a446:	f7f8 f821 	bl	801248c <pbuf_remove_header>
 801a44a:	4603      	mov	r3, r0
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d009      	beq.n	801a464 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a450:	4b40      	ldr	r3, [pc, #256]	; (801a554 <icmp_input+0x1f8>)
 801a452:	22b6      	movs	r2, #182	; 0xb6
 801a454:	4940      	ldr	r1, [pc, #256]	; (801a558 <icmp_input+0x1fc>)
 801a456:	4841      	ldr	r0, [pc, #260]	; (801a55c <icmp_input+0x200>)
 801a458:	f001 fe64 	bl	801c124 <iprintf>
          pbuf_free(r);
 801a45c:	6978      	ldr	r0, [r7, #20]
 801a45e:	f7f8 f89b 	bl	8012598 <pbuf_free>
          goto icmperr;
 801a462:	e06c      	b.n	801a53e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a464:	6879      	ldr	r1, [r7, #4]
 801a466:	6978      	ldr	r0, [r7, #20]
 801a468:	f7f8 f9ba 	bl	80127e0 <pbuf_copy>
 801a46c:	4603      	mov	r3, r0
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d003      	beq.n	801a47a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a472:	6978      	ldr	r0, [r7, #20]
 801a474:	f7f8 f890 	bl	8012598 <pbuf_free>
          goto icmperr;
 801a478:	e061      	b.n	801a53e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	f7f8 f88c 	bl	8012598 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	607b      	str	r3, [r7, #4]
 801a484:	e00f      	b.n	801a4a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a488:	330e      	adds	r3, #14
 801a48a:	4619      	mov	r1, r3
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f7f7 fffd 	bl	801248c <pbuf_remove_header>
 801a492:	4603      	mov	r3, r0
 801a494:	2b00      	cmp	r3, #0
 801a496:	d006      	beq.n	801a4a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a498:	4b2e      	ldr	r3, [pc, #184]	; (801a554 <icmp_input+0x1f8>)
 801a49a:	22c7      	movs	r2, #199	; 0xc7
 801a49c:	4930      	ldr	r1, [pc, #192]	; (801a560 <icmp_input+0x204>)
 801a49e:	482f      	ldr	r0, [pc, #188]	; (801a55c <icmp_input+0x200>)
 801a4a0:	f001 fe40 	bl	801c124 <iprintf>
          goto icmperr;
 801a4a4:	e04b      	b.n	801a53e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	685b      	ldr	r3, [r3, #4]
 801a4aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a4ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	f7f7 ffdb 	bl	801246c <pbuf_add_header>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d12b      	bne.n	801a514 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a4ca:	4b20      	ldr	r3, [pc, #128]	; (801a54c <icmp_input+0x1f0>)
 801a4cc:	691a      	ldr	r2, [r3, #16]
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a4d8:	693b      	ldr	r3, [r7, #16]
 801a4da:	2200      	movs	r2, #0
 801a4dc:	709a      	strb	r2, [r3, #2]
 801a4de:	2200      	movs	r2, #0
 801a4e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	22ff      	movs	r2, #255	; 0xff
 801a4e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	729a      	strb	r2, [r3, #10]
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	9302      	str	r3, [sp, #8]
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	9301      	str	r3, [sp, #4]
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	9300      	str	r3, [sp, #0]
 801a4fe:	23ff      	movs	r3, #255	; 0xff
 801a500:	2200      	movs	r2, #0
 801a502:	69f9      	ldr	r1, [r7, #28]
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	f000 fa75 	bl	801a9f4 <ip4_output_if>
 801a50a:	4603      	mov	r3, r0
 801a50c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a50e:	e001      	b.n	801a514 <icmp_input+0x1b8>
      break;
 801a510:	bf00      	nop
 801a512:	e000      	b.n	801a516 <icmp_input+0x1ba>
      break;
 801a514:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a516:	6878      	ldr	r0, [r7, #4]
 801a518:	f7f8 f83e 	bl	8012598 <pbuf_free>
  return;
 801a51c:	e013      	b.n	801a546 <icmp_input+0x1ea>
    goto lenerr;
 801a51e:	bf00      	nop
 801a520:	e002      	b.n	801a528 <icmp_input+0x1cc>
    goto lenerr;
 801a522:	bf00      	nop
 801a524:	e000      	b.n	801a528 <icmp_input+0x1cc>
        goto lenerr;
 801a526:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a528:	6878      	ldr	r0, [r7, #4]
 801a52a:	f7f8 f835 	bl	8012598 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a52e:	e00a      	b.n	801a546 <icmp_input+0x1ea>
        goto icmperr;
 801a530:	bf00      	nop
 801a532:	e004      	b.n	801a53e <icmp_input+0x1e2>
        goto icmperr;
 801a534:	bf00      	nop
 801a536:	e002      	b.n	801a53e <icmp_input+0x1e2>
          goto icmperr;
 801a538:	bf00      	nop
 801a53a:	e000      	b.n	801a53e <icmp_input+0x1e2>
          goto icmperr;
 801a53c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f7f8 f82a 	bl	8012598 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a544:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a546:	3728      	adds	r7, #40	; 0x28
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}
 801a54c:	2000fad0 	.word	0x2000fad0
 801a550:	2000fae4 	.word	0x2000fae4
 801a554:	08020ff0 	.word	0x08020ff0
 801a558:	08021028 	.word	0x08021028
 801a55c:	08021060 	.word	0x08021060
 801a560:	08021088 	.word	0x08021088

0801a564 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
 801a56c:	460b      	mov	r3, r1
 801a56e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a570:	78fb      	ldrb	r3, [r7, #3]
 801a572:	461a      	mov	r2, r3
 801a574:	2103      	movs	r1, #3
 801a576:	6878      	ldr	r0, [r7, #4]
 801a578:	f000 f814 	bl	801a5a4 <icmp_send_response>
}
 801a57c:	bf00      	nop
 801a57e:	3708      	adds	r7, #8
 801a580:	46bd      	mov	sp, r7
 801a582:	bd80      	pop	{r7, pc}

0801a584 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b082      	sub	sp, #8
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	460b      	mov	r3, r1
 801a58e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a590:	78fb      	ldrb	r3, [r7, #3]
 801a592:	461a      	mov	r2, r3
 801a594:	210b      	movs	r1, #11
 801a596:	6878      	ldr	r0, [r7, #4]
 801a598:	f000 f804 	bl	801a5a4 <icmp_send_response>
}
 801a59c:	bf00      	nop
 801a59e:	3708      	adds	r7, #8
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b08c      	sub	sp, #48	; 0x30
 801a5a8:	af04      	add	r7, sp, #16
 801a5aa:	6078      	str	r0, [r7, #4]
 801a5ac:	460b      	mov	r3, r1
 801a5ae:	70fb      	strb	r3, [r7, #3]
 801a5b0:	4613      	mov	r3, r2
 801a5b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a5b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a5b8:	2124      	movs	r1, #36	; 0x24
 801a5ba:	2022      	movs	r0, #34	; 0x22
 801a5bc:	f7f7 fd08 	bl	8011fd0 <pbuf_alloc>
 801a5c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a5c2:	69fb      	ldr	r3, [r7, #28]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d04c      	beq.n	801a662 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	895b      	ldrh	r3, [r3, #10]
 801a5cc:	2b23      	cmp	r3, #35	; 0x23
 801a5ce:	d806      	bhi.n	801a5de <icmp_send_response+0x3a>
 801a5d0:	4b26      	ldr	r3, [pc, #152]	; (801a66c <icmp_send_response+0xc8>)
 801a5d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a5d6:	4926      	ldr	r1, [pc, #152]	; (801a670 <icmp_send_response+0xcc>)
 801a5d8:	4826      	ldr	r0, [pc, #152]	; (801a674 <icmp_send_response+0xd0>)
 801a5da:	f001 fda3 	bl	801c124 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a5e4:	69fb      	ldr	r3, [r7, #28]
 801a5e6:	685b      	ldr	r3, [r3, #4]
 801a5e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a5ea:	697b      	ldr	r3, [r7, #20]
 801a5ec:	78fa      	ldrb	r2, [r7, #3]
 801a5ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	78ba      	ldrb	r2, [r7, #2]
 801a5f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a5f6:	697b      	ldr	r3, [r7, #20]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	711a      	strb	r2, [r3, #4]
 801a5fc:	2200      	movs	r2, #0
 801a5fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a600:	697b      	ldr	r3, [r7, #20]
 801a602:	2200      	movs	r2, #0
 801a604:	719a      	strb	r2, [r3, #6]
 801a606:	2200      	movs	r2, #0
 801a608:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a60a:	69fb      	ldr	r3, [r7, #28]
 801a60c:	685b      	ldr	r3, [r3, #4]
 801a60e:	f103 0008 	add.w	r0, r3, #8
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	685b      	ldr	r3, [r3, #4]
 801a616:	221c      	movs	r2, #28
 801a618:	4619      	mov	r1, r3
 801a61a:	f001 fcf8 	bl	801c00e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a61e:	69bb      	ldr	r3, [r7, #24]
 801a620:	68db      	ldr	r3, [r3, #12]
 801a622:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a624:	f107 030c 	add.w	r3, r7, #12
 801a628:	4618      	mov	r0, r3
 801a62a:	f000 f825 	bl	801a678 <ip4_route>
 801a62e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a630:	693b      	ldr	r3, [r7, #16]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d011      	beq.n	801a65a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a636:	697b      	ldr	r3, [r7, #20]
 801a638:	2200      	movs	r2, #0
 801a63a:	709a      	strb	r2, [r3, #2]
 801a63c:	2200      	movs	r2, #0
 801a63e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a640:	f107 020c 	add.w	r2, r7, #12
 801a644:	693b      	ldr	r3, [r7, #16]
 801a646:	9302      	str	r3, [sp, #8]
 801a648:	2301      	movs	r3, #1
 801a64a:	9301      	str	r3, [sp, #4]
 801a64c:	2300      	movs	r3, #0
 801a64e:	9300      	str	r3, [sp, #0]
 801a650:	23ff      	movs	r3, #255	; 0xff
 801a652:	2100      	movs	r1, #0
 801a654:	69f8      	ldr	r0, [r7, #28]
 801a656:	f000 f9cd 	bl	801a9f4 <ip4_output_if>
  }
  pbuf_free(q);
 801a65a:	69f8      	ldr	r0, [r7, #28]
 801a65c:	f7f7 ff9c 	bl	8012598 <pbuf_free>
 801a660:	e000      	b.n	801a664 <icmp_send_response+0xc0>
    return;
 801a662:	bf00      	nop
}
 801a664:	3720      	adds	r7, #32
 801a666:	46bd      	mov	sp, r7
 801a668:	bd80      	pop	{r7, pc}
 801a66a:	bf00      	nop
 801a66c:	08020ff0 	.word	0x08020ff0
 801a670:	080210bc 	.word	0x080210bc
 801a674:	08021060 	.word	0x08021060

0801a678 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a678:	b480      	push	{r7}
 801a67a:	b085      	sub	sp, #20
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a680:	4b33      	ldr	r3, [pc, #204]	; (801a750 <ip4_route+0xd8>)
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	60fb      	str	r3, [r7, #12]
 801a686:	e036      	b.n	801a6f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a68e:	f003 0301 	and.w	r3, r3, #1
 801a692:	b2db      	uxtb	r3, r3
 801a694:	2b00      	cmp	r3, #0
 801a696:	d02b      	beq.n	801a6f0 <ip4_route+0x78>
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a69e:	089b      	lsrs	r3, r3, #2
 801a6a0:	f003 0301 	and.w	r3, r3, #1
 801a6a4:	b2db      	uxtb	r3, r3
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d022      	beq.n	801a6f0 <ip4_route+0x78>
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	3304      	adds	r3, #4
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d01d      	beq.n	801a6f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	681a      	ldr	r2, [r3, #0]
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	3304      	adds	r3, #4
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	405a      	eors	r2, r3
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	3308      	adds	r3, #8
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	4013      	ands	r3, r2
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d101      	bne.n	801a6d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	e038      	b.n	801a742 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a6d6:	f003 0302 	and.w	r3, r3, #2
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d108      	bne.n	801a6f0 <ip4_route+0x78>
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	330c      	adds	r3, #12
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d101      	bne.n	801a6f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	e028      	b.n	801a742 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	60fb      	str	r3, [r7, #12]
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d1c5      	bne.n	801a688 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a6fc:	4b15      	ldr	r3, [pc, #84]	; (801a754 <ip4_route+0xdc>)
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d01a      	beq.n	801a73a <ip4_route+0xc2>
 801a704:	4b13      	ldr	r3, [pc, #76]	; (801a754 <ip4_route+0xdc>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a70c:	f003 0301 	and.w	r3, r3, #1
 801a710:	2b00      	cmp	r3, #0
 801a712:	d012      	beq.n	801a73a <ip4_route+0xc2>
 801a714:	4b0f      	ldr	r3, [pc, #60]	; (801a754 <ip4_route+0xdc>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a71c:	f003 0304 	and.w	r3, r3, #4
 801a720:	2b00      	cmp	r3, #0
 801a722:	d00a      	beq.n	801a73a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a724:	4b0b      	ldr	r3, [pc, #44]	; (801a754 <ip4_route+0xdc>)
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	3304      	adds	r3, #4
 801a72a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d004      	beq.n	801a73a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	b2db      	uxtb	r3, r3
 801a736:	2b7f      	cmp	r3, #127	; 0x7f
 801a738:	d101      	bne.n	801a73e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a73a:	2300      	movs	r3, #0
 801a73c:	e001      	b.n	801a742 <ip4_route+0xca>
  }

  return netif_default;
 801a73e:	4b05      	ldr	r3, [pc, #20]	; (801a754 <ip4_route+0xdc>)
 801a740:	681b      	ldr	r3, [r3, #0]
}
 801a742:	4618      	mov	r0, r3
 801a744:	3714      	adds	r7, #20
 801a746:	46bd      	mov	sp, r7
 801a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74c:	4770      	bx	lr
 801a74e:	bf00      	nop
 801a750:	20014f54 	.word	0x20014f54
 801a754:	20014f58 	.word	0x20014f58

0801a758 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b082      	sub	sp, #8
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a766:	f003 0301 	and.w	r3, r3, #1
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d016      	beq.n	801a79e <ip4_input_accept+0x46>
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	3304      	adds	r3, #4
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d011      	beq.n	801a79e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a77a:	4b0b      	ldr	r3, [pc, #44]	; (801a7a8 <ip4_input_accept+0x50>)
 801a77c:	695a      	ldr	r2, [r3, #20]
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	3304      	adds	r3, #4
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	429a      	cmp	r2, r3
 801a786:	d008      	beq.n	801a79a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a788:	4b07      	ldr	r3, [pc, #28]	; (801a7a8 <ip4_input_accept+0x50>)
 801a78a:	695b      	ldr	r3, [r3, #20]
 801a78c:	6879      	ldr	r1, [r7, #4]
 801a78e:	4618      	mov	r0, r3
 801a790:	f000 fa08 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 801a794:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a796:	2b00      	cmp	r3, #0
 801a798:	d001      	beq.n	801a79e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a79a:	2301      	movs	r3, #1
 801a79c:	e000      	b.n	801a7a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a79e:	2300      	movs	r3, #0
}
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	3708      	adds	r7, #8
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}
 801a7a8:	2000fad0 	.word	0x2000fad0

0801a7ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b086      	sub	sp, #24
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
 801a7b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	685b      	ldr	r3, [r3, #4]
 801a7ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a7bc:	697b      	ldr	r3, [r7, #20]
 801a7be:	781b      	ldrb	r3, [r3, #0]
 801a7c0:	091b      	lsrs	r3, r3, #4
 801a7c2:	b2db      	uxtb	r3, r3
 801a7c4:	2b04      	cmp	r3, #4
 801a7c6:	d004      	beq.n	801a7d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a7c8:	6878      	ldr	r0, [r7, #4]
 801a7ca:	f7f7 fee5 	bl	8012598 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	e107      	b.n	801a9e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a7d2:	697b      	ldr	r3, [r7, #20]
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	f003 030f 	and.w	r3, r3, #15
 801a7da:	b2db      	uxtb	r3, r3
 801a7dc:	009b      	lsls	r3, r3, #2
 801a7de:	b2db      	uxtb	r3, r3
 801a7e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a7e2:	697b      	ldr	r3, [r7, #20]
 801a7e4:	885b      	ldrh	r3, [r3, #2]
 801a7e6:	b29b      	uxth	r3, r3
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f7f6 fb29 	bl	8010e40 <lwip_htons>
 801a7ee:	4603      	mov	r3, r0
 801a7f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	891b      	ldrh	r3, [r3, #8]
 801a7f6:	89ba      	ldrh	r2, [r7, #12]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d204      	bcs.n	801a806 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801a7fc:	89bb      	ldrh	r3, [r7, #12]
 801a7fe:	4619      	mov	r1, r3
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	f7f7 fd43 	bl	801228c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	895b      	ldrh	r3, [r3, #10]
 801a80a:	89fa      	ldrh	r2, [r7, #14]
 801a80c:	429a      	cmp	r2, r3
 801a80e:	d807      	bhi.n	801a820 <ip4_input+0x74>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	891b      	ldrh	r3, [r3, #8]
 801a814:	89ba      	ldrh	r2, [r7, #12]
 801a816:	429a      	cmp	r2, r3
 801a818:	d802      	bhi.n	801a820 <ip4_input+0x74>
 801a81a:	89fb      	ldrh	r3, [r7, #14]
 801a81c:	2b13      	cmp	r3, #19
 801a81e:	d804      	bhi.n	801a82a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f7f7 feb9 	bl	8012598 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a826:	2300      	movs	r3, #0
 801a828:	e0db      	b.n	801a9e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a82a:	697b      	ldr	r3, [r7, #20]
 801a82c:	691b      	ldr	r3, [r3, #16]
 801a82e:	4a6f      	ldr	r2, [pc, #444]	; (801a9ec <ip4_input+0x240>)
 801a830:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	68db      	ldr	r3, [r3, #12]
 801a836:	4a6d      	ldr	r2, [pc, #436]	; (801a9ec <ip4_input+0x240>)
 801a838:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a83a:	4b6c      	ldr	r3, [pc, #432]	; (801a9ec <ip4_input+0x240>)
 801a83c:	695b      	ldr	r3, [r3, #20]
 801a83e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a842:	2be0      	cmp	r3, #224	; 0xe0
 801a844:	d112      	bne.n	801a86c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a846:	683b      	ldr	r3, [r7, #0]
 801a848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a84c:	f003 0301 	and.w	r3, r3, #1
 801a850:	b2db      	uxtb	r3, r3
 801a852:	2b00      	cmp	r3, #0
 801a854:	d007      	beq.n	801a866 <ip4_input+0xba>
 801a856:	683b      	ldr	r3, [r7, #0]
 801a858:	3304      	adds	r3, #4
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d002      	beq.n	801a866 <ip4_input+0xba>
      netif = inp;
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	613b      	str	r3, [r7, #16]
 801a864:	e02a      	b.n	801a8bc <ip4_input+0x110>
    } else {
      netif = NULL;
 801a866:	2300      	movs	r3, #0
 801a868:	613b      	str	r3, [r7, #16]
 801a86a:	e027      	b.n	801a8bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a86c:	6838      	ldr	r0, [r7, #0]
 801a86e:	f7ff ff73 	bl	801a758 <ip4_input_accept>
 801a872:	4603      	mov	r3, r0
 801a874:	2b00      	cmp	r3, #0
 801a876:	d002      	beq.n	801a87e <ip4_input+0xd2>
      netif = inp;
 801a878:	683b      	ldr	r3, [r7, #0]
 801a87a:	613b      	str	r3, [r7, #16]
 801a87c:	e01e      	b.n	801a8bc <ip4_input+0x110>
    } else {
      netif = NULL;
 801a87e:	2300      	movs	r3, #0
 801a880:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a882:	4b5a      	ldr	r3, [pc, #360]	; (801a9ec <ip4_input+0x240>)
 801a884:	695b      	ldr	r3, [r3, #20]
 801a886:	b2db      	uxtb	r3, r3
 801a888:	2b7f      	cmp	r3, #127	; 0x7f
 801a88a:	d017      	beq.n	801a8bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a88c:	4b58      	ldr	r3, [pc, #352]	; (801a9f0 <ip4_input+0x244>)
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	613b      	str	r3, [r7, #16]
 801a892:	e00e      	b.n	801a8b2 <ip4_input+0x106>
          if (netif == inp) {
 801a894:	693a      	ldr	r2, [r7, #16]
 801a896:	683b      	ldr	r3, [r7, #0]
 801a898:	429a      	cmp	r2, r3
 801a89a:	d006      	beq.n	801a8aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a89c:	6938      	ldr	r0, [r7, #16]
 801a89e:	f7ff ff5b 	bl	801a758 <ip4_input_accept>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d108      	bne.n	801a8ba <ip4_input+0x10e>
 801a8a8:	e000      	b.n	801a8ac <ip4_input+0x100>
            continue;
 801a8aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	613b      	str	r3, [r7, #16]
 801a8b2:	693b      	ldr	r3, [r7, #16]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d1ed      	bne.n	801a894 <ip4_input+0xe8>
 801a8b8:	e000      	b.n	801a8bc <ip4_input+0x110>
            break;
 801a8ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a8bc:	4b4b      	ldr	r3, [pc, #300]	; (801a9ec <ip4_input+0x240>)
 801a8be:	691b      	ldr	r3, [r3, #16]
 801a8c0:	6839      	ldr	r1, [r7, #0]
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f000 f96e 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d105      	bne.n	801a8da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a8ce:	4b47      	ldr	r3, [pc, #284]	; (801a9ec <ip4_input+0x240>)
 801a8d0:	691b      	ldr	r3, [r3, #16]
 801a8d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a8d6:	2be0      	cmp	r3, #224	; 0xe0
 801a8d8:	d104      	bne.n	801a8e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a8da:	6878      	ldr	r0, [r7, #4]
 801a8dc:	f7f7 fe5c 	bl	8012598 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	e07e      	b.n	801a9e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a8e4:	693b      	ldr	r3, [r7, #16]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d104      	bne.n	801a8f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a8ea:	6878      	ldr	r0, [r7, #4]
 801a8ec:	f7f7 fe54 	bl	8012598 <pbuf_free>
    return ERR_OK;
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	e076      	b.n	801a9e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	88db      	ldrh	r3, [r3, #6]
 801a8f8:	b29b      	uxth	r3, r3
 801a8fa:	461a      	mov	r2, r3
 801a8fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a900:	4013      	ands	r3, r2
 801a902:	2b00      	cmp	r3, #0
 801a904:	d00b      	beq.n	801a91e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a906:	6878      	ldr	r0, [r7, #4]
 801a908:	f000 fc92 	bl	801b230 <ip4_reass>
 801a90c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d101      	bne.n	801a918 <ip4_input+0x16c>
      return ERR_OK;
 801a914:	2300      	movs	r3, #0
 801a916:	e064      	b.n	801a9e2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	685b      	ldr	r3, [r3, #4]
 801a91c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a91e:	4a33      	ldr	r2, [pc, #204]	; (801a9ec <ip4_input+0x240>)
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a924:	4a31      	ldr	r2, [pc, #196]	; (801a9ec <ip4_input+0x240>)
 801a926:	683b      	ldr	r3, [r7, #0]
 801a928:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a92a:	4a30      	ldr	r2, [pc, #192]	; (801a9ec <ip4_input+0x240>)
 801a92c:	697b      	ldr	r3, [r7, #20]
 801a92e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a930:	697b      	ldr	r3, [r7, #20]
 801a932:	781b      	ldrb	r3, [r3, #0]
 801a934:	f003 030f 	and.w	r3, r3, #15
 801a938:	b2db      	uxtb	r3, r3
 801a93a:	009b      	lsls	r3, r3, #2
 801a93c:	b2db      	uxtb	r3, r3
 801a93e:	b29a      	uxth	r2, r3
 801a940:	4b2a      	ldr	r3, [pc, #168]	; (801a9ec <ip4_input+0x240>)
 801a942:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a944:	89fb      	ldrh	r3, [r7, #14]
 801a946:	4619      	mov	r1, r3
 801a948:	6878      	ldr	r0, [r7, #4]
 801a94a:	f7f7 fd9f 	bl	801248c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a94e:	697b      	ldr	r3, [r7, #20]
 801a950:	7a5b      	ldrb	r3, [r3, #9]
 801a952:	2b11      	cmp	r3, #17
 801a954:	d006      	beq.n	801a964 <ip4_input+0x1b8>
 801a956:	2b11      	cmp	r3, #17
 801a958:	dc13      	bgt.n	801a982 <ip4_input+0x1d6>
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	d00c      	beq.n	801a978 <ip4_input+0x1cc>
 801a95e:	2b06      	cmp	r3, #6
 801a960:	d005      	beq.n	801a96e <ip4_input+0x1c2>
 801a962:	e00e      	b.n	801a982 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a964:	6839      	ldr	r1, [r7, #0]
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	f7fe fb5a 	bl	8019020 <udp_input>
        break;
 801a96c:	e026      	b.n	801a9bc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a96e:	6839      	ldr	r1, [r7, #0]
 801a970:	6878      	ldr	r0, [r7, #4]
 801a972:	f7f9 ff17 	bl	80147a4 <tcp_input>
        break;
 801a976:	e021      	b.n	801a9bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a978:	6839      	ldr	r1, [r7, #0]
 801a97a:	6878      	ldr	r0, [r7, #4]
 801a97c:	f7ff fcee 	bl	801a35c <icmp_input>
        break;
 801a980:	e01c      	b.n	801a9bc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a982:	4b1a      	ldr	r3, [pc, #104]	; (801a9ec <ip4_input+0x240>)
 801a984:	695b      	ldr	r3, [r3, #20]
 801a986:	6939      	ldr	r1, [r7, #16]
 801a988:	4618      	mov	r0, r3
 801a98a:	f000 f90b 	bl	801aba4 <ip4_addr_isbroadcast_u32>
 801a98e:	4603      	mov	r3, r0
 801a990:	2b00      	cmp	r3, #0
 801a992:	d10f      	bne.n	801a9b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a994:	4b15      	ldr	r3, [pc, #84]	; (801a9ec <ip4_input+0x240>)
 801a996:	695b      	ldr	r3, [r3, #20]
 801a998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a99c:	2be0      	cmp	r3, #224	; 0xe0
 801a99e:	d009      	beq.n	801a9b4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a9a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a9a4:	4619      	mov	r1, r3
 801a9a6:	6878      	ldr	r0, [r7, #4]
 801a9a8:	f7f7 fde3 	bl	8012572 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a9ac:	2102      	movs	r1, #2
 801a9ae:	6878      	ldr	r0, [r7, #4]
 801a9b0:	f7ff fdd8 	bl	801a564 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a9b4:	6878      	ldr	r0, [r7, #4]
 801a9b6:	f7f7 fdef 	bl	8012598 <pbuf_free>
        break;
 801a9ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a9bc:	4b0b      	ldr	r3, [pc, #44]	; (801a9ec <ip4_input+0x240>)
 801a9be:	2200      	movs	r2, #0
 801a9c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a9c2:	4b0a      	ldr	r3, [pc, #40]	; (801a9ec <ip4_input+0x240>)
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a9c8:	4b08      	ldr	r3, [pc, #32]	; (801a9ec <ip4_input+0x240>)
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a9ce:	4b07      	ldr	r3, [pc, #28]	; (801a9ec <ip4_input+0x240>)
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a9d4:	4b05      	ldr	r3, [pc, #20]	; (801a9ec <ip4_input+0x240>)
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a9da:	4b04      	ldr	r3, [pc, #16]	; (801a9ec <ip4_input+0x240>)
 801a9dc:	2200      	movs	r2, #0
 801a9de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a9e0:	2300      	movs	r3, #0
}
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	3718      	adds	r7, #24
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	bd80      	pop	{r7, pc}
 801a9ea:	bf00      	nop
 801a9ec:	2000fad0 	.word	0x2000fad0
 801a9f0:	20014f54 	.word	0x20014f54

0801a9f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b08a      	sub	sp, #40	; 0x28
 801a9f8:	af04      	add	r7, sp, #16
 801a9fa:	60f8      	str	r0, [r7, #12]
 801a9fc:	60b9      	str	r1, [r7, #8]
 801a9fe:	607a      	str	r2, [r7, #4]
 801aa00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801aa02:	68bb      	ldr	r3, [r7, #8]
 801aa04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d009      	beq.n	801aa20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d003      	beq.n	801aa1a <ip4_output_if+0x26>
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d102      	bne.n	801aa20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801aa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa1c:	3304      	adds	r3, #4
 801aa1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801aa20:	78fa      	ldrb	r2, [r7, #3]
 801aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa24:	9302      	str	r3, [sp, #8]
 801aa26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa2a:	9301      	str	r3, [sp, #4]
 801aa2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801aa30:	9300      	str	r3, [sp, #0]
 801aa32:	4613      	mov	r3, r2
 801aa34:	687a      	ldr	r2, [r7, #4]
 801aa36:	6979      	ldr	r1, [r7, #20]
 801aa38:	68f8      	ldr	r0, [r7, #12]
 801aa3a:	f000 f805 	bl	801aa48 <ip4_output_if_src>
 801aa3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801aa40:	4618      	mov	r0, r3
 801aa42:	3718      	adds	r7, #24
 801aa44:	46bd      	mov	sp, r7
 801aa46:	bd80      	pop	{r7, pc}

0801aa48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b088      	sub	sp, #32
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	60f8      	str	r0, [r7, #12]
 801aa50:	60b9      	str	r1, [r7, #8]
 801aa52:	607a      	str	r2, [r7, #4]
 801aa54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	7b9b      	ldrb	r3, [r3, #14]
 801aa5a:	2b01      	cmp	r3, #1
 801aa5c:	d006      	beq.n	801aa6c <ip4_output_if_src+0x24>
 801aa5e:	4b4b      	ldr	r3, [pc, #300]	; (801ab8c <ip4_output_if_src+0x144>)
 801aa60:	f44f 7255 	mov.w	r2, #852	; 0x354
 801aa64:	494a      	ldr	r1, [pc, #296]	; (801ab90 <ip4_output_if_src+0x148>)
 801aa66:	484b      	ldr	r0, [pc, #300]	; (801ab94 <ip4_output_if_src+0x14c>)
 801aa68:	f001 fb5c 	bl	801c124 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d060      	beq.n	801ab34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801aa72:	2314      	movs	r3, #20
 801aa74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801aa76:	2114      	movs	r1, #20
 801aa78:	68f8      	ldr	r0, [r7, #12]
 801aa7a:	f7f7 fcf7 	bl	801246c <pbuf_add_header>
 801aa7e:	4603      	mov	r3, r0
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d002      	beq.n	801aa8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801aa84:	f06f 0301 	mvn.w	r3, #1
 801aa88:	e07c      	b.n	801ab84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	895b      	ldrh	r3, [r3, #10]
 801aa94:	2b13      	cmp	r3, #19
 801aa96:	d806      	bhi.n	801aaa6 <ip4_output_if_src+0x5e>
 801aa98:	4b3c      	ldr	r3, [pc, #240]	; (801ab8c <ip4_output_if_src+0x144>)
 801aa9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801aa9e:	493e      	ldr	r1, [pc, #248]	; (801ab98 <ip4_output_if_src+0x150>)
 801aaa0:	483c      	ldr	r0, [pc, #240]	; (801ab94 <ip4_output_if_src+0x14c>)
 801aaa2:	f001 fb3f 	bl	801c124 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801aaa6:	69fb      	ldr	r3, [r7, #28]
 801aaa8:	78fa      	ldrb	r2, [r7, #3]
 801aaaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801aaac:	69fb      	ldr	r3, [r7, #28]
 801aaae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801aab2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681a      	ldr	r2, [r3, #0]
 801aab8:	69fb      	ldr	r3, [r7, #28]
 801aaba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801aabc:	8b7b      	ldrh	r3, [r7, #26]
 801aabe:	089b      	lsrs	r3, r3, #2
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	b2db      	uxtb	r3, r3
 801aac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aac8:	b2da      	uxtb	r2, r3
 801aaca:	69fb      	ldr	r3, [r7, #28]
 801aacc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801aace:	69fb      	ldr	r3, [r7, #28]
 801aad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801aad4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	891b      	ldrh	r3, [r3, #8]
 801aada:	4618      	mov	r0, r3
 801aadc:	f7f6 f9b0 	bl	8010e40 <lwip_htons>
 801aae0:	4603      	mov	r3, r0
 801aae2:	461a      	mov	r2, r3
 801aae4:	69fb      	ldr	r3, [r7, #28]
 801aae6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801aae8:	69fb      	ldr	r3, [r7, #28]
 801aaea:	2200      	movs	r2, #0
 801aaec:	719a      	strb	r2, [r3, #6]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801aaf2:	4b2a      	ldr	r3, [pc, #168]	; (801ab9c <ip4_output_if_src+0x154>)
 801aaf4:	881b      	ldrh	r3, [r3, #0]
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	f7f6 f9a2 	bl	8010e40 <lwip_htons>
 801aafc:	4603      	mov	r3, r0
 801aafe:	461a      	mov	r2, r3
 801ab00:	69fb      	ldr	r3, [r7, #28]
 801ab02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ab04:	4b25      	ldr	r3, [pc, #148]	; (801ab9c <ip4_output_if_src+0x154>)
 801ab06:	881b      	ldrh	r3, [r3, #0]
 801ab08:	3301      	adds	r3, #1
 801ab0a:	b29a      	uxth	r2, r3
 801ab0c:	4b23      	ldr	r3, [pc, #140]	; (801ab9c <ip4_output_if_src+0x154>)
 801ab0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d104      	bne.n	801ab20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ab16:	4b22      	ldr	r3, [pc, #136]	; (801aba0 <ip4_output_if_src+0x158>)
 801ab18:	681a      	ldr	r2, [r3, #0]
 801ab1a:	69fb      	ldr	r3, [r7, #28]
 801ab1c:	60da      	str	r2, [r3, #12]
 801ab1e:	e003      	b.n	801ab28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	681a      	ldr	r2, [r3, #0]
 801ab24:	69fb      	ldr	r3, [r7, #28]
 801ab26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ab28:	69fb      	ldr	r3, [r7, #28]
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	729a      	strb	r2, [r3, #10]
 801ab2e:	2200      	movs	r2, #0
 801ab30:	72da      	strb	r2, [r3, #11]
 801ab32:	e00f      	b.n	801ab54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	895b      	ldrh	r3, [r3, #10]
 801ab38:	2b13      	cmp	r3, #19
 801ab3a:	d802      	bhi.n	801ab42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ab3c:	f06f 0301 	mvn.w	r3, #1
 801ab40:	e020      	b.n	801ab84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	685b      	ldr	r3, [r3, #4]
 801ab46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ab48:	69fb      	ldr	r3, [r7, #28]
 801ab4a:	691b      	ldr	r3, [r3, #16]
 801ab4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ab4e:	f107 0314 	add.w	r3, r7, #20
 801ab52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d00c      	beq.n	801ab76 <ip4_output_if_src+0x12e>
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	891a      	ldrh	r2, [r3, #8]
 801ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ab64:	429a      	cmp	r2, r3
 801ab66:	d906      	bls.n	801ab76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ab68:	687a      	ldr	r2, [r7, #4]
 801ab6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ab6c:	68f8      	ldr	r0, [r7, #12]
 801ab6e:	f000 fd4d 	bl	801b60c <ip4_frag>
 801ab72:	4603      	mov	r3, r0
 801ab74:	e006      	b.n	801ab84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab78:	695b      	ldr	r3, [r3, #20]
 801ab7a:	687a      	ldr	r2, [r7, #4]
 801ab7c:	68f9      	ldr	r1, [r7, #12]
 801ab7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab80:	4798      	blx	r3
 801ab82:	4603      	mov	r3, r0
}
 801ab84:	4618      	mov	r0, r3
 801ab86:	3720      	adds	r7, #32
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}
 801ab8c:	080210e8 	.word	0x080210e8
 801ab90:	0802111c 	.word	0x0802111c
 801ab94:	08021128 	.word	0x08021128
 801ab98:	08021150 	.word	0x08021150
 801ab9c:	200099fa 	.word	0x200099fa
 801aba0:	08024538 	.word	0x08024538

0801aba4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801aba4:	b480      	push	{r7}
 801aba6:	b085      	sub	sp, #20
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
 801abac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801abb8:	d002      	beq.n	801abc0 <ip4_addr_isbroadcast_u32+0x1c>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d101      	bne.n	801abc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801abc0:	2301      	movs	r3, #1
 801abc2:	e02a      	b.n	801ac1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abca:	f003 0302 	and.w	r3, r3, #2
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d101      	bne.n	801abd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801abd2:	2300      	movs	r3, #0
 801abd4:	e021      	b.n	801ac1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	3304      	adds	r3, #4
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	687a      	ldr	r2, [r7, #4]
 801abde:	429a      	cmp	r2, r3
 801abe0:	d101      	bne.n	801abe6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801abe2:	2300      	movs	r3, #0
 801abe4:	e019      	b.n	801ac1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801abe6:	68fa      	ldr	r2, [r7, #12]
 801abe8:	683b      	ldr	r3, [r7, #0]
 801abea:	3304      	adds	r3, #4
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	405a      	eors	r2, r3
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	3308      	adds	r3, #8
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	4013      	ands	r3, r2
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d10d      	bne.n	801ac18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	3308      	adds	r3, #8
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	43da      	mvns	r2, r3
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ac08:	683b      	ldr	r3, [r7, #0]
 801ac0a:	3308      	adds	r3, #8
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d101      	bne.n	801ac18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ac14:	2301      	movs	r3, #1
 801ac16:	e000      	b.n	801ac1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ac18:	2300      	movs	r3, #0
  }
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	3714      	adds	r7, #20
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac24:	4770      	bx	lr
	...

0801ac28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b084      	sub	sp, #16
 801ac2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ac32:	4b12      	ldr	r3, [pc, #72]	; (801ac7c <ip_reass_tmr+0x54>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ac38:	e018      	b.n	801ac6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	7fdb      	ldrb	r3, [r3, #31]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d00b      	beq.n	801ac5a <ip_reass_tmr+0x32>
      r->timer--;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	7fdb      	ldrb	r3, [r3, #31]
 801ac46:	3b01      	subs	r3, #1
 801ac48:	b2da      	uxtb	r2, r3
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	60fb      	str	r3, [r7, #12]
 801ac58:	e008      	b.n	801ac6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ac64:	68b9      	ldr	r1, [r7, #8]
 801ac66:	6878      	ldr	r0, [r7, #4]
 801ac68:	f000 f80a 	bl	801ac80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d1e3      	bne.n	801ac3a <ip_reass_tmr+0x12>
    }
  }
}
 801ac72:	bf00      	nop
 801ac74:	bf00      	nop
 801ac76:	3710      	adds	r7, #16
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}
 801ac7c:	200099fc 	.word	0x200099fc

0801ac80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b088      	sub	sp, #32
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
 801ac88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ac8e:	683a      	ldr	r2, [r7, #0]
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	429a      	cmp	r2, r3
 801ac94:	d105      	bne.n	801aca2 <ip_reass_free_complete_datagram+0x22>
 801ac96:	4b45      	ldr	r3, [pc, #276]	; (801adac <ip_reass_free_complete_datagram+0x12c>)
 801ac98:	22ab      	movs	r2, #171	; 0xab
 801ac9a:	4945      	ldr	r1, [pc, #276]	; (801adb0 <ip_reass_free_complete_datagram+0x130>)
 801ac9c:	4845      	ldr	r0, [pc, #276]	; (801adb4 <ip_reass_free_complete_datagram+0x134>)
 801ac9e:	f001 fa41 	bl	801c124 <iprintf>
  if (prev != NULL) {
 801aca2:	683b      	ldr	r3, [r7, #0]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d00a      	beq.n	801acbe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	687a      	ldr	r2, [r7, #4]
 801acae:	429a      	cmp	r2, r3
 801acb0:	d005      	beq.n	801acbe <ip_reass_free_complete_datagram+0x3e>
 801acb2:	4b3e      	ldr	r3, [pc, #248]	; (801adac <ip_reass_free_complete_datagram+0x12c>)
 801acb4:	22ad      	movs	r2, #173	; 0xad
 801acb6:	4940      	ldr	r1, [pc, #256]	; (801adb8 <ip_reass_free_complete_datagram+0x138>)
 801acb8:	483e      	ldr	r0, [pc, #248]	; (801adb4 <ip_reass_free_complete_datagram+0x134>)
 801acba:	f001 fa33 	bl	801c124 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	685b      	ldr	r3, [r3, #4]
 801acc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	889b      	ldrh	r3, [r3, #4]
 801acca:	b29b      	uxth	r3, r3
 801accc:	2b00      	cmp	r3, #0
 801acce:	d12a      	bne.n	801ad26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	685b      	ldr	r3, [r3, #4]
 801acd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801acd6:	697b      	ldr	r3, [r7, #20]
 801acd8:	681a      	ldr	r2, [r3, #0]
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801acde:	69bb      	ldr	r3, [r7, #24]
 801ace0:	6858      	ldr	r0, [r3, #4]
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	3308      	adds	r3, #8
 801ace6:	2214      	movs	r2, #20
 801ace8:	4619      	mov	r1, r3
 801acea:	f001 f990 	bl	801c00e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801acee:	2101      	movs	r1, #1
 801acf0:	69b8      	ldr	r0, [r7, #24]
 801acf2:	f7ff fc47 	bl	801a584 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801acf6:	69b8      	ldr	r0, [r7, #24]
 801acf8:	f7f7 fcdc 	bl	80126b4 <pbuf_clen>
 801acfc:	4603      	mov	r3, r0
 801acfe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ad00:	8bfa      	ldrh	r2, [r7, #30]
 801ad02:	8a7b      	ldrh	r3, [r7, #18]
 801ad04:	4413      	add	r3, r2
 801ad06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad0a:	db05      	blt.n	801ad18 <ip_reass_free_complete_datagram+0x98>
 801ad0c:	4b27      	ldr	r3, [pc, #156]	; (801adac <ip_reass_free_complete_datagram+0x12c>)
 801ad0e:	22bc      	movs	r2, #188	; 0xbc
 801ad10:	492a      	ldr	r1, [pc, #168]	; (801adbc <ip_reass_free_complete_datagram+0x13c>)
 801ad12:	4828      	ldr	r0, [pc, #160]	; (801adb4 <ip_reass_free_complete_datagram+0x134>)
 801ad14:	f001 fa06 	bl	801c124 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ad18:	8bfa      	ldrh	r2, [r7, #30]
 801ad1a:	8a7b      	ldrh	r3, [r7, #18]
 801ad1c:	4413      	add	r3, r2
 801ad1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ad20:	69b8      	ldr	r0, [r7, #24]
 801ad22:	f7f7 fc39 	bl	8012598 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	685b      	ldr	r3, [r3, #4]
 801ad2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ad2c:	e01f      	b.n	801ad6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ad2e:	69bb      	ldr	r3, [r7, #24]
 801ad30:	685b      	ldr	r3, [r3, #4]
 801ad32:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ad34:	69bb      	ldr	r3, [r7, #24]
 801ad36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ad38:	697b      	ldr	r3, [r7, #20]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ad3e:	68f8      	ldr	r0, [r7, #12]
 801ad40:	f7f7 fcb8 	bl	80126b4 <pbuf_clen>
 801ad44:	4603      	mov	r3, r0
 801ad46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ad48:	8bfa      	ldrh	r2, [r7, #30]
 801ad4a:	8a7b      	ldrh	r3, [r7, #18]
 801ad4c:	4413      	add	r3, r2
 801ad4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad52:	db05      	blt.n	801ad60 <ip_reass_free_complete_datagram+0xe0>
 801ad54:	4b15      	ldr	r3, [pc, #84]	; (801adac <ip_reass_free_complete_datagram+0x12c>)
 801ad56:	22cc      	movs	r2, #204	; 0xcc
 801ad58:	4918      	ldr	r1, [pc, #96]	; (801adbc <ip_reass_free_complete_datagram+0x13c>)
 801ad5a:	4816      	ldr	r0, [pc, #88]	; (801adb4 <ip_reass_free_complete_datagram+0x134>)
 801ad5c:	f001 f9e2 	bl	801c124 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ad60:	8bfa      	ldrh	r2, [r7, #30]
 801ad62:	8a7b      	ldrh	r3, [r7, #18]
 801ad64:	4413      	add	r3, r2
 801ad66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ad68:	68f8      	ldr	r0, [r7, #12]
 801ad6a:	f7f7 fc15 	bl	8012598 <pbuf_free>
  while (p != NULL) {
 801ad6e:	69bb      	ldr	r3, [r7, #24]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d1dc      	bne.n	801ad2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ad74:	6839      	ldr	r1, [r7, #0]
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f000 f8c2 	bl	801af00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ad7c:	4b10      	ldr	r3, [pc, #64]	; (801adc0 <ip_reass_free_complete_datagram+0x140>)
 801ad7e:	881b      	ldrh	r3, [r3, #0]
 801ad80:	8bfa      	ldrh	r2, [r7, #30]
 801ad82:	429a      	cmp	r2, r3
 801ad84:	d905      	bls.n	801ad92 <ip_reass_free_complete_datagram+0x112>
 801ad86:	4b09      	ldr	r3, [pc, #36]	; (801adac <ip_reass_free_complete_datagram+0x12c>)
 801ad88:	22d2      	movs	r2, #210	; 0xd2
 801ad8a:	490e      	ldr	r1, [pc, #56]	; (801adc4 <ip_reass_free_complete_datagram+0x144>)
 801ad8c:	4809      	ldr	r0, [pc, #36]	; (801adb4 <ip_reass_free_complete_datagram+0x134>)
 801ad8e:	f001 f9c9 	bl	801c124 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ad92:	4b0b      	ldr	r3, [pc, #44]	; (801adc0 <ip_reass_free_complete_datagram+0x140>)
 801ad94:	881a      	ldrh	r2, [r3, #0]
 801ad96:	8bfb      	ldrh	r3, [r7, #30]
 801ad98:	1ad3      	subs	r3, r2, r3
 801ad9a:	b29a      	uxth	r2, r3
 801ad9c:	4b08      	ldr	r3, [pc, #32]	; (801adc0 <ip_reass_free_complete_datagram+0x140>)
 801ad9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ada0:	8bfb      	ldrh	r3, [r7, #30]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	3720      	adds	r7, #32
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}
 801adaa:	bf00      	nop
 801adac:	08021180 	.word	0x08021180
 801adb0:	080211bc 	.word	0x080211bc
 801adb4:	080211c8 	.word	0x080211c8
 801adb8:	080211f0 	.word	0x080211f0
 801adbc:	08021204 	.word	0x08021204
 801adc0:	20009a00 	.word	0x20009a00
 801adc4:	08021224 	.word	0x08021224

0801adc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b08a      	sub	sp, #40	; 0x28
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
 801add0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801add2:	2300      	movs	r3, #0
 801add4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801add6:	2300      	movs	r3, #0
 801add8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801adda:	2300      	movs	r3, #0
 801addc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801adde:	2300      	movs	r3, #0
 801ade0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ade2:	2300      	movs	r3, #0
 801ade4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ade6:	4b28      	ldr	r3, [pc, #160]	; (801ae88 <ip_reass_remove_oldest_datagram+0xc0>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801adec:	e030      	b.n	801ae50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adf0:	695a      	ldr	r2, [r3, #20]
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	68db      	ldr	r3, [r3, #12]
 801adf6:	429a      	cmp	r2, r3
 801adf8:	d10c      	bne.n	801ae14 <ip_reass_remove_oldest_datagram+0x4c>
 801adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adfc:	699a      	ldr	r2, [r3, #24]
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	691b      	ldr	r3, [r3, #16]
 801ae02:	429a      	cmp	r2, r3
 801ae04:	d106      	bne.n	801ae14 <ip_reass_remove_oldest_datagram+0x4c>
 801ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae08:	899a      	ldrh	r2, [r3, #12]
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	889b      	ldrh	r3, [r3, #4]
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	429a      	cmp	r2, r3
 801ae12:	d014      	beq.n	801ae3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	3301      	adds	r3, #1
 801ae18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ae1a:	6a3b      	ldr	r3, [r7, #32]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d104      	bne.n	801ae2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ae24:	69fb      	ldr	r3, [r7, #28]
 801ae26:	61bb      	str	r3, [r7, #24]
 801ae28:	e009      	b.n	801ae3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae2c:	7fda      	ldrb	r2, [r3, #31]
 801ae2e:	6a3b      	ldr	r3, [r7, #32]
 801ae30:	7fdb      	ldrb	r3, [r3, #31]
 801ae32:	429a      	cmp	r2, r3
 801ae34:	d803      	bhi.n	801ae3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ae3a:	69fb      	ldr	r3, [r7, #28]
 801ae3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d001      	beq.n	801ae4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d1cb      	bne.n	801adee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ae56:	6a3b      	ldr	r3, [r7, #32]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d008      	beq.n	801ae6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ae5c:	69b9      	ldr	r1, [r7, #24]
 801ae5e:	6a38      	ldr	r0, [r7, #32]
 801ae60:	f7ff ff0e 	bl	801ac80 <ip_reass_free_complete_datagram>
 801ae64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ae66:	697a      	ldr	r2, [r7, #20]
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	4413      	add	r3, r2
 801ae6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ae6e:	697a      	ldr	r2, [r7, #20]
 801ae70:	683b      	ldr	r3, [r7, #0]
 801ae72:	429a      	cmp	r2, r3
 801ae74:	da02      	bge.n	801ae7c <ip_reass_remove_oldest_datagram+0xb4>
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	2b01      	cmp	r3, #1
 801ae7a:	dcac      	bgt.n	801add6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ae7c:	697b      	ldr	r3, [r7, #20]
}
 801ae7e:	4618      	mov	r0, r3
 801ae80:	3728      	adds	r7, #40	; 0x28
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
 801ae86:	bf00      	nop
 801ae88:	200099fc 	.word	0x200099fc

0801ae8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b084      	sub	sp, #16
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
 801ae94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ae96:	2004      	movs	r0, #4
 801ae98:	f7f6 fc88 	bl	80117ac <memp_malloc>
 801ae9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d110      	bne.n	801aec6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801aea4:	6839      	ldr	r1, [r7, #0]
 801aea6:	6878      	ldr	r0, [r7, #4]
 801aea8:	f7ff ff8e 	bl	801adc8 <ip_reass_remove_oldest_datagram>
 801aeac:	4602      	mov	r2, r0
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	4293      	cmp	r3, r2
 801aeb2:	dc03      	bgt.n	801aebc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801aeb4:	2004      	movs	r0, #4
 801aeb6:	f7f6 fc79 	bl	80117ac <memp_malloc>
 801aeba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d101      	bne.n	801aec6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801aec2:	2300      	movs	r3, #0
 801aec4:	e016      	b.n	801aef4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801aec6:	2220      	movs	r2, #32
 801aec8:	2100      	movs	r1, #0
 801aeca:	68f8      	ldr	r0, [r7, #12]
 801aecc:	f001 f8c7 	bl	801c05e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	220f      	movs	r2, #15
 801aed4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801aed6:	4b09      	ldr	r3, [pc, #36]	; (801aefc <ip_reass_enqueue_new_datagram+0x70>)
 801aed8:	681a      	ldr	r2, [r3, #0]
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801aede:	4a07      	ldr	r2, [pc, #28]	; (801aefc <ip_reass_enqueue_new_datagram+0x70>)
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	3308      	adds	r3, #8
 801aee8:	2214      	movs	r2, #20
 801aeea:	6879      	ldr	r1, [r7, #4]
 801aeec:	4618      	mov	r0, r3
 801aeee:	f001 f88e 	bl	801c00e <memcpy>
  return ipr;
 801aef2:	68fb      	ldr	r3, [r7, #12]
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	3710      	adds	r7, #16
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}
 801aefc:	200099fc 	.word	0x200099fc

0801af00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b082      	sub	sp, #8
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
 801af08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801af0a:	4b10      	ldr	r3, [pc, #64]	; (801af4c <ip_reass_dequeue_datagram+0x4c>)
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	687a      	ldr	r2, [r7, #4]
 801af10:	429a      	cmp	r2, r3
 801af12:	d104      	bne.n	801af1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	4a0c      	ldr	r2, [pc, #48]	; (801af4c <ip_reass_dequeue_datagram+0x4c>)
 801af1a:	6013      	str	r3, [r2, #0]
 801af1c:	e00d      	b.n	801af3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801af1e:	683b      	ldr	r3, [r7, #0]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d106      	bne.n	801af32 <ip_reass_dequeue_datagram+0x32>
 801af24:	4b0a      	ldr	r3, [pc, #40]	; (801af50 <ip_reass_dequeue_datagram+0x50>)
 801af26:	f240 1245 	movw	r2, #325	; 0x145
 801af2a:	490a      	ldr	r1, [pc, #40]	; (801af54 <ip_reass_dequeue_datagram+0x54>)
 801af2c:	480a      	ldr	r0, [pc, #40]	; (801af58 <ip_reass_dequeue_datagram+0x58>)
 801af2e:	f001 f8f9 	bl	801c124 <iprintf>
    prev->next = ipr->next;
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	681a      	ldr	r2, [r3, #0]
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801af3a:	6879      	ldr	r1, [r7, #4]
 801af3c:	2004      	movs	r0, #4
 801af3e:	f7f6 fc87 	bl	8011850 <memp_free>
}
 801af42:	bf00      	nop
 801af44:	3708      	adds	r7, #8
 801af46:	46bd      	mov	sp, r7
 801af48:	bd80      	pop	{r7, pc}
 801af4a:	bf00      	nop
 801af4c:	200099fc 	.word	0x200099fc
 801af50:	08021180 	.word	0x08021180
 801af54:	08021248 	.word	0x08021248
 801af58:	080211c8 	.word	0x080211c8

0801af5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b08c      	sub	sp, #48	; 0x30
 801af60:	af00      	add	r7, sp, #0
 801af62:	60f8      	str	r0, [r7, #12]
 801af64:	60b9      	str	r1, [r7, #8]
 801af66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801af68:	2300      	movs	r3, #0
 801af6a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801af6c:	2301      	movs	r3, #1
 801af6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801af70:	68bb      	ldr	r3, [r7, #8]
 801af72:	685b      	ldr	r3, [r3, #4]
 801af74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801af76:	69fb      	ldr	r3, [r7, #28]
 801af78:	885b      	ldrh	r3, [r3, #2]
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	4618      	mov	r0, r3
 801af7e:	f7f5 ff5f 	bl	8010e40 <lwip_htons>
 801af82:	4603      	mov	r3, r0
 801af84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801af86:	69fb      	ldr	r3, [r7, #28]
 801af88:	781b      	ldrb	r3, [r3, #0]
 801af8a:	f003 030f 	and.w	r3, r3, #15
 801af8e:	b2db      	uxtb	r3, r3
 801af90:	009b      	lsls	r3, r3, #2
 801af92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801af94:	7e7b      	ldrb	r3, [r7, #25]
 801af96:	b29b      	uxth	r3, r3
 801af98:	8b7a      	ldrh	r2, [r7, #26]
 801af9a:	429a      	cmp	r2, r3
 801af9c:	d202      	bcs.n	801afa4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801af9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801afa2:	e135      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801afa4:	7e7b      	ldrb	r3, [r7, #25]
 801afa6:	b29b      	uxth	r3, r3
 801afa8:	8b7a      	ldrh	r2, [r7, #26]
 801afaa:	1ad3      	subs	r3, r2, r3
 801afac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801afae:	69fb      	ldr	r3, [r7, #28]
 801afb0:	88db      	ldrh	r3, [r3, #6]
 801afb2:	b29b      	uxth	r3, r3
 801afb4:	4618      	mov	r0, r3
 801afb6:	f7f5 ff43 	bl	8010e40 <lwip_htons>
 801afba:	4603      	mov	r3, r0
 801afbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801afc0:	b29b      	uxth	r3, r3
 801afc2:	00db      	lsls	r3, r3, #3
 801afc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801afc6:	68bb      	ldr	r3, [r7, #8]
 801afc8:	685b      	ldr	r3, [r3, #4]
 801afca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afce:	2200      	movs	r2, #0
 801afd0:	701a      	strb	r2, [r3, #0]
 801afd2:	2200      	movs	r2, #0
 801afd4:	705a      	strb	r2, [r3, #1]
 801afd6:	2200      	movs	r2, #0
 801afd8:	709a      	strb	r2, [r3, #2]
 801afda:	2200      	movs	r2, #0
 801afdc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afe0:	8afa      	ldrh	r2, [r7, #22]
 801afe2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801afe4:	8afa      	ldrh	r2, [r7, #22]
 801afe6:	8b7b      	ldrh	r3, [r7, #26]
 801afe8:	4413      	add	r3, r2
 801afea:	b29a      	uxth	r2, r3
 801afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aff2:	88db      	ldrh	r3, [r3, #6]
 801aff4:	b29b      	uxth	r3, r3
 801aff6:	8afa      	ldrh	r2, [r7, #22]
 801aff8:	429a      	cmp	r2, r3
 801affa:	d902      	bls.n	801b002 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801affc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b000:	e106      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	685b      	ldr	r3, [r3, #4]
 801b006:	627b      	str	r3, [r7, #36]	; 0x24
 801b008:	e068      	b.n	801b0dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b012:	889b      	ldrh	r3, [r3, #4]
 801b014:	b29a      	uxth	r2, r3
 801b016:	693b      	ldr	r3, [r7, #16]
 801b018:	889b      	ldrh	r3, [r3, #4]
 801b01a:	b29b      	uxth	r3, r3
 801b01c:	429a      	cmp	r2, r3
 801b01e:	d235      	bcs.n	801b08c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b024:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d020      	beq.n	801b06e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b02e:	889b      	ldrh	r3, [r3, #4]
 801b030:	b29a      	uxth	r2, r3
 801b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b034:	88db      	ldrh	r3, [r3, #6]
 801b036:	b29b      	uxth	r3, r3
 801b038:	429a      	cmp	r2, r3
 801b03a:	d307      	bcc.n	801b04c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b03e:	88db      	ldrh	r3, [r3, #6]
 801b040:	b29a      	uxth	r2, r3
 801b042:	693b      	ldr	r3, [r7, #16]
 801b044:	889b      	ldrh	r3, [r3, #4]
 801b046:	b29b      	uxth	r3, r3
 801b048:	429a      	cmp	r2, r3
 801b04a:	d902      	bls.n	801b052 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b050:	e0de      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b054:	68ba      	ldr	r2, [r7, #8]
 801b056:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b05a:	88db      	ldrh	r3, [r3, #6]
 801b05c:	b29a      	uxth	r2, r3
 801b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b060:	889b      	ldrh	r3, [r3, #4]
 801b062:	b29b      	uxth	r3, r3
 801b064:	429a      	cmp	r2, r3
 801b066:	d03d      	beq.n	801b0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b068:	2300      	movs	r3, #0
 801b06a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b06c:	e03a      	b.n	801b0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b070:	88db      	ldrh	r3, [r3, #6]
 801b072:	b29a      	uxth	r2, r3
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	889b      	ldrh	r3, [r3, #4]
 801b078:	b29b      	uxth	r3, r3
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d902      	bls.n	801b084 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b07e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b082:	e0c5      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	68ba      	ldr	r2, [r7, #8]
 801b088:	605a      	str	r2, [r3, #4]
      break;
 801b08a:	e02b      	b.n	801b0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b08e:	889b      	ldrh	r3, [r3, #4]
 801b090:	b29a      	uxth	r2, r3
 801b092:	693b      	ldr	r3, [r7, #16]
 801b094:	889b      	ldrh	r3, [r3, #4]
 801b096:	b29b      	uxth	r3, r3
 801b098:	429a      	cmp	r2, r3
 801b09a:	d102      	bne.n	801b0a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0a0:	e0b6      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0a4:	889b      	ldrh	r3, [r3, #4]
 801b0a6:	b29a      	uxth	r2, r3
 801b0a8:	693b      	ldr	r3, [r7, #16]
 801b0aa:	88db      	ldrh	r3, [r3, #6]
 801b0ac:	b29b      	uxth	r3, r3
 801b0ae:	429a      	cmp	r2, r3
 801b0b0:	d202      	bcs.n	801b0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b0b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0b6:	e0ab      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d009      	beq.n	801b0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c0:	88db      	ldrh	r3, [r3, #6]
 801b0c2:	b29a      	uxth	r2, r3
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	889b      	ldrh	r3, [r3, #4]
 801b0c8:	b29b      	uxth	r3, r3
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d001      	beq.n	801b0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b0d8:	693b      	ldr	r3, [r7, #16]
 801b0da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d193      	bne.n	801b00a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b0e2:	e000      	b.n	801b0e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b0e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d12d      	bne.n	801b148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d01c      	beq.n	801b12c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0f4:	88db      	ldrh	r3, [r3, #6]
 801b0f6:	b29a      	uxth	r2, r3
 801b0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0fa:	889b      	ldrh	r3, [r3, #4]
 801b0fc:	b29b      	uxth	r3, r3
 801b0fe:	429a      	cmp	r2, r3
 801b100:	d906      	bls.n	801b110 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b102:	4b45      	ldr	r3, [pc, #276]	; (801b218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b104:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b108:	4944      	ldr	r1, [pc, #272]	; (801b21c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b10a:	4845      	ldr	r0, [pc, #276]	; (801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b10c:	f001 f80a 	bl	801c124 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b112:	68ba      	ldr	r2, [r7, #8]
 801b114:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b118:	88db      	ldrh	r3, [r3, #6]
 801b11a:	b29a      	uxth	r2, r3
 801b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b11e:	889b      	ldrh	r3, [r3, #4]
 801b120:	b29b      	uxth	r3, r3
 801b122:	429a      	cmp	r2, r3
 801b124:	d010      	beq.n	801b148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b126:	2300      	movs	r3, #0
 801b128:	623b      	str	r3, [r7, #32]
 801b12a:	e00d      	b.n	801b148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	685b      	ldr	r3, [r3, #4]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d006      	beq.n	801b142 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b134:	4b38      	ldr	r3, [pc, #224]	; (801b218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b136:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b13a:	493a      	ldr	r1, [pc, #232]	; (801b224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b13c:	4838      	ldr	r0, [pc, #224]	; (801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b13e:	f000 fff1 	bl	801c124 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	68ba      	ldr	r2, [r7, #8]
 801b146:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d105      	bne.n	801b15a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	7f9b      	ldrb	r3, [r3, #30]
 801b152:	f003 0301 	and.w	r3, r3, #1
 801b156:	2b00      	cmp	r3, #0
 801b158:	d059      	beq.n	801b20e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b15a:	6a3b      	ldr	r3, [r7, #32]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d04f      	beq.n	801b200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	685b      	ldr	r3, [r3, #4]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d006      	beq.n	801b176 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	685b      	ldr	r3, [r3, #4]
 801b16e:	889b      	ldrh	r3, [r3, #4]
 801b170:	b29b      	uxth	r3, r3
 801b172:	2b00      	cmp	r3, #0
 801b174:	d002      	beq.n	801b17c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b176:	2300      	movs	r3, #0
 801b178:	623b      	str	r3, [r7, #32]
 801b17a:	e041      	b.n	801b200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b17e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b186:	e012      	b.n	801b1ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18a:	685b      	ldr	r3, [r3, #4]
 801b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b190:	88db      	ldrh	r3, [r3, #6]
 801b192:	b29a      	uxth	r2, r3
 801b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b196:	889b      	ldrh	r3, [r3, #4]
 801b198:	b29b      	uxth	r3, r3
 801b19a:	429a      	cmp	r2, r3
 801b19c:	d002      	beq.n	801b1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b19e:	2300      	movs	r3, #0
 801b1a0:	623b      	str	r3, [r7, #32]
            break;
 801b1a2:	e007      	b.n	801b1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d1e9      	bne.n	801b188 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b1b4:	6a3b      	ldr	r3, [r7, #32]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d022      	beq.n	801b200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	685b      	ldr	r3, [r3, #4]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d106      	bne.n	801b1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b1c2:	4b15      	ldr	r3, [pc, #84]	; (801b218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b1c4:	f240 12df 	movw	r2, #479	; 0x1df
 801b1c8:	4917      	ldr	r1, [pc, #92]	; (801b228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b1ca:	4815      	ldr	r0, [pc, #84]	; (801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b1cc:	f000 ffaa 	bl	801c124 <iprintf>
          LWIP_ASSERT("sanity check",
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	685b      	ldr	r3, [r3, #4]
 801b1d4:	685b      	ldr	r3, [r3, #4]
 801b1d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b1d8:	429a      	cmp	r2, r3
 801b1da:	d106      	bne.n	801b1ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b1dc:	4b0e      	ldr	r3, [pc, #56]	; (801b218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b1de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b1e2:	4911      	ldr	r1, [pc, #68]	; (801b228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b1e4:	480e      	ldr	r0, [pc, #56]	; (801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b1e6:	f000 ff9d 	bl	801c124 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d006      	beq.n	801b200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b1f2:	4b09      	ldr	r3, [pc, #36]	; (801b218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b1f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801b1f8:	490c      	ldr	r1, [pc, #48]	; (801b22c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b1fa:	4809      	ldr	r0, [pc, #36]	; (801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b1fc:	f000 ff92 	bl	801c124 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b200:	6a3b      	ldr	r3, [r7, #32]
 801b202:	2b00      	cmp	r3, #0
 801b204:	bf14      	ite	ne
 801b206:	2301      	movne	r3, #1
 801b208:	2300      	moveq	r3, #0
 801b20a:	b2db      	uxtb	r3, r3
 801b20c:	e000      	b.n	801b210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b20e:	2300      	movs	r3, #0
}
 801b210:	4618      	mov	r0, r3
 801b212:	3730      	adds	r7, #48	; 0x30
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}
 801b218:	08021180 	.word	0x08021180
 801b21c:	08021264 	.word	0x08021264
 801b220:	080211c8 	.word	0x080211c8
 801b224:	08021284 	.word	0x08021284
 801b228:	080212bc 	.word	0x080212bc
 801b22c:	080212cc 	.word	0x080212cc

0801b230 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b08e      	sub	sp, #56	; 0x38
 801b234:	af00      	add	r7, sp, #0
 801b236:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	685b      	ldr	r3, [r3, #4]
 801b23c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b240:	781b      	ldrb	r3, [r3, #0]
 801b242:	f003 030f 	and.w	r3, r3, #15
 801b246:	b2db      	uxtb	r3, r3
 801b248:	009b      	lsls	r3, r3, #2
 801b24a:	b2db      	uxtb	r3, r3
 801b24c:	2b14      	cmp	r3, #20
 801b24e:	f040 8167 	bne.w	801b520 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b254:	88db      	ldrh	r3, [r3, #6]
 801b256:	b29b      	uxth	r3, r3
 801b258:	4618      	mov	r0, r3
 801b25a:	f7f5 fdf1 	bl	8010e40 <lwip_htons>
 801b25e:	4603      	mov	r3, r0
 801b260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b264:	b29b      	uxth	r3, r3
 801b266:	00db      	lsls	r3, r3, #3
 801b268:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b26c:	885b      	ldrh	r3, [r3, #2]
 801b26e:	b29b      	uxth	r3, r3
 801b270:	4618      	mov	r0, r3
 801b272:	f7f5 fde5 	bl	8010e40 <lwip_htons>
 801b276:	4603      	mov	r3, r0
 801b278:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b27c:	781b      	ldrb	r3, [r3, #0]
 801b27e:	f003 030f 	and.w	r3, r3, #15
 801b282:	b2db      	uxtb	r3, r3
 801b284:	009b      	lsls	r3, r3, #2
 801b286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801b28a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b28e:	b29b      	uxth	r3, r3
 801b290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b292:	429a      	cmp	r2, r3
 801b294:	f0c0 8146 	bcc.w	801b524 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b29c:	b29b      	uxth	r3, r3
 801b29e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b2a0:	1ad3      	subs	r3, r2, r3
 801b2a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b2a4:	6878      	ldr	r0, [r7, #4]
 801b2a6:	f7f7 fa05 	bl	80126b4 <pbuf_clen>
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b2ae:	4b9f      	ldr	r3, [pc, #636]	; (801b52c <ip4_reass+0x2fc>)
 801b2b0:	881b      	ldrh	r3, [r3, #0]
 801b2b2:	461a      	mov	r2, r3
 801b2b4:	8c3b      	ldrh	r3, [r7, #32]
 801b2b6:	4413      	add	r3, r2
 801b2b8:	2b0a      	cmp	r3, #10
 801b2ba:	dd10      	ble.n	801b2de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b2bc:	8c3b      	ldrh	r3, [r7, #32]
 801b2be:	4619      	mov	r1, r3
 801b2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b2c2:	f7ff fd81 	bl	801adc8 <ip_reass_remove_oldest_datagram>
 801b2c6:	4603      	mov	r3, r0
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	f000 812d 	beq.w	801b528 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b2ce:	4b97      	ldr	r3, [pc, #604]	; (801b52c <ip4_reass+0x2fc>)
 801b2d0:	881b      	ldrh	r3, [r3, #0]
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	8c3b      	ldrh	r3, [r7, #32]
 801b2d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b2d8:	2b0a      	cmp	r3, #10
 801b2da:	f300 8125 	bgt.w	801b528 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b2de:	4b94      	ldr	r3, [pc, #592]	; (801b530 <ip4_reass+0x300>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	633b      	str	r3, [r7, #48]	; 0x30
 801b2e4:	e015      	b.n	801b312 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2e8:	695a      	ldr	r2, [r3, #20]
 801b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2ec:	68db      	ldr	r3, [r3, #12]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d10c      	bne.n	801b30c <ip4_reass+0xdc>
 801b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2f4:	699a      	ldr	r2, [r3, #24]
 801b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2f8:	691b      	ldr	r3, [r3, #16]
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	d106      	bne.n	801b30c <ip4_reass+0xdc>
 801b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b300:	899a      	ldrh	r2, [r3, #12]
 801b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b304:	889b      	ldrh	r3, [r3, #4]
 801b306:	b29b      	uxth	r3, r3
 801b308:	429a      	cmp	r2, r3
 801b30a:	d006      	beq.n	801b31a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	633b      	str	r3, [r7, #48]	; 0x30
 801b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b314:	2b00      	cmp	r3, #0
 801b316:	d1e6      	bne.n	801b2e6 <ip4_reass+0xb6>
 801b318:	e000      	b.n	801b31c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b31a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d109      	bne.n	801b336 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b322:	8c3b      	ldrh	r3, [r7, #32]
 801b324:	4619      	mov	r1, r3
 801b326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b328:	f7ff fdb0 	bl	801ae8c <ip_reass_enqueue_new_datagram>
 801b32c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b330:	2b00      	cmp	r3, #0
 801b332:	d11c      	bne.n	801b36e <ip4_reass+0x13e>
      goto nullreturn;
 801b334:	e109      	b.n	801b54a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b338:	88db      	ldrh	r3, [r3, #6]
 801b33a:	b29b      	uxth	r3, r3
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7f5 fd7f 	bl	8010e40 <lwip_htons>
 801b342:	4603      	mov	r3, r0
 801b344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d110      	bne.n	801b36e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b34e:	89db      	ldrh	r3, [r3, #14]
 801b350:	4618      	mov	r0, r3
 801b352:	f7f5 fd75 	bl	8010e40 <lwip_htons>
 801b356:	4603      	mov	r3, r0
 801b358:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d006      	beq.n	801b36e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b362:	3308      	adds	r3, #8
 801b364:	2214      	movs	r2, #20
 801b366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b368:	4618      	mov	r0, r3
 801b36a:	f000 fe50 	bl	801c00e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b370:	88db      	ldrh	r3, [r3, #6]
 801b372:	b29b      	uxth	r3, r3
 801b374:	f003 0320 	and.w	r3, r3, #32
 801b378:	2b00      	cmp	r3, #0
 801b37a:	bf0c      	ite	eq
 801b37c:	2301      	moveq	r3, #1
 801b37e:	2300      	movne	r3, #0
 801b380:	b2db      	uxtb	r3, r3
 801b382:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b384:	69fb      	ldr	r3, [r7, #28]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d00e      	beq.n	801b3a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b38a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b38c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b38e:	4413      	add	r3, r2
 801b390:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b392:	8b7a      	ldrh	r2, [r7, #26]
 801b394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b396:	429a      	cmp	r2, r3
 801b398:	f0c0 80a0 	bcc.w	801b4dc <ip4_reass+0x2ac>
 801b39c:	8b7b      	ldrh	r3, [r7, #26]
 801b39e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b3a2:	4293      	cmp	r3, r2
 801b3a4:	f200 809a 	bhi.w	801b4dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b3a8:	69fa      	ldr	r2, [r7, #28]
 801b3aa:	6879      	ldr	r1, [r7, #4]
 801b3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b3ae:	f7ff fdd5 	bl	801af5c <ip_reass_chain_frag_into_datagram_and_validate>
 801b3b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b3b4:	697b      	ldr	r3, [r7, #20]
 801b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b3ba:	f000 8091 	beq.w	801b4e0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b3be:	4b5b      	ldr	r3, [pc, #364]	; (801b52c <ip4_reass+0x2fc>)
 801b3c0:	881a      	ldrh	r2, [r3, #0]
 801b3c2:	8c3b      	ldrh	r3, [r7, #32]
 801b3c4:	4413      	add	r3, r2
 801b3c6:	b29a      	uxth	r2, r3
 801b3c8:	4b58      	ldr	r3, [pc, #352]	; (801b52c <ip4_reass+0x2fc>)
 801b3ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b3cc:	69fb      	ldr	r3, [r7, #28]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d00d      	beq.n	801b3ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b3d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b3d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3d6:	4413      	add	r3, r2
 801b3d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3dc:	8a7a      	ldrh	r2, [r7, #18]
 801b3de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e2:	7f9b      	ldrb	r3, [r3, #30]
 801b3e4:	f043 0301 	orr.w	r3, r3, #1
 801b3e8:	b2da      	uxtb	r2, r3
 801b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b3ee:	697b      	ldr	r3, [r7, #20]
 801b3f0:	2b01      	cmp	r3, #1
 801b3f2:	d171      	bne.n	801b4d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3f6:	8b9b      	ldrh	r3, [r3, #28]
 801b3f8:	3314      	adds	r3, #20
 801b3fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3fe:	685b      	ldr	r3, [r3, #4]
 801b400:	685b      	ldr	r3, [r3, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b408:	685b      	ldr	r3, [r3, #4]
 801b40a:	685b      	ldr	r3, [r3, #4]
 801b40c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b410:	3308      	adds	r3, #8
 801b412:	2214      	movs	r2, #20
 801b414:	4619      	mov	r1, r3
 801b416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b418:	f000 fdf9 	bl	801c00e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b41c:	8a3b      	ldrh	r3, [r7, #16]
 801b41e:	4618      	mov	r0, r3
 801b420:	f7f5 fd0e 	bl	8010e40 <lwip_htons>
 801b424:	4603      	mov	r3, r0
 801b426:	461a      	mov	r2, r3
 801b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b42a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b42e:	2200      	movs	r2, #0
 801b430:	719a      	strb	r2, [r3, #6]
 801b432:	2200      	movs	r2, #0
 801b434:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b438:	2200      	movs	r2, #0
 801b43a:	729a      	strb	r2, [r3, #10]
 801b43c:	2200      	movs	r2, #0
 801b43e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b442:	685b      	ldr	r3, [r3, #4]
 801b444:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b446:	e00d      	b.n	801b464 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b44a:	685b      	ldr	r3, [r3, #4]
 801b44c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b44e:	2114      	movs	r1, #20
 801b450:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b452:	f7f7 f81b 	bl	801248c <pbuf_remove_header>
      pbuf_cat(p, r);
 801b456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b458:	6878      	ldr	r0, [r7, #4]
 801b45a:	f7f7 f96b 	bl	8012734 <pbuf_cat>
      r = iprh->next_pbuf;
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b466:	2b00      	cmp	r3, #0
 801b468:	d1ee      	bne.n	801b448 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b46a:	4b31      	ldr	r3, [pc, #196]	; (801b530 <ip4_reass+0x300>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b470:	429a      	cmp	r2, r3
 801b472:	d102      	bne.n	801b47a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b474:	2300      	movs	r3, #0
 801b476:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b478:	e010      	b.n	801b49c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b47a:	4b2d      	ldr	r3, [pc, #180]	; (801b530 <ip4_reass+0x300>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b480:	e007      	b.n	801b492 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b488:	429a      	cmp	r2, r3
 801b48a:	d006      	beq.n	801b49a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b494:	2b00      	cmp	r3, #0
 801b496:	d1f4      	bne.n	801b482 <ip4_reass+0x252>
 801b498:	e000      	b.n	801b49c <ip4_reass+0x26c>
          break;
 801b49a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b49c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b49e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b4a0:	f7ff fd2e 	bl	801af00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b4a4:	6878      	ldr	r0, [r7, #4]
 801b4a6:	f7f7 f905 	bl	80126b4 <pbuf_clen>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b4ae:	4b1f      	ldr	r3, [pc, #124]	; (801b52c <ip4_reass+0x2fc>)
 801b4b0:	881b      	ldrh	r3, [r3, #0]
 801b4b2:	8c3a      	ldrh	r2, [r7, #32]
 801b4b4:	429a      	cmp	r2, r3
 801b4b6:	d906      	bls.n	801b4c6 <ip4_reass+0x296>
 801b4b8:	4b1e      	ldr	r3, [pc, #120]	; (801b534 <ip4_reass+0x304>)
 801b4ba:	f240 229b 	movw	r2, #667	; 0x29b
 801b4be:	491e      	ldr	r1, [pc, #120]	; (801b538 <ip4_reass+0x308>)
 801b4c0:	481e      	ldr	r0, [pc, #120]	; (801b53c <ip4_reass+0x30c>)
 801b4c2:	f000 fe2f 	bl	801c124 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b4c6:	4b19      	ldr	r3, [pc, #100]	; (801b52c <ip4_reass+0x2fc>)
 801b4c8:	881a      	ldrh	r2, [r3, #0]
 801b4ca:	8c3b      	ldrh	r3, [r7, #32]
 801b4cc:	1ad3      	subs	r3, r2, r3
 801b4ce:	b29a      	uxth	r2, r3
 801b4d0:	4b16      	ldr	r3, [pc, #88]	; (801b52c <ip4_reass+0x2fc>)
 801b4d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	e03c      	b.n	801b552 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b4d8:	2300      	movs	r3, #0
 801b4da:	e03a      	b.n	801b552 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801b4dc:	bf00      	nop
 801b4de:	e000      	b.n	801b4e2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801b4e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d106      	bne.n	801b4f6 <ip4_reass+0x2c6>
 801b4e8:	4b12      	ldr	r3, [pc, #72]	; (801b534 <ip4_reass+0x304>)
 801b4ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b4ee:	4914      	ldr	r1, [pc, #80]	; (801b540 <ip4_reass+0x310>)
 801b4f0:	4812      	ldr	r0, [pc, #72]	; (801b53c <ip4_reass+0x30c>)
 801b4f2:	f000 fe17 	bl	801c124 <iprintf>
  if (ipr->p == NULL) {
 801b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4f8:	685b      	ldr	r3, [r3, #4]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d124      	bne.n	801b548 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b4fe:	4b0c      	ldr	r3, [pc, #48]	; (801b530 <ip4_reass+0x300>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b504:	429a      	cmp	r2, r3
 801b506:	d006      	beq.n	801b516 <ip4_reass+0x2e6>
 801b508:	4b0a      	ldr	r3, [pc, #40]	; (801b534 <ip4_reass+0x304>)
 801b50a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b50e:	490d      	ldr	r1, [pc, #52]	; (801b544 <ip4_reass+0x314>)
 801b510:	480a      	ldr	r0, [pc, #40]	; (801b53c <ip4_reass+0x30c>)
 801b512:	f000 fe07 	bl	801c124 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b516:	2100      	movs	r1, #0
 801b518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b51a:	f7ff fcf1 	bl	801af00 <ip_reass_dequeue_datagram>
 801b51e:	e014      	b.n	801b54a <ip4_reass+0x31a>
    goto nullreturn;
 801b520:	bf00      	nop
 801b522:	e012      	b.n	801b54a <ip4_reass+0x31a>
    goto nullreturn;
 801b524:	bf00      	nop
 801b526:	e010      	b.n	801b54a <ip4_reass+0x31a>
      goto nullreturn;
 801b528:	bf00      	nop
 801b52a:	e00e      	b.n	801b54a <ip4_reass+0x31a>
 801b52c:	20009a00 	.word	0x20009a00
 801b530:	200099fc 	.word	0x200099fc
 801b534:	08021180 	.word	0x08021180
 801b538:	080212f0 	.word	0x080212f0
 801b53c:	080211c8 	.word	0x080211c8
 801b540:	0802130c 	.word	0x0802130c
 801b544:	08021318 	.word	0x08021318
  }

nullreturn:
 801b548:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	f7f7 f824 	bl	8012598 <pbuf_free>
  return NULL;
 801b550:	2300      	movs	r3, #0
}
 801b552:	4618      	mov	r0, r3
 801b554:	3738      	adds	r7, #56	; 0x38
 801b556:	46bd      	mov	sp, r7
 801b558:	bd80      	pop	{r7, pc}
 801b55a:	bf00      	nop

0801b55c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b560:	2005      	movs	r0, #5
 801b562:	f7f6 f923 	bl	80117ac <memp_malloc>
 801b566:	4603      	mov	r3, r0
}
 801b568:	4618      	mov	r0, r3
 801b56a:	bd80      	pop	{r7, pc}

0801b56c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b082      	sub	sp, #8
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d106      	bne.n	801b588 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b57a:	4b07      	ldr	r3, [pc, #28]	; (801b598 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b57c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b580:	4906      	ldr	r1, [pc, #24]	; (801b59c <ip_frag_free_pbuf_custom_ref+0x30>)
 801b582:	4807      	ldr	r0, [pc, #28]	; (801b5a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b584:	f000 fdce 	bl	801c124 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b588:	6879      	ldr	r1, [r7, #4]
 801b58a:	2005      	movs	r0, #5
 801b58c:	f7f6 f960 	bl	8011850 <memp_free>
}
 801b590:	bf00      	nop
 801b592:	3708      	adds	r7, #8
 801b594:	46bd      	mov	sp, r7
 801b596:	bd80      	pop	{r7, pc}
 801b598:	08021180 	.word	0x08021180
 801b59c:	08021338 	.word	0x08021338
 801b5a0:	080211c8 	.word	0x080211c8

0801b5a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b5a4:	b580      	push	{r7, lr}
 801b5a6:	b084      	sub	sp, #16
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d106      	bne.n	801b5c4 <ipfrag_free_pbuf_custom+0x20>
 801b5b6:	4b11      	ldr	r3, [pc, #68]	; (801b5fc <ipfrag_free_pbuf_custom+0x58>)
 801b5b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b5bc:	4910      	ldr	r1, [pc, #64]	; (801b600 <ipfrag_free_pbuf_custom+0x5c>)
 801b5be:	4811      	ldr	r0, [pc, #68]	; (801b604 <ipfrag_free_pbuf_custom+0x60>)
 801b5c0:	f000 fdb0 	bl	801c124 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b5c4:	68fa      	ldr	r2, [r7, #12]
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d006      	beq.n	801b5da <ipfrag_free_pbuf_custom+0x36>
 801b5cc:	4b0b      	ldr	r3, [pc, #44]	; (801b5fc <ipfrag_free_pbuf_custom+0x58>)
 801b5ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b5d2:	490d      	ldr	r1, [pc, #52]	; (801b608 <ipfrag_free_pbuf_custom+0x64>)
 801b5d4:	480b      	ldr	r0, [pc, #44]	; (801b604 <ipfrag_free_pbuf_custom+0x60>)
 801b5d6:	f000 fda5 	bl	801c124 <iprintf>
  if (pcr->original != NULL) {
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	695b      	ldr	r3, [r3, #20]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d004      	beq.n	801b5ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	695b      	ldr	r3, [r3, #20]
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	f7f6 ffd6 	bl	8012598 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b5ec:	68f8      	ldr	r0, [r7, #12]
 801b5ee:	f7ff ffbd 	bl	801b56c <ip_frag_free_pbuf_custom_ref>
}
 801b5f2:	bf00      	nop
 801b5f4:	3710      	adds	r7, #16
 801b5f6:	46bd      	mov	sp, r7
 801b5f8:	bd80      	pop	{r7, pc}
 801b5fa:	bf00      	nop
 801b5fc:	08021180 	.word	0x08021180
 801b600:	08021344 	.word	0x08021344
 801b604:	080211c8 	.word	0x080211c8
 801b608:	08021350 	.word	0x08021350

0801b60c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b094      	sub	sp, #80	; 0x50
 801b610:	af02      	add	r7, sp, #8
 801b612:	60f8      	str	r0, [r7, #12]
 801b614:	60b9      	str	r1, [r7, #8]
 801b616:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b618:	2300      	movs	r3, #0
 801b61a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b622:	3b14      	subs	r3, #20
 801b624:	2b00      	cmp	r3, #0
 801b626:	da00      	bge.n	801b62a <ip4_frag+0x1e>
 801b628:	3307      	adds	r3, #7
 801b62a:	10db      	asrs	r3, r3, #3
 801b62c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b62e:	2314      	movs	r3, #20
 801b630:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	685b      	ldr	r3, [r3, #4]
 801b636:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b63a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b63e:	781b      	ldrb	r3, [r3, #0]
 801b640:	f003 030f 	and.w	r3, r3, #15
 801b644:	b2db      	uxtb	r3, r3
 801b646:	009b      	lsls	r3, r3, #2
 801b648:	b2db      	uxtb	r3, r3
 801b64a:	2b14      	cmp	r3, #20
 801b64c:	d002      	beq.n	801b654 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b64e:	f06f 0305 	mvn.w	r3, #5
 801b652:	e110      	b.n	801b876 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	895b      	ldrh	r3, [r3, #10]
 801b658:	2b13      	cmp	r3, #19
 801b65a:	d809      	bhi.n	801b670 <ip4_frag+0x64>
 801b65c:	4b88      	ldr	r3, [pc, #544]	; (801b880 <ip4_frag+0x274>)
 801b65e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b662:	4988      	ldr	r1, [pc, #544]	; (801b884 <ip4_frag+0x278>)
 801b664:	4888      	ldr	r0, [pc, #544]	; (801b888 <ip4_frag+0x27c>)
 801b666:	f000 fd5d 	bl	801c124 <iprintf>
 801b66a:	f06f 0305 	mvn.w	r3, #5
 801b66e:	e102      	b.n	801b876 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b672:	88db      	ldrh	r3, [r3, #6]
 801b674:	b29b      	uxth	r3, r3
 801b676:	4618      	mov	r0, r3
 801b678:	f7f5 fbe2 	bl	8010e40 <lwip_htons>
 801b67c:	4603      	mov	r3, r0
 801b67e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b686:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b68a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b68c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b690:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	891b      	ldrh	r3, [r3, #8]
 801b696:	3b14      	subs	r3, #20
 801b698:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b69c:	e0e1      	b.n	801b862 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b69e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b6a0:	00db      	lsls	r3, r3, #3
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b6a8:	4293      	cmp	r3, r2
 801b6aa:	bf28      	it	cs
 801b6ac:	4613      	movcs	r3, r2
 801b6ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b6b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b6b4:	2114      	movs	r1, #20
 801b6b6:	200e      	movs	r0, #14
 801b6b8:	f7f6 fc8a 	bl	8011fd0 <pbuf_alloc>
 801b6bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	f000 80d5 	beq.w	801b870 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c8:	895b      	ldrh	r3, [r3, #10]
 801b6ca:	2b13      	cmp	r3, #19
 801b6cc:	d806      	bhi.n	801b6dc <ip4_frag+0xd0>
 801b6ce:	4b6c      	ldr	r3, [pc, #432]	; (801b880 <ip4_frag+0x274>)
 801b6d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b6d4:	496d      	ldr	r1, [pc, #436]	; (801b88c <ip4_frag+0x280>)
 801b6d6:	486c      	ldr	r0, [pc, #432]	; (801b888 <ip4_frag+0x27c>)
 801b6d8:	f000 fd24 	bl	801c124 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6de:	685b      	ldr	r3, [r3, #4]
 801b6e0:	2214      	movs	r2, #20
 801b6e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f000 fc92 	bl	801c00e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ec:	685b      	ldr	r3, [r3, #4]
 801b6ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b6f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b6f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b6f6:	e064      	b.n	801b7c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	895a      	ldrh	r2, [r3, #10]
 801b6fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b6fe:	1ad3      	subs	r3, r2, r3
 801b700:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	895b      	ldrh	r3, [r3, #10]
 801b706:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b708:	429a      	cmp	r2, r3
 801b70a:	d906      	bls.n	801b71a <ip4_frag+0x10e>
 801b70c:	4b5c      	ldr	r3, [pc, #368]	; (801b880 <ip4_frag+0x274>)
 801b70e:	f240 322d 	movw	r2, #813	; 0x32d
 801b712:	495f      	ldr	r1, [pc, #380]	; (801b890 <ip4_frag+0x284>)
 801b714:	485c      	ldr	r0, [pc, #368]	; (801b888 <ip4_frag+0x27c>)
 801b716:	f000 fd05 	bl	801c124 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b71a:	8bfa      	ldrh	r2, [r7, #30]
 801b71c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b720:	4293      	cmp	r3, r2
 801b722:	bf28      	it	cs
 801b724:	4613      	movcs	r3, r2
 801b726:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b72a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d105      	bne.n	801b73e <ip4_frag+0x132>
        poff = 0;
 801b732:	2300      	movs	r3, #0
 801b734:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	60fb      	str	r3, [r7, #12]
        continue;
 801b73c:	e041      	b.n	801b7c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b73e:	f7ff ff0d 	bl	801b55c <ip_frag_alloc_pbuf_custom_ref>
 801b742:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b744:	69bb      	ldr	r3, [r7, #24]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d103      	bne.n	801b752 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b74c:	f7f6 ff24 	bl	8012598 <pbuf_free>
        goto memerr;
 801b750:	e08f      	b.n	801b872 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b752:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b758:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b75a:	4413      	add	r3, r2
 801b75c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b760:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b764:	9201      	str	r2, [sp, #4]
 801b766:	9300      	str	r3, [sp, #0]
 801b768:	4603      	mov	r3, r0
 801b76a:	2241      	movs	r2, #65	; 0x41
 801b76c:	2000      	movs	r0, #0
 801b76e:	f7f6 fd59 	bl	8012224 <pbuf_alloced_custom>
 801b772:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b774:	697b      	ldr	r3, [r7, #20]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d106      	bne.n	801b788 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b77a:	69b8      	ldr	r0, [r7, #24]
 801b77c:	f7ff fef6 	bl	801b56c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b782:	f7f6 ff09 	bl	8012598 <pbuf_free>
        goto memerr;
 801b786:	e074      	b.n	801b872 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b788:	68f8      	ldr	r0, [r7, #12]
 801b78a:	f7f6 ffab 	bl	80126e4 <pbuf_ref>
      pcr->original = p;
 801b78e:	69bb      	ldr	r3, [r7, #24]
 801b790:	68fa      	ldr	r2, [r7, #12]
 801b792:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b794:	69bb      	ldr	r3, [r7, #24]
 801b796:	4a3f      	ldr	r2, [pc, #252]	; (801b894 <ip4_frag+0x288>)
 801b798:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b79a:	6979      	ldr	r1, [r7, #20]
 801b79c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b79e:	f7f6 ffc9 	bl	8012734 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b7a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b7a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b7aa:	1ad3      	subs	r3, r2, r3
 801b7ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b7b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d004      	beq.n	801b7c2 <ip4_frag+0x1b6>
        poff = 0;
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b7c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d196      	bne.n	801b6f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b7ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b7cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b7d0:	4413      	add	r3, r2
 801b7d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b7d4:	68bb      	ldr	r3, [r7, #8]
 801b7d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b7d8:	f1a3 0213 	sub.w	r2, r3, #19
 801b7dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b7e0:	429a      	cmp	r2, r3
 801b7e2:	bfcc      	ite	gt
 801b7e4:	2301      	movgt	r3, #1
 801b7e6:	2300      	movle	r3, #0
 801b7e8:	b2db      	uxtb	r3, r3
 801b7ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b7ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b7f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b7f6:	6a3b      	ldr	r3, [r7, #32]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d002      	beq.n	801b802 <ip4_frag+0x1f6>
 801b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d003      	beq.n	801b80a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b802:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b808:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b80a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b80c:	4618      	mov	r0, r3
 801b80e:	f7f5 fb17 	bl	8010e40 <lwip_htons>
 801b812:	4603      	mov	r3, r0
 801b814:	461a      	mov	r2, r3
 801b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b818:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b81a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b81c:	3314      	adds	r3, #20
 801b81e:	b29b      	uxth	r3, r3
 801b820:	4618      	mov	r0, r3
 801b822:	f7f5 fb0d 	bl	8010e40 <lwip_htons>
 801b826:	4603      	mov	r3, r0
 801b828:	461a      	mov	r2, r3
 801b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b82c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b830:	2200      	movs	r2, #0
 801b832:	729a      	strb	r2, [r3, #10]
 801b834:	2200      	movs	r2, #0
 801b836:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b838:	68bb      	ldr	r3, [r7, #8]
 801b83a:	695b      	ldr	r3, [r3, #20]
 801b83c:	687a      	ldr	r2, [r7, #4]
 801b83e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b840:	68b8      	ldr	r0, [r7, #8]
 801b842:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b846:	f7f6 fea7 	bl	8012598 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b84a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b84e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b850:	1ad3      	subs	r3, r2, r3
 801b852:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b856:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b85a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b85c:	4413      	add	r3, r2
 801b85e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b866:	2b00      	cmp	r3, #0
 801b868:	f47f af19 	bne.w	801b69e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b86c:	2300      	movs	r3, #0
 801b86e:	e002      	b.n	801b876 <ip4_frag+0x26a>
      goto memerr;
 801b870:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b876:	4618      	mov	r0, r3
 801b878:	3748      	adds	r7, #72	; 0x48
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}
 801b87e:	bf00      	nop
 801b880:	08021180 	.word	0x08021180
 801b884:	0802135c 	.word	0x0802135c
 801b888:	080211c8 	.word	0x080211c8
 801b88c:	08021378 	.word	0x08021378
 801b890:	08021398 	.word	0x08021398
 801b894:	0801b5a5 	.word	0x0801b5a5

0801b898 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b086      	sub	sp, #24
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
 801b8a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b8a2:	230e      	movs	r3, #14
 801b8a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	895b      	ldrh	r3, [r3, #10]
 801b8aa:	2b0e      	cmp	r3, #14
 801b8ac:	d96e      	bls.n	801b98c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	7bdb      	ldrb	r3, [r3, #15]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d106      	bne.n	801b8c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b8bc:	3301      	adds	r3, #1
 801b8be:	b2da      	uxtb	r2, r3
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b8ca:	693b      	ldr	r3, [r7, #16]
 801b8cc:	7b1a      	ldrb	r2, [r3, #12]
 801b8ce:	7b5b      	ldrb	r3, [r3, #13]
 801b8d0:	021b      	lsls	r3, r3, #8
 801b8d2:	4313      	orrs	r3, r2
 801b8d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	781b      	ldrb	r3, [r3, #0]
 801b8da:	f003 0301 	and.w	r3, r3, #1
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d023      	beq.n	801b92a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b8e2:	693b      	ldr	r3, [r7, #16]
 801b8e4:	781b      	ldrb	r3, [r3, #0]
 801b8e6:	2b01      	cmp	r3, #1
 801b8e8:	d10f      	bne.n	801b90a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b8ea:	693b      	ldr	r3, [r7, #16]
 801b8ec:	785b      	ldrb	r3, [r3, #1]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d11b      	bne.n	801b92a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b8f2:	693b      	ldr	r3, [r7, #16]
 801b8f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b8f6:	2b5e      	cmp	r3, #94	; 0x5e
 801b8f8:	d117      	bne.n	801b92a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	7b5b      	ldrb	r3, [r3, #13]
 801b8fe:	f043 0310 	orr.w	r3, r3, #16
 801b902:	b2da      	uxtb	r2, r3
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	735a      	strb	r2, [r3, #13]
 801b908:	e00f      	b.n	801b92a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b90a:	693b      	ldr	r3, [r7, #16]
 801b90c:	2206      	movs	r2, #6
 801b90e:	4928      	ldr	r1, [pc, #160]	; (801b9b0 <ethernet_input+0x118>)
 801b910:	4618      	mov	r0, r3
 801b912:	f000 fb6e 	bl	801bff2 <memcmp>
 801b916:	4603      	mov	r3, r0
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d106      	bne.n	801b92a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	7b5b      	ldrb	r3, [r3, #13]
 801b920:	f043 0308 	orr.w	r3, r3, #8
 801b924:	b2da      	uxtb	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b92a:	89fb      	ldrh	r3, [r7, #14]
 801b92c:	2b08      	cmp	r3, #8
 801b92e:	d003      	beq.n	801b938 <ethernet_input+0xa0>
 801b930:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b934:	d014      	beq.n	801b960 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b936:	e032      	b.n	801b99e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b938:	683b      	ldr	r3, [r7, #0]
 801b93a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b93e:	f003 0308 	and.w	r3, r3, #8
 801b942:	2b00      	cmp	r3, #0
 801b944:	d024      	beq.n	801b990 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b946:	8afb      	ldrh	r3, [r7, #22]
 801b948:	4619      	mov	r1, r3
 801b94a:	6878      	ldr	r0, [r7, #4]
 801b94c:	f7f6 fd9e 	bl	801248c <pbuf_remove_header>
 801b950:	4603      	mov	r3, r0
 801b952:	2b00      	cmp	r3, #0
 801b954:	d11e      	bne.n	801b994 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b956:	6839      	ldr	r1, [r7, #0]
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f7fe ff27 	bl	801a7ac <ip4_input>
      break;
 801b95e:	e013      	b.n	801b988 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b960:	683b      	ldr	r3, [r7, #0]
 801b962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b966:	f003 0308 	and.w	r3, r3, #8
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d014      	beq.n	801b998 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b96e:	8afb      	ldrh	r3, [r7, #22]
 801b970:	4619      	mov	r1, r3
 801b972:	6878      	ldr	r0, [r7, #4]
 801b974:	f7f6 fd8a 	bl	801248c <pbuf_remove_header>
 801b978:	4603      	mov	r3, r0
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d10e      	bne.n	801b99c <ethernet_input+0x104>
        etharp_input(p, netif);
 801b97e:	6839      	ldr	r1, [r7, #0]
 801b980:	6878      	ldr	r0, [r7, #4]
 801b982:	f7fe f8c7 	bl	8019b14 <etharp_input>
      break;
 801b986:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b988:	2300      	movs	r3, #0
 801b98a:	e00c      	b.n	801b9a6 <ethernet_input+0x10e>
    goto free_and_return;
 801b98c:	bf00      	nop
 801b98e:	e006      	b.n	801b99e <ethernet_input+0x106>
        goto free_and_return;
 801b990:	bf00      	nop
 801b992:	e004      	b.n	801b99e <ethernet_input+0x106>
        goto free_and_return;
 801b994:	bf00      	nop
 801b996:	e002      	b.n	801b99e <ethernet_input+0x106>
        goto free_and_return;
 801b998:	bf00      	nop
 801b99a:	e000      	b.n	801b99e <ethernet_input+0x106>
        goto free_and_return;
 801b99c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b99e:	6878      	ldr	r0, [r7, #4]
 801b9a0:	f7f6 fdfa 	bl	8012598 <pbuf_free>
  return ERR_OK;
 801b9a4:	2300      	movs	r3, #0
}
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	3718      	adds	r7, #24
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}
 801b9ae:	bf00      	nop
 801b9b0:	0802453c 	.word	0x0802453c

0801b9b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b086      	sub	sp, #24
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	60f8      	str	r0, [r7, #12]
 801b9bc:	60b9      	str	r1, [r7, #8]
 801b9be:	607a      	str	r2, [r7, #4]
 801b9c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b9c2:	8c3b      	ldrh	r3, [r7, #32]
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	f7f5 fa3b 	bl	8010e40 <lwip_htons>
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b9ce:	210e      	movs	r1, #14
 801b9d0:	68b8      	ldr	r0, [r7, #8]
 801b9d2:	f7f6 fd4b 	bl	801246c <pbuf_add_header>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d125      	bne.n	801ba28 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	685b      	ldr	r3, [r3, #4]
 801b9e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b9e2:	693b      	ldr	r3, [r7, #16]
 801b9e4:	8afa      	ldrh	r2, [r7, #22]
 801b9e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b9e8:	693b      	ldr	r3, [r7, #16]
 801b9ea:	2206      	movs	r2, #6
 801b9ec:	6839      	ldr	r1, [r7, #0]
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	f000 fb0d 	bl	801c00e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b9f4:	693b      	ldr	r3, [r7, #16]
 801b9f6:	3306      	adds	r3, #6
 801b9f8:	2206      	movs	r2, #6
 801b9fa:	6879      	ldr	r1, [r7, #4]
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f000 fb06 	bl	801c00e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ba08:	2b06      	cmp	r3, #6
 801ba0a:	d006      	beq.n	801ba1a <ethernet_output+0x66>
 801ba0c:	4b0a      	ldr	r3, [pc, #40]	; (801ba38 <ethernet_output+0x84>)
 801ba0e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ba12:	490a      	ldr	r1, [pc, #40]	; (801ba3c <ethernet_output+0x88>)
 801ba14:	480a      	ldr	r0, [pc, #40]	; (801ba40 <ethernet_output+0x8c>)
 801ba16:	f000 fb85 	bl	801c124 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	699b      	ldr	r3, [r3, #24]
 801ba1e:	68b9      	ldr	r1, [r7, #8]
 801ba20:	68f8      	ldr	r0, [r7, #12]
 801ba22:	4798      	blx	r3
 801ba24:	4603      	mov	r3, r0
 801ba26:	e002      	b.n	801ba2e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ba28:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ba2a:	f06f 0301 	mvn.w	r3, #1
}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	3718      	adds	r7, #24
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd80      	pop	{r7, pc}
 801ba36:	bf00      	nop
 801ba38:	080213a8 	.word	0x080213a8
 801ba3c:	080213e0 	.word	0x080213e0
 801ba40:	08021414 	.word	0x08021414

0801ba44 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b082      	sub	sp, #8
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
 801ba4c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ba4e:	683b      	ldr	r3, [r7, #0]
 801ba50:	2200      	movs	r2, #0
 801ba52:	2104      	movs	r1, #4
 801ba54:	4618      	mov	r0, r3
 801ba56:	f7ef fb6d 	bl	800b134 <osMessageQueueNew>
 801ba5a:	4602      	mov	r2, r0
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d102      	bne.n	801ba6e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ba68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba6c:	e000      	b.n	801ba70 <sys_mbox_new+0x2c>

  return ERR_OK;
 801ba6e:	2300      	movs	r3, #0
}
 801ba70:	4618      	mov	r0, r3
 801ba72:	3708      	adds	r7, #8
 801ba74:	46bd      	mov	sp, r7
 801ba76:	bd80      	pop	{r7, pc}

0801ba78 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b082      	sub	sp, #8
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7ef fc87 	bl	800b398 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7ef fca2 	bl	800b3d8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ba94:	bf00      	nop
 801ba96:	3708      	adds	r7, #8
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}

0801ba9c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b084      	sub	sp, #16
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
 801baa4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	6818      	ldr	r0, [r3, #0]
 801baaa:	4639      	mov	r1, r7
 801baac:	2300      	movs	r3, #0
 801baae:	2200      	movs	r2, #0
 801bab0:	f7ef fbb4 	bl	800b21c <osMessageQueuePut>
 801bab4:	4603      	mov	r3, r0
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d102      	bne.n	801bac0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801baba:	2300      	movs	r3, #0
 801babc:	73fb      	strb	r3, [r7, #15]
 801babe:	e001      	b.n	801bac4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bac0:	23ff      	movs	r3, #255	; 0xff
 801bac2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801bac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bac8:	4618      	mov	r0, r3
 801baca:	3710      	adds	r7, #16
 801bacc:	46bd      	mov	sp, r7
 801bace:	bd80      	pop	{r7, pc}

0801bad0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b086      	sub	sp, #24
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	60f8      	str	r0, [r7, #12]
 801bad8:	60b9      	str	r1, [r7, #8]
 801bada:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801badc:	f7ef f816 	bl	800ab0c <osKernelGetTickCount>
 801bae0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d013      	beq.n	801bb10 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	6818      	ldr	r0, [r3, #0]
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	2200      	movs	r2, #0
 801baf0:	68b9      	ldr	r1, [r7, #8]
 801baf2:	f7ef fbf3 	bl	800b2dc <osMessageQueueGet>
 801baf6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801baf8:	693b      	ldr	r3, [r7, #16]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d105      	bne.n	801bb0a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801bafe:	f7ef f805 	bl	800ab0c <osKernelGetTickCount>
 801bb02:	4602      	mov	r2, r0
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	1ad3      	subs	r3, r2, r3
 801bb08:	e00f      	b.n	801bb2a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bb0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb0e:	e00c      	b.n	801bb2a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	6818      	ldr	r0, [r3, #0]
 801bb14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb18:	2200      	movs	r2, #0
 801bb1a:	68b9      	ldr	r1, [r7, #8]
 801bb1c:	f7ef fbde 	bl	800b2dc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801bb20:	f7ee fff4 	bl	800ab0c <osKernelGetTickCount>
 801bb24:	4602      	mov	r2, r0
 801bb26:	697b      	ldr	r3, [r7, #20]
 801bb28:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801bb2a:	4618      	mov	r0, r3
 801bb2c:	3718      	adds	r7, #24
 801bb2e:	46bd      	mov	sp, r7
 801bb30:	bd80      	pop	{r7, pc}

0801bb32 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801bb32:	b580      	push	{r7, lr}
 801bb34:	b082      	sub	sp, #8
 801bb36:	af00      	add	r7, sp, #0
 801bb38:	6078      	str	r0, [r7, #4]
 801bb3a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	6818      	ldr	r0, [r3, #0]
 801bb40:	2300      	movs	r3, #0
 801bb42:	2200      	movs	r2, #0
 801bb44:	6839      	ldr	r1, [r7, #0]
 801bb46:	f7ef fbc9 	bl	800b2dc <osMessageQueueGet>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d101      	bne.n	801bb54 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801bb50:	2300      	movs	r3, #0
 801bb52:	e001      	b.n	801bb58 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801bb54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801bb58:	4618      	mov	r0, r3
 801bb5a:	3708      	adds	r7, #8
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}

0801bb60 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801bb60:	b480      	push	{r7}
 801bb62:	b083      	sub	sp, #12
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d101      	bne.n	801bb74 <sys_mbox_valid+0x14>
    return 0;
 801bb70:	2300      	movs	r3, #0
 801bb72:	e000      	b.n	801bb76 <sys_mbox_valid+0x16>
  else
    return 1;
 801bb74:	2301      	movs	r3, #1
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	370c      	adds	r7, #12
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb80:	4770      	bx	lr

0801bb82 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801bb82:	b480      	push	{r7}
 801bb84:	b083      	sub	sp, #12
 801bb86:	af00      	add	r7, sp, #0
 801bb88:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	2200      	movs	r2, #0
 801bb8e:	601a      	str	r2, [r3, #0]
}
 801bb90:	bf00      	nop
 801bb92:	370c      	adds	r7, #12
 801bb94:	46bd      	mov	sp, r7
 801bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9a:	4770      	bx	lr

0801bb9c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b082      	sub	sp, #8
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
 801bba4:	460b      	mov	r3, r1
 801bba6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801bba8:	78fb      	ldrb	r3, [r7, #3]
 801bbaa:	2200      	movs	r2, #0
 801bbac:	4619      	mov	r1, r3
 801bbae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bbb2:	f7ef f97b 	bl	800aeac <osSemaphoreNew>
 801bbb6:	4602      	mov	r2, r0
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d102      	bne.n	801bbca <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801bbc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bbc8:	e009      	b.n	801bbde <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801bbca:	78fb      	ldrb	r3, [r7, #3]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d105      	bne.n	801bbdc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	2100      	movs	r1, #0
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	f7ef f9f2 	bl	800afc0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801bbdc:	2300      	movs	r3, #0
}
 801bbde:	4618      	mov	r0, r3
 801bbe0:	3708      	adds	r7, #8
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd80      	pop	{r7, pc}

0801bbe6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801bbe6:	b580      	push	{r7, lr}
 801bbe8:	b084      	sub	sp, #16
 801bbea:	af00      	add	r7, sp, #0
 801bbec:	6078      	str	r0, [r7, #4]
 801bbee:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801bbf0:	f7ee ff8c 	bl	800ab0c <osKernelGetTickCount>
 801bbf4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d011      	beq.n	801bc20 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	6839      	ldr	r1, [r7, #0]
 801bc02:	4618      	mov	r0, r3
 801bc04:	f7ef f9dc 	bl	800afc0 <osSemaphoreAcquire>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d105      	bne.n	801bc1a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801bc0e:	f7ee ff7d 	bl	800ab0c <osKernelGetTickCount>
 801bc12:	4602      	mov	r2, r0
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	1ad3      	subs	r3, r2, r3
 801bc18:	e012      	b.n	801bc40 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bc1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc1e:	e00f      	b.n	801bc40 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801bc20:	bf00      	nop
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	f7ef f9c8 	bl	800afc0 <osSemaphoreAcquire>
 801bc30:	4603      	mov	r3, r0
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d1f5      	bne.n	801bc22 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801bc36:	f7ee ff69 	bl	800ab0c <osKernelGetTickCount>
 801bc3a:	4602      	mov	r2, r0
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801bc40:	4618      	mov	r0, r3
 801bc42:	3710      	adds	r7, #16
 801bc44:	46bd      	mov	sp, r7
 801bc46:	bd80      	pop	{r7, pc}

0801bc48 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801bc48:	b580      	push	{r7, lr}
 801bc4a:	b082      	sub	sp, #8
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	4618      	mov	r0, r3
 801bc56:	f7ef fa05 	bl	800b064 <osSemaphoreRelease>
}
 801bc5a:	bf00      	nop
 801bc5c:	3708      	adds	r7, #8
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	bd80      	pop	{r7, pc}

0801bc62 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801bc62:	b580      	push	{r7, lr}
 801bc64:	b082      	sub	sp, #8
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	4618      	mov	r0, r3
 801bc70:	f7ef fa3c 	bl	800b0ec <osSemaphoreDelete>
}
 801bc74:	bf00      	nop
 801bc76:	3708      	adds	r7, #8
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	bd80      	pop	{r7, pc}

0801bc7c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801bc7c:	b480      	push	{r7}
 801bc7e:	b083      	sub	sp, #12
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d101      	bne.n	801bc90 <sys_sem_valid+0x14>
    return 0;
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	e000      	b.n	801bc92 <sys_sem_valid+0x16>
  else
    return 1;
 801bc90:	2301      	movs	r3, #1
}
 801bc92:	4618      	mov	r0, r3
 801bc94:	370c      	adds	r7, #12
 801bc96:	46bd      	mov	sp, r7
 801bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc9c:	4770      	bx	lr

0801bc9e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801bc9e:	b480      	push	{r7}
 801bca0:	b083      	sub	sp, #12
 801bca2:	af00      	add	r7, sp, #0
 801bca4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	2200      	movs	r2, #0
 801bcaa:	601a      	str	r2, [r3, #0]
}
 801bcac:	bf00      	nop
 801bcae:	370c      	adds	r7, #12
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb6:	4770      	bx	lr

0801bcb8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801bcbc:	2000      	movs	r0, #0
 801bcbe:	f7ee ffe7 	bl	800ac90 <osMutexNew>
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	4a01      	ldr	r2, [pc, #4]	; (801bccc <sys_init+0x14>)
 801bcc6:	6013      	str	r3, [r2, #0]
#endif
}
 801bcc8:	bf00      	nop
 801bcca:	bd80      	pop	{r7, pc}
 801bccc:	20014f84 	.word	0x20014f84

0801bcd0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b082      	sub	sp, #8
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801bcd8:	2000      	movs	r0, #0
 801bcda:	f7ee ffd9 	bl	800ac90 <osMutexNew>
 801bcde:	4602      	mov	r2, r0
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d102      	bne.n	801bcf2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801bcec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bcf0:	e000      	b.n	801bcf4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801bcf2:	2300      	movs	r3, #0
}
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	3708      	adds	r7, #8
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}

0801bcfc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b082      	sub	sp, #8
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	f7ef f845 	bl	800ad9c <osMutexAcquire>
#endif
}
 801bd12:	bf00      	nop
 801bd14:	3708      	adds	r7, #8
 801bd16:	46bd      	mov	sp, r7
 801bd18:	bd80      	pop	{r7, pc}

0801bd1a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801bd1a:	b580      	push	{r7, lr}
 801bd1c:	b082      	sub	sp, #8
 801bd1e:	af00      	add	r7, sp, #0
 801bd20:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7ef f883 	bl	800ae32 <osMutexRelease>
}
 801bd2c:	bf00      	nop
 801bd2e:	3708      	adds	r7, #8
 801bd30:	46bd      	mov	sp, r7
 801bd32:	bd80      	pop	{r7, pc}

0801bd34 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b08e      	sub	sp, #56	; 0x38
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	60f8      	str	r0, [r7, #12]
 801bd3c:	60b9      	str	r1, [r7, #8]
 801bd3e:	607a      	str	r2, [r7, #4]
 801bd40:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801bd42:	f107 0314 	add.w	r3, r7, #20
 801bd46:	2224      	movs	r2, #36	; 0x24
 801bd48:	2100      	movs	r1, #0
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f000 f987 	bl	801c05e <memset>
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	617b      	str	r3, [r7, #20]
 801bd54:	683b      	ldr	r3, [r7, #0]
 801bd56:	62bb      	str	r3, [r7, #40]	; 0x28
 801bd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801bd5c:	f107 0314 	add.w	r3, r7, #20
 801bd60:	461a      	mov	r2, r3
 801bd62:	6879      	ldr	r1, [r7, #4]
 801bd64:	68b8      	ldr	r0, [r7, #8]
 801bd66:	f7ee fee6 	bl	800ab36 <osThreadNew>
 801bd6a:	4603      	mov	r3, r0
#endif
}
 801bd6c:	4618      	mov	r0, r3
 801bd6e:	3738      	adds	r7, #56	; 0x38
 801bd70:	46bd      	mov	sp, r7
 801bd72:	bd80      	pop	{r7, pc}

0801bd74 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801bd78:	4b04      	ldr	r3, [pc, #16]	; (801bd8c <sys_arch_protect+0x18>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bd80:	4618      	mov	r0, r3
 801bd82:	f7ef f80b 	bl	800ad9c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801bd86:	2301      	movs	r3, #1
}
 801bd88:	4618      	mov	r0, r3
 801bd8a:	bd80      	pop	{r7, pc}
 801bd8c:	20014f84 	.word	0x20014f84

0801bd90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b082      	sub	sp, #8
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801bd98:	4b04      	ldr	r3, [pc, #16]	; (801bdac <sys_arch_unprotect+0x1c>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f7ef f848 	bl	800ae32 <osMutexRelease>
}
 801bda2:	bf00      	nop
 801bda4:	3708      	adds	r7, #8
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}
 801bdaa:	bf00      	nop
 801bdac:	20014f84 	.word	0x20014f84

0801bdb0 <atoi>:
 801bdb0:	220a      	movs	r2, #10
 801bdb2:	2100      	movs	r1, #0
 801bdb4:	f000 bc5a 	b.w	801c66c <strtol>

0801bdb8 <std>:
 801bdb8:	2300      	movs	r3, #0
 801bdba:	b510      	push	{r4, lr}
 801bdbc:	4604      	mov	r4, r0
 801bdbe:	e9c0 3300 	strd	r3, r3, [r0]
 801bdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bdc6:	6083      	str	r3, [r0, #8]
 801bdc8:	8181      	strh	r1, [r0, #12]
 801bdca:	6643      	str	r3, [r0, #100]	; 0x64
 801bdcc:	81c2      	strh	r2, [r0, #14]
 801bdce:	6183      	str	r3, [r0, #24]
 801bdd0:	4619      	mov	r1, r3
 801bdd2:	2208      	movs	r2, #8
 801bdd4:	305c      	adds	r0, #92	; 0x5c
 801bdd6:	f000 f942 	bl	801c05e <memset>
 801bdda:	4b05      	ldr	r3, [pc, #20]	; (801bdf0 <std+0x38>)
 801bddc:	6263      	str	r3, [r4, #36]	; 0x24
 801bdde:	4b05      	ldr	r3, [pc, #20]	; (801bdf4 <std+0x3c>)
 801bde0:	62a3      	str	r3, [r4, #40]	; 0x28
 801bde2:	4b05      	ldr	r3, [pc, #20]	; (801bdf8 <std+0x40>)
 801bde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bde6:	4b05      	ldr	r3, [pc, #20]	; (801bdfc <std+0x44>)
 801bde8:	6224      	str	r4, [r4, #32]
 801bdea:	6323      	str	r3, [r4, #48]	; 0x30
 801bdec:	bd10      	pop	{r4, pc}
 801bdee:	bf00      	nop
 801bdf0:	0801c3f5 	.word	0x0801c3f5
 801bdf4:	0801c417 	.word	0x0801c417
 801bdf8:	0801c44f 	.word	0x0801c44f
 801bdfc:	0801c473 	.word	0x0801c473

0801be00 <_cleanup_r>:
 801be00:	4901      	ldr	r1, [pc, #4]	; (801be08 <_cleanup_r+0x8>)
 801be02:	f000 b8af 	b.w	801bf64 <_fwalk_reent>
 801be06:	bf00      	nop
 801be08:	0801c999 	.word	0x0801c999

0801be0c <__sfmoreglue>:
 801be0c:	b570      	push	{r4, r5, r6, lr}
 801be0e:	1e4a      	subs	r2, r1, #1
 801be10:	2568      	movs	r5, #104	; 0x68
 801be12:	4355      	muls	r5, r2
 801be14:	460e      	mov	r6, r1
 801be16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801be1a:	f000 f929 	bl	801c070 <_malloc_r>
 801be1e:	4604      	mov	r4, r0
 801be20:	b140      	cbz	r0, 801be34 <__sfmoreglue+0x28>
 801be22:	2100      	movs	r1, #0
 801be24:	e9c0 1600 	strd	r1, r6, [r0]
 801be28:	300c      	adds	r0, #12
 801be2a:	60a0      	str	r0, [r4, #8]
 801be2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801be30:	f000 f915 	bl	801c05e <memset>
 801be34:	4620      	mov	r0, r4
 801be36:	bd70      	pop	{r4, r5, r6, pc}

0801be38 <__sfp_lock_acquire>:
 801be38:	4801      	ldr	r0, [pc, #4]	; (801be40 <__sfp_lock_acquire+0x8>)
 801be3a:	f000 b8d8 	b.w	801bfee <__retarget_lock_acquire_recursive>
 801be3e:	bf00      	nop
 801be40:	20014f90 	.word	0x20014f90

0801be44 <__sfp_lock_release>:
 801be44:	4801      	ldr	r0, [pc, #4]	; (801be4c <__sfp_lock_release+0x8>)
 801be46:	f000 b8d3 	b.w	801bff0 <__retarget_lock_release_recursive>
 801be4a:	bf00      	nop
 801be4c:	20014f90 	.word	0x20014f90

0801be50 <__sinit_lock_acquire>:
 801be50:	4801      	ldr	r0, [pc, #4]	; (801be58 <__sinit_lock_acquire+0x8>)
 801be52:	f000 b8cc 	b.w	801bfee <__retarget_lock_acquire_recursive>
 801be56:	bf00      	nop
 801be58:	20014f8b 	.word	0x20014f8b

0801be5c <__sinit_lock_release>:
 801be5c:	4801      	ldr	r0, [pc, #4]	; (801be64 <__sinit_lock_release+0x8>)
 801be5e:	f000 b8c7 	b.w	801bff0 <__retarget_lock_release_recursive>
 801be62:	bf00      	nop
 801be64:	20014f8b 	.word	0x20014f8b

0801be68 <__sinit>:
 801be68:	b510      	push	{r4, lr}
 801be6a:	4604      	mov	r4, r0
 801be6c:	f7ff fff0 	bl	801be50 <__sinit_lock_acquire>
 801be70:	69a3      	ldr	r3, [r4, #24]
 801be72:	b11b      	cbz	r3, 801be7c <__sinit+0x14>
 801be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be78:	f7ff bff0 	b.w	801be5c <__sinit_lock_release>
 801be7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801be80:	6523      	str	r3, [r4, #80]	; 0x50
 801be82:	4b13      	ldr	r3, [pc, #76]	; (801bed0 <__sinit+0x68>)
 801be84:	4a13      	ldr	r2, [pc, #76]	; (801bed4 <__sinit+0x6c>)
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	62a2      	str	r2, [r4, #40]	; 0x28
 801be8a:	42a3      	cmp	r3, r4
 801be8c:	bf04      	itt	eq
 801be8e:	2301      	moveq	r3, #1
 801be90:	61a3      	streq	r3, [r4, #24]
 801be92:	4620      	mov	r0, r4
 801be94:	f000 f820 	bl	801bed8 <__sfp>
 801be98:	6060      	str	r0, [r4, #4]
 801be9a:	4620      	mov	r0, r4
 801be9c:	f000 f81c 	bl	801bed8 <__sfp>
 801bea0:	60a0      	str	r0, [r4, #8]
 801bea2:	4620      	mov	r0, r4
 801bea4:	f000 f818 	bl	801bed8 <__sfp>
 801bea8:	2200      	movs	r2, #0
 801beaa:	60e0      	str	r0, [r4, #12]
 801beac:	2104      	movs	r1, #4
 801beae:	6860      	ldr	r0, [r4, #4]
 801beb0:	f7ff ff82 	bl	801bdb8 <std>
 801beb4:	68a0      	ldr	r0, [r4, #8]
 801beb6:	2201      	movs	r2, #1
 801beb8:	2109      	movs	r1, #9
 801beba:	f7ff ff7d 	bl	801bdb8 <std>
 801bebe:	68e0      	ldr	r0, [r4, #12]
 801bec0:	2202      	movs	r2, #2
 801bec2:	2112      	movs	r1, #18
 801bec4:	f7ff ff78 	bl	801bdb8 <std>
 801bec8:	2301      	movs	r3, #1
 801beca:	61a3      	str	r3, [r4, #24]
 801becc:	e7d2      	b.n	801be74 <__sinit+0xc>
 801bece:	bf00      	nop
 801bed0:	080246ac 	.word	0x080246ac
 801bed4:	0801be01 	.word	0x0801be01

0801bed8 <__sfp>:
 801bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beda:	4607      	mov	r7, r0
 801bedc:	f7ff ffac 	bl	801be38 <__sfp_lock_acquire>
 801bee0:	4b1e      	ldr	r3, [pc, #120]	; (801bf5c <__sfp+0x84>)
 801bee2:	681e      	ldr	r6, [r3, #0]
 801bee4:	69b3      	ldr	r3, [r6, #24]
 801bee6:	b913      	cbnz	r3, 801beee <__sfp+0x16>
 801bee8:	4630      	mov	r0, r6
 801beea:	f7ff ffbd 	bl	801be68 <__sinit>
 801beee:	3648      	adds	r6, #72	; 0x48
 801bef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bef4:	3b01      	subs	r3, #1
 801bef6:	d503      	bpl.n	801bf00 <__sfp+0x28>
 801bef8:	6833      	ldr	r3, [r6, #0]
 801befa:	b30b      	cbz	r3, 801bf40 <__sfp+0x68>
 801befc:	6836      	ldr	r6, [r6, #0]
 801befe:	e7f7      	b.n	801bef0 <__sfp+0x18>
 801bf00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bf04:	b9d5      	cbnz	r5, 801bf3c <__sfp+0x64>
 801bf06:	4b16      	ldr	r3, [pc, #88]	; (801bf60 <__sfp+0x88>)
 801bf08:	60e3      	str	r3, [r4, #12]
 801bf0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bf0e:	6665      	str	r5, [r4, #100]	; 0x64
 801bf10:	f000 f86c 	bl	801bfec <__retarget_lock_init_recursive>
 801bf14:	f7ff ff96 	bl	801be44 <__sfp_lock_release>
 801bf18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bf1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bf20:	6025      	str	r5, [r4, #0]
 801bf22:	61a5      	str	r5, [r4, #24]
 801bf24:	2208      	movs	r2, #8
 801bf26:	4629      	mov	r1, r5
 801bf28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bf2c:	f000 f897 	bl	801c05e <memset>
 801bf30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bf34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bf38:	4620      	mov	r0, r4
 801bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf3c:	3468      	adds	r4, #104	; 0x68
 801bf3e:	e7d9      	b.n	801bef4 <__sfp+0x1c>
 801bf40:	2104      	movs	r1, #4
 801bf42:	4638      	mov	r0, r7
 801bf44:	f7ff ff62 	bl	801be0c <__sfmoreglue>
 801bf48:	4604      	mov	r4, r0
 801bf4a:	6030      	str	r0, [r6, #0]
 801bf4c:	2800      	cmp	r0, #0
 801bf4e:	d1d5      	bne.n	801befc <__sfp+0x24>
 801bf50:	f7ff ff78 	bl	801be44 <__sfp_lock_release>
 801bf54:	230c      	movs	r3, #12
 801bf56:	603b      	str	r3, [r7, #0]
 801bf58:	e7ee      	b.n	801bf38 <__sfp+0x60>
 801bf5a:	bf00      	nop
 801bf5c:	080246ac 	.word	0x080246ac
 801bf60:	ffff0001 	.word	0xffff0001

0801bf64 <_fwalk_reent>:
 801bf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf68:	4606      	mov	r6, r0
 801bf6a:	4688      	mov	r8, r1
 801bf6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bf70:	2700      	movs	r7, #0
 801bf72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bf76:	f1b9 0901 	subs.w	r9, r9, #1
 801bf7a:	d505      	bpl.n	801bf88 <_fwalk_reent+0x24>
 801bf7c:	6824      	ldr	r4, [r4, #0]
 801bf7e:	2c00      	cmp	r4, #0
 801bf80:	d1f7      	bne.n	801bf72 <_fwalk_reent+0xe>
 801bf82:	4638      	mov	r0, r7
 801bf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf88:	89ab      	ldrh	r3, [r5, #12]
 801bf8a:	2b01      	cmp	r3, #1
 801bf8c:	d907      	bls.n	801bf9e <_fwalk_reent+0x3a>
 801bf8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf92:	3301      	adds	r3, #1
 801bf94:	d003      	beq.n	801bf9e <_fwalk_reent+0x3a>
 801bf96:	4629      	mov	r1, r5
 801bf98:	4630      	mov	r0, r6
 801bf9a:	47c0      	blx	r8
 801bf9c:	4307      	orrs	r7, r0
 801bf9e:	3568      	adds	r5, #104	; 0x68
 801bfa0:	e7e9      	b.n	801bf76 <_fwalk_reent+0x12>
	...

0801bfa4 <__libc_init_array>:
 801bfa4:	b570      	push	{r4, r5, r6, lr}
 801bfa6:	4d0d      	ldr	r5, [pc, #52]	; (801bfdc <__libc_init_array+0x38>)
 801bfa8:	4c0d      	ldr	r4, [pc, #52]	; (801bfe0 <__libc_init_array+0x3c>)
 801bfaa:	1b64      	subs	r4, r4, r5
 801bfac:	10a4      	asrs	r4, r4, #2
 801bfae:	2600      	movs	r6, #0
 801bfb0:	42a6      	cmp	r6, r4
 801bfb2:	d109      	bne.n	801bfc8 <__libc_init_array+0x24>
 801bfb4:	4d0b      	ldr	r5, [pc, #44]	; (801bfe4 <__libc_init_array+0x40>)
 801bfb6:	4c0c      	ldr	r4, [pc, #48]	; (801bfe8 <__libc_init_array+0x44>)
 801bfb8:	f001 fb0e 	bl	801d5d8 <_init>
 801bfbc:	1b64      	subs	r4, r4, r5
 801bfbe:	10a4      	asrs	r4, r4, #2
 801bfc0:	2600      	movs	r6, #0
 801bfc2:	42a6      	cmp	r6, r4
 801bfc4:	d105      	bne.n	801bfd2 <__libc_init_array+0x2e>
 801bfc6:	bd70      	pop	{r4, r5, r6, pc}
 801bfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 801bfcc:	4798      	blx	r3
 801bfce:	3601      	adds	r6, #1
 801bfd0:	e7ee      	b.n	801bfb0 <__libc_init_array+0xc>
 801bfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 801bfd6:	4798      	blx	r3
 801bfd8:	3601      	adds	r6, #1
 801bfda:	e7f2      	b.n	801bfc2 <__libc_init_array+0x1e>
 801bfdc:	080247a0 	.word	0x080247a0
 801bfe0:	080247a0 	.word	0x080247a0
 801bfe4:	080247a0 	.word	0x080247a0
 801bfe8:	080247a4 	.word	0x080247a4

0801bfec <__retarget_lock_init_recursive>:
 801bfec:	4770      	bx	lr

0801bfee <__retarget_lock_acquire_recursive>:
 801bfee:	4770      	bx	lr

0801bff0 <__retarget_lock_release_recursive>:
 801bff0:	4770      	bx	lr

0801bff2 <memcmp>:
 801bff2:	b530      	push	{r4, r5, lr}
 801bff4:	3901      	subs	r1, #1
 801bff6:	2400      	movs	r4, #0
 801bff8:	42a2      	cmp	r2, r4
 801bffa:	d101      	bne.n	801c000 <memcmp+0xe>
 801bffc:	2000      	movs	r0, #0
 801bffe:	e005      	b.n	801c00c <memcmp+0x1a>
 801c000:	5d03      	ldrb	r3, [r0, r4]
 801c002:	3401      	adds	r4, #1
 801c004:	5d0d      	ldrb	r5, [r1, r4]
 801c006:	42ab      	cmp	r3, r5
 801c008:	d0f6      	beq.n	801bff8 <memcmp+0x6>
 801c00a:	1b58      	subs	r0, r3, r5
 801c00c:	bd30      	pop	{r4, r5, pc}

0801c00e <memcpy>:
 801c00e:	440a      	add	r2, r1
 801c010:	4291      	cmp	r1, r2
 801c012:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c016:	d100      	bne.n	801c01a <memcpy+0xc>
 801c018:	4770      	bx	lr
 801c01a:	b510      	push	{r4, lr}
 801c01c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c020:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c024:	4291      	cmp	r1, r2
 801c026:	d1f9      	bne.n	801c01c <memcpy+0xe>
 801c028:	bd10      	pop	{r4, pc}

0801c02a <memmove>:
 801c02a:	4288      	cmp	r0, r1
 801c02c:	b510      	push	{r4, lr}
 801c02e:	eb01 0402 	add.w	r4, r1, r2
 801c032:	d902      	bls.n	801c03a <memmove+0x10>
 801c034:	4284      	cmp	r4, r0
 801c036:	4623      	mov	r3, r4
 801c038:	d807      	bhi.n	801c04a <memmove+0x20>
 801c03a:	1e43      	subs	r3, r0, #1
 801c03c:	42a1      	cmp	r1, r4
 801c03e:	d008      	beq.n	801c052 <memmove+0x28>
 801c040:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c044:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c048:	e7f8      	b.n	801c03c <memmove+0x12>
 801c04a:	4402      	add	r2, r0
 801c04c:	4601      	mov	r1, r0
 801c04e:	428a      	cmp	r2, r1
 801c050:	d100      	bne.n	801c054 <memmove+0x2a>
 801c052:	bd10      	pop	{r4, pc}
 801c054:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c058:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c05c:	e7f7      	b.n	801c04e <memmove+0x24>

0801c05e <memset>:
 801c05e:	4402      	add	r2, r0
 801c060:	4603      	mov	r3, r0
 801c062:	4293      	cmp	r3, r2
 801c064:	d100      	bne.n	801c068 <memset+0xa>
 801c066:	4770      	bx	lr
 801c068:	f803 1b01 	strb.w	r1, [r3], #1
 801c06c:	e7f9      	b.n	801c062 <memset+0x4>
	...

0801c070 <_malloc_r>:
 801c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c072:	1ccd      	adds	r5, r1, #3
 801c074:	f025 0503 	bic.w	r5, r5, #3
 801c078:	3508      	adds	r5, #8
 801c07a:	2d0c      	cmp	r5, #12
 801c07c:	bf38      	it	cc
 801c07e:	250c      	movcc	r5, #12
 801c080:	2d00      	cmp	r5, #0
 801c082:	4606      	mov	r6, r0
 801c084:	db01      	blt.n	801c08a <_malloc_r+0x1a>
 801c086:	42a9      	cmp	r1, r5
 801c088:	d903      	bls.n	801c092 <_malloc_r+0x22>
 801c08a:	230c      	movs	r3, #12
 801c08c:	6033      	str	r3, [r6, #0]
 801c08e:	2000      	movs	r0, #0
 801c090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c092:	f000 fd4d 	bl	801cb30 <__malloc_lock>
 801c096:	4921      	ldr	r1, [pc, #132]	; (801c11c <_malloc_r+0xac>)
 801c098:	680a      	ldr	r2, [r1, #0]
 801c09a:	4614      	mov	r4, r2
 801c09c:	b99c      	cbnz	r4, 801c0c6 <_malloc_r+0x56>
 801c09e:	4f20      	ldr	r7, [pc, #128]	; (801c120 <_malloc_r+0xb0>)
 801c0a0:	683b      	ldr	r3, [r7, #0]
 801c0a2:	b923      	cbnz	r3, 801c0ae <_malloc_r+0x3e>
 801c0a4:	4621      	mov	r1, r4
 801c0a6:	4630      	mov	r0, r6
 801c0a8:	f000 f974 	bl	801c394 <_sbrk_r>
 801c0ac:	6038      	str	r0, [r7, #0]
 801c0ae:	4629      	mov	r1, r5
 801c0b0:	4630      	mov	r0, r6
 801c0b2:	f000 f96f 	bl	801c394 <_sbrk_r>
 801c0b6:	1c43      	adds	r3, r0, #1
 801c0b8:	d123      	bne.n	801c102 <_malloc_r+0x92>
 801c0ba:	230c      	movs	r3, #12
 801c0bc:	6033      	str	r3, [r6, #0]
 801c0be:	4630      	mov	r0, r6
 801c0c0:	f000 fd3c 	bl	801cb3c <__malloc_unlock>
 801c0c4:	e7e3      	b.n	801c08e <_malloc_r+0x1e>
 801c0c6:	6823      	ldr	r3, [r4, #0]
 801c0c8:	1b5b      	subs	r3, r3, r5
 801c0ca:	d417      	bmi.n	801c0fc <_malloc_r+0x8c>
 801c0cc:	2b0b      	cmp	r3, #11
 801c0ce:	d903      	bls.n	801c0d8 <_malloc_r+0x68>
 801c0d0:	6023      	str	r3, [r4, #0]
 801c0d2:	441c      	add	r4, r3
 801c0d4:	6025      	str	r5, [r4, #0]
 801c0d6:	e004      	b.n	801c0e2 <_malloc_r+0x72>
 801c0d8:	6863      	ldr	r3, [r4, #4]
 801c0da:	42a2      	cmp	r2, r4
 801c0dc:	bf0c      	ite	eq
 801c0de:	600b      	streq	r3, [r1, #0]
 801c0e0:	6053      	strne	r3, [r2, #4]
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	f000 fd2a 	bl	801cb3c <__malloc_unlock>
 801c0e8:	f104 000b 	add.w	r0, r4, #11
 801c0ec:	1d23      	adds	r3, r4, #4
 801c0ee:	f020 0007 	bic.w	r0, r0, #7
 801c0f2:	1ac2      	subs	r2, r0, r3
 801c0f4:	d0cc      	beq.n	801c090 <_malloc_r+0x20>
 801c0f6:	1a1b      	subs	r3, r3, r0
 801c0f8:	50a3      	str	r3, [r4, r2]
 801c0fa:	e7c9      	b.n	801c090 <_malloc_r+0x20>
 801c0fc:	4622      	mov	r2, r4
 801c0fe:	6864      	ldr	r4, [r4, #4]
 801c100:	e7cc      	b.n	801c09c <_malloc_r+0x2c>
 801c102:	1cc4      	adds	r4, r0, #3
 801c104:	f024 0403 	bic.w	r4, r4, #3
 801c108:	42a0      	cmp	r0, r4
 801c10a:	d0e3      	beq.n	801c0d4 <_malloc_r+0x64>
 801c10c:	1a21      	subs	r1, r4, r0
 801c10e:	4630      	mov	r0, r6
 801c110:	f000 f940 	bl	801c394 <_sbrk_r>
 801c114:	3001      	adds	r0, #1
 801c116:	d1dd      	bne.n	801c0d4 <_malloc_r+0x64>
 801c118:	e7cf      	b.n	801c0ba <_malloc_r+0x4a>
 801c11a:	bf00      	nop
 801c11c:	20009a04 	.word	0x20009a04
 801c120:	20009a08 	.word	0x20009a08

0801c124 <iprintf>:
 801c124:	b40f      	push	{r0, r1, r2, r3}
 801c126:	4b0a      	ldr	r3, [pc, #40]	; (801c150 <iprintf+0x2c>)
 801c128:	b513      	push	{r0, r1, r4, lr}
 801c12a:	681c      	ldr	r4, [r3, #0]
 801c12c:	b124      	cbz	r4, 801c138 <iprintf+0x14>
 801c12e:	69a3      	ldr	r3, [r4, #24]
 801c130:	b913      	cbnz	r3, 801c138 <iprintf+0x14>
 801c132:	4620      	mov	r0, r4
 801c134:	f7ff fe98 	bl	801be68 <__sinit>
 801c138:	ab05      	add	r3, sp, #20
 801c13a:	9a04      	ldr	r2, [sp, #16]
 801c13c:	68a1      	ldr	r1, [r4, #8]
 801c13e:	9301      	str	r3, [sp, #4]
 801c140:	4620      	mov	r0, r4
 801c142:	f000 fed7 	bl	801cef4 <_vfiprintf_r>
 801c146:	b002      	add	sp, #8
 801c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c14c:	b004      	add	sp, #16
 801c14e:	4770      	bx	lr
 801c150:	200004a8 	.word	0x200004a8

0801c154 <_puts_r>:
 801c154:	b570      	push	{r4, r5, r6, lr}
 801c156:	460e      	mov	r6, r1
 801c158:	4605      	mov	r5, r0
 801c15a:	b118      	cbz	r0, 801c164 <_puts_r+0x10>
 801c15c:	6983      	ldr	r3, [r0, #24]
 801c15e:	b90b      	cbnz	r3, 801c164 <_puts_r+0x10>
 801c160:	f7ff fe82 	bl	801be68 <__sinit>
 801c164:	69ab      	ldr	r3, [r5, #24]
 801c166:	68ac      	ldr	r4, [r5, #8]
 801c168:	b913      	cbnz	r3, 801c170 <_puts_r+0x1c>
 801c16a:	4628      	mov	r0, r5
 801c16c:	f7ff fe7c 	bl	801be68 <__sinit>
 801c170:	4b2c      	ldr	r3, [pc, #176]	; (801c224 <_puts_r+0xd0>)
 801c172:	429c      	cmp	r4, r3
 801c174:	d120      	bne.n	801c1b8 <_puts_r+0x64>
 801c176:	686c      	ldr	r4, [r5, #4]
 801c178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c17a:	07db      	lsls	r3, r3, #31
 801c17c:	d405      	bmi.n	801c18a <_puts_r+0x36>
 801c17e:	89a3      	ldrh	r3, [r4, #12]
 801c180:	0598      	lsls	r0, r3, #22
 801c182:	d402      	bmi.n	801c18a <_puts_r+0x36>
 801c184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c186:	f7ff ff32 	bl	801bfee <__retarget_lock_acquire_recursive>
 801c18a:	89a3      	ldrh	r3, [r4, #12]
 801c18c:	0719      	lsls	r1, r3, #28
 801c18e:	d51d      	bpl.n	801c1cc <_puts_r+0x78>
 801c190:	6923      	ldr	r3, [r4, #16]
 801c192:	b1db      	cbz	r3, 801c1cc <_puts_r+0x78>
 801c194:	3e01      	subs	r6, #1
 801c196:	68a3      	ldr	r3, [r4, #8]
 801c198:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c19c:	3b01      	subs	r3, #1
 801c19e:	60a3      	str	r3, [r4, #8]
 801c1a0:	bb39      	cbnz	r1, 801c1f2 <_puts_r+0x9e>
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	da38      	bge.n	801c218 <_puts_r+0xc4>
 801c1a6:	4622      	mov	r2, r4
 801c1a8:	210a      	movs	r1, #10
 801c1aa:	4628      	mov	r0, r5
 801c1ac:	f000 fa68 	bl	801c680 <__swbuf_r>
 801c1b0:	3001      	adds	r0, #1
 801c1b2:	d011      	beq.n	801c1d8 <_puts_r+0x84>
 801c1b4:	250a      	movs	r5, #10
 801c1b6:	e011      	b.n	801c1dc <_puts_r+0x88>
 801c1b8:	4b1b      	ldr	r3, [pc, #108]	; (801c228 <_puts_r+0xd4>)
 801c1ba:	429c      	cmp	r4, r3
 801c1bc:	d101      	bne.n	801c1c2 <_puts_r+0x6e>
 801c1be:	68ac      	ldr	r4, [r5, #8]
 801c1c0:	e7da      	b.n	801c178 <_puts_r+0x24>
 801c1c2:	4b1a      	ldr	r3, [pc, #104]	; (801c22c <_puts_r+0xd8>)
 801c1c4:	429c      	cmp	r4, r3
 801c1c6:	bf08      	it	eq
 801c1c8:	68ec      	ldreq	r4, [r5, #12]
 801c1ca:	e7d5      	b.n	801c178 <_puts_r+0x24>
 801c1cc:	4621      	mov	r1, r4
 801c1ce:	4628      	mov	r0, r5
 801c1d0:	f000 faba 	bl	801c748 <__swsetup_r>
 801c1d4:	2800      	cmp	r0, #0
 801c1d6:	d0dd      	beq.n	801c194 <_puts_r+0x40>
 801c1d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c1dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c1de:	07da      	lsls	r2, r3, #31
 801c1e0:	d405      	bmi.n	801c1ee <_puts_r+0x9a>
 801c1e2:	89a3      	ldrh	r3, [r4, #12]
 801c1e4:	059b      	lsls	r3, r3, #22
 801c1e6:	d402      	bmi.n	801c1ee <_puts_r+0x9a>
 801c1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1ea:	f7ff ff01 	bl	801bff0 <__retarget_lock_release_recursive>
 801c1ee:	4628      	mov	r0, r5
 801c1f0:	bd70      	pop	{r4, r5, r6, pc}
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	da04      	bge.n	801c200 <_puts_r+0xac>
 801c1f6:	69a2      	ldr	r2, [r4, #24]
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	dc06      	bgt.n	801c20a <_puts_r+0xb6>
 801c1fc:	290a      	cmp	r1, #10
 801c1fe:	d004      	beq.n	801c20a <_puts_r+0xb6>
 801c200:	6823      	ldr	r3, [r4, #0]
 801c202:	1c5a      	adds	r2, r3, #1
 801c204:	6022      	str	r2, [r4, #0]
 801c206:	7019      	strb	r1, [r3, #0]
 801c208:	e7c5      	b.n	801c196 <_puts_r+0x42>
 801c20a:	4622      	mov	r2, r4
 801c20c:	4628      	mov	r0, r5
 801c20e:	f000 fa37 	bl	801c680 <__swbuf_r>
 801c212:	3001      	adds	r0, #1
 801c214:	d1bf      	bne.n	801c196 <_puts_r+0x42>
 801c216:	e7df      	b.n	801c1d8 <_puts_r+0x84>
 801c218:	6823      	ldr	r3, [r4, #0]
 801c21a:	250a      	movs	r5, #10
 801c21c:	1c5a      	adds	r2, r3, #1
 801c21e:	6022      	str	r2, [r4, #0]
 801c220:	701d      	strb	r5, [r3, #0]
 801c222:	e7db      	b.n	801c1dc <_puts_r+0x88>
 801c224:	0802466c 	.word	0x0802466c
 801c228:	0802468c 	.word	0x0802468c
 801c22c:	0802464c 	.word	0x0802464c

0801c230 <puts>:
 801c230:	4b02      	ldr	r3, [pc, #8]	; (801c23c <puts+0xc>)
 801c232:	4601      	mov	r1, r0
 801c234:	6818      	ldr	r0, [r3, #0]
 801c236:	f7ff bf8d 	b.w	801c154 <_puts_r>
 801c23a:	bf00      	nop
 801c23c:	200004a8 	.word	0x200004a8

0801c240 <rand>:
 801c240:	4b17      	ldr	r3, [pc, #92]	; (801c2a0 <rand+0x60>)
 801c242:	b510      	push	{r4, lr}
 801c244:	681c      	ldr	r4, [r3, #0]
 801c246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c248:	b9b3      	cbnz	r3, 801c278 <rand+0x38>
 801c24a:	2018      	movs	r0, #24
 801c24c:	f000 fc68 	bl	801cb20 <malloc>
 801c250:	63a0      	str	r0, [r4, #56]	; 0x38
 801c252:	b928      	cbnz	r0, 801c260 <rand+0x20>
 801c254:	4602      	mov	r2, r0
 801c256:	4b13      	ldr	r3, [pc, #76]	; (801c2a4 <rand+0x64>)
 801c258:	4813      	ldr	r0, [pc, #76]	; (801c2a8 <rand+0x68>)
 801c25a:	214e      	movs	r1, #78	; 0x4e
 801c25c:	f000 fae2 	bl	801c824 <__assert_func>
 801c260:	4a12      	ldr	r2, [pc, #72]	; (801c2ac <rand+0x6c>)
 801c262:	4b13      	ldr	r3, [pc, #76]	; (801c2b0 <rand+0x70>)
 801c264:	e9c0 2300 	strd	r2, r3, [r0]
 801c268:	4b12      	ldr	r3, [pc, #72]	; (801c2b4 <rand+0x74>)
 801c26a:	6083      	str	r3, [r0, #8]
 801c26c:	230b      	movs	r3, #11
 801c26e:	8183      	strh	r3, [r0, #12]
 801c270:	2201      	movs	r2, #1
 801c272:	2300      	movs	r3, #0
 801c274:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c278:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c27a:	480f      	ldr	r0, [pc, #60]	; (801c2b8 <rand+0x78>)
 801c27c:	690a      	ldr	r2, [r1, #16]
 801c27e:	694b      	ldr	r3, [r1, #20]
 801c280:	4c0e      	ldr	r4, [pc, #56]	; (801c2bc <rand+0x7c>)
 801c282:	4350      	muls	r0, r2
 801c284:	fb04 0003 	mla	r0, r4, r3, r0
 801c288:	fba2 3404 	umull	r3, r4, r2, r4
 801c28c:	1c5a      	adds	r2, r3, #1
 801c28e:	4404      	add	r4, r0
 801c290:	f144 0000 	adc.w	r0, r4, #0
 801c294:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801c298:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c29c:	bd10      	pop	{r4, pc}
 801c29e:	bf00      	nop
 801c2a0:	200004a8 	.word	0x200004a8
 801c2a4:	080246b0 	.word	0x080246b0
 801c2a8:	080246c7 	.word	0x080246c7
 801c2ac:	abcd330e 	.word	0xabcd330e
 801c2b0:	e66d1234 	.word	0xe66d1234
 801c2b4:	0005deec 	.word	0x0005deec
 801c2b8:	5851f42d 	.word	0x5851f42d
 801c2bc:	4c957f2d 	.word	0x4c957f2d

0801c2c0 <cleanup_glue>:
 801c2c0:	b538      	push	{r3, r4, r5, lr}
 801c2c2:	460c      	mov	r4, r1
 801c2c4:	6809      	ldr	r1, [r1, #0]
 801c2c6:	4605      	mov	r5, r0
 801c2c8:	b109      	cbz	r1, 801c2ce <cleanup_glue+0xe>
 801c2ca:	f7ff fff9 	bl	801c2c0 <cleanup_glue>
 801c2ce:	4621      	mov	r1, r4
 801c2d0:	4628      	mov	r0, r5
 801c2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2d6:	f000 bc37 	b.w	801cb48 <_free_r>
	...

0801c2dc <_reclaim_reent>:
 801c2dc:	4b2c      	ldr	r3, [pc, #176]	; (801c390 <_reclaim_reent+0xb4>)
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	4283      	cmp	r3, r0
 801c2e2:	b570      	push	{r4, r5, r6, lr}
 801c2e4:	4604      	mov	r4, r0
 801c2e6:	d051      	beq.n	801c38c <_reclaim_reent+0xb0>
 801c2e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c2ea:	b143      	cbz	r3, 801c2fe <_reclaim_reent+0x22>
 801c2ec:	68db      	ldr	r3, [r3, #12]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d14a      	bne.n	801c388 <_reclaim_reent+0xac>
 801c2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c2f4:	6819      	ldr	r1, [r3, #0]
 801c2f6:	b111      	cbz	r1, 801c2fe <_reclaim_reent+0x22>
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	f000 fc25 	bl	801cb48 <_free_r>
 801c2fe:	6961      	ldr	r1, [r4, #20]
 801c300:	b111      	cbz	r1, 801c308 <_reclaim_reent+0x2c>
 801c302:	4620      	mov	r0, r4
 801c304:	f000 fc20 	bl	801cb48 <_free_r>
 801c308:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c30a:	b111      	cbz	r1, 801c312 <_reclaim_reent+0x36>
 801c30c:	4620      	mov	r0, r4
 801c30e:	f000 fc1b 	bl	801cb48 <_free_r>
 801c312:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c314:	b111      	cbz	r1, 801c31c <_reclaim_reent+0x40>
 801c316:	4620      	mov	r0, r4
 801c318:	f000 fc16 	bl	801cb48 <_free_r>
 801c31c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c31e:	b111      	cbz	r1, 801c326 <_reclaim_reent+0x4a>
 801c320:	4620      	mov	r0, r4
 801c322:	f000 fc11 	bl	801cb48 <_free_r>
 801c326:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c328:	b111      	cbz	r1, 801c330 <_reclaim_reent+0x54>
 801c32a:	4620      	mov	r0, r4
 801c32c:	f000 fc0c 	bl	801cb48 <_free_r>
 801c330:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801c332:	b111      	cbz	r1, 801c33a <_reclaim_reent+0x5e>
 801c334:	4620      	mov	r0, r4
 801c336:	f000 fc07 	bl	801cb48 <_free_r>
 801c33a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c33c:	b111      	cbz	r1, 801c344 <_reclaim_reent+0x68>
 801c33e:	4620      	mov	r0, r4
 801c340:	f000 fc02 	bl	801cb48 <_free_r>
 801c344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c346:	b111      	cbz	r1, 801c34e <_reclaim_reent+0x72>
 801c348:	4620      	mov	r0, r4
 801c34a:	f000 fbfd 	bl	801cb48 <_free_r>
 801c34e:	69a3      	ldr	r3, [r4, #24]
 801c350:	b1e3      	cbz	r3, 801c38c <_reclaim_reent+0xb0>
 801c352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c354:	4620      	mov	r0, r4
 801c356:	4798      	blx	r3
 801c358:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c35a:	b1b9      	cbz	r1, 801c38c <_reclaim_reent+0xb0>
 801c35c:	4620      	mov	r0, r4
 801c35e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c362:	f7ff bfad 	b.w	801c2c0 <cleanup_glue>
 801c366:	5949      	ldr	r1, [r1, r5]
 801c368:	b941      	cbnz	r1, 801c37c <_reclaim_reent+0xa0>
 801c36a:	3504      	adds	r5, #4
 801c36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c36e:	2d80      	cmp	r5, #128	; 0x80
 801c370:	68d9      	ldr	r1, [r3, #12]
 801c372:	d1f8      	bne.n	801c366 <_reclaim_reent+0x8a>
 801c374:	4620      	mov	r0, r4
 801c376:	f000 fbe7 	bl	801cb48 <_free_r>
 801c37a:	e7ba      	b.n	801c2f2 <_reclaim_reent+0x16>
 801c37c:	680e      	ldr	r6, [r1, #0]
 801c37e:	4620      	mov	r0, r4
 801c380:	f000 fbe2 	bl	801cb48 <_free_r>
 801c384:	4631      	mov	r1, r6
 801c386:	e7ef      	b.n	801c368 <_reclaim_reent+0x8c>
 801c388:	2500      	movs	r5, #0
 801c38a:	e7ef      	b.n	801c36c <_reclaim_reent+0x90>
 801c38c:	bd70      	pop	{r4, r5, r6, pc}
 801c38e:	bf00      	nop
 801c390:	200004a8 	.word	0x200004a8

0801c394 <_sbrk_r>:
 801c394:	b538      	push	{r3, r4, r5, lr}
 801c396:	4d06      	ldr	r5, [pc, #24]	; (801c3b0 <_sbrk_r+0x1c>)
 801c398:	2300      	movs	r3, #0
 801c39a:	4604      	mov	r4, r0
 801c39c:	4608      	mov	r0, r1
 801c39e:	602b      	str	r3, [r5, #0]
 801c3a0:	f7e4 fd98 	bl	8000ed4 <_sbrk>
 801c3a4:	1c43      	adds	r3, r0, #1
 801c3a6:	d102      	bne.n	801c3ae <_sbrk_r+0x1a>
 801c3a8:	682b      	ldr	r3, [r5, #0]
 801c3aa:	b103      	cbz	r3, 801c3ae <_sbrk_r+0x1a>
 801c3ac:	6023      	str	r3, [r4, #0]
 801c3ae:	bd38      	pop	{r3, r4, r5, pc}
 801c3b0:	20014f80 	.word	0x20014f80

0801c3b4 <siprintf>:
 801c3b4:	b40e      	push	{r1, r2, r3}
 801c3b6:	b500      	push	{lr}
 801c3b8:	b09c      	sub	sp, #112	; 0x70
 801c3ba:	ab1d      	add	r3, sp, #116	; 0x74
 801c3bc:	9002      	str	r0, [sp, #8]
 801c3be:	9006      	str	r0, [sp, #24]
 801c3c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c3c4:	4809      	ldr	r0, [pc, #36]	; (801c3ec <siprintf+0x38>)
 801c3c6:	9107      	str	r1, [sp, #28]
 801c3c8:	9104      	str	r1, [sp, #16]
 801c3ca:	4909      	ldr	r1, [pc, #36]	; (801c3f0 <siprintf+0x3c>)
 801c3cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3d0:	9105      	str	r1, [sp, #20]
 801c3d2:	6800      	ldr	r0, [r0, #0]
 801c3d4:	9301      	str	r3, [sp, #4]
 801c3d6:	a902      	add	r1, sp, #8
 801c3d8:	f000 fc62 	bl	801cca0 <_svfiprintf_r>
 801c3dc:	9b02      	ldr	r3, [sp, #8]
 801c3de:	2200      	movs	r2, #0
 801c3e0:	701a      	strb	r2, [r3, #0]
 801c3e2:	b01c      	add	sp, #112	; 0x70
 801c3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c3e8:	b003      	add	sp, #12
 801c3ea:	4770      	bx	lr
 801c3ec:	200004a8 	.word	0x200004a8
 801c3f0:	ffff0208 	.word	0xffff0208

0801c3f4 <__sread>:
 801c3f4:	b510      	push	{r4, lr}
 801c3f6:	460c      	mov	r4, r1
 801c3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3fc:	f001 f83e 	bl	801d47c <_read_r>
 801c400:	2800      	cmp	r0, #0
 801c402:	bfab      	itete	ge
 801c404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c406:	89a3      	ldrhlt	r3, [r4, #12]
 801c408:	181b      	addge	r3, r3, r0
 801c40a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c40e:	bfac      	ite	ge
 801c410:	6563      	strge	r3, [r4, #84]	; 0x54
 801c412:	81a3      	strhlt	r3, [r4, #12]
 801c414:	bd10      	pop	{r4, pc}

0801c416 <__swrite>:
 801c416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c41a:	461f      	mov	r7, r3
 801c41c:	898b      	ldrh	r3, [r1, #12]
 801c41e:	05db      	lsls	r3, r3, #23
 801c420:	4605      	mov	r5, r0
 801c422:	460c      	mov	r4, r1
 801c424:	4616      	mov	r6, r2
 801c426:	d505      	bpl.n	801c434 <__swrite+0x1e>
 801c428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c42c:	2302      	movs	r3, #2
 801c42e:	2200      	movs	r2, #0
 801c430:	f000 fb00 	bl	801ca34 <_lseek_r>
 801c434:	89a3      	ldrh	r3, [r4, #12]
 801c436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c43a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c43e:	81a3      	strh	r3, [r4, #12]
 801c440:	4632      	mov	r2, r6
 801c442:	463b      	mov	r3, r7
 801c444:	4628      	mov	r0, r5
 801c446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c44a:	f000 b96b 	b.w	801c724 <_write_r>

0801c44e <__sseek>:
 801c44e:	b510      	push	{r4, lr}
 801c450:	460c      	mov	r4, r1
 801c452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c456:	f000 faed 	bl	801ca34 <_lseek_r>
 801c45a:	1c43      	adds	r3, r0, #1
 801c45c:	89a3      	ldrh	r3, [r4, #12]
 801c45e:	bf15      	itete	ne
 801c460:	6560      	strne	r0, [r4, #84]	; 0x54
 801c462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c46a:	81a3      	strheq	r3, [r4, #12]
 801c46c:	bf18      	it	ne
 801c46e:	81a3      	strhne	r3, [r4, #12]
 801c470:	bd10      	pop	{r4, pc}

0801c472 <__sclose>:
 801c472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c476:	f000 b9f3 	b.w	801c860 <_close_r>

0801c47a <strcat>:
 801c47a:	b510      	push	{r4, lr}
 801c47c:	4602      	mov	r2, r0
 801c47e:	7814      	ldrb	r4, [r2, #0]
 801c480:	4613      	mov	r3, r2
 801c482:	3201      	adds	r2, #1
 801c484:	2c00      	cmp	r4, #0
 801c486:	d1fa      	bne.n	801c47e <strcat+0x4>
 801c488:	3b01      	subs	r3, #1
 801c48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c492:	2a00      	cmp	r2, #0
 801c494:	d1f9      	bne.n	801c48a <strcat+0x10>
 801c496:	bd10      	pop	{r4, pc}

0801c498 <strchr>:
 801c498:	b2c9      	uxtb	r1, r1
 801c49a:	4603      	mov	r3, r0
 801c49c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c4a0:	b11a      	cbz	r2, 801c4aa <strchr+0x12>
 801c4a2:	428a      	cmp	r2, r1
 801c4a4:	d1f9      	bne.n	801c49a <strchr+0x2>
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	4770      	bx	lr
 801c4aa:	2900      	cmp	r1, #0
 801c4ac:	bf18      	it	ne
 801c4ae:	2300      	movne	r3, #0
 801c4b0:	e7f9      	b.n	801c4a6 <strchr+0xe>

0801c4b2 <strcpy>:
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4b8:	f803 2b01 	strb.w	r2, [r3], #1
 801c4bc:	2a00      	cmp	r2, #0
 801c4be:	d1f9      	bne.n	801c4b4 <strcpy+0x2>
 801c4c0:	4770      	bx	lr

0801c4c2 <strncmp>:
 801c4c2:	b510      	push	{r4, lr}
 801c4c4:	b16a      	cbz	r2, 801c4e2 <strncmp+0x20>
 801c4c6:	3901      	subs	r1, #1
 801c4c8:	1884      	adds	r4, r0, r2
 801c4ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c4ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c4d2:	4293      	cmp	r3, r2
 801c4d4:	d103      	bne.n	801c4de <strncmp+0x1c>
 801c4d6:	42a0      	cmp	r0, r4
 801c4d8:	d001      	beq.n	801c4de <strncmp+0x1c>
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d1f5      	bne.n	801c4ca <strncmp+0x8>
 801c4de:	1a98      	subs	r0, r3, r2
 801c4e0:	bd10      	pop	{r4, pc}
 801c4e2:	4610      	mov	r0, r2
 801c4e4:	e7fc      	b.n	801c4e0 <strncmp+0x1e>

0801c4e6 <strncpy>:
 801c4e6:	b510      	push	{r4, lr}
 801c4e8:	3901      	subs	r1, #1
 801c4ea:	4603      	mov	r3, r0
 801c4ec:	b132      	cbz	r2, 801c4fc <strncpy+0x16>
 801c4ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c4f2:	f803 4b01 	strb.w	r4, [r3], #1
 801c4f6:	3a01      	subs	r2, #1
 801c4f8:	2c00      	cmp	r4, #0
 801c4fa:	d1f7      	bne.n	801c4ec <strncpy+0x6>
 801c4fc:	441a      	add	r2, r3
 801c4fe:	2100      	movs	r1, #0
 801c500:	4293      	cmp	r3, r2
 801c502:	d100      	bne.n	801c506 <strncpy+0x20>
 801c504:	bd10      	pop	{r4, pc}
 801c506:	f803 1b01 	strb.w	r1, [r3], #1
 801c50a:	e7f9      	b.n	801c500 <strncpy+0x1a>

0801c50c <__strtok_r>:
 801c50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c50e:	b908      	cbnz	r0, 801c514 <__strtok_r+0x8>
 801c510:	6810      	ldr	r0, [r2, #0]
 801c512:	b188      	cbz	r0, 801c538 <__strtok_r+0x2c>
 801c514:	4604      	mov	r4, r0
 801c516:	4620      	mov	r0, r4
 801c518:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c51c:	460f      	mov	r7, r1
 801c51e:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c522:	b91e      	cbnz	r6, 801c52c <__strtok_r+0x20>
 801c524:	b965      	cbnz	r5, 801c540 <__strtok_r+0x34>
 801c526:	6015      	str	r5, [r2, #0]
 801c528:	4628      	mov	r0, r5
 801c52a:	e005      	b.n	801c538 <__strtok_r+0x2c>
 801c52c:	42b5      	cmp	r5, r6
 801c52e:	d1f6      	bne.n	801c51e <__strtok_r+0x12>
 801c530:	2b00      	cmp	r3, #0
 801c532:	d1f0      	bne.n	801c516 <__strtok_r+0xa>
 801c534:	6014      	str	r4, [r2, #0]
 801c536:	7003      	strb	r3, [r0, #0]
 801c538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c53a:	461c      	mov	r4, r3
 801c53c:	e00c      	b.n	801c558 <__strtok_r+0x4c>
 801c53e:	b915      	cbnz	r5, 801c546 <__strtok_r+0x3a>
 801c540:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c544:	460e      	mov	r6, r1
 801c546:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c54a:	42ab      	cmp	r3, r5
 801c54c:	d1f7      	bne.n	801c53e <__strtok_r+0x32>
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d0f3      	beq.n	801c53a <__strtok_r+0x2e>
 801c552:	2300      	movs	r3, #0
 801c554:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c558:	6014      	str	r4, [r2, #0]
 801c55a:	e7ed      	b.n	801c538 <__strtok_r+0x2c>

0801c55c <strtok_r>:
 801c55c:	2301      	movs	r3, #1
 801c55e:	f7ff bfd5 	b.w	801c50c <__strtok_r>
	...

0801c564 <_strtol_l.isra.0>:
 801c564:	2b01      	cmp	r3, #1
 801c566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c56a:	d001      	beq.n	801c570 <_strtol_l.isra.0+0xc>
 801c56c:	2b24      	cmp	r3, #36	; 0x24
 801c56e:	d906      	bls.n	801c57e <_strtol_l.isra.0+0x1a>
 801c570:	f000 f986 	bl	801c880 <__errno>
 801c574:	2316      	movs	r3, #22
 801c576:	6003      	str	r3, [r0, #0]
 801c578:	2000      	movs	r0, #0
 801c57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c57e:	4f3a      	ldr	r7, [pc, #232]	; (801c668 <_strtol_l.isra.0+0x104>)
 801c580:	468e      	mov	lr, r1
 801c582:	4676      	mov	r6, lr
 801c584:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c588:	5de5      	ldrb	r5, [r4, r7]
 801c58a:	f015 0508 	ands.w	r5, r5, #8
 801c58e:	d1f8      	bne.n	801c582 <_strtol_l.isra.0+0x1e>
 801c590:	2c2d      	cmp	r4, #45	; 0x2d
 801c592:	d134      	bne.n	801c5fe <_strtol_l.isra.0+0x9a>
 801c594:	f89e 4000 	ldrb.w	r4, [lr]
 801c598:	f04f 0801 	mov.w	r8, #1
 801c59c:	f106 0e02 	add.w	lr, r6, #2
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d05c      	beq.n	801c65e <_strtol_l.isra.0+0xfa>
 801c5a4:	2b10      	cmp	r3, #16
 801c5a6:	d10c      	bne.n	801c5c2 <_strtol_l.isra.0+0x5e>
 801c5a8:	2c30      	cmp	r4, #48	; 0x30
 801c5aa:	d10a      	bne.n	801c5c2 <_strtol_l.isra.0+0x5e>
 801c5ac:	f89e 4000 	ldrb.w	r4, [lr]
 801c5b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c5b4:	2c58      	cmp	r4, #88	; 0x58
 801c5b6:	d14d      	bne.n	801c654 <_strtol_l.isra.0+0xf0>
 801c5b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c5bc:	2310      	movs	r3, #16
 801c5be:	f10e 0e02 	add.w	lr, lr, #2
 801c5c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c5c6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801c5ca:	2600      	movs	r6, #0
 801c5cc:	fbbc f9f3 	udiv	r9, ip, r3
 801c5d0:	4635      	mov	r5, r6
 801c5d2:	fb03 ca19 	mls	sl, r3, r9, ip
 801c5d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c5da:	2f09      	cmp	r7, #9
 801c5dc:	d818      	bhi.n	801c610 <_strtol_l.isra.0+0xac>
 801c5de:	463c      	mov	r4, r7
 801c5e0:	42a3      	cmp	r3, r4
 801c5e2:	dd24      	ble.n	801c62e <_strtol_l.isra.0+0xca>
 801c5e4:	2e00      	cmp	r6, #0
 801c5e6:	db1f      	blt.n	801c628 <_strtol_l.isra.0+0xc4>
 801c5e8:	45a9      	cmp	r9, r5
 801c5ea:	d31d      	bcc.n	801c628 <_strtol_l.isra.0+0xc4>
 801c5ec:	d101      	bne.n	801c5f2 <_strtol_l.isra.0+0x8e>
 801c5ee:	45a2      	cmp	sl, r4
 801c5f0:	db1a      	blt.n	801c628 <_strtol_l.isra.0+0xc4>
 801c5f2:	fb05 4503 	mla	r5, r5, r3, r4
 801c5f6:	2601      	movs	r6, #1
 801c5f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c5fc:	e7eb      	b.n	801c5d6 <_strtol_l.isra.0+0x72>
 801c5fe:	2c2b      	cmp	r4, #43	; 0x2b
 801c600:	bf08      	it	eq
 801c602:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c606:	46a8      	mov	r8, r5
 801c608:	bf08      	it	eq
 801c60a:	f106 0e02 	addeq.w	lr, r6, #2
 801c60e:	e7c7      	b.n	801c5a0 <_strtol_l.isra.0+0x3c>
 801c610:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c614:	2f19      	cmp	r7, #25
 801c616:	d801      	bhi.n	801c61c <_strtol_l.isra.0+0xb8>
 801c618:	3c37      	subs	r4, #55	; 0x37
 801c61a:	e7e1      	b.n	801c5e0 <_strtol_l.isra.0+0x7c>
 801c61c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c620:	2f19      	cmp	r7, #25
 801c622:	d804      	bhi.n	801c62e <_strtol_l.isra.0+0xca>
 801c624:	3c57      	subs	r4, #87	; 0x57
 801c626:	e7db      	b.n	801c5e0 <_strtol_l.isra.0+0x7c>
 801c628:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801c62c:	e7e4      	b.n	801c5f8 <_strtol_l.isra.0+0x94>
 801c62e:	2e00      	cmp	r6, #0
 801c630:	da05      	bge.n	801c63e <_strtol_l.isra.0+0xda>
 801c632:	2322      	movs	r3, #34	; 0x22
 801c634:	6003      	str	r3, [r0, #0]
 801c636:	4665      	mov	r5, ip
 801c638:	b942      	cbnz	r2, 801c64c <_strtol_l.isra.0+0xe8>
 801c63a:	4628      	mov	r0, r5
 801c63c:	e79d      	b.n	801c57a <_strtol_l.isra.0+0x16>
 801c63e:	f1b8 0f00 	cmp.w	r8, #0
 801c642:	d000      	beq.n	801c646 <_strtol_l.isra.0+0xe2>
 801c644:	426d      	negs	r5, r5
 801c646:	2a00      	cmp	r2, #0
 801c648:	d0f7      	beq.n	801c63a <_strtol_l.isra.0+0xd6>
 801c64a:	b10e      	cbz	r6, 801c650 <_strtol_l.isra.0+0xec>
 801c64c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801c650:	6011      	str	r1, [r2, #0]
 801c652:	e7f2      	b.n	801c63a <_strtol_l.isra.0+0xd6>
 801c654:	2430      	movs	r4, #48	; 0x30
 801c656:	2b00      	cmp	r3, #0
 801c658:	d1b3      	bne.n	801c5c2 <_strtol_l.isra.0+0x5e>
 801c65a:	2308      	movs	r3, #8
 801c65c:	e7b1      	b.n	801c5c2 <_strtol_l.isra.0+0x5e>
 801c65e:	2c30      	cmp	r4, #48	; 0x30
 801c660:	d0a4      	beq.n	801c5ac <_strtol_l.isra.0+0x48>
 801c662:	230a      	movs	r3, #10
 801c664:	e7ad      	b.n	801c5c2 <_strtol_l.isra.0+0x5e>
 801c666:	bf00      	nop
 801c668:	0802454b 	.word	0x0802454b

0801c66c <strtol>:
 801c66c:	4613      	mov	r3, r2
 801c66e:	460a      	mov	r2, r1
 801c670:	4601      	mov	r1, r0
 801c672:	4802      	ldr	r0, [pc, #8]	; (801c67c <strtol+0x10>)
 801c674:	6800      	ldr	r0, [r0, #0]
 801c676:	f7ff bf75 	b.w	801c564 <_strtol_l.isra.0>
 801c67a:	bf00      	nop
 801c67c:	200004a8 	.word	0x200004a8

0801c680 <__swbuf_r>:
 801c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c682:	460e      	mov	r6, r1
 801c684:	4614      	mov	r4, r2
 801c686:	4605      	mov	r5, r0
 801c688:	b118      	cbz	r0, 801c692 <__swbuf_r+0x12>
 801c68a:	6983      	ldr	r3, [r0, #24]
 801c68c:	b90b      	cbnz	r3, 801c692 <__swbuf_r+0x12>
 801c68e:	f7ff fbeb 	bl	801be68 <__sinit>
 801c692:	4b21      	ldr	r3, [pc, #132]	; (801c718 <__swbuf_r+0x98>)
 801c694:	429c      	cmp	r4, r3
 801c696:	d12b      	bne.n	801c6f0 <__swbuf_r+0x70>
 801c698:	686c      	ldr	r4, [r5, #4]
 801c69a:	69a3      	ldr	r3, [r4, #24]
 801c69c:	60a3      	str	r3, [r4, #8]
 801c69e:	89a3      	ldrh	r3, [r4, #12]
 801c6a0:	071a      	lsls	r2, r3, #28
 801c6a2:	d52f      	bpl.n	801c704 <__swbuf_r+0x84>
 801c6a4:	6923      	ldr	r3, [r4, #16]
 801c6a6:	b36b      	cbz	r3, 801c704 <__swbuf_r+0x84>
 801c6a8:	6923      	ldr	r3, [r4, #16]
 801c6aa:	6820      	ldr	r0, [r4, #0]
 801c6ac:	1ac0      	subs	r0, r0, r3
 801c6ae:	6963      	ldr	r3, [r4, #20]
 801c6b0:	b2f6      	uxtb	r6, r6
 801c6b2:	4283      	cmp	r3, r0
 801c6b4:	4637      	mov	r7, r6
 801c6b6:	dc04      	bgt.n	801c6c2 <__swbuf_r+0x42>
 801c6b8:	4621      	mov	r1, r4
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	f000 f96c 	bl	801c998 <_fflush_r>
 801c6c0:	bb30      	cbnz	r0, 801c710 <__swbuf_r+0x90>
 801c6c2:	68a3      	ldr	r3, [r4, #8]
 801c6c4:	3b01      	subs	r3, #1
 801c6c6:	60a3      	str	r3, [r4, #8]
 801c6c8:	6823      	ldr	r3, [r4, #0]
 801c6ca:	1c5a      	adds	r2, r3, #1
 801c6cc:	6022      	str	r2, [r4, #0]
 801c6ce:	701e      	strb	r6, [r3, #0]
 801c6d0:	6963      	ldr	r3, [r4, #20]
 801c6d2:	3001      	adds	r0, #1
 801c6d4:	4283      	cmp	r3, r0
 801c6d6:	d004      	beq.n	801c6e2 <__swbuf_r+0x62>
 801c6d8:	89a3      	ldrh	r3, [r4, #12]
 801c6da:	07db      	lsls	r3, r3, #31
 801c6dc:	d506      	bpl.n	801c6ec <__swbuf_r+0x6c>
 801c6de:	2e0a      	cmp	r6, #10
 801c6e0:	d104      	bne.n	801c6ec <__swbuf_r+0x6c>
 801c6e2:	4621      	mov	r1, r4
 801c6e4:	4628      	mov	r0, r5
 801c6e6:	f000 f957 	bl	801c998 <_fflush_r>
 801c6ea:	b988      	cbnz	r0, 801c710 <__swbuf_r+0x90>
 801c6ec:	4638      	mov	r0, r7
 801c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6f0:	4b0a      	ldr	r3, [pc, #40]	; (801c71c <__swbuf_r+0x9c>)
 801c6f2:	429c      	cmp	r4, r3
 801c6f4:	d101      	bne.n	801c6fa <__swbuf_r+0x7a>
 801c6f6:	68ac      	ldr	r4, [r5, #8]
 801c6f8:	e7cf      	b.n	801c69a <__swbuf_r+0x1a>
 801c6fa:	4b09      	ldr	r3, [pc, #36]	; (801c720 <__swbuf_r+0xa0>)
 801c6fc:	429c      	cmp	r4, r3
 801c6fe:	bf08      	it	eq
 801c700:	68ec      	ldreq	r4, [r5, #12]
 801c702:	e7ca      	b.n	801c69a <__swbuf_r+0x1a>
 801c704:	4621      	mov	r1, r4
 801c706:	4628      	mov	r0, r5
 801c708:	f000 f81e 	bl	801c748 <__swsetup_r>
 801c70c:	2800      	cmp	r0, #0
 801c70e:	d0cb      	beq.n	801c6a8 <__swbuf_r+0x28>
 801c710:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c714:	e7ea      	b.n	801c6ec <__swbuf_r+0x6c>
 801c716:	bf00      	nop
 801c718:	0802466c 	.word	0x0802466c
 801c71c:	0802468c 	.word	0x0802468c
 801c720:	0802464c 	.word	0x0802464c

0801c724 <_write_r>:
 801c724:	b538      	push	{r3, r4, r5, lr}
 801c726:	4d07      	ldr	r5, [pc, #28]	; (801c744 <_write_r+0x20>)
 801c728:	4604      	mov	r4, r0
 801c72a:	4608      	mov	r0, r1
 801c72c:	4611      	mov	r1, r2
 801c72e:	2200      	movs	r2, #0
 801c730:	602a      	str	r2, [r5, #0]
 801c732:	461a      	mov	r2, r3
 801c734:	f7e3 ff58 	bl	80005e8 <_write>
 801c738:	1c43      	adds	r3, r0, #1
 801c73a:	d102      	bne.n	801c742 <_write_r+0x1e>
 801c73c:	682b      	ldr	r3, [r5, #0]
 801c73e:	b103      	cbz	r3, 801c742 <_write_r+0x1e>
 801c740:	6023      	str	r3, [r4, #0]
 801c742:	bd38      	pop	{r3, r4, r5, pc}
 801c744:	20014f80 	.word	0x20014f80

0801c748 <__swsetup_r>:
 801c748:	4b32      	ldr	r3, [pc, #200]	; (801c814 <__swsetup_r+0xcc>)
 801c74a:	b570      	push	{r4, r5, r6, lr}
 801c74c:	681d      	ldr	r5, [r3, #0]
 801c74e:	4606      	mov	r6, r0
 801c750:	460c      	mov	r4, r1
 801c752:	b125      	cbz	r5, 801c75e <__swsetup_r+0x16>
 801c754:	69ab      	ldr	r3, [r5, #24]
 801c756:	b913      	cbnz	r3, 801c75e <__swsetup_r+0x16>
 801c758:	4628      	mov	r0, r5
 801c75a:	f7ff fb85 	bl	801be68 <__sinit>
 801c75e:	4b2e      	ldr	r3, [pc, #184]	; (801c818 <__swsetup_r+0xd0>)
 801c760:	429c      	cmp	r4, r3
 801c762:	d10f      	bne.n	801c784 <__swsetup_r+0x3c>
 801c764:	686c      	ldr	r4, [r5, #4]
 801c766:	89a3      	ldrh	r3, [r4, #12]
 801c768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c76c:	0719      	lsls	r1, r3, #28
 801c76e:	d42c      	bmi.n	801c7ca <__swsetup_r+0x82>
 801c770:	06dd      	lsls	r5, r3, #27
 801c772:	d411      	bmi.n	801c798 <__swsetup_r+0x50>
 801c774:	2309      	movs	r3, #9
 801c776:	6033      	str	r3, [r6, #0]
 801c778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c77c:	81a3      	strh	r3, [r4, #12]
 801c77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c782:	e03e      	b.n	801c802 <__swsetup_r+0xba>
 801c784:	4b25      	ldr	r3, [pc, #148]	; (801c81c <__swsetup_r+0xd4>)
 801c786:	429c      	cmp	r4, r3
 801c788:	d101      	bne.n	801c78e <__swsetup_r+0x46>
 801c78a:	68ac      	ldr	r4, [r5, #8]
 801c78c:	e7eb      	b.n	801c766 <__swsetup_r+0x1e>
 801c78e:	4b24      	ldr	r3, [pc, #144]	; (801c820 <__swsetup_r+0xd8>)
 801c790:	429c      	cmp	r4, r3
 801c792:	bf08      	it	eq
 801c794:	68ec      	ldreq	r4, [r5, #12]
 801c796:	e7e6      	b.n	801c766 <__swsetup_r+0x1e>
 801c798:	0758      	lsls	r0, r3, #29
 801c79a:	d512      	bpl.n	801c7c2 <__swsetup_r+0x7a>
 801c79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c79e:	b141      	cbz	r1, 801c7b2 <__swsetup_r+0x6a>
 801c7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c7a4:	4299      	cmp	r1, r3
 801c7a6:	d002      	beq.n	801c7ae <__swsetup_r+0x66>
 801c7a8:	4630      	mov	r0, r6
 801c7aa:	f000 f9cd 	bl	801cb48 <_free_r>
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	6363      	str	r3, [r4, #52]	; 0x34
 801c7b2:	89a3      	ldrh	r3, [r4, #12]
 801c7b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c7b8:	81a3      	strh	r3, [r4, #12]
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	6063      	str	r3, [r4, #4]
 801c7be:	6923      	ldr	r3, [r4, #16]
 801c7c0:	6023      	str	r3, [r4, #0]
 801c7c2:	89a3      	ldrh	r3, [r4, #12]
 801c7c4:	f043 0308 	orr.w	r3, r3, #8
 801c7c8:	81a3      	strh	r3, [r4, #12]
 801c7ca:	6923      	ldr	r3, [r4, #16]
 801c7cc:	b94b      	cbnz	r3, 801c7e2 <__swsetup_r+0x9a>
 801c7ce:	89a3      	ldrh	r3, [r4, #12]
 801c7d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c7d8:	d003      	beq.n	801c7e2 <__swsetup_r+0x9a>
 801c7da:	4621      	mov	r1, r4
 801c7dc:	4630      	mov	r0, r6
 801c7de:	f000 f95f 	bl	801caa0 <__smakebuf_r>
 801c7e2:	89a0      	ldrh	r0, [r4, #12]
 801c7e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c7e8:	f010 0301 	ands.w	r3, r0, #1
 801c7ec:	d00a      	beq.n	801c804 <__swsetup_r+0xbc>
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	60a3      	str	r3, [r4, #8]
 801c7f2:	6963      	ldr	r3, [r4, #20]
 801c7f4:	425b      	negs	r3, r3
 801c7f6:	61a3      	str	r3, [r4, #24]
 801c7f8:	6923      	ldr	r3, [r4, #16]
 801c7fa:	b943      	cbnz	r3, 801c80e <__swsetup_r+0xc6>
 801c7fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c800:	d1ba      	bne.n	801c778 <__swsetup_r+0x30>
 801c802:	bd70      	pop	{r4, r5, r6, pc}
 801c804:	0781      	lsls	r1, r0, #30
 801c806:	bf58      	it	pl
 801c808:	6963      	ldrpl	r3, [r4, #20]
 801c80a:	60a3      	str	r3, [r4, #8]
 801c80c:	e7f4      	b.n	801c7f8 <__swsetup_r+0xb0>
 801c80e:	2000      	movs	r0, #0
 801c810:	e7f7      	b.n	801c802 <__swsetup_r+0xba>
 801c812:	bf00      	nop
 801c814:	200004a8 	.word	0x200004a8
 801c818:	0802466c 	.word	0x0802466c
 801c81c:	0802468c 	.word	0x0802468c
 801c820:	0802464c 	.word	0x0802464c

0801c824 <__assert_func>:
 801c824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c826:	4614      	mov	r4, r2
 801c828:	461a      	mov	r2, r3
 801c82a:	4b09      	ldr	r3, [pc, #36]	; (801c850 <__assert_func+0x2c>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	4605      	mov	r5, r0
 801c830:	68d8      	ldr	r0, [r3, #12]
 801c832:	b14c      	cbz	r4, 801c848 <__assert_func+0x24>
 801c834:	4b07      	ldr	r3, [pc, #28]	; (801c854 <__assert_func+0x30>)
 801c836:	9100      	str	r1, [sp, #0]
 801c838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c83c:	4906      	ldr	r1, [pc, #24]	; (801c858 <__assert_func+0x34>)
 801c83e:	462b      	mov	r3, r5
 801c840:	f000 f8e6 	bl	801ca10 <fiprintf>
 801c844:	f000 fe2c 	bl	801d4a0 <abort>
 801c848:	4b04      	ldr	r3, [pc, #16]	; (801c85c <__assert_func+0x38>)
 801c84a:	461c      	mov	r4, r3
 801c84c:	e7f3      	b.n	801c836 <__assert_func+0x12>
 801c84e:	bf00      	nop
 801c850:	200004a8 	.word	0x200004a8
 801c854:	08024726 	.word	0x08024726
 801c858:	08024733 	.word	0x08024733
 801c85c:	08024761 	.word	0x08024761

0801c860 <_close_r>:
 801c860:	b538      	push	{r3, r4, r5, lr}
 801c862:	4d06      	ldr	r5, [pc, #24]	; (801c87c <_close_r+0x1c>)
 801c864:	2300      	movs	r3, #0
 801c866:	4604      	mov	r4, r0
 801c868:	4608      	mov	r0, r1
 801c86a:	602b      	str	r3, [r5, #0]
 801c86c:	f7e4 fafd 	bl	8000e6a <_close>
 801c870:	1c43      	adds	r3, r0, #1
 801c872:	d102      	bne.n	801c87a <_close_r+0x1a>
 801c874:	682b      	ldr	r3, [r5, #0]
 801c876:	b103      	cbz	r3, 801c87a <_close_r+0x1a>
 801c878:	6023      	str	r3, [r4, #0]
 801c87a:	bd38      	pop	{r3, r4, r5, pc}
 801c87c:	20014f80 	.word	0x20014f80

0801c880 <__errno>:
 801c880:	4b01      	ldr	r3, [pc, #4]	; (801c888 <__errno+0x8>)
 801c882:	6818      	ldr	r0, [r3, #0]
 801c884:	4770      	bx	lr
 801c886:	bf00      	nop
 801c888:	200004a8 	.word	0x200004a8

0801c88c <__sflush_r>:
 801c88c:	898a      	ldrh	r2, [r1, #12]
 801c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c892:	4605      	mov	r5, r0
 801c894:	0710      	lsls	r0, r2, #28
 801c896:	460c      	mov	r4, r1
 801c898:	d458      	bmi.n	801c94c <__sflush_r+0xc0>
 801c89a:	684b      	ldr	r3, [r1, #4]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	dc05      	bgt.n	801c8ac <__sflush_r+0x20>
 801c8a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	dc02      	bgt.n	801c8ac <__sflush_r+0x20>
 801c8a6:	2000      	movs	r0, #0
 801c8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c8ae:	2e00      	cmp	r6, #0
 801c8b0:	d0f9      	beq.n	801c8a6 <__sflush_r+0x1a>
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c8b8:	682f      	ldr	r7, [r5, #0]
 801c8ba:	602b      	str	r3, [r5, #0]
 801c8bc:	d032      	beq.n	801c924 <__sflush_r+0x98>
 801c8be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c8c0:	89a3      	ldrh	r3, [r4, #12]
 801c8c2:	075a      	lsls	r2, r3, #29
 801c8c4:	d505      	bpl.n	801c8d2 <__sflush_r+0x46>
 801c8c6:	6863      	ldr	r3, [r4, #4]
 801c8c8:	1ac0      	subs	r0, r0, r3
 801c8ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c8cc:	b10b      	cbz	r3, 801c8d2 <__sflush_r+0x46>
 801c8ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c8d0:	1ac0      	subs	r0, r0, r3
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	4602      	mov	r2, r0
 801c8d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c8d8:	6a21      	ldr	r1, [r4, #32]
 801c8da:	4628      	mov	r0, r5
 801c8dc:	47b0      	blx	r6
 801c8de:	1c43      	adds	r3, r0, #1
 801c8e0:	89a3      	ldrh	r3, [r4, #12]
 801c8e2:	d106      	bne.n	801c8f2 <__sflush_r+0x66>
 801c8e4:	6829      	ldr	r1, [r5, #0]
 801c8e6:	291d      	cmp	r1, #29
 801c8e8:	d82c      	bhi.n	801c944 <__sflush_r+0xb8>
 801c8ea:	4a2a      	ldr	r2, [pc, #168]	; (801c994 <__sflush_r+0x108>)
 801c8ec:	40ca      	lsrs	r2, r1
 801c8ee:	07d6      	lsls	r6, r2, #31
 801c8f0:	d528      	bpl.n	801c944 <__sflush_r+0xb8>
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	6062      	str	r2, [r4, #4]
 801c8f6:	04d9      	lsls	r1, r3, #19
 801c8f8:	6922      	ldr	r2, [r4, #16]
 801c8fa:	6022      	str	r2, [r4, #0]
 801c8fc:	d504      	bpl.n	801c908 <__sflush_r+0x7c>
 801c8fe:	1c42      	adds	r2, r0, #1
 801c900:	d101      	bne.n	801c906 <__sflush_r+0x7a>
 801c902:	682b      	ldr	r3, [r5, #0]
 801c904:	b903      	cbnz	r3, 801c908 <__sflush_r+0x7c>
 801c906:	6560      	str	r0, [r4, #84]	; 0x54
 801c908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c90a:	602f      	str	r7, [r5, #0]
 801c90c:	2900      	cmp	r1, #0
 801c90e:	d0ca      	beq.n	801c8a6 <__sflush_r+0x1a>
 801c910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c914:	4299      	cmp	r1, r3
 801c916:	d002      	beq.n	801c91e <__sflush_r+0x92>
 801c918:	4628      	mov	r0, r5
 801c91a:	f000 f915 	bl	801cb48 <_free_r>
 801c91e:	2000      	movs	r0, #0
 801c920:	6360      	str	r0, [r4, #52]	; 0x34
 801c922:	e7c1      	b.n	801c8a8 <__sflush_r+0x1c>
 801c924:	6a21      	ldr	r1, [r4, #32]
 801c926:	2301      	movs	r3, #1
 801c928:	4628      	mov	r0, r5
 801c92a:	47b0      	blx	r6
 801c92c:	1c41      	adds	r1, r0, #1
 801c92e:	d1c7      	bne.n	801c8c0 <__sflush_r+0x34>
 801c930:	682b      	ldr	r3, [r5, #0]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d0c4      	beq.n	801c8c0 <__sflush_r+0x34>
 801c936:	2b1d      	cmp	r3, #29
 801c938:	d001      	beq.n	801c93e <__sflush_r+0xb2>
 801c93a:	2b16      	cmp	r3, #22
 801c93c:	d101      	bne.n	801c942 <__sflush_r+0xb6>
 801c93e:	602f      	str	r7, [r5, #0]
 801c940:	e7b1      	b.n	801c8a6 <__sflush_r+0x1a>
 801c942:	89a3      	ldrh	r3, [r4, #12]
 801c944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c948:	81a3      	strh	r3, [r4, #12]
 801c94a:	e7ad      	b.n	801c8a8 <__sflush_r+0x1c>
 801c94c:	690f      	ldr	r7, [r1, #16]
 801c94e:	2f00      	cmp	r7, #0
 801c950:	d0a9      	beq.n	801c8a6 <__sflush_r+0x1a>
 801c952:	0793      	lsls	r3, r2, #30
 801c954:	680e      	ldr	r6, [r1, #0]
 801c956:	bf08      	it	eq
 801c958:	694b      	ldreq	r3, [r1, #20]
 801c95a:	600f      	str	r7, [r1, #0]
 801c95c:	bf18      	it	ne
 801c95e:	2300      	movne	r3, #0
 801c960:	eba6 0807 	sub.w	r8, r6, r7
 801c964:	608b      	str	r3, [r1, #8]
 801c966:	f1b8 0f00 	cmp.w	r8, #0
 801c96a:	dd9c      	ble.n	801c8a6 <__sflush_r+0x1a>
 801c96c:	6a21      	ldr	r1, [r4, #32]
 801c96e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c970:	4643      	mov	r3, r8
 801c972:	463a      	mov	r2, r7
 801c974:	4628      	mov	r0, r5
 801c976:	47b0      	blx	r6
 801c978:	2800      	cmp	r0, #0
 801c97a:	dc06      	bgt.n	801c98a <__sflush_r+0xfe>
 801c97c:	89a3      	ldrh	r3, [r4, #12]
 801c97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c982:	81a3      	strh	r3, [r4, #12]
 801c984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c988:	e78e      	b.n	801c8a8 <__sflush_r+0x1c>
 801c98a:	4407      	add	r7, r0
 801c98c:	eba8 0800 	sub.w	r8, r8, r0
 801c990:	e7e9      	b.n	801c966 <__sflush_r+0xda>
 801c992:	bf00      	nop
 801c994:	20400001 	.word	0x20400001

0801c998 <_fflush_r>:
 801c998:	b538      	push	{r3, r4, r5, lr}
 801c99a:	690b      	ldr	r3, [r1, #16]
 801c99c:	4605      	mov	r5, r0
 801c99e:	460c      	mov	r4, r1
 801c9a0:	b913      	cbnz	r3, 801c9a8 <_fflush_r+0x10>
 801c9a2:	2500      	movs	r5, #0
 801c9a4:	4628      	mov	r0, r5
 801c9a6:	bd38      	pop	{r3, r4, r5, pc}
 801c9a8:	b118      	cbz	r0, 801c9b2 <_fflush_r+0x1a>
 801c9aa:	6983      	ldr	r3, [r0, #24]
 801c9ac:	b90b      	cbnz	r3, 801c9b2 <_fflush_r+0x1a>
 801c9ae:	f7ff fa5b 	bl	801be68 <__sinit>
 801c9b2:	4b14      	ldr	r3, [pc, #80]	; (801ca04 <_fflush_r+0x6c>)
 801c9b4:	429c      	cmp	r4, r3
 801c9b6:	d11b      	bne.n	801c9f0 <_fflush_r+0x58>
 801c9b8:	686c      	ldr	r4, [r5, #4]
 801c9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d0ef      	beq.n	801c9a2 <_fflush_r+0xa>
 801c9c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c9c4:	07d0      	lsls	r0, r2, #31
 801c9c6:	d404      	bmi.n	801c9d2 <_fflush_r+0x3a>
 801c9c8:	0599      	lsls	r1, r3, #22
 801c9ca:	d402      	bmi.n	801c9d2 <_fflush_r+0x3a>
 801c9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c9ce:	f7ff fb0e 	bl	801bfee <__retarget_lock_acquire_recursive>
 801c9d2:	4628      	mov	r0, r5
 801c9d4:	4621      	mov	r1, r4
 801c9d6:	f7ff ff59 	bl	801c88c <__sflush_r>
 801c9da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c9dc:	07da      	lsls	r2, r3, #31
 801c9de:	4605      	mov	r5, r0
 801c9e0:	d4e0      	bmi.n	801c9a4 <_fflush_r+0xc>
 801c9e2:	89a3      	ldrh	r3, [r4, #12]
 801c9e4:	059b      	lsls	r3, r3, #22
 801c9e6:	d4dd      	bmi.n	801c9a4 <_fflush_r+0xc>
 801c9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c9ea:	f7ff fb01 	bl	801bff0 <__retarget_lock_release_recursive>
 801c9ee:	e7d9      	b.n	801c9a4 <_fflush_r+0xc>
 801c9f0:	4b05      	ldr	r3, [pc, #20]	; (801ca08 <_fflush_r+0x70>)
 801c9f2:	429c      	cmp	r4, r3
 801c9f4:	d101      	bne.n	801c9fa <_fflush_r+0x62>
 801c9f6:	68ac      	ldr	r4, [r5, #8]
 801c9f8:	e7df      	b.n	801c9ba <_fflush_r+0x22>
 801c9fa:	4b04      	ldr	r3, [pc, #16]	; (801ca0c <_fflush_r+0x74>)
 801c9fc:	429c      	cmp	r4, r3
 801c9fe:	bf08      	it	eq
 801ca00:	68ec      	ldreq	r4, [r5, #12]
 801ca02:	e7da      	b.n	801c9ba <_fflush_r+0x22>
 801ca04:	0802466c 	.word	0x0802466c
 801ca08:	0802468c 	.word	0x0802468c
 801ca0c:	0802464c 	.word	0x0802464c

0801ca10 <fiprintf>:
 801ca10:	b40e      	push	{r1, r2, r3}
 801ca12:	b503      	push	{r0, r1, lr}
 801ca14:	4601      	mov	r1, r0
 801ca16:	ab03      	add	r3, sp, #12
 801ca18:	4805      	ldr	r0, [pc, #20]	; (801ca30 <fiprintf+0x20>)
 801ca1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca1e:	6800      	ldr	r0, [r0, #0]
 801ca20:	9301      	str	r3, [sp, #4]
 801ca22:	f000 fa67 	bl	801cef4 <_vfiprintf_r>
 801ca26:	b002      	add	sp, #8
 801ca28:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca2c:	b003      	add	sp, #12
 801ca2e:	4770      	bx	lr
 801ca30:	200004a8 	.word	0x200004a8

0801ca34 <_lseek_r>:
 801ca34:	b538      	push	{r3, r4, r5, lr}
 801ca36:	4d07      	ldr	r5, [pc, #28]	; (801ca54 <_lseek_r+0x20>)
 801ca38:	4604      	mov	r4, r0
 801ca3a:	4608      	mov	r0, r1
 801ca3c:	4611      	mov	r1, r2
 801ca3e:	2200      	movs	r2, #0
 801ca40:	602a      	str	r2, [r5, #0]
 801ca42:	461a      	mov	r2, r3
 801ca44:	f7e4 fa38 	bl	8000eb8 <_lseek>
 801ca48:	1c43      	adds	r3, r0, #1
 801ca4a:	d102      	bne.n	801ca52 <_lseek_r+0x1e>
 801ca4c:	682b      	ldr	r3, [r5, #0]
 801ca4e:	b103      	cbz	r3, 801ca52 <_lseek_r+0x1e>
 801ca50:	6023      	str	r3, [r4, #0]
 801ca52:	bd38      	pop	{r3, r4, r5, pc}
 801ca54:	20014f80 	.word	0x20014f80

0801ca58 <__swhatbuf_r>:
 801ca58:	b570      	push	{r4, r5, r6, lr}
 801ca5a:	460e      	mov	r6, r1
 801ca5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca60:	2900      	cmp	r1, #0
 801ca62:	b096      	sub	sp, #88	; 0x58
 801ca64:	4614      	mov	r4, r2
 801ca66:	461d      	mov	r5, r3
 801ca68:	da07      	bge.n	801ca7a <__swhatbuf_r+0x22>
 801ca6a:	2300      	movs	r3, #0
 801ca6c:	602b      	str	r3, [r5, #0]
 801ca6e:	89b3      	ldrh	r3, [r6, #12]
 801ca70:	061a      	lsls	r2, r3, #24
 801ca72:	d410      	bmi.n	801ca96 <__swhatbuf_r+0x3e>
 801ca74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca78:	e00e      	b.n	801ca98 <__swhatbuf_r+0x40>
 801ca7a:	466a      	mov	r2, sp
 801ca7c:	f000 fd18 	bl	801d4b0 <_fstat_r>
 801ca80:	2800      	cmp	r0, #0
 801ca82:	dbf2      	blt.n	801ca6a <__swhatbuf_r+0x12>
 801ca84:	9a01      	ldr	r2, [sp, #4]
 801ca86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ca8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ca8e:	425a      	negs	r2, r3
 801ca90:	415a      	adcs	r2, r3
 801ca92:	602a      	str	r2, [r5, #0]
 801ca94:	e7ee      	b.n	801ca74 <__swhatbuf_r+0x1c>
 801ca96:	2340      	movs	r3, #64	; 0x40
 801ca98:	2000      	movs	r0, #0
 801ca9a:	6023      	str	r3, [r4, #0]
 801ca9c:	b016      	add	sp, #88	; 0x58
 801ca9e:	bd70      	pop	{r4, r5, r6, pc}

0801caa0 <__smakebuf_r>:
 801caa0:	898b      	ldrh	r3, [r1, #12]
 801caa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801caa4:	079d      	lsls	r5, r3, #30
 801caa6:	4606      	mov	r6, r0
 801caa8:	460c      	mov	r4, r1
 801caaa:	d507      	bpl.n	801cabc <__smakebuf_r+0x1c>
 801caac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cab0:	6023      	str	r3, [r4, #0]
 801cab2:	6123      	str	r3, [r4, #16]
 801cab4:	2301      	movs	r3, #1
 801cab6:	6163      	str	r3, [r4, #20]
 801cab8:	b002      	add	sp, #8
 801caba:	bd70      	pop	{r4, r5, r6, pc}
 801cabc:	ab01      	add	r3, sp, #4
 801cabe:	466a      	mov	r2, sp
 801cac0:	f7ff ffca 	bl	801ca58 <__swhatbuf_r>
 801cac4:	9900      	ldr	r1, [sp, #0]
 801cac6:	4605      	mov	r5, r0
 801cac8:	4630      	mov	r0, r6
 801caca:	f7ff fad1 	bl	801c070 <_malloc_r>
 801cace:	b948      	cbnz	r0, 801cae4 <__smakebuf_r+0x44>
 801cad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cad4:	059a      	lsls	r2, r3, #22
 801cad6:	d4ef      	bmi.n	801cab8 <__smakebuf_r+0x18>
 801cad8:	f023 0303 	bic.w	r3, r3, #3
 801cadc:	f043 0302 	orr.w	r3, r3, #2
 801cae0:	81a3      	strh	r3, [r4, #12]
 801cae2:	e7e3      	b.n	801caac <__smakebuf_r+0xc>
 801cae4:	4b0d      	ldr	r3, [pc, #52]	; (801cb1c <__smakebuf_r+0x7c>)
 801cae6:	62b3      	str	r3, [r6, #40]	; 0x28
 801cae8:	89a3      	ldrh	r3, [r4, #12]
 801caea:	6020      	str	r0, [r4, #0]
 801caec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801caf0:	81a3      	strh	r3, [r4, #12]
 801caf2:	9b00      	ldr	r3, [sp, #0]
 801caf4:	6163      	str	r3, [r4, #20]
 801caf6:	9b01      	ldr	r3, [sp, #4]
 801caf8:	6120      	str	r0, [r4, #16]
 801cafa:	b15b      	cbz	r3, 801cb14 <__smakebuf_r+0x74>
 801cafc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cb00:	4630      	mov	r0, r6
 801cb02:	f000 fce7 	bl	801d4d4 <_isatty_r>
 801cb06:	b128      	cbz	r0, 801cb14 <__smakebuf_r+0x74>
 801cb08:	89a3      	ldrh	r3, [r4, #12]
 801cb0a:	f023 0303 	bic.w	r3, r3, #3
 801cb0e:	f043 0301 	orr.w	r3, r3, #1
 801cb12:	81a3      	strh	r3, [r4, #12]
 801cb14:	89a0      	ldrh	r0, [r4, #12]
 801cb16:	4305      	orrs	r5, r0
 801cb18:	81a5      	strh	r5, [r4, #12]
 801cb1a:	e7cd      	b.n	801cab8 <__smakebuf_r+0x18>
 801cb1c:	0801be01 	.word	0x0801be01

0801cb20 <malloc>:
 801cb20:	4b02      	ldr	r3, [pc, #8]	; (801cb2c <malloc+0xc>)
 801cb22:	4601      	mov	r1, r0
 801cb24:	6818      	ldr	r0, [r3, #0]
 801cb26:	f7ff baa3 	b.w	801c070 <_malloc_r>
 801cb2a:	bf00      	nop
 801cb2c:	200004a8 	.word	0x200004a8

0801cb30 <__malloc_lock>:
 801cb30:	4801      	ldr	r0, [pc, #4]	; (801cb38 <__malloc_lock+0x8>)
 801cb32:	f7ff ba5c 	b.w	801bfee <__retarget_lock_acquire_recursive>
 801cb36:	bf00      	nop
 801cb38:	20014f8c 	.word	0x20014f8c

0801cb3c <__malloc_unlock>:
 801cb3c:	4801      	ldr	r0, [pc, #4]	; (801cb44 <__malloc_unlock+0x8>)
 801cb3e:	f7ff ba57 	b.w	801bff0 <__retarget_lock_release_recursive>
 801cb42:	bf00      	nop
 801cb44:	20014f8c 	.word	0x20014f8c

0801cb48 <_free_r>:
 801cb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb4a:	2900      	cmp	r1, #0
 801cb4c:	d048      	beq.n	801cbe0 <_free_r+0x98>
 801cb4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb52:	9001      	str	r0, [sp, #4]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	f1a1 0404 	sub.w	r4, r1, #4
 801cb5a:	bfb8      	it	lt
 801cb5c:	18e4      	addlt	r4, r4, r3
 801cb5e:	f7ff ffe7 	bl	801cb30 <__malloc_lock>
 801cb62:	4a20      	ldr	r2, [pc, #128]	; (801cbe4 <_free_r+0x9c>)
 801cb64:	9801      	ldr	r0, [sp, #4]
 801cb66:	6813      	ldr	r3, [r2, #0]
 801cb68:	4615      	mov	r5, r2
 801cb6a:	b933      	cbnz	r3, 801cb7a <_free_r+0x32>
 801cb6c:	6063      	str	r3, [r4, #4]
 801cb6e:	6014      	str	r4, [r2, #0]
 801cb70:	b003      	add	sp, #12
 801cb72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cb76:	f7ff bfe1 	b.w	801cb3c <__malloc_unlock>
 801cb7a:	42a3      	cmp	r3, r4
 801cb7c:	d90b      	bls.n	801cb96 <_free_r+0x4e>
 801cb7e:	6821      	ldr	r1, [r4, #0]
 801cb80:	1862      	adds	r2, r4, r1
 801cb82:	4293      	cmp	r3, r2
 801cb84:	bf04      	itt	eq
 801cb86:	681a      	ldreq	r2, [r3, #0]
 801cb88:	685b      	ldreq	r3, [r3, #4]
 801cb8a:	6063      	str	r3, [r4, #4]
 801cb8c:	bf04      	itt	eq
 801cb8e:	1852      	addeq	r2, r2, r1
 801cb90:	6022      	streq	r2, [r4, #0]
 801cb92:	602c      	str	r4, [r5, #0]
 801cb94:	e7ec      	b.n	801cb70 <_free_r+0x28>
 801cb96:	461a      	mov	r2, r3
 801cb98:	685b      	ldr	r3, [r3, #4]
 801cb9a:	b10b      	cbz	r3, 801cba0 <_free_r+0x58>
 801cb9c:	42a3      	cmp	r3, r4
 801cb9e:	d9fa      	bls.n	801cb96 <_free_r+0x4e>
 801cba0:	6811      	ldr	r1, [r2, #0]
 801cba2:	1855      	adds	r5, r2, r1
 801cba4:	42a5      	cmp	r5, r4
 801cba6:	d10b      	bne.n	801cbc0 <_free_r+0x78>
 801cba8:	6824      	ldr	r4, [r4, #0]
 801cbaa:	4421      	add	r1, r4
 801cbac:	1854      	adds	r4, r2, r1
 801cbae:	42a3      	cmp	r3, r4
 801cbb0:	6011      	str	r1, [r2, #0]
 801cbb2:	d1dd      	bne.n	801cb70 <_free_r+0x28>
 801cbb4:	681c      	ldr	r4, [r3, #0]
 801cbb6:	685b      	ldr	r3, [r3, #4]
 801cbb8:	6053      	str	r3, [r2, #4]
 801cbba:	4421      	add	r1, r4
 801cbbc:	6011      	str	r1, [r2, #0]
 801cbbe:	e7d7      	b.n	801cb70 <_free_r+0x28>
 801cbc0:	d902      	bls.n	801cbc8 <_free_r+0x80>
 801cbc2:	230c      	movs	r3, #12
 801cbc4:	6003      	str	r3, [r0, #0]
 801cbc6:	e7d3      	b.n	801cb70 <_free_r+0x28>
 801cbc8:	6825      	ldr	r5, [r4, #0]
 801cbca:	1961      	adds	r1, r4, r5
 801cbcc:	428b      	cmp	r3, r1
 801cbce:	bf04      	itt	eq
 801cbd0:	6819      	ldreq	r1, [r3, #0]
 801cbd2:	685b      	ldreq	r3, [r3, #4]
 801cbd4:	6063      	str	r3, [r4, #4]
 801cbd6:	bf04      	itt	eq
 801cbd8:	1949      	addeq	r1, r1, r5
 801cbda:	6021      	streq	r1, [r4, #0]
 801cbdc:	6054      	str	r4, [r2, #4]
 801cbde:	e7c7      	b.n	801cb70 <_free_r+0x28>
 801cbe0:	b003      	add	sp, #12
 801cbe2:	bd30      	pop	{r4, r5, pc}
 801cbe4:	20009a04 	.word	0x20009a04

0801cbe8 <__ssputs_r>:
 801cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbec:	688e      	ldr	r6, [r1, #8]
 801cbee:	429e      	cmp	r6, r3
 801cbf0:	4682      	mov	sl, r0
 801cbf2:	460c      	mov	r4, r1
 801cbf4:	4690      	mov	r8, r2
 801cbf6:	461f      	mov	r7, r3
 801cbf8:	d838      	bhi.n	801cc6c <__ssputs_r+0x84>
 801cbfa:	898a      	ldrh	r2, [r1, #12]
 801cbfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cc00:	d032      	beq.n	801cc68 <__ssputs_r+0x80>
 801cc02:	6825      	ldr	r5, [r4, #0]
 801cc04:	6909      	ldr	r1, [r1, #16]
 801cc06:	eba5 0901 	sub.w	r9, r5, r1
 801cc0a:	6965      	ldr	r5, [r4, #20]
 801cc0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc14:	3301      	adds	r3, #1
 801cc16:	444b      	add	r3, r9
 801cc18:	106d      	asrs	r5, r5, #1
 801cc1a:	429d      	cmp	r5, r3
 801cc1c:	bf38      	it	cc
 801cc1e:	461d      	movcc	r5, r3
 801cc20:	0553      	lsls	r3, r2, #21
 801cc22:	d531      	bpl.n	801cc88 <__ssputs_r+0xa0>
 801cc24:	4629      	mov	r1, r5
 801cc26:	f7ff fa23 	bl	801c070 <_malloc_r>
 801cc2a:	4606      	mov	r6, r0
 801cc2c:	b950      	cbnz	r0, 801cc44 <__ssputs_r+0x5c>
 801cc2e:	230c      	movs	r3, #12
 801cc30:	f8ca 3000 	str.w	r3, [sl]
 801cc34:	89a3      	ldrh	r3, [r4, #12]
 801cc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc3a:	81a3      	strh	r3, [r4, #12]
 801cc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc44:	6921      	ldr	r1, [r4, #16]
 801cc46:	464a      	mov	r2, r9
 801cc48:	f7ff f9e1 	bl	801c00e <memcpy>
 801cc4c:	89a3      	ldrh	r3, [r4, #12]
 801cc4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc56:	81a3      	strh	r3, [r4, #12]
 801cc58:	6126      	str	r6, [r4, #16]
 801cc5a:	6165      	str	r5, [r4, #20]
 801cc5c:	444e      	add	r6, r9
 801cc5e:	eba5 0509 	sub.w	r5, r5, r9
 801cc62:	6026      	str	r6, [r4, #0]
 801cc64:	60a5      	str	r5, [r4, #8]
 801cc66:	463e      	mov	r6, r7
 801cc68:	42be      	cmp	r6, r7
 801cc6a:	d900      	bls.n	801cc6e <__ssputs_r+0x86>
 801cc6c:	463e      	mov	r6, r7
 801cc6e:	4632      	mov	r2, r6
 801cc70:	6820      	ldr	r0, [r4, #0]
 801cc72:	4641      	mov	r1, r8
 801cc74:	f7ff f9d9 	bl	801c02a <memmove>
 801cc78:	68a3      	ldr	r3, [r4, #8]
 801cc7a:	6822      	ldr	r2, [r4, #0]
 801cc7c:	1b9b      	subs	r3, r3, r6
 801cc7e:	4432      	add	r2, r6
 801cc80:	60a3      	str	r3, [r4, #8]
 801cc82:	6022      	str	r2, [r4, #0]
 801cc84:	2000      	movs	r0, #0
 801cc86:	e7db      	b.n	801cc40 <__ssputs_r+0x58>
 801cc88:	462a      	mov	r2, r5
 801cc8a:	f000 fc33 	bl	801d4f4 <_realloc_r>
 801cc8e:	4606      	mov	r6, r0
 801cc90:	2800      	cmp	r0, #0
 801cc92:	d1e1      	bne.n	801cc58 <__ssputs_r+0x70>
 801cc94:	6921      	ldr	r1, [r4, #16]
 801cc96:	4650      	mov	r0, sl
 801cc98:	f7ff ff56 	bl	801cb48 <_free_r>
 801cc9c:	e7c7      	b.n	801cc2e <__ssputs_r+0x46>
	...

0801cca0 <_svfiprintf_r>:
 801cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca4:	4698      	mov	r8, r3
 801cca6:	898b      	ldrh	r3, [r1, #12]
 801cca8:	061b      	lsls	r3, r3, #24
 801ccaa:	b09d      	sub	sp, #116	; 0x74
 801ccac:	4607      	mov	r7, r0
 801ccae:	460d      	mov	r5, r1
 801ccb0:	4614      	mov	r4, r2
 801ccb2:	d50e      	bpl.n	801ccd2 <_svfiprintf_r+0x32>
 801ccb4:	690b      	ldr	r3, [r1, #16]
 801ccb6:	b963      	cbnz	r3, 801ccd2 <_svfiprintf_r+0x32>
 801ccb8:	2140      	movs	r1, #64	; 0x40
 801ccba:	f7ff f9d9 	bl	801c070 <_malloc_r>
 801ccbe:	6028      	str	r0, [r5, #0]
 801ccc0:	6128      	str	r0, [r5, #16]
 801ccc2:	b920      	cbnz	r0, 801ccce <_svfiprintf_r+0x2e>
 801ccc4:	230c      	movs	r3, #12
 801ccc6:	603b      	str	r3, [r7, #0]
 801ccc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cccc:	e0d1      	b.n	801ce72 <_svfiprintf_r+0x1d2>
 801ccce:	2340      	movs	r3, #64	; 0x40
 801ccd0:	616b      	str	r3, [r5, #20]
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	9309      	str	r3, [sp, #36]	; 0x24
 801ccd6:	2320      	movs	r3, #32
 801ccd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ccdc:	f8cd 800c 	str.w	r8, [sp, #12]
 801cce0:	2330      	movs	r3, #48	; 0x30
 801cce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ce8c <_svfiprintf_r+0x1ec>
 801cce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ccea:	f04f 0901 	mov.w	r9, #1
 801ccee:	4623      	mov	r3, r4
 801ccf0:	469a      	mov	sl, r3
 801ccf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccf6:	b10a      	cbz	r2, 801ccfc <_svfiprintf_r+0x5c>
 801ccf8:	2a25      	cmp	r2, #37	; 0x25
 801ccfa:	d1f9      	bne.n	801ccf0 <_svfiprintf_r+0x50>
 801ccfc:	ebba 0b04 	subs.w	fp, sl, r4
 801cd00:	d00b      	beq.n	801cd1a <_svfiprintf_r+0x7a>
 801cd02:	465b      	mov	r3, fp
 801cd04:	4622      	mov	r2, r4
 801cd06:	4629      	mov	r1, r5
 801cd08:	4638      	mov	r0, r7
 801cd0a:	f7ff ff6d 	bl	801cbe8 <__ssputs_r>
 801cd0e:	3001      	adds	r0, #1
 801cd10:	f000 80aa 	beq.w	801ce68 <_svfiprintf_r+0x1c8>
 801cd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd16:	445a      	add	r2, fp
 801cd18:	9209      	str	r2, [sp, #36]	; 0x24
 801cd1a:	f89a 3000 	ldrb.w	r3, [sl]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	f000 80a2 	beq.w	801ce68 <_svfiprintf_r+0x1c8>
 801cd24:	2300      	movs	r3, #0
 801cd26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd2e:	f10a 0a01 	add.w	sl, sl, #1
 801cd32:	9304      	str	r3, [sp, #16]
 801cd34:	9307      	str	r3, [sp, #28]
 801cd36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd3a:	931a      	str	r3, [sp, #104]	; 0x68
 801cd3c:	4654      	mov	r4, sl
 801cd3e:	2205      	movs	r2, #5
 801cd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd44:	4851      	ldr	r0, [pc, #324]	; (801ce8c <_svfiprintf_r+0x1ec>)
 801cd46:	f7e3 fa5b 	bl	8000200 <memchr>
 801cd4a:	9a04      	ldr	r2, [sp, #16]
 801cd4c:	b9d8      	cbnz	r0, 801cd86 <_svfiprintf_r+0xe6>
 801cd4e:	06d0      	lsls	r0, r2, #27
 801cd50:	bf44      	itt	mi
 801cd52:	2320      	movmi	r3, #32
 801cd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd58:	0711      	lsls	r1, r2, #28
 801cd5a:	bf44      	itt	mi
 801cd5c:	232b      	movmi	r3, #43	; 0x2b
 801cd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd62:	f89a 3000 	ldrb.w	r3, [sl]
 801cd66:	2b2a      	cmp	r3, #42	; 0x2a
 801cd68:	d015      	beq.n	801cd96 <_svfiprintf_r+0xf6>
 801cd6a:	9a07      	ldr	r2, [sp, #28]
 801cd6c:	4654      	mov	r4, sl
 801cd6e:	2000      	movs	r0, #0
 801cd70:	f04f 0c0a 	mov.w	ip, #10
 801cd74:	4621      	mov	r1, r4
 801cd76:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd7a:	3b30      	subs	r3, #48	; 0x30
 801cd7c:	2b09      	cmp	r3, #9
 801cd7e:	d94e      	bls.n	801ce1e <_svfiprintf_r+0x17e>
 801cd80:	b1b0      	cbz	r0, 801cdb0 <_svfiprintf_r+0x110>
 801cd82:	9207      	str	r2, [sp, #28]
 801cd84:	e014      	b.n	801cdb0 <_svfiprintf_r+0x110>
 801cd86:	eba0 0308 	sub.w	r3, r0, r8
 801cd8a:	fa09 f303 	lsl.w	r3, r9, r3
 801cd8e:	4313      	orrs	r3, r2
 801cd90:	9304      	str	r3, [sp, #16]
 801cd92:	46a2      	mov	sl, r4
 801cd94:	e7d2      	b.n	801cd3c <_svfiprintf_r+0x9c>
 801cd96:	9b03      	ldr	r3, [sp, #12]
 801cd98:	1d19      	adds	r1, r3, #4
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	9103      	str	r1, [sp, #12]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	bfbb      	ittet	lt
 801cda2:	425b      	neglt	r3, r3
 801cda4:	f042 0202 	orrlt.w	r2, r2, #2
 801cda8:	9307      	strge	r3, [sp, #28]
 801cdaa:	9307      	strlt	r3, [sp, #28]
 801cdac:	bfb8      	it	lt
 801cdae:	9204      	strlt	r2, [sp, #16]
 801cdb0:	7823      	ldrb	r3, [r4, #0]
 801cdb2:	2b2e      	cmp	r3, #46	; 0x2e
 801cdb4:	d10c      	bne.n	801cdd0 <_svfiprintf_r+0x130>
 801cdb6:	7863      	ldrb	r3, [r4, #1]
 801cdb8:	2b2a      	cmp	r3, #42	; 0x2a
 801cdba:	d135      	bne.n	801ce28 <_svfiprintf_r+0x188>
 801cdbc:	9b03      	ldr	r3, [sp, #12]
 801cdbe:	1d1a      	adds	r2, r3, #4
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	9203      	str	r2, [sp, #12]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	bfb8      	it	lt
 801cdc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cdcc:	3402      	adds	r4, #2
 801cdce:	9305      	str	r3, [sp, #20]
 801cdd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ce9c <_svfiprintf_r+0x1fc>
 801cdd4:	7821      	ldrb	r1, [r4, #0]
 801cdd6:	2203      	movs	r2, #3
 801cdd8:	4650      	mov	r0, sl
 801cdda:	f7e3 fa11 	bl	8000200 <memchr>
 801cdde:	b140      	cbz	r0, 801cdf2 <_svfiprintf_r+0x152>
 801cde0:	2340      	movs	r3, #64	; 0x40
 801cde2:	eba0 000a 	sub.w	r0, r0, sl
 801cde6:	fa03 f000 	lsl.w	r0, r3, r0
 801cdea:	9b04      	ldr	r3, [sp, #16]
 801cdec:	4303      	orrs	r3, r0
 801cdee:	3401      	adds	r4, #1
 801cdf0:	9304      	str	r3, [sp, #16]
 801cdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdf6:	4826      	ldr	r0, [pc, #152]	; (801ce90 <_svfiprintf_r+0x1f0>)
 801cdf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cdfc:	2206      	movs	r2, #6
 801cdfe:	f7e3 f9ff 	bl	8000200 <memchr>
 801ce02:	2800      	cmp	r0, #0
 801ce04:	d038      	beq.n	801ce78 <_svfiprintf_r+0x1d8>
 801ce06:	4b23      	ldr	r3, [pc, #140]	; (801ce94 <_svfiprintf_r+0x1f4>)
 801ce08:	bb1b      	cbnz	r3, 801ce52 <_svfiprintf_r+0x1b2>
 801ce0a:	9b03      	ldr	r3, [sp, #12]
 801ce0c:	3307      	adds	r3, #7
 801ce0e:	f023 0307 	bic.w	r3, r3, #7
 801ce12:	3308      	adds	r3, #8
 801ce14:	9303      	str	r3, [sp, #12]
 801ce16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce18:	4433      	add	r3, r6
 801ce1a:	9309      	str	r3, [sp, #36]	; 0x24
 801ce1c:	e767      	b.n	801ccee <_svfiprintf_r+0x4e>
 801ce1e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce22:	460c      	mov	r4, r1
 801ce24:	2001      	movs	r0, #1
 801ce26:	e7a5      	b.n	801cd74 <_svfiprintf_r+0xd4>
 801ce28:	2300      	movs	r3, #0
 801ce2a:	3401      	adds	r4, #1
 801ce2c:	9305      	str	r3, [sp, #20]
 801ce2e:	4619      	mov	r1, r3
 801ce30:	f04f 0c0a 	mov.w	ip, #10
 801ce34:	4620      	mov	r0, r4
 801ce36:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce3a:	3a30      	subs	r2, #48	; 0x30
 801ce3c:	2a09      	cmp	r2, #9
 801ce3e:	d903      	bls.n	801ce48 <_svfiprintf_r+0x1a8>
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d0c5      	beq.n	801cdd0 <_svfiprintf_r+0x130>
 801ce44:	9105      	str	r1, [sp, #20]
 801ce46:	e7c3      	b.n	801cdd0 <_svfiprintf_r+0x130>
 801ce48:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce4c:	4604      	mov	r4, r0
 801ce4e:	2301      	movs	r3, #1
 801ce50:	e7f0      	b.n	801ce34 <_svfiprintf_r+0x194>
 801ce52:	ab03      	add	r3, sp, #12
 801ce54:	9300      	str	r3, [sp, #0]
 801ce56:	462a      	mov	r2, r5
 801ce58:	4b0f      	ldr	r3, [pc, #60]	; (801ce98 <_svfiprintf_r+0x1f8>)
 801ce5a:	a904      	add	r1, sp, #16
 801ce5c:	4638      	mov	r0, r7
 801ce5e:	f3af 8000 	nop.w
 801ce62:	1c42      	adds	r2, r0, #1
 801ce64:	4606      	mov	r6, r0
 801ce66:	d1d6      	bne.n	801ce16 <_svfiprintf_r+0x176>
 801ce68:	89ab      	ldrh	r3, [r5, #12]
 801ce6a:	065b      	lsls	r3, r3, #25
 801ce6c:	f53f af2c 	bmi.w	801ccc8 <_svfiprintf_r+0x28>
 801ce70:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce72:	b01d      	add	sp, #116	; 0x74
 801ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce78:	ab03      	add	r3, sp, #12
 801ce7a:	9300      	str	r3, [sp, #0]
 801ce7c:	462a      	mov	r2, r5
 801ce7e:	4b06      	ldr	r3, [pc, #24]	; (801ce98 <_svfiprintf_r+0x1f8>)
 801ce80:	a904      	add	r1, sp, #16
 801ce82:	4638      	mov	r0, r7
 801ce84:	f000 f9d4 	bl	801d230 <_printf_i>
 801ce88:	e7eb      	b.n	801ce62 <_svfiprintf_r+0x1c2>
 801ce8a:	bf00      	nop
 801ce8c:	08024762 	.word	0x08024762
 801ce90:	0802476c 	.word	0x0802476c
 801ce94:	00000000 	.word	0x00000000
 801ce98:	0801cbe9 	.word	0x0801cbe9
 801ce9c:	08024768 	.word	0x08024768

0801cea0 <__sfputc_r>:
 801cea0:	6893      	ldr	r3, [r2, #8]
 801cea2:	3b01      	subs	r3, #1
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	b410      	push	{r4}
 801cea8:	6093      	str	r3, [r2, #8]
 801ceaa:	da08      	bge.n	801cebe <__sfputc_r+0x1e>
 801ceac:	6994      	ldr	r4, [r2, #24]
 801ceae:	42a3      	cmp	r3, r4
 801ceb0:	db01      	blt.n	801ceb6 <__sfputc_r+0x16>
 801ceb2:	290a      	cmp	r1, #10
 801ceb4:	d103      	bne.n	801cebe <__sfputc_r+0x1e>
 801ceb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ceba:	f7ff bbe1 	b.w	801c680 <__swbuf_r>
 801cebe:	6813      	ldr	r3, [r2, #0]
 801cec0:	1c58      	adds	r0, r3, #1
 801cec2:	6010      	str	r0, [r2, #0]
 801cec4:	7019      	strb	r1, [r3, #0]
 801cec6:	4608      	mov	r0, r1
 801cec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cecc:	4770      	bx	lr

0801cece <__sfputs_r>:
 801cece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ced0:	4606      	mov	r6, r0
 801ced2:	460f      	mov	r7, r1
 801ced4:	4614      	mov	r4, r2
 801ced6:	18d5      	adds	r5, r2, r3
 801ced8:	42ac      	cmp	r4, r5
 801ceda:	d101      	bne.n	801cee0 <__sfputs_r+0x12>
 801cedc:	2000      	movs	r0, #0
 801cede:	e007      	b.n	801cef0 <__sfputs_r+0x22>
 801cee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cee4:	463a      	mov	r2, r7
 801cee6:	4630      	mov	r0, r6
 801cee8:	f7ff ffda 	bl	801cea0 <__sfputc_r>
 801ceec:	1c43      	adds	r3, r0, #1
 801ceee:	d1f3      	bne.n	801ced8 <__sfputs_r+0xa>
 801cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cef4 <_vfiprintf_r>:
 801cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef8:	460d      	mov	r5, r1
 801cefa:	b09d      	sub	sp, #116	; 0x74
 801cefc:	4614      	mov	r4, r2
 801cefe:	4698      	mov	r8, r3
 801cf00:	4606      	mov	r6, r0
 801cf02:	b118      	cbz	r0, 801cf0c <_vfiprintf_r+0x18>
 801cf04:	6983      	ldr	r3, [r0, #24]
 801cf06:	b90b      	cbnz	r3, 801cf0c <_vfiprintf_r+0x18>
 801cf08:	f7fe ffae 	bl	801be68 <__sinit>
 801cf0c:	4b89      	ldr	r3, [pc, #548]	; (801d134 <_vfiprintf_r+0x240>)
 801cf0e:	429d      	cmp	r5, r3
 801cf10:	d11b      	bne.n	801cf4a <_vfiprintf_r+0x56>
 801cf12:	6875      	ldr	r5, [r6, #4]
 801cf14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf16:	07d9      	lsls	r1, r3, #31
 801cf18:	d405      	bmi.n	801cf26 <_vfiprintf_r+0x32>
 801cf1a:	89ab      	ldrh	r3, [r5, #12]
 801cf1c:	059a      	lsls	r2, r3, #22
 801cf1e:	d402      	bmi.n	801cf26 <_vfiprintf_r+0x32>
 801cf20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf22:	f7ff f864 	bl	801bfee <__retarget_lock_acquire_recursive>
 801cf26:	89ab      	ldrh	r3, [r5, #12]
 801cf28:	071b      	lsls	r3, r3, #28
 801cf2a:	d501      	bpl.n	801cf30 <_vfiprintf_r+0x3c>
 801cf2c:	692b      	ldr	r3, [r5, #16]
 801cf2e:	b9eb      	cbnz	r3, 801cf6c <_vfiprintf_r+0x78>
 801cf30:	4629      	mov	r1, r5
 801cf32:	4630      	mov	r0, r6
 801cf34:	f7ff fc08 	bl	801c748 <__swsetup_r>
 801cf38:	b1c0      	cbz	r0, 801cf6c <_vfiprintf_r+0x78>
 801cf3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf3c:	07dc      	lsls	r4, r3, #31
 801cf3e:	d50e      	bpl.n	801cf5e <_vfiprintf_r+0x6a>
 801cf40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cf44:	b01d      	add	sp, #116	; 0x74
 801cf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf4a:	4b7b      	ldr	r3, [pc, #492]	; (801d138 <_vfiprintf_r+0x244>)
 801cf4c:	429d      	cmp	r5, r3
 801cf4e:	d101      	bne.n	801cf54 <_vfiprintf_r+0x60>
 801cf50:	68b5      	ldr	r5, [r6, #8]
 801cf52:	e7df      	b.n	801cf14 <_vfiprintf_r+0x20>
 801cf54:	4b79      	ldr	r3, [pc, #484]	; (801d13c <_vfiprintf_r+0x248>)
 801cf56:	429d      	cmp	r5, r3
 801cf58:	bf08      	it	eq
 801cf5a:	68f5      	ldreq	r5, [r6, #12]
 801cf5c:	e7da      	b.n	801cf14 <_vfiprintf_r+0x20>
 801cf5e:	89ab      	ldrh	r3, [r5, #12]
 801cf60:	0598      	lsls	r0, r3, #22
 801cf62:	d4ed      	bmi.n	801cf40 <_vfiprintf_r+0x4c>
 801cf64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf66:	f7ff f843 	bl	801bff0 <__retarget_lock_release_recursive>
 801cf6a:	e7e9      	b.n	801cf40 <_vfiprintf_r+0x4c>
 801cf6c:	2300      	movs	r3, #0
 801cf6e:	9309      	str	r3, [sp, #36]	; 0x24
 801cf70:	2320      	movs	r3, #32
 801cf72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cf76:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf7a:	2330      	movs	r3, #48	; 0x30
 801cf7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d140 <_vfiprintf_r+0x24c>
 801cf80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cf84:	f04f 0901 	mov.w	r9, #1
 801cf88:	4623      	mov	r3, r4
 801cf8a:	469a      	mov	sl, r3
 801cf8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf90:	b10a      	cbz	r2, 801cf96 <_vfiprintf_r+0xa2>
 801cf92:	2a25      	cmp	r2, #37	; 0x25
 801cf94:	d1f9      	bne.n	801cf8a <_vfiprintf_r+0x96>
 801cf96:	ebba 0b04 	subs.w	fp, sl, r4
 801cf9a:	d00b      	beq.n	801cfb4 <_vfiprintf_r+0xc0>
 801cf9c:	465b      	mov	r3, fp
 801cf9e:	4622      	mov	r2, r4
 801cfa0:	4629      	mov	r1, r5
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	f7ff ff93 	bl	801cece <__sfputs_r>
 801cfa8:	3001      	adds	r0, #1
 801cfaa:	f000 80aa 	beq.w	801d102 <_vfiprintf_r+0x20e>
 801cfae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cfb0:	445a      	add	r2, fp
 801cfb2:	9209      	str	r2, [sp, #36]	; 0x24
 801cfb4:	f89a 3000 	ldrb.w	r3, [sl]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	f000 80a2 	beq.w	801d102 <_vfiprintf_r+0x20e>
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cfc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfc8:	f10a 0a01 	add.w	sl, sl, #1
 801cfcc:	9304      	str	r3, [sp, #16]
 801cfce:	9307      	str	r3, [sp, #28]
 801cfd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cfd4:	931a      	str	r3, [sp, #104]	; 0x68
 801cfd6:	4654      	mov	r4, sl
 801cfd8:	2205      	movs	r2, #5
 801cfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfde:	4858      	ldr	r0, [pc, #352]	; (801d140 <_vfiprintf_r+0x24c>)
 801cfe0:	f7e3 f90e 	bl	8000200 <memchr>
 801cfe4:	9a04      	ldr	r2, [sp, #16]
 801cfe6:	b9d8      	cbnz	r0, 801d020 <_vfiprintf_r+0x12c>
 801cfe8:	06d1      	lsls	r1, r2, #27
 801cfea:	bf44      	itt	mi
 801cfec:	2320      	movmi	r3, #32
 801cfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cff2:	0713      	lsls	r3, r2, #28
 801cff4:	bf44      	itt	mi
 801cff6:	232b      	movmi	r3, #43	; 0x2b
 801cff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cffc:	f89a 3000 	ldrb.w	r3, [sl]
 801d000:	2b2a      	cmp	r3, #42	; 0x2a
 801d002:	d015      	beq.n	801d030 <_vfiprintf_r+0x13c>
 801d004:	9a07      	ldr	r2, [sp, #28]
 801d006:	4654      	mov	r4, sl
 801d008:	2000      	movs	r0, #0
 801d00a:	f04f 0c0a 	mov.w	ip, #10
 801d00e:	4621      	mov	r1, r4
 801d010:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d014:	3b30      	subs	r3, #48	; 0x30
 801d016:	2b09      	cmp	r3, #9
 801d018:	d94e      	bls.n	801d0b8 <_vfiprintf_r+0x1c4>
 801d01a:	b1b0      	cbz	r0, 801d04a <_vfiprintf_r+0x156>
 801d01c:	9207      	str	r2, [sp, #28]
 801d01e:	e014      	b.n	801d04a <_vfiprintf_r+0x156>
 801d020:	eba0 0308 	sub.w	r3, r0, r8
 801d024:	fa09 f303 	lsl.w	r3, r9, r3
 801d028:	4313      	orrs	r3, r2
 801d02a:	9304      	str	r3, [sp, #16]
 801d02c:	46a2      	mov	sl, r4
 801d02e:	e7d2      	b.n	801cfd6 <_vfiprintf_r+0xe2>
 801d030:	9b03      	ldr	r3, [sp, #12]
 801d032:	1d19      	adds	r1, r3, #4
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	9103      	str	r1, [sp, #12]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	bfbb      	ittet	lt
 801d03c:	425b      	neglt	r3, r3
 801d03e:	f042 0202 	orrlt.w	r2, r2, #2
 801d042:	9307      	strge	r3, [sp, #28]
 801d044:	9307      	strlt	r3, [sp, #28]
 801d046:	bfb8      	it	lt
 801d048:	9204      	strlt	r2, [sp, #16]
 801d04a:	7823      	ldrb	r3, [r4, #0]
 801d04c:	2b2e      	cmp	r3, #46	; 0x2e
 801d04e:	d10c      	bne.n	801d06a <_vfiprintf_r+0x176>
 801d050:	7863      	ldrb	r3, [r4, #1]
 801d052:	2b2a      	cmp	r3, #42	; 0x2a
 801d054:	d135      	bne.n	801d0c2 <_vfiprintf_r+0x1ce>
 801d056:	9b03      	ldr	r3, [sp, #12]
 801d058:	1d1a      	adds	r2, r3, #4
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	9203      	str	r2, [sp, #12]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	bfb8      	it	lt
 801d062:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d066:	3402      	adds	r4, #2
 801d068:	9305      	str	r3, [sp, #20]
 801d06a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d150 <_vfiprintf_r+0x25c>
 801d06e:	7821      	ldrb	r1, [r4, #0]
 801d070:	2203      	movs	r2, #3
 801d072:	4650      	mov	r0, sl
 801d074:	f7e3 f8c4 	bl	8000200 <memchr>
 801d078:	b140      	cbz	r0, 801d08c <_vfiprintf_r+0x198>
 801d07a:	2340      	movs	r3, #64	; 0x40
 801d07c:	eba0 000a 	sub.w	r0, r0, sl
 801d080:	fa03 f000 	lsl.w	r0, r3, r0
 801d084:	9b04      	ldr	r3, [sp, #16]
 801d086:	4303      	orrs	r3, r0
 801d088:	3401      	adds	r4, #1
 801d08a:	9304      	str	r3, [sp, #16]
 801d08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d090:	482c      	ldr	r0, [pc, #176]	; (801d144 <_vfiprintf_r+0x250>)
 801d092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d096:	2206      	movs	r2, #6
 801d098:	f7e3 f8b2 	bl	8000200 <memchr>
 801d09c:	2800      	cmp	r0, #0
 801d09e:	d03f      	beq.n	801d120 <_vfiprintf_r+0x22c>
 801d0a0:	4b29      	ldr	r3, [pc, #164]	; (801d148 <_vfiprintf_r+0x254>)
 801d0a2:	bb1b      	cbnz	r3, 801d0ec <_vfiprintf_r+0x1f8>
 801d0a4:	9b03      	ldr	r3, [sp, #12]
 801d0a6:	3307      	adds	r3, #7
 801d0a8:	f023 0307 	bic.w	r3, r3, #7
 801d0ac:	3308      	adds	r3, #8
 801d0ae:	9303      	str	r3, [sp, #12]
 801d0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0b2:	443b      	add	r3, r7
 801d0b4:	9309      	str	r3, [sp, #36]	; 0x24
 801d0b6:	e767      	b.n	801cf88 <_vfiprintf_r+0x94>
 801d0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801d0bc:	460c      	mov	r4, r1
 801d0be:	2001      	movs	r0, #1
 801d0c0:	e7a5      	b.n	801d00e <_vfiprintf_r+0x11a>
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	3401      	adds	r4, #1
 801d0c6:	9305      	str	r3, [sp, #20]
 801d0c8:	4619      	mov	r1, r3
 801d0ca:	f04f 0c0a 	mov.w	ip, #10
 801d0ce:	4620      	mov	r0, r4
 801d0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0d4:	3a30      	subs	r2, #48	; 0x30
 801d0d6:	2a09      	cmp	r2, #9
 801d0d8:	d903      	bls.n	801d0e2 <_vfiprintf_r+0x1ee>
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d0c5      	beq.n	801d06a <_vfiprintf_r+0x176>
 801d0de:	9105      	str	r1, [sp, #20]
 801d0e0:	e7c3      	b.n	801d06a <_vfiprintf_r+0x176>
 801d0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d0e6:	4604      	mov	r4, r0
 801d0e8:	2301      	movs	r3, #1
 801d0ea:	e7f0      	b.n	801d0ce <_vfiprintf_r+0x1da>
 801d0ec:	ab03      	add	r3, sp, #12
 801d0ee:	9300      	str	r3, [sp, #0]
 801d0f0:	462a      	mov	r2, r5
 801d0f2:	4b16      	ldr	r3, [pc, #88]	; (801d14c <_vfiprintf_r+0x258>)
 801d0f4:	a904      	add	r1, sp, #16
 801d0f6:	4630      	mov	r0, r6
 801d0f8:	f3af 8000 	nop.w
 801d0fc:	4607      	mov	r7, r0
 801d0fe:	1c78      	adds	r0, r7, #1
 801d100:	d1d6      	bne.n	801d0b0 <_vfiprintf_r+0x1bc>
 801d102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d104:	07d9      	lsls	r1, r3, #31
 801d106:	d405      	bmi.n	801d114 <_vfiprintf_r+0x220>
 801d108:	89ab      	ldrh	r3, [r5, #12]
 801d10a:	059a      	lsls	r2, r3, #22
 801d10c:	d402      	bmi.n	801d114 <_vfiprintf_r+0x220>
 801d10e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d110:	f7fe ff6e 	bl	801bff0 <__retarget_lock_release_recursive>
 801d114:	89ab      	ldrh	r3, [r5, #12]
 801d116:	065b      	lsls	r3, r3, #25
 801d118:	f53f af12 	bmi.w	801cf40 <_vfiprintf_r+0x4c>
 801d11c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d11e:	e711      	b.n	801cf44 <_vfiprintf_r+0x50>
 801d120:	ab03      	add	r3, sp, #12
 801d122:	9300      	str	r3, [sp, #0]
 801d124:	462a      	mov	r2, r5
 801d126:	4b09      	ldr	r3, [pc, #36]	; (801d14c <_vfiprintf_r+0x258>)
 801d128:	a904      	add	r1, sp, #16
 801d12a:	4630      	mov	r0, r6
 801d12c:	f000 f880 	bl	801d230 <_printf_i>
 801d130:	e7e4      	b.n	801d0fc <_vfiprintf_r+0x208>
 801d132:	bf00      	nop
 801d134:	0802466c 	.word	0x0802466c
 801d138:	0802468c 	.word	0x0802468c
 801d13c:	0802464c 	.word	0x0802464c
 801d140:	08024762 	.word	0x08024762
 801d144:	0802476c 	.word	0x0802476c
 801d148:	00000000 	.word	0x00000000
 801d14c:	0801cecf 	.word	0x0801cecf
 801d150:	08024768 	.word	0x08024768

0801d154 <_printf_common>:
 801d154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d158:	4616      	mov	r6, r2
 801d15a:	4699      	mov	r9, r3
 801d15c:	688a      	ldr	r2, [r1, #8]
 801d15e:	690b      	ldr	r3, [r1, #16]
 801d160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d164:	4293      	cmp	r3, r2
 801d166:	bfb8      	it	lt
 801d168:	4613      	movlt	r3, r2
 801d16a:	6033      	str	r3, [r6, #0]
 801d16c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d170:	4607      	mov	r7, r0
 801d172:	460c      	mov	r4, r1
 801d174:	b10a      	cbz	r2, 801d17a <_printf_common+0x26>
 801d176:	3301      	adds	r3, #1
 801d178:	6033      	str	r3, [r6, #0]
 801d17a:	6823      	ldr	r3, [r4, #0]
 801d17c:	0699      	lsls	r1, r3, #26
 801d17e:	bf42      	ittt	mi
 801d180:	6833      	ldrmi	r3, [r6, #0]
 801d182:	3302      	addmi	r3, #2
 801d184:	6033      	strmi	r3, [r6, #0]
 801d186:	6825      	ldr	r5, [r4, #0]
 801d188:	f015 0506 	ands.w	r5, r5, #6
 801d18c:	d106      	bne.n	801d19c <_printf_common+0x48>
 801d18e:	f104 0a19 	add.w	sl, r4, #25
 801d192:	68e3      	ldr	r3, [r4, #12]
 801d194:	6832      	ldr	r2, [r6, #0]
 801d196:	1a9b      	subs	r3, r3, r2
 801d198:	42ab      	cmp	r3, r5
 801d19a:	dc26      	bgt.n	801d1ea <_printf_common+0x96>
 801d19c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d1a0:	1e13      	subs	r3, r2, #0
 801d1a2:	6822      	ldr	r2, [r4, #0]
 801d1a4:	bf18      	it	ne
 801d1a6:	2301      	movne	r3, #1
 801d1a8:	0692      	lsls	r2, r2, #26
 801d1aa:	d42b      	bmi.n	801d204 <_printf_common+0xb0>
 801d1ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d1b0:	4649      	mov	r1, r9
 801d1b2:	4638      	mov	r0, r7
 801d1b4:	47c0      	blx	r8
 801d1b6:	3001      	adds	r0, #1
 801d1b8:	d01e      	beq.n	801d1f8 <_printf_common+0xa4>
 801d1ba:	6823      	ldr	r3, [r4, #0]
 801d1bc:	68e5      	ldr	r5, [r4, #12]
 801d1be:	6832      	ldr	r2, [r6, #0]
 801d1c0:	f003 0306 	and.w	r3, r3, #6
 801d1c4:	2b04      	cmp	r3, #4
 801d1c6:	bf08      	it	eq
 801d1c8:	1aad      	subeq	r5, r5, r2
 801d1ca:	68a3      	ldr	r3, [r4, #8]
 801d1cc:	6922      	ldr	r2, [r4, #16]
 801d1ce:	bf0c      	ite	eq
 801d1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d1d4:	2500      	movne	r5, #0
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	bfc4      	itt	gt
 801d1da:	1a9b      	subgt	r3, r3, r2
 801d1dc:	18ed      	addgt	r5, r5, r3
 801d1de:	2600      	movs	r6, #0
 801d1e0:	341a      	adds	r4, #26
 801d1e2:	42b5      	cmp	r5, r6
 801d1e4:	d11a      	bne.n	801d21c <_printf_common+0xc8>
 801d1e6:	2000      	movs	r0, #0
 801d1e8:	e008      	b.n	801d1fc <_printf_common+0xa8>
 801d1ea:	2301      	movs	r3, #1
 801d1ec:	4652      	mov	r2, sl
 801d1ee:	4649      	mov	r1, r9
 801d1f0:	4638      	mov	r0, r7
 801d1f2:	47c0      	blx	r8
 801d1f4:	3001      	adds	r0, #1
 801d1f6:	d103      	bne.n	801d200 <_printf_common+0xac>
 801d1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d200:	3501      	adds	r5, #1
 801d202:	e7c6      	b.n	801d192 <_printf_common+0x3e>
 801d204:	18e1      	adds	r1, r4, r3
 801d206:	1c5a      	adds	r2, r3, #1
 801d208:	2030      	movs	r0, #48	; 0x30
 801d20a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d20e:	4422      	add	r2, r4
 801d210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d218:	3302      	adds	r3, #2
 801d21a:	e7c7      	b.n	801d1ac <_printf_common+0x58>
 801d21c:	2301      	movs	r3, #1
 801d21e:	4622      	mov	r2, r4
 801d220:	4649      	mov	r1, r9
 801d222:	4638      	mov	r0, r7
 801d224:	47c0      	blx	r8
 801d226:	3001      	adds	r0, #1
 801d228:	d0e6      	beq.n	801d1f8 <_printf_common+0xa4>
 801d22a:	3601      	adds	r6, #1
 801d22c:	e7d9      	b.n	801d1e2 <_printf_common+0x8e>
	...

0801d230 <_printf_i>:
 801d230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d234:	460c      	mov	r4, r1
 801d236:	4691      	mov	r9, r2
 801d238:	7e27      	ldrb	r7, [r4, #24]
 801d23a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d23c:	2f78      	cmp	r7, #120	; 0x78
 801d23e:	4680      	mov	r8, r0
 801d240:	469a      	mov	sl, r3
 801d242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d246:	d807      	bhi.n	801d258 <_printf_i+0x28>
 801d248:	2f62      	cmp	r7, #98	; 0x62
 801d24a:	d80a      	bhi.n	801d262 <_printf_i+0x32>
 801d24c:	2f00      	cmp	r7, #0
 801d24e:	f000 80d8 	beq.w	801d402 <_printf_i+0x1d2>
 801d252:	2f58      	cmp	r7, #88	; 0x58
 801d254:	f000 80a3 	beq.w	801d39e <_printf_i+0x16e>
 801d258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d25c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d260:	e03a      	b.n	801d2d8 <_printf_i+0xa8>
 801d262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d266:	2b15      	cmp	r3, #21
 801d268:	d8f6      	bhi.n	801d258 <_printf_i+0x28>
 801d26a:	a001      	add	r0, pc, #4	; (adr r0, 801d270 <_printf_i+0x40>)
 801d26c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d270:	0801d2c9 	.word	0x0801d2c9
 801d274:	0801d2dd 	.word	0x0801d2dd
 801d278:	0801d259 	.word	0x0801d259
 801d27c:	0801d259 	.word	0x0801d259
 801d280:	0801d259 	.word	0x0801d259
 801d284:	0801d259 	.word	0x0801d259
 801d288:	0801d2dd 	.word	0x0801d2dd
 801d28c:	0801d259 	.word	0x0801d259
 801d290:	0801d259 	.word	0x0801d259
 801d294:	0801d259 	.word	0x0801d259
 801d298:	0801d259 	.word	0x0801d259
 801d29c:	0801d3e9 	.word	0x0801d3e9
 801d2a0:	0801d30d 	.word	0x0801d30d
 801d2a4:	0801d3cb 	.word	0x0801d3cb
 801d2a8:	0801d259 	.word	0x0801d259
 801d2ac:	0801d259 	.word	0x0801d259
 801d2b0:	0801d40b 	.word	0x0801d40b
 801d2b4:	0801d259 	.word	0x0801d259
 801d2b8:	0801d30d 	.word	0x0801d30d
 801d2bc:	0801d259 	.word	0x0801d259
 801d2c0:	0801d259 	.word	0x0801d259
 801d2c4:	0801d3d3 	.word	0x0801d3d3
 801d2c8:	680b      	ldr	r3, [r1, #0]
 801d2ca:	1d1a      	adds	r2, r3, #4
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	600a      	str	r2, [r1, #0]
 801d2d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d2d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d2d8:	2301      	movs	r3, #1
 801d2da:	e0a3      	b.n	801d424 <_printf_i+0x1f4>
 801d2dc:	6825      	ldr	r5, [r4, #0]
 801d2de:	6808      	ldr	r0, [r1, #0]
 801d2e0:	062e      	lsls	r6, r5, #24
 801d2e2:	f100 0304 	add.w	r3, r0, #4
 801d2e6:	d50a      	bpl.n	801d2fe <_printf_i+0xce>
 801d2e8:	6805      	ldr	r5, [r0, #0]
 801d2ea:	600b      	str	r3, [r1, #0]
 801d2ec:	2d00      	cmp	r5, #0
 801d2ee:	da03      	bge.n	801d2f8 <_printf_i+0xc8>
 801d2f0:	232d      	movs	r3, #45	; 0x2d
 801d2f2:	426d      	negs	r5, r5
 801d2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d2f8:	485e      	ldr	r0, [pc, #376]	; (801d474 <_printf_i+0x244>)
 801d2fa:	230a      	movs	r3, #10
 801d2fc:	e019      	b.n	801d332 <_printf_i+0x102>
 801d2fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d302:	6805      	ldr	r5, [r0, #0]
 801d304:	600b      	str	r3, [r1, #0]
 801d306:	bf18      	it	ne
 801d308:	b22d      	sxthne	r5, r5
 801d30a:	e7ef      	b.n	801d2ec <_printf_i+0xbc>
 801d30c:	680b      	ldr	r3, [r1, #0]
 801d30e:	6825      	ldr	r5, [r4, #0]
 801d310:	1d18      	adds	r0, r3, #4
 801d312:	6008      	str	r0, [r1, #0]
 801d314:	0628      	lsls	r0, r5, #24
 801d316:	d501      	bpl.n	801d31c <_printf_i+0xec>
 801d318:	681d      	ldr	r5, [r3, #0]
 801d31a:	e002      	b.n	801d322 <_printf_i+0xf2>
 801d31c:	0669      	lsls	r1, r5, #25
 801d31e:	d5fb      	bpl.n	801d318 <_printf_i+0xe8>
 801d320:	881d      	ldrh	r5, [r3, #0]
 801d322:	4854      	ldr	r0, [pc, #336]	; (801d474 <_printf_i+0x244>)
 801d324:	2f6f      	cmp	r7, #111	; 0x6f
 801d326:	bf0c      	ite	eq
 801d328:	2308      	moveq	r3, #8
 801d32a:	230a      	movne	r3, #10
 801d32c:	2100      	movs	r1, #0
 801d32e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d332:	6866      	ldr	r6, [r4, #4]
 801d334:	60a6      	str	r6, [r4, #8]
 801d336:	2e00      	cmp	r6, #0
 801d338:	bfa2      	ittt	ge
 801d33a:	6821      	ldrge	r1, [r4, #0]
 801d33c:	f021 0104 	bicge.w	r1, r1, #4
 801d340:	6021      	strge	r1, [r4, #0]
 801d342:	b90d      	cbnz	r5, 801d348 <_printf_i+0x118>
 801d344:	2e00      	cmp	r6, #0
 801d346:	d04d      	beq.n	801d3e4 <_printf_i+0x1b4>
 801d348:	4616      	mov	r6, r2
 801d34a:	fbb5 f1f3 	udiv	r1, r5, r3
 801d34e:	fb03 5711 	mls	r7, r3, r1, r5
 801d352:	5dc7      	ldrb	r7, [r0, r7]
 801d354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d358:	462f      	mov	r7, r5
 801d35a:	42bb      	cmp	r3, r7
 801d35c:	460d      	mov	r5, r1
 801d35e:	d9f4      	bls.n	801d34a <_printf_i+0x11a>
 801d360:	2b08      	cmp	r3, #8
 801d362:	d10b      	bne.n	801d37c <_printf_i+0x14c>
 801d364:	6823      	ldr	r3, [r4, #0]
 801d366:	07df      	lsls	r7, r3, #31
 801d368:	d508      	bpl.n	801d37c <_printf_i+0x14c>
 801d36a:	6923      	ldr	r3, [r4, #16]
 801d36c:	6861      	ldr	r1, [r4, #4]
 801d36e:	4299      	cmp	r1, r3
 801d370:	bfde      	ittt	le
 801d372:	2330      	movle	r3, #48	; 0x30
 801d374:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d378:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801d37c:	1b92      	subs	r2, r2, r6
 801d37e:	6122      	str	r2, [r4, #16]
 801d380:	f8cd a000 	str.w	sl, [sp]
 801d384:	464b      	mov	r3, r9
 801d386:	aa03      	add	r2, sp, #12
 801d388:	4621      	mov	r1, r4
 801d38a:	4640      	mov	r0, r8
 801d38c:	f7ff fee2 	bl	801d154 <_printf_common>
 801d390:	3001      	adds	r0, #1
 801d392:	d14c      	bne.n	801d42e <_printf_i+0x1fe>
 801d394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d398:	b004      	add	sp, #16
 801d39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d39e:	4835      	ldr	r0, [pc, #212]	; (801d474 <_printf_i+0x244>)
 801d3a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d3a4:	6823      	ldr	r3, [r4, #0]
 801d3a6:	680e      	ldr	r6, [r1, #0]
 801d3a8:	061f      	lsls	r7, r3, #24
 801d3aa:	f856 5b04 	ldr.w	r5, [r6], #4
 801d3ae:	600e      	str	r6, [r1, #0]
 801d3b0:	d514      	bpl.n	801d3dc <_printf_i+0x1ac>
 801d3b2:	07d9      	lsls	r1, r3, #31
 801d3b4:	bf44      	itt	mi
 801d3b6:	f043 0320 	orrmi.w	r3, r3, #32
 801d3ba:	6023      	strmi	r3, [r4, #0]
 801d3bc:	b91d      	cbnz	r5, 801d3c6 <_printf_i+0x196>
 801d3be:	6823      	ldr	r3, [r4, #0]
 801d3c0:	f023 0320 	bic.w	r3, r3, #32
 801d3c4:	6023      	str	r3, [r4, #0]
 801d3c6:	2310      	movs	r3, #16
 801d3c8:	e7b0      	b.n	801d32c <_printf_i+0xfc>
 801d3ca:	6823      	ldr	r3, [r4, #0]
 801d3cc:	f043 0320 	orr.w	r3, r3, #32
 801d3d0:	6023      	str	r3, [r4, #0]
 801d3d2:	2378      	movs	r3, #120	; 0x78
 801d3d4:	4828      	ldr	r0, [pc, #160]	; (801d478 <_printf_i+0x248>)
 801d3d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d3da:	e7e3      	b.n	801d3a4 <_printf_i+0x174>
 801d3dc:	065e      	lsls	r6, r3, #25
 801d3de:	bf48      	it	mi
 801d3e0:	b2ad      	uxthmi	r5, r5
 801d3e2:	e7e6      	b.n	801d3b2 <_printf_i+0x182>
 801d3e4:	4616      	mov	r6, r2
 801d3e6:	e7bb      	b.n	801d360 <_printf_i+0x130>
 801d3e8:	680b      	ldr	r3, [r1, #0]
 801d3ea:	6826      	ldr	r6, [r4, #0]
 801d3ec:	6960      	ldr	r0, [r4, #20]
 801d3ee:	1d1d      	adds	r5, r3, #4
 801d3f0:	600d      	str	r5, [r1, #0]
 801d3f2:	0635      	lsls	r5, r6, #24
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	d501      	bpl.n	801d3fc <_printf_i+0x1cc>
 801d3f8:	6018      	str	r0, [r3, #0]
 801d3fa:	e002      	b.n	801d402 <_printf_i+0x1d2>
 801d3fc:	0671      	lsls	r1, r6, #25
 801d3fe:	d5fb      	bpl.n	801d3f8 <_printf_i+0x1c8>
 801d400:	8018      	strh	r0, [r3, #0]
 801d402:	2300      	movs	r3, #0
 801d404:	6123      	str	r3, [r4, #16]
 801d406:	4616      	mov	r6, r2
 801d408:	e7ba      	b.n	801d380 <_printf_i+0x150>
 801d40a:	680b      	ldr	r3, [r1, #0]
 801d40c:	1d1a      	adds	r2, r3, #4
 801d40e:	600a      	str	r2, [r1, #0]
 801d410:	681e      	ldr	r6, [r3, #0]
 801d412:	6862      	ldr	r2, [r4, #4]
 801d414:	2100      	movs	r1, #0
 801d416:	4630      	mov	r0, r6
 801d418:	f7e2 fef2 	bl	8000200 <memchr>
 801d41c:	b108      	cbz	r0, 801d422 <_printf_i+0x1f2>
 801d41e:	1b80      	subs	r0, r0, r6
 801d420:	6060      	str	r0, [r4, #4]
 801d422:	6863      	ldr	r3, [r4, #4]
 801d424:	6123      	str	r3, [r4, #16]
 801d426:	2300      	movs	r3, #0
 801d428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d42c:	e7a8      	b.n	801d380 <_printf_i+0x150>
 801d42e:	6923      	ldr	r3, [r4, #16]
 801d430:	4632      	mov	r2, r6
 801d432:	4649      	mov	r1, r9
 801d434:	4640      	mov	r0, r8
 801d436:	47d0      	blx	sl
 801d438:	3001      	adds	r0, #1
 801d43a:	d0ab      	beq.n	801d394 <_printf_i+0x164>
 801d43c:	6823      	ldr	r3, [r4, #0]
 801d43e:	079b      	lsls	r3, r3, #30
 801d440:	d413      	bmi.n	801d46a <_printf_i+0x23a>
 801d442:	68e0      	ldr	r0, [r4, #12]
 801d444:	9b03      	ldr	r3, [sp, #12]
 801d446:	4298      	cmp	r0, r3
 801d448:	bfb8      	it	lt
 801d44a:	4618      	movlt	r0, r3
 801d44c:	e7a4      	b.n	801d398 <_printf_i+0x168>
 801d44e:	2301      	movs	r3, #1
 801d450:	4632      	mov	r2, r6
 801d452:	4649      	mov	r1, r9
 801d454:	4640      	mov	r0, r8
 801d456:	47d0      	blx	sl
 801d458:	3001      	adds	r0, #1
 801d45a:	d09b      	beq.n	801d394 <_printf_i+0x164>
 801d45c:	3501      	adds	r5, #1
 801d45e:	68e3      	ldr	r3, [r4, #12]
 801d460:	9903      	ldr	r1, [sp, #12]
 801d462:	1a5b      	subs	r3, r3, r1
 801d464:	42ab      	cmp	r3, r5
 801d466:	dcf2      	bgt.n	801d44e <_printf_i+0x21e>
 801d468:	e7eb      	b.n	801d442 <_printf_i+0x212>
 801d46a:	2500      	movs	r5, #0
 801d46c:	f104 0619 	add.w	r6, r4, #25
 801d470:	e7f5      	b.n	801d45e <_printf_i+0x22e>
 801d472:	bf00      	nop
 801d474:	08024773 	.word	0x08024773
 801d478:	08024784 	.word	0x08024784

0801d47c <_read_r>:
 801d47c:	b538      	push	{r3, r4, r5, lr}
 801d47e:	4d07      	ldr	r5, [pc, #28]	; (801d49c <_read_r+0x20>)
 801d480:	4604      	mov	r4, r0
 801d482:	4608      	mov	r0, r1
 801d484:	4611      	mov	r1, r2
 801d486:	2200      	movs	r2, #0
 801d488:	602a      	str	r2, [r5, #0]
 801d48a:	461a      	mov	r2, r3
 801d48c:	f7e3 fcd0 	bl	8000e30 <_read>
 801d490:	1c43      	adds	r3, r0, #1
 801d492:	d102      	bne.n	801d49a <_read_r+0x1e>
 801d494:	682b      	ldr	r3, [r5, #0]
 801d496:	b103      	cbz	r3, 801d49a <_read_r+0x1e>
 801d498:	6023      	str	r3, [r4, #0]
 801d49a:	bd38      	pop	{r3, r4, r5, pc}
 801d49c:	20014f80 	.word	0x20014f80

0801d4a0 <abort>:
 801d4a0:	b508      	push	{r3, lr}
 801d4a2:	2006      	movs	r0, #6
 801d4a4:	f000 f874 	bl	801d590 <raise>
 801d4a8:	2001      	movs	r0, #1
 801d4aa:	f7e3 fcb7 	bl	8000e1c <_exit>
	...

0801d4b0 <_fstat_r>:
 801d4b0:	b538      	push	{r3, r4, r5, lr}
 801d4b2:	4d07      	ldr	r5, [pc, #28]	; (801d4d0 <_fstat_r+0x20>)
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	4604      	mov	r4, r0
 801d4b8:	4608      	mov	r0, r1
 801d4ba:	4611      	mov	r1, r2
 801d4bc:	602b      	str	r3, [r5, #0]
 801d4be:	f7e3 fce0 	bl	8000e82 <_fstat>
 801d4c2:	1c43      	adds	r3, r0, #1
 801d4c4:	d102      	bne.n	801d4cc <_fstat_r+0x1c>
 801d4c6:	682b      	ldr	r3, [r5, #0]
 801d4c8:	b103      	cbz	r3, 801d4cc <_fstat_r+0x1c>
 801d4ca:	6023      	str	r3, [r4, #0]
 801d4cc:	bd38      	pop	{r3, r4, r5, pc}
 801d4ce:	bf00      	nop
 801d4d0:	20014f80 	.word	0x20014f80

0801d4d4 <_isatty_r>:
 801d4d4:	b538      	push	{r3, r4, r5, lr}
 801d4d6:	4d06      	ldr	r5, [pc, #24]	; (801d4f0 <_isatty_r+0x1c>)
 801d4d8:	2300      	movs	r3, #0
 801d4da:	4604      	mov	r4, r0
 801d4dc:	4608      	mov	r0, r1
 801d4de:	602b      	str	r3, [r5, #0]
 801d4e0:	f7e3 fcdf 	bl	8000ea2 <_isatty>
 801d4e4:	1c43      	adds	r3, r0, #1
 801d4e6:	d102      	bne.n	801d4ee <_isatty_r+0x1a>
 801d4e8:	682b      	ldr	r3, [r5, #0]
 801d4ea:	b103      	cbz	r3, 801d4ee <_isatty_r+0x1a>
 801d4ec:	6023      	str	r3, [r4, #0]
 801d4ee:	bd38      	pop	{r3, r4, r5, pc}
 801d4f0:	20014f80 	.word	0x20014f80

0801d4f4 <_realloc_r>:
 801d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4f6:	4607      	mov	r7, r0
 801d4f8:	4614      	mov	r4, r2
 801d4fa:	460e      	mov	r6, r1
 801d4fc:	b921      	cbnz	r1, 801d508 <_realloc_r+0x14>
 801d4fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d502:	4611      	mov	r1, r2
 801d504:	f7fe bdb4 	b.w	801c070 <_malloc_r>
 801d508:	b922      	cbnz	r2, 801d514 <_realloc_r+0x20>
 801d50a:	f7ff fb1d 	bl	801cb48 <_free_r>
 801d50e:	4625      	mov	r5, r4
 801d510:	4628      	mov	r0, r5
 801d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d514:	f000 f858 	bl	801d5c8 <_malloc_usable_size_r>
 801d518:	42a0      	cmp	r0, r4
 801d51a:	d20f      	bcs.n	801d53c <_realloc_r+0x48>
 801d51c:	4621      	mov	r1, r4
 801d51e:	4638      	mov	r0, r7
 801d520:	f7fe fda6 	bl	801c070 <_malloc_r>
 801d524:	4605      	mov	r5, r0
 801d526:	2800      	cmp	r0, #0
 801d528:	d0f2      	beq.n	801d510 <_realloc_r+0x1c>
 801d52a:	4631      	mov	r1, r6
 801d52c:	4622      	mov	r2, r4
 801d52e:	f7fe fd6e 	bl	801c00e <memcpy>
 801d532:	4631      	mov	r1, r6
 801d534:	4638      	mov	r0, r7
 801d536:	f7ff fb07 	bl	801cb48 <_free_r>
 801d53a:	e7e9      	b.n	801d510 <_realloc_r+0x1c>
 801d53c:	4635      	mov	r5, r6
 801d53e:	e7e7      	b.n	801d510 <_realloc_r+0x1c>

0801d540 <_raise_r>:
 801d540:	291f      	cmp	r1, #31
 801d542:	b538      	push	{r3, r4, r5, lr}
 801d544:	4604      	mov	r4, r0
 801d546:	460d      	mov	r5, r1
 801d548:	d904      	bls.n	801d554 <_raise_r+0x14>
 801d54a:	2316      	movs	r3, #22
 801d54c:	6003      	str	r3, [r0, #0]
 801d54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d552:	bd38      	pop	{r3, r4, r5, pc}
 801d554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d556:	b112      	cbz	r2, 801d55e <_raise_r+0x1e>
 801d558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d55c:	b94b      	cbnz	r3, 801d572 <_raise_r+0x32>
 801d55e:	4620      	mov	r0, r4
 801d560:	f000 f830 	bl	801d5c4 <_getpid_r>
 801d564:	462a      	mov	r2, r5
 801d566:	4601      	mov	r1, r0
 801d568:	4620      	mov	r0, r4
 801d56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d56e:	f000 b817 	b.w	801d5a0 <_kill_r>
 801d572:	2b01      	cmp	r3, #1
 801d574:	d00a      	beq.n	801d58c <_raise_r+0x4c>
 801d576:	1c59      	adds	r1, r3, #1
 801d578:	d103      	bne.n	801d582 <_raise_r+0x42>
 801d57a:	2316      	movs	r3, #22
 801d57c:	6003      	str	r3, [r0, #0]
 801d57e:	2001      	movs	r0, #1
 801d580:	e7e7      	b.n	801d552 <_raise_r+0x12>
 801d582:	2400      	movs	r4, #0
 801d584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d588:	4628      	mov	r0, r5
 801d58a:	4798      	blx	r3
 801d58c:	2000      	movs	r0, #0
 801d58e:	e7e0      	b.n	801d552 <_raise_r+0x12>

0801d590 <raise>:
 801d590:	4b02      	ldr	r3, [pc, #8]	; (801d59c <raise+0xc>)
 801d592:	4601      	mov	r1, r0
 801d594:	6818      	ldr	r0, [r3, #0]
 801d596:	f7ff bfd3 	b.w	801d540 <_raise_r>
 801d59a:	bf00      	nop
 801d59c:	200004a8 	.word	0x200004a8

0801d5a0 <_kill_r>:
 801d5a0:	b538      	push	{r3, r4, r5, lr}
 801d5a2:	4d07      	ldr	r5, [pc, #28]	; (801d5c0 <_kill_r+0x20>)
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	4604      	mov	r4, r0
 801d5a8:	4608      	mov	r0, r1
 801d5aa:	4611      	mov	r1, r2
 801d5ac:	602b      	str	r3, [r5, #0]
 801d5ae:	f7e3 fc23 	bl	8000df8 <_kill>
 801d5b2:	1c43      	adds	r3, r0, #1
 801d5b4:	d102      	bne.n	801d5bc <_kill_r+0x1c>
 801d5b6:	682b      	ldr	r3, [r5, #0]
 801d5b8:	b103      	cbz	r3, 801d5bc <_kill_r+0x1c>
 801d5ba:	6023      	str	r3, [r4, #0]
 801d5bc:	bd38      	pop	{r3, r4, r5, pc}
 801d5be:	bf00      	nop
 801d5c0:	20014f80 	.word	0x20014f80

0801d5c4 <_getpid_r>:
 801d5c4:	f7e3 bc10 	b.w	8000de8 <_getpid>

0801d5c8 <_malloc_usable_size_r>:
 801d5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d5cc:	1f18      	subs	r0, r3, #4
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	bfbc      	itt	lt
 801d5d2:	580b      	ldrlt	r3, [r1, r0]
 801d5d4:	18c0      	addlt	r0, r0, r3
 801d5d6:	4770      	bx	lr

0801d5d8 <_init>:
 801d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5da:	bf00      	nop
 801d5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5de:	bc08      	pop	{r3}
 801d5e0:	469e      	mov	lr, r3
 801d5e2:	4770      	bx	lr

0801d5e4 <_fini>:
 801d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5e6:	bf00      	nop
 801d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5ea:	bc08      	pop	{r3}
 801d5ec:	469e      	mov	lr, r3
 801d5ee:	4770      	bx	lr
