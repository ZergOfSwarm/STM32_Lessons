
USB_HOST_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f0  080077f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f8  080077f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007e0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000870  20000870  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014685  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000320e  00000000  00000000  00034745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00037958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00038958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a80  00000000  00000000  000397f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013949  00000000  00000000  0005d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd53e  00000000  00000000  00070bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e0f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004664  00000000  00000000  0013e148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800777c 	.word	0x0800777c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800777c 	.word	0x0800777c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <CDC_HANDLE>:

CDC_StateTypedef CDC_STATE = CDC_STATE_IDLE;

uint8_t i=0;
void CDC_HANDLE (void) // Этот CDC_HANDLE будет перелключаться межлу различными режимами.
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	switch (CDC_STATE)
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <CDC_HANDLE+0x78>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <CDC_HANDLE+0x14>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d01e      	beq.n	80005c4 <CDC_HANDLE+0x50>
		  CDC_STATE = CDC_IDLE; // Переключаем статус на CDC_IDLE
		  break;//??????????????????
	}

	default:
		  break;
 8000586:	e02d      	b.n	80005e4 <CDC_HANDLE+0x70>
		  USBH_CDC_Stop(&hUsbHostFS); // Останавливаем USBH_CDC_Stop и
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <CDC_HANDLE+0x7c>)
 800058a:	f004 fb3a 	bl	8004c02 <USBH_CDC_Stop>
		  int len = sprintf ((char *)CDC_TX_Buffer, "DATA = %d", i); // копируем данные в CDC_TX_Buffer
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <CDC_HANDLE+0x80>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4918      	ldr	r1, [pc, #96]	; (80005f8 <CDC_HANDLE+0x84>)
 8000596:	4819      	ldr	r0, [pc, #100]	; (80005fc <CDC_HANDLE+0x88>)
 8000598:	f006 fd72 	bl	8007080 <siprintf>
 800059c:	6078      	str	r0, [r7, #4]
		  if (USBH_CDC_Transmit (&hUsbHostFS, CDC_TX_Buffer, len) == USBH_OK) // и отпавляем
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4916      	ldr	r1, [pc, #88]	; (80005fc <CDC_HANDLE+0x88>)
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <CDC_HANDLE+0x7c>)
 80005a6:	f004 fb93 	bl	8004cd0 <USBH_CDC_Transmit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <CDC_HANDLE+0x42>
			  CDC_STATE = CDC_RECEIVE; // Если передача удачная то, статус меняем на CDC_RECEIVE
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <CDC_HANDLE+0x78>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
		  i++;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <CDC_HANDLE+0x80>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <CDC_HANDLE+0x80>)
 80005c0:	701a      	strb	r2, [r3, #0]
		  break;
 80005c2:	e00f      	b.n	80005e4 <CDC_HANDLE+0x70>
		  USBH_CDC_Stop(&hUsbHostFS);
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <CDC_HANDLE+0x7c>)
 80005c6:	f004 fb1c 	bl	8004c02 <USBH_CDC_Stop>
		  USBH_CDC_Receive(&hUsbHostFS, (uint8_t *) CDC_RX_Buffer, RX_BUFF_SIZE);
 80005ca:	2240      	movs	r2, #64	; 0x40
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <CDC_HANDLE+0x8c>)
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <CDC_HANDLE+0x7c>)
 80005d0:	f004 fbac 	bl	8004d2c <USBH_CDC_Receive>
		  HAL_Delay (1000); // После паузы
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fa94 	bl	8000b04 <HAL_Delay>
		  CDC_STATE = CDC_IDLE; // Переключаем статус на CDC_IDLE
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <CDC_HANDLE+0x78>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
		  break;//??????????????????
 80005e2:	bf00      	nop
	}
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000012c 	.word	0x2000012c
 80005f0:	20000180 	.word	0x20000180
 80005f4:	2000012d 	.word	0x2000012d
 80005f8:	08007794 	.word	0x08007794
 80005fc:	200000ec 	.word	0x200000ec
 8000600:	200000ac 	.word	0x200000ac

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fa3a 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f810 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f878 	bl	8000704 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000614:	f006 f8fa 	bl	800680c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000618:	f006 f91e 	bl	8006858 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY) // Проверка, готов ли HOST к передаче
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <main+0x28>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d1f9      	bne.n	8000618 <main+0x14>
    {
    	CDC_HANDLE(); // Если готов то...
 8000624:	f7ff ffa6 	bl	8000574 <CDC_HANDLE>
    MX_USB_HOST_Process();
 8000628:	e7f6      	b.n	8000618 <main+0x14>
 800062a:	bf00      	nop
 800062c:	20000558 	.word	0x20000558

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fc26 	bl	8006e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f8eb 	bl	8002890 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f882 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fb4c 	bl	8002d80 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f86b 	bl	80007c8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0x98>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0x98>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0x98>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0x98>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0x98>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_GPIO_Init+0x98>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <MX_GPIO_Init+0x98>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_GPIO_Init+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0x9c>)
 8000774:	f000 fc68 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000778:	2301      	movs	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0x9c>)
 8000790:	f000 fabe 	bl	8000d10 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f985 	bl	8000ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40002000 	.word	0x40002000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b33      	ldr	r3, [pc, #204]	; (8000908 <HAL_InitTick+0xe4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a32      	ldr	r2, [pc, #200]	; (8000908 <HAL_InitTick+0xe4>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <HAL_InitTick+0xe4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fc9c 	bl	8003198 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	2b00      	cmp	r3, #0
 8000868:	d103      	bne.n	8000872 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800086a:	f002 fc81 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 800086e:	6378      	str	r0, [r7, #52]	; 0x34
 8000870:	e004      	b.n	800087c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000872:	f002 fc7d 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8000876:	4603      	mov	r3, r0
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <HAL_InitTick+0xe8>)
 8000880:	fba2 2303 	umull	r2, r3, r2, r3
 8000884:	0c9b      	lsrs	r3, r3, #18
 8000886:	3b01      	subs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_InitTick+0xec>)
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <HAL_InitTick+0xf0>)
 800088e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_InitTick+0xec>)
 8000892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000896:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000898:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_InitTick+0xec>)
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_InitTick+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_InitTick+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80008b0:	4817      	ldr	r0, [pc, #92]	; (8000910 <HAL_InitTick+0xec>)
 80008b2:	f002 fca3 	bl	80031fc <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d11b      	bne.n	80008fc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80008c4:	4812      	ldr	r0, [pc, #72]	; (8000910 <HAL_InitTick+0xec>)
 80008c6:	f002 fcf3 	bl	80032b0 <HAL_TIM_Base_Start_IT>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d111      	bne.n	80008fc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80008d8:	202d      	movs	r0, #45	; 0x2d
 80008da:	f000 fa0b 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d808      	bhi.n	80008f6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	202d      	movs	r0, #45	; 0x2d
 80008ea:	f000 f9e7 	bl	8000cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_InitTick+0xf4>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e002      	b.n	80008fc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000900:	4618      	mov	r0, r3
 8000902:	3738      	adds	r7, #56	; 0x38
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	431bde83 	.word	0x431bde83
 8000910:	20000130 	.word	0x20000130
 8000914:	40002000 	.word	0x40002000
 8000918:	20000004 	.word	0x20000004

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800097a:	f002 fd09 	bl	8003390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000130 	.word	0x20000130

08000988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <OTG_FS_IRQHandler+0x10>)
 800098e:	f000 fddf 	bl	8001550 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000055c 	.word	0x2000055c

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f006 fa26 	bl	8006e1c <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20020000 	.word	0x20020000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000178 	.word	0x20000178
 8000a04:	20000870 	.word	0x20000870

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f006 f9e5 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fdd1 	bl	8000604 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a70:	08007800 	.word	0x08007800
  ldr r2, =_sbss
 8000a74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a78:	20000870 	.word	0x20000870

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f8fc 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff feb8 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe8e 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	2000017c 	.word	0x2000017c

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2000017c 	.word	0x2000017c

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e16b      	b.n	8001004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 815a 	bne.w	8000ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80b4 	beq.w	8000ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b60      	ldr	r3, [pc, #384]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a5f      	ldr	r2, [pc, #380]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a5b      	ldr	r2, [pc, #364]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_GPIO_Init+0x314>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x226>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a51      	ldr	r2, [pc, #324]	; (8001028 <HAL_GPIO_Init+0x318>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x222>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a50      	ldr	r2, [pc, #320]	; (800102c <HAL_GPIO_Init+0x31c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x21e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x21a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4e      	ldr	r2, [pc, #312]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x216>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4d      	ldr	r2, [pc, #308]	; (8001038 <HAL_GPIO_Init+0x328>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4c      	ldr	r2, [pc, #304]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x20a>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e00e      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f1e:	2306      	movs	r3, #6
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4935      	ldr	r1, [pc, #212]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f ae90 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40021400 	.word	0x40021400
 800103c:	40021800 	.word	0x40021800
 8001040:	40021c00 	.word	0x40021c00
 8001044:	40013c00 	.word	0x40013c00

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001064:	e003      	b.n	800106e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	041a      	lsls	r2, r3, #16
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	619a      	str	r2, [r3, #24]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800107a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107c:	b08f      	sub	sp, #60	; 0x3c
 800107e:	af0a      	add	r7, sp, #40	; 0x28
 8001080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e054      	b.n	8001136 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f005 fc0e 	bl	80068c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fbb6 	bl	800383c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	687e      	ldr	r6, [r7, #4]
 80010d8:	466d      	mov	r5, sp
 80010da:	f106 0410 	add.w	r4, r6, #16
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ee:	1d33      	adds	r3, r6, #4
 80010f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f002 fb30 	bl	8003758 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fbad 	bl	800385e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	687e      	ldr	r6, [r7, #4]
 800110c:	466d      	mov	r5, sp
 800110e:	f106 0410 	add.w	r4, r6, #16
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001122:	1d33      	adds	r3, r6, #4
 8001124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f002 fd36 	bl	8003b98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800113e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800113e:	b590      	push	{r4, r7, lr}
 8001140:	b089      	sub	sp, #36	; 0x24
 8001142:	af04      	add	r7, sp, #16
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	4608      	mov	r0, r1
 8001148:	4611      	mov	r1, r2
 800114a:	461a      	mov	r2, r3
 800114c:	4603      	mov	r3, r0
 800114e:	70fb      	strb	r3, [r7, #3]
 8001150:	460b      	mov	r3, r1
 8001152:	70bb      	strb	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_HCD_HC_Init+0x28>
 8001162:	2302      	movs	r3, #2
 8001164:	e076      	b.n	8001254 <HAL_HCD_HC_Init+0x116>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	212c      	movs	r1, #44	; 0x2c
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	333d      	adds	r3, #61	; 0x3d
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	212c      	movs	r1, #44	; 0x2c
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	4413      	add	r3, r2
 800118c:	3338      	adds	r3, #56	; 0x38
 800118e:	787a      	ldrb	r2, [r7, #1]
 8001190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	212c      	movs	r1, #44	; 0x2c
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	4413      	add	r3, r2
 800119e:	3340      	adds	r3, #64	; 0x40
 80011a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	212c      	movs	r1, #44	; 0x2c
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	3339      	adds	r3, #57	; 0x39
 80011b2:	78fa      	ldrb	r2, [r7, #3]
 80011b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	212c      	movs	r1, #44	; 0x2c
 80011bc:	fb01 f303 	mul.w	r3, r1, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	333f      	adds	r3, #63	; 0x3f
 80011c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	78ba      	ldrb	r2, [r7, #2]
 80011ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d2:	b2d0      	uxtb	r0, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	212c      	movs	r1, #44	; 0x2c
 80011d8:	fb01 f303 	mul.w	r3, r1, r3
 80011dc:	4413      	add	r3, r2
 80011de:	333a      	adds	r3, #58	; 0x3a
 80011e0:	4602      	mov	r2, r0
 80011e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80011e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da09      	bge.n	8001200 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	333b      	adds	r3, #59	; 0x3b
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e008      	b.n	8001212 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	212c      	movs	r1, #44	; 0x2c
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	333b      	adds	r3, #59	; 0x3b
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	333c      	adds	r3, #60	; 0x3c
 8001220:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001224:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	787c      	ldrb	r4, [r7, #1]
 800122c:	78ba      	ldrb	r2, [r7, #2]
 800122e:	78f9      	ldrb	r1, [r7, #3]
 8001230:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4623      	mov	r3, r4
 8001242:	f002 fe2f 	bl	8003ea4 <USB_HC_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}

0800125c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_HCD_HC_Halt+0x1e>
 8001276:	2302      	movs	r3, #2
 8001278:	e00f      	b.n	800129a <HAL_HCD_HC_Halt+0x3e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f87f 	bl	800438e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	70fb      	strb	r3, [r7, #3]
 80012b6:	460b      	mov	r3, r1
 80012b8:	70bb      	strb	r3, [r7, #2]
 80012ba:	4613      	mov	r3, r2
 80012bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	212c      	movs	r1, #44	; 0x2c
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	333b      	adds	r3, #59	; 0x3b
 80012cc:	78ba      	ldrb	r2, [r7, #2]
 80012ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	212c      	movs	r1, #44	; 0x2c
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	4413      	add	r3, r2
 80012dc:	333f      	adds	r3, #63	; 0x3f
 80012de:	787a      	ldrb	r2, [r7, #1]
 80012e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80012e2:	7c3b      	ldrb	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d112      	bne.n	800130e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	212c      	movs	r1, #44	; 0x2c
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	3342      	adds	r3, #66	; 0x42
 80012f6:	2203      	movs	r2, #3
 80012f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	212c      	movs	r1, #44	; 0x2c
 8001300:	fb01 f303 	mul.w	r3, r1, r3
 8001304:	4413      	add	r3, r2
 8001306:	333d      	adds	r3, #61	; 0x3d
 8001308:	7f3a      	ldrb	r2, [r7, #28]
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e008      	b.n	8001320 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	212c      	movs	r1, #44	; 0x2c
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	4413      	add	r3, r2
 800131a:	3342      	adds	r3, #66	; 0x42
 800131c:	2202      	movs	r2, #2
 800131e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b03      	cmp	r3, #3
 8001324:	f200 80c6 	bhi.w	80014b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001341 	.word	0x08001341
 8001334:	080014a1 	.word	0x080014a1
 8001338:	080013a5 	.word	0x080013a5
 800133c:	08001423 	.word	0x08001423
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001340:	7c3b      	ldrb	r3, [r7, #16]
 8001342:	2b01      	cmp	r3, #1
 8001344:	f040 80b8 	bne.w	80014b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001348:	78bb      	ldrb	r3, [r7, #2]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 80b4 	bne.w	80014b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001350:	8b3b      	ldrh	r3, [r7, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	212c      	movs	r1, #44	; 0x2c
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	4413      	add	r3, r2
 8001362:	3355      	adds	r3, #85	; 0x55
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	3355      	adds	r3, #85	; 0x55
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	3342      	adds	r3, #66	; 0x42
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800138e:	e093      	b.n	80014b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	3342      	adds	r3, #66	; 0x42
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
      break;
 80013a2:	e089      	b.n	80014b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80013a4:	78bb      	ldrb	r3, [r7, #2]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11d      	bne.n	80013e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	212c      	movs	r1, #44	; 0x2c
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	3355      	adds	r3, #85	; 0x55
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	212c      	movs	r1, #44	; 0x2c
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	3342      	adds	r3, #66	; 0x42
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80013d0:	e073      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	3342      	adds	r3, #66	; 0x42
 80013e0:	2202      	movs	r2, #2
 80013e2:	701a      	strb	r2, [r3, #0]
      break;
 80013e4:	e069      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	212c      	movs	r1, #44	; 0x2c
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	3354      	adds	r3, #84	; 0x54
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	212c      	movs	r1, #44	; 0x2c
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	3342      	adds	r3, #66	; 0x42
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
      break;
 800140c:	e055      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	212c      	movs	r1, #44	; 0x2c
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	4413      	add	r3, r2
 800141a:	3342      	adds	r3, #66	; 0x42
 800141c:	2202      	movs	r2, #2
 800141e:	701a      	strb	r2, [r3, #0]
      break;
 8001420:	e04b      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001422:	78bb      	ldrb	r3, [r7, #2]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11d      	bne.n	8001464 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	212c      	movs	r1, #44	; 0x2c
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	3355      	adds	r3, #85	; 0x55
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	212c      	movs	r1, #44	; 0x2c
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4413      	add	r3, r2
 8001448:	3342      	adds	r3, #66	; 0x42
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800144e:	e034      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	212c      	movs	r1, #44	; 0x2c
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	3342      	adds	r3, #66	; 0x42
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
      break;
 8001462:	e02a      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	212c      	movs	r1, #44	; 0x2c
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4413      	add	r3, r2
 8001470:	3354      	adds	r3, #84	; 0x54
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	212c      	movs	r1, #44	; 0x2c
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	3342      	adds	r3, #66	; 0x42
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
      break;
 800148a:	e016      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	212c      	movs	r1, #44	; 0x2c
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	4413      	add	r3, r2
 8001498:	3342      	adds	r3, #66	; 0x42
 800149a:	2202      	movs	r2, #2
 800149c:	701a      	strb	r2, [r3, #0]
      break;
 800149e:	e00c      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	212c      	movs	r1, #44	; 0x2c
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	3342      	adds	r3, #66	; 0x42
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
      break;
 80014b2:	e002      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80014b4:	bf00      	nop
 80014b6:	e000      	b.n	80014ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80014b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	212c      	movs	r1, #44	; 0x2c
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	3344      	adds	r3, #68	; 0x44
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	8b3a      	ldrh	r2, [r7, #24]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	202c      	movs	r0, #44	; 0x2c
 80014d4:	fb00 f303 	mul.w	r3, r0, r3
 80014d8:	440b      	add	r3, r1
 80014da:	334c      	adds	r3, #76	; 0x4c
 80014dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	212c      	movs	r1, #44	; 0x2c
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	3360      	adds	r3, #96	; 0x60
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	3350      	adds	r3, #80	; 0x50
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3339      	adds	r3, #57	; 0x39
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	212c      	movs	r1, #44	; 0x2c
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	3361      	adds	r3, #97	; 0x61
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	222c      	movs	r2, #44	; 0x2c
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	3338      	adds	r3, #56	; 0x38
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	18d1      	adds	r1, r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	f002 fdd2 	bl	80040e8 <USB_HC_StartXfer>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fad3 	bl	8003b12 <USB_GetMode>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 80f6 	bne.w	8001760 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fab7 	bl	8003aec <USB_ReadInterrupts>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80ec 	beq.w	800175e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 faae 	bl	8003aec <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800159a:	d104      	bne.n	80015a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 fa9e 	bl	8003aec <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015ba:	d104      	bne.n	80015c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fa8e 	bl	8003aec <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015da:	d104      	bne.n	80015e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fa7e 	bl	8003aec <USB_ReadInterrupts>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d103      	bne.n	8001602 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2202      	movs	r2, #2
 8001600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fa70 	bl	8003aec <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001616:	d11c      	bne.n	8001652 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001620:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001632:	2110      	movs	r1, #16
 8001634:	6938      	ldr	r0, [r7, #16]
 8001636:	f002 f95f 	bl	80038f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800163a:	6938      	ldr	r0, [r7, #16]
 800163c:	f002 f990 	bl	8003960 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fb66 	bl	8003d18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f005 f9b9 	bl	80069c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fa48 	bl	8003aec <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001662:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001666:	d102      	bne.n	800166e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 f89e 	bl	80027aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fa3a 	bl	8003aec <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b08      	cmp	r3, #8
 8001680:	d106      	bne.n	8001690 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f005 f982 	bl	800698c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2208      	movs	r2, #8
 800168e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fa29 	bl	8003aec <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d101      	bne.n	80016a8 <HAL_HCD_IRQHandler+0x158>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_HCD_IRQHandler+0x15a>
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d012      	beq.n	80016d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699a      	ldr	r2, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0210 	bic.w	r2, r2, #16
 80016bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 ffa1 	bl	8002606 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699a      	ldr	r2, [r3, #24]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0210 	orr.w	r2, r2, #16
 80016d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 fa07 	bl	8003aec <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016e8:	d13a      	bne.n	8001760 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fe3c 	bl	800436c <USB_HC_ReadInterrupt>
 80016f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e025      	b.n	8001748 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d018      	beq.n	8001742 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001726:	d106      	bne.n	8001736 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8ab 	bl	800188a <HCD_HC_IN_IRQHandler>
 8001734:	e005      	b.n	8001742 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fbf9 	bl	8001f34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	429a      	cmp	r2, r3
 8001750:	d3d4      	bcc.n	80016fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	e000      	b.n	8001760 <HAL_HCD_IRQHandler+0x210>
      return;
 800175e:	bf00      	nop
    }
  }
}
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_HCD_Start+0x16>
 8001778:	2302      	movs	r3, #2
 800177a:	e013      	b.n	80017a4 <HAL_HCD_Start+0x3e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fb28 	bl	8003de0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f002 f840 	bl	800381a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_HCD_Stop+0x16>
 80017be:	2302      	movs	r3, #2
 80017c0:	e00d      	b.n	80017de <HAL_HCD_Stop+0x32>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 ff16 	bl	8004600 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 faca 	bl	8003d8c <USB_ResetPort>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3360      	adds	r3, #96	; 0x60
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3350      	adds	r3, #80	; 0x50
 8001844:	681b      	ldr	r3, [r3, #0]
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fb0e 	bl	8003e80 <USB_GetCurrentFrame>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fae9 	bl	8003e52 <USB_GetHostSpeed>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d11a      	bne.n	80018f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c6:	461a      	mov	r2, r3
 80018c8:	2304      	movs	r3, #4
 80018ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3361      	adds	r3, #97	; 0x61
 80018da:	2206      	movs	r2, #6
 80018dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fd50 	bl	800438e <USB_HC_Halt>
 80018ee:	e0af      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001906:	d11b      	bne.n	8001940 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001914:	461a      	mov	r2, r3
 8001916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3361      	adds	r3, #97	; 0x61
 800192a:	2207      	movs	r2, #7
 800192c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fd28 	bl	800438e <USB_HC_Halt>
 800193e:	e087      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b20      	cmp	r3, #32
 8001954:	d109      	bne.n	800196a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4413      	add	r3, r2
 800195e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001962:	461a      	mov	r2, r3
 8001964:	2320      	movs	r3, #32
 8001966:	6093      	str	r3, [r2, #8]
 8001968:	e072      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	015a      	lsls	r2, r3, #5
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4413      	add	r3, r2
 8001972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b08      	cmp	r3, #8
 800197e:	d11a      	bne.n	80019b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198c:	461a      	mov	r2, r3
 800198e:	2308      	movs	r3, #8
 8001990:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	3361      	adds	r3, #97	; 0x61
 80019a0:	2205      	movs	r2, #5
 80019a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fced 	bl	800438e <USB_HC_Halt>
 80019b4:	e04c      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	015a      	lsls	r2, r3, #5
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019cc:	d11b      	bne.n	8001a06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019da:	461a      	mov	r2, r3
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3361      	adds	r3, #97	; 0x61
 80019f0:	2208      	movs	r2, #8
 80019f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fcc5 	bl	800438e <USB_HC_Halt>
 8001a04:	e024      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d119      	bne.n	8001a50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3361      	adds	r3, #97	; 0x61
 8001a3c:	2206      	movs	r2, #6
 8001a3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fc9f 	bl	800438e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a66:	d112      	bne.n	8001a8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fc8b 	bl	800438e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a84:	461a      	mov	r2, r3
 8001a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a8c:	e24e      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	f040 80df 	bne.w	8001c64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d019      	beq.n	8001ae2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3348      	adds	r3, #72	; 0x48
 8001abc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0159      	lsls	r1, r3, #5
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ad0:	1ad2      	subs	r2, r2, r3
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	202c      	movs	r0, #44	; 0x2c
 8001ad8:	fb00 f303 	mul.w	r3, r0, r3
 8001adc:	440b      	add	r3, r1
 8001ade:	3350      	adds	r3, #80	; 0x50
 8001ae0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3361      	adds	r3, #97	; 0x61
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	335c      	adds	r3, #92	; 0x5c
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	461a      	mov	r2, r3
 8001b14:	2301      	movs	r3, #1
 8001b16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	333f      	adds	r3, #63	; 0x3f
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	333f      	adds	r3, #63	; 0x3f
 8001b3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d111      	bne.n	8001b64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fc1f 	bl	800438e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2310      	movs	r3, #16
 8001b60:	6093      	str	r3, [r2, #8]
 8001b62:	e03a      	b.n	8001bda <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	333f      	adds	r3, #63	; 0x3f
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d009      	beq.n	8001b8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	333f      	adds	r3, #63	; 0x3f
 8001b86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d126      	bne.n	8001bda <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	0151      	lsls	r1, r2, #5
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	440a      	add	r2, r1
 8001ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001baa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3360      	adds	r3, #96	; 0x60
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	202c      	movs	r0, #44	; 0x2c
 8001bc8:	fb00 f303 	mul.w	r3, r0, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3360      	adds	r3, #96	; 0x60
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f004 ff03 	bl	80069e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d12b      	bne.n	8001c3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3348      	adds	r3, #72	; 0x48
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	202c      	movs	r0, #44	; 0x2c
 8001bf8:	fb00 f202 	mul.w	r2, r0, r2
 8001bfc:	440a      	add	r2, r1
 8001bfe:	3240      	adds	r2, #64	; 0x40
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 818e 	beq.w	8001f2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3354      	adds	r3, #84	; 0x54
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2d8      	uxtb	r0, r3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3354      	adds	r3, #84	; 0x54
 8001c34:	4602      	mov	r2, r0
 8001c36:	701a      	strb	r2, [r3, #0]
}
 8001c38:	e178      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3354      	adds	r3, #84	; 0x54
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3354      	adds	r3, #84	; 0x54
 8001c5e:	4602      	mov	r2, r0
 8001c60:	701a      	strb	r2, [r3, #0]
}
 8001c62:	e163      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	f040 80f6 	bne.w	8001e68 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3361      	adds	r3, #97	; 0x61
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d109      	bne.n	8001ca4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3360      	adds	r3, #96	; 0x60
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e0c9      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3361      	adds	r3, #97	; 0x61
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d109      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3360      	adds	r3, #96	; 0x60
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e0b5      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3361      	adds	r3, #97	; 0x61
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b06      	cmp	r3, #6
 8001cde:	d009      	beq.n	8001cf4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3361      	adds	r3, #97	; 0x61
 8001cee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d150      	bne.n	8001d96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	335c      	adds	r3, #92	; 0x5c
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	202c      	movs	r0, #44	; 0x2c
 8001d0c:	fb00 f303 	mul.w	r3, r0, r3
 8001d10:	440b      	add	r3, r1
 8001d12:	335c      	adds	r3, #92	; 0x5c
 8001d14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	335c      	adds	r3, #92	; 0x5c
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d912      	bls.n	8001d50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	335c      	adds	r3, #92	; 0x5c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3360      	adds	r3, #96	; 0x60
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d4e:	e073      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	2202      	movs	r2, #2
 8001d60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d94:	e050      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3361      	adds	r3, #97	; 0x61
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d122      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3360      	adds	r3, #96	; 0x60
 8001db8:	2202      	movs	r2, #2
 8001dba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e023      	b.n	8001e38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3361      	adds	r3, #97	; 0x61
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b07      	cmp	r3, #7
 8001e02:	d119      	bne.n	8001e38 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	335c      	adds	r3, #92	; 0x5c
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	202c      	movs	r0, #44	; 0x2c
 8001e1c:	fb00 f303 	mul.w	r3, r0, r3
 8001e20:	440b      	add	r3, r1
 8001e22:	335c      	adds	r3, #92	; 0x5c
 8001e24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3360      	adds	r3, #96	; 0x60
 8001e34:	2204      	movs	r2, #4
 8001e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	461a      	mov	r2, r3
 8001e46:	2302      	movs	r3, #2
 8001e48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	202c      	movs	r0, #44	; 0x2c
 8001e54:	fb00 f303 	mul.w	r3, r0, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3360      	adds	r3, #96	; 0x60
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f004 fdbd 	bl	80069e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e66:	e061      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d156      	bne.n	8001f2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	333f      	adds	r3, #63	; 0x3f
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d111      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	335c      	adds	r3, #92	; 0x5c
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fa6d 	bl	800438e <USB_HC_Halt>
 8001eb4:	e031      	b.n	8001f1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	212c      	movs	r1, #44	; 0x2c
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	333f      	adds	r3, #63	; 0x3f
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	333f      	adds	r3, #63	; 0x3f
 8001ed8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d11d      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	335c      	adds	r3, #92	; 0x5c
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d110      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3361      	adds	r3, #97	; 0x61
 8001f06:	2203      	movs	r2, #3
 8001f08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fa3a 	bl	800438e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	461a      	mov	r2, r3
 8001f28:	2310      	movs	r3, #16
 8001f2a:	6093      	str	r3, [r2, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11a      	bne.n	8001f9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2304      	movs	r3, #4
 8001f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3361      	adds	r3, #97	; 0x61
 8001f84:	2206      	movs	r2, #6
 8001f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 f9fb 	bl	800438e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001f98:	e331      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d12e      	bne.n	800200e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	333d      	adds	r3, #61	; 0x3d
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f040 8313 	bne.w	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	333d      	adds	r3, #61	; 0x3d
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f002 f9c1 	bl	800438e <USB_HC_Halt>
}
 800200c:	e2f7      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d112      	bne.n	800204c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	461a      	mov	r2, r3
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002038:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f002 f9a2 	bl	800438e <USB_HC_Halt>
}
 800204a:	e2d8      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d140      	bne.n	80020e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	335c      	adds	r3, #92	; 0x5c
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d111      	bne.n	80020ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333d      	adds	r3, #61	; 0x3d
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	461a      	mov	r2, r3
 80020aa:	2340      	movs	r3, #64	; 0x40
 80020ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ba:	461a      	mov	r2, r3
 80020bc:	2301      	movs	r3, #1
 80020be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3361      	adds	r3, #97	; 0x61
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f956 	bl	800438e <USB_HC_Halt>
}
 80020e2:	e28c      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d12c      	bne.n	8002154 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3361      	adds	r3, #97	; 0x61
 8002108:	2204      	movs	r2, #4
 800210a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	333d      	adds	r3, #61	; 0x3d
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	335c      	adds	r3, #92	; 0x5c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f002 f927 	bl	800438e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	461a      	mov	r2, r3
 800214e:	2340      	movs	r3, #64	; 0x40
 8002150:	6093      	str	r3, [r2, #8]
}
 8002152:	e254      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11a      	bne.n	80021a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	2308      	movs	r3, #8
 800217a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	2205      	movs	r2, #5
 800218c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f002 f8f8 	bl	800438e <USB_HC_Halt>
}
 800219e:	e22e      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d140      	bne.n	8002238 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3361      	adds	r3, #97	; 0x61
 80021d6:	2203      	movs	r2, #3
 80021d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	333d      	adds	r3, #61	; 0x3d
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d112      	bne.n	8002214 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	333c      	adds	r3, #60	; 0x3c
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d108      	bne.n	8002214 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	333d      	adds	r3, #61	; 0x3d
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f002 f8b5 	bl	800438e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	461a      	mov	r2, r3
 8002232:	2310      	movs	r3, #16
 8002234:	6093      	str	r3, [r2, #8]
}
 8002236:	e1e2      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224a:	2b80      	cmp	r3, #128	; 0x80
 800224c:	d164      	bne.n	8002318 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d111      	bne.n	800227a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3361      	adds	r3, #97	; 0x61
 8002264:	2206      	movs	r2, #6
 8002266:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f002 f88b 	bl	800438e <USB_HC_Halt>
 8002278:	e044      	b.n	8002304 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	202c      	movs	r0, #44	; 0x2c
 8002292:	fb00 f303 	mul.w	r3, r0, r3
 8002296:	440b      	add	r3, r1
 8002298:	335c      	adds	r3, #92	; 0x5c
 800229a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d920      	bls.n	80022f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	335c      	adds	r3, #92	; 0x5c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3360      	adds	r3, #96	; 0x60
 80022d0:	2204      	movs	r2, #4
 80022d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	b2d9      	uxtb	r1, r3
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	202c      	movs	r0, #44	; 0x2c
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3360      	adds	r3, #96	; 0x60
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f004 fb78 	bl	80069e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022f0:	e008      	b.n	8002304 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3360      	adds	r3, #96	; 0x60
 8002300:	2202      	movs	r2, #2
 8002302:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	461a      	mov	r2, r3
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	6093      	str	r3, [r2, #8]
}
 8002316:	e172      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d11b      	bne.n	8002368 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3361      	adds	r3, #97	; 0x61
 800233e:	2208      	movs	r2, #8
 8002340:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f002 f81e 	bl	800438e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002364:	6093      	str	r3, [r2, #8]
}
 8002366:	e14a      	b.n	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	f040 813f 	bne.w	80025fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3361      	adds	r3, #97	; 0x61
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d17d      	bne.n	8002490 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	333f      	adds	r3, #63	; 0x3f
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d00a      	beq.n	80023d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	333f      	adds	r3, #63	; 0x3f
 80023c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	f040 8100 	bne.w	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d113      	bne.n	8002400 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3355      	adds	r3, #85	; 0x55
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2d8      	uxtb	r0, r3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3355      	adds	r3, #85	; 0x55
 80023fc:	4602      	mov	r2, r0
 80023fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 80e3 	bne.w	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	334c      	adds	r3, #76	; 0x4c
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80d8 	beq.w	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	334c      	adds	r3, #76	; 0x4c
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	202c      	movs	r0, #44	; 0x2c
 8002436:	fb00 f202 	mul.w	r2, r0, r2
 800243a:	440a      	add	r2, r1
 800243c:	3240      	adds	r2, #64	; 0x40
 800243e:	8812      	ldrh	r2, [r2, #0]
 8002440:	4413      	add	r3, r2
 8002442:	3b01      	subs	r3, #1
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	202c      	movs	r0, #44	; 0x2c
 800244a:	fb00 f202 	mul.w	r2, r0, r2
 800244e:	440a      	add	r2, r1
 8002450:	3240      	adds	r2, #64	; 0x40
 8002452:	8812      	ldrh	r2, [r2, #0]
 8002454:	fbb3 f3f2 	udiv	r3, r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80b5 	beq.w	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3355      	adds	r3, #85	; 0x55
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2d8      	uxtb	r0, r3
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3355      	adds	r3, #85	; 0x55
 800248a:	4602      	mov	r2, r0
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	e09f      	b.n	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3361      	adds	r3, #97	; 0x61
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d109      	bne.n	80024b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3360      	adds	r3, #96	; 0x60
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e08b      	b.n	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3361      	adds	r3, #97	; 0x61
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d109      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3360      	adds	r3, #96	; 0x60
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e077      	b.n	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d109      	bne.n	8002508 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2205      	movs	r2, #5
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e063      	b.n	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b06      	cmp	r3, #6
 800251a:	d009      	beq.n	8002530 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3361      	adds	r3, #97	; 0x61
 800252a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800252c:	2b08      	cmp	r3, #8
 800252e:	d14f      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	335c      	adds	r3, #92	; 0x5c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	202c      	movs	r0, #44	; 0x2c
 8002548:	fb00 f303 	mul.w	r3, r0, r3
 800254c:	440b      	add	r3, r1
 800254e:	335c      	adds	r3, #92	; 0x5c
 8002550:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d912      	bls.n	800258c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	2204      	movs	r2, #4
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e021      	b.n	80025d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3360      	adds	r3, #96	; 0x60
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	461a      	mov	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2302      	movs	r3, #2
 80025e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	b2d9      	uxtb	r1, r3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	202c      	movs	r0, #44	; 0x2c
 80025ec:	fb00 f303 	mul.w	r3, r0, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3360      	adds	r3, #96	; 0x60
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f004 f9f1 	bl	80069e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b08a      	sub	sp, #40	; 0x28
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	0c5b      	lsrs	r3, r3, #17
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d004      	beq.n	800264c <HCD_RXQLVL_IRQHandler+0x46>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b05      	cmp	r3, #5
 8002646:	f000 80a9 	beq.w	800279c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800264a:	e0aa      	b.n	80027a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a6 	beq.w	80027a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3344      	adds	r3, #68	; 0x44
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 809b 	beq.w	80027a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3350      	adds	r3, #80	; 0x50
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	441a      	add	r2, r3
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	202c      	movs	r0, #44	; 0x2c
 8002684:	fb00 f303 	mul.w	r3, r0, r3
 8002688:	440b      	add	r3, r1
 800268a:	334c      	adds	r3, #76	; 0x4c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d87a      	bhi.n	8002788 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3344      	adds	r3, #68	; 0x44
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	b292      	uxth	r2, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f001 f9c6 	bl	8003a3c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3344      	adds	r3, #68	; 0x44
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	441a      	add	r2, r3
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	202c      	movs	r0, #44	; 0x2c
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	440b      	add	r3, r1
 80026d0:	3344      	adds	r3, #68	; 0x44
 80026d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3350      	adds	r3, #80	; 0x50
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	441a      	add	r2, r3
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	202c      	movs	r0, #44	; 0x2c
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	440b      	add	r3, r1
 80026f4:	3350      	adds	r3, #80	; 0x50
 80026f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	0cdb      	lsrs	r3, r3, #19
 8002708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3340      	adds	r3, #64	; 0x40
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4293      	cmp	r3, r2
 8002724:	d13c      	bne.n	80027a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d039      	beq.n	80027a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002742:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800274a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3354      	adds	r3, #84	; 0x54
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	f083 0301 	eor.w	r3, r3, #1
 8002772:	b2d8      	uxtb	r0, r3
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3354      	adds	r3, #84	; 0x54
 8002782:	4602      	mov	r2, r0
 8002784:	701a      	strb	r2, [r3, #0]
      break;
 8002786:	e00b      	b.n	80027a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
      break;
 800279a:	e001      	b.n	80027a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800279c:	bf00      	nop
 800279e:	e000      	b.n	80027a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80027a0:	bf00      	nop
  }
}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d10b      	bne.n	80027fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f004 f8db 	bl	80069a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b08      	cmp	r3, #8
 8002802:	d132      	bne.n	800286a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f043 0308 	orr.w	r3, r3, #8
 800280a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d126      	bne.n	8002864 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d113      	bne.n	8002846 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002828:	d106      	bne.n	8002838 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f001 fa71 	bl	8003d18 <USB_InitFSLSPClkSel>
 8002836:	e011      	b.n	800285c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fa6a 	bl	8003d18 <USB_InitFSLSPClkSel>
 8002844:	e00a      	b.n	800285c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d106      	bne.n	800285c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002854:	461a      	mov	r2, r3
 8002856:	f64e 2360 	movw	r3, #60000	; 0xea60
 800285a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f004 f8cd 	bl	80069fc <HAL_HCD_PortEnabled_Callback>
 8002862:	e002      	b.n	800286a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f004 f8d7 	bl	8006a18 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d103      	bne.n	800287c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f043 0320 	orr.w	r3, r3, #32
 800287a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e267      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d075      	beq.n	800299a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d00c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d112      	bne.n	80028ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c6:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05b      	beq.n	8002998 <HAL_RCC_OscConfig+0x108>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d157      	bne.n	8002998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e242      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x74>
 80028f6:	4b76      	ldr	r3, [pc, #472]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a75      	ldr	r2, [pc, #468]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0xb0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x98>
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6c      	ldr	r2, [pc, #432]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xb0>
 8002928:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a68      	ldr	r2, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe f8d0 	bl	8000aec <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe f8cc 	bl	8000aec <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e207      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0xc0>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe f8bc 	bl	8000aec <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe f8b8 	bl	8000aec <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1f3      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0xe8>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d11c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x152>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e1c7      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4937      	ldr	r1, [pc, #220]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	e03a      	b.n	8002a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_RCC_OscConfig+0x244>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe f871 	bl	8000aec <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7fe f86d 	bl	8000aec <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1a8      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4925      	ldr	r1, [pc, #148]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_OscConfig+0x244>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe f850 	bl	8000aec <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a50:	f7fe f84c 	bl	8000aec <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e187      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d036      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_RCC_OscConfig+0x248>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f830 	bl	8000aec <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe f82c 	bl	8000aec <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e167      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x200>
 8002aae:	e01b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x248>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe f819 	bl	8000aec <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	e00e      	b.n	8002adc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002abe:	f7fe f815 	bl	8000aec <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d907      	bls.n	8002adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e150      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	42470000 	.word	0x42470000
 8002ad8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ea      	bne.n	8002abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8097 	beq.w	8002c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d118      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a73      	ldr	r2, [pc, #460]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7fd ffd5 	bl	8000aec <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fd ffd1 	bl	8000aec <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e10c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2ea>
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a63      	ldr	r2, [pc, #396]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x324>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x30c>
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a5e      	ldr	r2, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x324>
 8002b9c:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a54      	ldr	r2, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fd ff96 	bl	8000aec <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fd ff92 	bl	8000aec <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0cb      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ee      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7fd ff80 	bl	8000aec <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fd ff7c 	bl	8000aec <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0b5      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a1 	beq.w	8002d70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d05c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d141      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fd ff50 	bl	8000aec <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fd ff4c 	bl	8000aec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e087      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fd ff25 	bl	8000aec <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fd ff21 	bl	8000aec <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e05c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x416>
 8002cc4:	e054      	b.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fd ff0e 	bl	8000aec <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fd ff0a 	bl	8000aec <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e045      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x444>
 8002cf2:	e03d      	b.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e038      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d028      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d121      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d11a      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d111      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0cc      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90c      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b63      	ldr	r3, [pc, #396]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b8      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	494d      	ldr	r1, [pc, #308]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d044      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d119      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e07f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e067      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4934      	ldr	r1, [pc, #208]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7fd fe3c 	bl	8000aec <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fd fe38 	bl	8000aec <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d20c      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4916      	ldr	r1, [pc, #88]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	490e      	ldr	r1, [pc, #56]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f06:	f000 f821 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	490a      	ldr	r1, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	5ccb      	ldrb	r3, [r1, r3]
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fc7c 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	080077a4 	.word	0x080077a4
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000004 	.word	0x20000004

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b094      	sub	sp, #80	; 0x50
 8002f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
 8002f58:	2300      	movs	r3, #0
 8002f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f64:	4b79      	ldr	r3, [pc, #484]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d00d      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x40>
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	f200 80e1 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7e:	e0db      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f84:	e0db      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8a:	e0d8      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d063      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	2200      	movs	r2, #0
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd0:	0150      	lsls	r0, r2, #5
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	1a51      	subs	r1, r2, r1
 8002fda:	6139      	str	r1, [r7, #16]
 8002fdc:	4629      	mov	r1, r5
 8002fde:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	018b      	lsls	r3, r1, #6
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	018a      	lsls	r2, r1, #6
 8002ffe:	4651      	mov	r1, sl
 8003000:	ebb2 0801 	subs.w	r8, r2, r1
 8003004:	4659      	mov	r1, fp
 8003006:	eb63 0901 	sbc.w	r9, r3, r1
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301e:	4690      	mov	r8, r2
 8003020:	4699      	mov	r9, r3
 8003022:	4623      	mov	r3, r4
 8003024:	eb18 0303 	adds.w	r3, r8, r3
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	462b      	mov	r3, r5
 800302c:	eb49 0303 	adc.w	r3, r9, r3
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800303e:	4629      	mov	r1, r5
 8003040:	024b      	lsls	r3, r1, #9
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003048:	4621      	mov	r1, r4
 800304a:	024a      	lsls	r2, r1, #9
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003052:	2200      	movs	r2, #0
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
 8003056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800305c:	f7fd f908 	bl	8000270 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003068:	e058      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	099b      	lsrs	r3, r3, #6
 8003070:	2200      	movs	r2, #0
 8003072:	4618      	mov	r0, r3
 8003074:	4611      	mov	r1, r2
 8003076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003084:	4642      	mov	r2, r8
 8003086:	464b      	mov	r3, r9
 8003088:	f04f 0000 	mov.w	r0, #0
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	0159      	lsls	r1, r3, #5
 8003092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003096:	0150      	lsls	r0, r2, #5
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4641      	mov	r1, r8
 800309e:	ebb2 0a01 	subs.w	sl, r2, r1
 80030a2:	4649      	mov	r1, r9
 80030a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030bc:	ebb2 040a 	subs.w	r4, r2, sl
 80030c0:	eb63 050b 	sbc.w	r5, r3, fp
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	00eb      	lsls	r3, r5, #3
 80030ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d2:	00e2      	lsls	r2, r4, #3
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	4643      	mov	r3, r8
 80030da:	18e3      	adds	r3, r4, r3
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	464b      	mov	r3, r9
 80030e0:	eb45 0303 	adc.w	r3, r5, r3
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f2:	4629      	mov	r1, r5
 80030f4:	028b      	lsls	r3, r1, #10
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030fc:	4621      	mov	r1, r4
 80030fe:	028a      	lsls	r2, r1, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003106:	2200      	movs	r2, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	61fa      	str	r2, [r7, #28]
 800310c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003110:	f7fd f8ae 	bl	8000270 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	3301      	adds	r3, #1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800312c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetSysClockFreq+0x204>)
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003140:	4618      	mov	r0, r3
 8003142:	3750      	adds	r7, #80	; 0x50
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400
 8003154:	007a1200 	.word	0x007a1200

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_GetHCLKFreq+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000000 	.word	0x20000000

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff0 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	080077b4 	.word	0x080077b4

08003198 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	220f      	movs	r2, #15
 80031a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_GetClockConfig+0x5c>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_RCC_GetClockConfig+0x5c>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_RCC_GetClockConfig+0x5c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_GetClockConfig+0x5c>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_RCC_GetClockConfig+0x60>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0207 	and.w	r2, r3, #7
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	601a      	str	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40023c00 	.word	0x40023c00

080031fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e041      	b.n	8003292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f839 	bl	800329a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 f9d8 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04e      	b.n	8003366 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <HAL_TIM_Base_Start_IT+0xc4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d01d      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_TIM_Base_Start_IT+0xc8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_TIM_Base_Start_IT+0xcc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_TIM_Base_Start_IT+0xd0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <HAL_TIM_Base_Start_IT+0xd4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_TIM_Base_Start_IT+0xd8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x80>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_TIM_Base_Start_IT+0xdc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d111      	bne.n	8003354 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b06      	cmp	r3, #6
 8003340:	d010      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e007      	b.n	8003364 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40010400 	.word	0x40010400
 8003388:	40014000 	.word	0x40014000
 800338c:	40001800 	.word	0x40001800

08003390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0202 	mvn.w	r2, #2
 80033bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8ee 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8e0 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8f1 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0204 	mvn.w	r2, #4
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8c4 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8b6 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8c7 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b08      	cmp	r3, #8
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0208 	mvn.w	r2, #8
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f89a 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f88c 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f89d 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0210 	mvn.w	r2, #16
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2208      	movs	r2, #8
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f870 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f862 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f873 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0201 	mvn.w	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd f948 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f902 	bl	8003744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d10e      	bne.n	800356c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d107      	bne.n	800356c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f838 	bl	80035dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8cc 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a40      	ldr	r2, [pc, #256]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d00f      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00b      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3b      	ldr	r2, [pc, #236]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d108      	bne.n	8003642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d027      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d023      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a29      	ldr	r2, [pc, #164]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d017      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <TIM_Base_SetConfig+0x128>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a27      	ldr	r2, [pc, #156]	; (800371c <TIM_Base_SetConfig+0x12c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <TIM_Base_SetConfig+0x130>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <TIM_Base_SetConfig+0x134>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <TIM_Base_SetConfig+0x138>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <TIM_Base_SetConfig+0x13c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <TIM_Base_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <TIM_Base_SetConfig+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	40001800 	.word	0x40001800
 8003728:	40001c00 	.word	0x40001c00
 800372c:	40002000 	.word	0x40002000

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003758:	b084      	sub	sp, #16
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	f107 001c 	add.w	r0, r7, #28
 8003766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2b01      	cmp	r3, #1
 800376e:	d122      	bne.n	80037b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9c0 	bl	8003b30 <USB_CoreReset>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e01a      	b.n	80037ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f9b4 	bl	8003b30 <USB_CoreReset>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
 80037de:	e005      	b.n	80037ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10b      	bne.n	800380a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f043 0206 	orr.w	r2, r3, #6
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003816:	b004      	add	sp, #16
 8003818:	4770      	bx	lr

0800381a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 0201 	bic.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d115      	bne.n	80038ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800388c:	2001      	movs	r0, #1
 800388e:	f7fd f939 	bl	8000b04 <HAL_Delay>
      ms++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f93a 	bl	8003b12 <USB_GetMode>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d01e      	beq.n	80038e2 <USB_SetCurrentMode+0x84>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b31      	cmp	r3, #49	; 0x31
 80038a8:	d9f0      	bls.n	800388c <USB_SetCurrentMode+0x2e>
 80038aa:	e01a      	b.n	80038e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038be:	2001      	movs	r0, #1
 80038c0:	f7fd f920 	bl	8000b04 <HAL_Delay>
      ms++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3301      	adds	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f921 	bl	8003b12 <USB_GetMode>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <USB_SetCurrentMode+0x84>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b31      	cmp	r3, #49	; 0x31
 80038da:	d9f0      	bls.n	80038be <USB_SetCurrentMode+0x60>
 80038dc:	e001      	b.n	80038e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e005      	b.n	80038ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b32      	cmp	r3, #50	; 0x32
 80038e6:	d101      	bne.n	80038ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3301      	adds	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <USB_FlushTxFifo+0x64>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e01b      	b.n	8003950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	daf2      	bge.n	8003906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	019b      	lsls	r3, r3, #6
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a08      	ldr	r2, [pc, #32]	; (800395c <USB_FlushTxFifo+0x64>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e006      	b.n	8003950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	d0f0      	beq.n	8003930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	00030d40 	.word	0x00030d40

08003960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <USB_FlushRxFifo+0x5c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e018      	b.n	80039b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	daf2      	bge.n	800396c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2210      	movs	r2, #16
 800398e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3301      	adds	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a08      	ldr	r2, [pc, #32]	; (80039bc <USB_FlushRxFifo+0x5c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e006      	b.n	80039b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d0f0      	beq.n	8003990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	00030d40 	.word	0x00030d40

080039c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	460b      	mov	r3, r1
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80039de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d123      	bne.n	8003a2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80039e6:	88bb      	ldrh	r3, [r7, #4]
 80039e8:	3303      	adds	r3, #3
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e018      	b.n	8003a26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	031a      	lsls	r2, r3, #12
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a00:	461a      	mov	r2, r3
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3301      	adds	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d3e2      	bcc.n	80039f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3724      	adds	r7, #36	; 0x24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b08b      	sub	sp, #44	; 0x2c
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	e014      	b.n	8003a92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	3301      	adds	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	3301      	adds	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	3301      	adds	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	6a3a      	ldr	r2, [r7, #32]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3e6      	bcc.n	8003a68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003a9a:	8bfb      	ldrh	r3, [r7, #30]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01e      	beq.n	8003ade <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	701a      	strb	r2, [r3, #0]
      i++;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	623b      	str	r3, [r7, #32]
      pDest++;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	3301      	adds	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ad2:	8bfb      	ldrh	r3, [r7, #30]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ad8:	8bfb      	ldrh	r3, [r7, #30]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1ea      	bne.n	8003ab4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	372c      	adds	r7, #44	; 0x2c
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <USB_CoreReset+0x64>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e01b      	b.n	8003b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	daf2      	bge.n	8003b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <USB_CoreReset+0x64>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e006      	b.n	8003b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d0f0      	beq.n	8003b66 <USB_CoreReset+0x36>

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	00030d40 	.word	0x00030d40

08003b98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b98:	b084      	sub	sp, #16
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d10a      	bne.n	8003c0a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e014      	b.n	8003c34 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e009      	b.n	8003c34 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c34:	2110      	movs	r1, #16
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fe5e 	bl	80038f8 <USB_FlushTxFifo>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fe8a 	bl	8003960 <USB_FlushRxFifo>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e015      	b.n	8003c88 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	3301      	adds	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d3e5      	bcc.n	8003c5c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <USB_HostInit+0x16c>)
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <USB_HostInit+0x170>)
 8003cbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003cc0:	e009      	b.n	8003cd6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <USB_HostInit+0x174>)
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <USB_HostInit+0x178>)
 8003cd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <USB_HostInit+0x17c>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d00:	b004      	add	sp, #16
 8003d02:	4770      	bx	lr
 8003d04:	01000200 	.word	0x01000200
 8003d08:	00e00300 	.word	0x00e00300
 8003d0c:	00600080 	.word	0x00600080
 8003d10:	004000e0 	.word	0x004000e0
 8003d14:	a3200008 	.word	0xa3200008

08003d18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d60:	461a      	mov	r2, r3
 8003d62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003d66:	6053      	str	r3, [r2, #4]
 8003d68:	e009      	b.n	8003d7e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d106      	bne.n	8003d7e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d76:	461a      	mov	r2, r3
 8003d78:	f241 7370 	movw	r3, #6000	; 0x1770
 8003d7c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	f7fc fea1 	bl	8000b04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003dd0:	200a      	movs	r0, #10
 8003dd2:	f7fc fe97 	bl	8000b04 <HAL_Delay>

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <USB_DriveVbus+0x44>
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003e1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d109      	bne.n	8003e44 <USB_DriveVbus+0x64>
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	0c5b      	lsrs	r3, r3, #17
 8003e70:	f003 0303 	and.w	r3, r3, #3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	b29b      	uxth	r3, r3
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	70fb      	strb	r3, [r7, #3]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70bb      	strb	r3, [r7, #2]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003eda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d87e      	bhi.n	8003fe0 <USB_HC_Init+0x13c>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <USB_HC_Init+0x44>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003fa3 	.word	0x08003fa3
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f65 	.word	0x08003f65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	f240 439d 	movw	r3, #1181	; 0x49d
 8003f0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003f0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da10      	bge.n	8003f36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003f34:	e057      	b.n	8003fe6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d051      	beq.n	8003fe6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f60:	60d3      	str	r3, [r2, #12]
      break;
 8003f62:	e040      	b.n	8003fe6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	461a      	mov	r2, r3
 8003f72:	f240 639d 	movw	r3, #1693	; 0x69d
 8003f76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003f78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da34      	bge.n	8003fea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003fa0:	e023      	b.n	8003fea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f240 2325 	movw	r3, #549	; 0x225
 8003fb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003fb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da17      	bge.n	8003fee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003fdc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003fde:	e006      	b.n	8003fee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77fb      	strb	r3, [r7, #31]
      break;
 8003fe4:	e004      	b.n	8003ff0 <USB_HC_Init+0x14c>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <USB_HC_Init+0x14c>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <USB_HC_Init+0x14c>
      break;
 8003fee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	440a      	add	r2, r1
 8004006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	6939      	ldr	r1, [r7, #16]
 8004026:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800402a:	4313      	orrs	r3, r2
 800402c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800403a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da03      	bge.n	800404a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e001      	b.n	800404e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff feff 	bl	8003e52 <USB_GetHostSpeed>
 8004054:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800405a:	2b02      	cmp	r3, #2
 800405c:	d106      	bne.n	800406c <USB_HC_Init+0x1c8>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d003      	beq.n	800406c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e001      	b.n	8004070 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004070:	787b      	ldrb	r3, [r7, #1]
 8004072:	059b      	lsls	r3, r3, #22
 8004074:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004078:	78bb      	ldrb	r3, [r7, #2]
 800407a:	02db      	lsls	r3, r3, #11
 800407c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004080:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004082:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004086:	049b      	lsls	r3, r3, #18
 8004088:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800408c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800408e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004090:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004094:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	0159      	lsls	r1, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	440b      	add	r3, r1
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80040ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80040ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d003      	beq.n	80040be <USB_HC_Init+0x21a>
 80040b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10f      	bne.n	80040de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80040de:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	; 0x30
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004104:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02d      	beq.n	800416e <USB_HC_StartXfer+0x86>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	791b      	ldrb	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d129      	bne.n	800416e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d117      	bne.n	8004150 <USB_HC_StartXfer+0x68>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	79db      	ldrb	r3, [r3, #7]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <USB_HC_StartXfer+0x48>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	79db      	ldrb	r3, [r3, #7]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d10f      	bne.n	8004150 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	6a3a      	ldr	r2, [r7, #32]
 8004144:	440a      	add	r2, r1
 8004146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <USB_HC_StartXfer+0x86>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	795b      	ldrb	r3, [r3, #5]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	4619      	mov	r1, r3
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fa0f 	bl	8004588 <USB_DoPing>
      return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e0f8      	b.n	8004360 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	8912      	ldrh	r2, [r2, #8]
 800417e:	4413      	add	r3, r2
 8004180:	3b01      	subs	r3, #1
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	8912      	ldrh	r2, [r2, #8]
 8004186:	fbb3 f3f2 	udiv	r3, r3, r2
 800418a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800418c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800418e:	8b7b      	ldrh	r3, [r7, #26]
 8004190:	429a      	cmp	r2, r3
 8004192:	d90b      	bls.n	80041ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004194:	8b7b      	ldrh	r3, [r7, #26]
 8004196:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	8912      	ldrh	r2, [r2, #8]
 800419e:	fb03 f202 	mul.w	r2, r3, r2
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	611a      	str	r2, [r3, #16]
 80041a6:	e001      	b.n	80041ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80041a8:	2301      	movs	r3, #1
 80041aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	78db      	ldrb	r3, [r3, #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80041b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	8912      	ldrh	r2, [r2, #8]
 80041ba:	fb03 f202 	mul.w	r2, r3, r2
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e003      	b.n	80041cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80041d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041d6:	04d9      	lsls	r1, r3, #19
 80041d8:	4b63      	ldr	r3, [pc, #396]	; (8004368 <USB_HC_StartXfer+0x280>)
 80041da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	7a9b      	ldrb	r3, [r3, #10]
 80041e2:	075b      	lsls	r3, r3, #29
 80041e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041e8:	69f9      	ldr	r1, [r7, #28]
 80041ea:	0148      	lsls	r0, r1, #5
 80041ec:	6a39      	ldr	r1, [r7, #32]
 80041ee:	4401      	add	r1, r0
 80041f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80041f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	460a      	mov	r2, r1
 8004210:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	4413      	add	r3, r2
 8004232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	440a      	add	r2, r1
 8004240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004244:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004248:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	7e7b      	ldrb	r3, [r7, #25]
 800425a:	075b      	lsls	r3, r3, #29
 800425c:	69f9      	ldr	r1, [r7, #28]
 800425e:	0148      	lsls	r0, r1, #5
 8004260:	6a39      	ldr	r1, [r7, #32]
 8004262:	4401      	add	r1, r0
 8004264:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004282:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	78db      	ldrb	r3, [r3, #3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e003      	b.n	800429e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800429c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b2:	461a      	mov	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e04e      	b.n	8004360 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	78db      	ldrb	r3, [r3, #3]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d149      	bne.n	800435e <USB_HC_StartXfer+0x276>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d045      	beq.n	800435e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	79db      	ldrb	r3, [r3, #7]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d830      	bhi.n	800433c <USB_HC_StartXfer+0x254>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <USB_HC_StartXfer+0x1f8>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	08004315 	.word	0x08004315
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004315 	.word	0x08004315
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	3303      	adds	r3, #3
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80042fa:	8afa      	ldrh	r2, [r7, #22]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	b29b      	uxth	r3, r3
 8004302:	429a      	cmp	r2, r3
 8004304:	d91c      	bls.n	8004340 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	619a      	str	r2, [r3, #24]
        }
        break;
 8004312:	e015      	b.n	8004340 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	3303      	adds	r3, #3
 800431a:	089b      	lsrs	r3, r3, #2
 800431c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800431e:	8afa      	ldrh	r2, [r7, #22]
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	b29b      	uxth	r3, r3
 800432a:	429a      	cmp	r2, r3
 800432c:	d90a      	bls.n	8004344 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	619a      	str	r2, [r3, #24]
        }
        break;
 800433a:	e003      	b.n	8004344 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800433c:	bf00      	nop
 800433e:	e002      	b.n	8004346 <USB_HC_StartXfer+0x25e>
        break;
 8004340:	bf00      	nop
 8004342:	e000      	b.n	8004346 <USB_HC_StartXfer+0x25e>
        break;
 8004344:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	68d9      	ldr	r1, [r3, #12]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	785a      	ldrb	r2, [r3, #1]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	b29b      	uxth	r3, r3
 8004354:	2000      	movs	r0, #0
 8004356:	9000      	str	r0, [sp, #0]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fb31 	bl	80039c0 <USB_WritePacket>
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3728      	adds	r7, #40	; 0x28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	1ff80000 	.word	0x1ff80000

0800436c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	b29b      	uxth	r3, r3
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800438e:	b480      	push	{r7}
 8004390:	b089      	sub	sp, #36	; 0x24
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0c9b      	lsrs	r3, r3, #18
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0fdb      	lsrs	r3, r3, #31
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d104      	bne.n	80043e8 <USB_HC_Halt+0x5a>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e0c8      	b.n	800457a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <USB_HC_Halt+0x66>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d163      	bne.n	80044bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800440e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004412:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 80ab 	bne.w	8004578 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d133      	bne.n	8004496 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	0151      	lsls	r1, r2, #5
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	440a      	add	r2, r1
 8004444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800444c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800446c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447a:	d81d      	bhi.n	80044b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800448e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004492:	d0ec      	beq.n	800446e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004494:	e070      	b.n	8004578 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80044b6:	e05f      	b.n	8004578 <USB_HC_Halt+0x1ea>
            break;
 80044b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80044ba:	e05d      	b.n	8004578 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d133      	bne.n	8004554 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	440a      	add	r2, r1
 8004502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800450a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	440a      	add	r2, r1
 8004522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800452a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004538:	d81d      	bhi.n	8004576 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800454c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004550:	d0ec      	beq.n	800452c <USB_HC_Halt+0x19e>
 8004552:	e011      	b.n	8004578 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	440a      	add	r2, r1
 800456a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800456e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e000      	b.n	8004578 <USB_HC_Halt+0x1ea>
          break;
 8004576:	bf00      	nop
    }
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3724      	adds	r7, #36	; 0x24
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800459c:	2301      	movs	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	04da      	lsls	r2, r3, #19
 80045a4:	4b15      	ldr	r3, [pc, #84]	; (80045fc <USB_DoPing+0x74>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	1ff80000 	.word	0x1ff80000

08004600 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff f911 	bl	800383c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800461a:	2110      	movs	r1, #16
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff f96b 	bl	80038f8 <USB_FlushTxFifo>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff f997 	bl	8003960 <USB_FlushRxFifo>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e01f      	b.n	8004682 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004658:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004660:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004668:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004676:	461a      	mov	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	3301      	adds	r3, #1
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d9dc      	bls.n	8004642 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e034      	b.n	80046f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c2:	461a      	mov	r2, r3
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	d80c      	bhi.n	80046f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ec:	d0ec      	beq.n	80046c8 <USB_StopHost+0xc8>
 80046ee:	e000      	b.n	80046f2 <USB_StopHost+0xf2>
        break;
 80046f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d9c7      	bls.n	800468e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004704:	461a      	mov	r2, r3
 8004706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004712:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff f880 	bl	800381a <USB_EnableGlobalInt>

  return ret;
 800471a:	7ffb      	ldrb	r3, [r7, #31]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b089      	sub	sp, #36	; 0x24
 8004728:	af04      	add	r7, sp, #16
 800472a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800472c:	2301      	movs	r3, #1
 800472e:	2202      	movs	r2, #2
 8004730:	2102      	movs	r1, #2
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fceb 	bl	800510e <USBH_FindInterface>
 8004738:	4603      	mov	r3, r0
 800473a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2bff      	cmp	r3, #255	; 0xff
 8004740:	d002      	beq.n	8004748 <USBH_CDC_InterfaceInit+0x24>
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d901      	bls.n	800474c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004748:	2302      	movs	r3, #2
 800474a:	e13d      	b.n	80049c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fcc0 	bl	80050d6 <USBH_SelectInterface>
 8004756:	4603      	mov	r3, r0
 8004758:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800475a:	7bbb      	ldrb	r3, [r7, #14]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004760:	2302      	movs	r3, #2
 8004762:	e131      	b.n	80049c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800476a:	2050      	movs	r0, #80	; 0x50
 800476c:	f002 fb80 	bl	8006e70 <malloc>
 8004770:	4603      	mov	r3, r0
 8004772:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004784:	2302      	movs	r3, #2
 8004786:	e11f      	b.n	80049c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004788:	2250      	movs	r2, #80	; 0x50
 800478a:	2100      	movs	r1, #0
 800478c:	68b8      	ldr	r0, [r7, #8]
 800478e:	f002 fb7f 	bl	8006e90 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	211a      	movs	r1, #26
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da15      	bge.n	80047d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	211a      	movs	r1, #26
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	211a      	movs	r1, #26
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80047d0:	881a      	ldrh	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 ffb2 	bl	8006746 <USBH_AllocPipe>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	7819      	ldrb	r1, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	7858      	ldrb	r0, [r3, #1]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	8952      	ldrh	r2, [r2, #10]
 8004802:	9202      	str	r2, [sp, #8]
 8004804:	2203      	movs	r2, #3
 8004806:	9201      	str	r2, [sp, #4]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	4623      	mov	r3, r4
 800480c:	4602      	mov	r2, r0
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 ff6a 	bl	80066e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f002 fa79 	bl	8006d14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004822:	2300      	movs	r3, #0
 8004824:	2200      	movs	r2, #0
 8004826:	210a      	movs	r1, #10
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fc70 	bl	800510e <USBH_FindInterface>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2bff      	cmp	r3, #255	; 0xff
 8004836:	d002      	beq.n	800483e <USBH_CDC_InterfaceInit+0x11a>
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d901      	bls.n	8004842 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800483e:	2302      	movs	r3, #2
 8004840:	e0c2      	b.n	80049c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	211a      	movs	r1, #26
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b25b      	sxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	da16      	bge.n	8004888 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	211a      	movs	r1, #26
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800486a:	781a      	ldrb	r2, [r3, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	211a      	movs	r1, #26
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	835a      	strh	r2, [r3, #26]
 8004886:	e015      	b.n	80048b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	211a      	movs	r1, #26
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	211a      	movs	r1, #26
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	211a      	movs	r1, #26
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b25b      	sxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da16      	bge.n	80048fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	211a      	movs	r1, #26
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	211a      	movs	r1, #26
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80048f2:	881a      	ldrh	r2, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	835a      	strh	r2, [r3, #26]
 80048f8:	e015      	b.n	8004926 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	211a      	movs	r1, #26
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	f203 3356 	addw	r3, r3, #854	; 0x356
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	211a      	movs	r1, #26
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004920:	881a      	ldrh	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	7b9b      	ldrb	r3, [r3, #14]
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 ff0a 	bl	8006746 <USBH_AllocPipe>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	7bdb      	ldrb	r3, [r3, #15]
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 ff00 	bl	8006746 <USBH_AllocPipe>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	7b59      	ldrb	r1, [r3, #13]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	7b98      	ldrb	r0, [r3, #14]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	8b12      	ldrh	r2, [r2, #24]
 8004966:	9202      	str	r2, [sp, #8]
 8004968:	2202      	movs	r2, #2
 800496a:	9201      	str	r2, [sp, #4]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4623      	mov	r3, r4
 8004970:	4602      	mov	r2, r0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f001 feb8 	bl	80066e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	7b19      	ldrb	r1, [r3, #12]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	7bd8      	ldrb	r0, [r3, #15]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	8b52      	ldrh	r2, [r2, #26]
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	2202      	movs	r2, #2
 8004994:	9201      	str	r2, [sp, #4]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4623      	mov	r3, r4
 800499a:	4602      	mov	r2, r0
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fea3 	bl	80066e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	7b5b      	ldrb	r3, [r3, #13]
 80049ae:	2200      	movs	r2, #0
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f002 f9ae 	bl	8006d14 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	7b1b      	ldrb	r3, [r3, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f002 f9a7 	bl	8006d14 <USBH_LL_SetToggle>

  return USBH_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}

080049d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 fe98 	bl	8006726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f001 fec3 	bl	8006788 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	7b1b      	ldrb	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	7b1b      	ldrb	r3, [r3, #12]
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 fe85 	bl	8006726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	7b1b      	ldrb	r3, [r3, #12]
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 feb0 	bl	8006788 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	7b5b      	ldrb	r3, [r3, #13]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00e      	beq.n	8004a54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	7b5b      	ldrb	r3, [r3, #13]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 fe72 	bl	8006726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	7b5b      	ldrb	r3, [r3, #13]
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 fe9d 	bl	8006788 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f002 fa09 	bl	8006e80 <free>
    phost->pActiveClass->pData = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a74:	2200      	movs	r2, #0
 8004a76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3340      	adds	r3, #64	; 0x40
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8da 	bl	8004c54 <GetLineCoding>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d877      	bhi.n	8004bd4 <USBH_CDC_Process+0x114>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <USBH_CDC_Process+0x2c>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b01 	.word	0x08004b01
 8004af0:	08004b07 	.word	0x08004b07
 8004af4:	08004b37 	.word	0x08004b37
 8004af8:	08004bab 	.word	0x08004bab
 8004afc:	08004bb9 	.word	0x08004bb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e06d      	b.n	8004be2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8c0 	bl	8004c92 <SetLineCoding>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004b24:	e058      	b.n	8004bd8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004b26:	7bbb      	ldrb	r3, [r7, #14]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d055      	beq.n	8004bd8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004b34:	e050      	b.n	8004bd8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	3340      	adds	r3, #64	; 0x40
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f889 	bl	8004c54 <GetLineCoding>
 8004b42:	4603      	mov	r3, r0
 8004b44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d126      	bne.n	8004b9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5e:	791b      	ldrb	r3, [r3, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d13b      	bne.n	8004bdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d133      	bne.n	8004bdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d12b      	bne.n	8004bdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d124      	bne.n	8004bdc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9dd 	bl	8004f52 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004b98:	e020      	b.n	8004bdc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004b9a:	7bbb      	ldrb	r3, [r7, #14]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d01d      	beq.n	8004bdc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004ba8:	e018      	b.n	8004bdc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8ec 	bl	8004d88 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f95f 	bl	8004e74 <CDC_ProcessReception>
      break;
 8004bb6:	e014      	b.n	8004be2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 f875 	bl	8005caa <USBH_ClrFeature>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004bc4:	7bbb      	ldrb	r3, [r7, #14]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004bd2:	e005      	b.n	8004be0 <USBH_CDC_Process+0x120>

    default:
      break;
 8004bd4:	bf00      	nop
 8004bd6:	e004      	b.n	8004be2 <USBH_CDC_Process+0x122>
      break;
 8004bd8:	bf00      	nop
 8004bda:	e002      	b.n	8004be2 <USBH_CDC_Process+0x122>
      break;
 8004bdc:	bf00      	nop
 8004bde:	e000      	b.n	8004be2 <USBH_CDC_Process+0x122>
      break;
 8004be0:	bf00      	nop

  }

  return status;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b0b      	cmp	r3, #11
 8004c1c:	d115      	bne.n	8004c4a <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 fd7a 	bl	8006726 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	7b1b      	ldrb	r3, [r3, #12]
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 fd74 	bl	8006726 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	7b5b      	ldrb	r3, [r3, #13]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f001 fd6e 	bl	8006726 <USBH_ClosePipe>
  }
  return USBH_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	22a1      	movs	r2, #161	; 0xa1
 8004c62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2221      	movs	r2, #33	; 0x21
 8004c68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2207      	movs	r2, #7
 8004c7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2207      	movs	r2, #7
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fade 	bl	8006244 <USBH_CtlReq>
 8004c88:	4603      	mov	r3, r0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2221      	movs	r2, #33	; 0x21
 8004ca0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 fabf 	bl	8006244 <USBH_CtlReq>
 8004cc6:	4603      	mov	r3, r0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <USBH_CDC_Transmit+0x2e>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d10f      	bne.n	8004d1e <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <USBH_CDC_Receive+0x2e>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d10f      	bne.n	8004d7a <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2203      	movs	r2, #3
 8004d72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d002      	beq.n	8004dae <CDC_ProcessTransmission+0x26>
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d023      	beq.n	8004df4 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004dac:	e05e      	b.n	8004e6c <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	8b12      	ldrh	r2, [r2, #24]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d90b      	bls.n	8004dd2 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	69d9      	ldr	r1, [r3, #28]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8b1a      	ldrh	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	7b5b      	ldrb	r3, [r3, #13]
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	9000      	str	r0, [sp, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fc49 	bl	8006662 <USBH_BulkSendData>
 8004dd0:	e00b      	b.n	8004dea <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	7b5b      	ldrb	r3, [r3, #13]
 8004de0:	2001      	movs	r0, #1
 8004de2:	9000      	str	r0, [sp, #0]
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fc3c 	bl	8006662 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004df2:	e03b      	b.n	8004e6c <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	7b5b      	ldrb	r3, [r3, #13]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 ff60 	bl	8006cc0 <USBH_LL_GetURBState>
 8004e00:	4603      	mov	r3, r0
 8004e02:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004e04:	7afb      	ldrb	r3, [r7, #11]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d128      	bne.n	8004e5c <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	8b12      	ldrh	r2, [r2, #24]
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d90e      	bls.n	8004e34 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	8b12      	ldrh	r2, [r2, #24]
 8004e1e:	1a9a      	subs	r2, r3, r2
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	8b12      	ldrh	r2, [r2, #24]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	61da      	str	r2, [r3, #28]
 8004e32:	e002      	b.n	8004e3a <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e4a:	e00e      	b.n	8004e6a <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f868 	bl	8004f2a <USBH_CDC_TransmitCallback>
      break;
 8004e5a:	e006      	b.n	8004e6a <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d103      	bne.n	8004e6a <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e6a:	bf00      	nop
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d002      	beq.n	8004e9a <CDC_ProcessReception+0x26>
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d00e      	beq.n	8004eb6 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004e98:	e043      	b.n	8004f22 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	6a19      	ldr	r1, [r3, #32]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	8b5a      	ldrh	r2, [r3, #26]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	7b1b      	ldrb	r3, [r3, #12]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fc00 	bl	80066ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004eb4:	e035      	b.n	8004f22 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	7b1b      	ldrb	r3, [r3, #12]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 feff 	bl	8006cc0 <USBH_LL_GetURBState>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d129      	bne.n	8004f20 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	7b1b      	ldrb	r3, [r3, #12]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f001 fe62 	bl	8006b9c <USBH_LL_GetLastXferSize>
 8004ed8:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d016      	beq.n	8004f12 <CDC_ProcessReception+0x9e>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	8b5b      	ldrh	r3, [r3, #26]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d910      	bls.n	8004f12 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	441a      	add	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004f10:	e006      	b.n	8004f20 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f80f 	bl	8004f3e <USBH_CDC_ReceiveCallback>
      break;
 8004f20:	bf00      	nop
  }
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e029      	b.n	8004fd2 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	79fa      	ldrb	r2, [r7, #7]
 8004f82:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f81f 	bl	8004fda <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f001 fd32 	bl	8006a34 <USBH_LL_Init>

  return USBH_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e009      	b.n	8005000 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	33e0      	adds	r3, #224	; 0xe0
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d9f2      	bls.n	8004fec <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e009      	b.n	8005020 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3301      	adds	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005026:	d3f1      	bcc.n	800500c <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10e      	bne.n	80050be <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	33de      	adds	r3, #222	; 0xde
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
 80050bc:	e004      	b.n	80050c8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80050be:	2302      	movs	r3, #2
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	e001      	b.n	80050c8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80050c4:	2302      	movs	r3, #2
 80050c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	460b      	mov	r3, r1
 80050e0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d204      	bcs.n	80050fc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80050fa:	e001      	b.n	8005100 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80050fc:	2302      	movs	r3, #2
 80050fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	461a      	mov	r2, r3
 800511c:	4603      	mov	r3, r0
 800511e:	70fb      	strb	r3, [r7, #3]
 8005120:	460b      	mov	r3, r1
 8005122:	70bb      	strb	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005136:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005138:	e025      	b.n	8005186 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	221a      	movs	r2, #26
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	3308      	adds	r3, #8
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	3302      	adds	r3, #2
 800514a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	795b      	ldrb	r3, [r3, #5]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	429a      	cmp	r2, r3
 8005154:	d002      	beq.n	800515c <USBH_FindInterface+0x4e>
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	2bff      	cmp	r3, #255	; 0xff
 800515a:	d111      	bne.n	8005180 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005160:	78ba      	ldrb	r2, [r7, #2]
 8005162:	429a      	cmp	r2, r3
 8005164:	d002      	beq.n	800516c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005166:	78bb      	ldrb	r3, [r7, #2]
 8005168:	2bff      	cmp	r3, #255	; 0xff
 800516a:	d109      	bne.n	8005180 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005170:	787a      	ldrb	r2, [r7, #1]
 8005172:	429a      	cmp	r2, r3
 8005174:	d002      	beq.n	800517c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005176:	787b      	ldrb	r3, [r7, #1]
 8005178:	2bff      	cmp	r3, #255	; 0xff
 800517a:	d101      	bne.n	8005180 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	e006      	b.n	800518e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	3301      	adds	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d9d6      	bls.n	800513a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800518c:	23ff      	movs	r3, #255	; 0xff
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fc82 	bl	8006aac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80051a8:	2101      	movs	r1, #1
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fd9b 	bl	8006ce6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af04      	add	r7, sp, #16
 80051c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80051c4:	2302      	movs	r3, #2
 80051c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d102      	bne.n	80051de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b0b      	cmp	r3, #11
 80051e6:	f200 81be 	bhi.w	8005566 <USBH_Process+0x3aa>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <USBH_Process+0x34>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005221 	.word	0x08005221
 80051f4:	08005253 	.word	0x08005253
 80051f8:	080052bb 	.word	0x080052bb
 80051fc:	08005501 	.word	0x08005501
 8005200:	08005567 	.word	0x08005567
 8005204:	0800535f 	.word	0x0800535f
 8005208:	080054a7 	.word	0x080054a7
 800520c:	08005395 	.word	0x08005395
 8005210:	080053b5 	.word	0x080053b5
 8005214:	080053d5 	.word	0x080053d5
 8005218:	08005419 	.word	0x08005419
 800521c:	080054e9 	.word	0x080054e9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 819e 	beq.w	800556a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005234:	20c8      	movs	r0, #200	; 0xc8
 8005236:	f001 fd9d 	bl	8006d74 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fc93 	bl	8006b66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005250:	e18b      	b.n	800556a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005258:	2b01      	cmp	r3, #1
 800525a:	d107      	bne.n	800526c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800526a:	e18d      	b.n	8005588 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005276:	d914      	bls.n	80052a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800527e:	3301      	adds	r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800528e:	2b03      	cmp	r3, #3
 8005290:	d903      	bls.n	800529a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	220d      	movs	r2, #13
 8005296:	701a      	strb	r2, [r3, #0]
      break;
 8005298:	e176      	b.n	8005588 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
      break;
 80052a0:	e172      	b.n	8005588 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80052a8:	f103 020a 	add.w	r2, r3, #10
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80052b2:	200a      	movs	r0, #10
 80052b4:	f001 fd5e 	bl	8006d74 <USBH_Delay>
      break;
 80052b8:	e166      	b.n	8005588 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80052ca:	2104      	movs	r1, #4
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80052d0:	2064      	movs	r0, #100	; 0x64
 80052d2:	f001 fd4f 	bl	8006d74 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 fc1e 	bl	8006b18 <USBH_LL_GetSpeed>
 80052dc:	4603      	mov	r3, r0
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2205      	movs	r2, #5
 80052ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80052ec:	2100      	movs	r1, #0
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fa29 	bl	8006746 <USBH_AllocPipe>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80052fc:	2180      	movs	r1, #128	; 0x80
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f001 fa21 	bl	8006746 <USBH_AllocPipe>
 8005304:	4603      	mov	r3, r0
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7919      	ldrb	r1, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005320:	b292      	uxth	r2, r2
 8005322:	9202      	str	r2, [sp, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	9201      	str	r2, [sp, #4]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4603      	mov	r3, r0
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 f9da 	bl	80066e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7959      	ldrb	r1, [r3, #5]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005348:	b292      	uxth	r2, r2
 800534a:	9202      	str	r2, [sp, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	4603      	mov	r3, r0
 8005354:	2200      	movs	r2, #0
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 f9c6 	bl	80066e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800535c:	e114      	b.n	8005588 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f918 	bl	8005594 <USBH_HandleEnum>
 8005364:	4603      	mov	r3, r0
 8005366:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	f040 80fe 	bne.w	800556e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005380:	2b01      	cmp	r3, #1
 8005382:	d103      	bne.n	800538c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2208      	movs	r2, #8
 8005388:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800538a:	e0f0      	b.n	800556e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2207      	movs	r2, #7
 8005390:	701a      	strb	r2, [r3, #0]
      break;
 8005392:	e0ec      	b.n	800556e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80e9 	beq.w	8005572 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80053a6:	2101      	movs	r1, #1
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2208      	movs	r2, #8
 80053b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80053b2:	e0de      	b.n	8005572 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fc2c 	bl	8005c1c <USBH_SetCfg>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 80d5 	bne.w	8005576 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2209      	movs	r2, #9
 80053d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80053d2:	e0d0      	b.n	8005576 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80053e2:	2101      	movs	r1, #1
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fc3c 	bl	8005c62 <USBH_SetFeature>
 80053ea:	4603      	mov	r3, r0
 80053ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	220a      	movs	r2, #10
 80053fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80053fc:	e0bd      	b.n	800557a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b03      	cmp	r3, #3
 8005404:	f040 80b9 	bne.w	800557a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	220a      	movs	r2, #10
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e0b4      	b.n	800557a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	220a      	movs	r2, #10
 8005414:	701a      	strb	r2, [r3, #0]
      break;
 8005416:	e0b0      	b.n	800557a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80ad 	beq.w	800557e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e016      	b.n	8005460 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	32de      	adds	r2, #222	; 0xde
 8005438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543c:	791a      	ldrb	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005444:	429a      	cmp	r2, r3
 8005446:	d108      	bne.n	800545a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005448:	7bfa      	ldrb	r2, [r7, #15]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	32de      	adds	r2, #222	; 0xde
 800544e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005458:	e005      	b.n	8005466 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	3301      	adds	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0e5      	beq.n	8005432 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d016      	beq.n	800549e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2206      	movs	r2, #6
 8005486:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800548e:	2103      	movs	r1, #3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005494:	e073      	b.n	800557e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	220d      	movs	r2, #13
 800549a:	701a      	strb	r2, [r3, #0]
      break;
 800549c:	e06f      	b.n	800557e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	220d      	movs	r2, #13
 80054a2:	701a      	strb	r2, [r3, #0]
      break;
 80054a4:	e06b      	b.n	800557e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d017      	beq.n	80054e0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
 80054bc:	4603      	mov	r3, r0
 80054be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80054c0:	7bbb      	ldrb	r3, [r7, #14]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	220b      	movs	r2, #11
 80054cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80054ce:	e058      	b.n	8005582 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d154      	bne.n	8005582 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	220d      	movs	r2, #13
 80054dc:	701a      	strb	r2, [r3, #0]
      break;
 80054de:	e050      	b.n	8005582 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	220d      	movs	r2, #13
 80054e4:	701a      	strb	r2, [r3, #0]
      break;
 80054e6:	e04c      	b.n	8005582 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d049      	beq.n	8005586 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
      }
      break;
 80054fe:	e042      	b.n	8005586 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fd66 	bl	8004fda <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800553c:	2105      	movs	r1, #5
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d107      	bne.n	800555e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fe1f 	bl	800519a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800555c:	e014      	b.n	8005588 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 faa4 	bl	8006aac <USBH_LL_Start>
      break;
 8005564:	e010      	b.n	8005588 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005566:	bf00      	nop
 8005568:	e00e      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 800556a:	bf00      	nop
 800556c:	e00c      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 800556e:	bf00      	nop
 8005570:	e00a      	b.n	8005588 <USBH_Process+0x3cc>
    break;
 8005572:	bf00      	nop
 8005574:	e008      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 8005576:	bf00      	nop
 8005578:	e006      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 800557a:	bf00      	nop
 800557c:	e004      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <USBH_Process+0x3cc>
      break;
 8005586:	bf00      	nop
  }
  return USBH_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop

08005594 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af04      	add	r7, sp, #16
 800559a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b07      	cmp	r3, #7
 80055aa:	f200 81c1 	bhi.w	8005930 <USBH_HandleEnum+0x39c>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <USBH_HandleEnum+0x20>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055d5 	.word	0x080055d5
 80055b8:	08005693 	.word	0x08005693
 80055bc:	080056fd 	.word	0x080056fd
 80055c0:	0800578b 	.word	0x0800578b
 80055c4:	080057f5 	.word	0x080057f5
 80055c8:	08005865 	.word	0x08005865
 80055cc:	080058ab 	.word	0x080058ab
 80055d0:	080058f1 	.word	0x080058f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80055d4:	2108      	movs	r1, #8
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa50 	bl	8005a7c <USBH_Get_DevDesc>
 80055dc:	4603      	mov	r3, r0
 80055de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d130      	bne.n	8005648 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7919      	ldrb	r1, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800560a:	b292      	uxth	r2, r2
 800560c:	9202      	str	r2, [sp, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	9201      	str	r2, [sp, #4]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	4603      	mov	r3, r0
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 f865 	bl	80066e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7959      	ldrb	r1, [r3, #5]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005632:	b292      	uxth	r2, r2
 8005634:	9202      	str	r2, [sp, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	9201      	str	r2, [sp, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	4603      	mov	r3, r0
 800563e:	2200      	movs	r2, #0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f851 	bl	80066e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005646:	e175      	b.n	8005934 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005648:	7bbb      	ldrb	r3, [r7, #14]
 800564a:	2b03      	cmp	r3, #3
 800564c:	f040 8172 	bne.w	8005934 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005656:	3301      	adds	r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005666:	2b03      	cmp	r3, #3
 8005668:	d903      	bls.n	8005672 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	220d      	movs	r2, #13
 800566e:	701a      	strb	r2, [r3, #0]
      break;
 8005670:	e160      	b.n	8005934 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	795b      	ldrb	r3, [r3, #5]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 f885 	bl	8006788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	791b      	ldrb	r3, [r3, #4]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 f87f 	bl	8006788 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
      break;
 8005690:	e150      	b.n	8005934 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005692:	2112      	movs	r1, #18
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f9f1 	bl	8005a7c <USBH_Get_DevDesc>
 800569a:	4603      	mov	r3, r0
 800569c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80056aa:	e145      	b.n	8005938 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f040 8142 	bne.w	8005938 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80056ba:	3301      	adds	r3, #1
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d903      	bls.n	80056d6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	220d      	movs	r2, #13
 80056d2:	701a      	strb	r2, [r3, #0]
      break;
 80056d4:	e130      	b.n	8005938 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	795b      	ldrb	r3, [r3, #5]
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 f853 	bl	8006788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	791b      	ldrb	r3, [r3, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 f84d 	bl	8006788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
      break;
 80056fa:	e11d      	b.n	8005938 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80056fc:	2101      	movs	r1, #1
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa68 	bl	8005bd4 <USBH_SetAddress>
 8005704:	4603      	mov	r3, r0
 8005706:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005708:	7bbb      	ldrb	r3, [r7, #14]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d132      	bne.n	8005774 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800570e:	2002      	movs	r0, #2
 8005710:	f001 fb30 	bl	8006d74 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2203      	movs	r2, #3
 8005720:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7919      	ldrb	r1, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005736:	b292      	uxth	r2, r2
 8005738:	9202      	str	r2, [sp, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	4603      	mov	r3, r0
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 ffcf 	bl	80066e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7959      	ldrb	r1, [r3, #5]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800575e:	b292      	uxth	r2, r2
 8005760:	9202      	str	r2, [sp, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	9201      	str	r2, [sp, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4603      	mov	r3, r0
 800576a:	2200      	movs	r2, #0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 ffbb 	bl	80066e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005772:	e0e3      	b.n	800593c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	2b03      	cmp	r3, #3
 8005778:	f040 80e0 	bne.w	800593c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	220d      	movs	r2, #13
 8005780:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	705a      	strb	r2, [r3, #1]
      break;
 8005788:	e0d8      	b.n	800593c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800578a:	2109      	movs	r1, #9
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f99d 	bl	8005acc <USBH_Get_CfgDesc>
 8005792:	4603      	mov	r3, r0
 8005794:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2204      	movs	r2, #4
 80057a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80057a2:	e0cd      	b.n	8005940 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	f040 80ca 	bne.w	8005940 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80057b2:	3301      	adds	r3, #1
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d903      	bls.n	80057ce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	220d      	movs	r2, #13
 80057ca:	701a      	strb	r2, [r3, #0]
      break;
 80057cc:	e0b8      	b.n	8005940 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	795b      	ldrb	r3, [r3, #5]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 ffd7 	bl	8006788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 ffd1 	bl	8006788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
      break;
 80057f2:	e0a5      	b.n	8005940 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f965 	bl	8005acc <USBH_Get_CfgDesc>
 8005802:	4603      	mov	r3, r0
 8005804:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2205      	movs	r2, #5
 8005810:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005812:	e097      	b.n	8005944 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	2b03      	cmp	r3, #3
 8005818:	f040 8094 	bne.w	8005944 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005822:	3301      	adds	r3, #1
 8005824:	b2da      	uxtb	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005832:	2b03      	cmp	r3, #3
 8005834:	d903      	bls.n	800583e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	220d      	movs	r2, #13
 800583a:	701a      	strb	r2, [r3, #0]
      break;
 800583c:	e082      	b.n	8005944 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	795b      	ldrb	r3, [r3, #5]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 ff9f 	bl	8006788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	791b      	ldrb	r3, [r3, #4]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 ff99 	bl	8006788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
      break;
 8005862:	e06f      	b.n	8005944 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800587a:	23ff      	movs	r3, #255	; 0xff
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f949 	bl	8005b14 <USBH_Get_StringDesc>
 8005882:	4603      	mov	r3, r0
 8005884:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d103      	bne.n	8005894 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2206      	movs	r2, #6
 8005890:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005892:	e059      	b.n	8005948 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b03      	cmp	r3, #3
 8005898:	d156      	bne.n	8005948 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2206      	movs	r2, #6
 800589e:	705a      	strb	r2, [r3, #1]
      break;
 80058a0:	e052      	b.n	8005948 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2206      	movs	r2, #6
 80058a6:	705a      	strb	r2, [r3, #1]
      break;
 80058a8:	e04e      	b.n	8005948 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80058c0:	23ff      	movs	r3, #255	; 0xff
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f926 	bl	8005b14 <USBH_Get_StringDesc>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2207      	movs	r2, #7
 80058d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80058d8:	e038      	b.n	800594c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d135      	bne.n	800594c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2207      	movs	r2, #7
 80058e4:	705a      	strb	r2, [r3, #1]
      break;
 80058e6:	e031      	b.n	800594c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2207      	movs	r2, #7
 80058ec:	705a      	strb	r2, [r3, #1]
      break;
 80058ee:	e02d      	b.n	800594c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d017      	beq.n	800592a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005906:	23ff      	movs	r3, #255	; 0xff
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f903 	bl	8005b14 <USBH_Get_StringDesc>
 800590e:	4603      	mov	r3, r0
 8005910:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800591c:	e018      	b.n	8005950 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d115      	bne.n	8005950 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e012      	b.n	8005950 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
      break;
 800592e:	e00f      	b.n	8005950 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005930:	bf00      	nop
 8005932:	e00e      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 8005934:	bf00      	nop
 8005936:	e00c      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 8005938:	bf00      	nop
 800593a:	e00a      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 800593c:	bf00      	nop
 800593e:	e008      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 8005940:	bf00      	nop
 8005942:	e006      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 8005944:	bf00      	nop
 8005946:	e004      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 8005948:	bf00      	nop
 800594a:	e002      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <USBH_HandleEnum+0x3be>
      break;
 8005950:	bf00      	nop
  }
  return Status;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f804 	bl	800599e <USBH_HandleSof>
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b0b      	cmp	r3, #11
 80059ae:	d10a      	bne.n	80059c6 <USBH_HandleSof+0x28>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
  }
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80059de:	bf00      	nop
}
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80059fa:	bf00      	nop
}
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 f844 	bl	8006ae2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	791b      	ldrb	r3, [r3, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fe91 	bl	8006788 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	795b      	ldrb	r3, [r3, #5]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fe8b 	bl	8006788 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f864 	bl	8005b6a <USBH_GetDescriptor>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	b292      	uxth	r2, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	f000 f918 	bl	8005cf2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	331c      	adds	r3, #28
 8005adc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005ade:	887b      	ldrh	r3, [r7, #2]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae8:	2100      	movs	r1, #0
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f83d 	bl	8005b6a <USBH_GetDescriptor>
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8005afa:	887b      	ldrh	r3, [r7, #2]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f987 	bl	8005e14 <USBH_ParseCfgDesc>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	460b      	mov	r3, r1
 8005b22:	72fb      	strb	r3, [r7, #11]
 8005b24:	4613      	mov	r3, r2
 8005b26:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b30:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005b38:	893b      	ldrh	r3, [r7, #8]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	2100      	movs	r1, #0
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f812 	bl	8005b6a <USBH_GetDescriptor>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b56:	893a      	ldrh	r2, [r7, #8]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fb24 	bl	80061a8 <USBH_ParseStringDesc>
  }

  return status;
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	607b      	str	r3, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	72fb      	strb	r3, [r7, #11]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	789b      	ldrb	r3, [r3, #2]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d11c      	bne.n	8005bbe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2206      	movs	r2, #6
 8005b94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	893a      	ldrh	r2, [r7, #8]
 8005b9a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba6:	d104      	bne.n	8005bb2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f240 4209 	movw	r2, #1033	; 0x409
 8005bae:	829a      	strh	r2, [r3, #20]
 8005bb0:	e002      	b.n	8005bb8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8b3a      	ldrh	r2, [r7, #24]
 8005bbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005bbe:	8b3b      	ldrh	r3, [r7, #24]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fb3d 	bl	8006244 <USBH_CtlReq>
 8005bca:	4603      	mov	r3, r0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	789b      	ldrb	r3, [r3, #2]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10f      	bne.n	8005c08 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2205      	movs	r2, #5
 8005bf2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fb19 	bl	8006244 <USBH_CtlReq>
 8005c12:	4603      	mov	r3, r0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	789b      	ldrb	r3, [r3, #2]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d10e      	bne.n	8005c4e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2209      	movs	r2, #9
 8005c3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	887a      	ldrh	r2, [r7, #2]
 8005c40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 faf6 	bl	8006244 <USBH_CtlReq>
 8005c58:	4603      	mov	r3, r0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	789b      	ldrb	r3, [r3, #2]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10f      	bne.n	8005c96 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fad2 	bl	8006244 <USBH_CtlReq>
 8005ca0:	4603      	mov	r3, r0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	789b      	ldrb	r3, [r3, #2]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d10f      	bne.n	8005cde <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 faae 	bl	8006244 <USBH_CtlReq>
 8005ce8:	4603      	mov	r3, r0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	781a      	ldrb	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	785a      	ldrb	r2, [r3, #1]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	3302      	adds	r3, #2
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3303      	adds	r3, #3
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	791a      	ldrb	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	795a      	ldrb	r2, [r3, #5]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	799a      	ldrb	r2, [r3, #6]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	79da      	ldrb	r2, [r3, #7]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	79db      	ldrb	r3, [r3, #7]
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	dc11      	bgt.n	8005d78 <USBH_ParseDevDesc+0x86>
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	db16      	blt.n	8005d86 <USBH_ParseDevDesc+0x94>
 8005d58:	3b08      	subs	r3, #8
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8005d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <USBH_ParseDevDesc+0x8a>
 8005d76:	e006      	b.n	8005d86 <USBH_ParseDevDesc+0x94>
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d104      	bne.n	8005d86 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	79da      	ldrb	r2, [r3, #7]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	71da      	strb	r2, [r3, #7]
      break;
 8005d84:	e003      	b.n	8005d8e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	71da      	strb	r2, [r3, #7]
      break;
 8005d8c:	bf00      	nop
  }

  if (length > 8U)
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d939      	bls.n	8005e08 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3308      	adds	r3, #8
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	3309      	adds	r3, #9
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	330a      	adds	r3, #10
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	330b      	adds	r3, #11
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	330d      	adds	r3, #13
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4313      	orrs	r3, r2
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	7b9a      	ldrb	r2, [r3, #14]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	7bda      	ldrb	r2, [r3, #15]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	7c1a      	ldrb	r2, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	7c5a      	ldrb	r2, [r3, #17]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	745a      	strb	r2, [r3, #17]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	; 0x30
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e28:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781a      	ldrb	r2, [r3, #0]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	785a      	ldrb	r2, [r3, #1]
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	3302      	adds	r3, #2
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	3303      	adds	r3, #3
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e70:	bf28      	it	cs
 8005e72:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	791a      	ldrb	r2, [r3, #4]
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	795a      	ldrb	r2, [r3, #5]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	799a      	ldrb	r2, [r3, #6]
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	79da      	ldrb	r2, [r3, #7]
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	7a1a      	ldrb	r2, [r3, #8]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	d002      	beq.n	8005eb2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2209      	movs	r2, #9
 8005eb0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	2b09      	cmp	r3, #9
 8005eb6:	f240 809d 	bls.w	8005ff4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8005eba:	2309      	movs	r3, #9
 8005ebc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005ec2:	e081      	b.n	8005fc8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005ec4:	f107 0316 	add.w	r3, r7, #22
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ecc:	f000 f99f 	bl	800620e <USBH_GetNextDesc>
 8005ed0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d176      	bne.n	8005fc8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d002      	beq.n	8005ee8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	2209      	movs	r2, #9
 8005ee6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eec:	221a      	movs	r2, #26
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3302      	adds	r3, #2
 8005efa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efe:	69f8      	ldr	r0, [r7, #28]
 8005f00:	f000 f87e 	bl	8006000 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005f0e:	e043      	b.n	8005f98 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005f10:	f107 0316 	add.w	r3, r7, #22
 8005f14:	4619      	mov	r1, r3
 8005f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f18:	f000 f979 	bl	800620e <USBH_GetNextDesc>
 8005f1c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d138      	bne.n	8005f98 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	795b      	ldrb	r3, [r3, #5]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10f      	bne.n	8005f4e <USBH_ParseCfgDesc+0x13a>
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	799b      	ldrb	r3, [r3, #6]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d10b      	bne.n	8005f4e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	79db      	ldrb	r3, [r3, #7]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <USBH_ParseCfgDesc+0x14a>
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b09      	cmp	r3, #9
 8005f44:	d00b      	beq.n	8005f5e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	2209      	movs	r2, #9
 8005f4a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005f4c:	e007      	b.n	8005f5e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b07      	cmp	r3, #7
 8005f54:	d004      	beq.n	8005f60 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2207      	movs	r2, #7
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e000      	b.n	8005f60 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005f5e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005f68:	3201      	adds	r2, #1
 8005f6a:	00d2      	lsls	r2, r2, #3
 8005f6c:	211a      	movs	r1, #26
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	3308      	adds	r3, #8
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8005f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f80:	69b9      	ldr	r1, [r7, #24]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f86b 	bl	800605e <USBH_ParseEPDesc>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8005f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f92:	3301      	adds	r3, #1
 8005f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	791b      	ldrb	r3, [r3, #4]
 8005f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d204      	bcs.n	8005fae <USBH_ParseCfgDesc+0x19a>
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	885a      	ldrh	r2, [r3, #2]
 8005fa8:	8afb      	ldrh	r3, [r7, #22]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d8b0      	bhi.n	8005f10 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d201      	bcs.n	8005fbe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e01c      	b.n	8005ff8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8005fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d805      	bhi.n	8005fdc <USBH_ParseCfgDesc+0x1c8>
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	885a      	ldrh	r2, [r3, #2]
 8005fd4:	8afb      	ldrh	r3, [r7, #22]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	f63f af74 	bhi.w	8005ec4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	791b      	ldrb	r3, [r3, #4]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	bf28      	it	cs
 8005fe4:	2302      	movcs	r3, #2
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d201      	bcs.n	8005ff4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e001      	b.n	8005ff8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8005ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3730      	adds	r7, #48	; 0x30
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785a      	ldrb	r2, [r3, #1]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	789a      	ldrb	r2, [r3, #2]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	78da      	ldrb	r2, [r3, #3]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	791a      	ldrb	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	795a      	ldrb	r2, [r3, #5]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	799a      	ldrb	r2, [r3, #6]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	79da      	ldrb	r2, [r3, #7]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	7a1a      	ldrb	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	721a      	strb	r2, [r3, #8]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	781a      	ldrb	r2, [r3, #0]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	785a      	ldrb	r2, [r3, #1]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	789a      	ldrb	r2, [r3, #2]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	78da      	ldrb	r2, [r3, #3]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3305      	adds	r3, #5
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	799a      	ldrb	r2, [r3, #6]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	889b      	ldrh	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80060ba:	2303      	movs	r3, #3
 80060bc:	75fb      	strb	r3, [r7, #23]
 80060be:	e033      	b.n	8006128 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	889b      	ldrh	r3, [r3, #4]
 80060c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	889b      	ldrh	r3, [r3, #4]
 80060d6:	b21a      	sxth	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b299      	uxth	r1, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3305      	adds	r3, #5
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	430b      	orrs	r3, r1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d110      	bne.n	800611a <USBH_ParseEPDesc+0xbc>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b299      	uxth	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3305      	adds	r3, #5
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	b29b      	uxth	r3, r3
 800610c:	430b      	orrs	r3, r1
 800610e:	b29b      	uxth	r3, r3
 8006110:	b21b      	sxth	r3, r3
 8006112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006116:	b21b      	sxth	r3, r3
 8006118:	e001      	b.n	800611e <USBH_ParseEPDesc+0xc0>
 800611a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800611e:	4313      	orrs	r3, r2
 8006120:	b21b      	sxth	r3, r3
 8006122:	b29a      	uxth	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800612e:	2b00      	cmp	r3, #0
 8006130:	d116      	bne.n	8006160 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d005      	beq.n	800614a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006146:	2b03      	cmp	r3, #3
 8006148:	d127      	bne.n	800619a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	799b      	ldrb	r3, [r3, #6]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <USBH_ParseEPDesc+0xfc>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	799b      	ldrb	r3, [r3, #6]
 8006156:	2b10      	cmp	r3, #16
 8006158:	d91f      	bls.n	800619a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800615a:	2303      	movs	r3, #3
 800615c:	75fb      	strb	r3, [r7, #23]
 800615e:	e01c      	b.n	800619a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10a      	bne.n	8006182 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	799b      	ldrb	r3, [r3, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <USBH_ParseEPDesc+0x11e>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	799b      	ldrb	r3, [r3, #6]
 8006178:	2b10      	cmp	r3, #16
 800617a:	d90e      	bls.n	800619a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800617c:	2303      	movs	r3, #3
 800617e:	75fb      	strb	r3, [r7, #23]
 8006180:	e00b      	b.n	800619a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d105      	bne.n	800619a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	799b      	ldrb	r3, [r3, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006196:	2303      	movs	r3, #3
 8006198:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
}
 800619c:	4618      	mov	r0, r3
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d120      	bne.n	8006202 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	1e9a      	subs	r2, r3, #2
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	bf28      	it	cs
 80061cc:	4613      	movcs	r3, r2
 80061ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3302      	adds	r3, #2
 80061d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80061d6:	2300      	movs	r3, #0
 80061d8:	82fb      	strh	r3, [r7, #22]
 80061da:	e00b      	b.n	80061f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80061dc:	8afb      	ldrh	r3, [r7, #22]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80061ee:	8afb      	ldrh	r3, [r7, #22]
 80061f0:	3302      	adds	r3, #2
 80061f2:	82fb      	strh	r3, [r7, #22]
 80061f4:	8afa      	ldrh	r2, [r7, #22]
 80061f6:	8abb      	ldrh	r3, [r7, #20]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d3ef      	bcc.n	80061dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
  }
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	4413      	add	r3, r2
 8006224:	b29a      	uxth	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006236:	68fb      	ldr	r3, [r7, #12]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	789b      	ldrb	r3, [r3, #2]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d002      	beq.n	8006264 <USBH_CtlReq+0x20>
 800625e:	2b02      	cmp	r3, #2
 8006260:	d00f      	beq.n	8006282 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006262:	e027      	b.n	80062b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2202      	movs	r2, #2
 800627a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
      break;
 8006280:	e018      	b.n	80062b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f81c 	bl	80062c0 <USBH_HandleControl>
 8006288:	4603      	mov	r3, r0
 800628a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <USBH_CtlReq+0x54>
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d106      	bne.n	80062a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	761a      	strb	r2, [r3, #24]
      break;
 80062a4:	e005      	b.n	80062b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d102      	bne.n	80062b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	709a      	strb	r2, [r3, #2]
      break;
 80062b2:	bf00      	nop
  }
  return status;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	7e1b      	ldrb	r3, [r3, #24]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	2b0a      	cmp	r3, #10
 80062d8:	f200 8156 	bhi.w	8006588 <USBH_HandleControl+0x2c8>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <USBH_HandleControl+0x24>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	08006311 	.word	0x08006311
 80062e8:	0800632b 	.word	0x0800632b
 80062ec:	08006395 	.word	0x08006395
 80062f0:	080063bb 	.word	0x080063bb
 80062f4:	080063f3 	.word	0x080063f3
 80062f8:	0800641d 	.word	0x0800641d
 80062fc:	0800646f 	.word	0x0800646f
 8006300:	08006491 	.word	0x08006491
 8006304:	080064cd 	.word	0x080064cd
 8006308:	080064f3 	.word	0x080064f3
 800630c:	08006531 	.word	0x08006531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f103 0110 	add.w	r1, r3, #16
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	795b      	ldrb	r3, [r3, #5]
 800631a:	461a      	mov	r2, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f943 	bl	80065a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	761a      	strb	r2, [r3, #24]
      break;
 8006328:	e139      	b.n	800659e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	795b      	ldrb	r3, [r3, #5]
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fcc5 	bl	8006cc0 <USBH_LL_GetURBState>
 8006336:	4603      	mov	r3, r0
 8006338:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d11e      	bne.n	800637e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7c1b      	ldrb	r3, [r3, #16]
 8006344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006348:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8adb      	ldrh	r3, [r3, #22]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006352:	7b7b      	ldrb	r3, [r7, #13]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d103      	bne.n	8006360 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2203      	movs	r2, #3
 800635c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800635e:	e115      	b.n	800658c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2205      	movs	r2, #5
 8006364:	761a      	strb	r2, [r3, #24]
      break;
 8006366:	e111      	b.n	800658c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006368:	7b7b      	ldrb	r3, [r7, #13]
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d103      	bne.n	8006376 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2209      	movs	r2, #9
 8006372:	761a      	strb	r2, [r3, #24]
      break;
 8006374:	e10a      	b.n	800658c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2207      	movs	r2, #7
 800637a:	761a      	strb	r2, [r3, #24]
      break;
 800637c:	e106      	b.n	800658c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d003      	beq.n	800638c <USBH_HandleControl+0xcc>
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b02      	cmp	r3, #2
 8006388:	f040 8100 	bne.w	800658c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220b      	movs	r2, #11
 8006390:	761a      	strb	r2, [r3, #24]
      break;
 8006392:	e0fb      	b.n	800658c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800639a:	b29a      	uxth	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6899      	ldr	r1, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	899a      	ldrh	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	791b      	ldrb	r3, [r3, #4]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f93a 	bl	8006626 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2204      	movs	r2, #4
 80063b6:	761a      	strb	r2, [r3, #24]
      break;
 80063b8:	e0f1      	b.n	800659e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc7d 	bl	8006cc0 <USBH_LL_GetURBState>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d102      	bne.n	80063d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2209      	movs	r2, #9
 80063d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b05      	cmp	r3, #5
 80063da:	d102      	bne.n	80063e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80063dc:	2303      	movs	r3, #3
 80063de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80063e0:	e0d6      	b.n	8006590 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	f040 80d3 	bne.w	8006590 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	220b      	movs	r2, #11
 80063ee:	761a      	strb	r2, [r3, #24]
      break;
 80063f0:	e0ce      	b.n	8006590 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6899      	ldr	r1, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	899a      	ldrh	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	2001      	movs	r0, #1
 8006400:	9000      	str	r0, [sp, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8ea 	bl	80065dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2206      	movs	r2, #6
 8006418:	761a      	strb	r2, [r3, #24]
      break;
 800641a:	e0c0      	b.n	800659e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	795b      	ldrb	r3, [r3, #5]
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc4c 	bl	8006cc0 <USBH_LL_GetURBState>
 8006428:	4603      	mov	r3, r0
 800642a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d103      	bne.n	800643a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2207      	movs	r2, #7
 8006436:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006438:	e0ac      	b.n	8006594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	2b05      	cmp	r3, #5
 800643e:	d105      	bne.n	800644c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	220c      	movs	r2, #12
 8006444:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006446:	2303      	movs	r3, #3
 8006448:	73fb      	strb	r3, [r7, #15]
      break;
 800644a:	e0a3      	b.n	8006594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d103      	bne.n	800645a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2205      	movs	r2, #5
 8006456:	761a      	strb	r2, [r3, #24]
      break;
 8006458:	e09c      	b.n	8006594 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b04      	cmp	r3, #4
 800645e:	f040 8099 	bne.w	8006594 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	220b      	movs	r2, #11
 8006466:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006468:	2302      	movs	r3, #2
 800646a:	73fb      	strb	r3, [r7, #15]
      break;
 800646c:	e092      	b.n	8006594 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	791b      	ldrb	r3, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f8d5 	bl	8006626 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006482:	b29a      	uxth	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2208      	movs	r2, #8
 800648c:	761a      	strb	r2, [r3, #24]

      break;
 800648e:	e086      	b.n	800659e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc12 	bl	8006cc0 <USBH_LL_GetURBState>
 800649c:	4603      	mov	r3, r0
 800649e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	220d      	movs	r2, #13
 80064aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80064b0:	e072      	b.n	8006598 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d103      	bne.n	80064c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	220b      	movs	r2, #11
 80064bc:	761a      	strb	r2, [r3, #24]
      break;
 80064be:	e06b      	b.n	8006598 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d168      	bne.n	8006598 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80064c6:	2303      	movs	r3, #3
 80064c8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ca:	e065      	b.n	8006598 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	795b      	ldrb	r3, [r3, #5]
 80064d0:	2201      	movs	r2, #1
 80064d2:	9200      	str	r2, [sp, #0]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f87f 	bl	80065dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	220a      	movs	r2, #10
 80064ee:	761a      	strb	r2, [r3, #24]
      break;
 80064f0:	e055      	b.n	800659e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fbe1 	bl	8006cc0 <USBH_LL_GetURBState>
 80064fe:	4603      	mov	r3, r0
 8006500:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d105      	bne.n	8006514 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	220d      	movs	r2, #13
 8006510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006512:	e043      	b.n	800659c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d103      	bne.n	8006522 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2209      	movs	r2, #9
 800651e:	761a      	strb	r2, [r3, #24]
      break;
 8006520:	e03c      	b.n	800659c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b04      	cmp	r3, #4
 8006526:	d139      	bne.n	800659c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	220b      	movs	r2, #11
 800652c:	761a      	strb	r2, [r3, #24]
      break;
 800652e:	e035      	b.n	800659c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7e5b      	ldrb	r3, [r3, #25]
 8006534:	3301      	adds	r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	765a      	strb	r2, [r3, #25]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7e5b      	ldrb	r3, [r3, #25]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d806      	bhi.n	8006552 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006550:	e025      	b.n	800659e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006558:	2106      	movs	r1, #6
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	795b      	ldrb	r3, [r3, #5]
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f90c 	bl	8006788 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	791b      	ldrb	r3, [r3, #4]
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f906 	bl	8006788 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006582:	2302      	movs	r3, #2
 8006584:	73fb      	strb	r3, [r7, #15]
      break;
 8006586:	e00a      	b.n	800659e <USBH_HandleControl+0x2de>

    default:
      break;
 8006588:	bf00      	nop
 800658a:	e008      	b.n	800659e <USBH_HandleControl+0x2de>
      break;
 800658c:	bf00      	nop
 800658e:	e006      	b.n	800659e <USBH_HandleControl+0x2de>
      break;
 8006590:	bf00      	nop
 8006592:	e004      	b.n	800659e <USBH_HandleControl+0x2de>
      break;
 8006594:	bf00      	nop
 8006596:	e002      	b.n	800659e <USBH_HandleControl+0x2de>
      break;
 8006598:	bf00      	nop
 800659a:	e000      	b.n	800659e <USBH_HandleControl+0x2de>
      break;
 800659c:	bf00      	nop
  }

  return status;
 800659e:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af04      	add	r7, sp, #16
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80065b6:	79f9      	ldrb	r1, [r7, #7]
 80065b8:	2300      	movs	r3, #0
 80065ba:	9303      	str	r3, [sp, #12]
 80065bc:	2308      	movs	r3, #8
 80065be:	9302      	str	r3, [sp, #8]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	2300      	movs	r3, #0
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	2300      	movs	r3, #0
 80065ca:	2200      	movs	r2, #0
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fb46 	bl	8006c5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af04      	add	r7, sp, #16
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4611      	mov	r1, r2
 80065e8:	461a      	mov	r2, r3
 80065ea:	460b      	mov	r3, r1
 80065ec:	80fb      	strh	r3, [r7, #6]
 80065ee:	4613      	mov	r3, r2
 80065f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006600:	7979      	ldrb	r1, [r7, #5]
 8006602:	7e3b      	ldrb	r3, [r7, #24]
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	2301      	movs	r3, #1
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	2200      	movs	r2, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fb21 	bl	8006c5e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b088      	sub	sp, #32
 800662a:	af04      	add	r7, sp, #16
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	4611      	mov	r1, r2
 8006632:	461a      	mov	r2, r3
 8006634:	460b      	mov	r3, r1
 8006636:	80fb      	strh	r3, [r7, #6]
 8006638:	4613      	mov	r3, r2
 800663a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800663c:	7979      	ldrb	r1, [r7, #5]
 800663e:	2300      	movs	r3, #0
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	2301      	movs	r3, #1
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	2201      	movs	r2, #1
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fb03 	bl	8006c5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006658:	2300      	movs	r3, #0

}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b088      	sub	sp, #32
 8006666:	af04      	add	r7, sp, #16
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	4611      	mov	r1, r2
 800666e:	461a      	mov	r2, r3
 8006670:	460b      	mov	r3, r1
 8006672:	80fb      	strh	r3, [r7, #6]
 8006674:	4613      	mov	r3, r2
 8006676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006686:	7979      	ldrb	r1, [r7, #5]
 8006688:	7e3b      	ldrb	r3, [r7, #24]
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	2301      	movs	r3, #1
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2302      	movs	r3, #2
 800669a:	2200      	movs	r2, #0
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fade 	bl	8006c5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af04      	add	r7, sp, #16
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4611      	mov	r1, r2
 80066b8:	461a      	mov	r2, r3
 80066ba:	460b      	mov	r3, r1
 80066bc:	80fb      	strh	r3, [r7, #6]
 80066be:	4613      	mov	r3, r2
 80066c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80066c2:	7979      	ldrb	r1, [r7, #5]
 80066c4:	2300      	movs	r3, #0
 80066c6:	9303      	str	r3, [sp, #12]
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	2301      	movs	r3, #1
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2302      	movs	r3, #2
 80066d6:	2201      	movs	r2, #1
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fac0 	bl	8006c5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	70fb      	strb	r3, [r7, #3]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70bb      	strb	r3, [r7, #2]
 80066fe:	4613      	mov	r3, r2
 8006700:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006702:	7878      	ldrb	r0, [r7, #1]
 8006704:	78ba      	ldrb	r2, [r7, #2]
 8006706:	78f9      	ldrb	r1, [r7, #3]
 8006708:	8b3b      	ldrh	r3, [r7, #24]
 800670a:	9302      	str	r3, [sp, #8]
 800670c:	7d3b      	ldrb	r3, [r7, #20]
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	7c3b      	ldrb	r3, [r7, #16]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4603      	mov	r3, r0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa53 	bl	8006bc2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa72 	bl	8006c20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f836 	bl	80067c4 <USBH_GetFreePipe>
 8006758:	4603      	mov	r3, r0
 800675a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800675c:	89fb      	ldrh	r3, [r7, #14]
 800675e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006762:	4293      	cmp	r3, r2
 8006764:	d00a      	beq.n	800677c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006766:	78fa      	ldrb	r2, [r7, #3]
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	33e0      	adds	r3, #224	; 0xe0
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800677c:	89fb      	ldrh	r3, [r7, #14]
 800677e:	b2db      	uxtb	r3, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d80d      	bhi.n	80067b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	33e0      	adds	r3, #224	; 0xe0
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	33e0      	adds	r3, #224	; 0xe0
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
 80067d4:	e00f      	b.n	80067f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	33e0      	adds	r3, #224	; 0xe0
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	e007      	b.n	8006800 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3301      	adds	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d9ec      	bls.n	80067d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80067fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006810:	2201      	movs	r2, #1
 8006812:	490e      	ldr	r1, [pc, #56]	; (800684c <MX_USB_HOST_Init+0x40>)
 8006814:	480e      	ldr	r0, [pc, #56]	; (8006850 <MX_USB_HOST_Init+0x44>)
 8006816:	f7fe fba6 	bl	8004f66 <USBH_Init>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006820:	f7f9 ffd2 	bl	80007c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006824:	490b      	ldr	r1, [pc, #44]	; (8006854 <MX_USB_HOST_Init+0x48>)
 8006826:	480a      	ldr	r0, [pc, #40]	; (8006850 <MX_USB_HOST_Init+0x44>)
 8006828:	f7fe fc2b 	bl	8005082 <USBH_RegisterClass>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006832:	f7f9 ffc9 	bl	80007c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006836:	4806      	ldr	r0, [pc, #24]	; (8006850 <MX_USB_HOST_Init+0x44>)
 8006838:	f7fe fcaf 	bl	800519a <USBH_Start>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006842:	f7f9 ffc1 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006846:	bf00      	nop
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	0800686d 	.word	0x0800686d
 8006850:	20000180 	.word	0x20000180
 8006854:	2000000c 	.word	0x2000000c

08006858 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800685c:	4802      	ldr	r0, [pc, #8]	; (8006868 <MX_USB_HOST_Process+0x10>)
 800685e:	f7fe fcad 	bl	80051bc <USBH_Process>
}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000180 	.word	0x20000180

0800686c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	3b01      	subs	r3, #1
 800687c:	2b04      	cmp	r3, #4
 800687e:	d819      	bhi.n	80068b4 <USBH_UserProcess+0x48>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USBH_UserProcess+0x1c>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068a5 	.word	0x080068a5
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068ad 	.word	0x080068ad
 8006898:	0800689d 	.word	0x0800689d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <USBH_UserProcess+0x58>)
 800689e:	2203      	movs	r2, #3
 80068a0:	701a      	strb	r2, [r3, #0]
  break;
 80068a2:	e008      	b.n	80068b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <USBH_UserProcess+0x58>)
 80068a6:	2202      	movs	r2, #2
 80068a8:	701a      	strb	r2, [r3, #0]
  break;
 80068aa:	e004      	b.n	80068b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <USBH_UserProcess+0x58>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
  break;
 80068b2:	e000      	b.n	80068b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80068b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000558 	.word	0x20000558

080068c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068e8:	d147      	bne.n	800697a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	4b25      	ldr	r3, [pc, #148]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	4a24      	ldr	r2, [pc, #144]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	6313      	str	r3, [r2, #48]	; 0x30
 80068fa:	4b22      	ldr	r3, [pc, #136]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800690c:	2300      	movs	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	4619      	mov	r1, r3
 800691a:	481b      	ldr	r0, [pc, #108]	; (8006988 <HAL_HCD_MspInit+0xc0>)
 800691c:	f7fa f9f8 	bl	8000d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006920:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006926:	2302      	movs	r3, #2
 8006928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692e:	2303      	movs	r3, #3
 8006930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006932:	230a      	movs	r3, #10
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	4619      	mov	r1, r3
 800693c:	4812      	ldr	r0, [pc, #72]	; (8006988 <HAL_HCD_MspInit+0xc0>)
 800693e:	f7fa f9e7 	bl	8000d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	6353      	str	r3, [r2, #52]	; 0x34
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	4a0b      	ldr	r2, [pc, #44]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 8006958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800695c:	6453      	str	r3, [r2, #68]	; 0x44
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_HCD_MspInit+0xbc>)
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800696a:	2200      	movs	r2, #0
 800696c:	2100      	movs	r1, #0
 800696e:	2043      	movs	r0, #67	; 0x43
 8006970:	f7fa f9a4 	bl	8000cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006974:	2043      	movs	r0, #67	; 0x43
 8006976:	f7fa f9bd 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800697a:	bf00      	nop
 800697c:	3728      	adds	r7, #40	; 0x28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40023800 	.word	0x40023800
 8006988:	40020000 	.word	0x40020000

0800698c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe ffed 	bl	800597a <USBH_LL_IncTimer>
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff f825 	bl	8005a06 <USBH_LL_Connect>
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f82e 	bl	8005a34 <USBH_LL_Disconnect>
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
 80069ec:	4613      	mov	r3, r2
 80069ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe ffdf 	bl	80059ce <USBH_LL_PortEnabled>
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe ffdf 	bl	80059ea <USBH_LL_PortDisabled>
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d12a      	bne.n	8006a9c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a52:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a5c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a60:	2208      	movs	r2, #8
 8006a62:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006a64:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006a70:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a72:	2202      	movs	r2, #2
 8006a74:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006a7c:	480a      	ldr	r0, [pc, #40]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a7e:	f7fa fafc 	bl	800107a <HAL_HCD_Init>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006a88:	f7f9 fe9e 	bl	80007c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006a8c:	4806      	ldr	r0, [pc, #24]	; (8006aa8 <USBH_LL_Init+0x74>)
 8006a8e:	f7fa fee0 	bl	8001852 <HAL_HCD_GetCurrentFrame>
 8006a92:	4603      	mov	r3, r0
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fe ff60 	bl	800595c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2000055c 	.word	0x2000055c

08006aac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fa fe4f 	bl	8001766 <HAL_HCD_Start>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f95c 	bl	8006d8c <USBH_Get_USB_Status>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fa fe57 	bl	80017ac <HAL_HCD_Stop>
 8006afe:	4603      	mov	r3, r0
 8006b00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f941 	bl	8006d8c <USBH_Get_USB_Status>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fa fe9f 	bl	800186e <HAL_HCD_GetCurrentSpeed>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d00c      	beq.n	8006b50 <USBH_LL_GetSpeed+0x38>
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d80d      	bhi.n	8006b56 <USBH_LL_GetSpeed+0x3e>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <USBH_LL_GetSpeed+0x2c>
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d003      	beq.n	8006b4a <USBH_LL_GetSpeed+0x32>
 8006b42:	e008      	b.n	8006b56 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
    break;
 8006b48:	e008      	b.n	8006b5c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b4e:	e005      	b.n	8006b5c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006b50:	2302      	movs	r3, #2
 8006b52:	73fb      	strb	r3, [r7, #15]
    break;
 8006b54:	e002      	b.n	8006b5c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006b56:	2301      	movs	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
    break;
 8006b5a:	bf00      	nop
  }
  return  speed;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fa fe32 	bl	80017e6 <HAL_HCD_ResetPort>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f8ff 	bl	8006d8c <USBH_Get_USB_Status>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fa fe39 	bl	800182a <HAL_HCD_HC_GetXferCount>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006bc2:	b590      	push	{r4, r7, lr}
 8006bc4:	b089      	sub	sp, #36	; 0x24
 8006bc6:	af04      	add	r7, sp, #16
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	4608      	mov	r0, r1
 8006bcc:	4611      	mov	r1, r2
 8006bce:	461a      	mov	r2, r3
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	70fb      	strb	r3, [r7, #3]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70bb      	strb	r3, [r7, #2]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006bea:	787c      	ldrb	r4, [r7, #1]
 8006bec:	78ba      	ldrb	r2, [r7, #2]
 8006bee:	78f9      	ldrb	r1, [r7, #3]
 8006bf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4623      	mov	r3, r4
 8006c02:	f7fa fa9c 	bl	800113e <HAL_HCD_HC_Init>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f8bd 	bl	8006d8c <USBH_Get_USB_Status>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd90      	pop	{r4, r7, pc}

08006c20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fa fb0c 	bl	800125c <HAL_HCD_HC_Halt>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 f89e 	bl	8006d8c <USBH_Get_USB_Status>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006c5e:	b590      	push	{r4, r7, lr}
 8006c60:	b089      	sub	sp, #36	; 0x24
 8006c62:	af04      	add	r7, sp, #16
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	4608      	mov	r0, r1
 8006c68:	4611      	mov	r1, r2
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	70fb      	strb	r3, [r7, #3]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70bb      	strb	r3, [r7, #2]
 8006c74:	4613      	mov	r3, r2
 8006c76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006c86:	787c      	ldrb	r4, [r7, #1]
 8006c88:	78ba      	ldrb	r2, [r7, #2]
 8006c8a:	78f9      	ldrb	r1, [r7, #3]
 8006c8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c90:	9303      	str	r3, [sp, #12]
 8006c92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c94:	9302      	str	r3, [sp, #8]
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	f7fa faff 	bl	80012a4 <HAL_HCD_HC_SubmitRequest>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f86d 	bl	8006d8c <USBH_Get_USB_Status>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd90      	pop	{r4, r7, pc}

08006cc0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fa fd93 	bl	8001802 <HAL_HCD_HC_GetURBState>
 8006cdc:	4603      	mov	r3, r0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d103      	bne.n	8006d04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f870 	bl	8006de4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006d04:	20c8      	movs	r0, #200	; 0xc8
 8006d06:	f7f9 fefd 	bl	8000b04 <HAL_Delay>
  return USBH_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
 8006d20:	4613      	mov	r3, r2
 8006d22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	212c      	movs	r1, #44	; 0x2c
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	4413      	add	r3, r2
 8006d38:	333b      	adds	r3, #59	; 0x3b
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	212c      	movs	r1, #44	; 0x2c
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3354      	adds	r3, #84	; 0x54
 8006d4e:	78ba      	ldrb	r2, [r7, #2]
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e008      	b.n	8006d66 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	212c      	movs	r1, #44	; 0x2c
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	3355      	adds	r3, #85	; 0x55
 8006d62:	78ba      	ldrb	r2, [r7, #2]
 8006d64:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7f9 fec1 	bl	8000b04 <HAL_Delay>
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d817      	bhi.n	8006dd0 <USBH_Get_USB_Status+0x44>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <USBH_Get_USB_Status+0x1c>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006dbf 	.word	0x08006dbf
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dcb 	.word	0x08006dcb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
    break;
 8006dbc:	e00b      	b.n	8006dd6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc2:	e008      	b.n	8006dd6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc8:	e005      	b.n	8006dd6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8006dce:	e002      	b.n	8006dd6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd4:	bf00      	nop
  }
  return usb_status;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e001      	b.n	8006e02 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	461a      	mov	r2, r3
 8006e06:	2101      	movs	r1, #1
 8006e08:	4803      	ldr	r0, [pc, #12]	; (8006e18 <MX_DriverVbusFS+0x34>)
 8006e0a:	f7fa f91d 	bl	8001048 <HAL_GPIO_WritePin>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	40020800 	.word	0x40020800

08006e1c <__errno>:
 8006e1c:	4b01      	ldr	r3, [pc, #4]	; (8006e24 <__errno+0x8>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000002c 	.word	0x2000002c

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4d0d      	ldr	r5, [pc, #52]	; (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2600      	movs	r6, #0
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4d0b      	ldr	r5, [pc, #44]	; (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	; (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f000 fc9e 	bl	800777c <_init>
 8006e40:	1b64      	subs	r4, r4, r5
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2600      	movs	r6, #0
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e50:	4798      	blx	r3
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5a:	4798      	blx	r3
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	080077f8 	.word	0x080077f8
 8006e64:	080077f8 	.word	0x080077f8
 8006e68:	080077f8 	.word	0x080077f8
 8006e6c:	080077fc 	.word	0x080077fc

08006e70 <malloc>:
 8006e70:	4b02      	ldr	r3, [pc, #8]	; (8006e7c <malloc+0xc>)
 8006e72:	4601      	mov	r1, r0
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	f000 b87f 	b.w	8006f78 <_malloc_r>
 8006e7a:	bf00      	nop
 8006e7c:	2000002c 	.word	0x2000002c

08006e80 <free>:
 8006e80:	4b02      	ldr	r3, [pc, #8]	; (8006e8c <free+0xc>)
 8006e82:	4601      	mov	r1, r0
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	f000 b80b 	b.w	8006ea0 <_free_r>
 8006e8a:	bf00      	nop
 8006e8c:	2000002c 	.word	0x2000002c

08006e90 <memset>:
 8006e90:	4402      	add	r2, r0
 8006e92:	4603      	mov	r3, r0
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d100      	bne.n	8006e9a <memset+0xa>
 8006e98:	4770      	bx	lr
 8006e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9e:	e7f9      	b.n	8006e94 <memset+0x4>

08006ea0 <_free_r>:
 8006ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ea2:	2900      	cmp	r1, #0
 8006ea4:	d044      	beq.n	8006f30 <_free_r+0x90>
 8006ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eaa:	9001      	str	r0, [sp, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f1a1 0404 	sub.w	r4, r1, #4
 8006eb2:	bfb8      	it	lt
 8006eb4:	18e4      	addlt	r4, r4, r3
 8006eb6:	f000 f903 	bl	80070c0 <__malloc_lock>
 8006eba:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <_free_r+0x94>)
 8006ebc:	9801      	ldr	r0, [sp, #4]
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	b933      	cbnz	r3, 8006ed0 <_free_r+0x30>
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	6014      	str	r4, [r2, #0]
 8006ec6:	b003      	add	sp, #12
 8006ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ecc:	f000 b8fe 	b.w	80070cc <__malloc_unlock>
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d908      	bls.n	8006ee6 <_free_r+0x46>
 8006ed4:	6825      	ldr	r5, [r4, #0]
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf01      	itttt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	1949      	addeq	r1, r1, r5
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	e7ed      	b.n	8006ec2 <_free_r+0x22>
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b10b      	cbz	r3, 8006ef0 <_free_r+0x50>
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d9fa      	bls.n	8006ee6 <_free_r+0x46>
 8006ef0:	6811      	ldr	r1, [r2, #0]
 8006ef2:	1855      	adds	r5, r2, r1
 8006ef4:	42a5      	cmp	r5, r4
 8006ef6:	d10b      	bne.n	8006f10 <_free_r+0x70>
 8006ef8:	6824      	ldr	r4, [r4, #0]
 8006efa:	4421      	add	r1, r4
 8006efc:	1854      	adds	r4, r2, r1
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	d1e0      	bne.n	8006ec6 <_free_r+0x26>
 8006f04:	681c      	ldr	r4, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	6053      	str	r3, [r2, #4]
 8006f0a:	4421      	add	r1, r4
 8006f0c:	6011      	str	r1, [r2, #0]
 8006f0e:	e7da      	b.n	8006ec6 <_free_r+0x26>
 8006f10:	d902      	bls.n	8006f18 <_free_r+0x78>
 8006f12:	230c      	movs	r3, #12
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	e7d6      	b.n	8006ec6 <_free_r+0x26>
 8006f18:	6825      	ldr	r5, [r4, #0]
 8006f1a:	1961      	adds	r1, r4, r5
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	bf04      	itt	eq
 8006f20:	6819      	ldreq	r1, [r3, #0]
 8006f22:	685b      	ldreq	r3, [r3, #4]
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	bf04      	itt	eq
 8006f28:	1949      	addeq	r1, r1, r5
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	6054      	str	r4, [r2, #4]
 8006f2e:	e7ca      	b.n	8006ec6 <_free_r+0x26>
 8006f30:	b003      	add	sp, #12
 8006f32:	bd30      	pop	{r4, r5, pc}
 8006f34:	20000860 	.word	0x20000860

08006f38 <sbrk_aligned>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4e0e      	ldr	r6, [pc, #56]	; (8006f74 <sbrk_aligned+0x3c>)
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	6831      	ldr	r1, [r6, #0]
 8006f40:	4605      	mov	r5, r0
 8006f42:	b911      	cbnz	r1, 8006f4a <sbrk_aligned+0x12>
 8006f44:	f000 f88c 	bl	8007060 <_sbrk_r>
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f887 	bl	8007060 <_sbrk_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d00a      	beq.n	8006f6c <sbrk_aligned+0x34>
 8006f56:	1cc4      	adds	r4, r0, #3
 8006f58:	f024 0403 	bic.w	r4, r4, #3
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d007      	beq.n	8006f70 <sbrk_aligned+0x38>
 8006f60:	1a21      	subs	r1, r4, r0
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 f87c 	bl	8007060 <_sbrk_r>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d101      	bne.n	8006f70 <sbrk_aligned+0x38>
 8006f6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f70:	4620      	mov	r0, r4
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	20000864 	.word	0x20000864

08006f78 <_malloc_r>:
 8006f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	1ccd      	adds	r5, r1, #3
 8006f7e:	f025 0503 	bic.w	r5, r5, #3
 8006f82:	3508      	adds	r5, #8
 8006f84:	2d0c      	cmp	r5, #12
 8006f86:	bf38      	it	cc
 8006f88:	250c      	movcc	r5, #12
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	db01      	blt.n	8006f94 <_malloc_r+0x1c>
 8006f90:	42a9      	cmp	r1, r5
 8006f92:	d905      	bls.n	8006fa0 <_malloc_r+0x28>
 8006f94:	230c      	movs	r3, #12
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	2600      	movs	r6, #0
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	4e2e      	ldr	r6, [pc, #184]	; (800705c <_malloc_r+0xe4>)
 8006fa2:	f000 f88d 	bl	80070c0 <__malloc_lock>
 8006fa6:	6833      	ldr	r3, [r6, #0]
 8006fa8:	461c      	mov	r4, r3
 8006faa:	bb34      	cbnz	r4, 8006ffa <_malloc_r+0x82>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff ffc2 	bl	8006f38 <sbrk_aligned>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	d14d      	bne.n	8007056 <_malloc_r+0xde>
 8006fba:	6834      	ldr	r4, [r6, #0]
 8006fbc:	4626      	mov	r6, r4
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	d140      	bne.n	8007044 <_malloc_r+0xcc>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	eb04 0803 	add.w	r8, r4, r3
 8006fcc:	f000 f848 	bl	8007060 <_sbrk_r>
 8006fd0:	4580      	cmp	r8, r0
 8006fd2:	d13a      	bne.n	800704a <_malloc_r+0xd2>
 8006fd4:	6821      	ldr	r1, [r4, #0]
 8006fd6:	3503      	adds	r5, #3
 8006fd8:	1a6d      	subs	r5, r5, r1
 8006fda:	f025 0503 	bic.w	r5, r5, #3
 8006fde:	3508      	adds	r5, #8
 8006fe0:	2d0c      	cmp	r5, #12
 8006fe2:	bf38      	it	cc
 8006fe4:	250c      	movcc	r5, #12
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4638      	mov	r0, r7
 8006fea:	f7ff ffa5 	bl	8006f38 <sbrk_aligned>
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d02b      	beq.n	800704a <_malloc_r+0xd2>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	442b      	add	r3, r5
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	e00e      	b.n	8007018 <_malloc_r+0xa0>
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	1b52      	subs	r2, r2, r5
 8006ffe:	d41e      	bmi.n	800703e <_malloc_r+0xc6>
 8007000:	2a0b      	cmp	r2, #11
 8007002:	d916      	bls.n	8007032 <_malloc_r+0xba>
 8007004:	1961      	adds	r1, r4, r5
 8007006:	42a3      	cmp	r3, r4
 8007008:	6025      	str	r5, [r4, #0]
 800700a:	bf18      	it	ne
 800700c:	6059      	strne	r1, [r3, #4]
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	bf08      	it	eq
 8007012:	6031      	streq	r1, [r6, #0]
 8007014:	5162      	str	r2, [r4, r5]
 8007016:	604b      	str	r3, [r1, #4]
 8007018:	4638      	mov	r0, r7
 800701a:	f104 060b 	add.w	r6, r4, #11
 800701e:	f000 f855 	bl	80070cc <__malloc_unlock>
 8007022:	f026 0607 	bic.w	r6, r6, #7
 8007026:	1d23      	adds	r3, r4, #4
 8007028:	1af2      	subs	r2, r6, r3
 800702a:	d0b6      	beq.n	8006f9a <_malloc_r+0x22>
 800702c:	1b9b      	subs	r3, r3, r6
 800702e:	50a3      	str	r3, [r4, r2]
 8007030:	e7b3      	b.n	8006f9a <_malloc_r+0x22>
 8007032:	6862      	ldr	r2, [r4, #4]
 8007034:	42a3      	cmp	r3, r4
 8007036:	bf0c      	ite	eq
 8007038:	6032      	streq	r2, [r6, #0]
 800703a:	605a      	strne	r2, [r3, #4]
 800703c:	e7ec      	b.n	8007018 <_malloc_r+0xa0>
 800703e:	4623      	mov	r3, r4
 8007040:	6864      	ldr	r4, [r4, #4]
 8007042:	e7b2      	b.n	8006faa <_malloc_r+0x32>
 8007044:	4634      	mov	r4, r6
 8007046:	6876      	ldr	r6, [r6, #4]
 8007048:	e7b9      	b.n	8006fbe <_malloc_r+0x46>
 800704a:	230c      	movs	r3, #12
 800704c:	603b      	str	r3, [r7, #0]
 800704e:	4638      	mov	r0, r7
 8007050:	f000 f83c 	bl	80070cc <__malloc_unlock>
 8007054:	e7a1      	b.n	8006f9a <_malloc_r+0x22>
 8007056:	6025      	str	r5, [r4, #0]
 8007058:	e7de      	b.n	8007018 <_malloc_r+0xa0>
 800705a:	bf00      	nop
 800705c:	20000860 	.word	0x20000860

08007060 <_sbrk_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d06      	ldr	r5, [pc, #24]	; (800707c <_sbrk_r+0x1c>)
 8007064:	2300      	movs	r3, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	f7f9 fc96 	bl	800099c <_sbrk>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_sbrk_r+0x1a>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_sbrk_r+0x1a>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20000868 	.word	0x20000868

08007080 <siprintf>:
 8007080:	b40e      	push	{r1, r2, r3}
 8007082:	b500      	push	{lr}
 8007084:	b09c      	sub	sp, #112	; 0x70
 8007086:	ab1d      	add	r3, sp, #116	; 0x74
 8007088:	9002      	str	r0, [sp, #8]
 800708a:	9006      	str	r0, [sp, #24]
 800708c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007090:	4809      	ldr	r0, [pc, #36]	; (80070b8 <siprintf+0x38>)
 8007092:	9107      	str	r1, [sp, #28]
 8007094:	9104      	str	r1, [sp, #16]
 8007096:	4909      	ldr	r1, [pc, #36]	; (80070bc <siprintf+0x3c>)
 8007098:	f853 2b04 	ldr.w	r2, [r3], #4
 800709c:	9105      	str	r1, [sp, #20]
 800709e:	6800      	ldr	r0, [r0, #0]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	a902      	add	r1, sp, #8
 80070a4:	f000 f874 	bl	8007190 <_svfiprintf_r>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	b01c      	add	sp, #112	; 0x70
 80070b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b4:	b003      	add	sp, #12
 80070b6:	4770      	bx	lr
 80070b8:	2000002c 	.word	0x2000002c
 80070bc:	ffff0208 	.word	0xffff0208

080070c0 <__malloc_lock>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__malloc_lock+0x8>)
 80070c2:	f000 baf9 	b.w	80076b8 <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	2000086c 	.word	0x2000086c

080070cc <__malloc_unlock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__malloc_unlock+0x8>)
 80070ce:	f000 baf4 	b.w	80076ba <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	2000086c 	.word	0x2000086c

080070d8 <__ssputs_r>:
 80070d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070dc:	688e      	ldr	r6, [r1, #8]
 80070de:	429e      	cmp	r6, r3
 80070e0:	4682      	mov	sl, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	4690      	mov	r8, r2
 80070e6:	461f      	mov	r7, r3
 80070e8:	d838      	bhi.n	800715c <__ssputs_r+0x84>
 80070ea:	898a      	ldrh	r2, [r1, #12]
 80070ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070f0:	d032      	beq.n	8007158 <__ssputs_r+0x80>
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	6909      	ldr	r1, [r1, #16]
 80070f6:	eba5 0901 	sub.w	r9, r5, r1
 80070fa:	6965      	ldr	r5, [r4, #20]
 80070fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007104:	3301      	adds	r3, #1
 8007106:	444b      	add	r3, r9
 8007108:	106d      	asrs	r5, r5, #1
 800710a:	429d      	cmp	r5, r3
 800710c:	bf38      	it	cc
 800710e:	461d      	movcc	r5, r3
 8007110:	0553      	lsls	r3, r2, #21
 8007112:	d531      	bpl.n	8007178 <__ssputs_r+0xa0>
 8007114:	4629      	mov	r1, r5
 8007116:	f7ff ff2f 	bl	8006f78 <_malloc_r>
 800711a:	4606      	mov	r6, r0
 800711c:	b950      	cbnz	r0, 8007134 <__ssputs_r+0x5c>
 800711e:	230c      	movs	r3, #12
 8007120:	f8ca 3000 	str.w	r3, [sl]
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007134:	6921      	ldr	r1, [r4, #16]
 8007136:	464a      	mov	r2, r9
 8007138:	f000 fac0 	bl	80076bc <memcpy>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007146:	81a3      	strh	r3, [r4, #12]
 8007148:	6126      	str	r6, [r4, #16]
 800714a:	6165      	str	r5, [r4, #20]
 800714c:	444e      	add	r6, r9
 800714e:	eba5 0509 	sub.w	r5, r5, r9
 8007152:	6026      	str	r6, [r4, #0]
 8007154:	60a5      	str	r5, [r4, #8]
 8007156:	463e      	mov	r6, r7
 8007158:	42be      	cmp	r6, r7
 800715a:	d900      	bls.n	800715e <__ssputs_r+0x86>
 800715c:	463e      	mov	r6, r7
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	4632      	mov	r2, r6
 8007162:	4641      	mov	r1, r8
 8007164:	f000 fab8 	bl	80076d8 <memmove>
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	1b9b      	subs	r3, r3, r6
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4433      	add	r3, r6
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	2000      	movs	r0, #0
 8007176:	e7db      	b.n	8007130 <__ssputs_r+0x58>
 8007178:	462a      	mov	r2, r5
 800717a:	f000 fac7 	bl	800770c <_realloc_r>
 800717e:	4606      	mov	r6, r0
 8007180:	2800      	cmp	r0, #0
 8007182:	d1e1      	bne.n	8007148 <__ssputs_r+0x70>
 8007184:	6921      	ldr	r1, [r4, #16]
 8007186:	4650      	mov	r0, sl
 8007188:	f7ff fe8a 	bl	8006ea0 <_free_r>
 800718c:	e7c7      	b.n	800711e <__ssputs_r+0x46>
	...

08007190 <_svfiprintf_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	4698      	mov	r8, r3
 8007196:	898b      	ldrh	r3, [r1, #12]
 8007198:	061b      	lsls	r3, r3, #24
 800719a:	b09d      	sub	sp, #116	; 0x74
 800719c:	4607      	mov	r7, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	4614      	mov	r4, r2
 80071a2:	d50e      	bpl.n	80071c2 <_svfiprintf_r+0x32>
 80071a4:	690b      	ldr	r3, [r1, #16]
 80071a6:	b963      	cbnz	r3, 80071c2 <_svfiprintf_r+0x32>
 80071a8:	2140      	movs	r1, #64	; 0x40
 80071aa:	f7ff fee5 	bl	8006f78 <_malloc_r>
 80071ae:	6028      	str	r0, [r5, #0]
 80071b0:	6128      	str	r0, [r5, #16]
 80071b2:	b920      	cbnz	r0, 80071be <_svfiprintf_r+0x2e>
 80071b4:	230c      	movs	r3, #12
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071bc:	e0d1      	b.n	8007362 <_svfiprintf_r+0x1d2>
 80071be:	2340      	movs	r3, #64	; 0x40
 80071c0:	616b      	str	r3, [r5, #20]
 80071c2:	2300      	movs	r3, #0
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	2320      	movs	r3, #32
 80071c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d0:	2330      	movs	r3, #48	; 0x30
 80071d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800737c <_svfiprintf_r+0x1ec>
 80071d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071da:	f04f 0901 	mov.w	r9, #1
 80071de:	4623      	mov	r3, r4
 80071e0:	469a      	mov	sl, r3
 80071e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e6:	b10a      	cbz	r2, 80071ec <_svfiprintf_r+0x5c>
 80071e8:	2a25      	cmp	r2, #37	; 0x25
 80071ea:	d1f9      	bne.n	80071e0 <_svfiprintf_r+0x50>
 80071ec:	ebba 0b04 	subs.w	fp, sl, r4
 80071f0:	d00b      	beq.n	800720a <_svfiprintf_r+0x7a>
 80071f2:	465b      	mov	r3, fp
 80071f4:	4622      	mov	r2, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	4638      	mov	r0, r7
 80071fa:	f7ff ff6d 	bl	80070d8 <__ssputs_r>
 80071fe:	3001      	adds	r0, #1
 8007200:	f000 80aa 	beq.w	8007358 <_svfiprintf_r+0x1c8>
 8007204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007206:	445a      	add	r2, fp
 8007208:	9209      	str	r2, [sp, #36]	; 0x24
 800720a:	f89a 3000 	ldrb.w	r3, [sl]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80a2 	beq.w	8007358 <_svfiprintf_r+0x1c8>
 8007214:	2300      	movs	r3, #0
 8007216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800721a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800721e:	f10a 0a01 	add.w	sl, sl, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	9307      	str	r3, [sp, #28]
 8007226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800722a:	931a      	str	r3, [sp, #104]	; 0x68
 800722c:	4654      	mov	r4, sl
 800722e:	2205      	movs	r2, #5
 8007230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007234:	4851      	ldr	r0, [pc, #324]	; (800737c <_svfiprintf_r+0x1ec>)
 8007236:	f7f8 ffcb 	bl	80001d0 <memchr>
 800723a:	9a04      	ldr	r2, [sp, #16]
 800723c:	b9d8      	cbnz	r0, 8007276 <_svfiprintf_r+0xe6>
 800723e:	06d0      	lsls	r0, r2, #27
 8007240:	bf44      	itt	mi
 8007242:	2320      	movmi	r3, #32
 8007244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007248:	0711      	lsls	r1, r2, #28
 800724a:	bf44      	itt	mi
 800724c:	232b      	movmi	r3, #43	; 0x2b
 800724e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b2a      	cmp	r3, #42	; 0x2a
 8007258:	d015      	beq.n	8007286 <_svfiprintf_r+0xf6>
 800725a:	9a07      	ldr	r2, [sp, #28]
 800725c:	4654      	mov	r4, sl
 800725e:	2000      	movs	r0, #0
 8007260:	f04f 0c0a 	mov.w	ip, #10
 8007264:	4621      	mov	r1, r4
 8007266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800726a:	3b30      	subs	r3, #48	; 0x30
 800726c:	2b09      	cmp	r3, #9
 800726e:	d94e      	bls.n	800730e <_svfiprintf_r+0x17e>
 8007270:	b1b0      	cbz	r0, 80072a0 <_svfiprintf_r+0x110>
 8007272:	9207      	str	r2, [sp, #28]
 8007274:	e014      	b.n	80072a0 <_svfiprintf_r+0x110>
 8007276:	eba0 0308 	sub.w	r3, r0, r8
 800727a:	fa09 f303 	lsl.w	r3, r9, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	46a2      	mov	sl, r4
 8007284:	e7d2      	b.n	800722c <_svfiprintf_r+0x9c>
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	1d19      	adds	r1, r3, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	9103      	str	r1, [sp, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	bfbb      	ittet	lt
 8007292:	425b      	neglt	r3, r3
 8007294:	f042 0202 	orrlt.w	r2, r2, #2
 8007298:	9307      	strge	r3, [sp, #28]
 800729a:	9307      	strlt	r3, [sp, #28]
 800729c:	bfb8      	it	lt
 800729e:	9204      	strlt	r2, [sp, #16]
 80072a0:	7823      	ldrb	r3, [r4, #0]
 80072a2:	2b2e      	cmp	r3, #46	; 0x2e
 80072a4:	d10c      	bne.n	80072c0 <_svfiprintf_r+0x130>
 80072a6:	7863      	ldrb	r3, [r4, #1]
 80072a8:	2b2a      	cmp	r3, #42	; 0x2a
 80072aa:	d135      	bne.n	8007318 <_svfiprintf_r+0x188>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	1d1a      	adds	r2, r3, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	9203      	str	r2, [sp, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bfb8      	it	lt
 80072b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072bc:	3402      	adds	r4, #2
 80072be:	9305      	str	r3, [sp, #20]
 80072c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800738c <_svfiprintf_r+0x1fc>
 80072c4:	7821      	ldrb	r1, [r4, #0]
 80072c6:	2203      	movs	r2, #3
 80072c8:	4650      	mov	r0, sl
 80072ca:	f7f8 ff81 	bl	80001d0 <memchr>
 80072ce:	b140      	cbz	r0, 80072e2 <_svfiprintf_r+0x152>
 80072d0:	2340      	movs	r3, #64	; 0x40
 80072d2:	eba0 000a 	sub.w	r0, r0, sl
 80072d6:	fa03 f000 	lsl.w	r0, r3, r0
 80072da:	9b04      	ldr	r3, [sp, #16]
 80072dc:	4303      	orrs	r3, r0
 80072de:	3401      	adds	r4, #1
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e6:	4826      	ldr	r0, [pc, #152]	; (8007380 <_svfiprintf_r+0x1f0>)
 80072e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ec:	2206      	movs	r2, #6
 80072ee:	f7f8 ff6f 	bl	80001d0 <memchr>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d038      	beq.n	8007368 <_svfiprintf_r+0x1d8>
 80072f6:	4b23      	ldr	r3, [pc, #140]	; (8007384 <_svfiprintf_r+0x1f4>)
 80072f8:	bb1b      	cbnz	r3, 8007342 <_svfiprintf_r+0x1b2>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	3307      	adds	r3, #7
 80072fe:	f023 0307 	bic.w	r3, r3, #7
 8007302:	3308      	adds	r3, #8
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007308:	4433      	add	r3, r6
 800730a:	9309      	str	r3, [sp, #36]	; 0x24
 800730c:	e767      	b.n	80071de <_svfiprintf_r+0x4e>
 800730e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007312:	460c      	mov	r4, r1
 8007314:	2001      	movs	r0, #1
 8007316:	e7a5      	b.n	8007264 <_svfiprintf_r+0xd4>
 8007318:	2300      	movs	r3, #0
 800731a:	3401      	adds	r4, #1
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	4619      	mov	r1, r3
 8007320:	f04f 0c0a 	mov.w	ip, #10
 8007324:	4620      	mov	r0, r4
 8007326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732a:	3a30      	subs	r2, #48	; 0x30
 800732c:	2a09      	cmp	r2, #9
 800732e:	d903      	bls.n	8007338 <_svfiprintf_r+0x1a8>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0c5      	beq.n	80072c0 <_svfiprintf_r+0x130>
 8007334:	9105      	str	r1, [sp, #20]
 8007336:	e7c3      	b.n	80072c0 <_svfiprintf_r+0x130>
 8007338:	fb0c 2101 	mla	r1, ip, r1, r2
 800733c:	4604      	mov	r4, r0
 800733e:	2301      	movs	r3, #1
 8007340:	e7f0      	b.n	8007324 <_svfiprintf_r+0x194>
 8007342:	ab03      	add	r3, sp, #12
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	462a      	mov	r2, r5
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <_svfiprintf_r+0x1f8>)
 800734a:	a904      	add	r1, sp, #16
 800734c:	4638      	mov	r0, r7
 800734e:	f3af 8000 	nop.w
 8007352:	1c42      	adds	r2, r0, #1
 8007354:	4606      	mov	r6, r0
 8007356:	d1d6      	bne.n	8007306 <_svfiprintf_r+0x176>
 8007358:	89ab      	ldrh	r3, [r5, #12]
 800735a:	065b      	lsls	r3, r3, #25
 800735c:	f53f af2c 	bmi.w	80071b8 <_svfiprintf_r+0x28>
 8007360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007362:	b01d      	add	sp, #116	; 0x74
 8007364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007368:	ab03      	add	r3, sp, #12
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	462a      	mov	r2, r5
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <_svfiprintf_r+0x1f8>)
 8007370:	a904      	add	r1, sp, #16
 8007372:	4638      	mov	r0, r7
 8007374:	f000 f87a 	bl	800746c <_printf_i>
 8007378:	e7eb      	b.n	8007352 <_svfiprintf_r+0x1c2>
 800737a:	bf00      	nop
 800737c:	080077bc 	.word	0x080077bc
 8007380:	080077c6 	.word	0x080077c6
 8007384:	00000000 	.word	0x00000000
 8007388:	080070d9 	.word	0x080070d9
 800738c:	080077c2 	.word	0x080077c2

08007390 <_printf_common>:
 8007390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	4616      	mov	r6, r2
 8007396:	4699      	mov	r9, r3
 8007398:	688a      	ldr	r2, [r1, #8]
 800739a:	690b      	ldr	r3, [r1, #16]
 800739c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bfb8      	it	lt
 80073a4:	4613      	movlt	r3, r2
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073ac:	4607      	mov	r7, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	b10a      	cbz	r2, 80073b6 <_printf_common+0x26>
 80073b2:	3301      	adds	r3, #1
 80073b4:	6033      	str	r3, [r6, #0]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	0699      	lsls	r1, r3, #26
 80073ba:	bf42      	ittt	mi
 80073bc:	6833      	ldrmi	r3, [r6, #0]
 80073be:	3302      	addmi	r3, #2
 80073c0:	6033      	strmi	r3, [r6, #0]
 80073c2:	6825      	ldr	r5, [r4, #0]
 80073c4:	f015 0506 	ands.w	r5, r5, #6
 80073c8:	d106      	bne.n	80073d8 <_printf_common+0x48>
 80073ca:	f104 0a19 	add.w	sl, r4, #25
 80073ce:	68e3      	ldr	r3, [r4, #12]
 80073d0:	6832      	ldr	r2, [r6, #0]
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	42ab      	cmp	r3, r5
 80073d6:	dc26      	bgt.n	8007426 <_printf_common+0x96>
 80073d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073dc:	1e13      	subs	r3, r2, #0
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	bf18      	it	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	0692      	lsls	r2, r2, #26
 80073e6:	d42b      	bmi.n	8007440 <_printf_common+0xb0>
 80073e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ec:	4649      	mov	r1, r9
 80073ee:	4638      	mov	r0, r7
 80073f0:	47c0      	blx	r8
 80073f2:	3001      	adds	r0, #1
 80073f4:	d01e      	beq.n	8007434 <_printf_common+0xa4>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	68e5      	ldr	r5, [r4, #12]
 80073fa:	6832      	ldr	r2, [r6, #0]
 80073fc:	f003 0306 	and.w	r3, r3, #6
 8007400:	2b04      	cmp	r3, #4
 8007402:	bf08      	it	eq
 8007404:	1aad      	subeq	r5, r5, r2
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	6922      	ldr	r2, [r4, #16]
 800740a:	bf0c      	ite	eq
 800740c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007410:	2500      	movne	r5, #0
 8007412:	4293      	cmp	r3, r2
 8007414:	bfc4      	itt	gt
 8007416:	1a9b      	subgt	r3, r3, r2
 8007418:	18ed      	addgt	r5, r5, r3
 800741a:	2600      	movs	r6, #0
 800741c:	341a      	adds	r4, #26
 800741e:	42b5      	cmp	r5, r6
 8007420:	d11a      	bne.n	8007458 <_printf_common+0xc8>
 8007422:	2000      	movs	r0, #0
 8007424:	e008      	b.n	8007438 <_printf_common+0xa8>
 8007426:	2301      	movs	r3, #1
 8007428:	4652      	mov	r2, sl
 800742a:	4649      	mov	r1, r9
 800742c:	4638      	mov	r0, r7
 800742e:	47c0      	blx	r8
 8007430:	3001      	adds	r0, #1
 8007432:	d103      	bne.n	800743c <_printf_common+0xac>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743c:	3501      	adds	r5, #1
 800743e:	e7c6      	b.n	80073ce <_printf_common+0x3e>
 8007440:	18e1      	adds	r1, r4, r3
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	2030      	movs	r0, #48	; 0x30
 8007446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800744a:	4422      	add	r2, r4
 800744c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007454:	3302      	adds	r3, #2
 8007456:	e7c7      	b.n	80073e8 <_printf_common+0x58>
 8007458:	2301      	movs	r3, #1
 800745a:	4622      	mov	r2, r4
 800745c:	4649      	mov	r1, r9
 800745e:	4638      	mov	r0, r7
 8007460:	47c0      	blx	r8
 8007462:	3001      	adds	r0, #1
 8007464:	d0e6      	beq.n	8007434 <_printf_common+0xa4>
 8007466:	3601      	adds	r6, #1
 8007468:	e7d9      	b.n	800741e <_printf_common+0x8e>
	...

0800746c <_printf_i>:
 800746c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	7e0f      	ldrb	r7, [r1, #24]
 8007472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007474:	2f78      	cmp	r7, #120	; 0x78
 8007476:	4691      	mov	r9, r2
 8007478:	4680      	mov	r8, r0
 800747a:	460c      	mov	r4, r1
 800747c:	469a      	mov	sl, r3
 800747e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007482:	d807      	bhi.n	8007494 <_printf_i+0x28>
 8007484:	2f62      	cmp	r7, #98	; 0x62
 8007486:	d80a      	bhi.n	800749e <_printf_i+0x32>
 8007488:	2f00      	cmp	r7, #0
 800748a:	f000 80d8 	beq.w	800763e <_printf_i+0x1d2>
 800748e:	2f58      	cmp	r7, #88	; 0x58
 8007490:	f000 80a3 	beq.w	80075da <_printf_i+0x16e>
 8007494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800749c:	e03a      	b.n	8007514 <_printf_i+0xa8>
 800749e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074a2:	2b15      	cmp	r3, #21
 80074a4:	d8f6      	bhi.n	8007494 <_printf_i+0x28>
 80074a6:	a101      	add	r1, pc, #4	; (adr r1, 80074ac <_printf_i+0x40>)
 80074a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074ac:	08007505 	.word	0x08007505
 80074b0:	08007519 	.word	0x08007519
 80074b4:	08007495 	.word	0x08007495
 80074b8:	08007495 	.word	0x08007495
 80074bc:	08007495 	.word	0x08007495
 80074c0:	08007495 	.word	0x08007495
 80074c4:	08007519 	.word	0x08007519
 80074c8:	08007495 	.word	0x08007495
 80074cc:	08007495 	.word	0x08007495
 80074d0:	08007495 	.word	0x08007495
 80074d4:	08007495 	.word	0x08007495
 80074d8:	08007625 	.word	0x08007625
 80074dc:	08007549 	.word	0x08007549
 80074e0:	08007607 	.word	0x08007607
 80074e4:	08007495 	.word	0x08007495
 80074e8:	08007495 	.word	0x08007495
 80074ec:	08007647 	.word	0x08007647
 80074f0:	08007495 	.word	0x08007495
 80074f4:	08007549 	.word	0x08007549
 80074f8:	08007495 	.word	0x08007495
 80074fc:	08007495 	.word	0x08007495
 8007500:	0800760f 	.word	0x0800760f
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	1d1a      	adds	r2, r3, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	602a      	str	r2, [r5, #0]
 800750c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007514:	2301      	movs	r3, #1
 8007516:	e0a3      	b.n	8007660 <_printf_i+0x1f4>
 8007518:	6820      	ldr	r0, [r4, #0]
 800751a:	6829      	ldr	r1, [r5, #0]
 800751c:	0606      	lsls	r6, r0, #24
 800751e:	f101 0304 	add.w	r3, r1, #4
 8007522:	d50a      	bpl.n	800753a <_printf_i+0xce>
 8007524:	680e      	ldr	r6, [r1, #0]
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	2e00      	cmp	r6, #0
 800752a:	da03      	bge.n	8007534 <_printf_i+0xc8>
 800752c:	232d      	movs	r3, #45	; 0x2d
 800752e:	4276      	negs	r6, r6
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007534:	485e      	ldr	r0, [pc, #376]	; (80076b0 <_printf_i+0x244>)
 8007536:	230a      	movs	r3, #10
 8007538:	e019      	b.n	800756e <_printf_i+0x102>
 800753a:	680e      	ldr	r6, [r1, #0]
 800753c:	602b      	str	r3, [r5, #0]
 800753e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007542:	bf18      	it	ne
 8007544:	b236      	sxthne	r6, r6
 8007546:	e7ef      	b.n	8007528 <_printf_i+0xbc>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	6820      	ldr	r0, [r4, #0]
 800754c:	1d19      	adds	r1, r3, #4
 800754e:	6029      	str	r1, [r5, #0]
 8007550:	0601      	lsls	r1, r0, #24
 8007552:	d501      	bpl.n	8007558 <_printf_i+0xec>
 8007554:	681e      	ldr	r6, [r3, #0]
 8007556:	e002      	b.n	800755e <_printf_i+0xf2>
 8007558:	0646      	lsls	r6, r0, #25
 800755a:	d5fb      	bpl.n	8007554 <_printf_i+0xe8>
 800755c:	881e      	ldrh	r6, [r3, #0]
 800755e:	4854      	ldr	r0, [pc, #336]	; (80076b0 <_printf_i+0x244>)
 8007560:	2f6f      	cmp	r7, #111	; 0x6f
 8007562:	bf0c      	ite	eq
 8007564:	2308      	moveq	r3, #8
 8007566:	230a      	movne	r3, #10
 8007568:	2100      	movs	r1, #0
 800756a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800756e:	6865      	ldr	r5, [r4, #4]
 8007570:	60a5      	str	r5, [r4, #8]
 8007572:	2d00      	cmp	r5, #0
 8007574:	bfa2      	ittt	ge
 8007576:	6821      	ldrge	r1, [r4, #0]
 8007578:	f021 0104 	bicge.w	r1, r1, #4
 800757c:	6021      	strge	r1, [r4, #0]
 800757e:	b90e      	cbnz	r6, 8007584 <_printf_i+0x118>
 8007580:	2d00      	cmp	r5, #0
 8007582:	d04d      	beq.n	8007620 <_printf_i+0x1b4>
 8007584:	4615      	mov	r5, r2
 8007586:	fbb6 f1f3 	udiv	r1, r6, r3
 800758a:	fb03 6711 	mls	r7, r3, r1, r6
 800758e:	5dc7      	ldrb	r7, [r0, r7]
 8007590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007594:	4637      	mov	r7, r6
 8007596:	42bb      	cmp	r3, r7
 8007598:	460e      	mov	r6, r1
 800759a:	d9f4      	bls.n	8007586 <_printf_i+0x11a>
 800759c:	2b08      	cmp	r3, #8
 800759e:	d10b      	bne.n	80075b8 <_printf_i+0x14c>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	07de      	lsls	r6, r3, #31
 80075a4:	d508      	bpl.n	80075b8 <_printf_i+0x14c>
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	4299      	cmp	r1, r3
 80075ac:	bfde      	ittt	le
 80075ae:	2330      	movle	r3, #48	; 0x30
 80075b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80075b8:	1b52      	subs	r2, r2, r5
 80075ba:	6122      	str	r2, [r4, #16]
 80075bc:	f8cd a000 	str.w	sl, [sp]
 80075c0:	464b      	mov	r3, r9
 80075c2:	aa03      	add	r2, sp, #12
 80075c4:	4621      	mov	r1, r4
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7ff fee2 	bl	8007390 <_printf_common>
 80075cc:	3001      	adds	r0, #1
 80075ce:	d14c      	bne.n	800766a <_printf_i+0x1fe>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d4:	b004      	add	sp, #16
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	4835      	ldr	r0, [pc, #212]	; (80076b0 <_printf_i+0x244>)
 80075dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075e0:	6829      	ldr	r1, [r5, #0]
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075e8:	6029      	str	r1, [r5, #0]
 80075ea:	061d      	lsls	r5, r3, #24
 80075ec:	d514      	bpl.n	8007618 <_printf_i+0x1ac>
 80075ee:	07df      	lsls	r7, r3, #31
 80075f0:	bf44      	itt	mi
 80075f2:	f043 0320 	orrmi.w	r3, r3, #32
 80075f6:	6023      	strmi	r3, [r4, #0]
 80075f8:	b91e      	cbnz	r6, 8007602 <_printf_i+0x196>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	f023 0320 	bic.w	r3, r3, #32
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	2310      	movs	r3, #16
 8007604:	e7b0      	b.n	8007568 <_printf_i+0xfc>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	f043 0320 	orr.w	r3, r3, #32
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	2378      	movs	r3, #120	; 0x78
 8007610:	4828      	ldr	r0, [pc, #160]	; (80076b4 <_printf_i+0x248>)
 8007612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007616:	e7e3      	b.n	80075e0 <_printf_i+0x174>
 8007618:	0659      	lsls	r1, r3, #25
 800761a:	bf48      	it	mi
 800761c:	b2b6      	uxthmi	r6, r6
 800761e:	e7e6      	b.n	80075ee <_printf_i+0x182>
 8007620:	4615      	mov	r5, r2
 8007622:	e7bb      	b.n	800759c <_printf_i+0x130>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	6826      	ldr	r6, [r4, #0]
 8007628:	6961      	ldr	r1, [r4, #20]
 800762a:	1d18      	adds	r0, r3, #4
 800762c:	6028      	str	r0, [r5, #0]
 800762e:	0635      	lsls	r5, r6, #24
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	d501      	bpl.n	8007638 <_printf_i+0x1cc>
 8007634:	6019      	str	r1, [r3, #0]
 8007636:	e002      	b.n	800763e <_printf_i+0x1d2>
 8007638:	0670      	lsls	r0, r6, #25
 800763a:	d5fb      	bpl.n	8007634 <_printf_i+0x1c8>
 800763c:	8019      	strh	r1, [r3, #0]
 800763e:	2300      	movs	r3, #0
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	4615      	mov	r5, r2
 8007644:	e7ba      	b.n	80075bc <_printf_i+0x150>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	1d1a      	adds	r2, r3, #4
 800764a:	602a      	str	r2, [r5, #0]
 800764c:	681d      	ldr	r5, [r3, #0]
 800764e:	6862      	ldr	r2, [r4, #4]
 8007650:	2100      	movs	r1, #0
 8007652:	4628      	mov	r0, r5
 8007654:	f7f8 fdbc 	bl	80001d0 <memchr>
 8007658:	b108      	cbz	r0, 800765e <_printf_i+0x1f2>
 800765a:	1b40      	subs	r0, r0, r5
 800765c:	6060      	str	r0, [r4, #4]
 800765e:	6863      	ldr	r3, [r4, #4]
 8007660:	6123      	str	r3, [r4, #16]
 8007662:	2300      	movs	r3, #0
 8007664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007668:	e7a8      	b.n	80075bc <_printf_i+0x150>
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	462a      	mov	r2, r5
 800766e:	4649      	mov	r1, r9
 8007670:	4640      	mov	r0, r8
 8007672:	47d0      	blx	sl
 8007674:	3001      	adds	r0, #1
 8007676:	d0ab      	beq.n	80075d0 <_printf_i+0x164>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	d413      	bmi.n	80076a6 <_printf_i+0x23a>
 800767e:	68e0      	ldr	r0, [r4, #12]
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	4298      	cmp	r0, r3
 8007684:	bfb8      	it	lt
 8007686:	4618      	movlt	r0, r3
 8007688:	e7a4      	b.n	80075d4 <_printf_i+0x168>
 800768a:	2301      	movs	r3, #1
 800768c:	4632      	mov	r2, r6
 800768e:	4649      	mov	r1, r9
 8007690:	4640      	mov	r0, r8
 8007692:	47d0      	blx	sl
 8007694:	3001      	adds	r0, #1
 8007696:	d09b      	beq.n	80075d0 <_printf_i+0x164>
 8007698:	3501      	adds	r5, #1
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	9903      	ldr	r1, [sp, #12]
 800769e:	1a5b      	subs	r3, r3, r1
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dcf2      	bgt.n	800768a <_printf_i+0x21e>
 80076a4:	e7eb      	b.n	800767e <_printf_i+0x212>
 80076a6:	2500      	movs	r5, #0
 80076a8:	f104 0619 	add.w	r6, r4, #25
 80076ac:	e7f5      	b.n	800769a <_printf_i+0x22e>
 80076ae:	bf00      	nop
 80076b0:	080077cd 	.word	0x080077cd
 80076b4:	080077de 	.word	0x080077de

080076b8 <__retarget_lock_acquire_recursive>:
 80076b8:	4770      	bx	lr

080076ba <__retarget_lock_release_recursive>:
 80076ba:	4770      	bx	lr

080076bc <memcpy>:
 80076bc:	440a      	add	r2, r1
 80076be:	4291      	cmp	r1, r2
 80076c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076c4:	d100      	bne.n	80076c8 <memcpy+0xc>
 80076c6:	4770      	bx	lr
 80076c8:	b510      	push	{r4, lr}
 80076ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d2:	4291      	cmp	r1, r2
 80076d4:	d1f9      	bne.n	80076ca <memcpy+0xe>
 80076d6:	bd10      	pop	{r4, pc}

080076d8 <memmove>:
 80076d8:	4288      	cmp	r0, r1
 80076da:	b510      	push	{r4, lr}
 80076dc:	eb01 0402 	add.w	r4, r1, r2
 80076e0:	d902      	bls.n	80076e8 <memmove+0x10>
 80076e2:	4284      	cmp	r4, r0
 80076e4:	4623      	mov	r3, r4
 80076e6:	d807      	bhi.n	80076f8 <memmove+0x20>
 80076e8:	1e43      	subs	r3, r0, #1
 80076ea:	42a1      	cmp	r1, r4
 80076ec:	d008      	beq.n	8007700 <memmove+0x28>
 80076ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076f6:	e7f8      	b.n	80076ea <memmove+0x12>
 80076f8:	4402      	add	r2, r0
 80076fa:	4601      	mov	r1, r0
 80076fc:	428a      	cmp	r2, r1
 80076fe:	d100      	bne.n	8007702 <memmove+0x2a>
 8007700:	bd10      	pop	{r4, pc}
 8007702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800770a:	e7f7      	b.n	80076fc <memmove+0x24>

0800770c <_realloc_r>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	4680      	mov	r8, r0
 8007712:	4614      	mov	r4, r2
 8007714:	460e      	mov	r6, r1
 8007716:	b921      	cbnz	r1, 8007722 <_realloc_r+0x16>
 8007718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	4611      	mov	r1, r2
 800771e:	f7ff bc2b 	b.w	8006f78 <_malloc_r>
 8007722:	b92a      	cbnz	r2, 8007730 <_realloc_r+0x24>
 8007724:	f7ff fbbc 	bl	8006ea0 <_free_r>
 8007728:	4625      	mov	r5, r4
 800772a:	4628      	mov	r0, r5
 800772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007730:	f000 f81b 	bl	800776a <_malloc_usable_size_r>
 8007734:	4284      	cmp	r4, r0
 8007736:	4607      	mov	r7, r0
 8007738:	d802      	bhi.n	8007740 <_realloc_r+0x34>
 800773a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800773e:	d812      	bhi.n	8007766 <_realloc_r+0x5a>
 8007740:	4621      	mov	r1, r4
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff fc18 	bl	8006f78 <_malloc_r>
 8007748:	4605      	mov	r5, r0
 800774a:	2800      	cmp	r0, #0
 800774c:	d0ed      	beq.n	800772a <_realloc_r+0x1e>
 800774e:	42bc      	cmp	r4, r7
 8007750:	4622      	mov	r2, r4
 8007752:	4631      	mov	r1, r6
 8007754:	bf28      	it	cs
 8007756:	463a      	movcs	r2, r7
 8007758:	f7ff ffb0 	bl	80076bc <memcpy>
 800775c:	4631      	mov	r1, r6
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fb9e 	bl	8006ea0 <_free_r>
 8007764:	e7e1      	b.n	800772a <_realloc_r+0x1e>
 8007766:	4635      	mov	r5, r6
 8007768:	e7df      	b.n	800772a <_realloc_r+0x1e>

0800776a <_malloc_usable_size_r>:
 800776a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776e:	1f18      	subs	r0, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfbc      	itt	lt
 8007774:	580b      	ldrlt	r3, [r1, r0]
 8007776:	18c0      	addlt	r0, r0, r3
 8007778:	4770      	bx	lr
	...

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
