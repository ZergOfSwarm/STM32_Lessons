
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  080070e0  080070e0  000170e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007780  08007780  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007780  08007780  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007780  08007780  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001dc  08007964  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08007964  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6ab  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002478  00000000  00000000  0002f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00031d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fb9  00000000  00000000  000339d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b62b  00000000  00000000  0004c989  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bd79  00000000  00000000  00057fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb0  00000000  00000000  000e3da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080070c4 	.word	0x080070c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080070c4 	.word	0x080070c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <BlockTillConversionComplete>:
static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt);
//static bool IsAllZeros(const uint8_t * const scratchPad, const size_t length);

// Continue to check if the IC has responded with a temperature
static void BlockTillConversionComplete(DallasTemperature_HandleTypeDef* dt, uint8_t bitResolution)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	int delms = DT_MillisToWaitForConversion(bitResolution);
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fbec 	bl	8001730 <DT_MillisToWaitForConversion>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]

	if (dt->checkForConversion && !dt->parasite)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7a9b      	ldrb	r3, [r3, #10]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d01d      	beq.n	8000fa0 <BlockTillConversionComplete+0x5c>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	799b      	ldrb	r3, [r3, #6]
 8000f68:	f083 0301 	eor.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d016      	beq.n	8000fa0 <BlockTillConversionComplete+0x5c>
	{
		unsigned long now = HAL_GetTick();
 8000f72:	f001 fc6b 	bl	800284c <HAL_GetTick>
 8000f76:	60b8      	str	r0, [r7, #8]
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000f78:	e000      	b.n	8000f7c <BlockTillConversionComplete+0x38>
		{
			__NOP();
 8000f7a:	bf00      	nop
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fb97 	bl	80016b0 <DT_IsConversionComplete>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d013      	beq.n	8000fb6 <BlockTillConversionComplete+0x72>
 8000f8e:	f001 fc5d 	bl	800284c <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d8ed      	bhi.n	8000f7a <BlockTillConversionComplete+0x36>
	{
 8000f9e:	e00a      	b.n	8000fb6 <BlockTillConversionComplete+0x72>
		}
	}
	else
	{
		ActivateExternalPullup(dt);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f80d 	bl	8000fc0 <ActivateExternalPullup>
		HAL_Delay(delms);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fc59 	bl	8002860 <HAL_Delay>
		DeactivateExternalPullup(dt);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f81a 	bl	8000fe8 <DeactivateExternalPullup>
	}
}
 8000fb4:	e000      	b.n	8000fb8 <BlockTillConversionComplete+0x74>
	{
 8000fb6:	bf00      	nop
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <ActivateExternalPullup>:

static void ActivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	79db      	ldrb	r3, [r3, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <ActivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <ActivateExternalPullup+0x24>)
 8000fd8:	f002 f902 	bl	80031e0 <HAL_GPIO_WritePin>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40011000 	.word	0x40011000

08000fe8 <DeactivateExternalPullup>:

static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	79db      	ldrb	r3, [r3, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <DeactivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <DeactivateExternalPullup+0x24>)
 8001000:	f002 f8ee 	bl	80031e0 <HAL_GPIO_WritePin>
	}
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40011000 	.word	0x40011000

08001010 <DT_SetOneWire>:

	DeactivateExternalPullup(dt);
}

void DT_SetOneWire(DallasTemperature_HandleTypeDef* dt, OneWire_HandleTypeDef* ow)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	dt->ow 					= ow;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	601a      	str	r2, [r3, #0]
	dt->devices 			= 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	711a      	strb	r2, [r3, #4]
	dt->ds18Count 			= 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	715a      	strb	r2, [r3, #5]
	dt->parasite 			= false;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	719a      	strb	r2, [r3, #6]
	dt->bitResolution 		= 9;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2209      	movs	r2, #9
 8001036:	721a      	strb	r2, [r3, #8]
	dt->waitForConversion 	= true;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
	dt->checkForConversion 	= true;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	729a      	strb	r2, [r3, #10]
	dt->autoSaveScratchPad 	= true;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	72da      	strb	r2, [r3, #11]
	dt->useExternalPullup 	= false;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	71da      	strb	r2, [r3, #7]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <DT_Begin>:

void DT_Begin(DallasTemperature_HandleTypeDef* dt)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b093      	sub	sp, #76	; 0x4c
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	AllDeviceAddress deviceAddress;

	OW_ResetSearch(dt->ow);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fdc1 	bl	8001bee <OW_ResetSearch>
	dt->devices = 0; 	// Reset the number of devices when we enumerate wire devices
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	711a      	strb	r2, [r3, #4]
	dt->ds18Count = 0; 	// Reset number of DS18xxx Family devices
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	715a      	strb	r2, [r3, #5]

	dt->devices = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f107 010c 	add.w	r1, r7, #12
 8001080:	2207      	movs	r2, #7
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fdd6 	bl	8001c34 <OW_Search>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 0; i < dt->devices; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001096:	e059      	b.n	800114c <DT_Begin+0xf2>
	{
		if (DT_ValidAddress(&deviceAddress[i * 8]))
 8001098:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	4413      	add	r3, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f866 	bl	8001176 <DT_ValidAddress>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d048      	beq.n	8001142 <DT_Begin+0xe8>
		{

			if (!dt->parasite && DT_ReadPowerSupply(dt, &deviceAddress[i * 8]))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	799b      	ldrb	r3, [r3, #6]
 80010b4:	f083 0301 	eor.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00f      	beq.n	80010de <DT_Begin+0x84>
 80010be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	4413      	add	r3, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f9d9 	bl	8001484 <DT_ReadPowerSupply>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <DT_Begin+0x84>
				dt->parasite = true;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	719a      	strb	r2, [r3, #6]

			dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, &deviceAddress[i * 8]));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7a1c      	ldrb	r4, [r3, #8]
 80010e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	4413      	add	r3, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 faaf 	bl	8001654 <DT_GetResolution>
 80010f6:	4603      	mov	r3, r0
 80010f8:	429c      	cmp	r4, r3
 80010fa:	d902      	bls.n	8001102 <DT_Begin+0xa8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7a1a      	ldrb	r2, [r3, #8]
 8001100:	e00b      	b.n	800111a <DT_Begin+0xc0>
 8001102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	4413      	add	r3, r2
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fa9f 	bl	8001654 <DT_GetResolution>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	721a      	strb	r2, [r3, #8]

			if (DT_ValidFamily(&deviceAddress[i * 8]))
 800111e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	f107 020c 	add.w	r2, r7, #12
 8001128:	4413      	add	r3, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f83a 	bl	80011a4 <DT_ValidFamily>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <DT_Begin+0xe8>
			{
				dt->ds18Count++;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	3301      	adds	r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < dt->devices; i++)
 8001142:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001146:	3301      	adds	r3, #1
 8001148:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001154:	429a      	cmp	r2, r3
 8001156:	d39f      	bcc.n	8001098 <DT_Begin+0x3e>
			}
		}
	}
}
 8001158:	bf00      	nop
 800115a:	374c      	adds	r7, #76	; 0x4c
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <DT_GetDeviceCount>:

// returns the number of devices found on the bus
uint8_t DT_GetDeviceCount(DallasTemperature_HandleTypeDef* dt)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	return dt->devices;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791b      	ldrb	r3, [r3, #4]
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <DT_ValidAddress>:
	return dt->ds18Count;
}

// returns true if address is valid
bool DT_ValidAddress(const uint8_t* deviceAddress)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return (OW_Crc8(deviceAddress, 7) == deviceAddress[7]);
 800117e:	2107      	movs	r1, #7
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fe33 	bl	8001dec <OW_Crc8>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3307      	adds	r3, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <DT_ValidFamily>:

bool DT_ValidFamily(const uint8_t* deviceAddress)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	switch (deviceAddress[DSROM_FAMILY])
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3b10      	subs	r3, #16
 80011b2:	2b32      	cmp	r3, #50	; 0x32
 80011b4:	d86a      	bhi.n	800128c <DT_ValidFamily+0xe8>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <DT_ValidFamily+0x18>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	08001289 	.word	0x08001289
 80011c0:	0800128d 	.word	0x0800128d
 80011c4:	0800128d 	.word	0x0800128d
 80011c8:	0800128d 	.word	0x0800128d
 80011cc:	0800128d 	.word	0x0800128d
 80011d0:	0800128d 	.word	0x0800128d
 80011d4:	0800128d 	.word	0x0800128d
 80011d8:	0800128d 	.word	0x0800128d
 80011dc:	0800128d 	.word	0x0800128d
 80011e0:	0800128d 	.word	0x0800128d
 80011e4:	0800128d 	.word	0x0800128d
 80011e8:	0800128d 	.word	0x0800128d
 80011ec:	0800128d 	.word	0x0800128d
 80011f0:	0800128d 	.word	0x0800128d
 80011f4:	0800128d 	.word	0x0800128d
 80011f8:	0800128d 	.word	0x0800128d
 80011fc:	0800128d 	.word	0x0800128d
 8001200:	0800128d 	.word	0x0800128d
 8001204:	08001289 	.word	0x08001289
 8001208:	0800128d 	.word	0x0800128d
 800120c:	0800128d 	.word	0x0800128d
 8001210:	0800128d 	.word	0x0800128d
 8001214:	0800128d 	.word	0x0800128d
 8001218:	0800128d 	.word	0x0800128d
 800121c:	08001289 	.word	0x08001289
 8001220:	0800128d 	.word	0x0800128d
 8001224:	0800128d 	.word	0x0800128d
 8001228:	0800128d 	.word	0x0800128d
 800122c:	0800128d 	.word	0x0800128d
 8001230:	0800128d 	.word	0x0800128d
 8001234:	0800128d 	.word	0x0800128d
 8001238:	0800128d 	.word	0x0800128d
 800123c:	0800128d 	.word	0x0800128d
 8001240:	0800128d 	.word	0x0800128d
 8001244:	0800128d 	.word	0x0800128d
 8001248:	0800128d 	.word	0x0800128d
 800124c:	0800128d 	.word	0x0800128d
 8001250:	0800128d 	.word	0x0800128d
 8001254:	0800128d 	.word	0x0800128d
 8001258:	0800128d 	.word	0x0800128d
 800125c:	0800128d 	.word	0x0800128d
 8001260:	0800128d 	.word	0x0800128d
 8001264:	0800128d 	.word	0x0800128d
 8001268:	08001289 	.word	0x08001289
 800126c:	0800128d 	.word	0x0800128d
 8001270:	0800128d 	.word	0x0800128d
 8001274:	0800128d 	.word	0x0800128d
 8001278:	0800128d 	.word	0x0800128d
 800127c:	0800128d 	.word	0x0800128d
 8001280:	0800128d 	.word	0x0800128d
 8001284:	08001289 	.word	0x08001289
	case DS18S20MODEL:
	case DS18B20MODEL:
	case DS1822MODEL:
	case DS1825MODEL:
	case DS28EA00MODEL:
		return true;
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <DT_ValidFamily+0xea>
	default:
		return false;
 800128c:	2300      	movs	r3, #0
	}
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <DT_GetAddress>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DT_GetAddress(DallasTemperature_HandleTypeDef* dt, uint8_t* currentDeviceAddress, uint8_t index)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	4613      	mov	r3, r2
 80012a4:	71fb      	strb	r3, [r7, #7]
	AllDeviceAddress deviceAddress;

	uint8_t depth = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	depth = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f107 0114 	add.w	r1, r7, #20
 80012b4:	2207      	movs	r2, #7
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fcbc 	bl	8001c34 <OW_Search>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(index < depth && DT_ValidAddress(&deviceAddress[index * 8]))
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d216      	bcs.n	80012fa <DT_GetAddress+0x62>
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	f107 0214 	add.w	r2, r7, #20
 80012d4:	4413      	add	r3, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff4d 	bl	8001176 <DT_ValidAddress>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <DT_GetAddress+0x62>
	{
		memcpy(currentDeviceAddress, &deviceAddress[index * 8], 8);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	f107 0214 	add.w	r2, r7, #20
 80012ea:	4413      	add	r3, r2
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f003 fb57 	bl	80049a4 <memcpy>
		return true;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <DT_GetAddress+0x64>
	}

	return false;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3750      	adds	r7, #80	; 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <DT_IsConnected_ScratchPad>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DT_IsConnected_ScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	bool b = DT_ReadScratchPad(dt, deviceAddress, scratchPad);
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 f81b 	bl	8001350 <DT_ReadScratchPad>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
	return (b /*&& IsAllZeros(scratchPad, 8)*/ && (OW_Crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]));
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00c      	beq.n	800133e <DT_IsConnected_ScratchPad+0x3a>
 8001324:	2108      	movs	r1, #8
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fd60 	bl	8001dec <OW_Crc8>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3308      	adds	r3, #8
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d101      	bne.n	800133e <DT_IsConnected_ScratchPad+0x3a>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <DT_IsConnected_ScratchPad+0x3c>
 800133e:	2300      	movs	r3, #0
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <DT_ReadScratchPad>:

bool DT_ReadScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af02      	add	r7, sp, #8
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	// send the reset command and fail fast
	int b = OW_Reset(dt->ow);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fb8e 	bl	8001a82 <OW_Reset>
 8001366:	4603      	mov	r3, r0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24

	if (b == 0)
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <DT_ReadScratchPad+0x24>
		return false;
 8001370:	2300      	movs	r3, #0
 8001372:	e027      	b.n	80013c4 <DT_ReadScratchPad+0x74>

	uint8_t query[19]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READSCRATCH, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <DT_ReadScratchPad+0x7c>)
 8001376:	f107 0410 	add.w	r4, r7, #16
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	8022      	strh	r2, [r4, #0]
 8001386:	3402      	adds	r4, #2
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	7023      	strb	r3, [r4, #0]
	memcpy(&query[1], deviceAddress, 8);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	3301      	adds	r3, #1
 8001392:	2208      	movs	r2, #8
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fb04 	bl	80049a4 <memcpy>
	//         DS18B20 & DS1822: store for crc
	// byte 7: DS18S20: COUNT_PER_C
	//         DS18B20 & DS1822: store for crc
	// byte 8: SCRATCHPAD_CRC

	b = OW_Send(dt->ow, query, 19, scratchPad, 9, 10);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	f107 0110 	add.w	r1, r7, #16
 80013a4:	230a      	movs	r3, #10
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2309      	movs	r3, #9
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2213      	movs	r2, #19
 80013b0:	f000 fb9b 	bl	8001aea <OW_Send>
 80013b4:	4603      	mov	r3, r0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24

	return (b == OW_OK);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	080070e0 	.word	0x080070e0

080013d0 <DT_WriteScratchPad>:

void DT_WriteScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, const uint8_t* scratchPad)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	uint8_t query[13]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, WRITESCRATCH, scratchPad[HIGH_ALARM_TEMP], scratchPad[LOW_ALARM_TEMP], scratchPad[CONFIGURATION]};
 80013dc:	2355      	movs	r3, #85	; 0x55
 80013de:	743b      	strb	r3, [r7, #16]
 80013e0:	2300      	movs	r3, #0
 80013e2:	747b      	strb	r3, [r7, #17]
 80013e4:	2300      	movs	r3, #0
 80013e6:	74bb      	strb	r3, [r7, #18]
 80013e8:	2300      	movs	r3, #0
 80013ea:	74fb      	strb	r3, [r7, #19]
 80013ec:	2300      	movs	r3, #0
 80013ee:	753b      	strb	r3, [r7, #20]
 80013f0:	2300      	movs	r3, #0
 80013f2:	757b      	strb	r3, [r7, #21]
 80013f4:	2300      	movs	r3, #0
 80013f6:	75bb      	strb	r3, [r7, #22]
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
 80013fc:	2300      	movs	r3, #0
 80013fe:	763b      	strb	r3, [r7, #24]
 8001400:	234e      	movs	r3, #78	; 0x4e
 8001402:	767b      	strb	r3, [r7, #25]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	789b      	ldrb	r3, [r3, #2]
 8001408:	76bb      	strb	r3, [r7, #26]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	76fb      	strb	r3, [r7, #27]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	773b      	strb	r3, [r7, #28]
	memcpy(&query[1], deviceAddress, 8);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	3301      	adds	r3, #1
 800141c:	2208      	movs	r2, #8
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fabf 	bl	80049a4 <memcpy>

	// DS1820 and DS18S20 have no configuration register
	if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b10      	cmp	r3, #16
 800142c:	d00c      	beq.n	8001448 <DT_WriteScratchPad+0x78>
	{
		OW_Send(dt->ow, query, 13, NULL, 0, OW_NO_READ);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	f107 0110 	add.w	r1, r7, #16
 8001436:	23ff      	movs	r3, #255	; 0xff
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	220d      	movs	r2, #13
 8001442:	f000 fb52 	bl	8001aea <OW_Send>
 8001446:	e00b      	b.n	8001460 <DT_WriteScratchPad+0x90>
	}
	else
	{
		OW_Send(dt->ow, query, 12, NULL, 0, OW_NO_READ);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f107 0110 	add.w	r1, r7, #16
 8001450:	23ff      	movs	r3, #255	; 0xff
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	220c      	movs	r2, #12
 800145c:	f000 fb45 	bl	8001aea <OW_Send>
	}

	if (dt->autoSaveScratchPad)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	7adb      	ldrb	r3, [r3, #11]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <DT_WriteScratchPad+0xa2>
	{
		DT_SaveScratchPad(dt, deviceAddress);
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f97a 	bl	8001764 <DT_SaveScratchPad>
	}
	else
	{
		OW_Reset(dt->ow);
	}
}
 8001470:	e004      	b.n	800147c <DT_WriteScratchPad+0xac>
		OW_Reset(dt->ow);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fb03 	bl	8001a82 <OW_Reset>
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <DT_ReadPowerSupply>:
// returns true if parasite mode is used (2 wire)
// returns false if normal mode is used (3 wire)
// if no address is given (or nullptr) it checks if any device on the bus
// uses parasite mode.
bool DT_ReadPowerSupply(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	uint8_t parasiteMode = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]

	OW_Reset(dt->ow);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 faf3 	bl	8001a82 <OW_Reset>

	uint8_t query[11]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READPOWERSUPPLY, 0xFF};
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <DT_ReadPowerSupply+0xa4>)
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a4:	c303      	stmia	r3!, {r0, r1}
 80014a6:	801a      	strh	r2, [r3, #0]
 80014a8:	3302      	adds	r3, #2
 80014aa:	0c12      	lsrs	r2, r2, #16
 80014ac:	701a      	strb	r2, [r3, #0]

	if (deviceAddress == NULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d112      	bne.n	80014da <DT_ReadPowerSupply+0x56>
	{
	  query[0] = 0xCC;
 80014b4:	23cc      	movs	r3, #204	; 0xcc
 80014b6:	733b      	strb	r3, [r7, #12]
	  query[1] = READPOWERSUPPLY;
 80014b8:	23b4      	movs	r3, #180	; 0xb4
 80014ba:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 3, &parasiteMode, 1, 2);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	f107 0217 	add.w	r2, r7, #23
 80014c4:	f107 010c 	add.w	r1, r7, #12
 80014c8:	2302      	movs	r3, #2
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	2301      	movs	r3, #1
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	2203      	movs	r2, #3
 80014d4:	f000 fb09 	bl	8001aea <OW_Send>
 80014d8:	e017      	b.n	800150a <DT_ReadPowerSupply+0x86>
	}
	else
	{
	  query[0] = 0x55;
 80014da:	2355      	movs	r3, #85	; 0x55
 80014dc:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	3301      	adds	r3, #1
 80014e4:	2208      	movs	r2, #8
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fa5b 	bl	80049a4 <memcpy>
	  OW_Send(dt->ow, query, 10, &parasiteMode, 1, 10);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f107 0217 	add.w	r2, r7, #23
 80014f6:	f107 010c 	add.w	r1, r7, #12
 80014fa:	230a      	movs	r3, #10
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	2301      	movs	r3, #1
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4613      	mov	r3, r2
 8001504:	220a      	movs	r2, #10
 8001506:	f000 faf0 	bl	8001aea <OW_Send>
	}

	OW_Reset(dt->ow);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fab7 	bl	8001a82 <OW_Reset>

	if (parasiteMode == 0)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <DT_ReadPowerSupply+0x9a>
	{
		return true;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <DT_ReadPowerSupply+0x9c>
	}
	else
	{
		return false;
 800151e:	2300      	movs	r3, #0
	}
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	080070f4 	.word	0x080070f4

0800152c <DT_SetResolution>:
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used.
bool DT_SetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t newResolution, bool skipGlobalBitResolutionCalculation)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08b      	sub	sp, #44	; 0x2c
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	460b      	mov	r3, r1
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	4613      	mov	r3, r2
 8001540:	71bb      	strb	r3, [r7, #6]
	// ensure same behavior as setResolution(uint8_t newResolution)
	newResolution = constrain(newResolution, 9, 12);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b08      	cmp	r3, #8
 8001546:	d905      	bls.n	8001554 <DT_SetResolution+0x28>
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	bf28      	it	cs
 800154e:	230c      	movcs	r3, #12
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e000      	b.n	8001556 <DT_SetResolution+0x2a>
 8001554:	2309      	movs	r3, #9
 8001556:	71fb      	strb	r3, [r7, #7]

	// return when stored value == new value
	if (DT_GetResolution(dt, deviceAddress) == newResolution)
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 f87a 	bl	8001654 <DT_GetResolution>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <DT_SetResolution+0x42>
		return true;
 800156a:	2301      	movs	r3, #1
 800156c:	e06e      	b.n	800164c <DT_SetResolution+0x120>

	ScratchPad scratchPad;

	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	461a      	mov	r2, r3
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff fec4 	bl	8001304 <DT_IsConnected_ScratchPad>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d063      	beq.n	800164a <DT_SetResolution+0x11e>
	{
		// DS1820 and DS18S20 have no resolution configuration register
		if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d05d      	beq.n	8001646 <DT_SetResolution+0x11a>
		{
			switch (newResolution)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b0b      	cmp	r3, #11
 800158e:	d007      	beq.n	80015a0 <DT_SetResolution+0x74>
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d002      	beq.n	800159a <DT_SetResolution+0x6e>
 8001594:	2b0a      	cmp	r3, #10
 8001596:	d006      	beq.n	80015a6 <DT_SetResolution+0x7a>
 8001598:	e008      	b.n	80015ac <DT_SetResolution+0x80>
			{
			case 12:
				scratchPad[CONFIGURATION] = TEMP_12_BIT;
 800159a:	237f      	movs	r3, #127	; 0x7f
 800159c:	773b      	strb	r3, [r7, #28]
				break;
 800159e:	e008      	b.n	80015b2 <DT_SetResolution+0x86>
			case 11:
				scratchPad[CONFIGURATION] = TEMP_11_BIT;
 80015a0:	235f      	movs	r3, #95	; 0x5f
 80015a2:	773b      	strb	r3, [r7, #28]
				break;
 80015a4:	e005      	b.n	80015b2 <DT_SetResolution+0x86>
			case 10:
				scratchPad[CONFIGURATION] = TEMP_10_BIT;
 80015a6:	233f      	movs	r3, #63	; 0x3f
 80015a8:	773b      	strb	r3, [r7, #28]
				break;
 80015aa:	e002      	b.n	80015b2 <DT_SetResolution+0x86>
			case 9:
			default:
				scratchPad[CONFIGURATION] = TEMP_9_BIT;
 80015ac:	231f      	movs	r3, #31
 80015ae:	773b      	strb	r3, [r7, #28]
				break;
 80015b0:	bf00      	nop
			}

			DT_WriteScratchPad(dt, deviceAddress, scratchPad);
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	461a      	mov	r2, r3
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff ff08 	bl	80013d0 <DT_WriteScratchPad>

			// without calculation we can always set it to max
			dt->bitResolution = max(dt->bitResolution, newResolution);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	7a1b      	ldrb	r3, [r3, #8]
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	bf38      	it	cc
 80015ca:	4613      	movcc	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	721a      	strb	r2, [r3, #8]

			if (!skipGlobalBitResolutionCalculation && (dt->bitResolution > newResolution))
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	f083 0301 	eor.w	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d033      	beq.n	8001646 <DT_SetResolution+0x11a>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	7a1b      	ldrb	r3, [r3, #8]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d22e      	bcs.n	8001646 <DT_SetResolution+0x11a>
			{
				dt->bitResolution = newResolution;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	721a      	strb	r2, [r3, #8]

				CurrentDeviceAddress deviceAddr;

				for (int i = 0; i < dt->devices; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	e022      	b.n	800163a <DT_SetResolution+0x10e>
				{
					DT_GetAddress(dt, deviceAddr, i);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff fe4a 	bl	8001298 <DT_GetAddress>
					dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, deviceAddr));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7a1c      	ldrb	r4, [r3, #8]
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 f820 	bl	8001654 <DT_GetResolution>
 8001614:	4603      	mov	r3, r0
 8001616:	429c      	cmp	r4, r3
 8001618:	d902      	bls.n	8001620 <DT_SetResolution+0xf4>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	7a1a      	ldrb	r2, [r3, #8]
 800161e:	e007      	b.n	8001630 <DT_SetResolution+0x104>
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f814 	bl	8001654 <DT_GetResolution>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	721a      	strb	r2, [r3, #8]
				for (int i = 0; i < dt->devices; i++)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	3301      	adds	r3, #1
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	461a      	mov	r2, r3
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	4293      	cmp	r3, r2
 8001644:	dbd6      	blt.n	80015f4 <DT_SetResolution+0xc8>
				}
			}
		}
		return true;  // new value set
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <DT_SetResolution+0x120>
	}
	return false;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	372c      	adds	r7, #44	; 0x2c
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <DT_GetResolution>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DT_GetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	// DS1820 and DS18S20 have no resolution configuration register
	if (deviceAddress[0] == DS18S20MODEL)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b10      	cmp	r3, #16
 8001664:	d101      	bne.n	800166a <DT_GetResolution+0x16>
		return 12;
 8001666:	230c      	movs	r3, #12
 8001668:	e01e      	b.n	80016a8 <DT_GetResolution+0x54>

	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	461a      	mov	r2, r3
 8001670:	6839      	ldr	r1, [r7, #0]
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe46 	bl	8001304 <DT_IsConnected_ScratchPad>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d013      	beq.n	80016a6 <DT_GetResolution+0x52>
	{
		switch (scratchPad[CONFIGURATION])
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	2b3f      	cmp	r3, #63	; 0x3f
 8001682:	d00c      	beq.n	800169e <DT_GetResolution+0x4a>
 8001684:	2b3f      	cmp	r3, #63	; 0x3f
 8001686:	dc02      	bgt.n	800168e <DT_GetResolution+0x3a>
 8001688:	2b1f      	cmp	r3, #31
 800168a:	d00a      	beq.n	80016a2 <DT_GetResolution+0x4e>
 800168c:	e00b      	b.n	80016a6 <DT_GetResolution+0x52>
 800168e:	2b5f      	cmp	r3, #95	; 0x5f
 8001690:	d003      	beq.n	800169a <DT_GetResolution+0x46>
 8001692:	2b7f      	cmp	r3, #127	; 0x7f
 8001694:	d107      	bne.n	80016a6 <DT_GetResolution+0x52>
		{
		case TEMP_12_BIT:
			return 12;
 8001696:	230c      	movs	r3, #12
 8001698:	e006      	b.n	80016a8 <DT_GetResolution+0x54>

		case TEMP_11_BIT:
			return 11;
 800169a:	230b      	movs	r3, #11
 800169c:	e004      	b.n	80016a8 <DT_GetResolution+0x54>

		case TEMP_10_BIT:
			return 10;
 800169e:	230a      	movs	r3, #10
 80016a0:	e002      	b.n	80016a8 <DT_GetResolution+0x54>

		case TEMP_9_BIT:
			return 9;
 80016a2:	2309      	movs	r3, #9
 80016a4:	e000      	b.n	80016a8 <DT_GetResolution+0x54>
		}
	}
	return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DT_IsConversionComplete>:
{
	return dt->checkForConversion;
}

bool DT_IsConversionComplete(DallasTemperature_HandleTypeDef* dt)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t b;
	OW_Send(dt->ow, (uint8_t *) OW_READ_SLOT, 0, &b, 1, 0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f107 020f 	add.w	r2, r7, #15
 80016c0:	2300      	movs	r3, #0
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	2200      	movs	r2, #0
 80016cc:	21ff      	movs	r1, #255	; 0xff
 80016ce:	f000 fa0c 	bl	8001aea <OW_Send>

	return (b == 1);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <DT_RequestTemperatures>:

// sends command for all devices on the bus to perform a temperature conversion
void DT_RequestTemperatures(DallasTemperature_HandleTypeDef* dt)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
	OW_Send(dt->ow, (uint8_t *) "\xcc\x44", 2, (uint8_t *) NULL, 0, OW_NO_READ);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	23ff      	movs	r3, #255	; 0xff
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	2300      	movs	r3, #0
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2300      	movs	r3, #0
 80016fe:	2202      	movs	r2, #2
 8001700:	490a      	ldr	r1, [pc, #40]	; (800172c <DT_RequestTemperatures+0x44>)
 8001702:	f000 f9f2 	bl	8001aea <OW_Send>

	// ASYNC mode?
	if (!dt->waitForConversion)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7a5b      	ldrb	r3, [r3, #9]
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d106      	bne.n	8001722 <DT_RequestTemperatures+0x3a>
		return;

	BlockTillConversionComplete(dt, dt->bitResolution);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fc12 	bl	8000f44 <BlockTillConversionComplete>
 8001720:	e000      	b.n	8001724 <DT_RequestTemperatures+0x3c>
		return;
 8001722:	bf00      	nop
}
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	08007100 	.word	0x08007100

08001730 <DT_MillisToWaitForConversion>:
	return DT_RequestTemperaturesByAddress(dt, deviceAddress);
}

// returns number of milliseconds to wait till conversion is complete (based on IC datasheet)
int16_t DT_MillisToWaitForConversion(uint8_t bitResolution)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	switch (bitResolution)
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b0a      	cmp	r3, #10
 800173e:	d005      	beq.n	800174c <DT_MillisToWaitForConversion+0x1c>
 8001740:	2b0b      	cmp	r3, #11
 8001742:	d005      	beq.n	8001750 <DT_MillisToWaitForConversion+0x20>
 8001744:	2b09      	cmp	r3, #9
 8001746:	d106      	bne.n	8001756 <DT_MillisToWaitForConversion+0x26>
	{
	case 9:
		return 94;
 8001748:	235e      	movs	r3, #94	; 0x5e
 800174a:	e006      	b.n	800175a <DT_MillisToWaitForConversion+0x2a>
	case 10:
		return 188;
 800174c:	23bc      	movs	r3, #188	; 0xbc
 800174e:	e004      	b.n	800175a <DT_MillisToWaitForConversion+0x2a>
	case 11:
		return 375;
 8001750:	f240 1377 	movw	r3, #375	; 0x177
 8001754:	e001      	b.n	800175a <DT_MillisToWaitForConversion+0x2a>
	default:
		return 750;
 8001756:	f240 23ee 	movw	r3, #750	; 0x2ee
	}
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <DT_SaveScratchPad>:

// Sends command to one or more devices to save values from scratchpad to EEPROM
// If optional argument deviceAddress is omitted the command is send to all devices
// Returns true if no errors were encountered, false indicates failure
bool DT_SaveScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af02      	add	r7, sp, #8
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	uint8_t query[10]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	811a      	strh	r2, [r3, #8]

	if (OW_Reset(dt->ow) == 0)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f97f 	bl	8001a82 <OW_Reset>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <DT_SaveScratchPad+0x2a>
		return false;
 800178a:	2300      	movs	r3, #0
 800178c:	e04a      	b.n	8001824 <DT_SaveScratchPad+0xc0>

  if (deviceAddress == NULL)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d110      	bne.n	80017b6 <DT_SaveScratchPad+0x52>
  {
	  query[0] = 0xCC;
 8001794:	23cc      	movs	r3, #204	; 0xcc
 8001796:	733b      	strb	r3, [r7, #12]
	  query[1] = COPYSCRATCH;
 8001798:	2348      	movs	r3, #72	; 0x48
 800179a:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 2, NULL, 0, OW_NO_READ);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f107 010c 	add.w	r1, r7, #12
 80017a4:	23ff      	movs	r3, #255	; 0xff
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	2202      	movs	r2, #2
 80017b0:	f000 f99b 	bl	8001aea <OW_Send>
 80017b4:	e017      	b.n	80017e6 <DT_SaveScratchPad+0x82>
  }
  else
  {
	  query[0] = 0x55;
 80017b6:	2355      	movs	r3, #85	; 0x55
 80017b8:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	3301      	adds	r3, #1
 80017c0:	2208      	movs	r2, #8
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 f8ed 	bl	80049a4 <memcpy>
	  query[9] = COPYSCRATCH;
 80017ca:	2348      	movs	r3, #72	; 0x48
 80017cc:	757b      	strb	r3, [r7, #21]
	  OW_Send(dt->ow, query, 10, NULL, 0, OW_NO_READ);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f107 010c 	add.w	r1, r7, #12
 80017d6:	23ff      	movs	r3, #255	; 0xff
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	2300      	movs	r3, #0
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	220a      	movs	r2, #10
 80017e2:	f000 f982 	bl	8001aea <OW_Send>
  }

  // Specification: NV Write Cycle Time is typically 2ms, max 10ms
  // Waiting 20ms to allow for sensors that take longer in practice
  if (!dt->parasite)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	799b      	ldrb	r3, [r3, #6]
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <DT_SaveScratchPad+0x98>
  {
    HAL_Delay(20);
 80017f4:	2014      	movs	r0, #20
 80017f6:	f001 f833 	bl	8002860 <HAL_Delay>
 80017fa:	e008      	b.n	800180e <DT_SaveScratchPad+0xaa>
  }
  else
  {

	ActivateExternalPullup(dt);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fbdf 	bl	8000fc0 <ActivateExternalPullup>
    HAL_Delay(20);
 8001802:	2014      	movs	r0, #20
 8001804:	f001 f82c 	bl	8002860 <HAL_Delay>
    DeactivateExternalPullup(dt);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fbed 	bl	8000fe8 <DeactivateExternalPullup>
  }

  return OW_Reset(dt->ow) == 1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f935 	bl	8001a82 <OW_Reset>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <DT_GetTempCByIndex>:
  return dt->autoSaveScratchPad;
}

// Fetch temperature for device index
float DT_GetTempCByIndex(DallasTemperature_HandleTypeDef* dt, uint8_t deviceIndex)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
	CurrentDeviceAddress deviceAddress;

	if (!DT_GetAddress(dt, deviceAddress, deviceIndex))
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fd29 	bl	8001298 <DT_GetAddress>
 8001846:	4603      	mov	r3, r0
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <DT_GetTempCByIndex+0x2a>
	{
		return DEVICE_DISCONNECTED_C;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <DT_GetTempCByIndex+0x40>)
 8001854:	e006      	b.n	8001864 <DT_GetTempCByIndex+0x38>
	}

	return DT_GetTempC(dt, (uint8_t*) deviceAddress);
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f85b 	bl	8001918 <DT_GetTempC>
 8001862:	4603      	mov	r3, r0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	c2fe0000 	.word	0xc2fe0000

08001870 <DT_CalculateTemperature>:
	return DT_GetTempF(dt, (uint8_t*) deviceAddress);
}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DT_CalculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	02db      	lsls	r3, r3, #11
 8001882:	b21a      	sxth	r2, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	81fb      	strh	r3, [r7, #14]
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b10      	cmp	r3, #16
 8001896:	d11a      	bne.n	80018ce <DT_CalculateTemperature+0x5e>
	{
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 + (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) / scratchPad[COUNT_PER_C]);
 8001898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3307      	adds	r3, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3306      	adds	r3, #6
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	1acb      	subs	r3, r1, r3
 80018b6:	01db      	lsls	r3, r3, #7
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	3107      	adds	r1, #7
 80018bc:	7809      	ldrb	r1, [r1, #0]
 80018be:	fb93 f3f1 	sdiv	r3, r3, r1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b10      	subs	r3, #16
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	81fb      	strh	r3, [r7, #14]
	}

	return fpTemperature;
 80018ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <DT_GetTemp>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DT_GetTemp(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	461a      	mov	r2, r3
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fd08 	bl	8001304 <DT_IsConnected_ScratchPad>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <DT_GetTemp+0x2e>
		return DT_CalculateTemperature(deviceAddress, scratchPad);
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	6838      	ldr	r0, [r7, #0]
 8001902:	f7ff ffb5 	bl	8001870 <DT_CalculateTemperature>
 8001906:	4603      	mov	r3, r0
 8001908:	e000      	b.n	800190c <DT_GetTemp+0x30>
	return DEVICE_DISCONNECTED_RAW;
 800190a:	4b02      	ldr	r3, [pc, #8]	; (8001914 <DT_GetTemp+0x38>)
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	ffffe480 	.word	0xffffe480

08001918 <DT_GetTempC>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DT_GetTempC(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	return DT_RawToCelsius(DT_GetTemp(dt, deviceAddress));
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffd9 	bl	80018dc <DT_GetTemp>
 800192a:	4603      	mov	r3, r0
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f805 	bl	800193c <DT_RawToCelsius>
 8001932:	4603      	mov	r3, r0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <DT_RawToCelsius>:
	return (fahrenheit - 32) * 0.555555556;
}

// convert from raw to Celsius
float DT_RawToCelsius(int16_t raw)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
	if (raw <= DEVICE_DISCONNECTED_RAW)
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	f513 5fdc 	cmn.w	r3, #7040	; 0x1b80
 800194e:	dc01      	bgt.n	8001954 <DT_RawToCelsius+0x18>
		return DEVICE_DISCONNECTED_C;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <DT_RawToCelsius+0x38>)
 8001952:	e00b      	b.n	800196c <DT_RawToCelsius+0x30>
	// C = RAW/128
	return (float) raw * 0.0078125;
 8001954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f94f 	bl	8000bfc <__aeabi_i2f>
 800195e:	4603      	mov	r3, r0
 8001960:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f99d 	bl	8000ca4 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	c2fe0000 	.word	0xc2fe0000

08001978 <OW_UART_Init>:
#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t num_bits);
#endif

static HAL_StatusTypeDef OW_UART_Init(OneWire_HandleTypeDef* ow, uint32_t baudRate)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	UART_HandleTypeDef* HUARTx = ow->huart;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
//	GPIO_InitStruct.Pin = GPIO_PIN_10;
//	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HUARTx->Init.BaudRate = baudRate;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	605a      	str	r2, [r3, #4]
    HUARTx->Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    HUARTx->Init.StopBits = UART_STOPBITS_1;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    HUARTx->Init.Parity = UART_PARITY_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
    HUARTx->Init.Mode = UART_MODE_TX_RX;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
    HUARTx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
    HUARTx->Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
	return HAL_HalfDuplex_Init(HUARTx);
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f002 fac2 	bl	8003f3c <HAL_HalfDuplex_Init>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <OW_ToBits>:

static void OW_ToBits(uint8_t owByte, uint8_t *owBits)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	6039      	str	r1, [r7, #0]
 80019cc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e014      	b.n	80019fe <OW_ToBits+0x3c>
	{
		if (owByte & 0x01)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <OW_ToBits+0x24>
		{
			*owBits = OW_1;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	22ff      	movs	r2, #255	; 0xff
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e002      	b.n	80019ec <OW_ToBits+0x2a>
		}
		else
		{
			*owBits = OW_0;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
		}
		owBits++;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	603b      	str	r3, [r7, #0]
		owByte = owByte >> 1;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	d9e7      	bls.n	80019d4 <OW_ToBits+0x12>
	}
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <OW_ToByte>:

static uint8_t OW_ToByte(uint8_t *owBits)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	uint8_t owByte, i;
	owByte = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73bb      	strb	r3, [r7, #14]
 8001a1e:	e010      	b.n	8001a42 <OW_ToByte+0x34>
	{
		owByte = owByte >> 1;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
		if (*owBits == OW_R_1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d103      	bne.n	8001a36 <OW_ToByte+0x28>
		{
			owByte |= 0x80;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a34:	73fb      	strb	r3, [r7, #15]
		}
		owBits++;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	73bb      	strb	r3, [r7, #14]
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	d9eb      	bls.n	8001a20 <OW_ToByte+0x12>
	}

	return owByte;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <OW_Begin>:
{
	return OW_Begin(ow, huart);
}

HAL_StatusTypeDef OW_Begin(OneWire_HandleTypeDef* ow, UART_HandleTypeDef* huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	ow->huart = huart;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status = OW_UART_Init(ow, 9600);
 8001a64:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff85 	bl	8001978 <OW_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
#if ONEWIRE_SEARCH
	OW_ResetSearch(ow);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8bb 	bl	8001bee <OW_ResetSearch>
#endif
	return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <OW_Reset>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OW_Reset(OneWire_HandleTypeDef* ow)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	uint8_t owPresence = 0xf0;
 8001a8a:	23f0      	movs	r3, #240	; 0xf0
 8001a8c:	73fb      	strb	r3, [r7, #15]

	OW_UART_Init(ow, 9600);
 8001a8e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff70 	bl	8001978 <OW_UART_Init>

	HAL_UART_Receive_DMA(ow->huart, &owPresence, 1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f107 010f 	add.w	r1, r7, #15
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fb0c 	bl	80040c0 <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(ow->huart, &owPresence, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(ow->huart, &owPresence, 1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f107 010f 	add.w	r1, r7, #15
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fa98 	bl	8003fe8 <HAL_UART_Transmit_DMA>

	/*## Wait for the end of the transfer ###################################*/
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001ab8:	e000      	b.n	8001abc <OW_Reset+0x3a>
	{
		__NOP();
 8001aba:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fcaa 	bl	800441a <HAL_UART_GetState>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d1f6      	bne.n	8001aba <OW_Reset+0x38>
	}

	OW_UART_Init(ow, 115200);
 8001acc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff51 	bl	8001978 <OW_UART_Init>

	if (owPresence != 0xf0)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2bf0      	cmp	r3, #240	; 0xf0
 8001ada:	d001      	beq.n	8001ae0 <OW_Reset+0x5e>
	{
		return OW_OK;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <OW_Reset+0x60>
	}

	return OW_NO_DEVICE;
 8001ae0:	2303      	movs	r3, #3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <OW_Send>:
// dLen - the length of the read buffer. Read no more than this length
// readStart - which transmission character to start reading from (numbered from 0)
// you can specify OW_NO_READ, then you don't need to specify data and dLen
//-----------------------------------------------------------------------------
uint8_t OW_Send(OneWire_HandleTypeDef* ow, uint8_t *command, uint8_t cLen, uint8_t *data, uint8_t dLen, uint8_t readStart)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
	if (OW_Reset(ow) == OW_NO_DEVICE)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff ffc1 	bl	8001a82 <OW_Reset>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d145      	bne.n	8001b92 <OW_Send+0xa8>
	{
		return OW_NO_DEVICE;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e047      	b.n	8001b9a <OW_Send+0xb0>
	}

	while (cLen > 0)
	{

		OW_ToBits(*command, ow->ROM_NO);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3304      	adds	r3, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7ff ff54 	bl	80019c2 <OW_ToBits>
		command++;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
		cLen--;
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2208      	movs	r2, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	f002 fac5 	bl	80040c0 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2208      	movs	r2, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	f002 fa51 	bl	8003fe8 <HAL_UART_Transmit_DMA>

		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001b46:	e000      	b.n	8001b4a <OW_Send+0x60>
		{
			__NOP();
 8001b48:	bf00      	nop
		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fc63 	bl	800441a <HAL_UART_GetState>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d1f6      	bne.n	8001b48 <OW_Send+0x5e>
		}

		if (readStart == 0 && dLen > 0)
 8001b5a:	7f3b      	ldrb	r3, [r7, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d112      	bne.n	8001b86 <OW_Send+0x9c>
 8001b60:	7e3b      	ldrb	r3, [r7, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00f      	beq.n	8001b86 <OW_Send+0x9c>
		{
			*data = OW_ToByte(ow->ROM_NO);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff4f 	bl	8001a0e <OW_ToByte>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	701a      	strb	r2, [r3, #0]
			data++;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	603b      	str	r3, [r7, #0]
			dLen--;
 8001b7e:	7e3b      	ldrb	r3, [r7, #24]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	763b      	strb	r3, [r7, #24]
 8001b84:	e005      	b.n	8001b92 <OW_Send+0xa8>
		}
		else
		{
			if (readStart != OW_NO_READ)
 8001b86:	7f3b      	ldrb	r3, [r7, #28]
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	d002      	beq.n	8001b92 <OW_Send+0xa8>
			{
				readStart--;
 8001b8c:	7f3b      	ldrb	r3, [r7, #28]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	773b      	strb	r3, [r7, #28]
	while (cLen > 0)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1b8      	bne.n	8001b0a <OW_Send+0x20>
			}
		}
	}

	return OW_OK;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <OW_SendBits>:

#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t numBits)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, numBits);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f002 fa80 	bl	80040c0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, numBits);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f002 fa0b 	bl	8003fe8 <HAL_UART_Transmit_DMA>

	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001bd2:	e000      	b.n	8001bd6 <OW_SendBits+0x34>
	{
		__NOP();
 8001bd4:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fc1d 	bl	800441a <HAL_UART_GetState>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d1f6      	bne.n	8001bd4 <OW_SendBits+0x32>
	}
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <OW_ResetSearch>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OW_ResetSearch(OneWire_HandleTypeDef* ow)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  // reset the search state
  ow->LastDiscrepancy = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	731a      	strb	r2, [r3, #12]
  ow->LastDeviceFlag = false;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	739a      	strb	r2, [r3, #14]
  ow->LastFamilyDiscrepancy = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	735a      	strb	r2, [r3, #13]
  for(int i = 7; ; i--)
 8001c08:	2307      	movs	r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]
  {
    ow->ROM_NO[i] = 0;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    if ( i == 0) break;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <OW_ResetSearch+0x38>
  for(int i = 7; ; i--)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
    ow->ROM_NO[i] = 0;
 8001c24:	e7f2      	b.n	8001c0c <OW_ResetSearch+0x1e>
    if ( i == 0) break;
 8001c26:	bf00      	nop
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
	...

08001c34 <OW_Search>:
   ow->LastFamilyDiscrepancy = 0;
   ow->LastDeviceFlag = false;
}

uint8_t OW_Search(OneWire_HandleTypeDef* ow, uint8_t *buf, uint8_t num)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	71fb      	strb	r3, [r7, #7]

	uint8_t found = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	77fb      	strb	r3, [r7, #31]
	uint8_t *lastDevice = NULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
	uint8_t *curDevice = buf;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	617b      	str	r3, [r7, #20]
	uint8_t numBit, lastCollision, currentCollision, currentSelection;

	lastCollision = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	74bb      	strb	r3, [r7, #18]

	while (found < num)
 8001c52:	e0bf      	b.n	8001dd4 <OW_Search+0x1a0>
	{
		numBit = 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	74fb      	strb	r3, [r7, #19]
		currentCollision = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	747b      	strb	r3, [r7, #17]

		OW_Send(ow, (uint8_t*)"\xf0", 1, NULL, 0, OW_NO_READ);
 8001c5c:	23ff      	movs	r3, #255	; 0xff
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2201      	movs	r2, #1
 8001c68:	495f      	ldr	r1, [pc, #380]	; (8001de8 <OW_Search+0x1b4>)
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff ff3d 	bl	8001aea <OW_Send>

		for (numBit = 1; numBit <= 64; numBit++)
 8001c70:	2301      	movs	r3, #1
 8001c72:	74fb      	strb	r3, [r7, #19]
 8001c74:	e09b      	b.n	8001dae <OW_Search+0x17a>
		{
			OW_ToBits(OW_READ_SLOT, ow->ROM_NO);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	20ff      	movs	r0, #255	; 0xff
 8001c7e:	f7ff fea0 	bl	80019c2 <OW_ToBits>
			OW_SendBits(ow, 2);
 8001c82:	2102      	movs	r1, #2
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff ff8c 	bl	8001ba2 <OW_SendBits>

			if (ow->ROM_NO[0] == OW_R_1)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d108      	bne.n	8001ca4 <OW_Search+0x70>
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	2bff      	cmp	r3, #255	; 0xff
 8001c98:	d101      	bne.n	8001c9e <OW_Search+0x6a>
				{
					return found;
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	e0a0      	b.n	8001de0 <OW_Search+0x1ac>
				}
				else
				{
					currentSelection = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	743b      	strb	r3, [r7, #16]
 8001ca2:	e037      	b.n	8001d14 <OW_Search+0xe0>
				}
			}
			else
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	795b      	ldrb	r3, [r3, #5]
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d102      	bne.n	8001cb2 <OW_Search+0x7e>
				{
					currentSelection = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	743b      	strb	r3, [r7, #16]
 8001cb0:	e030      	b.n	8001d14 <OW_Search+0xe0>
				}
				else
				{
					if (numBit < lastCollision)
 8001cb2:	7cfa      	ldrb	r2, [r7, #19]
 8001cb4:	7cbb      	ldrb	r3, [r7, #18]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d21d      	bcs.n	8001cf6 <OW_Search+0xc2>
					{
							if (lastDevice[(numBit - 1) >> 3] & 1 << ((numBit - 1) & 0x07))
 8001cba:	7cfb      	ldrb	r3, [r7, #19]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	10db      	asrs	r3, r3, #3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	fa42 f303 	asr.w	r3, r2, r3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <OW_Search+0xbc>
							{
							currentSelection = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	743b      	strb	r3, [r7, #16]

								if (currentCollision < numBit)
 8001ce2:	7c7a      	ldrb	r2, [r7, #17]
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d214      	bcs.n	8001d14 <OW_Search+0xe0>
								{
										currentCollision = numBit;
 8001cea:	7cfb      	ldrb	r3, [r7, #19]
 8001cec:	747b      	strb	r3, [r7, #17]
 8001cee:	e011      	b.n	8001d14 <OW_Search+0xe0>
								}
							}
							else
							{
								currentSelection = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	743b      	strb	r3, [r7, #16]
 8001cf4:	e00e      	b.n	8001d14 <OW_Search+0xe0>
							}
					}
					else
					{
						if (numBit == lastCollision)
 8001cf6:	7cfa      	ldrb	r2, [r7, #19]
 8001cf8:	7cbb      	ldrb	r3, [r7, #18]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d102      	bne.n	8001d04 <OW_Search+0xd0>
						{
								currentSelection = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	743b      	strb	r3, [r7, #16]
 8001d02:	e007      	b.n	8001d14 <OW_Search+0xe0>
						}
						else
						{
							currentSelection = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	743b      	strb	r3, [r7, #16]

							if (currentCollision < numBit)
 8001d08:	7c7a      	ldrb	r2, [r7, #17]
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d201      	bcs.n	8001d14 <OW_Search+0xe0>
							{
									currentCollision = numBit;
 8001d10:	7cfb      	ldrb	r3, [r7, #19]
 8001d12:	747b      	strb	r3, [r7, #17]
						}
					}
				}
			}

			if (currentSelection == 1)
 8001d14:	7c3b      	ldrb	r3, [r7, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d120      	bne.n	8001d5c <OW_Search+0x128>
			{
				curDevice[(numBit - 1) >> 3] |= 1 << ((numBit - 1) & 0x07);
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	10db      	asrs	r3, r3, #3
 8001d20:	461a      	mov	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b25a      	sxtb	r2, r3
 8001d3e:	7cfb      	ldrb	r3, [r7, #19]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	10db      	asrs	r3, r3, #3
 8001d44:	4619      	mov	r1, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	440b      	add	r3, r1
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x01, ow->ROM_NO);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7ff fe34 	bl	80019c2 <OW_ToBits>
 8001d5a:	e021      	b.n	8001da0 <OW_Search+0x16c>
			}
			else
			{
				curDevice[(numBit - 1) >> 3] &= ~(1 << ((numBit - 1) & 0x07));
 8001d5c:	7cfb      	ldrb	r3, [r7, #19]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	10db      	asrs	r3, r3, #3
 8001d62:	461a      	mov	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	10db      	asrs	r3, r3, #3
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	440b      	add	r3, r1
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x00, ow->ROM_NO);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fe11 	bl	80019c2 <OW_ToBits>
			}

			OW_SendBits(ow, 1);
 8001da0:	2101      	movs	r1, #1
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fefd 	bl	8001ba2 <OW_SendBits>
		for (numBit = 1; numBit <= 64; numBit++)
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	3301      	adds	r3, #1
 8001dac:	74fb      	strb	r3, [r7, #19]
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	f67f af60 	bls.w	8001c76 <OW_Search+0x42>
		}

		found++;
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	3301      	adds	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
		lastDevice = curDevice;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	61bb      	str	r3, [r7, #24]
		curDevice += 8;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	617b      	str	r3, [r7, #20]
		if (currentCollision == 0)
 8001dc6:	7c7b      	ldrb	r3, [r7, #17]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <OW_Search+0x19c>
		{
			return found;
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	e007      	b.n	8001de0 <OW_Search+0x1ac>
		}

		lastCollision = currentCollision;
 8001dd0:	7c7b      	ldrb	r3, [r7, #17]
 8001dd2:	74bb      	strb	r3, [r7, #18]
	while (found < num)
 8001dd4:	7ffa      	ldrb	r2, [r7, #31]
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f4ff af3b 	bcc.w	8001c54 <OW_Search+0x20>
	}

        return found;
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	08007110 	.word	0x08007110

08001dec <OW_Crc8>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OW_Crc8(const uint8_t *addr, uint8_t len)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

	while (len--)
 8001dfc:	e015      	b.n	8001e2a <OW_Crc8+0x3e>
	{
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	4053      	eors	r3, r2
 8001e0a:	73fb      	strb	r3, [r7, #15]
		crc = dscrc2x16_table[crc & 0x0f] ^ dscrc2x16_table[16 + ((crc >> 4) & 0x0f)];
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <OW_Crc8+0x54>)
 8001e14:	5cd2      	ldrb	r2, [r2, r3]
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	3310      	adds	r3, #16
 8001e22:	4907      	ldr	r1, [pc, #28]	; (8001e40 <OW_Crc8+0x54>)
 8001e24:	5ccb      	ldrb	r3, [r1, r3]
 8001e26:	4053      	eors	r3, r2
 8001e28:	73fb      	strb	r3, [r7, #15]
	while (len--)
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	70fa      	strb	r2, [r7, #3]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e4      	bne.n	8001dfe <OW_Crc8+0x12>
	}

	return crc;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	08007488 	.word	0x08007488

08001e44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001e64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e6c:	e000      	b.n	8001e70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f9      	beq.n	8001e6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf-------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e009      	b.n	8001eb6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ffca 	bl	8001e44 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dbf1      	blt.n	8001ea2 <_write+0x12>
	}
	return len;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <printAddress>:
/*-----------------------------End prinf--------------------------------------*/
// function to print a device address
void printAddress(CurrentDeviceAddress deviceAddress) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 6; i++) {  // Указал количество датчиков 7шт.
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e00d      	b.n	8001ef2 <printAddress+0x2a>
		printf("0x%02X ", deviceAddress[i]);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <printAddress+0x38>)
 8001ee2:	f003 f9c1 	bl	8005268 <iprintf>
		HAL_Delay(50); //Сделал паузу.
 8001ee6:	2032      	movs	r0, #50	; 0x32
 8001ee8:	f000 fcba 	bl	8002860 <HAL_Delay>
	for (uint8_t i = 0; i < 6; i++) {  // Указал количество датчиков 7шт.
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d9ee      	bls.n	8001ed6 <printAddress+0xe>
	}
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	08007114 	.word	0x08007114

08001f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0a:	f000 fc77 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0e:	f000 f975 	bl	80021fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f12:	f000 fa09 	bl	8002328 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f16:	f000 f9e1 	bl	80022dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f1a:	f000 f9b5 	bl	8002288 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("[%8lu] Debug UART1 is OK!\r\n", HAL_GetTick());
 8001f1e:	f000 fc95 	bl	800284c <HAL_GetTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	489d      	ldr	r0, [pc, #628]	; (800219c <main+0x298>)
 8001f28:	f003 f99e 	bl	8005268 <iprintf>

    OW_Begin(&ow, &huart1);
 8001f2c:	499c      	ldr	r1, [pc, #624]	; (80021a0 <main+0x29c>)
 8001f2e:	489d      	ldr	r0, [pc, #628]	; (80021a4 <main+0x2a0>)
 8001f30:	f7ff fd90 	bl	8001a54 <OW_Begin>

    if(OW_Reset(&ow) == OW_OK)
 8001f34:	489b      	ldr	r0, [pc, #620]	; (80021a4 <main+0x2a0>)
 8001f36:	f7ff fda4 	bl	8001a82 <OW_Reset>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <main+0x4c>
    {
  	  printf("[%8lu] OneWire devices are present :)\r\n", HAL_GetTick());
 8001f40:	f000 fc84 	bl	800284c <HAL_GetTick>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4897      	ldr	r0, [pc, #604]	; (80021a8 <main+0x2a4>)
 8001f4a:	f003 f98d 	bl	8005268 <iprintf>
 8001f4e:	e006      	b.n	8001f5e <main+0x5a>
    }
    else
    {
  	  printf("[%8lu] OneWire no devices :(\r\n", HAL_GetTick());
 8001f50:	f000 fc7c 	bl	800284c <HAL_GetTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4894      	ldr	r0, [pc, #592]	; (80021ac <main+0x2a8>)
 8001f5a:	f003 f985 	bl	8005268 <iprintf>
    }

    DT_SetOneWire(&dt, &ow);
 8001f5e:	4991      	ldr	r1, [pc, #580]	; (80021a4 <main+0x2a0>)
 8001f60:	4893      	ldr	r0, [pc, #588]	; (80021b0 <main+0x2ac>)
 8001f62:	f7ff f855 	bl	8001010 <DT_SetOneWire>

    // arrays to hold device address
    CurrentDeviceAddress insideThermometer;

    // locate devices on the bus
    printf("[%8lu] Locating devices...", HAL_GetTick());
 8001f66:	f000 fc71 	bl	800284c <HAL_GetTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4891      	ldr	r0, [pc, #580]	; (80021b4 <main+0x2b0>)
 8001f70:	f003 f97a 	bl	8005268 <iprintf>

    DT_Begin(&dt);
 8001f74:	488e      	ldr	r0, [pc, #568]	; (80021b0 <main+0x2ac>)
 8001f76:	f7ff f870 	bl	800105a <DT_Begin>

    printf("[%8lu] Found %d devices.\r\n", HAL_GetTick(), DT_GetDeviceCount(&dt));
 8001f7a:	f000 fc67 	bl	800284c <HAL_GetTick>
 8001f7e:	4604      	mov	r4, r0
 8001f80:	488b      	ldr	r0, [pc, #556]	; (80021b0 <main+0x2ac>)
 8001f82:	f7ff f8ed 	bl	8001160 <DT_GetDeviceCount>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	488a      	ldr	r0, [pc, #552]	; (80021b8 <main+0x2b4>)
 8001f8e:	f003 f96b 	bl	8005268 <iprintf>

    if (!DT_GetAddress(&dt, insideThermometer, 0))
 8001f92:	463b      	mov	r3, r7
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	4885      	ldr	r0, [pc, #532]	; (80021b0 <main+0x2ac>)
 8001f9a:	f7ff f97d 	bl	8001298 <DT_GetAddress>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f083 0301 	eor.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <main+0xb4>
  	  printf("[%8lu] Unable to find address for Device 0\r\n", HAL_GetTick());
 8001faa:	f000 fc4f 	bl	800284c <HAL_GetTick>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4882      	ldr	r0, [pc, #520]	; (80021bc <main+0x2b8>)
 8001fb4:	f003 f958 	bl	8005268 <iprintf>

    printf("[%8lu] Device 0 Address: ", HAL_GetTick());
 8001fb8:	f000 fc48 	bl	800284c <HAL_GetTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	487f      	ldr	r0, [pc, #508]	; (80021c0 <main+0x2bc>)
 8001fc2:	f003 f951 	bl	8005268 <iprintf>
    printAddress(insideThermometer);
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff7d 	bl	8001ec8 <printAddress>
    printf("\r\n");
 8001fce:	487d      	ldr	r0, [pc, #500]	; (80021c4 <main+0x2c0>)
 8001fd0:	f003 f9be 	bl	8005350 <puts>

    // set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
    DT_SetResolution(&dt, insideThermometer, 12, true);
 8001fd4:	4639      	mov	r1, r7
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4875      	ldr	r0, [pc, #468]	; (80021b0 <main+0x2ac>)
 8001fdc:	f7ff faa6 	bl	800152c <DT_SetResolution>

    printf("[%8lu] Device 0 Resolution: %d\r\n", HAL_GetTick(), DT_GetResolution(&dt, insideThermometer));
 8001fe0:	f000 fc34 	bl	800284c <HAL_GetTick>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4871      	ldr	r0, [pc, #452]	; (80021b0 <main+0x2ac>)
 8001fec:	f7ff fb32 	bl	8001654 <DT_GetResolution>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	4874      	ldr	r0, [pc, #464]	; (80021c8 <main+0x2c4>)
 8001ff8:	f003 f936 	bl	8005268 <iprintf>

    if (!DT_GetAddress(&dt, insideThermometer, 1))
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2201      	movs	r2, #1
 8002000:	4619      	mov	r1, r3
 8002002:	486b      	ldr	r0, [pc, #428]	; (80021b0 <main+0x2ac>)
 8002004:	f7ff f948 	bl	8001298 <DT_GetAddress>
 8002008:	4603      	mov	r3, r0
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <main+0x11e>
  	  printf("[%8lu] Unable to find address for Device 1\r\n", HAL_GetTick());
 8002014:	f000 fc1a 	bl	800284c <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
 800201a:	4619      	mov	r1, r3
 800201c:	486b      	ldr	r0, [pc, #428]	; (80021cc <main+0x2c8>)
 800201e:	f003 f923 	bl	8005268 <iprintf>

    printf("[%8lu] Device 1 Address: ", HAL_GetTick());
 8002022:	f000 fc13 	bl	800284c <HAL_GetTick>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	4869      	ldr	r0, [pc, #420]	; (80021d0 <main+0x2cc>)
 800202c:	f003 f91c 	bl	8005268 <iprintf>
    printAddress(insideThermometer);
 8002030:	463b      	mov	r3, r7
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff48 	bl	8001ec8 <printAddress>
    printf("\r\n");
 8002038:	4862      	ldr	r0, [pc, #392]	; (80021c4 <main+0x2c0>)
 800203a:	f003 f989 	bl	8005350 <puts>

    // set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
    DT_SetResolution(&dt, insideThermometer, 12, true);
 800203e:	4639      	mov	r1, r7
 8002040:	2301      	movs	r3, #1
 8002042:	220c      	movs	r2, #12
 8002044:	485a      	ldr	r0, [pc, #360]	; (80021b0 <main+0x2ac>)
 8002046:	f7ff fa71 	bl	800152c <DT_SetResolution>

    printf("[%8lu] Device 1 Resolution: %d\r\n", HAL_GetTick(), DT_GetResolution(&dt, insideThermometer));
 800204a:	f000 fbff 	bl	800284c <HAL_GetTick>
 800204e:	4604      	mov	r4, r0
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4856      	ldr	r0, [pc, #344]	; (80021b0 <main+0x2ac>)
 8002056:	f7ff fafd 	bl	8001654 <DT_GetResolution>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4621      	mov	r1, r4
 8002060:	485c      	ldr	r0, [pc, #368]	; (80021d4 <main+0x2d0>)
 8002062:	f003 f901 	bl	8005268 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// call DT_RequestTemperatures(&dt) to issue a global temperature
			// request to all devices on the bus
			printf("[%8lu] Requesting temperatures...", HAL_GetTick());
 8002066:	f000 fbf1 	bl	800284c <HAL_GetTick>
 800206a:	4603      	mov	r3, r0
 800206c:	4619      	mov	r1, r3
 800206e:	485a      	ldr	r0, [pc, #360]	; (80021d8 <main+0x2d4>)
 8002070:	f003 f8fa 	bl	8005268 <iprintf>
			DT_RequestTemperatures(&dt); // Send the command to get temperatures
 8002074:	484e      	ldr	r0, [pc, #312]	; (80021b0 <main+0x2ac>)
 8002076:	f7ff fb37 	bl	80016e8 <DT_RequestTemperatures>
			printf("\r\n[%8lu] DONE\r\n", HAL_GetTick());
 800207a:	f000 fbe7 	bl	800284c <HAL_GetTick>
 800207e:	4603      	mov	r3, r0
 8002080:	4619      	mov	r1, r3
 8002082:	4856      	ldr	r0, [pc, #344]	; (80021dc <main+0x2d8>)
 8002084:	f003 f8f0 	bl	8005268 <iprintf>
			// After we got the temperatures, we can print them here.
			// We use the function ByIndex, and as an example get the temperature from the first sensor only.
			printf("[%8lu] Temperature for the device 1 (index 0) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 0));
 8002088:	f000 fbe0 	bl	800284c <HAL_GetTick>
 800208c:	4605      	mov	r5, r0
 800208e:	2100      	movs	r1, #0
 8002090:	4847      	ldr	r0, [pc, #284]	; (80021b0 <main+0x2ac>)
 8002092:	f7ff fbcb 	bl	800182c <DT_GetTempCByIndex>
 8002096:	4603      	mov	r3, r0
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f9c5 	bl	8000428 <__aeabi_f2d>
 800209e:	4603      	mov	r3, r0
 80020a0:	460c      	mov	r4, r1
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	484d      	ldr	r0, [pc, #308]	; (80021e0 <main+0x2dc>)
 80020aa:	f003 f8dd 	bl	8005268 <iprintf>
			printf("[%8lu] Temperature for the device 2 (index 1) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 1));
 80020ae:	f000 fbcd 	bl	800284c <HAL_GetTick>
 80020b2:	4605      	mov	r5, r0
 80020b4:	2101      	movs	r1, #1
 80020b6:	483e      	ldr	r0, [pc, #248]	; (80021b0 <main+0x2ac>)
 80020b8:	f7ff fbb8 	bl	800182c <DT_GetTempCByIndex>
 80020bc:	4603      	mov	r3, r0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9b2 	bl	8000428 <__aeabi_f2d>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	4845      	ldr	r0, [pc, #276]	; (80021e4 <main+0x2e0>)
 80020d0:	f003 f8ca 	bl	8005268 <iprintf>
			printf("[%8lu] Temperature for the device 3 (index 2) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 2));
 80020d4:	f000 fbba 	bl	800284c <HAL_GetTick>
 80020d8:	4605      	mov	r5, r0
 80020da:	2102      	movs	r1, #2
 80020dc:	4834      	ldr	r0, [pc, #208]	; (80021b0 <main+0x2ac>)
 80020de:	f7ff fba5 	bl	800182c <DT_GetTempCByIndex>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f99f 	bl	8000428 <__aeabi_f2d>
 80020ea:	4603      	mov	r3, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	461a      	mov	r2, r3
 80020f0:	4623      	mov	r3, r4
 80020f2:	4629      	mov	r1, r5
 80020f4:	483c      	ldr	r0, [pc, #240]	; (80021e8 <main+0x2e4>)
 80020f6:	f003 f8b7 	bl	8005268 <iprintf>
			printf("[%8lu] Temperature for the device 4 (index 3) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 3));
 80020fa:	f000 fba7 	bl	800284c <HAL_GetTick>
 80020fe:	4605      	mov	r5, r0
 8002100:	2103      	movs	r1, #3
 8002102:	482b      	ldr	r0, [pc, #172]	; (80021b0 <main+0x2ac>)
 8002104:	f7ff fb92 	bl	800182c <DT_GetTempCByIndex>
 8002108:	4603      	mov	r3, r0
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe f98c 	bl	8000428 <__aeabi_f2d>
 8002110:	4603      	mov	r3, r0
 8002112:	460c      	mov	r4, r1
 8002114:	461a      	mov	r2, r3
 8002116:	4623      	mov	r3, r4
 8002118:	4629      	mov	r1, r5
 800211a:	4834      	ldr	r0, [pc, #208]	; (80021ec <main+0x2e8>)
 800211c:	f003 f8a4 	bl	8005268 <iprintf>
			printf("[%8lu] Temperature for the device 5 (index 4) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 4));
 8002120:	f000 fb94 	bl	800284c <HAL_GetTick>
 8002124:	4605      	mov	r5, r0
 8002126:	2104      	movs	r1, #4
 8002128:	4821      	ldr	r0, [pc, #132]	; (80021b0 <main+0x2ac>)
 800212a:	f7ff fb7f 	bl	800182c <DT_GetTempCByIndex>
 800212e:	4603      	mov	r3, r0
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe f979 	bl	8000428 <__aeabi_f2d>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	461a      	mov	r2, r3
 800213c:	4623      	mov	r3, r4
 800213e:	4629      	mov	r1, r5
 8002140:	482b      	ldr	r0, [pc, #172]	; (80021f0 <main+0x2ec>)
 8002142:	f003 f891 	bl	8005268 <iprintf>
			printf("[%8lu] Temperature for the device 6 (index 5) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 5));
 8002146:	f000 fb81 	bl	800284c <HAL_GetTick>
 800214a:	4605      	mov	r5, r0
 800214c:	2105      	movs	r1, #5
 800214e:	4818      	ldr	r0, [pc, #96]	; (80021b0 <main+0x2ac>)
 8002150:	f7ff fb6c 	bl	800182c <DT_GetTempCByIndex>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f966 	bl	8000428 <__aeabi_f2d>
 800215c:	4603      	mov	r3, r0
 800215e:	460c      	mov	r4, r1
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	4629      	mov	r1, r5
 8002166:	4823      	ldr	r0, [pc, #140]	; (80021f4 <main+0x2f0>)
 8002168:	f003 f87e 	bl	8005268 <iprintf>
			printf("[%8lu] Temperature for the device 7 (index 6) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 6));
 800216c:	f000 fb6e 	bl	800284c <HAL_GetTick>
 8002170:	4605      	mov	r5, r0
 8002172:	2106      	movs	r1, #6
 8002174:	480e      	ldr	r0, [pc, #56]	; (80021b0 <main+0x2ac>)
 8002176:	f7ff fb59 	bl	800182c <DT_GetTempCByIndex>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f953 	bl	8000428 <__aeabi_f2d>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	4629      	mov	r1, r5
 800218c:	481a      	ldr	r0, [pc, #104]	; (80021f8 <main+0x2f4>)
 800218e:	f003 f86b 	bl	8005268 <iprintf>
			HAL_Delay(2000);
 8002192:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002196:	f000 fb63 	bl	8002860 <HAL_Delay>
			printf("[%8lu] Requesting temperatures...", HAL_GetTick());
 800219a:	e764      	b.n	8002066 <main+0x162>
 800219c:	0800711c 	.word	0x0800711c
 80021a0:	2000029c 	.word	0x2000029c
 80021a4:	20000204 	.word	0x20000204
 80021a8:	08007138 	.word	0x08007138
 80021ac:	08007160 	.word	0x08007160
 80021b0:	200002dc 	.word	0x200002dc
 80021b4:	08007180 	.word	0x08007180
 80021b8:	0800719c 	.word	0x0800719c
 80021bc:	080071b8 	.word	0x080071b8
 80021c0:	080071e8 	.word	0x080071e8
 80021c4:	08007204 	.word	0x08007204
 80021c8:	08007208 	.word	0x08007208
 80021cc:	0800722c 	.word	0x0800722c
 80021d0:	0800725c 	.word	0x0800725c
 80021d4:	08007278 	.word	0x08007278
 80021d8:	0800729c 	.word	0x0800729c
 80021dc:	080072c0 	.word	0x080072c0
 80021e0:	080072d0 	.word	0x080072d0
 80021e4:	0800730c 	.word	0x0800730c
 80021e8:	08007348 	.word	0x08007348
 80021ec:	08007384 	.word	0x08007384
 80021f0:	080073c0 	.word	0x080073c0
 80021f4:	080073fc 	.word	0x080073fc
 80021f8:	08007438 	.word	0x08007438

080021fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b090      	sub	sp, #64	; 0x40
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	2228      	movs	r2, #40	; 0x28
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fbd5 	bl	80049ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002230:	2302      	movs	r3, #2
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800223a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002240:	f107 0318 	add.w	r3, r7, #24
 8002244:	4618      	mov	r0, r3
 8002246:	f000 ffe3 	bl	8003210 <HAL_RCC_OscConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002250:	f000 f8aa 	bl	80023a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002254:	230f      	movs	r3, #15
 8002256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002258:	2302      	movs	r3, #2
 800225a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2102      	movs	r1, #2
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fa4e 	bl	8003710 <HAL_RCC_ClockConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800227a:	f000 f895 	bl	80023a8 <Error_Handler>
  }
}
 800227e:	bf00      	nop
 8002280:	3740      	adds	r7, #64	; 0x40
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <MX_USART1_UART_Init+0x50>)
 8002290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 8002294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_USART1_UART_Init+0x4c>)
 80022c0:	f001 fe3c 	bl	8003f3c <HAL_HalfDuplex_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ca:	f000 f86d 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000029c 	.word	0x2000029c
 80022d8:	40013800 	.word	0x40013800

080022dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_DMA_Init+0x48>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <MX_DMA_Init+0x48>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6153      	str	r3, [r2, #20]
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <MX_DMA_Init+0x48>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	200e      	movs	r0, #14
 8002300:	f000 fb85 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002304:	200e      	movs	r0, #14
 8002306:	f000 fb9e 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	200f      	movs	r0, #15
 8002310:	f000 fb7d 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002314:	200f      	movs	r0, #15
 8002316:	f000 fb96 	bl	8002a46 <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000

08002328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_GPIO_Init+0x58>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <MX_GPIO_Init+0x58>)
 8002334:	f043 0320 	orr.w	r3, r3, #32
 8002338:	6193      	str	r3, [r2, #24]
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_GPIO_Init+0x58>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_GPIO_Init+0x58>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <MX_GPIO_Init+0x58>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6193      	str	r3, [r2, #24]
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MX_GPIO_Init+0x58>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <MX_GPIO_Init+0x58>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <MX_GPIO_Init+0x58>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6193      	str	r3, [r2, #24]
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <MX_GPIO_Init+0x58>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]

}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002396:	f000 fa47 	bl	8002828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40000800 	.word	0x40000800

080023a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023ae:	e7fe      	b.n	80023ae <Error_Handler+0x6>

080023b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_MspInit+0x5c>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_MspInit+0x5c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6193      	str	r3, [r2, #24]
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_MspInit+0x5c>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_MspInit+0x5c>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_MspInit+0x5c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_MspInit+0x5c>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_MspInit+0x60>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_MspInit+0x60>)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <HAL_UART_MspInit+0x11c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d178      	bne.n	8002526 <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_UART_MspInit+0x120>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <HAL_UART_MspInit+0x120>)
 800243a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_UART_MspInit+0x120>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_UART_MspInit+0x120>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_UART_MspInit+0x120>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_UART_MspInit+0x120>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4619      	mov	r1, r3
 8002478:	482f      	ldr	r0, [pc, #188]	; (8002538 <HAL_UART_MspInit+0x124>)
 800247a:	f000 fd57 	bl	8002f2c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_UART_MspInit+0x128>)
 8002480:	4a2f      	ldr	r2, [pc, #188]	; (8002540 <HAL_UART_MspInit+0x12c>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_UART_MspInit+0x128>)
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_UART_MspInit+0x128>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_UART_MspInit+0x128>)
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_UART_MspInit+0x128>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_UART_MspInit+0x128>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_UART_MspInit+0x128>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_UART_MspInit+0x128>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ae:	4823      	ldr	r0, [pc, #140]	; (800253c <HAL_UART_MspInit+0x128>)
 80024b0:	f000 fad8 	bl	8002a64 <HAL_DMA_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 80024ba:	f7ff ff75 	bl	80023a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_UART_MspInit+0x128>)
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_UART_MspInit+0x128>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024cc:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_UART_MspInit+0x134>)
 80024ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024d2:	2210      	movs	r2, #16
 80024d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024fa:	4812      	ldr	r0, [pc, #72]	; (8002544 <HAL_UART_MspInit+0x130>)
 80024fc:	f000 fab2 	bl	8002a64 <HAL_DMA_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8002506:	f7ff ff4f 	bl	80023a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_UART_MspInit+0x130>)
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_UART_MspInit+0x130>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2025      	movs	r0, #37	; 0x25
 800251c:	f000 fa77 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002520:	2025      	movs	r0, #37	; 0x25
 8002522:	f000 fa90 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013800 	.word	0x40013800
 8002534:	40021000 	.word	0x40021000
 8002538:	40010800 	.word	0x40010800
 800253c:	20000258 	.word	0x20000258
 8002540:	40020058 	.word	0x40020058
 8002544:	20000214 	.word	0x20000214
 8002548:	40020044 	.word	0x40020044

0800254c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	201e      	movs	r0, #30
 8002562:	f000 fa54 	bl	8002a0e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002566:	201e      	movs	r0, #30
 8002568:	f000 fa6d 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_InitTick+0xa0>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_InitTick+0xa0>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	61d3      	str	r3, [r2, #28]
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_InitTick+0xa0>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002584:	f107 0210 	add.w	r2, r7, #16
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f001 fa3c 	bl	8003a0c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002594:	f001 fa12 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8002598:	4603      	mov	r3, r0
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <HAL_InitTick+0xa4>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	3b01      	subs	r3, #1
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_InitTick+0xa8>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_InitTick+0xac>)
 80025b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_InitTick+0xa8>)
 80025b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_InitTick+0xa8>)
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_InitTick+0xa8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_InitTick+0xa8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <HAL_InitTick+0xa8>)
 80025ce:	f001 fa6b 	bl	8003aa8 <HAL_TIM_Base_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80025d8:	4806      	ldr	r0, [pc, #24]	; (80025f4 <HAL_InitTick+0xa8>)
 80025da:	f001 fabd 	bl	8003b58 <HAL_TIM_Base_Start_IT>
 80025de:	4603      	mov	r3, r0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3730      	adds	r7, #48	; 0x30
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	200002e8 	.word	0x200002e8
 80025f8:	40000800 	.word	0x40000800

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <NMI_Handler+0x4>

08002602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <HardFault_Handler+0x4>

08002608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <MemManage_Handler+0x4>

0800260e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <BusFault_Handler+0x4>

08002614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <UsageFault_Handler+0x4>

0800261a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Channel4_IRQHandler+0x10>)
 8002652:	f000 fb37 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000214 	.word	0x20000214

08002660 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA1_Channel5_IRQHandler+0x10>)
 8002666:	f000 fb2d 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000258 	.word	0x20000258

08002674 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM4_IRQHandler+0x10>)
 800267a:	f001 fabf 	bl	8003bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200002e8 	.word	0x200002e8

08002688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <USART1_IRQHandler+0x10>)
 800268e:	f001 fd97 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000029c 	.word	0x2000029c

0800269c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e00a      	b.n	80026c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ae:	f3af 8000 	nop.w
 80026b2:	4601      	mov	r1, r0
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	b2ca      	uxtb	r2, r1
 80026bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	dbf0      	blt.n	80026ae <_read+0x12>
	}

return len;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
	return -1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fc:	605a      	str	r2, [r3, #4]
	return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <_isatty>:

int _isatty(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	return 1;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
	return 0;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
	...

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f002 f8f2 	bl	8004950 <__errno>
 800276c:	4602      	mov	r2, r0
 800276e:	230c      	movs	r3, #12
 8002770:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20005000 	.word	0x20005000
 8002798:	00000400 	.word	0x00000400
 800279c:	200001f8 	.word	0x200001f8
 80027a0:	20000338 	.word	0x20000338

080027a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027b2:	e003      	b.n	80027bc <LoopCopyDataInit>

080027b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027ba:	3104      	adds	r1, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027bc:	480a      	ldr	r0, [pc, #40]	; (80027e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027c4:	d3f6      	bcc.n	80027b4 <CopyDataInit>
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027c8:	e002      	b.n	80027d0 <LoopFillZerobss>

080027ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027cc:	f842 3b04 	str.w	r3, [r2], #4

080027d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027d4:	d3f9      	bcc.n	80027ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027d6:	f7ff ffe5 	bl	80027a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027da:	f002 f8bf 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027de:	f7ff fb91 	bl	8001f04 <main>
  bx lr
 80027e2:	4770      	bx	lr
  ldr r3, =_sidata
 80027e4:	08007788 	.word	0x08007788
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80027f0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80027f4:	20000338 	.word	0x20000338

080027f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC1_2_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_Init+0x28>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_Init+0x28>)
 8002806:	f043 0310 	orr.w	r3, r3, #16
 800280a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280c:	2003      	movs	r0, #3
 800280e:	f000 f8f3 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002812:	2000      	movs	r0, #0
 8002814:	f7ff fe9a 	bl	800254c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002818:	f7ff fdca 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40022000 	.word	0x40022000

08002828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_IncTick+0x1c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_IncTick+0x20>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <HAL_IncTick+0x20>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	20000008 	.word	0x20000008
 8002848:	20000330 	.word	0x20000330

0800284c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_GetTick+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000330 	.word	0x20000330

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff fff0 	bl	800284c <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_Delay+0x40>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffe0 	bl	800284c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000008 	.word	0x20000008

080028a4 <__NVIC_SetPriorityGrouping>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4906      	ldr	r1, [pc, #24]	; (800293c <__NVIC_EnableIRQ+0x34>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	; (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff4f 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff64 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ffb2 	bl	8002994 <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff81 	bl	8002940 <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff57 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e043      	b.n	8002b02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_DMA_Init+0xa8>)
 8002a82:	4413      	add	r3, r2
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_DMA_Init+0xac>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_DMA_Init+0xb0>)
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002aae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ab2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	bffdfff8 	.word	0xbffdfff8
 8002b10:	cccccccd 	.word	0xcccccccd
 8002b14:	40020000 	.word	0x40020000

08002b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Start_IT+0x20>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e04a      	b.n	8002bce <HAL_DMA_Start_IT+0xb6>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d13a      	bne.n	8002bc0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9ae 	bl	8002ed0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020e 	orr.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e00f      	b.n	8002bae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0204 	bic.w	r2, r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 020a 	orr.w	r2, r2, #10
 8002bac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e005      	b.n	8002bcc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d005      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e051      	b.n	8002c9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020e 	bic.w	r2, r2, #14
 8002c08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_DMA_Abort_IT+0xd0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d029      	beq.n	8002c78 <HAL_DMA_Abort_IT+0xa0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a20      	ldr	r2, [pc, #128]	; (8002cac <HAL_DMA_Abort_IT+0xd4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d022      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x9c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_DMA_Abort_IT+0xd8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d01a      	beq.n	8002c6e <HAL_DMA_Abort_IT+0x96>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_DMA_Abort_IT+0xdc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d012      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x90>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_DMA_Abort_IT+0xe0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00a      	beq.n	8002c62 <HAL_DMA_Abort_IT+0x8a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_DMA_Abort_IT+0xe4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d102      	bne.n	8002c5c <HAL_DMA_Abort_IT+0x84>
 8002c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c5a:	e00e      	b.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c60:	e00b      	b.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c66:	e008      	b.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	e005      	b.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	e002      	b.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c74:	2310      	movs	r3, #16
 8002c76:	e000      	b.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_DMA_Abort_IT+0xe8>)
 8002c7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
    } 
  }
  return status;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40020008 	.word	0x40020008
 8002cac:	4002001c 	.word	0x4002001c
 8002cb0:	40020030 	.word	0x40020030
 8002cb4:	40020044 	.word	0x40020044
 8002cb8:	40020058 	.word	0x40020058
 8002cbc:	4002006c 	.word	0x4002006c
 8002cc0:	40020000 	.word	0x40020000

08002cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d04f      	beq.n	8002d8c <HAL_DMA_IRQHandler+0xc8>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04a      	beq.n	8002d8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a66      	ldr	r2, [pc, #408]	; (8002eb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d029      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xae>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a65      	ldr	r2, [pc, #404]	; (8002eb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xaa>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_DMA_IRQHandler+0x1f8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01a      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xa4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a62      	ldr	r2, [pc, #392]	; (8002ec0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d012      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x9e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a60      	ldr	r2, [pc, #384]	; (8002ec4 <HAL_DMA_IRQHandler+0x200>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00a      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x98>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5f      	ldr	r2, [pc, #380]	; (8002ec8 <HAL_DMA_IRQHandler+0x204>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <HAL_DMA_IRQHandler+0x92>
 8002d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d54:	e00e      	b.n	8002d74 <HAL_DMA_IRQHandler+0xb0>
 8002d56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d5a:	e00b      	b.n	8002d74 <HAL_DMA_IRQHandler+0xb0>
 8002d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d60:	e008      	b.n	8002d74 <HAL_DMA_IRQHandler+0xb0>
 8002d62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d66:	e005      	b.n	8002d74 <HAL_DMA_IRQHandler+0xb0>
 8002d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6c:	e002      	b.n	8002d74 <HAL_DMA_IRQHandler+0xb0>
 8002d6e:	2340      	movs	r3, #64	; 0x40
 8002d70:	e000      	b.n	8002d74 <HAL_DMA_IRQHandler+0xb0>
 8002d72:	2304      	movs	r3, #4
 8002d74:	4a55      	ldr	r2, [pc, #340]	; (8002ecc <HAL_DMA_IRQHandler+0x208>)
 8002d76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8094 	beq.w	8002eaa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	e08e      	b.n	8002eaa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2202      	movs	r2, #2
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d056      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x186>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d051      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020a 	bic.w	r2, r2, #10
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a38      	ldr	r2, [pc, #224]	; (8002eb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d029      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x166>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a37      	ldr	r2, [pc, #220]	; (8002eb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x162>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <HAL_DMA_IRQHandler+0x1f8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01a      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x15c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a34      	ldr	r2, [pc, #208]	; (8002ec0 <HAL_DMA_IRQHandler+0x1fc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d012      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a32      	ldr	r2, [pc, #200]	; (8002ec4 <HAL_DMA_IRQHandler+0x200>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x150>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <HAL_DMA_IRQHandler+0x204>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x14a>
 8002e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e0c:	e00e      	b.n	8002e2c <HAL_DMA_IRQHandler+0x168>
 8002e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e12:	e00b      	b.n	8002e2c <HAL_DMA_IRQHandler+0x168>
 8002e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e18:	e008      	b.n	8002e2c <HAL_DMA_IRQHandler+0x168>
 8002e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e1e:	e005      	b.n	8002e2c <HAL_DMA_IRQHandler+0x168>
 8002e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e24:	e002      	b.n	8002e2c <HAL_DMA_IRQHandler+0x168>
 8002e26:	2320      	movs	r3, #32
 8002e28:	e000      	b.n	8002e2c <HAL_DMA_IRQHandler+0x168>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <HAL_DMA_IRQHandler+0x208>)
 8002e2e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d034      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e48:	e02f      	b.n	8002eaa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2208      	movs	r2, #8
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d028      	beq.n	8002eac <HAL_DMA_IRQHandler+0x1e8>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d023      	beq.n	8002eac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 020e 	bic.w	r2, r2, #14
 8002e72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
    }
  }
  return;
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
}
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40020008 	.word	0x40020008
 8002eb8:	4002001c 	.word	0x4002001c
 8002ebc:	40020030 	.word	0x40020030
 8002ec0:	40020044 	.word	0x40020044
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	4002006c 	.word	0x4002006c
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d108      	bne.n	8002f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f0e:	e007      	b.n	8002f20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b08b      	sub	sp, #44	; 0x2c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3e:	e127      	b.n	8003190 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f40:	2201      	movs	r2, #1
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f040 8116 	bne.w	800318a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d034      	beq.n	8002fd0 <HAL_GPIO_Init+0xa4>
 8002f66:	2b12      	cmp	r3, #18
 8002f68:	d80d      	bhi.n	8002f86 <HAL_GPIO_Init+0x5a>
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_GPIO_Init+0x9a>
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d804      	bhi.n	8002f7c <HAL_GPIO_Init+0x50>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d031      	beq.n	8002fda <HAL_GPIO_Init+0xae>
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d01c      	beq.n	8002fb4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f7a:	e048      	b.n	800300e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d043      	beq.n	8003008 <HAL_GPIO_Init+0xdc>
 8002f80:	2b11      	cmp	r3, #17
 8002f82:	d01b      	beq.n	8002fbc <HAL_GPIO_Init+0x90>
          break;
 8002f84:	e043      	b.n	800300e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f86:	4a89      	ldr	r2, [pc, #548]	; (80031ac <HAL_GPIO_Init+0x280>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d026      	beq.n	8002fda <HAL_GPIO_Init+0xae>
 8002f8c:	4a87      	ldr	r2, [pc, #540]	; (80031ac <HAL_GPIO_Init+0x280>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d806      	bhi.n	8002fa0 <HAL_GPIO_Init+0x74>
 8002f92:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_GPIO_Init+0x284>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d020      	beq.n	8002fda <HAL_GPIO_Init+0xae>
 8002f98:	4a86      	ldr	r2, [pc, #536]	; (80031b4 <HAL_GPIO_Init+0x288>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_GPIO_Init+0xae>
          break;
 8002f9e:	e036      	b.n	800300e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fa0:	4a85      	ldr	r2, [pc, #532]	; (80031b8 <HAL_GPIO_Init+0x28c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0xae>
 8002fa6:	4a85      	ldr	r2, [pc, #532]	; (80031bc <HAL_GPIO_Init+0x290>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d016      	beq.n	8002fda <HAL_GPIO_Init+0xae>
 8002fac:	4a84      	ldr	r2, [pc, #528]	; (80031c0 <HAL_GPIO_Init+0x294>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0xae>
          break;
 8002fb2:	e02c      	b.n	800300e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	623b      	str	r3, [r7, #32]
          break;
 8002fba:	e028      	b.n	800300e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	623b      	str	r3, [r7, #32]
          break;
 8002fc4:	e023      	b.n	800300e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	3308      	adds	r3, #8
 8002fcc:	623b      	str	r3, [r7, #32]
          break;
 8002fce:	e01e      	b.n	800300e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	623b      	str	r3, [r7, #32]
          break;
 8002fd8:	e019      	b.n	800300e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	623b      	str	r3, [r7, #32]
          break;
 8002fe6:	e012      	b.n	800300e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	611a      	str	r2, [r3, #16]
          break;
 8002ffa:	e008      	b.n	800300e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	615a      	str	r2, [r3, #20]
          break;
 8003006:	e002      	b.n	800300e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003008:	2300      	movs	r3, #0
 800300a:	623b      	str	r3, [r7, #32]
          break;
 800300c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2bff      	cmp	r3, #255	; 0xff
 8003012:	d801      	bhi.n	8003018 <HAL_GPIO_Init+0xec>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	e001      	b.n	800301c <HAL_GPIO_Init+0xf0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2bff      	cmp	r3, #255	; 0xff
 8003022:	d802      	bhi.n	800302a <HAL_GPIO_Init+0xfe>
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x104>
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	3b08      	subs	r3, #8
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	210f      	movs	r1, #15
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	401a      	ands	r2, r3
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	431a      	orrs	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8096 	beq.w	800318a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800305e:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_GPIO_Init+0x298>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_GPIO_Init+0x298>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6193      	str	r3, [r2, #24]
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_GPIO_Init+0x298>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003076:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_GPIO_Init+0x29c>)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4b      	ldr	r2, [pc, #300]	; (80031cc <HAL_GPIO_Init+0x2a0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_GPIO_Init+0x19e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_GPIO_Init+0x2a4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00d      	beq.n	80030c6 <HAL_GPIO_Init+0x19a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a49      	ldr	r2, [pc, #292]	; (80031d4 <HAL_GPIO_Init+0x2a8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <HAL_GPIO_Init+0x196>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <HAL_GPIO_Init+0x2ac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <HAL_GPIO_Init+0x192>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x1a0>
 80030be:	2304      	movs	r3, #4
 80030c0:	e004      	b.n	80030cc <HAL_GPIO_Init+0x1a0>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x1a0>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x1a0>
 80030ca:	2300      	movs	r3, #0
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	f002 0203 	and.w	r2, r2, #3
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	4093      	lsls	r3, r2
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030dc:	493a      	ldr	r1, [pc, #232]	; (80031c8 <HAL_GPIO_Init+0x29c>)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4938      	ldr	r1, [pc, #224]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
 8003102:	e006      	b.n	8003112 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	43db      	mvns	r3, r3
 800310c:	4933      	ldr	r1, [pc, #204]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 800310e:	4013      	ands	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	492e      	ldr	r1, [pc, #184]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
 800312a:	e006      	b.n	800313a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	43db      	mvns	r3, r3
 8003134:	4929      	ldr	r1, [pc, #164]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003136:	4013      	ands	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	4924      	ldr	r1, [pc, #144]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
 8003152:	e006      	b.n	8003162 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	43db      	mvns	r3, r3
 800315c:	491f      	ldr	r1, [pc, #124]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 800315e:	4013      	ands	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	491a      	ldr	r1, [pc, #104]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
 800317a:	e006      	b.n	800318a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	43db      	mvns	r3, r3
 8003184:	4915      	ldr	r1, [pc, #84]	; (80031dc <HAL_GPIO_Init+0x2b0>)
 8003186:	4013      	ands	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	3301      	adds	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f47f aed0 	bne.w	8002f40 <HAL_GPIO_Init+0x14>
  }
}
 80031a0:	bf00      	nop
 80031a2:	372c      	adds	r7, #44	; 0x2c
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	10210000 	.word	0x10210000
 80031b0:	10110000 	.word	0x10110000
 80031b4:	10120000 	.word	0x10120000
 80031b8:	10310000 	.word	0x10310000
 80031bc:	10320000 	.word	0x10320000
 80031c0:	10220000 	.word	0x10220000
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40010800 	.word	0x40010800
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	40011000 	.word	0x40011000
 80031d8:	40011400 	.word	0x40011400
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e26c      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e246      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff faae 	bl	800284c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff faaa 	bl	800284c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1fa      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff fa9a 	bl	800284c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff fa96 	bl	800284c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1e6      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1ba      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7ff fa4f 	bl	800284c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7ff fa4b 	bl	800284c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e19b      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7ff fa2e 	bl	800284c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7ff fa2a 	bl	800284c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e17a      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7ff fa0e 	bl	800284c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7ff fa0a 	bl	800284c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e15a      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 fb0a 	bl	8003a6c <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff f9f4 	bl	800284c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7ff f9f0 	bl	800284c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e140      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b97      	ldr	r3, [pc, #604]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b94      	ldr	r3, [pc, #592]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a93      	ldr	r2, [pc, #588]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b91      	ldr	r3, [pc, #580]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b8e      	ldr	r3, [pc, #568]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b8b      	ldr	r3, [pc, #556]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a8a      	ldr	r2, [pc, #552]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7ff f9b1 	bl	800284c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7ff f9ad 	bl	800284c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0fd      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b81      	ldr	r3, [pc, #516]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b7b      	ldr	r3, [pc, #492]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a7a      	ldr	r2, [pc, #488]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a75      	ldr	r2, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a72      	ldr	r2, [pc, #456]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a6c      	ldr	r2, [pc, #432]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a66      	ldr	r2, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b64      	ldr	r3, [pc, #400]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a63      	ldr	r2, [pc, #396]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7ff f961 	bl	800284c <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7ff f95d 	bl	800284c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0ab      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7ff f94b 	bl	800284c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7ff f947 	bl	800284c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e095      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a47      	ldr	r2, [pc, #284]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8081 	beq.w	80036fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7ff f91b 	bl	800284c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7ff f917 	bl	800284c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e067      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	492d      	ldr	r1, [pc, #180]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	4927      	ldr	r1, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7ff f8eb 	bl	800284c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7ff f8e7 	bl	800284c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e037      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e02f      	b.n	80036fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff f8d4 	bl	800284c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7ff f8d0 	bl	800284c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e020      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e013      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	42420060 	.word	0x42420060

08003710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0d0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4965      	ldr	r1, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800378e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d040      	beq.n	8003830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e073      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4936      	ldr	r1, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7ff f824 	bl	800284c <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7ff f820 	bl	800284c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e053      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d210      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4922      	ldr	r1, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4601      	mov	r1, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	fa21 f303 	lsr.w	r3, r1, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1cc>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fe44 	bl	800254c <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	080074a8 	.word	0x080074a8
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b490      	push	{r4, r7}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038ec:	1d3c      	adds	r4, r7, #4
 80038ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x46>
 8003922:	e02d      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003926:	623b      	str	r3, [r7, #32]
      break;
 8003928:	e02d      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	0c9b      	lsrs	r3, r3, #18
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003936:	4413      	add	r3, r2
 8003938:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800393c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c5b      	lsrs	r3, r3, #17
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003956:	4413      	add	r3, r2
 8003958:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800395c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003962:	fb02 f203 	mul.w	r2, r2, r3
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e004      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	623b      	str	r3, [r7, #32]
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6a3b      	ldr	r3, [r7, #32]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bc90      	pop	{r4, r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	08007474 	.word	0x08007474
 8003998:	08007484 	.word	0x08007484
 800399c:	40021000 	.word	0x40021000
 80039a0:	007a1200 	.word	0x007a1200
 80039a4:	003d0900 	.word	0x003d0900

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	20000000 	.word	0x20000000

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039c0:	f7ff fff2 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039c4:	4601      	mov	r1, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4a03      	ldr	r2, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	080074b8 	.word	0x080074b8

080039e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e8:	f7ff ffde 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039ec:	4601      	mov	r1, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	0adb      	lsrs	r3, r3, #11
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	080074b8 	.word	0x080074b8

08003a0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	220f      	movs	r2, #15
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <HAL_RCC_GetClockConfig+0x58>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0203 	and.w	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <HAL_RCC_GetClockConfig+0x58>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_GetClockConfig+0x58>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_GetClockConfig+0x58>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetClockConfig+0x5c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0207 	and.w	r2, r3, #7
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40022000 	.word	0x40022000

08003a6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <RCC_Delay+0x34>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <RCC_Delay+0x38>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0a5b      	lsrs	r3, r3, #9
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a88:	bf00      	nop
  }
  while (Delay --);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	60fa      	str	r2, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <RCC_Delay+0x1c>
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	10624dd3 	.word	0x10624dd3

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f839 	bl	8003b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 f9b4 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e03a      	b.n	8003be6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_TIM_Base_Start_IT+0x98>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x58>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x58>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_Base_Start_IT+0x58>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d111      	bne.n	8003bd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d010      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd2:	e007      	b.n	8003be4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800

08003bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0202 	mvn.w	r2, #2
 8003c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8ed 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8e0 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8ef 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0204 	mvn.w	r2, #4
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8c3 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8b6 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f8c5 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0208 	mvn.w	r2, #8
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f899 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f88c 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f89b 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0210 	mvn.w	r2, #16
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f86f 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f862 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f871 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0201 	mvn.w	r2, #1
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fe fb02 	bl	8002384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	2b80      	cmp	r3, #128	; 0x80
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8bf 	bl	8003f2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f835 	bl	8003e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0220 	mvn.w	r2, #32
 8003dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f88a 	bl	8003f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <TIM_Base_SetConfig+0xb8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x30>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x30>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <TIM_Base_SetConfig+0xbc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x30>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <TIM_Base_SetConfig+0xc0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <TIM_Base_SetConfig+0xb8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x62>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <TIM_Base_SetConfig+0xbc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <TIM_Base_SetConfig+0xc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <TIM_Base_SetConfig+0xb8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d103      	bne.n	8003efc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	615a      	str	r2, [r3, #20]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800

08003f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e047      	b.n	8003fde <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fe fa56 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	; 0x24
 8003f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fc57 	bl	8004834 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0208 	orr.w	r2, r2, #8
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d153      	bne.n	80040aa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_UART_Transmit_DMA+0x26>
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e04c      	b.n	80040ac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_UART_Transmit_DMA+0x38>
 800401c:	2302      	movs	r3, #2
 800401e:	e045      	b.n	80040ac <HAL_UART_Transmit_DMA+0xc4>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2221      	movs	r2, #33	; 0x21
 8004044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <HAL_UART_Transmit_DMA+0xcc>)
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_UART_Transmit_DMA+0xd0>)
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_UART_Transmit_DMA+0xd4>)
 800405e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2200      	movs	r2, #0
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3304      	adds	r3, #4
 800407c:	461a      	mov	r2, r3
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	f7fe fd4a 	bl	8002b18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040a4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	08004455 	.word	0x08004455
 80040b8:	080044a7 	.word	0x080044a7
 80040bc:	08004547 	.word	0x08004547

080040c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d166      	bne.n	80041a8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Receive_DMA+0x26>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e05f      	b.n	80041aa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Receive_DMA+0x38>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e058      	b.n	80041aa <HAL_UART_Receive_DMA+0xea>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2222      	movs	r2, #34	; 0x22
 8004116:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <HAL_UART_Receive_DMA+0xf4>)
 8004120:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <HAL_UART_Receive_DMA+0xf8>)
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	4a23      	ldr	r2, [pc, #140]	; (80041bc <HAL_UART_Receive_DMA+0xfc>)
 8004130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	2200      	movs	r2, #0
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800413a:	f107 0308 	add.w	r3, r7, #8
 800413e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	f7fe fce1 	bl	8002b18 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004182:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e000      	b.n	80041aa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	080044c3 	.word	0x080044c3
 80041b8:	0800452b 	.word	0x0800452b
 80041bc:	08004547 	.word	0x08004547

080041c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_UART_IRQHandler+0x52>
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa92 	bl	8004734 <UART_Receive_IT>
      return;
 8004210:	e0d1      	b.n	80043b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80b0 	beq.w	800437a <HAL_UART_IRQHandler+0x1ba>
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_UART_IRQHandler+0x70>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a5 	beq.w	800437a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_UART_IRQHandler+0x90>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_UART_IRQHandler+0xb0>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	f043 0202 	orr.w	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_UART_IRQHandler+0xd0>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00f      	beq.n	80042ba <HAL_UART_IRQHandler+0xfa>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_UART_IRQHandler+0xee>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d078      	beq.n	80043b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_UART_IRQHandler+0x11c>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa2c 	bl	8004734 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <HAL_UART_IRQHandler+0x144>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d031      	beq.n	8004368 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f97d 	bl	8004604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d023      	beq.n	8004360 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	4a21      	ldr	r2, [pc, #132]	; (80043bc <HAL_UART_IRQHandler+0x1fc>)
 8004336:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fc4b 	bl	8002bd8 <HAL_DMA_Abort_IT>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d016      	beq.n	8004376 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004352:	4610      	mov	r0, r2
 8004354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004356:	e00e      	b.n	8004376 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f855 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435e:	e00a      	b.n	8004376 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f851 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004366:	e006      	b.n	8004376 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f84d 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004374:	e01e      	b.n	80043b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004376:	bf00      	nop
    return;
 8004378:	e01c      	b.n	80043b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_UART_IRQHandler+0x1d6>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f969 	bl	8004666 <UART_Transmit_IT>
    return;
 8004394:	e00f      	b.n	80043b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_UART_IRQHandler+0x1f6>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9aa 	bl	8004704 <UART_EndTransmit_IT>
    return;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80043b4:	bf00      	nop
  }
}
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	0800463f 	.word	0x0800463f

080043c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004430:	b2db      	uxtb	r3, r3
 8004432:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800443a:	b2db      	uxtb	r3, r3
 800443c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	4313      	orrs	r3, r2
 8004448:	b2db      	uxtb	r3, r3
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d113      	bne.n	8004498 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004484:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004494:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004496:	e002      	b.n	800449e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff ff91 	bl	80043c0 <HAL_UART_TxCpltCallback>
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ff8c 	bl	80043d2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11e      	bne.n	800451c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ff61 	bl	80043e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ff5c 	bl	80043f6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b21      	cmp	r3, #33	; 0x21
 8004578:	d108      	bne.n	800458c <UART_DMAError+0x46>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f000 f827 	bl	80045da <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	bf14      	ite	ne
 800459a:	2301      	movne	r3, #1
 800459c:	2300      	moveq	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b22      	cmp	r3, #34	; 0x22
 80045ac:	d108      	bne.n	80045c0 <UART_DMAError+0x7a>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	f000 f822 	bl	8004604 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	f043 0210 	orr.w	r2, r3, #16
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045cc:	68b8      	ldr	r0, [r7, #8]
 80045ce:	f7ff ff1b 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80045f0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800461a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff fed5 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b21      	cmp	r3, #33	; 0x21
 8004678:	d13e      	bne.n	80046f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004682:	d114      	bne.n	80046ae <UART_Transmit_IT+0x48>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d110      	bne.n	80046ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	621a      	str	r2, [r3, #32]
 80046ac:	e008      	b.n	80046c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	1c59      	adds	r1, r3, #1
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6211      	str	r1, [r2, #32]
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4619      	mov	r1, r3
 80046ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10f      	bne.n	80046f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fe4b 	bl	80043c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b22      	cmp	r3, #34	; 0x22
 8004746:	d170      	bne.n	800482a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004750:	d117      	bne.n	8004782 <UART_Receive_IT+0x4e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d113      	bne.n	8004782 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004770:	b29a      	uxth	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
 8004780:	e026      	b.n	80047d0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d007      	beq.n	80047a6 <UART_Receive_IT+0x72>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <UART_Receive_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e008      	b.n	80047c6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4619      	mov	r1, r3
 80047de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d120      	bne.n	8004826 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0220 	bic.w	r2, r2, #32
 80047f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fde1 	bl	80043e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e002      	b.n	800482c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800486e:	f023 030c 	bic.w	r3, r3, #12
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	430b      	orrs	r3, r1
 800487a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <UART_SetConfig+0x114>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7ff f8a2 	bl	80039e4 <HAL_RCC_GetPCLK2Freq>
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	e002      	b.n	80048aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7ff f88a 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <UART_SetConfig+0x118>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	0119      	lsls	r1, r3, #4
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <UART_SetConfig+0x118>)
 80048e2:	fba3 0302 	umull	r0, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2064      	movs	r0, #100	; 0x64
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	; 0x32
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <UART_SetConfig+0x118>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004900:	4419      	add	r1, r3
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f2f3 	udiv	r2, r2, r3
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <UART_SetConfig+0x118>)
 800491a:	fba3 0302 	umull	r0, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2064      	movs	r0, #100	; 0x64
 8004922:	fb00 f303 	mul.w	r3, r0, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a07      	ldr	r2, [pc, #28]	; (800494c <UART_SetConfig+0x118>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 020f 	and.w	r2, r3, #15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	440a      	add	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40013800 	.word	0x40013800
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2500      	movs	r5, #0
 8004960:	4e0c      	ldr	r6, [pc, #48]	; (8004994 <__libc_init_array+0x38>)
 8004962:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004964:	1ba4      	subs	r4, r4, r6
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	42a5      	cmp	r5, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	f002 fbaa 	bl	80070c4 <_init>
 8004970:	2500      	movs	r5, #0
 8004972:	4e0a      	ldr	r6, [pc, #40]	; (800499c <__libc_init_array+0x40>)
 8004974:	4c0a      	ldr	r4, [pc, #40]	; (80049a0 <__libc_init_array+0x44>)
 8004976:	1ba4      	subs	r4, r4, r6
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	42a5      	cmp	r5, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004984:	4798      	blx	r3
 8004986:	3501      	adds	r5, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498e:	4798      	blx	r3
 8004990:	3501      	adds	r5, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08007780 	.word	0x08007780
 8004998:	08007780 	.word	0x08007780
 800499c:	08007780 	.word	0x08007780
 80049a0:	08007784 	.word	0x08007784

080049a4 <memcpy>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	1e43      	subs	r3, r0, #1
 80049a8:	440a      	add	r2, r1
 80049aa:	4291      	cmp	r1, r2
 80049ac:	d100      	bne.n	80049b0 <memcpy+0xc>
 80049ae:	bd10      	pop	{r4, pc}
 80049b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b8:	e7f7      	b.n	80049aa <memcpy+0x6>

080049ba <memset>:
 80049ba:	4603      	mov	r3, r0
 80049bc:	4402      	add	r2, r0
 80049be:	4293      	cmp	r3, r2
 80049c0:	d100      	bne.n	80049c4 <memset+0xa>
 80049c2:	4770      	bx	lr
 80049c4:	f803 1b01 	strb.w	r1, [r3], #1
 80049c8:	e7f9      	b.n	80049be <memset+0x4>

080049ca <__cvt>:
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d0:	461e      	mov	r6, r3
 80049d2:	bfbb      	ittet	lt
 80049d4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	461e      	movlt	r6, r3
 80049da:	2300      	movge	r3, #0
 80049dc:	232d      	movlt	r3, #45	; 0x2d
 80049de:	b088      	sub	sp, #32
 80049e0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80049e2:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80049e6:	f027 0720 	bic.w	r7, r7, #32
 80049ea:	2f46      	cmp	r7, #70	; 0x46
 80049ec:	4614      	mov	r4, r2
 80049ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049f0:	700b      	strb	r3, [r1, #0]
 80049f2:	d004      	beq.n	80049fe <__cvt+0x34>
 80049f4:	2f45      	cmp	r7, #69	; 0x45
 80049f6:	d100      	bne.n	80049fa <__cvt+0x30>
 80049f8:	3501      	adds	r5, #1
 80049fa:	2302      	movs	r3, #2
 80049fc:	e000      	b.n	8004a00 <__cvt+0x36>
 80049fe:	2303      	movs	r3, #3
 8004a00:	aa07      	add	r2, sp, #28
 8004a02:	9204      	str	r2, [sp, #16]
 8004a04:	aa06      	add	r2, sp, #24
 8004a06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a0a:	e9cd 3500 	strd	r3, r5, [sp]
 8004a0e:	4622      	mov	r2, r4
 8004a10:	4633      	mov	r3, r6
 8004a12:	f000 fdf5 	bl	8005600 <_dtoa_r>
 8004a16:	2f47      	cmp	r7, #71	; 0x47
 8004a18:	4680      	mov	r8, r0
 8004a1a:	d102      	bne.n	8004a22 <__cvt+0x58>
 8004a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a1e:	07db      	lsls	r3, r3, #31
 8004a20:	d526      	bpl.n	8004a70 <__cvt+0xa6>
 8004a22:	2f46      	cmp	r7, #70	; 0x46
 8004a24:	eb08 0905 	add.w	r9, r8, r5
 8004a28:	d111      	bne.n	8004a4e <__cvt+0x84>
 8004a2a:	f898 3000 	ldrb.w	r3, [r8]
 8004a2e:	2b30      	cmp	r3, #48	; 0x30
 8004a30:	d10a      	bne.n	8004a48 <__cvt+0x7e>
 8004a32:	2200      	movs	r2, #0
 8004a34:	2300      	movs	r3, #0
 8004a36:	4620      	mov	r0, r4
 8004a38:	4631      	mov	r1, r6
 8004a3a:	f7fb ffb5 	bl	80009a8 <__aeabi_dcmpeq>
 8004a3e:	b918      	cbnz	r0, 8004a48 <__cvt+0x7e>
 8004a40:	f1c5 0501 	rsb	r5, r5, #1
 8004a44:	f8ca 5000 	str.w	r5, [sl]
 8004a48:	f8da 3000 	ldr.w	r3, [sl]
 8004a4c:	4499      	add	r9, r3
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2300      	movs	r3, #0
 8004a52:	4620      	mov	r0, r4
 8004a54:	4631      	mov	r1, r6
 8004a56:	f7fb ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8004a5a:	b938      	cbnz	r0, 8004a6c <__cvt+0xa2>
 8004a5c:	2230      	movs	r2, #48	; 0x30
 8004a5e:	9b07      	ldr	r3, [sp, #28]
 8004a60:	454b      	cmp	r3, r9
 8004a62:	d205      	bcs.n	8004a70 <__cvt+0xa6>
 8004a64:	1c59      	adds	r1, r3, #1
 8004a66:	9107      	str	r1, [sp, #28]
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e7f8      	b.n	8004a5e <__cvt+0x94>
 8004a6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a70:	4640      	mov	r0, r8
 8004a72:	9b07      	ldr	r3, [sp, #28]
 8004a74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a76:	eba3 0308 	sub.w	r3, r3, r8
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	b008      	add	sp, #32
 8004a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a82 <__exponent>:
 8004a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a84:	2900      	cmp	r1, #0
 8004a86:	bfb4      	ite	lt
 8004a88:	232d      	movlt	r3, #45	; 0x2d
 8004a8a:	232b      	movge	r3, #43	; 0x2b
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	bfb8      	it	lt
 8004a90:	4249      	neglt	r1, r1
 8004a92:	2909      	cmp	r1, #9
 8004a94:	f804 2b02 	strb.w	r2, [r4], #2
 8004a98:	7043      	strb	r3, [r0, #1]
 8004a9a:	dd21      	ble.n	8004ae0 <__exponent+0x5e>
 8004a9c:	f10d 0307 	add.w	r3, sp, #7
 8004aa0:	461f      	mov	r7, r3
 8004aa2:	260a      	movs	r6, #10
 8004aa4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004aa8:	fb06 1115 	mls	r1, r6, r5, r1
 8004aac:	2d09      	cmp	r5, #9
 8004aae:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ab6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004aba:	4629      	mov	r1, r5
 8004abc:	dc09      	bgt.n	8004ad2 <__exponent+0x50>
 8004abe:	3130      	adds	r1, #48	; 0x30
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ac6:	42bb      	cmp	r3, r7
 8004ac8:	4622      	mov	r2, r4
 8004aca:	d304      	bcc.n	8004ad6 <__exponent+0x54>
 8004acc:	1a10      	subs	r0, r2, r0
 8004ace:	b003      	add	sp, #12
 8004ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	e7e6      	b.n	8004aa4 <__exponent+0x22>
 8004ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ada:	f804 2b01 	strb.w	r2, [r4], #1
 8004ade:	e7f2      	b.n	8004ac6 <__exponent+0x44>
 8004ae0:	2330      	movs	r3, #48	; 0x30
 8004ae2:	4419      	add	r1, r3
 8004ae4:	7083      	strb	r3, [r0, #2]
 8004ae6:	1d02      	adds	r2, r0, #4
 8004ae8:	70c1      	strb	r1, [r0, #3]
 8004aea:	e7ef      	b.n	8004acc <__exponent+0x4a>

08004aec <_printf_float>:
 8004aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	b091      	sub	sp, #68	; 0x44
 8004af2:	460c      	mov	r4, r1
 8004af4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004af6:	4693      	mov	fp, r2
 8004af8:	461e      	mov	r6, r3
 8004afa:	4605      	mov	r5, r0
 8004afc:	f001 fcae 	bl	800645c <_localeconv_r>
 8004b00:	6803      	ldr	r3, [r0, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	9309      	str	r3, [sp, #36]	; 0x24
 8004b06:	f7fb fb23 	bl	8000150 <strlen>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	900a      	str	r0, [sp, #40]	; 0x28
 8004b12:	3307      	adds	r3, #7
 8004b14:	f023 0307 	bic.w	r3, r3, #7
 8004b18:	f103 0208 	add.w	r2, r3, #8
 8004b1c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b20:	f8d4 a000 	ldr.w	sl, [r4]
 8004b24:	603a      	str	r2, [r7, #0]
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b2e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b3c:	4ba6      	ldr	r3, [pc, #664]	; (8004dd8 <_printf_float+0x2ec>)
 8004b3e:	4638      	mov	r0, r7
 8004b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b42:	f7fb ff63 	bl	8000a0c <__aeabi_dcmpun>
 8004b46:	bb68      	cbnz	r0, 8004ba4 <_printf_float+0xb8>
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4c:	4ba2      	ldr	r3, [pc, #648]	; (8004dd8 <_printf_float+0x2ec>)
 8004b4e:	4638      	mov	r0, r7
 8004b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b52:	f7fb ff3d 	bl	80009d0 <__aeabi_dcmple>
 8004b56:	bb28      	cbnz	r0, 8004ba4 <_printf_float+0xb8>
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb ff2c 	bl	80009bc <__aeabi_dcmplt>
 8004b64:	b110      	cbz	r0, 8004b6c <_printf_float+0x80>
 8004b66:	232d      	movs	r3, #45	; 0x2d
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	4f9b      	ldr	r7, [pc, #620]	; (8004ddc <_printf_float+0x2f0>)
 8004b6e:	4b9c      	ldr	r3, [pc, #624]	; (8004de0 <_printf_float+0x2f4>)
 8004b70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b74:	bf98      	it	ls
 8004b76:	461f      	movls	r7, r3
 8004b78:	2303      	movs	r3, #3
 8004b7a:	f04f 0900 	mov.w	r9, #0
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	f02a 0304 	bic.w	r3, sl, #4
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	9600      	str	r6, [sp, #0]
 8004b88:	465b      	mov	r3, fp
 8004b8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f9e2 	bl	8004f58 <_printf_common>
 8004b94:	3001      	adds	r0, #1
 8004b96:	f040 8090 	bne.w	8004cba <_printf_float+0x1ce>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b9e:	b011      	add	sp, #68	; 0x44
 8004ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba4:	463a      	mov	r2, r7
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	4638      	mov	r0, r7
 8004baa:	4649      	mov	r1, r9
 8004bac:	f7fb ff2e 	bl	8000a0c <__aeabi_dcmpun>
 8004bb0:	b110      	cbz	r0, 8004bb8 <_printf_float+0xcc>
 8004bb2:	4f8c      	ldr	r7, [pc, #560]	; (8004de4 <_printf_float+0x2f8>)
 8004bb4:	4b8c      	ldr	r3, [pc, #560]	; (8004de8 <_printf_float+0x2fc>)
 8004bb6:	e7db      	b.n	8004b70 <_printf_float+0x84>
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004bbe:	1c59      	adds	r1, r3, #1
 8004bc0:	a80d      	add	r0, sp, #52	; 0x34
 8004bc2:	a90e      	add	r1, sp, #56	; 0x38
 8004bc4:	d140      	bne.n	8004c48 <_printf_float+0x15c>
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	f04f 0c00 	mov.w	ip, #0
 8004bce:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004bd2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	463a      	mov	r2, r7
 8004be2:	464b      	mov	r3, r9
 8004be4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004be8:	4628      	mov	r0, r5
 8004bea:	f7ff feee 	bl	80049ca <__cvt>
 8004bee:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004bf2:	2b47      	cmp	r3, #71	; 0x47
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	d109      	bne.n	8004c0c <_printf_float+0x120>
 8004bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bfa:	1cd8      	adds	r0, r3, #3
 8004bfc:	db02      	blt.n	8004c04 <_printf_float+0x118>
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	4293      	cmp	r3, r2
 8004c02:	dd47      	ble.n	8004c94 <_printf_float+0x1a8>
 8004c04:	f1a8 0802 	sub.w	r8, r8, #2
 8004c08:	fa5f f888 	uxtb.w	r8, r8
 8004c0c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c12:	d824      	bhi.n	8004c5e <_printf_float+0x172>
 8004c14:	3901      	subs	r1, #1
 8004c16:	4642      	mov	r2, r8
 8004c18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c1c:	910d      	str	r1, [sp, #52]	; 0x34
 8004c1e:	f7ff ff30 	bl	8004a82 <__exponent>
 8004c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c24:	4681      	mov	r9, r0
 8004c26:	1813      	adds	r3, r2, r0
 8004c28:	2a01      	cmp	r2, #1
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	dc02      	bgt.n	8004c34 <_printf_float+0x148>
 8004c2e:	6822      	ldr	r2, [r4, #0]
 8004c30:	07d1      	lsls	r1, r2, #31
 8004c32:	d501      	bpl.n	8004c38 <_printf_float+0x14c>
 8004c34:	3301      	adds	r3, #1
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0a2      	beq.n	8004b86 <_printf_float+0x9a>
 8004c40:	232d      	movs	r3, #45	; 0x2d
 8004c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c46:	e79e      	b.n	8004b86 <_printf_float+0x9a>
 8004c48:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c4c:	f000 816e 	beq.w	8004f2c <_printf_float+0x440>
 8004c50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c54:	d1b9      	bne.n	8004bca <_printf_float+0xde>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1b7      	bne.n	8004bca <_printf_float+0xde>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7b4      	b.n	8004bc8 <_printf_float+0xdc>
 8004c5e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c62:	d119      	bne.n	8004c98 <_printf_float+0x1ac>
 8004c64:	2900      	cmp	r1, #0
 8004c66:	6863      	ldr	r3, [r4, #4]
 8004c68:	dd0c      	ble.n	8004c84 <_printf_float+0x198>
 8004c6a:	6121      	str	r1, [r4, #16]
 8004c6c:	b913      	cbnz	r3, 8004c74 <_printf_float+0x188>
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	07d2      	lsls	r2, r2, #31
 8004c72:	d502      	bpl.n	8004c7a <_printf_float+0x18e>
 8004c74:	3301      	adds	r3, #1
 8004c76:	440b      	add	r3, r1
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c82:	e7d9      	b.n	8004c38 <_printf_float+0x14c>
 8004c84:	b913      	cbnz	r3, 8004c8c <_printf_float+0x1a0>
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	07d0      	lsls	r0, r2, #31
 8004c8a:	d501      	bpl.n	8004c90 <_printf_float+0x1a4>
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	e7f3      	b.n	8004c78 <_printf_float+0x18c>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e7f1      	b.n	8004c78 <_printf_float+0x18c>
 8004c94:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004c98:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	db05      	blt.n	8004cac <_printf_float+0x1c0>
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	07d1      	lsls	r1, r2, #31
 8004ca6:	d5e8      	bpl.n	8004c7a <_printf_float+0x18e>
 8004ca8:	3301      	adds	r3, #1
 8004caa:	e7e5      	b.n	8004c78 <_printf_float+0x18c>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bfcc      	ite	gt
 8004cb0:	2301      	movgt	r3, #1
 8004cb2:	f1c3 0302 	rsble	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	e7de      	b.n	8004c78 <_printf_float+0x18c>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	055a      	lsls	r2, r3, #21
 8004cbe:	d407      	bmi.n	8004cd0 <_printf_float+0x1e4>
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	463a      	mov	r2, r7
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b0      	blx	r6
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d129      	bne.n	8004d22 <_printf_float+0x236>
 8004cce:	e764      	b.n	8004b9a <_printf_float+0xae>
 8004cd0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004cd4:	f240 80d7 	bls.w	8004e86 <_printf_float+0x39a>
 8004cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7fb fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce4:	b388      	cbz	r0, 8004d4a <_printf_float+0x25e>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4a40      	ldr	r2, [pc, #256]	; (8004dec <_printf_float+0x300>)
 8004cea:	4659      	mov	r1, fp
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b0      	blx	r6
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	f43f af52 	beq.w	8004b9a <_printf_float+0xae>
 8004cf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	db02      	blt.n	8004d04 <_printf_float+0x218>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	07d8      	lsls	r0, r3, #31
 8004d02:	d50e      	bpl.n	8004d22 <_printf_float+0x236>
 8004d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d08:	4659      	mov	r1, fp
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b0      	blx	r6
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f af43 	beq.w	8004b9a <_printf_float+0xae>
 8004d14:	2700      	movs	r7, #0
 8004d16:	f104 081a 	add.w	r8, r4, #26
 8004d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	42bb      	cmp	r3, r7
 8004d20:	dc09      	bgt.n	8004d36 <_printf_float+0x24a>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	079f      	lsls	r7, r3, #30
 8004d26:	f100 80fd 	bmi.w	8004f24 <_printf_float+0x438>
 8004d2a:	68e0      	ldr	r0, [r4, #12]
 8004d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d2e:	4298      	cmp	r0, r3
 8004d30:	bfb8      	it	lt
 8004d32:	4618      	movlt	r0, r3
 8004d34:	e733      	b.n	8004b9e <_printf_float+0xb2>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4642      	mov	r2, r8
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b0      	blx	r6
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f af2a 	beq.w	8004b9a <_printf_float+0xae>
 8004d46:	3701      	adds	r7, #1
 8004d48:	e7e7      	b.n	8004d1a <_printf_float+0x22e>
 8004d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dc2b      	bgt.n	8004da8 <_printf_float+0x2bc>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4a26      	ldr	r2, [pc, #152]	; (8004dec <_printf_float+0x300>)
 8004d54:	4659      	mov	r1, fp
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b0      	blx	r6
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f af1d 	beq.w	8004b9a <_printf_float+0xae>
 8004d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d62:	b923      	cbnz	r3, 8004d6e <_printf_float+0x282>
 8004d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d66:	b913      	cbnz	r3, 8004d6e <_printf_float+0x282>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	07d9      	lsls	r1, r3, #31
 8004d6c:	d5d9      	bpl.n	8004d22 <_printf_float+0x236>
 8004d6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d72:	4659      	mov	r1, fp
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b0      	blx	r6
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f af0e 	beq.w	8004b9a <_printf_float+0xae>
 8004d7e:	f04f 0800 	mov.w	r8, #0
 8004d82:	f104 091a 	add.w	r9, r4, #26
 8004d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d88:	425b      	negs	r3, r3
 8004d8a:	4543      	cmp	r3, r8
 8004d8c:	dc01      	bgt.n	8004d92 <_printf_float+0x2a6>
 8004d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d90:	e797      	b.n	8004cc2 <_printf_float+0x1d6>
 8004d92:	2301      	movs	r3, #1
 8004d94:	464a      	mov	r2, r9
 8004d96:	4659      	mov	r1, fp
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b0      	blx	r6
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f aefc 	beq.w	8004b9a <_printf_float+0xae>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	e7ee      	b.n	8004d86 <_printf_float+0x29a>
 8004da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dac:	429a      	cmp	r2, r3
 8004dae:	bfa8      	it	ge
 8004db0:	461a      	movge	r2, r3
 8004db2:	2a00      	cmp	r2, #0
 8004db4:	4690      	mov	r8, r2
 8004db6:	dd07      	ble.n	8004dc8 <_printf_float+0x2dc>
 8004db8:	4613      	mov	r3, r2
 8004dba:	4659      	mov	r1, fp
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b0      	blx	r6
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f aee9 	beq.w	8004b9a <_printf_float+0xae>
 8004dc8:	f104 031a 	add.w	r3, r4, #26
 8004dcc:	f04f 0a00 	mov.w	sl, #0
 8004dd0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dd6:	e015      	b.n	8004e04 <_printf_float+0x318>
 8004dd8:	7fefffff 	.word	0x7fefffff
 8004ddc:	080074c8 	.word	0x080074c8
 8004de0:	080074c4 	.word	0x080074c4
 8004de4:	080074d0 	.word	0x080074d0
 8004de8:	080074cc 	.word	0x080074cc
 8004dec:	080074d4 	.word	0x080074d4
 8004df0:	2301      	movs	r3, #1
 8004df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004df4:	4659      	mov	r1, fp
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b0      	blx	r6
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f aecd 	beq.w	8004b9a <_printf_float+0xae>
 8004e00:	f10a 0a01 	add.w	sl, sl, #1
 8004e04:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e08:	eba9 0308 	sub.w	r3, r9, r8
 8004e0c:	4553      	cmp	r3, sl
 8004e0e:	dcef      	bgt.n	8004df0 <_printf_float+0x304>
 8004e10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e14:	429a      	cmp	r2, r3
 8004e16:	444f      	add	r7, r9
 8004e18:	db14      	blt.n	8004e44 <_printf_float+0x358>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	07da      	lsls	r2, r3, #31
 8004e1e:	d411      	bmi.n	8004e44 <_printf_float+0x358>
 8004e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e24:	eba3 0209 	sub.w	r2, r3, r9
 8004e28:	eba3 0901 	sub.w	r9, r3, r1
 8004e2c:	4591      	cmp	r9, r2
 8004e2e:	bfa8      	it	ge
 8004e30:	4691      	movge	r9, r2
 8004e32:	f1b9 0f00 	cmp.w	r9, #0
 8004e36:	dc0d      	bgt.n	8004e54 <_printf_float+0x368>
 8004e38:	2700      	movs	r7, #0
 8004e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e3e:	f104 081a 	add.w	r8, r4, #26
 8004e42:	e018      	b.n	8004e76 <_printf_float+0x38a>
 8004e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e48:	4659      	mov	r1, fp
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b0      	blx	r6
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d1e6      	bne.n	8004e20 <_printf_float+0x334>
 8004e52:	e6a2      	b.n	8004b9a <_printf_float+0xae>
 8004e54:	464b      	mov	r3, r9
 8004e56:	463a      	mov	r2, r7
 8004e58:	4659      	mov	r1, fp
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b0      	blx	r6
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d1ea      	bne.n	8004e38 <_printf_float+0x34c>
 8004e62:	e69a      	b.n	8004b9a <_printf_float+0xae>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4642      	mov	r2, r8
 8004e68:	4659      	mov	r1, fp
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b0      	blx	r6
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f ae93 	beq.w	8004b9a <_printf_float+0xae>
 8004e74:	3701      	adds	r7, #1
 8004e76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	eba3 0309 	sub.w	r3, r3, r9
 8004e80:	42bb      	cmp	r3, r7
 8004e82:	dcef      	bgt.n	8004e64 <_printf_float+0x378>
 8004e84:	e74d      	b.n	8004d22 <_printf_float+0x236>
 8004e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e88:	2a01      	cmp	r2, #1
 8004e8a:	dc01      	bgt.n	8004e90 <_printf_float+0x3a4>
 8004e8c:	07db      	lsls	r3, r3, #31
 8004e8e:	d538      	bpl.n	8004f02 <_printf_float+0x416>
 8004e90:	2301      	movs	r3, #1
 8004e92:	463a      	mov	r2, r7
 8004e94:	4659      	mov	r1, fp
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b0      	blx	r6
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	f43f ae7d 	beq.w	8004b9a <_printf_float+0xae>
 8004ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea4:	4659      	mov	r1, fp
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b0      	blx	r6
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f107 0701 	add.w	r7, r7, #1
 8004eb0:	f43f ae73 	beq.w	8004b9a <_printf_float+0xae>
 8004eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f7fb fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec6:	b9c0      	cbnz	r0, 8004efa <_printf_float+0x40e>
 8004ec8:	4643      	mov	r3, r8
 8004eca:	463a      	mov	r2, r7
 8004ecc:	4659      	mov	r1, fp
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b0      	blx	r6
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d10d      	bne.n	8004ef2 <_printf_float+0x406>
 8004ed6:	e660      	b.n	8004b9a <_printf_float+0xae>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4642      	mov	r2, r8
 8004edc:	4659      	mov	r1, fp
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b0      	blx	r6
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f ae59 	beq.w	8004b9a <_printf_float+0xae>
 8004ee8:	3701      	adds	r7, #1
 8004eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eec:	3b01      	subs	r3, #1
 8004eee:	42bb      	cmp	r3, r7
 8004ef0:	dcf2      	bgt.n	8004ed8 <_printf_float+0x3ec>
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ef8:	e6e4      	b.n	8004cc4 <_printf_float+0x1d8>
 8004efa:	2700      	movs	r7, #0
 8004efc:	f104 081a 	add.w	r8, r4, #26
 8004f00:	e7f3      	b.n	8004eea <_printf_float+0x3fe>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7e1      	b.n	8004eca <_printf_float+0x3de>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b0      	blx	r6
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae42 	beq.w	8004b9a <_printf_float+0xae>
 8004f16:	3701      	adds	r7, #1
 8004f18:	68e3      	ldr	r3, [r4, #12]
 8004f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	42bb      	cmp	r3, r7
 8004f20:	dcf1      	bgt.n	8004f06 <_printf_float+0x41a>
 8004f22:	e702      	b.n	8004d2a <_printf_float+0x23e>
 8004f24:	2700      	movs	r7, #0
 8004f26:	f104 0819 	add.w	r8, r4, #25
 8004f2a:	e7f5      	b.n	8004f18 <_printf_float+0x42c>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f43f ae94 	beq.w	8004c5a <_printf_float+0x16e>
 8004f32:	f04f 0c00 	mov.w	ip, #0
 8004f36:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f3a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f3e:	6022      	str	r2, [r4, #0]
 8004f40:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f44:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	463a      	mov	r2, r7
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7ff fd3b 	bl	80049ca <__cvt>
 8004f54:	4607      	mov	r7, r0
 8004f56:	e64f      	b.n	8004bf8 <_printf_float+0x10c>

08004f58 <_printf_common>:
 8004f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f5c:	4691      	mov	r9, r2
 8004f5e:	461f      	mov	r7, r3
 8004f60:	688a      	ldr	r2, [r1, #8]
 8004f62:	690b      	ldr	r3, [r1, #16]
 8004f64:	4606      	mov	r6, r0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bfb8      	it	lt
 8004f6a:	4613      	movlt	r3, r2
 8004f6c:	f8c9 3000 	str.w	r3, [r9]
 8004f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f74:	460c      	mov	r4, r1
 8004f76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f7a:	b112      	cbz	r2, 8004f82 <_printf_common+0x2a>
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f8c9 3000 	str.w	r3, [r9]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	0699      	lsls	r1, r3, #26
 8004f86:	bf42      	ittt	mi
 8004f88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f8c:	3302      	addmi	r3, #2
 8004f8e:	f8c9 3000 	strmi.w	r3, [r9]
 8004f92:	6825      	ldr	r5, [r4, #0]
 8004f94:	f015 0506 	ands.w	r5, r5, #6
 8004f98:	d107      	bne.n	8004faa <_printf_common+0x52>
 8004f9a:	f104 0a19 	add.w	sl, r4, #25
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	42ab      	cmp	r3, r5
 8004fa8:	dc29      	bgt.n	8004ffe <_printf_common+0xa6>
 8004faa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	3300      	adds	r3, #0
 8004fb2:	bf18      	it	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	0692      	lsls	r2, r2, #26
 8004fb8:	d42e      	bmi.n	8005018 <_printf_common+0xc0>
 8004fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	47c0      	blx	r8
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d021      	beq.n	800500c <_printf_common+0xb4>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	68e5      	ldr	r5, [r4, #12]
 8004fcc:	f003 0306 	and.w	r3, r3, #6
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	bf18      	it	ne
 8004fd4:	2500      	movne	r5, #0
 8004fd6:	f8d9 2000 	ldr.w	r2, [r9]
 8004fda:	f04f 0900 	mov.w	r9, #0
 8004fde:	bf08      	it	eq
 8004fe0:	1aad      	subeq	r5, r5, r2
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	6922      	ldr	r2, [r4, #16]
 8004fe6:	bf08      	it	eq
 8004fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fec:	4293      	cmp	r3, r2
 8004fee:	bfc4      	itt	gt
 8004ff0:	1a9b      	subgt	r3, r3, r2
 8004ff2:	18ed      	addgt	r5, r5, r3
 8004ff4:	341a      	adds	r4, #26
 8004ff6:	454d      	cmp	r5, r9
 8004ff8:	d11a      	bne.n	8005030 <_printf_common+0xd8>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e008      	b.n	8005010 <_printf_common+0xb8>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4652      	mov	r2, sl
 8005002:	4639      	mov	r1, r7
 8005004:	4630      	mov	r0, r6
 8005006:	47c0      	blx	r8
 8005008:	3001      	adds	r0, #1
 800500a:	d103      	bne.n	8005014 <_printf_common+0xbc>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	3501      	adds	r5, #1
 8005016:	e7c2      	b.n	8004f9e <_printf_common+0x46>
 8005018:	2030      	movs	r0, #48	; 0x30
 800501a:	18e1      	adds	r1, r4, r3
 800501c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005026:	4422      	add	r2, r4
 8005028:	3302      	adds	r3, #2
 800502a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800502e:	e7c4      	b.n	8004fba <_printf_common+0x62>
 8005030:	2301      	movs	r3, #1
 8005032:	4622      	mov	r2, r4
 8005034:	4639      	mov	r1, r7
 8005036:	4630      	mov	r0, r6
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d0e6      	beq.n	800500c <_printf_common+0xb4>
 800503e:	f109 0901 	add.w	r9, r9, #1
 8005042:	e7d8      	b.n	8004ff6 <_printf_common+0x9e>

08005044 <_printf_i>:
 8005044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005048:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800504c:	460c      	mov	r4, r1
 800504e:	7e09      	ldrb	r1, [r1, #24]
 8005050:	b085      	sub	sp, #20
 8005052:	296e      	cmp	r1, #110	; 0x6e
 8005054:	4617      	mov	r7, r2
 8005056:	4606      	mov	r6, r0
 8005058:	4698      	mov	r8, r3
 800505a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800505c:	f000 80b3 	beq.w	80051c6 <_printf_i+0x182>
 8005060:	d822      	bhi.n	80050a8 <_printf_i+0x64>
 8005062:	2963      	cmp	r1, #99	; 0x63
 8005064:	d036      	beq.n	80050d4 <_printf_i+0x90>
 8005066:	d80a      	bhi.n	800507e <_printf_i+0x3a>
 8005068:	2900      	cmp	r1, #0
 800506a:	f000 80b9 	beq.w	80051e0 <_printf_i+0x19c>
 800506e:	2958      	cmp	r1, #88	; 0x58
 8005070:	f000 8083 	beq.w	800517a <_printf_i+0x136>
 8005074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005078:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800507c:	e032      	b.n	80050e4 <_printf_i+0xa0>
 800507e:	2964      	cmp	r1, #100	; 0x64
 8005080:	d001      	beq.n	8005086 <_printf_i+0x42>
 8005082:	2969      	cmp	r1, #105	; 0x69
 8005084:	d1f6      	bne.n	8005074 <_printf_i+0x30>
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	6813      	ldr	r3, [r2, #0]
 800508a:	0605      	lsls	r5, r0, #24
 800508c:	f103 0104 	add.w	r1, r3, #4
 8005090:	d52a      	bpl.n	80050e8 <_printf_i+0xa4>
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	da03      	bge.n	80050a2 <_printf_i+0x5e>
 800509a:	222d      	movs	r2, #45	; 0x2d
 800509c:	425b      	negs	r3, r3
 800509e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050a2:	486f      	ldr	r0, [pc, #444]	; (8005260 <_printf_i+0x21c>)
 80050a4:	220a      	movs	r2, #10
 80050a6:	e039      	b.n	800511c <_printf_i+0xd8>
 80050a8:	2973      	cmp	r1, #115	; 0x73
 80050aa:	f000 809d 	beq.w	80051e8 <_printf_i+0x1a4>
 80050ae:	d808      	bhi.n	80050c2 <_printf_i+0x7e>
 80050b0:	296f      	cmp	r1, #111	; 0x6f
 80050b2:	d020      	beq.n	80050f6 <_printf_i+0xb2>
 80050b4:	2970      	cmp	r1, #112	; 0x70
 80050b6:	d1dd      	bne.n	8005074 <_printf_i+0x30>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	f043 0320 	orr.w	r3, r3, #32
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	e003      	b.n	80050ca <_printf_i+0x86>
 80050c2:	2975      	cmp	r1, #117	; 0x75
 80050c4:	d017      	beq.n	80050f6 <_printf_i+0xb2>
 80050c6:	2978      	cmp	r1, #120	; 0x78
 80050c8:	d1d4      	bne.n	8005074 <_printf_i+0x30>
 80050ca:	2378      	movs	r3, #120	; 0x78
 80050cc:	4865      	ldr	r0, [pc, #404]	; (8005264 <_printf_i+0x220>)
 80050ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050d2:	e055      	b.n	8005180 <_printf_i+0x13c>
 80050d4:	6813      	ldr	r3, [r2, #0]
 80050d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050da:	1d19      	adds	r1, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6011      	str	r1, [r2, #0]
 80050e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e4:	2301      	movs	r3, #1
 80050e6:	e08c      	b.n	8005202 <_printf_i+0x1be>
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ee:	6011      	str	r1, [r2, #0]
 80050f0:	bf18      	it	ne
 80050f2:	b21b      	sxthne	r3, r3
 80050f4:	e7cf      	b.n	8005096 <_printf_i+0x52>
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	1d18      	adds	r0, r3, #4
 80050fc:	6010      	str	r0, [r2, #0]
 80050fe:	0628      	lsls	r0, r5, #24
 8005100:	d501      	bpl.n	8005106 <_printf_i+0xc2>
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	e002      	b.n	800510c <_printf_i+0xc8>
 8005106:	0668      	lsls	r0, r5, #25
 8005108:	d5fb      	bpl.n	8005102 <_printf_i+0xbe>
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	296f      	cmp	r1, #111	; 0x6f
 800510e:	bf14      	ite	ne
 8005110:	220a      	movne	r2, #10
 8005112:	2208      	moveq	r2, #8
 8005114:	4852      	ldr	r0, [pc, #328]	; (8005260 <_printf_i+0x21c>)
 8005116:	2100      	movs	r1, #0
 8005118:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511c:	6865      	ldr	r5, [r4, #4]
 800511e:	2d00      	cmp	r5, #0
 8005120:	60a5      	str	r5, [r4, #8]
 8005122:	f2c0 8095 	blt.w	8005250 <_printf_i+0x20c>
 8005126:	6821      	ldr	r1, [r4, #0]
 8005128:	f021 0104 	bic.w	r1, r1, #4
 800512c:	6021      	str	r1, [r4, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d13d      	bne.n	80051ae <_printf_i+0x16a>
 8005132:	2d00      	cmp	r5, #0
 8005134:	f040 808e 	bne.w	8005254 <_printf_i+0x210>
 8005138:	4665      	mov	r5, ip
 800513a:	2a08      	cmp	r2, #8
 800513c:	d10b      	bne.n	8005156 <_printf_i+0x112>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	07db      	lsls	r3, r3, #31
 8005142:	d508      	bpl.n	8005156 <_printf_i+0x112>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	bfde      	ittt	le
 800514c:	2330      	movle	r3, #48	; 0x30
 800514e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005152:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005156:	ebac 0305 	sub.w	r3, ip, r5
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	f8cd 8000 	str.w	r8, [sp]
 8005160:	463b      	mov	r3, r7
 8005162:	aa03      	add	r2, sp, #12
 8005164:	4621      	mov	r1, r4
 8005166:	4630      	mov	r0, r6
 8005168:	f7ff fef6 	bl	8004f58 <_printf_common>
 800516c:	3001      	adds	r0, #1
 800516e:	d14d      	bne.n	800520c <_printf_i+0x1c8>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005174:	b005      	add	sp, #20
 8005176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800517a:	4839      	ldr	r0, [pc, #228]	; (8005260 <_printf_i+0x21c>)
 800517c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	1d1d      	adds	r5, r3, #4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6015      	str	r5, [r2, #0]
 800518a:	060a      	lsls	r2, r1, #24
 800518c:	d50b      	bpl.n	80051a6 <_printf_i+0x162>
 800518e:	07ca      	lsls	r2, r1, #31
 8005190:	bf44      	itt	mi
 8005192:	f041 0120 	orrmi.w	r1, r1, #32
 8005196:	6021      	strmi	r1, [r4, #0]
 8005198:	b91b      	cbnz	r3, 80051a2 <_printf_i+0x15e>
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	f022 0220 	bic.w	r2, r2, #32
 80051a0:	6022      	str	r2, [r4, #0]
 80051a2:	2210      	movs	r2, #16
 80051a4:	e7b7      	b.n	8005116 <_printf_i+0xd2>
 80051a6:	064d      	lsls	r5, r1, #25
 80051a8:	bf48      	it	mi
 80051aa:	b29b      	uxthmi	r3, r3
 80051ac:	e7ef      	b.n	800518e <_printf_i+0x14a>
 80051ae:	4665      	mov	r5, ip
 80051b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80051b4:	fb02 3311 	mls	r3, r2, r1, r3
 80051b8:	5cc3      	ldrb	r3, [r0, r3]
 80051ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051be:	460b      	mov	r3, r1
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d1f5      	bne.n	80051b0 <_printf_i+0x16c>
 80051c4:	e7b9      	b.n	800513a <_printf_i+0xf6>
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	6825      	ldr	r5, [r4, #0]
 80051ca:	1d18      	adds	r0, r3, #4
 80051cc:	6961      	ldr	r1, [r4, #20]
 80051ce:	6010      	str	r0, [r2, #0]
 80051d0:	0628      	lsls	r0, r5, #24
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	d501      	bpl.n	80051da <_printf_i+0x196>
 80051d6:	6019      	str	r1, [r3, #0]
 80051d8:	e002      	b.n	80051e0 <_printf_i+0x19c>
 80051da:	066a      	lsls	r2, r5, #25
 80051dc:	d5fb      	bpl.n	80051d6 <_printf_i+0x192>
 80051de:	8019      	strh	r1, [r3, #0]
 80051e0:	2300      	movs	r3, #0
 80051e2:	4665      	mov	r5, ip
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	e7b9      	b.n	800515c <_printf_i+0x118>
 80051e8:	6813      	ldr	r3, [r2, #0]
 80051ea:	1d19      	adds	r1, r3, #4
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	681d      	ldr	r5, [r3, #0]
 80051f0:	6862      	ldr	r2, [r4, #4]
 80051f2:	2100      	movs	r1, #0
 80051f4:	4628      	mov	r0, r5
 80051f6:	f001 f9ab 	bl	8006550 <memchr>
 80051fa:	b108      	cbz	r0, 8005200 <_printf_i+0x1bc>
 80051fc:	1b40      	subs	r0, r0, r5
 80051fe:	6060      	str	r0, [r4, #4]
 8005200:	6863      	ldr	r3, [r4, #4]
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	2300      	movs	r3, #0
 8005206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520a:	e7a7      	b.n	800515c <_printf_i+0x118>
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	462a      	mov	r2, r5
 8005210:	4639      	mov	r1, r7
 8005212:	4630      	mov	r0, r6
 8005214:	47c0      	blx	r8
 8005216:	3001      	adds	r0, #1
 8005218:	d0aa      	beq.n	8005170 <_printf_i+0x12c>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	079b      	lsls	r3, r3, #30
 800521e:	d413      	bmi.n	8005248 <_printf_i+0x204>
 8005220:	68e0      	ldr	r0, [r4, #12]
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	4298      	cmp	r0, r3
 8005226:	bfb8      	it	lt
 8005228:	4618      	movlt	r0, r3
 800522a:	e7a3      	b.n	8005174 <_printf_i+0x130>
 800522c:	2301      	movs	r3, #1
 800522e:	464a      	mov	r2, r9
 8005230:	4639      	mov	r1, r7
 8005232:	4630      	mov	r0, r6
 8005234:	47c0      	blx	r8
 8005236:	3001      	adds	r0, #1
 8005238:	d09a      	beq.n	8005170 <_printf_i+0x12c>
 800523a:	3501      	adds	r5, #1
 800523c:	68e3      	ldr	r3, [r4, #12]
 800523e:	9a03      	ldr	r2, [sp, #12]
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	42ab      	cmp	r3, r5
 8005244:	dcf2      	bgt.n	800522c <_printf_i+0x1e8>
 8005246:	e7eb      	b.n	8005220 <_printf_i+0x1dc>
 8005248:	2500      	movs	r5, #0
 800524a:	f104 0919 	add.w	r9, r4, #25
 800524e:	e7f5      	b.n	800523c <_printf_i+0x1f8>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ac      	bne.n	80051ae <_printf_i+0x16a>
 8005254:	7803      	ldrb	r3, [r0, #0]
 8005256:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525e:	e76c      	b.n	800513a <_printf_i+0xf6>
 8005260:	080074d6 	.word	0x080074d6
 8005264:	080074e7 	.word	0x080074e7

08005268 <iprintf>:
 8005268:	b40f      	push	{r0, r1, r2, r3}
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <iprintf+0x2c>)
 800526c:	b513      	push	{r0, r1, r4, lr}
 800526e:	681c      	ldr	r4, [r3, #0]
 8005270:	b124      	cbz	r4, 800527c <iprintf+0x14>
 8005272:	69a3      	ldr	r3, [r4, #24]
 8005274:	b913      	cbnz	r3, 800527c <iprintf+0x14>
 8005276:	4620      	mov	r0, r4
 8005278:	f001 f866 	bl	8006348 <__sinit>
 800527c:	ab05      	add	r3, sp, #20
 800527e:	9a04      	ldr	r2, [sp, #16]
 8005280:	68a1      	ldr	r1, [r4, #8]
 8005282:	4620      	mov	r0, r4
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	f001 fd29 	bl	8006cdc <_vfiprintf_r>
 800528a:	b002      	add	sp, #8
 800528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005290:	b004      	add	sp, #16
 8005292:	4770      	bx	lr
 8005294:	2000000c 	.word	0x2000000c

08005298 <_puts_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	460e      	mov	r6, r1
 800529c:	4605      	mov	r5, r0
 800529e:	b118      	cbz	r0, 80052a8 <_puts_r+0x10>
 80052a0:	6983      	ldr	r3, [r0, #24]
 80052a2:	b90b      	cbnz	r3, 80052a8 <_puts_r+0x10>
 80052a4:	f001 f850 	bl	8006348 <__sinit>
 80052a8:	69ab      	ldr	r3, [r5, #24]
 80052aa:	68ac      	ldr	r4, [r5, #8]
 80052ac:	b913      	cbnz	r3, 80052b4 <_puts_r+0x1c>
 80052ae:	4628      	mov	r0, r5
 80052b0:	f001 f84a 	bl	8006348 <__sinit>
 80052b4:	4b23      	ldr	r3, [pc, #140]	; (8005344 <_puts_r+0xac>)
 80052b6:	429c      	cmp	r4, r3
 80052b8:	d117      	bne.n	80052ea <_puts_r+0x52>
 80052ba:	686c      	ldr	r4, [r5, #4]
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	071b      	lsls	r3, r3, #28
 80052c0:	d51d      	bpl.n	80052fe <_puts_r+0x66>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	b1db      	cbz	r3, 80052fe <_puts_r+0x66>
 80052c6:	3e01      	subs	r6, #1
 80052c8:	68a3      	ldr	r3, [r4, #8]
 80052ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052ce:	3b01      	subs	r3, #1
 80052d0:	60a3      	str	r3, [r4, #8]
 80052d2:	b9e9      	cbnz	r1, 8005310 <_puts_r+0x78>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	da2e      	bge.n	8005336 <_puts_r+0x9e>
 80052d8:	4622      	mov	r2, r4
 80052da:	210a      	movs	r1, #10
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 f83f 	bl	8005360 <__swbuf_r>
 80052e2:	3001      	adds	r0, #1
 80052e4:	d011      	beq.n	800530a <_puts_r+0x72>
 80052e6:	200a      	movs	r0, #10
 80052e8:	e011      	b.n	800530e <_puts_r+0x76>
 80052ea:	4b17      	ldr	r3, [pc, #92]	; (8005348 <_puts_r+0xb0>)
 80052ec:	429c      	cmp	r4, r3
 80052ee:	d101      	bne.n	80052f4 <_puts_r+0x5c>
 80052f0:	68ac      	ldr	r4, [r5, #8]
 80052f2:	e7e3      	b.n	80052bc <_puts_r+0x24>
 80052f4:	4b15      	ldr	r3, [pc, #84]	; (800534c <_puts_r+0xb4>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	bf08      	it	eq
 80052fa:	68ec      	ldreq	r4, [r5, #12]
 80052fc:	e7de      	b.n	80052bc <_puts_r+0x24>
 80052fe:	4621      	mov	r1, r4
 8005300:	4628      	mov	r0, r5
 8005302:	f000 f87f 	bl	8005404 <__swsetup_r>
 8005306:	2800      	cmp	r0, #0
 8005308:	d0dd      	beq.n	80052c6 <_puts_r+0x2e>
 800530a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	2b00      	cmp	r3, #0
 8005312:	da04      	bge.n	800531e <_puts_r+0x86>
 8005314:	69a2      	ldr	r2, [r4, #24]
 8005316:	429a      	cmp	r2, r3
 8005318:	dc06      	bgt.n	8005328 <_puts_r+0x90>
 800531a:	290a      	cmp	r1, #10
 800531c:	d004      	beq.n	8005328 <_puts_r+0x90>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	7019      	strb	r1, [r3, #0]
 8005326:	e7cf      	b.n	80052c8 <_puts_r+0x30>
 8005328:	4622      	mov	r2, r4
 800532a:	4628      	mov	r0, r5
 800532c:	f000 f818 	bl	8005360 <__swbuf_r>
 8005330:	3001      	adds	r0, #1
 8005332:	d1c9      	bne.n	80052c8 <_puts_r+0x30>
 8005334:	e7e9      	b.n	800530a <_puts_r+0x72>
 8005336:	200a      	movs	r0, #10
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	6022      	str	r2, [r4, #0]
 800533e:	7018      	strb	r0, [r3, #0]
 8005340:	e7e5      	b.n	800530e <_puts_r+0x76>
 8005342:	bf00      	nop
 8005344:	08007528 	.word	0x08007528
 8005348:	08007548 	.word	0x08007548
 800534c:	08007508 	.word	0x08007508

08005350 <puts>:
 8005350:	4b02      	ldr	r3, [pc, #8]	; (800535c <puts+0xc>)
 8005352:	4601      	mov	r1, r0
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	f7ff bf9f 	b.w	8005298 <_puts_r>
 800535a:	bf00      	nop
 800535c:	2000000c 	.word	0x2000000c

08005360 <__swbuf_r>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	460e      	mov	r6, r1
 8005364:	4614      	mov	r4, r2
 8005366:	4605      	mov	r5, r0
 8005368:	b118      	cbz	r0, 8005372 <__swbuf_r+0x12>
 800536a:	6983      	ldr	r3, [r0, #24]
 800536c:	b90b      	cbnz	r3, 8005372 <__swbuf_r+0x12>
 800536e:	f000 ffeb 	bl	8006348 <__sinit>
 8005372:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <__swbuf_r+0x98>)
 8005374:	429c      	cmp	r4, r3
 8005376:	d12a      	bne.n	80053ce <__swbuf_r+0x6e>
 8005378:	686c      	ldr	r4, [r5, #4]
 800537a:	69a3      	ldr	r3, [r4, #24]
 800537c:	60a3      	str	r3, [r4, #8]
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	071a      	lsls	r2, r3, #28
 8005382:	d52e      	bpl.n	80053e2 <__swbuf_r+0x82>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	b363      	cbz	r3, 80053e2 <__swbuf_r+0x82>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	b2f6      	uxtb	r6, r6
 800538e:	1ac0      	subs	r0, r0, r3
 8005390:	6963      	ldr	r3, [r4, #20]
 8005392:	4637      	mov	r7, r6
 8005394:	4283      	cmp	r3, r0
 8005396:	dc04      	bgt.n	80053a2 <__swbuf_r+0x42>
 8005398:	4621      	mov	r1, r4
 800539a:	4628      	mov	r0, r5
 800539c:	f000 ff6a 	bl	8006274 <_fflush_r>
 80053a0:	bb28      	cbnz	r0, 80053ee <__swbuf_r+0x8e>
 80053a2:	68a3      	ldr	r3, [r4, #8]
 80053a4:	3001      	adds	r0, #1
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	701e      	strb	r6, [r3, #0]
 80053b2:	6963      	ldr	r3, [r4, #20]
 80053b4:	4283      	cmp	r3, r0
 80053b6:	d004      	beq.n	80053c2 <__swbuf_r+0x62>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	07db      	lsls	r3, r3, #31
 80053bc:	d519      	bpl.n	80053f2 <__swbuf_r+0x92>
 80053be:	2e0a      	cmp	r6, #10
 80053c0:	d117      	bne.n	80053f2 <__swbuf_r+0x92>
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 ff55 	bl	8006274 <_fflush_r>
 80053ca:	b190      	cbz	r0, 80053f2 <__swbuf_r+0x92>
 80053cc:	e00f      	b.n	80053ee <__swbuf_r+0x8e>
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <__swbuf_r+0x9c>)
 80053d0:	429c      	cmp	r4, r3
 80053d2:	d101      	bne.n	80053d8 <__swbuf_r+0x78>
 80053d4:	68ac      	ldr	r4, [r5, #8]
 80053d6:	e7d0      	b.n	800537a <__swbuf_r+0x1a>
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <__swbuf_r+0xa0>)
 80053da:	429c      	cmp	r4, r3
 80053dc:	bf08      	it	eq
 80053de:	68ec      	ldreq	r4, [r5, #12]
 80053e0:	e7cb      	b.n	800537a <__swbuf_r+0x1a>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f80d 	bl	8005404 <__swsetup_r>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d0cc      	beq.n	8005388 <__swbuf_r+0x28>
 80053ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053f2:	4638      	mov	r0, r7
 80053f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	08007528 	.word	0x08007528
 80053fc:	08007548 	.word	0x08007548
 8005400:	08007508 	.word	0x08007508

08005404 <__swsetup_r>:
 8005404:	4b32      	ldr	r3, [pc, #200]	; (80054d0 <__swsetup_r+0xcc>)
 8005406:	b570      	push	{r4, r5, r6, lr}
 8005408:	681d      	ldr	r5, [r3, #0]
 800540a:	4606      	mov	r6, r0
 800540c:	460c      	mov	r4, r1
 800540e:	b125      	cbz	r5, 800541a <__swsetup_r+0x16>
 8005410:	69ab      	ldr	r3, [r5, #24]
 8005412:	b913      	cbnz	r3, 800541a <__swsetup_r+0x16>
 8005414:	4628      	mov	r0, r5
 8005416:	f000 ff97 	bl	8006348 <__sinit>
 800541a:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <__swsetup_r+0xd0>)
 800541c:	429c      	cmp	r4, r3
 800541e:	d10f      	bne.n	8005440 <__swsetup_r+0x3c>
 8005420:	686c      	ldr	r4, [r5, #4]
 8005422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005426:	b29a      	uxth	r2, r3
 8005428:	0715      	lsls	r5, r2, #28
 800542a:	d42c      	bmi.n	8005486 <__swsetup_r+0x82>
 800542c:	06d0      	lsls	r0, r2, #27
 800542e:	d411      	bmi.n	8005454 <__swsetup_r+0x50>
 8005430:	2209      	movs	r2, #9
 8005432:	6032      	str	r2, [r6, #0]
 8005434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800543e:	e03e      	b.n	80054be <__swsetup_r+0xba>
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <__swsetup_r+0xd4>)
 8005442:	429c      	cmp	r4, r3
 8005444:	d101      	bne.n	800544a <__swsetup_r+0x46>
 8005446:	68ac      	ldr	r4, [r5, #8]
 8005448:	e7eb      	b.n	8005422 <__swsetup_r+0x1e>
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <__swsetup_r+0xd8>)
 800544c:	429c      	cmp	r4, r3
 800544e:	bf08      	it	eq
 8005450:	68ec      	ldreq	r4, [r5, #12]
 8005452:	e7e6      	b.n	8005422 <__swsetup_r+0x1e>
 8005454:	0751      	lsls	r1, r2, #29
 8005456:	d512      	bpl.n	800547e <__swsetup_r+0x7a>
 8005458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800545a:	b141      	cbz	r1, 800546e <__swsetup_r+0x6a>
 800545c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005460:	4299      	cmp	r1, r3
 8005462:	d002      	beq.n	800546a <__swsetup_r+0x66>
 8005464:	4630      	mov	r0, r6
 8005466:	f001 fb6b 	bl	8006b40 <_free_r>
 800546a:	2300      	movs	r3, #0
 800546c:	6363      	str	r3, [r4, #52]	; 0x34
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005474:	81a3      	strh	r3, [r4, #12]
 8005476:	2300      	movs	r3, #0
 8005478:	6063      	str	r3, [r4, #4]
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f043 0308 	orr.w	r3, r3, #8
 8005484:	81a3      	strh	r3, [r4, #12]
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	b94b      	cbnz	r3, 800549e <__swsetup_r+0x9a>
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005494:	d003      	beq.n	800549e <__swsetup_r+0x9a>
 8005496:	4621      	mov	r1, r4
 8005498:	4630      	mov	r0, r6
 800549a:	f001 f811 	bl	80064c0 <__smakebuf_r>
 800549e:	89a2      	ldrh	r2, [r4, #12]
 80054a0:	f012 0301 	ands.w	r3, r2, #1
 80054a4:	d00c      	beq.n	80054c0 <__swsetup_r+0xbc>
 80054a6:	2300      	movs	r3, #0
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	6963      	ldr	r3, [r4, #20]
 80054ac:	425b      	negs	r3, r3
 80054ae:	61a3      	str	r3, [r4, #24]
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b953      	cbnz	r3, 80054ca <__swsetup_r+0xc6>
 80054b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80054bc:	d1ba      	bne.n	8005434 <__swsetup_r+0x30>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	0792      	lsls	r2, r2, #30
 80054c2:	bf58      	it	pl
 80054c4:	6963      	ldrpl	r3, [r4, #20]
 80054c6:	60a3      	str	r3, [r4, #8]
 80054c8:	e7f2      	b.n	80054b0 <__swsetup_r+0xac>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e7f7      	b.n	80054be <__swsetup_r+0xba>
 80054ce:	bf00      	nop
 80054d0:	2000000c 	.word	0x2000000c
 80054d4:	08007528 	.word	0x08007528
 80054d8:	08007548 	.word	0x08007548
 80054dc:	08007508 	.word	0x08007508

080054e0 <quorem>:
 80054e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	6903      	ldr	r3, [r0, #16]
 80054e6:	690c      	ldr	r4, [r1, #16]
 80054e8:	4680      	mov	r8, r0
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	f2c0 8084 	blt.w	80055f8 <quorem+0x118>
 80054f0:	3c01      	subs	r4, #1
 80054f2:	f101 0714 	add.w	r7, r1, #20
 80054f6:	f100 0614 	add.w	r6, r0, #20
 80054fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005502:	3501      	adds	r5, #1
 8005504:	fbb0 f5f5 	udiv	r5, r0, r5
 8005508:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800550c:	eb06 030c 	add.w	r3, r6, ip
 8005510:	eb07 090c 	add.w	r9, r7, ip
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	b39d      	cbz	r5, 8005580 <quorem+0xa0>
 8005518:	f04f 0a00 	mov.w	sl, #0
 800551c:	4638      	mov	r0, r7
 800551e:	46b6      	mov	lr, r6
 8005520:	46d3      	mov	fp, sl
 8005522:	f850 2b04 	ldr.w	r2, [r0], #4
 8005526:	b293      	uxth	r3, r2
 8005528:	fb05 a303 	mla	r3, r5, r3, sl
 800552c:	0c12      	lsrs	r2, r2, #16
 800552e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005532:	fb05 a202 	mla	r2, r5, r2, sl
 8005536:	b29b      	uxth	r3, r3
 8005538:	ebab 0303 	sub.w	r3, fp, r3
 800553c:	f8de b000 	ldr.w	fp, [lr]
 8005540:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005544:	fa1f fb8b 	uxth.w	fp, fp
 8005548:	445b      	add	r3, fp
 800554a:	fa1f fb82 	uxth.w	fp, r2
 800554e:	f8de 2000 	ldr.w	r2, [lr]
 8005552:	4581      	cmp	r9, r0
 8005554:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005562:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005566:	f84e 3b04 	str.w	r3, [lr], #4
 800556a:	d2da      	bcs.n	8005522 <quorem+0x42>
 800556c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005570:	b933      	cbnz	r3, 8005580 <quorem+0xa0>
 8005572:	9b01      	ldr	r3, [sp, #4]
 8005574:	3b04      	subs	r3, #4
 8005576:	429e      	cmp	r6, r3
 8005578:	461a      	mov	r2, r3
 800557a:	d331      	bcc.n	80055e0 <quorem+0x100>
 800557c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005580:	4640      	mov	r0, r8
 8005582:	f001 fa07 	bl	8006994 <__mcmp>
 8005586:	2800      	cmp	r0, #0
 8005588:	db26      	blt.n	80055d8 <quorem+0xf8>
 800558a:	4630      	mov	r0, r6
 800558c:	f04f 0c00 	mov.w	ip, #0
 8005590:	3501      	adds	r5, #1
 8005592:	f857 1b04 	ldr.w	r1, [r7], #4
 8005596:	f8d0 e000 	ldr.w	lr, [r0]
 800559a:	b28b      	uxth	r3, r1
 800559c:	ebac 0303 	sub.w	r3, ip, r3
 80055a0:	fa1f f28e 	uxth.w	r2, lr
 80055a4:	4413      	add	r3, r2
 80055a6:	0c0a      	lsrs	r2, r1, #16
 80055a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b6:	45b9      	cmp	r9, r7
 80055b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055bc:	f840 3b04 	str.w	r3, [r0], #4
 80055c0:	d2e7      	bcs.n	8005592 <quorem+0xb2>
 80055c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80055c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80055ca:	b92a      	cbnz	r2, 80055d8 <quorem+0xf8>
 80055cc:	3b04      	subs	r3, #4
 80055ce:	429e      	cmp	r6, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	d30b      	bcc.n	80055ec <quorem+0x10c>
 80055d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80055d8:	4628      	mov	r0, r5
 80055da:	b003      	add	sp, #12
 80055dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	3b04      	subs	r3, #4
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	d1c9      	bne.n	800557c <quorem+0x9c>
 80055e8:	3c01      	subs	r4, #1
 80055ea:	e7c4      	b.n	8005576 <quorem+0x96>
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	3b04      	subs	r3, #4
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d1ef      	bne.n	80055d4 <quorem+0xf4>
 80055f4:	3c01      	subs	r4, #1
 80055f6:	e7ea      	b.n	80055ce <quorem+0xee>
 80055f8:	2000      	movs	r0, #0
 80055fa:	e7ee      	b.n	80055da <quorem+0xfa>
 80055fc:	0000      	movs	r0, r0
	...

08005600 <_dtoa_r>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	4616      	mov	r6, r2
 8005606:	461f      	mov	r7, r3
 8005608:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800560a:	b095      	sub	sp, #84	; 0x54
 800560c:	4604      	mov	r4, r0
 800560e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005612:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005616:	b93d      	cbnz	r5, 8005628 <_dtoa_r+0x28>
 8005618:	2010      	movs	r0, #16
 800561a:	f000 ff91 	bl	8006540 <malloc>
 800561e:	6260      	str	r0, [r4, #36]	; 0x24
 8005620:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005624:	6005      	str	r5, [r0, #0]
 8005626:	60c5      	str	r5, [r0, #12]
 8005628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	b151      	cbz	r1, 8005644 <_dtoa_r+0x44>
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	2301      	movs	r3, #1
 8005632:	4093      	lsls	r3, r2
 8005634:	604a      	str	r2, [r1, #4]
 8005636:	608b      	str	r3, [r1, #8]
 8005638:	4620      	mov	r0, r4
 800563a:	f000 ffcb 	bl	80065d4 <_Bfree>
 800563e:	2200      	movs	r2, #0
 8005640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	1e3b      	subs	r3, r7, #0
 8005646:	bfaf      	iteee	ge
 8005648:	2300      	movge	r3, #0
 800564a:	2201      	movlt	r2, #1
 800564c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005650:	9303      	strlt	r3, [sp, #12]
 8005652:	bfac      	ite	ge
 8005654:	f8c8 3000 	strge.w	r3, [r8]
 8005658:	f8c8 2000 	strlt.w	r2, [r8]
 800565c:	4bae      	ldr	r3, [pc, #696]	; (8005918 <_dtoa_r+0x318>)
 800565e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005662:	ea33 0308 	bics.w	r3, r3, r8
 8005666:	d11b      	bne.n	80056a0 <_dtoa_r+0xa0>
 8005668:	f242 730f 	movw	r3, #9999	; 0x270f
 800566c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	b923      	cbnz	r3, 800567e <_dtoa_r+0x7e>
 8005674:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005678:	2800      	cmp	r0, #0
 800567a:	f000 8545 	beq.w	8006108 <_dtoa_r+0xb08>
 800567e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005680:	b953      	cbnz	r3, 8005698 <_dtoa_r+0x98>
 8005682:	4ba6      	ldr	r3, [pc, #664]	; (800591c <_dtoa_r+0x31c>)
 8005684:	e021      	b.n	80056ca <_dtoa_r+0xca>
 8005686:	4ba6      	ldr	r3, [pc, #664]	; (8005920 <_dtoa_r+0x320>)
 8005688:	9306      	str	r3, [sp, #24]
 800568a:	3308      	adds	r3, #8
 800568c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	9806      	ldr	r0, [sp, #24]
 8005692:	b015      	add	sp, #84	; 0x54
 8005694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005698:	4ba0      	ldr	r3, [pc, #640]	; (800591c <_dtoa_r+0x31c>)
 800569a:	9306      	str	r3, [sp, #24]
 800569c:	3303      	adds	r3, #3
 800569e:	e7f5      	b.n	800568c <_dtoa_r+0x8c>
 80056a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2300      	movs	r3, #0
 80056a8:	4630      	mov	r0, r6
 80056aa:	4639      	mov	r1, r7
 80056ac:	f7fb f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80056b0:	4682      	mov	sl, r0
 80056b2:	b160      	cbz	r0, 80056ce <_dtoa_r+0xce>
 80056b4:	2301      	movs	r3, #1
 80056b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8520 	beq.w	8006102 <_dtoa_r+0xb02>
 80056c2:	4b98      	ldr	r3, [pc, #608]	; (8005924 <_dtoa_r+0x324>)
 80056c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	9306      	str	r3, [sp, #24]
 80056cc:	e7e0      	b.n	8005690 <_dtoa_r+0x90>
 80056ce:	ab12      	add	r3, sp, #72	; 0x48
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	ab13      	add	r3, sp, #76	; 0x4c
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	4632      	mov	r2, r6
 80056d8:	463b      	mov	r3, r7
 80056da:	4620      	mov	r0, r4
 80056dc:	f001 f9d2 	bl	8006a84 <__d2b>
 80056e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80056e4:	4683      	mov	fp, r0
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	d07d      	beq.n	80057e6 <_dtoa_r+0x1e6>
 80056ea:	46b0      	mov	r8, r6
 80056ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80056f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80056f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005700:	2200      	movs	r2, #0
 8005702:	4b89      	ldr	r3, [pc, #548]	; (8005928 <_dtoa_r+0x328>)
 8005704:	4640      	mov	r0, r8
 8005706:	4649      	mov	r1, r9
 8005708:	f7fa fd2e 	bl	8000168 <__aeabi_dsub>
 800570c:	a37c      	add	r3, pc, #496	; (adr r3, 8005900 <_dtoa_r+0x300>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f7fa fee1 	bl	80004d8 <__aeabi_dmul>
 8005716:	a37c      	add	r3, pc, #496	; (adr r3, 8005908 <_dtoa_r+0x308>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa fd26 	bl	800016c <__adddf3>
 8005720:	4606      	mov	r6, r0
 8005722:	4628      	mov	r0, r5
 8005724:	460f      	mov	r7, r1
 8005726:	f7fa fe6d 	bl	8000404 <__aeabi_i2d>
 800572a:	a379      	add	r3, pc, #484	; (adr r3, 8005910 <_dtoa_r+0x310>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fa fed2 	bl	80004d8 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f7fa fd16 	bl	800016c <__adddf3>
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	f7fb f978 	bl	8000a38 <__aeabi_d2iz>
 8005748:	2200      	movs	r2, #0
 800574a:	4682      	mov	sl, r0
 800574c:	2300      	movs	r3, #0
 800574e:	4630      	mov	r0, r6
 8005750:	4639      	mov	r1, r7
 8005752:	f7fb f933 	bl	80009bc <__aeabi_dcmplt>
 8005756:	b148      	cbz	r0, 800576c <_dtoa_r+0x16c>
 8005758:	4650      	mov	r0, sl
 800575a:	f7fa fe53 	bl	8000404 <__aeabi_i2d>
 800575e:	4632      	mov	r2, r6
 8005760:	463b      	mov	r3, r7
 8005762:	f7fb f921 	bl	80009a8 <__aeabi_dcmpeq>
 8005766:	b908      	cbnz	r0, 800576c <_dtoa_r+0x16c>
 8005768:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800576c:	f1ba 0f16 	cmp.w	sl, #22
 8005770:	d85a      	bhi.n	8005828 <_dtoa_r+0x228>
 8005772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005776:	496d      	ldr	r1, [pc, #436]	; (800592c <_dtoa_r+0x32c>)
 8005778:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800577c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005780:	f7fb f93a 	bl	80009f8 <__aeabi_dcmpgt>
 8005784:	2800      	cmp	r0, #0
 8005786:	d051      	beq.n	800582c <_dtoa_r+0x22c>
 8005788:	2300      	movs	r3, #0
 800578a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800578e:	930d      	str	r3, [sp, #52]	; 0x34
 8005790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005792:	1b5d      	subs	r5, r3, r5
 8005794:	1e6b      	subs	r3, r5, #1
 8005796:	9307      	str	r3, [sp, #28]
 8005798:	bf43      	ittte	mi
 800579a:	2300      	movmi	r3, #0
 800579c:	f1c5 0901 	rsbmi	r9, r5, #1
 80057a0:	9307      	strmi	r3, [sp, #28]
 80057a2:	f04f 0900 	movpl.w	r9, #0
 80057a6:	f1ba 0f00 	cmp.w	sl, #0
 80057aa:	db41      	blt.n	8005830 <_dtoa_r+0x230>
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80057b2:	4453      	add	r3, sl
 80057b4:	9307      	str	r3, [sp, #28]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057bc:	2b09      	cmp	r3, #9
 80057be:	f200 808f 	bhi.w	80058e0 <_dtoa_r+0x2e0>
 80057c2:	2b05      	cmp	r3, #5
 80057c4:	bfc4      	itt	gt
 80057c6:	3b04      	subgt	r3, #4
 80057c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80057ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057cc:	bfc8      	it	gt
 80057ce:	2500      	movgt	r5, #0
 80057d0:	f1a3 0302 	sub.w	r3, r3, #2
 80057d4:	bfd8      	it	le
 80057d6:	2501      	movle	r5, #1
 80057d8:	2b03      	cmp	r3, #3
 80057da:	f200 808d 	bhi.w	80058f8 <_dtoa_r+0x2f8>
 80057de:	e8df f003 	tbb	[pc, r3]
 80057e2:	7d7b      	.short	0x7d7b
 80057e4:	6f2f      	.short	0x6f2f
 80057e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80057ea:	441d      	add	r5, r3
 80057ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80057f0:	2820      	cmp	r0, #32
 80057f2:	dd13      	ble.n	800581c <_dtoa_r+0x21c>
 80057f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80057f8:	9b02      	ldr	r3, [sp, #8]
 80057fa:	fa08 f800 	lsl.w	r8, r8, r0
 80057fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005802:	fa23 f000 	lsr.w	r0, r3, r0
 8005806:	ea48 0000 	orr.w	r0, r8, r0
 800580a:	f7fa fdeb 	bl	80003e4 <__aeabi_ui2d>
 800580e:	2301      	movs	r3, #1
 8005810:	4680      	mov	r8, r0
 8005812:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005816:	3d01      	subs	r5, #1
 8005818:	9310      	str	r3, [sp, #64]	; 0x40
 800581a:	e771      	b.n	8005700 <_dtoa_r+0x100>
 800581c:	9b02      	ldr	r3, [sp, #8]
 800581e:	f1c0 0020 	rsb	r0, r0, #32
 8005822:	fa03 f000 	lsl.w	r0, r3, r0
 8005826:	e7f0      	b.n	800580a <_dtoa_r+0x20a>
 8005828:	2301      	movs	r3, #1
 800582a:	e7b0      	b.n	800578e <_dtoa_r+0x18e>
 800582c:	900d      	str	r0, [sp, #52]	; 0x34
 800582e:	e7af      	b.n	8005790 <_dtoa_r+0x190>
 8005830:	f1ca 0300 	rsb	r3, sl, #0
 8005834:	9308      	str	r3, [sp, #32]
 8005836:	2300      	movs	r3, #0
 8005838:	eba9 090a 	sub.w	r9, r9, sl
 800583c:	930c      	str	r3, [sp, #48]	; 0x30
 800583e:	e7bc      	b.n	80057ba <_dtoa_r+0x1ba>
 8005840:	2301      	movs	r3, #1
 8005842:	9309      	str	r3, [sp, #36]	; 0x24
 8005844:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005846:	2b00      	cmp	r3, #0
 8005848:	dd74      	ble.n	8005934 <_dtoa_r+0x334>
 800584a:	4698      	mov	r8, r3
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	2200      	movs	r2, #0
 8005850:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005852:	6072      	str	r2, [r6, #4]
 8005854:	2204      	movs	r2, #4
 8005856:	f102 0014 	add.w	r0, r2, #20
 800585a:	4298      	cmp	r0, r3
 800585c:	6871      	ldr	r1, [r6, #4]
 800585e:	d96e      	bls.n	800593e <_dtoa_r+0x33e>
 8005860:	4620      	mov	r0, r4
 8005862:	f000 fe83 	bl	800656c <_Balloc>
 8005866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005868:	6030      	str	r0, [r6, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f1b8 0f0e 	cmp.w	r8, #14
 8005870:	9306      	str	r3, [sp, #24]
 8005872:	f200 80ed 	bhi.w	8005a50 <_dtoa_r+0x450>
 8005876:	2d00      	cmp	r5, #0
 8005878:	f000 80ea 	beq.w	8005a50 <_dtoa_r+0x450>
 800587c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005880:	f1ba 0f00 	cmp.w	sl, #0
 8005884:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005888:	dd77      	ble.n	800597a <_dtoa_r+0x37a>
 800588a:	4a28      	ldr	r2, [pc, #160]	; (800592c <_dtoa_r+0x32c>)
 800588c:	f00a 030f 	and.w	r3, sl, #15
 8005890:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005898:	06f0      	lsls	r0, r6, #27
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80058a2:	d568      	bpl.n	8005976 <_dtoa_r+0x376>
 80058a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058a8:	4b21      	ldr	r3, [pc, #132]	; (8005930 <_dtoa_r+0x330>)
 80058aa:	2503      	movs	r5, #3
 80058ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058b0:	f7fa ff3c 	bl	800072c <__aeabi_ddiv>
 80058b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b8:	f006 060f 	and.w	r6, r6, #15
 80058bc:	4f1c      	ldr	r7, [pc, #112]	; (8005930 <_dtoa_r+0x330>)
 80058be:	e04f      	b.n	8005960 <_dtoa_r+0x360>
 80058c0:	2301      	movs	r3, #1
 80058c2:	9309      	str	r3, [sp, #36]	; 0x24
 80058c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058c6:	4453      	add	r3, sl
 80058c8:	f103 0801 	add.w	r8, r3, #1
 80058cc:	9304      	str	r3, [sp, #16]
 80058ce:	4643      	mov	r3, r8
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	bfb8      	it	lt
 80058d4:	2301      	movlt	r3, #1
 80058d6:	e7ba      	b.n	800584e <_dtoa_r+0x24e>
 80058d8:	2300      	movs	r3, #0
 80058da:	e7b2      	b.n	8005842 <_dtoa_r+0x242>
 80058dc:	2300      	movs	r3, #0
 80058de:	e7f0      	b.n	80058c2 <_dtoa_r+0x2c2>
 80058e0:	2501      	movs	r5, #1
 80058e2:	2300      	movs	r3, #0
 80058e4:	9509      	str	r5, [sp, #36]	; 0x24
 80058e6:	931e      	str	r3, [sp, #120]	; 0x78
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ec:	2200      	movs	r2, #0
 80058ee:	9304      	str	r3, [sp, #16]
 80058f0:	4698      	mov	r8, r3
 80058f2:	2312      	movs	r3, #18
 80058f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80058f6:	e7aa      	b.n	800584e <_dtoa_r+0x24e>
 80058f8:	2301      	movs	r3, #1
 80058fa:	9309      	str	r3, [sp, #36]	; 0x24
 80058fc:	e7f4      	b.n	80058e8 <_dtoa_r+0x2e8>
 80058fe:	bf00      	nop
 8005900:	636f4361 	.word	0x636f4361
 8005904:	3fd287a7 	.word	0x3fd287a7
 8005908:	8b60c8b3 	.word	0x8b60c8b3
 800590c:	3fc68a28 	.word	0x3fc68a28
 8005910:	509f79fb 	.word	0x509f79fb
 8005914:	3fd34413 	.word	0x3fd34413
 8005918:	7ff00000 	.word	0x7ff00000
 800591c:	08007501 	.word	0x08007501
 8005920:	080074f8 	.word	0x080074f8
 8005924:	080074d5 	.word	0x080074d5
 8005928:	3ff80000 	.word	0x3ff80000
 800592c:	08007590 	.word	0x08007590
 8005930:	08007568 	.word	0x08007568
 8005934:	2301      	movs	r3, #1
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	4698      	mov	r8, r3
 800593a:	461a      	mov	r2, r3
 800593c:	e7da      	b.n	80058f4 <_dtoa_r+0x2f4>
 800593e:	3101      	adds	r1, #1
 8005940:	6071      	str	r1, [r6, #4]
 8005942:	0052      	lsls	r2, r2, #1
 8005944:	e787      	b.n	8005856 <_dtoa_r+0x256>
 8005946:	07f1      	lsls	r1, r6, #31
 8005948:	d508      	bpl.n	800595c <_dtoa_r+0x35c>
 800594a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800594e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005952:	f7fa fdc1 	bl	80004d8 <__aeabi_dmul>
 8005956:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800595a:	3501      	adds	r5, #1
 800595c:	1076      	asrs	r6, r6, #1
 800595e:	3708      	adds	r7, #8
 8005960:	2e00      	cmp	r6, #0
 8005962:	d1f0      	bne.n	8005946 <_dtoa_r+0x346>
 8005964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596c:	f7fa fede 	bl	800072c <__aeabi_ddiv>
 8005970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005974:	e01b      	b.n	80059ae <_dtoa_r+0x3ae>
 8005976:	2502      	movs	r5, #2
 8005978:	e7a0      	b.n	80058bc <_dtoa_r+0x2bc>
 800597a:	f000 80a4 	beq.w	8005ac6 <_dtoa_r+0x4c6>
 800597e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005982:	f1ca 0600 	rsb	r6, sl, #0
 8005986:	4ba0      	ldr	r3, [pc, #640]	; (8005c08 <_dtoa_r+0x608>)
 8005988:	f006 020f 	and.w	r2, r6, #15
 800598c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f7fa fda0 	bl	80004d8 <__aeabi_dmul>
 8005998:	2502      	movs	r5, #2
 800599a:	2300      	movs	r3, #0
 800599c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a0:	4f9a      	ldr	r7, [pc, #616]	; (8005c0c <_dtoa_r+0x60c>)
 80059a2:	1136      	asrs	r6, r6, #4
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	f040 8083 	bne.w	8005ab0 <_dtoa_r+0x4b0>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e0      	bne.n	8005970 <_dtoa_r+0x370>
 80059ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 808a 	beq.w	8005aca <_dtoa_r+0x4ca>
 80059b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059c2:	2200      	movs	r2, #0
 80059c4:	4b92      	ldr	r3, [pc, #584]	; (8005c10 <_dtoa_r+0x610>)
 80059c6:	f7fa fff9 	bl	80009bc <__aeabi_dcmplt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d07d      	beq.n	8005aca <_dtoa_r+0x4ca>
 80059ce:	f1b8 0f00 	cmp.w	r8, #0
 80059d2:	d07a      	beq.n	8005aca <_dtoa_r+0x4ca>
 80059d4:	9b04      	ldr	r3, [sp, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	dd36      	ble.n	8005a48 <_dtoa_r+0x448>
 80059da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059de:	2200      	movs	r2, #0
 80059e0:	4b8c      	ldr	r3, [pc, #560]	; (8005c14 <_dtoa_r+0x614>)
 80059e2:	f7fa fd79 	bl	80004d8 <__aeabi_dmul>
 80059e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ea:	9e04      	ldr	r6, [sp, #16]
 80059ec:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80059f0:	3501      	adds	r5, #1
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7fa fd06 	bl	8000404 <__aeabi_i2d>
 80059f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059fc:	f7fa fd6c 	bl	80004d8 <__aeabi_dmul>
 8005a00:	2200      	movs	r2, #0
 8005a02:	4b85      	ldr	r3, [pc, #532]	; (8005c18 <_dtoa_r+0x618>)
 8005a04:	f7fa fbb2 	bl	800016c <__adddf3>
 8005a08:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005a0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a10:	950b      	str	r5, [sp, #44]	; 0x2c
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d15c      	bne.n	8005ad0 <_dtoa_r+0x4d0>
 8005a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <_dtoa_r+0x61c>)
 8005a1e:	f7fa fba3 	bl	8000168 <__aeabi_dsub>
 8005a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a24:	462b      	mov	r3, r5
 8005a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2a:	f7fa ffe5 	bl	80009f8 <__aeabi_dcmpgt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8281 	bne.w	8005f36 <_dtoa_r+0x936>
 8005a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a3a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a3e:	f7fa ffbd 	bl	80009bc <__aeabi_dcmplt>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f040 8275 	bne.w	8005f32 <_dtoa_r+0x932>
 8005a48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f2c0 814b 	blt.w	8005cee <_dtoa_r+0x6ee>
 8005a58:	f1ba 0f0e 	cmp.w	sl, #14
 8005a5c:	f300 8147 	bgt.w	8005cee <_dtoa_r+0x6ee>
 8005a60:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <_dtoa_r+0x608>)
 8005a62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f280 80d7 	bge.w	8005c24 <_dtoa_r+0x624>
 8005a76:	f1b8 0f00 	cmp.w	r8, #0
 8005a7a:	f300 80d3 	bgt.w	8005c24 <_dtoa_r+0x624>
 8005a7e:	f040 8257 	bne.w	8005f30 <_dtoa_r+0x930>
 8005a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a86:	2200      	movs	r2, #0
 8005a88:	4b64      	ldr	r3, [pc, #400]	; (8005c1c <_dtoa_r+0x61c>)
 8005a8a:	f7fa fd25 	bl	80004d8 <__aeabi_dmul>
 8005a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a92:	f7fa ffa7 	bl	80009e4 <__aeabi_dcmpge>
 8005a96:	4646      	mov	r6, r8
 8005a98:	4647      	mov	r7, r8
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f040 822d 	bne.w	8005efa <_dtoa_r+0x8fa>
 8005aa0:	9b06      	ldr	r3, [sp, #24]
 8005aa2:	9a06      	ldr	r2, [sp, #24]
 8005aa4:	1c5d      	adds	r5, r3, #1
 8005aa6:	2331      	movs	r3, #49	; 0x31
 8005aa8:	f10a 0a01 	add.w	sl, sl, #1
 8005aac:	7013      	strb	r3, [r2, #0]
 8005aae:	e228      	b.n	8005f02 <_dtoa_r+0x902>
 8005ab0:	07f2      	lsls	r2, r6, #31
 8005ab2:	d505      	bpl.n	8005ac0 <_dtoa_r+0x4c0>
 8005ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab8:	f7fa fd0e 	bl	80004d8 <__aeabi_dmul>
 8005abc:	2301      	movs	r3, #1
 8005abe:	3501      	adds	r5, #1
 8005ac0:	1076      	asrs	r6, r6, #1
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	e76e      	b.n	80059a4 <_dtoa_r+0x3a4>
 8005ac6:	2502      	movs	r5, #2
 8005ac8:	e771      	b.n	80059ae <_dtoa_r+0x3ae>
 8005aca:	4657      	mov	r7, sl
 8005acc:	4646      	mov	r6, r8
 8005ace:	e790      	b.n	80059f2 <_dtoa_r+0x3f2>
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <_dtoa_r+0x608>)
 8005ad2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ad6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d048      	beq.n	8005b72 <_dtoa_r+0x572>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	494e      	ldr	r1, [pc, #312]	; (8005c20 <_dtoa_r+0x620>)
 8005ae8:	f7fa fe20 	bl	800072c <__aeabi_ddiv>
 8005aec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005af0:	f7fa fb3a 	bl	8000168 <__aeabi_dsub>
 8005af4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005af8:	9d06      	ldr	r5, [sp, #24]
 8005afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afe:	f7fa ff9b 	bl	8000a38 <__aeabi_d2iz>
 8005b02:	9011      	str	r0, [sp, #68]	; 0x44
 8005b04:	f7fa fc7e 	bl	8000404 <__aeabi_i2d>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b10:	f7fa fb2a 	bl	8000168 <__aeabi_dsub>
 8005b14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1a:	3330      	adds	r3, #48	; 0x30
 8005b1c:	f805 3b01 	strb.w	r3, [r5], #1
 8005b20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b24:	f7fa ff4a 	bl	80009bc <__aeabi_dcmplt>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d163      	bne.n	8005bf4 <_dtoa_r+0x5f4>
 8005b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b30:	2000      	movs	r0, #0
 8005b32:	4937      	ldr	r1, [pc, #220]	; (8005c10 <_dtoa_r+0x610>)
 8005b34:	f7fa fb18 	bl	8000168 <__aeabi_dsub>
 8005b38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b3c:	f7fa ff3e 	bl	80009bc <__aeabi_dcmplt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f040 80b5 	bne.w	8005cb0 <_dtoa_r+0x6b0>
 8005b46:	9b06      	ldr	r3, [sp, #24]
 8005b48:	1aeb      	subs	r3, r5, r3
 8005b4a:	429e      	cmp	r6, r3
 8005b4c:	f77f af7c 	ble.w	8005a48 <_dtoa_r+0x448>
 8005b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b54:	2200      	movs	r2, #0
 8005b56:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <_dtoa_r+0x614>)
 8005b58:	f7fa fcbe 	bl	80004d8 <__aeabi_dmul>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b66:	4b2b      	ldr	r3, [pc, #172]	; (8005c14 <_dtoa_r+0x614>)
 8005b68:	f7fa fcb6 	bl	80004d8 <__aeabi_dmul>
 8005b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b70:	e7c3      	b.n	8005afa <_dtoa_r+0x4fa>
 8005b72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b76:	f7fa fcaf 	bl	80004d8 <__aeabi_dmul>
 8005b7a:	9b06      	ldr	r3, [sp, #24]
 8005b7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b80:	199d      	adds	r5, r3, r6
 8005b82:	461e      	mov	r6, r3
 8005b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b88:	f7fa ff56 	bl	8000a38 <__aeabi_d2iz>
 8005b8c:	9011      	str	r0, [sp, #68]	; 0x44
 8005b8e:	f7fa fc39 	bl	8000404 <__aeabi_i2d>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9a:	f7fa fae5 	bl	8000168 <__aeabi_dsub>
 8005b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba4:	3330      	adds	r3, #48	; 0x30
 8005ba6:	f806 3b01 	strb.w	r3, [r6], #1
 8005baa:	42ae      	cmp	r6, r5
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	d124      	bne.n	8005bfc <_dtoa_r+0x5fc>
 8005bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <_dtoa_r+0x620>)
 8005bb8:	f7fa fad8 	bl	800016c <__adddf3>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc4:	f7fa ff18 	bl	80009f8 <__aeabi_dcmpgt>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d171      	bne.n	8005cb0 <_dtoa_r+0x6b0>
 8005bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	4913      	ldr	r1, [pc, #76]	; (8005c20 <_dtoa_r+0x620>)
 8005bd4:	f7fa fac8 	bl	8000168 <__aeabi_dsub>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be0:	f7fa feec 	bl	80009bc <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f43f af2f 	beq.w	8005a48 <_dtoa_r+0x448>
 8005bea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bee:	1e6a      	subs	r2, r5, #1
 8005bf0:	2b30      	cmp	r3, #48	; 0x30
 8005bf2:	d001      	beq.n	8005bf8 <_dtoa_r+0x5f8>
 8005bf4:	46ba      	mov	sl, r7
 8005bf6:	e04a      	b.n	8005c8e <_dtoa_r+0x68e>
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	e7f6      	b.n	8005bea <_dtoa_r+0x5ea>
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <_dtoa_r+0x614>)
 8005bfe:	f7fa fc6b 	bl	80004d8 <__aeabi_dmul>
 8005c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c06:	e7bd      	b.n	8005b84 <_dtoa_r+0x584>
 8005c08:	08007590 	.word	0x08007590
 8005c0c:	08007568 	.word	0x08007568
 8005c10:	3ff00000 	.word	0x3ff00000
 8005c14:	40240000 	.word	0x40240000
 8005c18:	401c0000 	.word	0x401c0000
 8005c1c:	40140000 	.word	0x40140000
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	9d06      	ldr	r5, [sp, #24]
 8005c26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa fd7b 	bl	800072c <__aeabi_ddiv>
 8005c36:	f7fa feff 	bl	8000a38 <__aeabi_d2iz>
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	f7fa fbe2 	bl	8000404 <__aeabi_i2d>
 8005c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c44:	f7fa fc48 	bl	80004d8 <__aeabi_dmul>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa fa8a 	bl	8000168 <__aeabi_dsub>
 8005c54:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005c58:	f805 6b01 	strb.w	r6, [r5], #1
 8005c5c:	9e06      	ldr	r6, [sp, #24]
 8005c5e:	4602      	mov	r2, r0
 8005c60:	1bae      	subs	r6, r5, r6
 8005c62:	45b0      	cmp	r8, r6
 8005c64:	460b      	mov	r3, r1
 8005c66:	d135      	bne.n	8005cd4 <_dtoa_r+0x6d4>
 8005c68:	f7fa fa80 	bl	800016c <__adddf3>
 8005c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c70:	4606      	mov	r6, r0
 8005c72:	460f      	mov	r7, r1
 8005c74:	f7fa fec0 	bl	80009f8 <__aeabi_dcmpgt>
 8005c78:	b9c8      	cbnz	r0, 8005cae <_dtoa_r+0x6ae>
 8005c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	4639      	mov	r1, r7
 8005c82:	f7fa fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8005c86:	b110      	cbz	r0, 8005c8e <_dtoa_r+0x68e>
 8005c88:	f019 0f01 	tst.w	r9, #1
 8005c8c:	d10f      	bne.n	8005cae <_dtoa_r+0x6ae>
 8005c8e:	4659      	mov	r1, fp
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fc9f 	bl	80065d4 <_Bfree>
 8005c96:	2300      	movs	r3, #0
 8005c98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c9a:	702b      	strb	r3, [r5, #0]
 8005c9c:	f10a 0301 	add.w	r3, sl, #1
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f43f acf3 	beq.w	8005690 <_dtoa_r+0x90>
 8005caa:	601d      	str	r5, [r3, #0]
 8005cac:	e4f0      	b.n	8005690 <_dtoa_r+0x90>
 8005cae:	4657      	mov	r7, sl
 8005cb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cb4:	1e6b      	subs	r3, r5, #1
 8005cb6:	2a39      	cmp	r2, #57	; 0x39
 8005cb8:	d106      	bne.n	8005cc8 <_dtoa_r+0x6c8>
 8005cba:	9a06      	ldr	r2, [sp, #24]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d107      	bne.n	8005cd0 <_dtoa_r+0x6d0>
 8005cc0:	2330      	movs	r3, #48	; 0x30
 8005cc2:	7013      	strb	r3, [r2, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	3701      	adds	r7, #1
 8005cc8:	781a      	ldrb	r2, [r3, #0]
 8005cca:	3201      	adds	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e791      	b.n	8005bf4 <_dtoa_r+0x5f4>
 8005cd0:	461d      	mov	r5, r3
 8005cd2:	e7ed      	b.n	8005cb0 <_dtoa_r+0x6b0>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4b99      	ldr	r3, [pc, #612]	; (8005f3c <_dtoa_r+0x93c>)
 8005cd8:	f7fa fbfe 	bl	80004d8 <__aeabi_dmul>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	460f      	mov	r7, r1
 8005ce4:	f7fa fe60 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d09e      	beq.n	8005c2a <_dtoa_r+0x62a>
 8005cec:	e7cf      	b.n	8005c8e <_dtoa_r+0x68e>
 8005cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	f000 8088 	beq.w	8005e06 <_dtoa_r+0x806>
 8005cf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005cf8:	2a01      	cmp	r2, #1
 8005cfa:	dc6d      	bgt.n	8005dd8 <_dtoa_r+0x7d8>
 8005cfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d066      	beq.n	8005dd0 <_dtoa_r+0x7d0>
 8005d02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d06:	464d      	mov	r5, r9
 8005d08:	9e08      	ldr	r6, [sp, #32]
 8005d0a:	9a07      	ldr	r2, [sp, #28]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	441a      	add	r2, r3
 8005d10:	4620      	mov	r0, r4
 8005d12:	4499      	add	r9, r3
 8005d14:	9207      	str	r2, [sp, #28]
 8005d16:	f000 fcfd 	bl	8006714 <__i2b>
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	dd0b      	ble.n	8005d38 <_dtoa_r+0x738>
 8005d20:	9b07      	ldr	r3, [sp, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd08      	ble.n	8005d38 <_dtoa_r+0x738>
 8005d26:	42ab      	cmp	r3, r5
 8005d28:	bfa8      	it	ge
 8005d2a:	462b      	movge	r3, r5
 8005d2c:	9a07      	ldr	r2, [sp, #28]
 8005d2e:	eba9 0903 	sub.w	r9, r9, r3
 8005d32:	1aed      	subs	r5, r5, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	9307      	str	r3, [sp, #28]
 8005d38:	9b08      	ldr	r3, [sp, #32]
 8005d3a:	b1eb      	cbz	r3, 8005d78 <_dtoa_r+0x778>
 8005d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d065      	beq.n	8005e0e <_dtoa_r+0x80e>
 8005d42:	b18e      	cbz	r6, 8005d68 <_dtoa_r+0x768>
 8005d44:	4639      	mov	r1, r7
 8005d46:	4632      	mov	r2, r6
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fd81 	bl	8006850 <__pow5mult>
 8005d4e:	465a      	mov	r2, fp
 8005d50:	4601      	mov	r1, r0
 8005d52:	4607      	mov	r7, r0
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 fce6 	bl	8006726 <__multiply>
 8005d5a:	4659      	mov	r1, fp
 8005d5c:	900a      	str	r0, [sp, #40]	; 0x28
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 fc38 	bl	80065d4 <_Bfree>
 8005d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d66:	469b      	mov	fp, r3
 8005d68:	9b08      	ldr	r3, [sp, #32]
 8005d6a:	1b9a      	subs	r2, r3, r6
 8005d6c:	d004      	beq.n	8005d78 <_dtoa_r+0x778>
 8005d6e:	4659      	mov	r1, fp
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fd6d 	bl	8006850 <__pow5mult>
 8005d76:	4683      	mov	fp, r0
 8005d78:	2101      	movs	r1, #1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 fcca 	bl	8006714 <__i2b>
 8005d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d82:	4606      	mov	r6, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 81c6 	beq.w	8006116 <_dtoa_r+0xb16>
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fd5e 	bl	8006850 <__pow5mult>
 8005d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d96:	4606      	mov	r6, r0
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	dc3e      	bgt.n	8005e1a <_dtoa_r+0x81a>
 8005d9c:	9b02      	ldr	r3, [sp, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d137      	bne.n	8005e12 <_dtoa_r+0x812>
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d134      	bne.n	8005e16 <_dtoa_r+0x816>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005db2:	0d1b      	lsrs	r3, r3, #20
 8005db4:	051b      	lsls	r3, r3, #20
 8005db6:	b12b      	cbz	r3, 8005dc4 <_dtoa_r+0x7c4>
 8005db8:	9b07      	ldr	r3, [sp, #28]
 8005dba:	f109 0901 	add.w	r9, r9, #1
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	9307      	str	r3, [sp, #28]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	9308      	str	r3, [sp, #32]
 8005dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d128      	bne.n	8005e1e <_dtoa_r+0x81e>
 8005dcc:	2001      	movs	r0, #1
 8005dce:	e02e      	b.n	8005e2e <_dtoa_r+0x82e>
 8005dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dd6:	e796      	b.n	8005d06 <_dtoa_r+0x706>
 8005dd8:	9b08      	ldr	r3, [sp, #32]
 8005dda:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005dde:	42b3      	cmp	r3, r6
 8005de0:	bfb7      	itett	lt
 8005de2:	9b08      	ldrlt	r3, [sp, #32]
 8005de4:	1b9e      	subge	r6, r3, r6
 8005de6:	1af2      	sublt	r2, r6, r3
 8005de8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005dea:	bfbf      	itttt	lt
 8005dec:	9608      	strlt	r6, [sp, #32]
 8005dee:	189b      	addlt	r3, r3, r2
 8005df0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005df2:	2600      	movlt	r6, #0
 8005df4:	f1b8 0f00 	cmp.w	r8, #0
 8005df8:	bfb9      	ittee	lt
 8005dfa:	eba9 0508 	sublt.w	r5, r9, r8
 8005dfe:	2300      	movlt	r3, #0
 8005e00:	464d      	movge	r5, r9
 8005e02:	4643      	movge	r3, r8
 8005e04:	e781      	b.n	8005d0a <_dtoa_r+0x70a>
 8005e06:	9e08      	ldr	r6, [sp, #32]
 8005e08:	464d      	mov	r5, r9
 8005e0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e0c:	e786      	b.n	8005d1c <_dtoa_r+0x71c>
 8005e0e:	9a08      	ldr	r2, [sp, #32]
 8005e10:	e7ad      	b.n	8005d6e <_dtoa_r+0x76e>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e7d6      	b.n	8005dc4 <_dtoa_r+0x7c4>
 8005e16:	9b02      	ldr	r3, [sp, #8]
 8005e18:	e7d4      	b.n	8005dc4 <_dtoa_r+0x7c4>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9308      	str	r3, [sp, #32]
 8005e1e:	6933      	ldr	r3, [r6, #16]
 8005e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e24:	6918      	ldr	r0, [r3, #16]
 8005e26:	f000 fc27 	bl	8006678 <__hi0bits>
 8005e2a:	f1c0 0020 	rsb	r0, r0, #32
 8005e2e:	9b07      	ldr	r3, [sp, #28]
 8005e30:	4418      	add	r0, r3
 8005e32:	f010 001f 	ands.w	r0, r0, #31
 8005e36:	d047      	beq.n	8005ec8 <_dtoa_r+0x8c8>
 8005e38:	f1c0 0320 	rsb	r3, r0, #32
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	dd3b      	ble.n	8005eb8 <_dtoa_r+0x8b8>
 8005e40:	9b07      	ldr	r3, [sp, #28]
 8005e42:	f1c0 001c 	rsb	r0, r0, #28
 8005e46:	4481      	add	r9, r0
 8005e48:	4405      	add	r5, r0
 8005e4a:	4403      	add	r3, r0
 8005e4c:	9307      	str	r3, [sp, #28]
 8005e4e:	f1b9 0f00 	cmp.w	r9, #0
 8005e52:	dd05      	ble.n	8005e60 <_dtoa_r+0x860>
 8005e54:	4659      	mov	r1, fp
 8005e56:	464a      	mov	r2, r9
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 fd47 	bl	80068ec <__lshift>
 8005e5e:	4683      	mov	fp, r0
 8005e60:	9b07      	ldr	r3, [sp, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd05      	ble.n	8005e72 <_dtoa_r+0x872>
 8005e66:	4631      	mov	r1, r6
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 fd3e 	bl	80068ec <__lshift>
 8005e70:	4606      	mov	r6, r0
 8005e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e74:	b353      	cbz	r3, 8005ecc <_dtoa_r+0x8cc>
 8005e76:	4631      	mov	r1, r6
 8005e78:	4658      	mov	r0, fp
 8005e7a:	f000 fd8b 	bl	8006994 <__mcmp>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	da24      	bge.n	8005ecc <_dtoa_r+0x8cc>
 8005e82:	2300      	movs	r3, #0
 8005e84:	4659      	mov	r1, fp
 8005e86:	220a      	movs	r2, #10
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 fbba 	bl	8006602 <__multadd>
 8005e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e90:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e94:	4683      	mov	fp, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8144 	beq.w	8006124 <_dtoa_r+0xb24>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 fbad 	bl	8006602 <__multadd>
 8005ea8:	9b04      	ldr	r3, [sp, #16]
 8005eaa:	4607      	mov	r7, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc4d      	bgt.n	8005f4c <_dtoa_r+0x94c>
 8005eb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	dd4a      	ble.n	8005f4c <_dtoa_r+0x94c>
 8005eb6:	e011      	b.n	8005edc <_dtoa_r+0x8dc>
 8005eb8:	d0c9      	beq.n	8005e4e <_dtoa_r+0x84e>
 8005eba:	9a07      	ldr	r2, [sp, #28]
 8005ebc:	331c      	adds	r3, #28
 8005ebe:	441a      	add	r2, r3
 8005ec0:	4499      	add	r9, r3
 8005ec2:	441d      	add	r5, r3
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	e7c1      	b.n	8005e4c <_dtoa_r+0x84c>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	e7f6      	b.n	8005eba <_dtoa_r+0x8ba>
 8005ecc:	f1b8 0f00 	cmp.w	r8, #0
 8005ed0:	dc36      	bgt.n	8005f40 <_dtoa_r+0x940>
 8005ed2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	dd33      	ble.n	8005f40 <_dtoa_r+0x940>
 8005ed8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	b963      	cbnz	r3, 8005efa <_dtoa_r+0x8fa>
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	2205      	movs	r2, #5
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fb8c 	bl	8006602 <__multadd>
 8005eea:	4601      	mov	r1, r0
 8005eec:	4606      	mov	r6, r0
 8005eee:	4658      	mov	r0, fp
 8005ef0:	f000 fd50 	bl	8006994 <__mcmp>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f73f add3 	bgt.w	8005aa0 <_dtoa_r+0x4a0>
 8005efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005efc:	9d06      	ldr	r5, [sp, #24]
 8005efe:	ea6f 0a03 	mvn.w	sl, r3
 8005f02:	f04f 0900 	mov.w	r9, #0
 8005f06:	4631      	mov	r1, r6
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fb63 	bl	80065d4 <_Bfree>
 8005f0e:	2f00      	cmp	r7, #0
 8005f10:	f43f aebd 	beq.w	8005c8e <_dtoa_r+0x68e>
 8005f14:	f1b9 0f00 	cmp.w	r9, #0
 8005f18:	d005      	beq.n	8005f26 <_dtoa_r+0x926>
 8005f1a:	45b9      	cmp	r9, r7
 8005f1c:	d003      	beq.n	8005f26 <_dtoa_r+0x926>
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fb57 	bl	80065d4 <_Bfree>
 8005f26:	4639      	mov	r1, r7
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fb53 	bl	80065d4 <_Bfree>
 8005f2e:	e6ae      	b.n	8005c8e <_dtoa_r+0x68e>
 8005f30:	2600      	movs	r6, #0
 8005f32:	4637      	mov	r7, r6
 8005f34:	e7e1      	b.n	8005efa <_dtoa_r+0x8fa>
 8005f36:	46ba      	mov	sl, r7
 8005f38:	4637      	mov	r7, r6
 8005f3a:	e5b1      	b.n	8005aa0 <_dtoa_r+0x4a0>
 8005f3c:	40240000 	.word	0x40240000
 8005f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f42:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80f3 	beq.w	8006132 <_dtoa_r+0xb32>
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	dd05      	ble.n	8005f5c <_dtoa_r+0x95c>
 8005f50:	4639      	mov	r1, r7
 8005f52:	462a      	mov	r2, r5
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fcc9 	bl	80068ec <__lshift>
 8005f5a:	4607      	mov	r7, r0
 8005f5c:	9b08      	ldr	r3, [sp, #32]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d04c      	beq.n	8005ffc <_dtoa_r+0x9fc>
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 fb01 	bl	800656c <_Balloc>
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	f107 010c 	add.w	r1, r7, #12
 8005f72:	3202      	adds	r2, #2
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	300c      	adds	r0, #12
 8005f78:	f7fe fd14 	bl	80049a4 <memcpy>
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fcb3 	bl	80068ec <__lshift>
 8005f86:	46b9      	mov	r9, r7
 8005f88:	4607      	mov	r7, r0
 8005f8a:	9b06      	ldr	r3, [sp, #24]
 8005f8c:	9307      	str	r3, [sp, #28]
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	9308      	str	r3, [sp, #32]
 8005f96:	4631      	mov	r1, r6
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f7ff faa1 	bl	80054e0 <quorem>
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005fa6:	4658      	mov	r0, fp
 8005fa8:	f000 fcf4 	bl	8006994 <__mcmp>
 8005fac:	463a      	mov	r2, r7
 8005fae:	9002      	str	r0, [sp, #8]
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fd08 	bl	80069c8 <__mdiff>
 8005fb8:	68c3      	ldr	r3, [r0, #12]
 8005fba:	4602      	mov	r2, r0
 8005fbc:	bb03      	cbnz	r3, 8006000 <_dtoa_r+0xa00>
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	9009      	str	r0, [sp, #36]	; 0x24
 8005fc2:	4658      	mov	r0, fp
 8005fc4:	f000 fce6 	bl	8006994 <__mcmp>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4620      	mov	r0, r4
 8005fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd2:	f000 faff 	bl	80065d4 <_Bfree>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd8:	b9a3      	cbnz	r3, 8006004 <_dtoa_r+0xa04>
 8005fda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005fdc:	b992      	cbnz	r2, 8006004 <_dtoa_r+0xa04>
 8005fde:	9a08      	ldr	r2, [sp, #32]
 8005fe0:	b982      	cbnz	r2, 8006004 <_dtoa_r+0xa04>
 8005fe2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fe6:	d029      	beq.n	800603c <_dtoa_r+0xa3c>
 8005fe8:	9b02      	ldr	r3, [sp, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	dd01      	ble.n	8005ff2 <_dtoa_r+0x9f2>
 8005fee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005ff2:	9b07      	ldr	r3, [sp, #28]
 8005ff4:	1c5d      	adds	r5, r3, #1
 8005ff6:	f883 8000 	strb.w	r8, [r3]
 8005ffa:	e784      	b.n	8005f06 <_dtoa_r+0x906>
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	e7c2      	b.n	8005f86 <_dtoa_r+0x986>
 8006000:	2301      	movs	r3, #1
 8006002:	e7e3      	b.n	8005fcc <_dtoa_r+0x9cc>
 8006004:	9a02      	ldr	r2, [sp, #8]
 8006006:	2a00      	cmp	r2, #0
 8006008:	db04      	blt.n	8006014 <_dtoa_r+0xa14>
 800600a:	d123      	bne.n	8006054 <_dtoa_r+0xa54>
 800600c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800600e:	bb0a      	cbnz	r2, 8006054 <_dtoa_r+0xa54>
 8006010:	9a08      	ldr	r2, [sp, #32]
 8006012:	b9fa      	cbnz	r2, 8006054 <_dtoa_r+0xa54>
 8006014:	2b00      	cmp	r3, #0
 8006016:	ddec      	ble.n	8005ff2 <_dtoa_r+0x9f2>
 8006018:	4659      	mov	r1, fp
 800601a:	2201      	movs	r2, #1
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fc65 	bl	80068ec <__lshift>
 8006022:	4631      	mov	r1, r6
 8006024:	4683      	mov	fp, r0
 8006026:	f000 fcb5 	bl	8006994 <__mcmp>
 800602a:	2800      	cmp	r0, #0
 800602c:	dc03      	bgt.n	8006036 <_dtoa_r+0xa36>
 800602e:	d1e0      	bne.n	8005ff2 <_dtoa_r+0x9f2>
 8006030:	f018 0f01 	tst.w	r8, #1
 8006034:	d0dd      	beq.n	8005ff2 <_dtoa_r+0x9f2>
 8006036:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800603a:	d1d8      	bne.n	8005fee <_dtoa_r+0x9ee>
 800603c:	9b07      	ldr	r3, [sp, #28]
 800603e:	9a07      	ldr	r2, [sp, #28]
 8006040:	1c5d      	adds	r5, r3, #1
 8006042:	2339      	movs	r3, #57	; 0x39
 8006044:	7013      	strb	r3, [r2, #0]
 8006046:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800604a:	1e6a      	subs	r2, r5, #1
 800604c:	2b39      	cmp	r3, #57	; 0x39
 800604e:	d04d      	beq.n	80060ec <_dtoa_r+0xaec>
 8006050:	3301      	adds	r3, #1
 8006052:	e052      	b.n	80060fa <_dtoa_r+0xafa>
 8006054:	9a07      	ldr	r2, [sp, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f102 0501 	add.w	r5, r2, #1
 800605c:	dd06      	ble.n	800606c <_dtoa_r+0xa6c>
 800605e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006062:	d0eb      	beq.n	800603c <_dtoa_r+0xa3c>
 8006064:	f108 0801 	add.w	r8, r8, #1
 8006068:	9b07      	ldr	r3, [sp, #28]
 800606a:	e7c4      	b.n	8005ff6 <_dtoa_r+0x9f6>
 800606c:	9b06      	ldr	r3, [sp, #24]
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	1aeb      	subs	r3, r5, r3
 8006072:	4293      	cmp	r3, r2
 8006074:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006078:	d021      	beq.n	80060be <_dtoa_r+0xabe>
 800607a:	4659      	mov	r1, fp
 800607c:	2300      	movs	r3, #0
 800607e:	220a      	movs	r2, #10
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fabe 	bl	8006602 <__multadd>
 8006086:	45b9      	cmp	r9, r7
 8006088:	4683      	mov	fp, r0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	f04f 020a 	mov.w	r2, #10
 8006092:	4649      	mov	r1, r9
 8006094:	4620      	mov	r0, r4
 8006096:	d105      	bne.n	80060a4 <_dtoa_r+0xaa4>
 8006098:	f000 fab3 	bl	8006602 <__multadd>
 800609c:	4681      	mov	r9, r0
 800609e:	4607      	mov	r7, r0
 80060a0:	9507      	str	r5, [sp, #28]
 80060a2:	e778      	b.n	8005f96 <_dtoa_r+0x996>
 80060a4:	f000 faad 	bl	8006602 <__multadd>
 80060a8:	4639      	mov	r1, r7
 80060aa:	4681      	mov	r9, r0
 80060ac:	2300      	movs	r3, #0
 80060ae:	220a      	movs	r2, #10
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 faa6 	bl	8006602 <__multadd>
 80060b6:	4607      	mov	r7, r0
 80060b8:	e7f2      	b.n	80060a0 <_dtoa_r+0xaa0>
 80060ba:	f04f 0900 	mov.w	r9, #0
 80060be:	4659      	mov	r1, fp
 80060c0:	2201      	movs	r2, #1
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fc12 	bl	80068ec <__lshift>
 80060c8:	4631      	mov	r1, r6
 80060ca:	4683      	mov	fp, r0
 80060cc:	f000 fc62 	bl	8006994 <__mcmp>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	dcb8      	bgt.n	8006046 <_dtoa_r+0xa46>
 80060d4:	d102      	bne.n	80060dc <_dtoa_r+0xadc>
 80060d6:	f018 0f01 	tst.w	r8, #1
 80060da:	d1b4      	bne.n	8006046 <_dtoa_r+0xa46>
 80060dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060e0:	1e6a      	subs	r2, r5, #1
 80060e2:	2b30      	cmp	r3, #48	; 0x30
 80060e4:	f47f af0f 	bne.w	8005f06 <_dtoa_r+0x906>
 80060e8:	4615      	mov	r5, r2
 80060ea:	e7f7      	b.n	80060dc <_dtoa_r+0xadc>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d105      	bne.n	80060fe <_dtoa_r+0xafe>
 80060f2:	2331      	movs	r3, #49	; 0x31
 80060f4:	9a06      	ldr	r2, [sp, #24]
 80060f6:	f10a 0a01 	add.w	sl, sl, #1
 80060fa:	7013      	strb	r3, [r2, #0]
 80060fc:	e703      	b.n	8005f06 <_dtoa_r+0x906>
 80060fe:	4615      	mov	r5, r2
 8006100:	e7a1      	b.n	8006046 <_dtoa_r+0xa46>
 8006102:	4b17      	ldr	r3, [pc, #92]	; (8006160 <_dtoa_r+0xb60>)
 8006104:	f7ff bae1 	b.w	80056ca <_dtoa_r+0xca>
 8006108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f aabb 	bne.w	8005686 <_dtoa_r+0x86>
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <_dtoa_r+0xb64>)
 8006112:	f7ff bada 	b.w	80056ca <_dtoa_r+0xca>
 8006116:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006118:	2b01      	cmp	r3, #1
 800611a:	f77f ae3f 	ble.w	8005d9c <_dtoa_r+0x79c>
 800611e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	e653      	b.n	8005dcc <_dtoa_r+0x7cc>
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	dc03      	bgt.n	8006132 <_dtoa_r+0xb32>
 800612a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800612c:	2b02      	cmp	r3, #2
 800612e:	f73f aed5 	bgt.w	8005edc <_dtoa_r+0x8dc>
 8006132:	9d06      	ldr	r5, [sp, #24]
 8006134:	4631      	mov	r1, r6
 8006136:	4658      	mov	r0, fp
 8006138:	f7ff f9d2 	bl	80054e0 <quorem>
 800613c:	9b06      	ldr	r3, [sp, #24]
 800613e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006142:	f805 8b01 	strb.w	r8, [r5], #1
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	1aeb      	subs	r3, r5, r3
 800614a:	429a      	cmp	r2, r3
 800614c:	ddb5      	ble.n	80060ba <_dtoa_r+0xaba>
 800614e:	4659      	mov	r1, fp
 8006150:	2300      	movs	r3, #0
 8006152:	220a      	movs	r2, #10
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fa54 	bl	8006602 <__multadd>
 800615a:	4683      	mov	fp, r0
 800615c:	e7ea      	b.n	8006134 <_dtoa_r+0xb34>
 800615e:	bf00      	nop
 8006160:	080074d4 	.word	0x080074d4
 8006164:	080074f8 	.word	0x080074f8

08006168 <__sflush_r>:
 8006168:	898a      	ldrh	r2, [r1, #12]
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	4605      	mov	r5, r0
 8006170:	0710      	lsls	r0, r2, #28
 8006172:	460c      	mov	r4, r1
 8006174:	d458      	bmi.n	8006228 <__sflush_r+0xc0>
 8006176:	684b      	ldr	r3, [r1, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	dc05      	bgt.n	8006188 <__sflush_r+0x20>
 800617c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	dc02      	bgt.n	8006188 <__sflush_r+0x20>
 8006182:	2000      	movs	r0, #0
 8006184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800618a:	2e00      	cmp	r6, #0
 800618c:	d0f9      	beq.n	8006182 <__sflush_r+0x1a>
 800618e:	2300      	movs	r3, #0
 8006190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006194:	682f      	ldr	r7, [r5, #0]
 8006196:	6a21      	ldr	r1, [r4, #32]
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	d032      	beq.n	8006202 <__sflush_r+0x9a>
 800619c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	075a      	lsls	r2, r3, #29
 80061a2:	d505      	bpl.n	80061b0 <__sflush_r+0x48>
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	1ac0      	subs	r0, r0, r3
 80061a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061aa:	b10b      	cbz	r3, 80061b0 <__sflush_r+0x48>
 80061ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061ae:	1ac0      	subs	r0, r0, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	4602      	mov	r2, r0
 80061b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061b6:	6a21      	ldr	r1, [r4, #32]
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b0      	blx	r6
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	d106      	bne.n	80061d0 <__sflush_r+0x68>
 80061c2:	6829      	ldr	r1, [r5, #0]
 80061c4:	291d      	cmp	r1, #29
 80061c6:	d848      	bhi.n	800625a <__sflush_r+0xf2>
 80061c8:	4a29      	ldr	r2, [pc, #164]	; (8006270 <__sflush_r+0x108>)
 80061ca:	40ca      	lsrs	r2, r1
 80061cc:	07d6      	lsls	r6, r2, #31
 80061ce:	d544      	bpl.n	800625a <__sflush_r+0xf2>
 80061d0:	2200      	movs	r2, #0
 80061d2:	6062      	str	r2, [r4, #4]
 80061d4:	6922      	ldr	r2, [r4, #16]
 80061d6:	04d9      	lsls	r1, r3, #19
 80061d8:	6022      	str	r2, [r4, #0]
 80061da:	d504      	bpl.n	80061e6 <__sflush_r+0x7e>
 80061dc:	1c42      	adds	r2, r0, #1
 80061de:	d101      	bne.n	80061e4 <__sflush_r+0x7c>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b903      	cbnz	r3, 80061e6 <__sflush_r+0x7e>
 80061e4:	6560      	str	r0, [r4, #84]	; 0x54
 80061e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061e8:	602f      	str	r7, [r5, #0]
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d0c9      	beq.n	8006182 <__sflush_r+0x1a>
 80061ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061f2:	4299      	cmp	r1, r3
 80061f4:	d002      	beq.n	80061fc <__sflush_r+0x94>
 80061f6:	4628      	mov	r0, r5
 80061f8:	f000 fca2 	bl	8006b40 <_free_r>
 80061fc:	2000      	movs	r0, #0
 80061fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006200:	e7c0      	b.n	8006184 <__sflush_r+0x1c>
 8006202:	2301      	movs	r3, #1
 8006204:	4628      	mov	r0, r5
 8006206:	47b0      	blx	r6
 8006208:	1c41      	adds	r1, r0, #1
 800620a:	d1c8      	bne.n	800619e <__sflush_r+0x36>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0c5      	beq.n	800619e <__sflush_r+0x36>
 8006212:	2b1d      	cmp	r3, #29
 8006214:	d001      	beq.n	800621a <__sflush_r+0xb2>
 8006216:	2b16      	cmp	r3, #22
 8006218:	d101      	bne.n	800621e <__sflush_r+0xb6>
 800621a:	602f      	str	r7, [r5, #0]
 800621c:	e7b1      	b.n	8006182 <__sflush_r+0x1a>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	e7ad      	b.n	8006184 <__sflush_r+0x1c>
 8006228:	690f      	ldr	r7, [r1, #16]
 800622a:	2f00      	cmp	r7, #0
 800622c:	d0a9      	beq.n	8006182 <__sflush_r+0x1a>
 800622e:	0793      	lsls	r3, r2, #30
 8006230:	bf18      	it	ne
 8006232:	2300      	movne	r3, #0
 8006234:	680e      	ldr	r6, [r1, #0]
 8006236:	bf08      	it	eq
 8006238:	694b      	ldreq	r3, [r1, #20]
 800623a:	eba6 0807 	sub.w	r8, r6, r7
 800623e:	600f      	str	r7, [r1, #0]
 8006240:	608b      	str	r3, [r1, #8]
 8006242:	f1b8 0f00 	cmp.w	r8, #0
 8006246:	dd9c      	ble.n	8006182 <__sflush_r+0x1a>
 8006248:	4643      	mov	r3, r8
 800624a:	463a      	mov	r2, r7
 800624c:	6a21      	ldr	r1, [r4, #32]
 800624e:	4628      	mov	r0, r5
 8006250:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006252:	47b0      	blx	r6
 8006254:	2800      	cmp	r0, #0
 8006256:	dc06      	bgt.n	8006266 <__sflush_r+0xfe>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006264:	e78e      	b.n	8006184 <__sflush_r+0x1c>
 8006266:	4407      	add	r7, r0
 8006268:	eba8 0800 	sub.w	r8, r8, r0
 800626c:	e7e9      	b.n	8006242 <__sflush_r+0xda>
 800626e:	bf00      	nop
 8006270:	20400001 	.word	0x20400001

08006274 <_fflush_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	690b      	ldr	r3, [r1, #16]
 8006278:	4605      	mov	r5, r0
 800627a:	460c      	mov	r4, r1
 800627c:	b1db      	cbz	r3, 80062b6 <_fflush_r+0x42>
 800627e:	b118      	cbz	r0, 8006288 <_fflush_r+0x14>
 8006280:	6983      	ldr	r3, [r0, #24]
 8006282:	b90b      	cbnz	r3, 8006288 <_fflush_r+0x14>
 8006284:	f000 f860 	bl	8006348 <__sinit>
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <_fflush_r+0x48>)
 800628a:	429c      	cmp	r4, r3
 800628c:	d109      	bne.n	80062a2 <_fflush_r+0x2e>
 800628e:	686c      	ldr	r4, [r5, #4]
 8006290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006294:	b17b      	cbz	r3, 80062b6 <_fflush_r+0x42>
 8006296:	4621      	mov	r1, r4
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800629e:	f7ff bf63 	b.w	8006168 <__sflush_r>
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <_fflush_r+0x4c>)
 80062a4:	429c      	cmp	r4, r3
 80062a6:	d101      	bne.n	80062ac <_fflush_r+0x38>
 80062a8:	68ac      	ldr	r4, [r5, #8]
 80062aa:	e7f1      	b.n	8006290 <_fflush_r+0x1c>
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <_fflush_r+0x50>)
 80062ae:	429c      	cmp	r4, r3
 80062b0:	bf08      	it	eq
 80062b2:	68ec      	ldreq	r4, [r5, #12]
 80062b4:	e7ec      	b.n	8006290 <_fflush_r+0x1c>
 80062b6:	2000      	movs	r0, #0
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	08007528 	.word	0x08007528
 80062c0:	08007548 	.word	0x08007548
 80062c4:	08007508 	.word	0x08007508

080062c8 <std>:
 80062c8:	2300      	movs	r3, #0
 80062ca:	b510      	push	{r4, lr}
 80062cc:	4604      	mov	r4, r0
 80062ce:	e9c0 3300 	strd	r3, r3, [r0]
 80062d2:	6083      	str	r3, [r0, #8]
 80062d4:	8181      	strh	r1, [r0, #12]
 80062d6:	6643      	str	r3, [r0, #100]	; 0x64
 80062d8:	81c2      	strh	r2, [r0, #14]
 80062da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062de:	6183      	str	r3, [r0, #24]
 80062e0:	4619      	mov	r1, r3
 80062e2:	2208      	movs	r2, #8
 80062e4:	305c      	adds	r0, #92	; 0x5c
 80062e6:	f7fe fb68 	bl	80049ba <memset>
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <std+0x38>)
 80062ec:	6224      	str	r4, [r4, #32]
 80062ee:	6263      	str	r3, [r4, #36]	; 0x24
 80062f0:	4b04      	ldr	r3, [pc, #16]	; (8006304 <std+0x3c>)
 80062f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <std+0x40>)
 80062f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <std+0x44>)
 80062fa:	6323      	str	r3, [r4, #48]	; 0x30
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	08006f29 	.word	0x08006f29
 8006304:	08006f4b 	.word	0x08006f4b
 8006308:	08006f83 	.word	0x08006f83
 800630c:	08006fa7 	.word	0x08006fa7

08006310 <_cleanup_r>:
 8006310:	4901      	ldr	r1, [pc, #4]	; (8006318 <_cleanup_r+0x8>)
 8006312:	f000 b885 	b.w	8006420 <_fwalk_reent>
 8006316:	bf00      	nop
 8006318:	08006275 	.word	0x08006275

0800631c <__sfmoreglue>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	2568      	movs	r5, #104	; 0x68
 8006320:	1e4a      	subs	r2, r1, #1
 8006322:	4355      	muls	r5, r2
 8006324:	460e      	mov	r6, r1
 8006326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800632a:	f000 fc55 	bl	8006bd8 <_malloc_r>
 800632e:	4604      	mov	r4, r0
 8006330:	b140      	cbz	r0, 8006344 <__sfmoreglue+0x28>
 8006332:	2100      	movs	r1, #0
 8006334:	e9c0 1600 	strd	r1, r6, [r0]
 8006338:	300c      	adds	r0, #12
 800633a:	60a0      	str	r0, [r4, #8]
 800633c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006340:	f7fe fb3b 	bl	80049ba <memset>
 8006344:	4620      	mov	r0, r4
 8006346:	bd70      	pop	{r4, r5, r6, pc}

08006348 <__sinit>:
 8006348:	6983      	ldr	r3, [r0, #24]
 800634a:	b510      	push	{r4, lr}
 800634c:	4604      	mov	r4, r0
 800634e:	bb33      	cbnz	r3, 800639e <__sinit+0x56>
 8006350:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006354:	6503      	str	r3, [r0, #80]	; 0x50
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <__sinit+0x58>)
 8006358:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <__sinit+0x5c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6282      	str	r2, [r0, #40]	; 0x28
 800635e:	4298      	cmp	r0, r3
 8006360:	bf04      	itt	eq
 8006362:	2301      	moveq	r3, #1
 8006364:	6183      	streq	r3, [r0, #24]
 8006366:	f000 f81f 	bl	80063a8 <__sfp>
 800636a:	6060      	str	r0, [r4, #4]
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f81b 	bl	80063a8 <__sfp>
 8006372:	60a0      	str	r0, [r4, #8]
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f817 	bl	80063a8 <__sfp>
 800637a:	2200      	movs	r2, #0
 800637c:	60e0      	str	r0, [r4, #12]
 800637e:	2104      	movs	r1, #4
 8006380:	6860      	ldr	r0, [r4, #4]
 8006382:	f7ff ffa1 	bl	80062c8 <std>
 8006386:	2201      	movs	r2, #1
 8006388:	2109      	movs	r1, #9
 800638a:	68a0      	ldr	r0, [r4, #8]
 800638c:	f7ff ff9c 	bl	80062c8 <std>
 8006390:	2202      	movs	r2, #2
 8006392:	2112      	movs	r1, #18
 8006394:	68e0      	ldr	r0, [r4, #12]
 8006396:	f7ff ff97 	bl	80062c8 <std>
 800639a:	2301      	movs	r3, #1
 800639c:	61a3      	str	r3, [r4, #24]
 800639e:	bd10      	pop	{r4, pc}
 80063a0:	080074c0 	.word	0x080074c0
 80063a4:	08006311 	.word	0x08006311

080063a8 <__sfp>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <__sfp+0x70>)
 80063ac:	4607      	mov	r7, r0
 80063ae:	681e      	ldr	r6, [r3, #0]
 80063b0:	69b3      	ldr	r3, [r6, #24]
 80063b2:	b913      	cbnz	r3, 80063ba <__sfp+0x12>
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff ffc7 	bl	8006348 <__sinit>
 80063ba:	3648      	adds	r6, #72	; 0x48
 80063bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	d503      	bpl.n	80063cc <__sfp+0x24>
 80063c4:	6833      	ldr	r3, [r6, #0]
 80063c6:	b133      	cbz	r3, 80063d6 <__sfp+0x2e>
 80063c8:	6836      	ldr	r6, [r6, #0]
 80063ca:	e7f7      	b.n	80063bc <__sfp+0x14>
 80063cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063d0:	b16d      	cbz	r5, 80063ee <__sfp+0x46>
 80063d2:	3468      	adds	r4, #104	; 0x68
 80063d4:	e7f4      	b.n	80063c0 <__sfp+0x18>
 80063d6:	2104      	movs	r1, #4
 80063d8:	4638      	mov	r0, r7
 80063da:	f7ff ff9f 	bl	800631c <__sfmoreglue>
 80063de:	6030      	str	r0, [r6, #0]
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d1f1      	bne.n	80063c8 <__sfp+0x20>
 80063e4:	230c      	movs	r3, #12
 80063e6:	4604      	mov	r4, r0
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4620      	mov	r0, r4
 80063ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <__sfp+0x74>)
 80063f0:	6665      	str	r5, [r4, #100]	; 0x64
 80063f2:	e9c4 5500 	strd	r5, r5, [r4]
 80063f6:	60a5      	str	r5, [r4, #8]
 80063f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80063fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006400:	2208      	movs	r2, #8
 8006402:	4629      	mov	r1, r5
 8006404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006408:	f7fe fad7 	bl	80049ba <memset>
 800640c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006414:	e7e9      	b.n	80063ea <__sfp+0x42>
 8006416:	bf00      	nop
 8006418:	080074c0 	.word	0x080074c0
 800641c:	ffff0001 	.word	0xffff0001

08006420 <_fwalk_reent>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	4680      	mov	r8, r0
 8006426:	4689      	mov	r9, r1
 8006428:	2600      	movs	r6, #0
 800642a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800642e:	b914      	cbnz	r4, 8006436 <_fwalk_reent+0x16>
 8006430:	4630      	mov	r0, r6
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800643a:	3f01      	subs	r7, #1
 800643c:	d501      	bpl.n	8006442 <_fwalk_reent+0x22>
 800643e:	6824      	ldr	r4, [r4, #0]
 8006440:	e7f5      	b.n	800642e <_fwalk_reent+0xe>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d907      	bls.n	8006458 <_fwalk_reent+0x38>
 8006448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800644c:	3301      	adds	r3, #1
 800644e:	d003      	beq.n	8006458 <_fwalk_reent+0x38>
 8006450:	4629      	mov	r1, r5
 8006452:	4640      	mov	r0, r8
 8006454:	47c8      	blx	r9
 8006456:	4306      	orrs	r6, r0
 8006458:	3568      	adds	r5, #104	; 0x68
 800645a:	e7ee      	b.n	800643a <_fwalk_reent+0x1a>

0800645c <_localeconv_r>:
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <_localeconv_r+0x14>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a18      	ldr	r0, [r3, #32]
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <_localeconv_r+0x18>)
 8006464:	2800      	cmp	r0, #0
 8006466:	bf08      	it	eq
 8006468:	4618      	moveq	r0, r3
 800646a:	30f0      	adds	r0, #240	; 0xf0
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	2000000c 	.word	0x2000000c
 8006474:	20000070 	.word	0x20000070

08006478 <__swhatbuf_r>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	460e      	mov	r6, r1
 800647c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006480:	b096      	sub	sp, #88	; 0x58
 8006482:	2900      	cmp	r1, #0
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	da07      	bge.n	800649a <__swhatbuf_r+0x22>
 800648a:	2300      	movs	r3, #0
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	89b3      	ldrh	r3, [r6, #12]
 8006490:	061a      	lsls	r2, r3, #24
 8006492:	d410      	bmi.n	80064b6 <__swhatbuf_r+0x3e>
 8006494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006498:	e00e      	b.n	80064b8 <__swhatbuf_r+0x40>
 800649a:	466a      	mov	r2, sp
 800649c:	f000 fdaa 	bl	8006ff4 <_fstat_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	dbf2      	blt.n	800648a <__swhatbuf_r+0x12>
 80064a4:	9a01      	ldr	r2, [sp, #4]
 80064a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ae:	425a      	negs	r2, r3
 80064b0:	415a      	adcs	r2, r3
 80064b2:	602a      	str	r2, [r5, #0]
 80064b4:	e7ee      	b.n	8006494 <__swhatbuf_r+0x1c>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	2000      	movs	r0, #0
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	b016      	add	sp, #88	; 0x58
 80064be:	bd70      	pop	{r4, r5, r6, pc}

080064c0 <__smakebuf_r>:
 80064c0:	898b      	ldrh	r3, [r1, #12]
 80064c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064c4:	079d      	lsls	r5, r3, #30
 80064c6:	4606      	mov	r6, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	d507      	bpl.n	80064dc <__smakebuf_r+0x1c>
 80064cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	2301      	movs	r3, #1
 80064d6:	6163      	str	r3, [r4, #20]
 80064d8:	b002      	add	sp, #8
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	ab01      	add	r3, sp, #4
 80064de:	466a      	mov	r2, sp
 80064e0:	f7ff ffca 	bl	8006478 <__swhatbuf_r>
 80064e4:	9900      	ldr	r1, [sp, #0]
 80064e6:	4605      	mov	r5, r0
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 fb75 	bl	8006bd8 <_malloc_r>
 80064ee:	b948      	cbnz	r0, 8006504 <__smakebuf_r+0x44>
 80064f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f4:	059a      	lsls	r2, r3, #22
 80064f6:	d4ef      	bmi.n	80064d8 <__smakebuf_r+0x18>
 80064f8:	f023 0303 	bic.w	r3, r3, #3
 80064fc:	f043 0302 	orr.w	r3, r3, #2
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	e7e3      	b.n	80064cc <__smakebuf_r+0xc>
 8006504:	4b0d      	ldr	r3, [pc, #52]	; (800653c <__smakebuf_r+0x7c>)
 8006506:	62b3      	str	r3, [r6, #40]	; 0x28
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	6020      	str	r0, [r4, #0]
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	9b00      	ldr	r3, [sp, #0]
 8006514:	6120      	str	r0, [r4, #16]
 8006516:	6163      	str	r3, [r4, #20]
 8006518:	9b01      	ldr	r3, [sp, #4]
 800651a:	b15b      	cbz	r3, 8006534 <__smakebuf_r+0x74>
 800651c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006520:	4630      	mov	r0, r6
 8006522:	f000 fd79 	bl	8007018 <_isatty_r>
 8006526:	b128      	cbz	r0, 8006534 <__smakebuf_r+0x74>
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	f043 0301 	orr.w	r3, r3, #1
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	431d      	orrs	r5, r3
 8006538:	81a5      	strh	r5, [r4, #12]
 800653a:	e7cd      	b.n	80064d8 <__smakebuf_r+0x18>
 800653c:	08006311 	.word	0x08006311

08006540 <malloc>:
 8006540:	4b02      	ldr	r3, [pc, #8]	; (800654c <malloc+0xc>)
 8006542:	4601      	mov	r1, r0
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	f000 bb47 	b.w	8006bd8 <_malloc_r>
 800654a:	bf00      	nop
 800654c:	2000000c 	.word	0x2000000c

08006550 <memchr>:
 8006550:	b510      	push	{r4, lr}
 8006552:	b2c9      	uxtb	r1, r1
 8006554:	4402      	add	r2, r0
 8006556:	4290      	cmp	r0, r2
 8006558:	4603      	mov	r3, r0
 800655a:	d101      	bne.n	8006560 <memchr+0x10>
 800655c:	2300      	movs	r3, #0
 800655e:	e003      	b.n	8006568 <memchr+0x18>
 8006560:	781c      	ldrb	r4, [r3, #0]
 8006562:	3001      	adds	r0, #1
 8006564:	428c      	cmp	r4, r1
 8006566:	d1f6      	bne.n	8006556 <memchr+0x6>
 8006568:	4618      	mov	r0, r3
 800656a:	bd10      	pop	{r4, pc}

0800656c <_Balloc>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006570:	4604      	mov	r4, r0
 8006572:	460e      	mov	r6, r1
 8006574:	b93d      	cbnz	r5, 8006586 <_Balloc+0x1a>
 8006576:	2010      	movs	r0, #16
 8006578:	f7ff ffe2 	bl	8006540 <malloc>
 800657c:	6260      	str	r0, [r4, #36]	; 0x24
 800657e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006582:	6005      	str	r5, [r0, #0]
 8006584:	60c5      	str	r5, [r0, #12]
 8006586:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006588:	68eb      	ldr	r3, [r5, #12]
 800658a:	b183      	cbz	r3, 80065ae <_Balloc+0x42>
 800658c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006594:	b9b8      	cbnz	r0, 80065c6 <_Balloc+0x5a>
 8006596:	2101      	movs	r1, #1
 8006598:	fa01 f506 	lsl.w	r5, r1, r6
 800659c:	1d6a      	adds	r2, r5, #5
 800659e:	0092      	lsls	r2, r2, #2
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fabe 	bl	8006b22 <_calloc_r>
 80065a6:	b160      	cbz	r0, 80065c2 <_Balloc+0x56>
 80065a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80065ac:	e00e      	b.n	80065cc <_Balloc+0x60>
 80065ae:	2221      	movs	r2, #33	; 0x21
 80065b0:	2104      	movs	r1, #4
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 fab5 	bl	8006b22 <_calloc_r>
 80065b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ba:	60e8      	str	r0, [r5, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e4      	bne.n	800658c <_Balloc+0x20>
 80065c2:	2000      	movs	r0, #0
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	6802      	ldr	r2, [r0, #0]
 80065c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065cc:	2300      	movs	r3, #0
 80065ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d2:	e7f7      	b.n	80065c4 <_Balloc+0x58>

080065d4 <_Bfree>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065d8:	4606      	mov	r6, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	b93c      	cbnz	r4, 80065ee <_Bfree+0x1a>
 80065de:	2010      	movs	r0, #16
 80065e0:	f7ff ffae 	bl	8006540 <malloc>
 80065e4:	6270      	str	r0, [r6, #36]	; 0x24
 80065e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065ea:	6004      	str	r4, [r0, #0]
 80065ec:	60c4      	str	r4, [r0, #12]
 80065ee:	b13d      	cbz	r5, 8006600 <_Bfree+0x2c>
 80065f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065f2:	686a      	ldr	r2, [r5, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065fa:	6029      	str	r1, [r5, #0]
 80065fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006600:	bd70      	pop	{r4, r5, r6, pc}

08006602 <__multadd>:
 8006602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006606:	461f      	mov	r7, r3
 8006608:	4606      	mov	r6, r0
 800660a:	460c      	mov	r4, r1
 800660c:	2300      	movs	r3, #0
 800660e:	690d      	ldr	r5, [r1, #16]
 8006610:	f101 0c14 	add.w	ip, r1, #20
 8006614:	f8dc 0000 	ldr.w	r0, [ip]
 8006618:	3301      	adds	r3, #1
 800661a:	b281      	uxth	r1, r0
 800661c:	fb02 7101 	mla	r1, r2, r1, r7
 8006620:	0c00      	lsrs	r0, r0, #16
 8006622:	0c0f      	lsrs	r7, r1, #16
 8006624:	fb02 7000 	mla	r0, r2, r0, r7
 8006628:	b289      	uxth	r1, r1
 800662a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800662e:	429d      	cmp	r5, r3
 8006630:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006634:	f84c 1b04 	str.w	r1, [ip], #4
 8006638:	dcec      	bgt.n	8006614 <__multadd+0x12>
 800663a:	b1d7      	cbz	r7, 8006672 <__multadd+0x70>
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	42ab      	cmp	r3, r5
 8006640:	dc12      	bgt.n	8006668 <__multadd+0x66>
 8006642:	6861      	ldr	r1, [r4, #4]
 8006644:	4630      	mov	r0, r6
 8006646:	3101      	adds	r1, #1
 8006648:	f7ff ff90 	bl	800656c <_Balloc>
 800664c:	4680      	mov	r8, r0
 800664e:	6922      	ldr	r2, [r4, #16]
 8006650:	f104 010c 	add.w	r1, r4, #12
 8006654:	3202      	adds	r2, #2
 8006656:	0092      	lsls	r2, r2, #2
 8006658:	300c      	adds	r0, #12
 800665a:	f7fe f9a3 	bl	80049a4 <memcpy>
 800665e:	4621      	mov	r1, r4
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff ffb7 	bl	80065d4 <_Bfree>
 8006666:	4644      	mov	r4, r8
 8006668:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800666c:	3501      	adds	r5, #1
 800666e:	615f      	str	r7, [r3, #20]
 8006670:	6125      	str	r5, [r4, #16]
 8006672:	4620      	mov	r0, r4
 8006674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006678 <__hi0bits>:
 8006678:	0c02      	lsrs	r2, r0, #16
 800667a:	0412      	lsls	r2, r2, #16
 800667c:	4603      	mov	r3, r0
 800667e:	b9b2      	cbnz	r2, 80066ae <__hi0bits+0x36>
 8006680:	0403      	lsls	r3, r0, #16
 8006682:	2010      	movs	r0, #16
 8006684:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006688:	bf04      	itt	eq
 800668a:	021b      	lsleq	r3, r3, #8
 800668c:	3008      	addeq	r0, #8
 800668e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006692:	bf04      	itt	eq
 8006694:	011b      	lsleq	r3, r3, #4
 8006696:	3004      	addeq	r0, #4
 8006698:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800669c:	bf04      	itt	eq
 800669e:	009b      	lsleq	r3, r3, #2
 80066a0:	3002      	addeq	r0, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	db06      	blt.n	80066b4 <__hi0bits+0x3c>
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	d503      	bpl.n	80066b2 <__hi0bits+0x3a>
 80066aa:	3001      	adds	r0, #1
 80066ac:	4770      	bx	lr
 80066ae:	2000      	movs	r0, #0
 80066b0:	e7e8      	b.n	8006684 <__hi0bits+0xc>
 80066b2:	2020      	movs	r0, #32
 80066b4:	4770      	bx	lr

080066b6 <__lo0bits>:
 80066b6:	6803      	ldr	r3, [r0, #0]
 80066b8:	4601      	mov	r1, r0
 80066ba:	f013 0207 	ands.w	r2, r3, #7
 80066be:	d00b      	beq.n	80066d8 <__lo0bits+0x22>
 80066c0:	07da      	lsls	r2, r3, #31
 80066c2:	d423      	bmi.n	800670c <__lo0bits+0x56>
 80066c4:	0798      	lsls	r0, r3, #30
 80066c6:	bf49      	itett	mi
 80066c8:	085b      	lsrmi	r3, r3, #1
 80066ca:	089b      	lsrpl	r3, r3, #2
 80066cc:	2001      	movmi	r0, #1
 80066ce:	600b      	strmi	r3, [r1, #0]
 80066d0:	bf5c      	itt	pl
 80066d2:	600b      	strpl	r3, [r1, #0]
 80066d4:	2002      	movpl	r0, #2
 80066d6:	4770      	bx	lr
 80066d8:	b298      	uxth	r0, r3
 80066da:	b9a8      	cbnz	r0, 8006708 <__lo0bits+0x52>
 80066dc:	2010      	movs	r0, #16
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066e4:	bf04      	itt	eq
 80066e6:	0a1b      	lsreq	r3, r3, #8
 80066e8:	3008      	addeq	r0, #8
 80066ea:	071a      	lsls	r2, r3, #28
 80066ec:	bf04      	itt	eq
 80066ee:	091b      	lsreq	r3, r3, #4
 80066f0:	3004      	addeq	r0, #4
 80066f2:	079a      	lsls	r2, r3, #30
 80066f4:	bf04      	itt	eq
 80066f6:	089b      	lsreq	r3, r3, #2
 80066f8:	3002      	addeq	r0, #2
 80066fa:	07da      	lsls	r2, r3, #31
 80066fc:	d402      	bmi.n	8006704 <__lo0bits+0x4e>
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	d006      	beq.n	8006710 <__lo0bits+0x5a>
 8006702:	3001      	adds	r0, #1
 8006704:	600b      	str	r3, [r1, #0]
 8006706:	4770      	bx	lr
 8006708:	4610      	mov	r0, r2
 800670a:	e7e9      	b.n	80066e0 <__lo0bits+0x2a>
 800670c:	2000      	movs	r0, #0
 800670e:	4770      	bx	lr
 8006710:	2020      	movs	r0, #32
 8006712:	4770      	bx	lr

08006714 <__i2b>:
 8006714:	b510      	push	{r4, lr}
 8006716:	460c      	mov	r4, r1
 8006718:	2101      	movs	r1, #1
 800671a:	f7ff ff27 	bl	800656c <_Balloc>
 800671e:	2201      	movs	r2, #1
 8006720:	6144      	str	r4, [r0, #20]
 8006722:	6102      	str	r2, [r0, #16]
 8006724:	bd10      	pop	{r4, pc}

08006726 <__multiply>:
 8006726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	4614      	mov	r4, r2
 800672c:	690a      	ldr	r2, [r1, #16]
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	4688      	mov	r8, r1
 8006732:	429a      	cmp	r2, r3
 8006734:	bfbe      	ittt	lt
 8006736:	460b      	movlt	r3, r1
 8006738:	46a0      	movlt	r8, r4
 800673a:	461c      	movlt	r4, r3
 800673c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006740:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006744:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800674c:	eb07 0609 	add.w	r6, r7, r9
 8006750:	42b3      	cmp	r3, r6
 8006752:	bfb8      	it	lt
 8006754:	3101      	addlt	r1, #1
 8006756:	f7ff ff09 	bl	800656c <_Balloc>
 800675a:	f100 0514 	add.w	r5, r0, #20
 800675e:	462b      	mov	r3, r5
 8006760:	2200      	movs	r2, #0
 8006762:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006766:	4573      	cmp	r3, lr
 8006768:	d316      	bcc.n	8006798 <__multiply+0x72>
 800676a:	f104 0214 	add.w	r2, r4, #20
 800676e:	f108 0114 	add.w	r1, r8, #20
 8006772:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006776:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	4293      	cmp	r3, r2
 8006782:	d80c      	bhi.n	800679e <__multiply+0x78>
 8006784:	2e00      	cmp	r6, #0
 8006786:	dd03      	ble.n	8006790 <__multiply+0x6a>
 8006788:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05d      	beq.n	800684c <__multiply+0x126>
 8006790:	6106      	str	r6, [r0, #16]
 8006792:	b003      	add	sp, #12
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006798:	f843 2b04 	str.w	r2, [r3], #4
 800679c:	e7e3      	b.n	8006766 <__multiply+0x40>
 800679e:	f8b2 b000 	ldrh.w	fp, [r2]
 80067a2:	f1bb 0f00 	cmp.w	fp, #0
 80067a6:	d023      	beq.n	80067f0 <__multiply+0xca>
 80067a8:	4689      	mov	r9, r1
 80067aa:	46ac      	mov	ip, r5
 80067ac:	f04f 0800 	mov.w	r8, #0
 80067b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80067b4:	f8dc a000 	ldr.w	sl, [ip]
 80067b8:	b2a3      	uxth	r3, r4
 80067ba:	fa1f fa8a 	uxth.w	sl, sl
 80067be:	fb0b a303 	mla	r3, fp, r3, sl
 80067c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067c6:	f8dc 4000 	ldr.w	r4, [ip]
 80067ca:	4443      	add	r3, r8
 80067cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067d0:	fb0b 840a 	mla	r4, fp, sl, r8
 80067d4:	46e2      	mov	sl, ip
 80067d6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067e0:	454f      	cmp	r7, r9
 80067e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067e6:	f84a 3b04 	str.w	r3, [sl], #4
 80067ea:	d82b      	bhi.n	8006844 <__multiply+0x11e>
 80067ec:	f8cc 8004 	str.w	r8, [ip, #4]
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	3204      	adds	r2, #4
 80067f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067f8:	f1ba 0f00 	cmp.w	sl, #0
 80067fc:	d020      	beq.n	8006840 <__multiply+0x11a>
 80067fe:	4689      	mov	r9, r1
 8006800:	46a8      	mov	r8, r5
 8006802:	f04f 0b00 	mov.w	fp, #0
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	f8b9 c000 	ldrh.w	ip, [r9]
 800680c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006810:	b29b      	uxth	r3, r3
 8006812:	fb0a 440c 	mla	r4, sl, ip, r4
 8006816:	46c4      	mov	ip, r8
 8006818:	445c      	add	r4, fp
 800681a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800681e:	f84c 3b04 	str.w	r3, [ip], #4
 8006822:	f859 3b04 	ldr.w	r3, [r9], #4
 8006826:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	fb0a b303 	mla	r3, sl, r3, fp
 8006830:	454f      	cmp	r7, r9
 8006832:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006836:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800683a:	d805      	bhi.n	8006848 <__multiply+0x122>
 800683c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006840:	3504      	adds	r5, #4
 8006842:	e79b      	b.n	800677c <__multiply+0x56>
 8006844:	46d4      	mov	ip, sl
 8006846:	e7b3      	b.n	80067b0 <__multiply+0x8a>
 8006848:	46e0      	mov	r8, ip
 800684a:	e7dd      	b.n	8006808 <__multiply+0xe2>
 800684c:	3e01      	subs	r6, #1
 800684e:	e799      	b.n	8006784 <__multiply+0x5e>

08006850 <__pow5mult>:
 8006850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006854:	4615      	mov	r5, r2
 8006856:	f012 0203 	ands.w	r2, r2, #3
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	d007      	beq.n	8006870 <__pow5mult+0x20>
 8006860:	4c21      	ldr	r4, [pc, #132]	; (80068e8 <__pow5mult+0x98>)
 8006862:	3a01      	subs	r2, #1
 8006864:	2300      	movs	r3, #0
 8006866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800686a:	f7ff feca 	bl	8006602 <__multadd>
 800686e:	4607      	mov	r7, r0
 8006870:	10ad      	asrs	r5, r5, #2
 8006872:	d035      	beq.n	80068e0 <__pow5mult+0x90>
 8006874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006876:	b93c      	cbnz	r4, 8006888 <__pow5mult+0x38>
 8006878:	2010      	movs	r0, #16
 800687a:	f7ff fe61 	bl	8006540 <malloc>
 800687e:	6270      	str	r0, [r6, #36]	; 0x24
 8006880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006884:	6004      	str	r4, [r0, #0]
 8006886:	60c4      	str	r4, [r0, #12]
 8006888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800688c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006890:	b94c      	cbnz	r4, 80068a6 <__pow5mult+0x56>
 8006892:	f240 2171 	movw	r1, #625	; 0x271
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff3c 	bl	8006714 <__i2b>
 800689c:	2300      	movs	r3, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	07eb      	lsls	r3, r5, #31
 80068ac:	d50a      	bpl.n	80068c4 <__pow5mult+0x74>
 80068ae:	4639      	mov	r1, r7
 80068b0:	4622      	mov	r2, r4
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff37 	bl	8006726 <__multiply>
 80068b8:	4681      	mov	r9, r0
 80068ba:	4639      	mov	r1, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff fe89 	bl	80065d4 <_Bfree>
 80068c2:	464f      	mov	r7, r9
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	d00b      	beq.n	80068e0 <__pow5mult+0x90>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	b938      	cbnz	r0, 80068dc <__pow5mult+0x8c>
 80068cc:	4622      	mov	r2, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff28 	bl	8006726 <__multiply>
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f8c0 8000 	str.w	r8, [r0]
 80068dc:	4604      	mov	r4, r0
 80068de:	e7e4      	b.n	80068aa <__pow5mult+0x5a>
 80068e0:	4638      	mov	r0, r7
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	bf00      	nop
 80068e8:	08007658 	.word	0x08007658

080068ec <__lshift>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	4607      	mov	r7, r0
 80068f4:	4616      	mov	r6, r2
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068fc:	eb0a 0903 	add.w	r9, sl, r3
 8006900:	6849      	ldr	r1, [r1, #4]
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	f109 0501 	add.w	r5, r9, #1
 8006908:	42ab      	cmp	r3, r5
 800690a:	db32      	blt.n	8006972 <__lshift+0x86>
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff fe2d 	bl	800656c <_Balloc>
 8006912:	2300      	movs	r3, #0
 8006914:	4680      	mov	r8, r0
 8006916:	461a      	mov	r2, r3
 8006918:	f100 0114 	add.w	r1, r0, #20
 800691c:	4553      	cmp	r3, sl
 800691e:	db2b      	blt.n	8006978 <__lshift+0x8c>
 8006920:	6920      	ldr	r0, [r4, #16]
 8006922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006926:	f104 0314 	add.w	r3, r4, #20
 800692a:	f016 021f 	ands.w	r2, r6, #31
 800692e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006932:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006936:	d025      	beq.n	8006984 <__lshift+0x98>
 8006938:	2000      	movs	r0, #0
 800693a:	f1c2 0e20 	rsb	lr, r2, #32
 800693e:	468a      	mov	sl, r1
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	4096      	lsls	r6, r2
 8006944:	4330      	orrs	r0, r6
 8006946:	f84a 0b04 	str.w	r0, [sl], #4
 800694a:	f853 0b04 	ldr.w	r0, [r3], #4
 800694e:	459c      	cmp	ip, r3
 8006950:	fa20 f00e 	lsr.w	r0, r0, lr
 8006954:	d814      	bhi.n	8006980 <__lshift+0x94>
 8006956:	6048      	str	r0, [r1, #4]
 8006958:	b108      	cbz	r0, 800695e <__lshift+0x72>
 800695a:	f109 0502 	add.w	r5, r9, #2
 800695e:	3d01      	subs	r5, #1
 8006960:	4638      	mov	r0, r7
 8006962:	f8c8 5010 	str.w	r5, [r8, #16]
 8006966:	4621      	mov	r1, r4
 8006968:	f7ff fe34 	bl	80065d4 <_Bfree>
 800696c:	4640      	mov	r0, r8
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	3101      	adds	r1, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	e7c7      	b.n	8006908 <__lshift+0x1c>
 8006978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800697c:	3301      	adds	r3, #1
 800697e:	e7cd      	b.n	800691c <__lshift+0x30>
 8006980:	4651      	mov	r1, sl
 8006982:	e7dc      	b.n	800693e <__lshift+0x52>
 8006984:	3904      	subs	r1, #4
 8006986:	f853 2b04 	ldr.w	r2, [r3], #4
 800698a:	459c      	cmp	ip, r3
 800698c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006990:	d8f9      	bhi.n	8006986 <__lshift+0x9a>
 8006992:	e7e4      	b.n	800695e <__lshift+0x72>

08006994 <__mcmp>:
 8006994:	6903      	ldr	r3, [r0, #16]
 8006996:	690a      	ldr	r2, [r1, #16]
 8006998:	b530      	push	{r4, r5, lr}
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	d10c      	bne.n	80069b8 <__mcmp+0x24>
 800699e:	0092      	lsls	r2, r2, #2
 80069a0:	3014      	adds	r0, #20
 80069a2:	3114      	adds	r1, #20
 80069a4:	1884      	adds	r4, r0, r2
 80069a6:	4411      	add	r1, r2
 80069a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069b0:	4295      	cmp	r5, r2
 80069b2:	d003      	beq.n	80069bc <__mcmp+0x28>
 80069b4:	d305      	bcc.n	80069c2 <__mcmp+0x2e>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	bd30      	pop	{r4, r5, pc}
 80069bc:	42a0      	cmp	r0, r4
 80069be:	d3f3      	bcc.n	80069a8 <__mcmp+0x14>
 80069c0:	e7fa      	b.n	80069b8 <__mcmp+0x24>
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c6:	e7f7      	b.n	80069b8 <__mcmp+0x24>

080069c8 <__mdiff>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	460d      	mov	r5, r1
 80069ce:	4607      	mov	r7, r0
 80069d0:	4611      	mov	r1, r2
 80069d2:	4628      	mov	r0, r5
 80069d4:	4614      	mov	r4, r2
 80069d6:	f7ff ffdd 	bl	8006994 <__mcmp>
 80069da:	1e06      	subs	r6, r0, #0
 80069dc:	d108      	bne.n	80069f0 <__mdiff+0x28>
 80069de:	4631      	mov	r1, r6
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff fdc3 	bl	800656c <_Balloc>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f0:	bfa4      	itt	ge
 80069f2:	4623      	movge	r3, r4
 80069f4:	462c      	movge	r4, r5
 80069f6:	4638      	mov	r0, r7
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	bfa6      	itte	ge
 80069fc:	461d      	movge	r5, r3
 80069fe:	2600      	movge	r6, #0
 8006a00:	2601      	movlt	r6, #1
 8006a02:	f7ff fdb3 	bl	800656c <_Balloc>
 8006a06:	f04f 0e00 	mov.w	lr, #0
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	692b      	ldr	r3, [r5, #16]
 8006a0e:	6926      	ldr	r6, [r4, #16]
 8006a10:	f104 0214 	add.w	r2, r4, #20
 8006a14:	f105 0914 	add.w	r9, r5, #20
 8006a18:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a1c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a20:	f100 0114 	add.w	r1, r0, #20
 8006a24:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a28:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a2c:	fa1f f38a 	uxth.w	r3, sl
 8006a30:	4473      	add	r3, lr
 8006a32:	b2ac      	uxth	r4, r5
 8006a34:	1b1b      	subs	r3, r3, r4
 8006a36:	0c2c      	lsrs	r4, r5, #16
 8006a38:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a3c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006a46:	45c8      	cmp	r8, r9
 8006a48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006a4c:	4694      	mov	ip, r2
 8006a4e:	f841 4b04 	str.w	r4, [r1], #4
 8006a52:	d8e7      	bhi.n	8006a24 <__mdiff+0x5c>
 8006a54:	45bc      	cmp	ip, r7
 8006a56:	d304      	bcc.n	8006a62 <__mdiff+0x9a>
 8006a58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a5c:	b183      	cbz	r3, 8006a80 <__mdiff+0xb8>
 8006a5e:	6106      	str	r6, [r0, #16]
 8006a60:	e7c4      	b.n	80069ec <__mdiff+0x24>
 8006a62:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006a66:	b2a2      	uxth	r2, r4
 8006a68:	4472      	add	r2, lr
 8006a6a:	1413      	asrs	r3, r2, #16
 8006a6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a70:	b292      	uxth	r2, r2
 8006a72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a76:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a7a:	f841 2b04 	str.w	r2, [r1], #4
 8006a7e:	e7e9      	b.n	8006a54 <__mdiff+0x8c>
 8006a80:	3e01      	subs	r6, #1
 8006a82:	e7e9      	b.n	8006a58 <__mdiff+0x90>

08006a84 <__d2b>:
 8006a84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a88:	461c      	mov	r4, r3
 8006a8a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4690      	mov	r8, r2
 8006a92:	f7ff fd6b 	bl	800656c <_Balloc>
 8006a96:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a9a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	bb34      	cbnz	r4, 8006af0 <__d2b+0x6c>
 8006aa2:	9201      	str	r2, [sp, #4]
 8006aa4:	f1b8 0200 	subs.w	r2, r8, #0
 8006aa8:	d027      	beq.n	8006afa <__d2b+0x76>
 8006aaa:	a802      	add	r0, sp, #8
 8006aac:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006ab0:	f7ff fe01 	bl	80066b6 <__lo0bits>
 8006ab4:	9900      	ldr	r1, [sp, #0]
 8006ab6:	b1f0      	cbz	r0, 8006af6 <__d2b+0x72>
 8006ab8:	9a01      	ldr	r2, [sp, #4]
 8006aba:	f1c0 0320 	rsb	r3, r0, #32
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	40c2      	lsrs	r2, r0
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	9201      	str	r2, [sp, #4]
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2102      	movne	r1, #2
 8006ad2:	2101      	moveq	r1, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	6139      	str	r1, [r7, #16]
 8006ad8:	b1c4      	cbz	r4, 8006b0c <__d2b+0x88>
 8006ada:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ade:	4404      	add	r4, r0
 8006ae0:	6034      	str	r4, [r6, #0]
 8006ae2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ae6:	6028      	str	r0, [r5, #0]
 8006ae8:	4638      	mov	r0, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006af4:	e7d5      	b.n	8006aa2 <__d2b+0x1e>
 8006af6:	6179      	str	r1, [r7, #20]
 8006af8:	e7e7      	b.n	8006aca <__d2b+0x46>
 8006afa:	a801      	add	r0, sp, #4
 8006afc:	f7ff fddb 	bl	80066b6 <__lo0bits>
 8006b00:	2101      	movs	r1, #1
 8006b02:	9b01      	ldr	r3, [sp, #4]
 8006b04:	6139      	str	r1, [r7, #16]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	3020      	adds	r0, #32
 8006b0a:	e7e5      	b.n	8006ad8 <__d2b+0x54>
 8006b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	6918      	ldr	r0, [r3, #16]
 8006b18:	f7ff fdae 	bl	8006678 <__hi0bits>
 8006b1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b20:	e7e1      	b.n	8006ae6 <__d2b+0x62>

08006b22 <_calloc_r>:
 8006b22:	b538      	push	{r3, r4, r5, lr}
 8006b24:	fb02 f401 	mul.w	r4, r2, r1
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f000 f855 	bl	8006bd8 <_malloc_r>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b118      	cbz	r0, 8006b3a <_calloc_r+0x18>
 8006b32:	4622      	mov	r2, r4
 8006b34:	2100      	movs	r1, #0
 8006b36:	f7fd ff40 	bl	80049ba <memset>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b40 <_free_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4605      	mov	r5, r0
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d043      	beq.n	8006bd0 <_free_r+0x90>
 8006b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4c:	1f0c      	subs	r4, r1, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	18e4      	addlt	r4, r4, r3
 8006b54:	f000 fa94 	bl	8007080 <__malloc_lock>
 8006b58:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <_free_r+0x94>)
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	b933      	cbnz	r3, 8006b6e <_free_r+0x2e>
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	6014      	str	r4, [r2, #0]
 8006b64:	4628      	mov	r0, r5
 8006b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b6a:	f000 ba8a 	b.w	8007082 <__malloc_unlock>
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	d90b      	bls.n	8006b8a <_free_r+0x4a>
 8006b72:	6821      	ldr	r1, [r4, #0]
 8006b74:	1862      	adds	r2, r4, r1
 8006b76:	4293      	cmp	r3, r2
 8006b78:	bf01      	itttt	eq
 8006b7a:	681a      	ldreq	r2, [r3, #0]
 8006b7c:	685b      	ldreq	r3, [r3, #4]
 8006b7e:	1852      	addeq	r2, r2, r1
 8006b80:	6022      	streq	r2, [r4, #0]
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6004      	str	r4, [r0, #0]
 8006b86:	e7ed      	b.n	8006b64 <_free_r+0x24>
 8006b88:	4613      	mov	r3, r2
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	b10a      	cbz	r2, 8006b92 <_free_r+0x52>
 8006b8e:	42a2      	cmp	r2, r4
 8006b90:	d9fa      	bls.n	8006b88 <_free_r+0x48>
 8006b92:	6819      	ldr	r1, [r3, #0]
 8006b94:	1858      	adds	r0, r3, r1
 8006b96:	42a0      	cmp	r0, r4
 8006b98:	d10b      	bne.n	8006bb2 <_free_r+0x72>
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	4401      	add	r1, r0
 8006b9e:	1858      	adds	r0, r3, r1
 8006ba0:	4282      	cmp	r2, r0
 8006ba2:	6019      	str	r1, [r3, #0]
 8006ba4:	d1de      	bne.n	8006b64 <_free_r+0x24>
 8006ba6:	6810      	ldr	r0, [r2, #0]
 8006ba8:	6852      	ldr	r2, [r2, #4]
 8006baa:	4401      	add	r1, r0
 8006bac:	6019      	str	r1, [r3, #0]
 8006bae:	605a      	str	r2, [r3, #4]
 8006bb0:	e7d8      	b.n	8006b64 <_free_r+0x24>
 8006bb2:	d902      	bls.n	8006bba <_free_r+0x7a>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	e7d4      	b.n	8006b64 <_free_r+0x24>
 8006bba:	6820      	ldr	r0, [r4, #0]
 8006bbc:	1821      	adds	r1, r4, r0
 8006bbe:	428a      	cmp	r2, r1
 8006bc0:	bf01      	itttt	eq
 8006bc2:	6811      	ldreq	r1, [r2, #0]
 8006bc4:	6852      	ldreq	r2, [r2, #4]
 8006bc6:	1809      	addeq	r1, r1, r0
 8006bc8:	6021      	streq	r1, [r4, #0]
 8006bca:	6062      	str	r2, [r4, #4]
 8006bcc:	605c      	str	r4, [r3, #4]
 8006bce:	e7c9      	b.n	8006b64 <_free_r+0x24>
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200001fc 	.word	0x200001fc

08006bd8 <_malloc_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	1ccd      	adds	r5, r1, #3
 8006bdc:	f025 0503 	bic.w	r5, r5, #3
 8006be0:	3508      	adds	r5, #8
 8006be2:	2d0c      	cmp	r5, #12
 8006be4:	bf38      	it	cc
 8006be6:	250c      	movcc	r5, #12
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	db01      	blt.n	8006bf2 <_malloc_r+0x1a>
 8006bee:	42a9      	cmp	r1, r5
 8006bf0:	d903      	bls.n	8006bfa <_malloc_r+0x22>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
 8006bfa:	f000 fa41 	bl	8007080 <__malloc_lock>
 8006bfe:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <_malloc_r+0xac>)
 8006c00:	6814      	ldr	r4, [r2, #0]
 8006c02:	4621      	mov	r1, r4
 8006c04:	b991      	cbnz	r1, 8006c2c <_malloc_r+0x54>
 8006c06:	4c20      	ldr	r4, [pc, #128]	; (8006c88 <_malloc_r+0xb0>)
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	b91b      	cbnz	r3, 8006c14 <_malloc_r+0x3c>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f000 f97b 	bl	8006f08 <_sbrk_r>
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f976 	bl	8006f08 <_sbrk_r>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d124      	bne.n	8006c6a <_malloc_r+0x92>
 8006c20:	230c      	movs	r3, #12
 8006c22:	4630      	mov	r0, r6
 8006c24:	6033      	str	r3, [r6, #0]
 8006c26:	f000 fa2c 	bl	8007082 <__malloc_unlock>
 8006c2a:	e7e4      	b.n	8006bf6 <_malloc_r+0x1e>
 8006c2c:	680b      	ldr	r3, [r1, #0]
 8006c2e:	1b5b      	subs	r3, r3, r5
 8006c30:	d418      	bmi.n	8006c64 <_malloc_r+0x8c>
 8006c32:	2b0b      	cmp	r3, #11
 8006c34:	d90f      	bls.n	8006c56 <_malloc_r+0x7e>
 8006c36:	600b      	str	r3, [r1, #0]
 8006c38:	18cc      	adds	r4, r1, r3
 8006c3a:	50cd      	str	r5, [r1, r3]
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 fa20 	bl	8007082 <__malloc_unlock>
 8006c42:	f104 000b 	add.w	r0, r4, #11
 8006c46:	1d23      	adds	r3, r4, #4
 8006c48:	f020 0007 	bic.w	r0, r0, #7
 8006c4c:	1ac3      	subs	r3, r0, r3
 8006c4e:	d0d3      	beq.n	8006bf8 <_malloc_r+0x20>
 8006c50:	425a      	negs	r2, r3
 8006c52:	50e2      	str	r2, [r4, r3]
 8006c54:	e7d0      	b.n	8006bf8 <_malloc_r+0x20>
 8006c56:	684b      	ldr	r3, [r1, #4]
 8006c58:	428c      	cmp	r4, r1
 8006c5a:	bf16      	itet	ne
 8006c5c:	6063      	strne	r3, [r4, #4]
 8006c5e:	6013      	streq	r3, [r2, #0]
 8006c60:	460c      	movne	r4, r1
 8006c62:	e7eb      	b.n	8006c3c <_malloc_r+0x64>
 8006c64:	460c      	mov	r4, r1
 8006c66:	6849      	ldr	r1, [r1, #4]
 8006c68:	e7cc      	b.n	8006c04 <_malloc_r+0x2c>
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d005      	beq.n	8006c80 <_malloc_r+0xa8>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4630      	mov	r0, r6
 8006c78:	f000 f946 	bl	8006f08 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d0cf      	beq.n	8006c20 <_malloc_r+0x48>
 8006c80:	6025      	str	r5, [r4, #0]
 8006c82:	e7db      	b.n	8006c3c <_malloc_r+0x64>
 8006c84:	200001fc 	.word	0x200001fc
 8006c88:	20000200 	.word	0x20000200

08006c8c <__sfputc_r>:
 8006c8c:	6893      	ldr	r3, [r2, #8]
 8006c8e:	b410      	push	{r4}
 8006c90:	3b01      	subs	r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	6093      	str	r3, [r2, #8]
 8006c96:	da07      	bge.n	8006ca8 <__sfputc_r+0x1c>
 8006c98:	6994      	ldr	r4, [r2, #24]
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	db01      	blt.n	8006ca2 <__sfputc_r+0x16>
 8006c9e:	290a      	cmp	r1, #10
 8006ca0:	d102      	bne.n	8006ca8 <__sfputc_r+0x1c>
 8006ca2:	bc10      	pop	{r4}
 8006ca4:	f7fe bb5c 	b.w	8005360 <__swbuf_r>
 8006ca8:	6813      	ldr	r3, [r2, #0]
 8006caa:	1c58      	adds	r0, r3, #1
 8006cac:	6010      	str	r0, [r2, #0]
 8006cae:	7019      	strb	r1, [r3, #0]
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	bc10      	pop	{r4}
 8006cb4:	4770      	bx	lr

08006cb6 <__sfputs_r>:
 8006cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb8:	4606      	mov	r6, r0
 8006cba:	460f      	mov	r7, r1
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	18d5      	adds	r5, r2, r3
 8006cc0:	42ac      	cmp	r4, r5
 8006cc2:	d101      	bne.n	8006cc8 <__sfputs_r+0x12>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e007      	b.n	8006cd8 <__sfputs_r+0x22>
 8006cc8:	463a      	mov	r2, r7
 8006cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ffdc 	bl	8006c8c <__sfputc_r>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d1f3      	bne.n	8006cc0 <__sfputs_r+0xa>
 8006cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cdc <_vfiprintf_r>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	b09d      	sub	sp, #116	; 0x74
 8006ce4:	4617      	mov	r7, r2
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	4606      	mov	r6, r0
 8006cea:	b118      	cbz	r0, 8006cf4 <_vfiprintf_r+0x18>
 8006cec:	6983      	ldr	r3, [r0, #24]
 8006cee:	b90b      	cbnz	r3, 8006cf4 <_vfiprintf_r+0x18>
 8006cf0:	f7ff fb2a 	bl	8006348 <__sinit>
 8006cf4:	4b7c      	ldr	r3, [pc, #496]	; (8006ee8 <_vfiprintf_r+0x20c>)
 8006cf6:	429c      	cmp	r4, r3
 8006cf8:	d158      	bne.n	8006dac <_vfiprintf_r+0xd0>
 8006cfa:	6874      	ldr	r4, [r6, #4]
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	0718      	lsls	r0, r3, #28
 8006d00:	d55e      	bpl.n	8006dc0 <_vfiprintf_r+0xe4>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d05b      	beq.n	8006dc0 <_vfiprintf_r+0xe4>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d12:	2330      	movs	r3, #48	; 0x30
 8006d14:	f04f 0b01 	mov.w	fp, #1
 8006d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d1c:	9503      	str	r5, [sp, #12]
 8006d1e:	46b8      	mov	r8, r7
 8006d20:	4645      	mov	r5, r8
 8006d22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d26:	b10b      	cbz	r3, 8006d2c <_vfiprintf_r+0x50>
 8006d28:	2b25      	cmp	r3, #37	; 0x25
 8006d2a:	d154      	bne.n	8006dd6 <_vfiprintf_r+0xfa>
 8006d2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006d30:	d00b      	beq.n	8006d4a <_vfiprintf_r+0x6e>
 8006d32:	4653      	mov	r3, sl
 8006d34:	463a      	mov	r2, r7
 8006d36:	4621      	mov	r1, r4
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7ff ffbc 	bl	8006cb6 <__sfputs_r>
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f000 80c2 	beq.w	8006ec8 <_vfiprintf_r+0x1ec>
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	4453      	add	r3, sl
 8006d48:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4a:	f898 3000 	ldrb.w	r3, [r8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80ba 	beq.w	8006ec8 <_vfiprintf_r+0x1ec>
 8006d54:	2300      	movs	r3, #0
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d5e:	9304      	str	r3, [sp, #16]
 8006d60:	9307      	str	r3, [sp, #28]
 8006d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d66:	931a      	str	r3, [sp, #104]	; 0x68
 8006d68:	46a8      	mov	r8, r5
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006d70:	485e      	ldr	r0, [pc, #376]	; (8006eec <_vfiprintf_r+0x210>)
 8006d72:	f7ff fbed 	bl	8006550 <memchr>
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	bb78      	cbnz	r0, 8006dda <_vfiprintf_r+0xfe>
 8006d7a:	06d9      	lsls	r1, r3, #27
 8006d7c:	bf44      	itt	mi
 8006d7e:	2220      	movmi	r2, #32
 8006d80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d84:	071a      	lsls	r2, r3, #28
 8006d86:	bf44      	itt	mi
 8006d88:	222b      	movmi	r2, #43	; 0x2b
 8006d8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d8e:	782a      	ldrb	r2, [r5, #0]
 8006d90:	2a2a      	cmp	r2, #42	; 0x2a
 8006d92:	d02a      	beq.n	8006dea <_vfiprintf_r+0x10e>
 8006d94:	46a8      	mov	r8, r5
 8006d96:	2000      	movs	r0, #0
 8006d98:	250a      	movs	r5, #10
 8006d9a:	9a07      	ldr	r2, [sp, #28]
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da2:	3b30      	subs	r3, #48	; 0x30
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	d969      	bls.n	8006e7c <_vfiprintf_r+0x1a0>
 8006da8:	b360      	cbz	r0, 8006e04 <_vfiprintf_r+0x128>
 8006daa:	e024      	b.n	8006df6 <_vfiprintf_r+0x11a>
 8006dac:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <_vfiprintf_r+0x214>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d101      	bne.n	8006db6 <_vfiprintf_r+0xda>
 8006db2:	68b4      	ldr	r4, [r6, #8]
 8006db4:	e7a2      	b.n	8006cfc <_vfiprintf_r+0x20>
 8006db6:	4b4f      	ldr	r3, [pc, #316]	; (8006ef4 <_vfiprintf_r+0x218>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	bf08      	it	eq
 8006dbc:	68f4      	ldreq	r4, [r6, #12]
 8006dbe:	e79d      	b.n	8006cfc <_vfiprintf_r+0x20>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7fe fb1e 	bl	8005404 <__swsetup_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d09d      	beq.n	8006d08 <_vfiprintf_r+0x2c>
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd0:	b01d      	add	sp, #116	; 0x74
 8006dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd6:	46a8      	mov	r8, r5
 8006dd8:	e7a2      	b.n	8006d20 <_vfiprintf_r+0x44>
 8006dda:	4a44      	ldr	r2, [pc, #272]	; (8006eec <_vfiprintf_r+0x210>)
 8006ddc:	4645      	mov	r5, r8
 8006dde:	1a80      	subs	r0, r0, r2
 8006de0:	fa0b f000 	lsl.w	r0, fp, r0
 8006de4:	4318      	orrs	r0, r3
 8006de6:	9004      	str	r0, [sp, #16]
 8006de8:	e7be      	b.n	8006d68 <_vfiprintf_r+0x8c>
 8006dea:	9a03      	ldr	r2, [sp, #12]
 8006dec:	1d11      	adds	r1, r2, #4
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	9103      	str	r1, [sp, #12]
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	db01      	blt.n	8006dfa <_vfiprintf_r+0x11e>
 8006df6:	9207      	str	r2, [sp, #28]
 8006df8:	e004      	b.n	8006e04 <_vfiprintf_r+0x128>
 8006dfa:	4252      	negs	r2, r2
 8006dfc:	f043 0302 	orr.w	r3, r3, #2
 8006e00:	9207      	str	r2, [sp, #28]
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	f898 3000 	ldrb.w	r3, [r8]
 8006e08:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0a:	d10e      	bne.n	8006e2a <_vfiprintf_r+0x14e>
 8006e0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006e10:	2b2a      	cmp	r3, #42	; 0x2a
 8006e12:	d138      	bne.n	8006e86 <_vfiprintf_r+0x1aa>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	f108 0802 	add.w	r8, r8, #2
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	9203      	str	r2, [sp, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bfb8      	it	lt
 8006e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e28:	9305      	str	r3, [sp, #20]
 8006e2a:	4d33      	ldr	r5, [pc, #204]	; (8006ef8 <_vfiprintf_r+0x21c>)
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	f898 1000 	ldrb.w	r1, [r8]
 8006e32:	4628      	mov	r0, r5
 8006e34:	f7ff fb8c 	bl	8006550 <memchr>
 8006e38:	b140      	cbz	r0, 8006e4c <_vfiprintf_r+0x170>
 8006e3a:	2340      	movs	r3, #64	; 0x40
 8006e3c:	1b40      	subs	r0, r0, r5
 8006e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	f108 0801 	add.w	r8, r8, #1
 8006e48:	4303      	orrs	r3, r0
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	f898 1000 	ldrb.w	r1, [r8]
 8006e50:	2206      	movs	r2, #6
 8006e52:	482a      	ldr	r0, [pc, #168]	; (8006efc <_vfiprintf_r+0x220>)
 8006e54:	f108 0701 	add.w	r7, r8, #1
 8006e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e5c:	f7ff fb78 	bl	8006550 <memchr>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d037      	beq.n	8006ed4 <_vfiprintf_r+0x1f8>
 8006e64:	4b26      	ldr	r3, [pc, #152]	; (8006f00 <_vfiprintf_r+0x224>)
 8006e66:	bb1b      	cbnz	r3, 8006eb0 <_vfiprintf_r+0x1d4>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	3307      	adds	r3, #7
 8006e6c:	f023 0307 	bic.w	r3, r3, #7
 8006e70:	3308      	adds	r3, #8
 8006e72:	9303      	str	r3, [sp, #12]
 8006e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e76:	444b      	add	r3, r9
 8006e78:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7a:	e750      	b.n	8006d1e <_vfiprintf_r+0x42>
 8006e7c:	fb05 3202 	mla	r2, r5, r2, r3
 8006e80:	2001      	movs	r0, #1
 8006e82:	4688      	mov	r8, r1
 8006e84:	e78a      	b.n	8006d9c <_vfiprintf_r+0xc0>
 8006e86:	2300      	movs	r3, #0
 8006e88:	250a      	movs	r5, #10
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f108 0801 	add.w	r8, r8, #1
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	4640      	mov	r0, r8
 8006e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e98:	3a30      	subs	r2, #48	; 0x30
 8006e9a:	2a09      	cmp	r2, #9
 8006e9c:	d903      	bls.n	8006ea6 <_vfiprintf_r+0x1ca>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0c3      	beq.n	8006e2a <_vfiprintf_r+0x14e>
 8006ea2:	9105      	str	r1, [sp, #20]
 8006ea4:	e7c1      	b.n	8006e2a <_vfiprintf_r+0x14e>
 8006ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4680      	mov	r8, r0
 8006eae:	e7f0      	b.n	8006e92 <_vfiprintf_r+0x1b6>
 8006eb0:	ab03      	add	r3, sp, #12
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <_vfiprintf_r+0x228>)
 8006eb8:	a904      	add	r1, sp, #16
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7fd fe16 	bl	8004aec <_printf_float>
 8006ec0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ec4:	4681      	mov	r9, r0
 8006ec6:	d1d5      	bne.n	8006e74 <_vfiprintf_r+0x198>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	065b      	lsls	r3, r3, #25
 8006ecc:	f53f af7e 	bmi.w	8006dcc <_vfiprintf_r+0xf0>
 8006ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ed2:	e77d      	b.n	8006dd0 <_vfiprintf_r+0xf4>
 8006ed4:	ab03      	add	r3, sp, #12
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <_vfiprintf_r+0x228>)
 8006edc:	a904      	add	r1, sp, #16
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7fe f8b0 	bl	8005044 <_printf_i>
 8006ee4:	e7ec      	b.n	8006ec0 <_vfiprintf_r+0x1e4>
 8006ee6:	bf00      	nop
 8006ee8:	08007528 	.word	0x08007528
 8006eec:	08007664 	.word	0x08007664
 8006ef0:	08007548 	.word	0x08007548
 8006ef4:	08007508 	.word	0x08007508
 8006ef8:	0800766a 	.word	0x0800766a
 8006efc:	0800766e 	.word	0x0800766e
 8006f00:	08004aed 	.word	0x08004aed
 8006f04:	08006cb7 	.word	0x08006cb7

08006f08 <_sbrk_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4c05      	ldr	r4, [pc, #20]	; (8006f24 <_sbrk_r+0x1c>)
 8006f0e:	4605      	mov	r5, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	f7fb fc10 	bl	8002738 <_sbrk>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_sbrk_r+0x1a>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_sbrk_r+0x1a>
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	20000334 	.word	0x20000334

08006f28 <__sread>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	f000 f8a8 	bl	8007084 <_read_r>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	bfab      	itete	ge
 8006f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f3c:	181b      	addge	r3, r3, r0
 8006f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f42:	bfac      	ite	ge
 8006f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f46:	81a3      	strhlt	r3, [r4, #12]
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <__swrite>:
 8006f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4e:	461f      	mov	r7, r3
 8006f50:	898b      	ldrh	r3, [r1, #12]
 8006f52:	4605      	mov	r5, r0
 8006f54:	05db      	lsls	r3, r3, #23
 8006f56:	460c      	mov	r4, r1
 8006f58:	4616      	mov	r6, r2
 8006f5a:	d505      	bpl.n	8006f68 <__swrite+0x1e>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	f000 f868 	bl	8007038 <_lseek_r>
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f76:	463b      	mov	r3, r7
 8006f78:	4628      	mov	r0, r5
 8006f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	f000 b817 	b.w	8006fb0 <_write_r>

08006f82 <__sseek>:
 8006f82:	b510      	push	{r4, lr}
 8006f84:	460c      	mov	r4, r1
 8006f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8a:	f000 f855 	bl	8007038 <_lseek_r>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	bf15      	itete	ne
 8006f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f9e:	81a3      	strheq	r3, [r4, #12]
 8006fa0:	bf18      	it	ne
 8006fa2:	81a3      	strhne	r3, [r4, #12]
 8006fa4:	bd10      	pop	{r4, pc}

08006fa6 <__sclose>:
 8006fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006faa:	f000 b813 	b.w	8006fd4 <_close_r>
	...

08006fb0 <_write_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4c05      	ldr	r4, [pc, #20]	; (8006fd0 <_write_r+0x20>)
 8006fbc:	6022      	str	r2, [r4, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fa ff66 	bl	8001e90 <_write>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_write_r+0x1e>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_write_r+0x1e>
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	20000334 	.word	0x20000334

08006fd4 <_close_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4c05      	ldr	r4, [pc, #20]	; (8006ff0 <_close_r+0x1c>)
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	f7fb fb79 	bl	80026d6 <_close>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_close_r+0x1a>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_close_r+0x1a>
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20000334 	.word	0x20000334

08006ff4 <_fstat_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4c06      	ldr	r4, [pc, #24]	; (8007014 <_fstat_r+0x20>)
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	f7fb fb73 	bl	80026ec <_fstat>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d102      	bne.n	8007010 <_fstat_r+0x1c>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	b103      	cbz	r3, 8007010 <_fstat_r+0x1c>
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	bd38      	pop	{r3, r4, r5, pc}
 8007012:	bf00      	nop
 8007014:	20000334 	.word	0x20000334

08007018 <_isatty_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	2300      	movs	r3, #0
 800701c:	4c05      	ldr	r4, [pc, #20]	; (8007034 <_isatty_r+0x1c>)
 800701e:	4605      	mov	r5, r0
 8007020:	4608      	mov	r0, r1
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	f7fb fb71 	bl	800270a <_isatty>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_isatty_r+0x1a>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	b103      	cbz	r3, 8007032 <_isatty_r+0x1a>
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000334 	.word	0x20000334

08007038 <_lseek_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4605      	mov	r5, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	2200      	movs	r2, #0
 8007042:	4c05      	ldr	r4, [pc, #20]	; (8007058 <_lseek_r+0x20>)
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7fb fb69 	bl	800271e <_lseek>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_lseek_r+0x1e>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	b103      	cbz	r3, 8007056 <_lseek_r+0x1e>
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000334 	.word	0x20000334

0800705c <__ascii_mbtowc>:
 800705c:	b082      	sub	sp, #8
 800705e:	b901      	cbnz	r1, 8007062 <__ascii_mbtowc+0x6>
 8007060:	a901      	add	r1, sp, #4
 8007062:	b142      	cbz	r2, 8007076 <__ascii_mbtowc+0x1a>
 8007064:	b14b      	cbz	r3, 800707a <__ascii_mbtowc+0x1e>
 8007066:	7813      	ldrb	r3, [r2, #0]
 8007068:	600b      	str	r3, [r1, #0]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	1c10      	adds	r0, r2, #0
 800706e:	bf18      	it	ne
 8007070:	2001      	movne	r0, #1
 8007072:	b002      	add	sp, #8
 8007074:	4770      	bx	lr
 8007076:	4610      	mov	r0, r2
 8007078:	e7fb      	b.n	8007072 <__ascii_mbtowc+0x16>
 800707a:	f06f 0001 	mvn.w	r0, #1
 800707e:	e7f8      	b.n	8007072 <__ascii_mbtowc+0x16>

08007080 <__malloc_lock>:
 8007080:	4770      	bx	lr

08007082 <__malloc_unlock>:
 8007082:	4770      	bx	lr

08007084 <_read_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4605      	mov	r5, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	2200      	movs	r2, #0
 800708e:	4c05      	ldr	r4, [pc, #20]	; (80070a4 <_read_r+0x20>)
 8007090:	6022      	str	r2, [r4, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fb fb02 	bl	800269c <_read>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_read_r+0x1e>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_read_r+0x1e>
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000334 	.word	0x20000334

080070a8 <__ascii_wctomb>:
 80070a8:	b149      	cbz	r1, 80070be <__ascii_wctomb+0x16>
 80070aa:	2aff      	cmp	r2, #255	; 0xff
 80070ac:	bf8b      	itete	hi
 80070ae:	238a      	movhi	r3, #138	; 0x8a
 80070b0:	700a      	strbls	r2, [r1, #0]
 80070b2:	6003      	strhi	r3, [r0, #0]
 80070b4:	2001      	movls	r0, #1
 80070b6:	bf88      	it	hi
 80070b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80070bc:	4770      	bx	lr
 80070be:	4608      	mov	r0, r1
 80070c0:	4770      	bx	lr
	...

080070c4 <_init>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr

080070d0 <_fini>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr
