
Meteo_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000692c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006bd8  08006bd8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bd8  08006bd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000074  08006c54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001abc  08006c54  00021abc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d53  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003362  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003c158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004788  00000000  00000000  0003e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001045a  00000000  00000000  00042e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097b57  00000000  00000000  00053282  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eadd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000573c  00000000  00000000  000eae54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a24 	.word	0x08006a24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006a24 	.word	0x08006a24

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e009      	b.n	80001c2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	60ba      	str	r2, [r7, #8]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffca 	bl	8000150 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697a      	ldr	r2, [r7, #20]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf1      	blt.n	80001ae <_write+0x12>
	}
	return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <rgb_set>:
/*-----------------------------Function for RGB LED--------------------------------------*/
void rgb_set(uint8_t red, uint8_t green, uint8_t blue) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	htim2.Instance->CCR1 = 255 - red; // Если у нас RGB с общим катодом то приведи к такому виду htim2.Instance->CCR1 = red;
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <rgb_set+0x40>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 255 - green; // Если у нас RGB с общим катодом то приведи к такому виду htim2.Instance->CCR1 = green;
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <rgb_set+0x40>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = 255 - blue; // Если у нас RGB с общим катодом то приведи к такому виду htim2.Instance->CCR1 = blue;
 80001fe:	797b      	ldrb	r3, [r7, #5]
 8000200:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <rgb_set+0x40>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	200019e4 	.word	0x200019e4

08000218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021c:	f000 fbee 	bl	80009fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000220:	f000 f84c 	bl	80002bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000224:	f000 f970 	bl	8000508 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000228:	f000 f8a4 	bl	8000374 <MX_ADC1_Init>
	MX_TIM2_Init();
 800022c:	f000 f8e0 	bl	80003f0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/*-----------------------------RGB ADC--------------------------------------*/
	HAL_ADC_Start(&hadc1); // Запустили АЦП
 8000230:	4817      	ldr	r0, [pc, #92]	; (8000290 <main+0x78>)
 8000232:	f000 fced 	bl	8000c10 <HAL_ADC_Start>
	HAL_ADCEx_Calibration_Start(&hadc1); // Делаем калибровку ADC
 8000236:	4816      	ldr	r0, [pc, #88]	; (8000290 <main+0x78>)
 8000238:	f001 f84e 	bl	80012d8 <HAL_ADCEx_Calibration_Start>
	/*-----------------------------RGB LED--------------------------------------*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4815      	ldr	r0, [pc, #84]	; (8000294 <main+0x7c>)
 8000240:	f002 f9d8 	bl	80025f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000244:	2104      	movs	r1, #4
 8000246:	4813      	ldr	r0, [pc, #76]	; (8000294 <main+0x7c>)
 8000248:	f002 f9d4 	bl	80025f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800024c:	2108      	movs	r1, #8
 800024e:	4811      	ldr	r0, [pc, #68]	; (8000294 <main+0x7c>)
 8000250:	f002 f9d0 	bl	80025f4 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000254:	f003 f826 	bl	80032a4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000258:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <main+0x80>)
 800025a:	2100      	movs	r1, #0
 800025c:	480f      	ldr	r0, [pc, #60]	; (800029c <main+0x84>)
 800025e:	f003 f887 	bl	8003370 <osThreadNew>
 8000262:	4602      	mov	r2, r0
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0x88>)
 8000266:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of my_PhotoResisto */
	my_PhotoResistoHandle = osThreadNew(Start_PhotoResistor_Task, NULL,
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <main+0x8c>)
 800026a:	2100      	movs	r1, #0
 800026c:	480e      	ldr	r0, [pc, #56]	; (80002a8 <main+0x90>)
 800026e:	f003 f87f 	bl	8003370 <osThreadNew>
 8000272:	4602      	mov	r2, r0
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <main+0x94>)
 8000276:	601a      	str	r2, [r3, #0]
			&my_PhotoResisto_attributes);

	/* creation of my_RGB_LED_Task */
	my_RGB_LED_TaskHandle = osThreadNew(Start_RGB_LED_Task, NULL,
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <main+0x98>)
 800027a:	2100      	movs	r1, #0
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <main+0x9c>)
 800027e:	f003 f877 	bl	8003370 <osThreadNew>
 8000282:	4602      	mov	r2, r0
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0xa0>)
 8000286:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000288:	f003 f83e 	bl	8003308 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800028c:	e7fe      	b.n	800028c <main+0x74>
 800028e:	bf00      	nop
 8000290:	200019b0 	.word	0x200019b0
 8000294:	200019e4 	.word	0x200019e4
 8000298:	08006abc 	.word	0x08006abc
 800029c:	08000565 	.word	0x08000565
 80002a0:	200019a4 	.word	0x200019a4
 80002a4:	08006ae0 	.word	0x08006ae0
 80002a8:	08000575 	.word	0x08000575
 80002ac:	200019e0 	.word	0x200019e0
 80002b0:	08006b04 	.word	0x08006b04
 80002b4:	080005c1 	.word	0x080005c1
 80002b8:	200019a8 	.word	0x200019a8

080002bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b094      	sub	sp, #80	; 0x50
 80002c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f005 fcb3 	bl	8005c36 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000306:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fab6 	bl	8001884 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x66>
		Error_Handler();
 800031e:	f000 f981 	bl	8000624 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fd20 	bl	8001d84 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x92>
		Error_Handler();
 800034a:	f000 f96b 	bl	8000624 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800034e:	2302      	movs	r3, #2
 8000350:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000356:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fede 	bl	800211c <HAL_RCCEx_PeriphCLKConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0xae>
		Error_Handler();
 8000366:	f000 f95d 	bl	8000624 <Error_Handler>
	}
}
 800036a:	bf00      	nop
 800036c:	3750      	adds	r7, #80	; 0x50
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_ADC1_Init+0x74>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <MX_ADC1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_ADC1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_ADC1_Init+0x74>)
 8000392:	2201      	movs	r2, #1
 8000394:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_ADC1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_ADC1_Init+0x74>)
 800039e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003a2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_ADC1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_ADC1_Init+0x74>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <MX_ADC1_Init+0x74>)
 80003b2:	f000 fb55 	bl	8000a60 <HAL_ADC_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80003bc:	f000 f932 	bl	8000624 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80003c0:	2305      	movs	r3, #5
 80003c2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_ADC1_Init+0x74>)
 80003d2:	f000 fdfd 	bl	8000fd0 <HAL_ADC_ConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80003dc:	f000 f922 	bl	8000624 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200019b0 	.word	0x200019b0
 80003ec:	40012400 	.word	0x40012400

080003f0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08e      	sub	sp, #56	; 0x38
 80003f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80003f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
 800041c:	615a      	str	r2, [r3, #20]
 800041e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000420:	4b38      	ldr	r3, [pc, #224]	; (8000504 <MX_TIM2_Init+0x114>)
 8000422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000426:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1107 - 1;
 8000428:	4b36      	ldr	r3, [pc, #216]	; (8000504 <MX_TIM2_Init+0x114>)
 800042a:	f240 4252 	movw	r2, #1106	; 0x452
 800042e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b34      	ldr	r3, [pc, #208]	; (8000504 <MX_TIM2_Init+0x114>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255 - 1;
 8000436:	4b33      	ldr	r3, [pc, #204]	; (8000504 <MX_TIM2_Init+0x114>)
 8000438:	22fe      	movs	r2, #254	; 0xfe
 800043a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <MX_TIM2_Init+0x114>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000442:	4b30      	ldr	r3, [pc, #192]	; (8000504 <MX_TIM2_Init+0x114>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000448:	482e      	ldr	r0, [pc, #184]	; (8000504 <MX_TIM2_Init+0x114>)
 800044a:	f001 ffd9 	bl	8002400 <HAL_TIM_Base_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000454:	f000 f8e6 	bl	8000624 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800045e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000462:	4619      	mov	r1, r3
 8000464:	4827      	ldr	r0, [pc, #156]	; (8000504 <MX_TIM2_Init+0x114>)
 8000466:	f002 fb2d 	bl	8002ac4 <HAL_TIM_ConfigClockSource>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000470:	f000 f8d8 	bl	8000624 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000474:	4823      	ldr	r0, [pc, #140]	; (8000504 <MX_TIM2_Init+0x114>)
 8000476:	f002 f865 	bl	8002544 <HAL_TIM_PWM_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000480:	f000 f8d0 	bl	8000624 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800048c:	f107 0320 	add.w	r3, r7, #32
 8000490:	4619      	mov	r1, r3
 8000492:	481c      	ldr	r0, [pc, #112]	; (8000504 <MX_TIM2_Init+0x114>)
 8000494:	f002 fe96 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800049e:	f000 f8c1 	bl	8000624 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a2:	2360      	movs	r3, #96	; 0x60
 80004a4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	4812      	ldr	r0, [pc, #72]	; (8000504 <MX_TIM2_Init+0x114>)
 80004ba:	f002 fa45 	bl	8002948 <HAL_TIM_PWM_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80004c4:	f000 f8ae 	bl	8000624 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2204      	movs	r2, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_TIM2_Init+0x114>)
 80004d0:	f002 fa3a 	bl	8002948 <HAL_TIM_PWM_ConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80004da:	f000 f8a3 	bl	8000624 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2208      	movs	r2, #8
 80004e2:	4619      	mov	r1, r3
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <MX_TIM2_Init+0x114>)
 80004e6:	f002 fa2f 	bl	8002948 <HAL_TIM_PWM_ConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 80004f0:	f000 f898 	bl	8000624 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <MX_TIM2_Init+0x114>)
 80004f6:	f000 f929 	bl	800074c <HAL_TIM_MspPostInit>

}
 80004fa:	bf00      	nop
 80004fc:	3738      	adds	r7, #56	; 0x38
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200019e4 	.word	0x200019e4

08000508 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_GPIO_Init+0x58>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a13      	ldr	r2, [pc, #76]	; (8000560 <MX_GPIO_Init+0x58>)
 8000514:	f043 0320 	orr.w	r3, r3, #32
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_GPIO_Init+0x58>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0320 	and.w	r3, r3, #32
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_GPIO_Init+0x58>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <MX_GPIO_Init+0x58>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_GPIO_Init+0x58>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_GPIO_Init+0x58>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a07      	ldr	r2, [pc, #28]	; (8000560 <MX_GPIO_Init+0x58>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_GPIO_Init+0x58>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f002 ffa9 	bl	80034c4 <osDelay>
 8000572:	e7fb      	b.n	800056c <StartDefaultTask+0x8>

08000574 <Start_PhotoResistor_Task>:
 * @brief Function implementing the my_PhotoResisto thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_PhotoResistor_Task */
void Start_PhotoResistor_Task(void *argument) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_PhotoResistor_Task */

	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start(&hadc1); // Эту функция запускает АЦП
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <Start_PhotoResistor_Task+0x40>)
 800057e:	f000 fb47 	bl	8000c10 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100); // Ожидание окончания преобразования! 100мс -это не означает...
 8000582:	2164      	movs	r1, #100	; 0x64
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <Start_PhotoResistor_Task+0x40>)
 8000586:	f000 fc1d 	bl	8000dc4 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1); // Читаем наше значение с АЦП1.
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <Start_PhotoResistor_Task+0x40>)
 800058c:	f000 fd14 	bl	8000fb8 <HAL_ADC_GetValue>
 8000590:	4603      	mov	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <Start_PhotoResistor_Task+0x44>)
 8000596:	801a      	strh	r2, [r3, #0]
		printf("adc_value - %d \n", adc_value);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <Start_PhotoResistor_Task+0x44>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <Start_PhotoResistor_Task+0x48>)
 80005a0:	f005 fb52 	bl	8005c48 <iprintf>
		HAL_ADC_Stop(&hadc1); // Останавливаем проеобразование сигнала с АЦП1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <Start_PhotoResistor_Task+0x40>)
 80005a6:	f000 fbe1 	bl	8000d6c <HAL_ADC_Stop>
		osDelay(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f002 ff8a 	bl	80034c4 <osDelay>
		HAL_ADC_Start(&hadc1); // Эту функция запускает АЦП
 80005b0:	e7e4      	b.n	800057c <Start_PhotoResistor_Task+0x8>
 80005b2:	bf00      	nop
 80005b4:	200019b0 	.word	0x200019b0
 80005b8:	200019ac 	.word	0x200019ac
 80005bc:	08006a68 	.word	0x08006a68

080005c0 <Start_RGB_LED_Task>:
 * @brief Function implementing the my_RGB_LED_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RGB_LED_Task */
void Start_RGB_LED_Task(void *argument) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_RGB_LED_Task */
	/* Infinite loop */
	for (;;) {
		rgb_set(5, 0, 0); // red only. Для увеличения/уменьшения яркости LED меняй значения в скобках!
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2005      	movs	r0, #5
 80005ce:	f7ff fe01 	bl	80001d4 <rgb_set>
		osDelay(3000);
 80005d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d6:	f002 ff75 	bl	80034c4 <osDelay>

		rgb_set(0, 5, 0);   // green only
 80005da:	2200      	movs	r2, #0
 80005dc:	2105      	movs	r1, #5
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff fdf8 	bl	80001d4 <rgb_set>
		osDelay(3000);
 80005e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005e8:	f002 ff6c 	bl	80034c4 <osDelay>

		rgb_set(0, 0, 5);   // blue only
 80005ec:	2205      	movs	r2, #5
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff fdef 	bl	80001d4 <rgb_set>
		osDelay(3000);
 80005f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005fa:	f002 ff63 	bl	80034c4 <osDelay>
		rgb_set(5, 0, 0); // red only. Для увеличения/уменьшения яркости LED меняй значения в скобках!
 80005fe:	e7e3      	b.n	80005c8 <Start_RGB_LED_Task+0x8>

08000600 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d101      	bne.n	8000616 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000612:	f000 fa09 	bl	8000a28 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40000800 	.word	0x40000800

08000624 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800062a:	e7fe      	b.n	800062a <Error_Handler+0x6>

0800062c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <HAL_MspInit+0x68>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_MspInit+0x68>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x68>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x68>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <HAL_MspInit+0x68>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x68>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	210f      	movs	r1, #15
 8000666:	f06f 0001 	mvn.w	r0, #1
 800066a:	f000 ff86 	bl	800157a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x6c>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x6c>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x6c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d121      	bne.n	8000700 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <HAL_ADC_MspInit+0x70>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <HAL_ADC_MspInit+0x70>)
 80006c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_ADC_MspInit+0x70>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_ADC_MspInit+0x70>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <HAL_ADC_MspInit+0x70>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_ADC_MspInit+0x70>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ec:	2320      	movs	r3, #32
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <HAL_ADC_MspInit+0x74>)
 80006fc:	f000 ff68 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40012400 	.word	0x40012400
 800070c:	40021000 	.word	0x40021000
 8000710:	40010800 	.word	0x40010800

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000724:	d10b      	bne.n	800073e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_TIM_Base_MspInit+0x34>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_TIM_Base_MspInit+0x34>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_TIM_Base_MspInit+0x34>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800076a:	d117      	bne.n	800079c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000784:	2307      	movs	r3, #7
 8000786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <HAL_TIM_MspPostInit+0x5c>)
 8000798:	f000 ff1a 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	201e      	movs	r0, #30
 80007c2:	f000 feda 	bl	800157a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007c6:	201e      	movs	r0, #30
 80007c8:	f000 fef3 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_InitTick+0xa0>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <HAL_InitTick+0xa0>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_InitTick+0xa0>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e4:	f107 0210 	add.w	r2, r7, #16
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fc46 	bl	8002080 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007f4:	f001 fc1c 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80007f8:	4603      	mov	r3, r0
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <HAL_InitTick+0xa4>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	0c9b      	lsrs	r3, r3, #18
 8000808:	3b01      	subs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_InitTick+0xa8>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_InitTick+0xac>)
 8000810:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_InitTick+0xa8>)
 8000814:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000818:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_InitTick+0xa8>)
 800081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_InitTick+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_InitTick+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <HAL_InitTick+0xa8>)
 800082e:	f001 fde7 	bl	8002400 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <HAL_InitTick+0xa8>)
 800083a:	f001 fe31 	bl	80024a0 <HAL_TIM_Base_Start_IT>
 800083e:	4603      	mov	r3, r0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	431bde83 	.word	0x431bde83
 8000854:	20001a2c 	.word	0x20001a2c
 8000858:	40000800 	.word	0x40000800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM4_IRQHandler+0x10>)
 800088e:	f001 ff53 	bl	8002738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20001a2c 	.word	0x20001a2c

0800089c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
	}

return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fc:	605a      	str	r2, [r3, #4]
	return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <_isatty>:

int _isatty(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	return 1;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
	return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f005 f930 	bl	8005bcc <__errno>
 800096c:	4602      	mov	r2, r0
 800096e:	230c      	movs	r3, #12
 8000970:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20005000 	.word	0x20005000
 8000998:	00000400 	.word	0x00000400
 800099c:	20000090 	.word	0x20000090
 80009a0:	20001ac0 	.word	0x20001ac0

080009a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009b2:	e003      	b.n	80009bc <LoopCopyDataInit>

080009b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ba:	3104      	adds	r1, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009c4:	d3f6      	bcc.n	80009b4 <CopyDataInit>
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009c8:	e002      	b.n	80009d0 <LoopFillZerobss>

080009ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009cc:	f842 3b04 	str.w	r3, [r2], #4

080009d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009d4:	d3f9      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffe5 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f005 f8fd 	bl	8005bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fc1b 	bl	8000218 <main>
  bx lr
 80009e2:	4770      	bx	lr
  ldr r3, =_sidata
 80009e4:	08006be0 	.word	0x08006be0
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009ec:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80009f0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80009f4:	20001abc 	.word	0x20001abc

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 fda9 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff feca 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe08 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x1c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x20>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a03      	ldr	r2, [pc, #12]	; (8000a48 <HAL_IncTick+0x20>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20001a74 	.word	0x20001a74

08000a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <HAL_GetTick+0x10>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20001a74 	.word	0x20001a74

08000a60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e0be      	b.n	8000c00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d109      	bne.n	8000aa4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fdfc 	bl	800069c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 fbdd 	bl	8001264 <ADC_ConversionStop_Disable>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8099 	bne.w	8000bee <HAL_ADC_Init+0x18e>
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8095 	bne.w	8000bee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000acc:	f023 0302 	bic.w	r3, r3, #2
 8000ad0:	f043 0202 	orr.w	r2, r3, #2
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7b1b      	ldrb	r3, [r3, #12]
 8000ae6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af8:	d003      	beq.n	8000b02 <HAL_ADC_Init+0xa2>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d102      	bne.n	8000b08 <HAL_ADC_Init+0xa8>
 8000b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b06:	e000      	b.n	8000b0a <HAL_ADC_Init+0xaa>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7d1b      	ldrb	r3, [r3, #20]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d119      	bne.n	8000b4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7b1b      	ldrb	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d109      	bne.n	8000b34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	035a      	lsls	r2, r3, #13
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	e00b      	b.n	8000b4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f043 0220 	orr.w	r2, r3, #32
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	f043 0201 	orr.w	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <HAL_ADC_Init+0x1a8>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b7c:	d003      	beq.n	8000b86 <HAL_ADC_Init+0x126>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d104      	bne.n	8000b90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	051b      	lsls	r3, r3, #20
 8000b8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_ADC_Init+0x1ac>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d10b      	bne.n	8000bcc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbe:	f023 0303 	bic.w	r3, r3, #3
 8000bc2:	f043 0201 	orr.w	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bca:	e018      	b.n	8000bfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f023 0312 	bic.w	r3, r3, #18
 8000bd4:	f043 0210 	orr.w	r2, r3, #16
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be0:	f043 0201 	orr.w	r2, r3, #1
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bec:	e007      	b.n	8000bfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f043 0210 	orr.w	r2, r3, #16
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	ffe1f7fd 	.word	0xffe1f7fd
 8000c0c:	ff1f0efe 	.word	0xff1f0efe

08000c10 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Start+0x1a>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e098      	b.n	8000d5c <HAL_ADC_Start+0x14c>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 fac4 	bl	80011c0 <ADC_Enable>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 8087 	bne.w	8000d52 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <HAL_ADC_Start+0x154>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d105      	bne.n	8000c6e <HAL_ADC_Start+0x5e>
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <HAL_ADC_Start+0x158>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d115      	bne.n	8000c9a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d026      	beq.n	8000cd6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c98:	e01d      	b.n	8000cd6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <HAL_ADC_Start+0x158>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d004      	beq.n	8000cba <HAL_ADC_Start+0xaa>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <HAL_ADC_Start+0x154>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10d      	bne.n	8000cd6 <HAL_ADC_Start+0xc6>
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_ADC_Start+0x158>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	f023 0206 	bic.w	r2, r3, #6
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cee:	e002      	b.n	8000cf6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f06f 0202 	mvn.w	r2, #2
 8000d06:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d16:	d113      	bne.n	8000d40 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_ADC_Start+0x154>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d105      	bne.n	8000d2e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_ADC_Start+0x158>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d108      	bne.n	8000d40 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	e00c      	b.n	8000d5a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e003      	b.n	8000d5a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40012800 	.word	0x40012800
 8000d68:	40012400 	.word	0x40012400

08000d6c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_ADC_Stop+0x1a>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e01a      	b.n	8000dbc <HAL_ADC_Stop+0x50>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fa68 	bl	8001264 <ADC_ConversionStop_Disable>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d109      	bne.n	8000db2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dda:	f7ff fe37 	bl	8000a4c <HAL_GetTick>
 8000dde:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00b      	beq.n	8000e06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f043 0220 	orr.w	r2, r3, #32
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e0c8      	b.n	8000f98 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d12a      	bne.n	8000e6a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d123      	bne.n	8000e6a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e22:	e01a      	b.n	8000e5a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e2a:	d016      	beq.n	8000e5a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <HAL_ADC_PollForConversion+0x7e>
 8000e32:	f7ff fe0b 	bl	8000a4c <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d20b      	bcs.n	8000e5a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f043 0204 	orr.w	r2, r3, #4
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e09e      	b.n	8000f98 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0dd      	beq.n	8000e24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e68:	e06c      	b.n	8000f44 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e6a:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <HAL_ADC_PollForConversion+0x1dc>)
 8000e6c:	681c      	ldr	r4, [r3, #0]
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f001 fa0a 	bl	8002288 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e74:	4603      	mov	r3, r0
 8000e76:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6919      	ldr	r1, [r3, #16]
 8000e80:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <HAL_ADC_PollForConversion+0x1e0>)
 8000e82:	400b      	ands	r3, r1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d118      	bne.n	8000eba <HAL_ADC_PollForConversion+0xf6>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68d9      	ldr	r1, [r3, #12]
 8000e8e:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <HAL_ADC_PollForConversion+0x1e4>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d111      	bne.n	8000eba <HAL_ADC_PollForConversion+0xf6>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6919      	ldr	r1, [r3, #16]
 8000e9c:	4b43      	ldr	r3, [pc, #268]	; (8000fac <HAL_ADC_PollForConversion+0x1e8>)
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <HAL_ADC_PollForConversion+0xf2>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68d9      	ldr	r1, [r3, #12]
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <HAL_ADC_PollForConversion+0x1ec>)
 8000eac:	400b      	ands	r3, r1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_PollForConversion+0xf2>
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	e020      	b.n	8000ef8 <HAL_ADC_PollForConversion+0x134>
 8000eb6:	2329      	movs	r3, #41	; 0x29
 8000eb8:	e01e      	b.n	8000ef8 <HAL_ADC_PollForConversion+0x134>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6919      	ldr	r1, [r3, #16]
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_ADC_PollForConversion+0x1e8>)
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d106      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x112>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68d9      	ldr	r1, [r3, #12]
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_ADC_PollForConversion+0x1ec>)
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_ADC_PollForConversion+0x12e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6919      	ldr	r1, [r3, #16]
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_ADC_PollForConversion+0x1f0>)
 8000ede:	400b      	ands	r3, r1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <HAL_ADC_PollForConversion+0x132>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <HAL_ADC_PollForConversion+0x1f0>)
 8000eec:	400b      	ands	r3, r1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_ADC_PollForConversion+0x132>
 8000ef2:	2354      	movs	r3, #84	; 0x54
 8000ef4:	e000      	b.n	8000ef8 <HAL_ADC_PollForConversion+0x134>
 8000ef6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000efe:	e01d      	b.n	8000f3c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f06:	d016      	beq.n	8000f36 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <HAL_ADC_PollForConversion+0x15a>
 8000f0e:	f7ff fd9d 	bl	8000a4c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d20b      	bcs.n	8000f36 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	f043 0204 	orr.w	r2, r3, #4
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e030      	b.n	8000f98 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8dd      	bhi.n	8000f00 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f06f 0212 	mvn.w	r2, #18
 8000f4c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f68:	d115      	bne.n	8000f96 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d111      	bne.n	8000f96 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	24924924 	.word	0x24924924
 8000fa8:	00924924 	.word	0x00924924
 8000fac:	12492492 	.word	0x12492492
 8000fb0:	00492492 	.word	0x00492492
 8000fb4:	00249249 	.word	0x00249249

08000fb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x20>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e0dc      	b.n	80011aa <HAL_ADC_ConfigChannel+0x1da>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d81c      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b05      	subs	r3, #5
 8001012:	221f      	movs	r2, #31
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4019      	ands	r1, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	3b05      	subs	r3, #5
 800102c:	fa00 f203 	lsl.w	r2, r0, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
 8001038:	e03c      	b.n	80010b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d81c      	bhi.n	800107c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	3b23      	subs	r3, #35	; 0x23
 8001054:	221f      	movs	r2, #31
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	4019      	ands	r1, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	3b23      	subs	r3, #35	; 0x23
 800106e:	fa00 f203 	lsl.w	r2, r0, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
 800107a:	e01b      	b.n	80010b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	3b41      	subs	r3, #65	; 0x41
 800108e:	221f      	movs	r2, #31
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	4019      	ands	r1, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	3b41      	subs	r3, #65	; 0x41
 80010a8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d91c      	bls.n	80010f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	3b1e      	subs	r3, #30
 80010ce:	2207      	movs	r2, #7
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	3b1e      	subs	r3, #30
 80010e8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	e019      	b.n	800112a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6919      	ldr	r1, [r3, #16]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b10      	cmp	r3, #16
 8001130:	d003      	beq.n	800113a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001136:	2b11      	cmp	r3, #17
 8001138:	d132      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d125      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d126      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001160:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b10      	cmp	r3, #16
 8001168:	d11a      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0c9a      	lsrs	r2, r3, #18
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001180:	e002      	b.n	8001188 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3b01      	subs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x1b2>
 800118e:	e007      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	f043 0220 	orr.w	r2, r3, #32
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40012400 	.word	0x40012400
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d039      	beq.n	8001252 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0201 	orr.w	r2, r2, #1
 80011ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <ADC_Enable+0x9c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <ADC_Enable+0xa0>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	0c9b      	lsrs	r3, r3, #18
 80011fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011fc:	e002      	b.n	8001204 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800120a:	f7ff fc1f 	bl	8000a4c <HAL_GetTick>
 800120e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001210:	e018      	b.n	8001244 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001212:	f7ff fc1b 	bl	8000a4c <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d911      	bls.n	8001244 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f043 0210 	orr.w	r2, r3, #16
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e007      	b.n	8001254 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d1df      	bne.n	8001212 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	431bde83 	.word	0x431bde83

08001264 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b01      	cmp	r3, #1
 800127c:	d127      	bne.n	80012ce <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800128e:	f7ff fbdd 	bl	8000a4c <HAL_GetTick>
 8001292:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001294:	e014      	b.n	80012c0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001296:	f7ff fbd9 	bl	8000a4c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d90d      	bls.n	80012c0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	f043 0210 	orr.w	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e007      	b.n	80012d0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d0e3      	beq.n	8001296 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADCEx_Calibration_Start+0x1e>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e086      	b.n	8001404 <HAL_ADCEx_Calibration_Start+0x12c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffb0 	bl	8001264 <ADC_ConversionStop_Disable>
 8001304:	4603      	mov	r3, r0
 8001306:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d175      	bne.n	80013fa <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001316:	f023 0302 	bic.w	r3, r3, #2
 800131a:	f043 0202 	orr.w	r2, r3, #2
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_ADCEx_Calibration_Start+0x134>)
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	2002      	movs	r0, #2
 8001328:	f000 ffae 	bl	8002288 <HAL_RCCEx_GetPeriphCLKFreq>
 800132c:	4603      	mov	r3, r0
 800132e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001332:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001334:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001336:	e002      	b.n	800133e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff3b 	bl	80011c0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0208 	orr.w	r2, r2, #8
 8001358:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800135a:	f7ff fb77 	bl	8000a4c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001360:	e014      	b.n	800138c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001362:	f7ff fb73 	bl	8000a4c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b0a      	cmp	r3, #10
 800136e:	d90d      	bls.n	800138c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f023 0312 	bic.w	r3, r3, #18
 8001378:	f043 0210 	orr.w	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e03b      	b.n	8001404 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e3      	bne.n	8001362 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0204 	orr.w	r2, r2, #4
 80013a8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013aa:	f7ff fb4f 	bl	8000a4c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013b0:	e014      	b.n	80013dc <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013b2:	f7ff fb4b 	bl	8000a4c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b0a      	cmp	r3, #10
 80013be:	d90d      	bls.n	80013dc <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f023 0312 	bic.w	r3, r3, #18
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e013      	b.n	8001404 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e3      	bne.n	80013b2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001402:	7dfb      	ldrb	r3, [r7, #23]
}
 8001404:	4618      	mov	r0, r3
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	20000000 	.word	0x20000000

08001410 <__NVIC_SetPriorityGrouping>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <__NVIC_EnableIRQ+0x34>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff4f 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff64 	bl	8001458 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ffb2 	bl	8001500 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff81 	bl	80014ac <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff57 	bl	8001474 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e2:	e127      	b.n	8001834 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e4:	2201      	movs	r2, #1
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8116 	bne.w	800182e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b12      	cmp	r3, #18
 8001608:	d034      	beq.n	8001674 <HAL_GPIO_Init+0xa4>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d80d      	bhi.n	800162a <HAL_GPIO_Init+0x5a>
 800160e:	2b02      	cmp	r3, #2
 8001610:	d02b      	beq.n	800166a <HAL_GPIO_Init+0x9a>
 8001612:	2b02      	cmp	r3, #2
 8001614:	d804      	bhi.n	8001620 <HAL_GPIO_Init+0x50>
 8001616:	2b00      	cmp	r3, #0
 8001618:	d031      	beq.n	800167e <HAL_GPIO_Init+0xae>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d01c      	beq.n	8001658 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161e:	e048      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001620:	2b03      	cmp	r3, #3
 8001622:	d043      	beq.n	80016ac <HAL_GPIO_Init+0xdc>
 8001624:	2b11      	cmp	r3, #17
 8001626:	d01b      	beq.n	8001660 <HAL_GPIO_Init+0x90>
          break;
 8001628:	e043      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800162a:	4a89      	ldr	r2, [pc, #548]	; (8001850 <HAL_GPIO_Init+0x280>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d026      	beq.n	800167e <HAL_GPIO_Init+0xae>
 8001630:	4a87      	ldr	r2, [pc, #540]	; (8001850 <HAL_GPIO_Init+0x280>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d806      	bhi.n	8001644 <HAL_GPIO_Init+0x74>
 8001636:	4a87      	ldr	r2, [pc, #540]	; (8001854 <HAL_GPIO_Init+0x284>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d020      	beq.n	800167e <HAL_GPIO_Init+0xae>
 800163c:	4a86      	ldr	r2, [pc, #536]	; (8001858 <HAL_GPIO_Init+0x288>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01d      	beq.n	800167e <HAL_GPIO_Init+0xae>
          break;
 8001642:	e036      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001644:	4a85      	ldr	r2, [pc, #532]	; (800185c <HAL_GPIO_Init+0x28c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0xae>
 800164a:	4a85      	ldr	r2, [pc, #532]	; (8001860 <HAL_GPIO_Init+0x290>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d016      	beq.n	800167e <HAL_GPIO_Init+0xae>
 8001650:	4a84      	ldr	r2, [pc, #528]	; (8001864 <HAL_GPIO_Init+0x294>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0xae>
          break;
 8001656:	e02c      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e028      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	3304      	adds	r3, #4
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e023      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	3308      	adds	r3, #8
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e01e      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	330c      	adds	r3, #12
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e019      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001686:	2304      	movs	r3, #4
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e012      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	611a      	str	r2, [r3, #16]
          break;
 800169e:	e008      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	2308      	movs	r3, #8
 80016a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	615a      	str	r2, [r3, #20]
          break;
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	d801      	bhi.n	80016bc <HAL_GPIO_Init+0xec>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	e001      	b.n	80016c0 <HAL_GPIO_Init+0xf0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3304      	adds	r3, #4
 80016c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2bff      	cmp	r3, #255	; 0xff
 80016c6:	d802      	bhi.n	80016ce <HAL_GPIO_Init+0xfe>
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x104>
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	3b08      	subs	r3, #8
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	210f      	movs	r1, #15
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	401a      	ands	r2, r3
 80016e6:	6a39      	ldr	r1, [r7, #32]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8096 	beq.w	800182e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_GPIO_Init+0x298>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_GPIO_Init+0x298>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <HAL_GPIO_Init+0x298>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800171a:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_GPIO_Init+0x29c>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <HAL_GPIO_Init+0x2a0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x19e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4a      	ldr	r2, [pc, #296]	; (8001874 <HAL_GPIO_Init+0x2a4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x19a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a49      	ldr	r2, [pc, #292]	; (8001878 <HAL_GPIO_Init+0x2a8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x196>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2ac>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x192>
 800175e:	2303      	movs	r3, #3
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x1a0>
 8001762:	2304      	movs	r3, #4
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x1a0>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x1a0>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x1a0>
 800176e:	2300      	movs	r3, #0
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001780:	493a      	ldr	r1, [pc, #232]	; (800186c <HAL_GPIO_Init+0x29c>)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800179a:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4938      	ldr	r1, [pc, #224]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
 80017a6:	e006      	b.n	80017b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	4933      	ldr	r1, [pc, #204]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	492e      	ldr	r1, [pc, #184]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
 80017ce:	e006      	b.n	80017de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4929      	ldr	r1, [pc, #164]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017da:	4013      	ands	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	4924      	ldr	r1, [pc, #144]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	43db      	mvns	r3, r3
 8001800:	491f      	ldr	r1, [pc, #124]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001802:	4013      	ands	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	491a      	ldr	r1, [pc, #104]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	43db      	mvns	r3, r3
 8001828:	4915      	ldr	r1, [pc, #84]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 800182a:	4013      	ands	r3, r2
 800182c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f aed0 	bne.w	80015e4 <HAL_GPIO_Init+0x14>
  }
}
 8001844:	bf00      	nop
 8001846:	372c      	adds	r7, #44	; 0x2c
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	10210000 	.word	0x10210000
 8001854:	10110000 	.word	0x10110000
 8001858:	10120000 	.word	0x10120000
 800185c:	10310000 	.word	0x10310000
 8001860:	10320000 	.word	0x10320000
 8001864:	10220000 	.word	0x10220000
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	40010800 	.word	0x40010800
 8001874:	40010c00 	.word	0x40010c00
 8001878:	40011000 	.word	0x40011000
 800187c:	40011400 	.word	0x40011400
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e26c      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4b8f      	ldr	r3, [pc, #572]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d112      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
 80018bc:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d10b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x12c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d168      	bne.n	80019b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e246      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x76>
 80018ec:	4b80      	ldr	r3, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7f      	ldr	r2, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02e      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7a      	ldr	r2, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a77      	ldr	r2, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0xbc>
 8001926:	4b72      	ldr	r3, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a71      	ldr	r2, [pc, #452]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 8001940:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a67      	ldr	r2, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f874 	bl	8000a4c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f870 	bl	8000a4c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1fa      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xe4>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f860 	bl	8000a4c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f85c 	bl	8000a4c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1e6      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x10c>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
 80019d6:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1ba      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4939      	ldr	r1, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e03a      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f815 	bl	8000a4c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff f811 	bl	8000a4c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e19b      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4927      	ldr	r1, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe fff4 	bl	8000a4c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7fe fff0 	bl	8000a4c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e17a      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03a      	beq.n	8001b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7fe ffd4 	bl	8000a4c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7fe ffd0 	bl	8000a4c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e15a      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 fb0a 	bl	80020e0 <RCC_Delay>
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7fe ffba 	bl	8000a4c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7fe ffb6 	bl	8000a4c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e140      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	42420000 	.word	0x42420000
 8001af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b9e      	ldr	r3, [pc, #632]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e9      	bne.n	8001adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a6 	beq.w	8001c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b97      	ldr	r3, [pc, #604]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b94      	ldr	r3, [pc, #592]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a93      	ldr	r2, [pc, #588]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b8e      	ldr	r3, [pc, #568]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a8a      	ldr	r2, [pc, #552]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe ff77 	bl	8000a4c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe ff73 	bl	8000a4c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e0fd      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x334>
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a72      	ldr	r2, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x356>
 8001bc0:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a6c      	ldr	r2, [pc, #432]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a63      	ldr	r2, [pc, #396]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe ff27 	bl	8000a4c <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ff23 	bl	8000a4c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0ab      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x37e>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe ff11 	bl	8000a4c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe ff0d 	bl	8000a4c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e095      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8081 	beq.w	8001d6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d061      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d146      	bne.n	8001d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x4fc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe fee1 	bl	8000a4c <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe fedd 	bl	8000a4c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e067      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	492d      	ldr	r1, [pc, #180]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a19      	ldr	r1, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x4fc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe feb1 	bl	8000a4c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fead 	bl	8000a4c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e037      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x46a>
 8001d0c:	e02f      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_RCC_OscConfig+0x4fc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fe9a 	bl	8000a4c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe fe96 	bl	8000a4c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e020      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x498>
 8001d3a:	e018      	b.n	8001d6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e013      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420060 	.word	0x42420060

08001d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0d0      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4965      	ldr	r1, [pc, #404]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b8      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	494d      	ldr	r1, [pc, #308]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d040      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e073      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06b      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4936      	ldr	r1, [pc, #216]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7fe fdea 	bl	8000a4c <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7fe fde6 	bl	8000a4c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e053      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d210      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 0207 	bic.w	r2, r3, #7
 8001eba:	4922      	ldr	r1, [pc, #136]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4916      	ldr	r1, [pc, #88]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490e      	ldr	r1, [pc, #56]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4601      	mov	r1, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	fa21 f303 	lsr.w	r3, r1, r3
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1cc>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1d0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fc3a 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08006b28 	.word	0x08006b28
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b490      	push	{r4, r7}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f60:	1d3c      	adds	r4, r7, #4
 8001f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x40>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x46>
 8001f96:	e02d      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f9a:	623b      	str	r3, [r7, #32]
      break;
 8001f9c:	e02d      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001faa:	4413      	add	r3, r2
 8001fac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	0c5b      	lsrs	r3, r3, #17
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fca:	4413      	add	r3, r2
 8001fcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fd6:	fb02 f203 	mul.w	r2, r2, r3
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	e004      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	623b      	str	r3, [r7, #32]
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff6:	623b      	str	r3, [r7, #32]
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc90      	pop	{r4, r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	08006a7c 	.word	0x08006a7c
 800200c:	08006a8c 	.word	0x08006a8c
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	003d0900 	.word	0x003d0900

0800201c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b02      	ldr	r3, [pc, #8]	; (800202c <HAL_RCC_GetHCLKFreq+0x10>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002034:	f7ff fff2 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002038:	4601      	mov	r1, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08006b38 	.word	0x08006b38

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffde 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002060:	4601      	mov	r1, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	08006b38 	.word	0x08006b38

08002080 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	220f      	movs	r2, #15
 800208e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_GetClockConfig+0x58>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_RCC_GetClockConfig+0x58>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_GetClockConfig+0x58>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_RCC_GetClockConfig+0x58>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_GetClockConfig+0x5c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0207 	and.w	r2, r3, #7
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40022000 	.word	0x40022000

080020e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <RCC_Delay+0x34>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <RCC_Delay+0x38>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a5b      	lsrs	r3, r3, #9
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020fc:	bf00      	nop
  }
  while (Delay --);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	60fa      	str	r2, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f9      	bne.n	80020fc <RCC_Delay+0x1c>
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000
 8002118:	10624dd3 	.word	0x10624dd3

0800211c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d07d      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213c:	4b4f      	ldr	r3, [pc, #316]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4a4b      	ldr	r2, [pc, #300]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002152:	61d3      	str	r3, [r2, #28]
 8002154:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002160:	2301      	movs	r3, #1
 8002162:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d118      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a42      	ldr	r2, [pc, #264]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217c:	f7fe fc66 	bl	8000a4c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	e008      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fc62 	bl	8000a4c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e06d      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02e      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d027      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c0:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021d6:	4a29      	ldr	r2, [pc, #164]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d014      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fc31 	bl	8000a4c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fc2d 	bl	8000a4c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e036      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4917      	ldr	r1, [pc, #92]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	4313      	orrs	r3, r2
 8002220:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	490b      	ldr	r1, [pc, #44]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4904      	ldr	r1, [pc, #16]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420440 	.word	0x42420440

08002288 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b08d      	sub	sp, #52	; 0x34
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002292:	f107 040c 	add.w	r4, r7, #12
 8002296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d07f      	beq.n	80023bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d002      	beq.n	80022c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d048      	beq.n	8002356 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80022c4:	e08b      	b.n	80023de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80022cc:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d07f      	beq.n	80023d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	0c9b      	lsrs	r3, r3, #18
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022e4:	4413      	add	r3, r2
 80022e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d018      	beq.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f6:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0c5b      	lsrs	r3, r3, #17
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002304:	4413      	add	r3, r2
 8002306:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002316:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	fbb2 f2f3 	udiv	r2, r2, r3
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002326:	e004      	b.n	8002332 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d102      	bne.n	8002346 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002344:	e048      	b.n	80023d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002354:	e040      	b.n	80023d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d108      	bne.n	800237a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
 8002378:	e01f      	b.n	80023ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002384:	d109      	bne.n	800239a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002392:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
 8002398:	e00f      	b.n	80023ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023a4:	d11a      	bne.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d014      	beq.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80023b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023b8:	e010      	b.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023ba:	e00f      	b.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80023bc:	f7ff fe4c 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0b9b      	lsrs	r3, r3, #14
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	3301      	adds	r3, #1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80023d8:	bf00      	nop
 80023da:	e000      	b.n	80023de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80023dc:	bf00      	nop
    }
  }
  return (frequency);
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3734      	adds	r7, #52	; 0x34
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	08006a90 	.word	0x08006a90
 80023ec:	08006aa0 	.word	0x08006aa0
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	003d0900 	.word	0x003d0900
 80023fc:	aaaaaaab 	.word	0xaaaaaaab

08002400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e041      	b.n	8002496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe f974 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fc1c 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d001      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e03a      	b.n	800252e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_TIM_Base_Start_IT+0x98>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00e      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x58>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d009      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x58>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_TIM_Base_Start_IT+0x9c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x58>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_TIM_Base_Start_IT+0xa0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d111      	bne.n	800251c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b06      	cmp	r3, #6
 8002508:	d010      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251a:	e007      	b.n	800252c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800

08002544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e041      	b.n	80025da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f839 	bl	80025e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 fb7a 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_TIM_PWM_Start+0x24>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e022      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d109      	bne.n	8002632 <HAL_TIM_PWM_Start+0x3e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e015      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d109      	bne.n	800264c <HAL_TIM_PWM_Start+0x58>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e008      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e05e      	b.n	8002724 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0x82>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	e013      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d104      	bne.n	8002686 <HAL_TIM_PWM_Start+0x92>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	e00b      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0xa2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	e003      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd68 	bl	800317c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1e      	ldr	r2, [pc, #120]	; (800272c <HAL_TIM_PWM_Start+0x138>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d107      	bne.n	80026c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_TIM_PWM_Start+0x138>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_TIM_PWM_Start+0xfa>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d009      	beq.n	80026ee <HAL_TIM_PWM_Start+0xfa>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a14      	ldr	r2, [pc, #80]	; (8002730 <HAL_TIM_PWM_Start+0x13c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_TIM_PWM_Start+0xfa>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_TIM_PWM_Start+0x140>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d111      	bne.n	8002712 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d010      	beq.n	8002722 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002710:	e007      	b.n	8002722 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800

08002738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0202 	mvn.w	r2, #2
 8002764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa62 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa55 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fa64 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0204 	mvn.w	r2, #4
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa38 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa2b 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fa3a 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b08      	cmp	r3, #8
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0208 	mvn.w	r2, #8
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2204      	movs	r2, #4
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa0e 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa01 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa10 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b10      	cmp	r3, #16
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0210 	mvn.w	r2, #16
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2208      	movs	r2, #8
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9e4 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9d7 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f9e6 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0201 	mvn.w	r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fd fea2 	bl	8000600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b80      	cmp	r3, #128	; 0x80
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fcd5 	bl	8003292 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9aa 	bl	8002c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b20      	cmp	r3, #32
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b20      	cmp	r3, #32
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0220 	mvn.w	r2, #32
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fca0 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800295e:	2302      	movs	r3, #2
 8002960:	e0ac      	b.n	8002abc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	f200 809f 	bhi.w	8002ab0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029ad 	.word	0x080029ad
 800297c:	08002ab1 	.word	0x08002ab1
 8002980:	08002ab1 	.word	0x08002ab1
 8002984:	08002ab1 	.word	0x08002ab1
 8002988:	080029ed 	.word	0x080029ed
 800298c:	08002ab1 	.word	0x08002ab1
 8002990:	08002ab1 	.word	0x08002ab1
 8002994:	08002ab1 	.word	0x08002ab1
 8002998:	08002a2f 	.word	0x08002a2f
 800299c:	08002ab1 	.word	0x08002ab1
 80029a0:	08002ab1 	.word	0x08002ab1
 80029a4:	08002ab1 	.word	0x08002ab1
 80029a8:	08002a6f 	.word	0x08002a6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f9c4 	bl	8002d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0208 	orr.w	r2, r2, #8
 80029c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6999      	ldr	r1, [r3, #24]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	619a      	str	r2, [r3, #24]
      break;
 80029ea:	e062      	b.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa0a 	bl	8002e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	021a      	lsls	r2, r3, #8
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	619a      	str	r2, [r3, #24]
      break;
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa53 	bl	8002ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0208 	orr.w	r2, r2, #8
 8002a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0204 	bic.w	r2, r2, #4
 8002a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69d9      	ldr	r1, [r3, #28]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
      break;
 8002a6c:	e021      	b.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fa9d 	bl	8002fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	61da      	str	r2, [r3, #28]
      break;
 8002aae:	e000      	b.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_ConfigClockSource+0x18>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0a6      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x166>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d067      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x120>
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d80b      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x6c>
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d073      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x140>
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d802      	bhi.n	8002b26 <HAL_TIM_ConfigClockSource+0x62>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d06f      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b24:	e078      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d06c      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x140>
 8002b2a:	2b30      	cmp	r3, #48	; 0x30
 8002b2c:	d06a      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b2e:	e073      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b30:	2b70      	cmp	r3, #112	; 0x70
 8002b32:	d00d      	beq.n	8002b50 <HAL_TIM_ConfigClockSource+0x8c>
 8002b34:	2b70      	cmp	r3, #112	; 0x70
 8002b36:	d804      	bhi.n	8002b42 <HAL_TIM_ConfigClockSource+0x7e>
 8002b38:	2b50      	cmp	r3, #80	; 0x50
 8002b3a:	d033      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0xe0>
 8002b3c:	2b60      	cmp	r3, #96	; 0x60
 8002b3e:	d041      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b40:	e06a      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	d066      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x152>
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4c:	d017      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b4e:	e063      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6899      	ldr	r1, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f000 faed 	bl	800313e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]
      break;
 8002b7c:	e04c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f000 fad6 	bl	800313e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba0:	609a      	str	r2, [r3, #8]
      break;
 8002ba2:	e039      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f000 fa4d 	bl	8003050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2150      	movs	r1, #80	; 0x50
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 faa4 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bc2:	e029      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f000 fa6b 	bl	80030ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2160      	movs	r1, #96	; 0x60
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa94 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002be2:	e019      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f000 fa2d 	bl	8003050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa84 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002c02:	e009      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f000 fa7b 	bl	800310a <TIM_ITRx_SetConfig>
        break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800

08002d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f023 0201 	bic.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 0302 	bic.w	r3, r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <TIM_OC1_SetConfig+0xc8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0308 	bic.w	r3, r3, #8
 8002da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <TIM_OC1_SetConfig+0xc8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d111      	bne.n	8002de2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00

08002e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f023 0320 	bic.w	r3, r3, #32
 8002e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <TIM_OC2_SetConfig+0xd0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10d      	bne.n	8002e88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <TIM_OC2_SetConfig+0xd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <TIM_OC3_SetConfig+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10d      	bne.n	8002f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <TIM_OC3_SetConfig+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d113      	bne.n	8002f8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00

08002fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	031b      	lsls	r3, r3, #12
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <TIM_OC4_SetConfig+0x98>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d109      	bne.n	8003028 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800301a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40012c00 	.word	0x40012c00

08003050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 030a 	bic.w	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 0210 	bic.w	r2, r3, #16
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	031b      	lsls	r3, r3, #12
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	f043 0307 	orr.w	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313e:	b480      	push	{r7}
 8003140:	b087      	sub	sp, #28
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003158:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	609a      	str	r2, [r3, #8]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2201      	movs	r2, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	43db      	mvns	r3, r3
 800319e:	401a      	ands	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e046      	b.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d009      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10c      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4313      	orrs	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032aa:	f3ef 8305 	mrs	r3, IPSR
 80032ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80032b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ba:	607b      	str	r3, [r7, #4]
  return(result);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <osKernelInitialize+0x32>
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <osKernelInitialize+0x60>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d109      	bne.n	80032de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032ca:	f3ef 8311 	mrs	r3, BASEPRI
 80032ce:	603b      	str	r3, [r7, #0]
  return(result);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80032d6:	f06f 0305 	mvn.w	r3, #5
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e00c      	b.n	80032f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <osKernelInitialize+0x60>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <osKernelInitialize+0x60>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e002      	b.n	80032f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	20000094 	.word	0x20000094

08003308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800330e:	f3ef 8305 	mrs	r3, IPSR
 8003312:	60bb      	str	r3, [r7, #8]
  return(result);
 8003314:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331a:	f3ef 8310 	mrs	r3, PRIMASK
 800331e:	607b      	str	r3, [r7, #4]
  return(result);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <osKernelStart+0x32>
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <osKernelStart+0x64>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d109      	bne.n	8003342 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800332e:	f3ef 8311 	mrs	r3, BASEPRI
 8003332:	603b      	str	r3, [r7, #0]
  return(result);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <osKernelStart+0x3a>
    stat = osErrorISR;
 800333a:	f06f 0305 	mvn.w	r3, #5
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e00e      	b.n	8003360 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <osKernelStart+0x64>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <osKernelStart+0x64>)
 800334c:	2202      	movs	r2, #2
 800334e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003350:	f001 f864 	bl	800441c <vTaskStartScheduler>
      stat = osOK;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e002      	b.n	8003360 <osKernelStart+0x58>
    } else {
      stat = osError;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800335e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003360:	68fb      	ldr	r3, [r7, #12]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000094 	.word	0x20000094

08003370 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b092      	sub	sp, #72	; 0x48
 8003374:	af04      	add	r7, sp, #16
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003380:	f3ef 8305 	mrs	r3, IPSR
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003388:	2b00      	cmp	r3, #0
 800338a:	f040 8094 	bne.w	80034b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338e:	f3ef 8310 	mrs	r3, PRIMASK
 8003392:	623b      	str	r3, [r7, #32]
  return(result);
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 808d 	bne.w	80034b6 <osThreadNew+0x146>
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <osThreadNew+0x150>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d106      	bne.n	80033b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033a4:	f3ef 8311 	mrs	r3, BASEPRI
 80033a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 8082 	bne.w	80034b6 <osThreadNew+0x146>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07e      	beq.n	80034b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80033bc:	2318      	movs	r3, #24
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80033c0:	2300      	movs	r3, #0
 80033c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80033c4:	f107 031b 	add.w	r3, r7, #27
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d045      	beq.n	8003462 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <osThreadNew+0x74>
        name = attr->name;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <osThreadNew+0x9a>
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	2b38      	cmp	r3, #56	; 0x38
 80033fc:	d805      	bhi.n	800340a <osThreadNew+0x9a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <osThreadNew+0x9e>
        return (NULL);
 800340a:	2300      	movs	r3, #0
 800340c:	e054      	b.n	80034b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00e      	beq.n	8003444 <osThreadNew+0xd4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b5b      	cmp	r3, #91	; 0x5b
 800342c:	d90a      	bls.n	8003444 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <osThreadNew+0xd4>
        mem = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
 8003442:	e010      	b.n	8003466 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10c      	bne.n	8003466 <osThreadNew+0xf6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <osThreadNew+0xf6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <osThreadNew+0xf6>
          mem = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003460:	e001      	b.n	8003466 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	2b01      	cmp	r3, #1
 800346a:	d110      	bne.n	800348e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003474:	9202      	str	r2, [sp, #8]
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003480:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fe02 	bl	800408c <xTaskCreateStatic>
 8003488:	4603      	mov	r3, r0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e013      	b.n	80034b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d110      	bne.n	80034b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	b29a      	uxth	r2, r3
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fe49 	bl	800413e <xTaskCreate>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <osThreadNew+0x146>
          hTask = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034b6:	697b      	ldr	r3, [r7, #20]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3738      	adds	r7, #56	; 0x38
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000094 	.word	0x20000094

080034c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034cc:	f3ef 8305 	mrs	r3, IPSR
 80034d0:	613b      	str	r3, [r7, #16]
  return(result);
 80034d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10f      	bne.n	80034f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <osDelay+0x34>
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <osDelay+0x58>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d109      	bne.n	8003500 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034ec:	f3ef 8311 	mrs	r3, BASEPRI
 80034f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <osDelay+0x3c>
    stat = osErrorISR;
 80034f8:	f06f 0305 	mvn.w	r3, #5
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e007      	b.n	8003510 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <osDelay+0x4c>
      vTaskDelay(ticks);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 ff52 	bl	80043b4 <vTaskDelay>
    }
  }

  return (stat);
 8003510:	697b      	ldr	r3, [r7, #20]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000094 	.word	0x20000094

08003520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a06      	ldr	r2, [pc, #24]	; (8003548 <vApplicationGetIdleTaskMemory+0x28>)
 8003530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a05      	ldr	r2, [pc, #20]	; (800354c <vApplicationGetIdleTaskMemory+0x2c>)
 8003536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	20000098 	.word	0x20000098
 800354c:	200000f4 	.word	0x200000f4

08003550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <vApplicationGetTimerTaskMemory+0x2c>)
 8003560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <vApplicationGetTimerTaskMemory+0x30>)
 8003566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800356e:	601a      	str	r2, [r3, #0]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	200002f4 	.word	0x200002f4
 8003580:	20000350 	.word	0x20000350

08003584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800359c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f103 0208 	add.w	r2, r3, #8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 0208 	add.w	r2, r3, #8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003636:	d103      	bne.n	8003640 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e00c      	b.n	800365a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3308      	adds	r3, #8
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e002      	b.n	800364e <vListInsert+0x2e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d2f6      	bcs.n	8003648 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d103      	bne.n	80036c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	e7fe      	b.n	800370a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800370c:	f001 ff94 	bl	8005638 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	68f9      	ldr	r1, [r7, #12]
 800371a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	3b01      	subs	r3, #1
 800373e:	68f9      	ldr	r1, [r7, #12]
 8003740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	441a      	add	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d114      	bne.n	800378c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01a      	beq.n	80037a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3310      	adds	r3, #16
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f8d8 	bl	8004924 <xTaskRemoveFromEventList>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <xQueueGenericReset+0xcc>)
 800377c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	e009      	b.n	80037a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3310      	adds	r3, #16
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fef7 	bl	8003584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3324      	adds	r3, #36	; 0x24
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fef2 	bl	8003584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037a0:	f001 ff78 	bl	8005694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	; 0x38
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <xQueueGenericCreateStatic+0x28>
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037da:	e7fe      	b.n	80037da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <xQueueGenericCreateStatic+0x42>
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <xQueueGenericCreateStatic+0x4e>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <xQueueGenericCreateStatic+0x52>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueGenericCreateStatic+0x54>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <xQueueGenericCreateStatic+0x6c>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	e7fe      	b.n	800381e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <xQueueGenericCreateStatic+0x78>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <xQueueGenericCreateStatic+0x7c>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <xQueueGenericCreateStatic+0x7e>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <xQueueGenericCreateStatic+0x96>
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e7fe      	b.n	8003848 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800384a:	2350      	movs	r3, #80	; 0x50
 800384c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d009      	beq.n	8003868 <xQueueGenericCreateStatic+0xb4>
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e7fe      	b.n	8003866 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800387a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f805 	bl	8003898 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003890:	4618      	mov	r0, r3
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e002      	b.n	80038ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038c6:	2101      	movs	r1, #1
 80038c8:	69b8      	ldr	r0, [r7, #24]
 80038ca:	f7ff ff0b 	bl	80036e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <xQueueGenericSend+0x30>
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	e7fe      	b.n	800390e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <xQueueGenericSend+0x3e>
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <xQueueGenericSend+0x42>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueGenericSend+0x44>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <xQueueGenericSend+0x5c>
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	e7fe      	b.n	800393a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d103      	bne.n	800394a <xQueueGenericSend+0x6a>
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <xQueueGenericSend+0x6e>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <xQueueGenericSend+0x70>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <xQueueGenericSend+0x88>
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	e7fe      	b.n	8003966 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003968:	f001 f996 	bl	8004c98 <xTaskGetSchedulerState>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <xQueueGenericSend+0x98>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <xQueueGenericSend+0x9c>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <xQueueGenericSend+0x9e>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <xQueueGenericSend+0xb6>
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e7fe      	b.n	8003994 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003996:	f001 fe4f 	bl	8005638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xQueueGenericSend+0xcc>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d129      	bne.n	8003a00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b2:	f000 f9ff 	bl	8003db4 <prvCopyDataToQueue>
 80039b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	3324      	adds	r3, #36	; 0x24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ffad 	bl	8004924 <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <xQueueGenericSend+0x1f0>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	e00a      	b.n	80039f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <xQueueGenericSend+0x1f0>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f8:	f001 fe4c 	bl	8005694 <vPortExitCritical>
				return pdPASS;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e063      	b.n	8003ac8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a06:	f001 fe45 	bl	8005694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e05c      	b.n	8003ac8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 ffe5 	bl	80049e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a22:	f001 fe37 	bl	8005694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a26:	f000 fd5d 	bl	80044e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a2a:	f001 fe05 	bl	8005638 <vPortEnterCritical>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d103      	bne.n	8003a44 <xQueueGenericSend+0x164>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x17a>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5a:	f001 fe1b 	bl	8005694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5e:	1d3a      	adds	r2, r7, #4
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 ffd4 	bl	8004a14 <xTaskCheckForTimeOut>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d124      	bne.n	8003abc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a74:	f000 fa96 	bl	8003fa4 <prvIsQueueFull>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	3310      	adds	r3, #16
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fefe 	bl	8004888 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 fa21 	bl	8003ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a92:	f000 fd35 	bl	8004500 <xTaskResumeAll>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af7c 	bne.w	8003996 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xQueueGenericSend+0x1f0>)
 8003aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	e772      	b.n	8003996 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab2:	f000 fa0f 	bl	8003ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab6:	f000 fd23 	bl	8004500 <xTaskResumeAll>
 8003aba:	e76c      	b.n	8003996 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003abe:	f000 fa09 	bl	8003ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac2:	f000 fd1d 	bl	8004500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ac6:	2300      	movs	r3, #0
		}
	}
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3738      	adds	r7, #56	; 0x38
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08e      	sub	sp, #56	; 0x38
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <xQueueGenericSendFromISR+0x2c>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
 8003afe:	e7fe      	b.n	8003afe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueGenericSendFromISR+0x3a>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueGenericSendFromISR+0x3e>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueGenericSendFromISR+0x40>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <xQueueGenericSendFromISR+0x58>
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	e7fe      	b.n	8003b2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSendFromISR+0x66>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <xQueueGenericSendFromISR+0x6a>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xQueueGenericSendFromISR+0x6c>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <xQueueGenericSendFromISR+0x84>
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e7fe      	b.n	8003b56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b58:	f001 fe28 	bl	80057ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	61ba      	str	r2, [r7, #24]
 8003b72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <xQueueGenericSendFromISR+0xb6>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d12c      	bne.n	8003be4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9a:	f000 f90b 	bl	8003db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba6:	d112      	bne.n	8003bce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	3324      	adds	r3, #36	; 0x24
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 feb5 	bl	8004924 <xTaskRemoveFromEventList>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e007      	b.n	8003bde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	b25a      	sxtb	r2, r3
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bde:	2301      	movs	r3, #1
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003be2:	e001      	b.n	8003be8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3738      	adds	r7, #56	; 0x38
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <xQueueReceive+0x2e>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	e7fe      	b.n	8003c28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d103      	bne.n	8003c38 <xQueueReceive+0x3c>
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <xQueueReceive+0x40>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <xQueueReceive+0x42>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <xQueueReceive+0x5a>
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e7fe      	b.n	8003c54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c56:	f001 f81f 	bl	8004c98 <xTaskGetSchedulerState>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <xQueueReceive+0x6a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <xQueueReceive+0x6e>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <xQueueReceive+0x70>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <xQueueReceive+0x88>
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e7fe      	b.n	8003c82 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c84:	f001 fcd8 	bl	8005638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01f      	beq.n	8003cd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c98:	f000 f8f6 	bl	8003e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00f      	beq.n	8003ccc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	3310      	adds	r3, #16
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fe37 	bl	8004924 <xTaskRemoveFromEventList>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cbc:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <xQueueReceive+0x1b4>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ccc:	f001 fce2 	bl	8005694 <vPortExitCritical>
				return pdPASS;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e069      	b.n	8003da8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cda:	f001 fcdb 	bl	8005694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e062      	b.n	8003da8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ce8:	f107 0310 	add.w	r3, r7, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fe7b 	bl	80049e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cf6:	f001 fccd 	bl	8005694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cfa:	f000 fbf3 	bl	80044e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cfe:	f001 fc9b 	bl	8005638 <vPortEnterCritical>
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0e:	d103      	bne.n	8003d18 <xQueueReceive+0x11c>
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d103      	bne.n	8003d2e <xQueueReceive+0x132>
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d2e:	f001 fcb1 	bl	8005694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d32:	1d3a      	adds	r2, r7, #4
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fe6a 	bl	8004a14 <xTaskCheckForTimeOut>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d123      	bne.n	8003d8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d48:	f000 f916 	bl	8003f78 <prvIsQueueEmpty>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d017      	beq.n	8003d82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	3324      	adds	r3, #36	; 0x24
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fd94 	bl	8004888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d62:	f000 f8b7 	bl	8003ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d66:	f000 fbcb 	bl	8004500 <xTaskResumeAll>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d189      	bne.n	8003c84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <xQueueReceive+0x1b4>)
 8003d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	e780      	b.n	8003c84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d84:	f000 f8a6 	bl	8003ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d88:	f000 fbba 	bl	8004500 <xTaskResumeAll>
 8003d8c:	e77a      	b.n	8003c84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d90:	f000 f8a0 	bl	8003ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d94:	f000 fbb4 	bl	8004500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f000 f8ed 	bl	8003f78 <prvIsQueueEmpty>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f43f af6f 	beq.w	8003c84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003da6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3730      	adds	r7, #48	; 0x30
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10d      	bne.n	8003dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d14d      	bne.n	8003e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 ff78 	bl	8004cd4 <xTaskPriorityDisinherit>
 8003de4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	e043      	b.n	8003e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d119      	bne.n	8003e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6898      	ldr	r0, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	f001 ff0e 	bl	8005c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d32b      	bcc.n	8003e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	e026      	b.n	8003e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68d8      	ldr	r0, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	461a      	mov	r2, r3
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	f001 fef4 	bl	8005c20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	425b      	negs	r3, r3
 8003e42:	441a      	add	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d207      	bcs.n	8003e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	441a      	add	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d105      	bne.n	8003e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e7e:	697b      	ldr	r3, [r7, #20]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d018      	beq.n	8003ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d303      	bcc.n	8003ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68d9      	ldr	r1, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6838      	ldr	r0, [r7, #0]
 8003ec8:	f001 feaa 	bl	8005c20 <memcpy>
	}
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003edc:	f001 fbac 	bl	8005638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee8:	e011      	b.n	8003f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fd14 	bl	8004924 <xTaskRemoveFromEventList>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f02:	f000 fde7 	bl	8004ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	dce9      	bgt.n	8003eea <prvUnlockQueue+0x16>
 8003f16:	e000      	b.n	8003f1a <prvUnlockQueue+0x46>
					break;
 8003f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f22:	f001 fbb7 	bl	8005694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f26:	f001 fb87 	bl	8005638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f32:	e011      	b.n	8003f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3310      	adds	r3, #16
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fcef 	bl	8004924 <xTaskRemoveFromEventList>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f4c:	f000 fdc2 	bl	8004ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f50:	7bbb      	ldrb	r3, [r7, #14]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dce9      	bgt.n	8003f34 <prvUnlockQueue+0x60>
 8003f60:	e000      	b.n	8003f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f6c:	f001 fb92 	bl	8005694 <vPortExitCritical>
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f80:	f001 fb5a 	bl	8005638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e001      	b.n	8003f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f96:	f001 fb7d 	bl	8005694 <vPortExitCritical>

	return xReturn;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fac:	f001 fb44 	bl	8005638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d102      	bne.n	8003fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e001      	b.n	8003fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fc6:	f001 fb65 	bl	8005694 <vPortExitCritical>

	return xReturn;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e014      	b.n	800400e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <vQueueAddToRegistry+0x4c>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ff0:	490b      	ldr	r1, [pc, #44]	; (8004020 <vQueueAddToRegistry+0x4c>)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <vQueueAddToRegistry+0x4c>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004006:	e005      	b.n	8004014 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b07      	cmp	r3, #7
 8004012:	d9e7      	bls.n	8003fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20001a78 	.word	0x20001a78

08004024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004034:	f001 fb00 	bl	8005638 <vPortEnterCritical>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800403e:	b25b      	sxtb	r3, r3
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004044:	d103      	bne.n	800404e <vQueueWaitForMessageRestricted+0x2a>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004054:	b25b      	sxtb	r3, r3
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405a:	d103      	bne.n	8004064 <vQueueWaitForMessageRestricted+0x40>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004064:	f001 fb16 	bl	8005694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3324      	adds	r3, #36	; 0x24
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fc29 	bl	80048d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff28 	bl	8003ed4 <prvUnlockQueue>
	}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08e      	sub	sp, #56	; 0x38
 8004090:	af04      	add	r7, sp, #16
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xTaskCreateStatic+0x28>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	e7fe      	b.n	80040b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <xTaskCreateStatic+0x42>
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e7fe      	b.n	80040cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040ce:	235c      	movs	r3, #92	; 0x5c
 80040d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b5c      	cmp	r3, #92	; 0x5c
 80040d6:	d009      	beq.n	80040ec <xTaskCreateStatic+0x60>
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e7fe      	b.n	80040ea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01e      	beq.n	8004130 <xTaskCreateStatic+0xa4>
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800410a:	2300      	movs	r3, #0
 800410c:	9303      	str	r3, [sp, #12]
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	9302      	str	r3, [sp, #8]
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f850 	bl	80041c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412a:	f000 f8d3 	bl	80042d4 <prvAddNewTaskToReadyList>
 800412e:	e001      	b.n	8004134 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004134:	697b      	ldr	r3, [r7, #20]
	}
 8004136:	4618      	mov	r0, r3
 8004138:	3728      	adds	r7, #40	; 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08c      	sub	sp, #48	; 0x30
 8004142:	af04      	add	r7, sp, #16
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fb66 	bl	8005824 <pvPortMalloc>
 8004158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004160:	205c      	movs	r0, #92	; 0x5c
 8004162:	f001 fb5f 	bl	8005824 <pvPortMalloc>
 8004166:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
 8004174:	e005      	b.n	8004182 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f001 fc16 	bl	80059a8 <vPortFree>
 800417c:	e001      	b.n	8004182 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	2300      	movs	r3, #0
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	9302      	str	r3, [sp, #8]
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f80e 	bl	80041c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ac:	69f8      	ldr	r0, [r7, #28]
 80041ae:	f000 f891 	bl	80042d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e002      	b.n	80041be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041be:	69bb      	ldr	r3, [r7, #24]
	}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	461a      	mov	r2, r3
 80041e0:	21a5      	movs	r1, #165	; 0xa5
 80041e2:	f001 fd28 	bl	8005c36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041f0:	3b01      	subs	r3, #1
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f023 0307 	bic.w	r3, r3, #7
 80041fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <prvInitialiseNewTask+0x56>
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e7fe      	b.n	800421c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e012      	b.n	800424a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	7819      	ldrb	r1, [r3, #0]
 800422c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	3334      	adds	r3, #52	; 0x34
 8004234:	460a      	mov	r2, r1
 8004236:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d006      	beq.n	8004252 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b0f      	cmp	r3, #15
 800424e:	d9e9      	bls.n	8004224 <prvInitialiseNewTask+0x5c>
 8004250:	e000      	b.n	8004254 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004252:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b37      	cmp	r3, #55	; 0x37
 8004260:	d901      	bls.n	8004266 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004262:	2337      	movs	r3, #55	; 0x37
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004270:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff f9a0 	bl	80035c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	3318      	adds	r3, #24
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f99b 	bl	80035c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	69b8      	ldr	r0, [r7, #24]
 80042b6:	f001 f8d7 	bl	8005468 <pxPortInitialiseStack>
 80042ba:	4602      	mov	r2, r0
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042cc:	bf00      	nop
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042dc:	f001 f9ac 	bl	8005638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <prvAddNewTaskToReadyList+0xc4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <prvAddNewTaskToReadyList+0xc4>)
 80042e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042ea:	4b2c      	ldr	r3, [pc, #176]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <prvAddNewTaskToReadyList+0xc4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d110      	bne.n	8004322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004300:	f000 fc0c 	bl	8004b1c <prvInitialiseTaskLists>
 8004304:	e00d      	b.n	8004322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <prvAddNewTaskToReadyList+0xcc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d802      	bhi.n	8004322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800431c:	4a1f      	ldr	r2, [pc, #124]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <prvAddNewTaskToReadyList+0xd0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <prvAddNewTaskToReadyList+0xd0>)
 800432a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <prvAddNewTaskToReadyList+0xd0>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <prvAddNewTaskToReadyList+0xd4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d903      	bls.n	8004348 <prvAddNewTaskToReadyList+0x74>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <prvAddNewTaskToReadyList+0xd4>)
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4a15      	ldr	r2, [pc, #84]	; (80043ac <prvAddNewTaskToReadyList+0xd8>)
 8004356:	441a      	add	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7ff f93b 	bl	80035da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004364:	f001 f996 	bl	8005694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <prvAddNewTaskToReadyList+0xcc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	429a      	cmp	r2, r3
 800437c:	d207      	bcs.n	800438e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <prvAddNewTaskToReadyList+0xdc>)
 8004380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000c24 	.word	0x20000c24
 800439c:	20000750 	.word	0x20000750
 80043a0:	20000c30 	.word	0x20000c30
 80043a4:	20000c40 	.word	0x20000c40
 80043a8:	20000c2c 	.word	0x20000c2c
 80043ac:	20000754 	.word	0x20000754
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <vTaskDelay+0x60>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <vTaskDelay+0x2e>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	e7fe      	b.n	80043e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80043e2:	f000 f87f 	bl	80044e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043e6:	2100      	movs	r1, #0
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fcdf 	bl	8004dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043ee:	f000 f887 	bl	8004500 <xTaskResumeAll>
 80043f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <vTaskDelay+0x64>)
 80043fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000c4c 	.word	0x20000c4c
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800442a:	463a      	mov	r2, r7
 800442c:	1d39      	adds	r1, r7, #4
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f874 	bl	8003520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	9202      	str	r2, [sp, #8]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	2300      	movs	r3, #0
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2300      	movs	r3, #0
 8004448:	460a      	mov	r2, r1
 800444a:	4920      	ldr	r1, [pc, #128]	; (80044cc <vTaskStartScheduler+0xb0>)
 800444c:	4820      	ldr	r0, [pc, #128]	; (80044d0 <vTaskStartScheduler+0xb4>)
 800444e:	f7ff fe1d 	bl	800408c <xTaskCreateStatic>
 8004452:	4602      	mov	r2, r0
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <vTaskStartScheduler+0xb8>)
 8004456:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004458:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <vTaskStartScheduler+0xb8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e001      	b.n	800446a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d102      	bne.n	8004476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004470:	f000 fcf0 	bl	8004e54 <xTimerCreateTimerTask>
 8004474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d115      	bne.n	80044a8 <vTaskStartScheduler+0x8c>
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <vTaskStartScheduler+0xbc>)
 8004490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <vTaskStartScheduler+0xc0>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800449c:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <vTaskStartScheduler+0xc4>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044a2:	f001 f859 	bl	8005558 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044a6:	e00d      	b.n	80044c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ae:	d109      	bne.n	80044c4 <vTaskStartScheduler+0xa8>
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e7fe      	b.n	80044c2 <vTaskStartScheduler+0xa6>
}
 80044c4:	bf00      	nop
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	08006aa4 	.word	0x08006aa4
 80044d0:	08004aed 	.word	0x08004aed
 80044d4:	20000c48 	.word	0x20000c48
 80044d8:	20000c44 	.word	0x20000c44
 80044dc:	20000c30 	.word	0x20000c30
 80044e0:	20000c28 	.word	0x20000c28

080044e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <vTaskSuspendAll+0x18>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a03      	ldr	r2, [pc, #12]	; (80044fc <vTaskSuspendAll+0x18>)
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000c4c 	.word	0x20000c4c

08004500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <xTaskResumeAll+0x114>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <xTaskResumeAll+0x2a>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	e7fe      	b.n	8004528 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800452a:	f001 f885 	bl	8005638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800452e:	4b39      	ldr	r3, [pc, #228]	; (8004614 <xTaskResumeAll+0x114>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3b01      	subs	r3, #1
 8004534:	4a37      	ldr	r2, [pc, #220]	; (8004614 <xTaskResumeAll+0x114>)
 8004536:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004538:	4b36      	ldr	r3, [pc, #216]	; (8004614 <xTaskResumeAll+0x114>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d162      	bne.n	8004606 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004540:	4b35      	ldr	r3, [pc, #212]	; (8004618 <xTaskResumeAll+0x118>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05e      	beq.n	8004606 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004548:	e02f      	b.n	80045aa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800454a:	4b34      	ldr	r3, [pc, #208]	; (800461c <xTaskResumeAll+0x11c>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3318      	adds	r3, #24
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff f89a 	bl	8003690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f895 	bl	8003690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <xTaskResumeAll+0x120>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d903      	bls.n	800457a <xTaskResumeAll+0x7a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <xTaskResumeAll+0x120>)
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4a27      	ldr	r2, [pc, #156]	; (8004624 <xTaskResumeAll+0x124>)
 8004588:	441a      	add	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f7ff f822 	bl	80035da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <xTaskResumeAll+0x128>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <xTaskResumeAll+0x12c>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <xTaskResumeAll+0x11c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1cb      	bne.n	800454a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b8:	f000 fb4a 	bl	8004c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045bc:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <xTaskResumeAll+0x130>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c8:	f000 f844 	bl	8004654 <xTaskIncrementTick>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <xTaskResumeAll+0x12c>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3b01      	subs	r3, #1
 80045dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f1      	bne.n	80045c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <xTaskResumeAll+0x130>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <xTaskResumeAll+0x12c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <xTaskResumeAll+0x134>)
 80045f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004606:	f001 f845 	bl	8005694 <vPortExitCritical>

	return xAlreadyYielded;
 800460a:	68bb      	ldr	r3, [r7, #8]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000c4c 	.word	0x20000c4c
 8004618:	20000c24 	.word	0x20000c24
 800461c:	20000be4 	.word	0x20000be4
 8004620:	20000c2c 	.word	0x20000c2c
 8004624:	20000754 	.word	0x20000754
 8004628:	20000750 	.word	0x20000750
 800462c:	20000c38 	.word	0x20000c38
 8004630:	20000c34 	.word	0x20000c34
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <xTaskGetTickCount+0x18>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004644:	687b      	ldr	r3, [r7, #4]
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	20000c28 	.word	0x20000c28

08004654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <xTaskIncrementTick+0x150>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 808d 	bne.w	8004782 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004668:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <xTaskIncrementTick+0x154>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004670:	4a4d      	ldr	r2, [pc, #308]	; (80047a8 <xTaskIncrementTick+0x154>)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11f      	bne.n	80046bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800467c:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <xTaskIncrementTick+0x158>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <xTaskIncrementTick+0x46>
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	e7fe      	b.n	8004698 <xTaskIncrementTick+0x44>
 800469a:	4b44      	ldr	r3, [pc, #272]	; (80047ac <xTaskIncrementTick+0x158>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <xTaskIncrementTick+0x15c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a41      	ldr	r2, [pc, #260]	; (80047ac <xTaskIncrementTick+0x158>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4a41      	ldr	r2, [pc, #260]	; (80047b0 <xTaskIncrementTick+0x15c>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a3f      	ldr	r2, [pc, #252]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	f000 faca 	bl	8004c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046bc:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <xTaskIncrementTick+0x164>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d34e      	bcc.n	8004764 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <xTaskIncrementTick+0x158>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <xTaskIncrementTick+0x80>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <xTaskIncrementTick+0x82>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <xTaskIncrementTick+0x164>)
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046e0:	601a      	str	r2, [r3, #0]
					break;
 80046e2:	e03f      	b.n	8004764 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <xTaskIncrementTick+0x158>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d203      	bcs.n	8004704 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046fc:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <xTaskIncrementTick+0x164>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
						break;
 8004702:	e02f      	b.n	8004764 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe ffc1 	bl	8003690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3318      	adds	r3, #24
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe ffb8 	bl	8003690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <xTaskIncrementTick+0x168>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d903      	bls.n	8004734 <xTaskIncrementTick+0xe0>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	4a22      	ldr	r2, [pc, #136]	; (80047bc <xTaskIncrementTick+0x168>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <xTaskIncrementTick+0x16c>)
 8004742:	441a      	add	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fe ff45 	bl	80035da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <xTaskIncrementTick+0x170>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	429a      	cmp	r2, r3
 800475c:	d3b3      	bcc.n	80046c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004762:	e7b0      	b.n	80046c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <xTaskIncrementTick+0x170>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	4915      	ldr	r1, [pc, #84]	; (80047c0 <xTaskIncrementTick+0x16c>)
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d907      	bls.n	800478c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e004      	b.n	800478c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <xTaskIncrementTick+0x174>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <xTaskIncrementTick+0x174>)
 800478a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <xTaskIncrementTick+0x178>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004798:	697b      	ldr	r3, [r7, #20]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000c4c 	.word	0x20000c4c
 80047a8:	20000c28 	.word	0x20000c28
 80047ac:	20000bdc 	.word	0x20000bdc
 80047b0:	20000be0 	.word	0x20000be0
 80047b4:	20000c3c 	.word	0x20000c3c
 80047b8:	20000c44 	.word	0x20000c44
 80047bc:	20000c2c 	.word	0x20000c2c
 80047c0:	20000754 	.word	0x20000754
 80047c4:	20000750 	.word	0x20000750
 80047c8:	20000c34 	.word	0x20000c34
 80047cc:	20000c38 	.word	0x20000c38

080047d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047d6:	4b27      	ldr	r3, [pc, #156]	; (8004874 <vTaskSwitchContext+0xa4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047de:	4b26      	ldr	r3, [pc, #152]	; (8004878 <vTaskSwitchContext+0xa8>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e4:	e040      	b.n	8004868 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <vTaskSwitchContext+0xa8>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047ec:	4b23      	ldr	r3, [pc, #140]	; (800487c <vTaskSwitchContext+0xac>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e00f      	b.n	8004814 <vTaskSwitchContext+0x44>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <vTaskSwitchContext+0x3e>
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	e7fe      	b.n	800480c <vTaskSwitchContext+0x3c>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b01      	subs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	491a      	ldr	r1, [pc, #104]	; (8004880 <vTaskSwitchContext+0xb0>)
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0e5      	beq.n	80047f4 <vTaskSwitchContext+0x24>
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <vTaskSwitchContext+0xb0>)
 8004834:	4413      	add	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3308      	adds	r3, #8
 800484a:	429a      	cmp	r2, r3
 800484c:	d104      	bne.n	8004858 <vTaskSwitchContext+0x88>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <vTaskSwitchContext+0xb4>)
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4a06      	ldr	r2, [pc, #24]	; (800487c <vTaskSwitchContext+0xac>)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000c4c 	.word	0x20000c4c
 8004878:	20000c38 	.word	0x20000c38
 800487c:	20000c2c 	.word	0x20000c2c
 8004880:	20000754 	.word	0x20000754
 8004884:	20000750 	.word	0x20000750

08004888 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <vTaskPlaceOnEventList+0x24>
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e7fe      	b.n	80048aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <vTaskPlaceOnEventList+0x44>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3318      	adds	r3, #24
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fe feb3 	bl	8003620 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ba:	2101      	movs	r1, #1
 80048bc:	6838      	ldr	r0, [r7, #0]
 80048be:	f000 fa75 	bl	8004dac <prvAddCurrentTaskToDelayedList>
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000750 	.word	0x20000750

080048d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <vTaskPlaceOnEventListRestricted+0x26>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e7fe      	b.n	80048f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <vTaskPlaceOnEventListRestricted+0x50>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3318      	adds	r3, #24
 80048fc:	4619      	mov	r1, r3
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7fe fe6b 	bl	80035da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800490e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f000 fa4a 	bl	8004dac <prvAddCurrentTaskToDelayedList>
	}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000750 	.word	0x20000750

08004924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <xTaskRemoveFromEventList+0x2a>
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e7fe      	b.n	800494c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3318      	adds	r3, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fe9c 	bl	8003690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004958:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <xTaskRemoveFromEventList+0xac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11d      	bne.n	800499c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fe93 	bl	8003690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <xTaskRemoveFromEventList+0xb0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d903      	bls.n	800497e <xTaskRemoveFromEventList+0x5a>
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <xTaskRemoveFromEventList+0xb0>)
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <xTaskRemoveFromEventList+0xb4>)
 800498c:	441a      	add	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe fe20 	bl	80035da <vListInsertEnd>
 800499a:	e005      	b.n	80049a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3318      	adds	r3, #24
 80049a0:	4619      	mov	r1, r3
 80049a2:	480e      	ldr	r0, [pc, #56]	; (80049dc <xTaskRemoveFromEventList+0xb8>)
 80049a4:	f7fe fe19 	bl	80035da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <xTaskRemoveFromEventList+0xbc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d905      	bls.n	80049c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <xTaskRemoveFromEventList+0xc0>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e001      	b.n	80049c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049c6:	697b      	ldr	r3, [r7, #20]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000c4c 	.word	0x20000c4c
 80049d4:	20000c2c 	.word	0x20000c2c
 80049d8:	20000754 	.word	0x20000754
 80049dc:	20000be4 	.word	0x20000be4
 80049e0:	20000750 	.word	0x20000750
 80049e4:	20000c38 	.word	0x20000c38

080049e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <vTaskInternalSetTimeOutState+0x24>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <vTaskInternalSetTimeOutState+0x28>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	605a      	str	r2, [r3, #4]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000c3c 	.word	0x20000c3c
 8004a10:	20000c28 	.word	0x20000c28

08004a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <xTaskCheckForTimeOut+0x24>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	e7fe      	b.n	8004a36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <xTaskCheckForTimeOut+0x3e>
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e7fe      	b.n	8004a50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004a52:	f000 fdf1 	bl	8005638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a56:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <xTaskCheckForTimeOut+0xb8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a6e:	d102      	bne.n	8004a76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e023      	b.n	8004abe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <xTaskCheckForTimeOut+0xbc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d007      	beq.n	8004a92 <xTaskCheckForTimeOut+0x7e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e015      	b.n	8004abe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d20b      	bcs.n	8004ab4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff9d 	bl	80049e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e004      	b.n	8004abe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004abe:	f000 fde9 	bl	8005694 <vPortExitCritical>

	return xReturn;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000c28 	.word	0x20000c28
 8004ad0:	20000c3c 	.word	0x20000c3c

08004ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <vTaskMissedYield+0x14>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000c38 	.word	0x20000c38

08004aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004af4:	f000 f852 	bl	8004b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <prvIdleTask+0x28>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d9f9      	bls.n	8004af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <prvIdleTask+0x2c>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b10:	e7f0      	b.n	8004af4 <prvIdleTask+0x8>
 8004b12:	bf00      	nop
 8004b14:	20000754 	.word	0x20000754
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e00c      	b.n	8004b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <prvInitialiseTaskLists+0x60>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fd24 	bl	8003584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b37      	cmp	r3, #55	; 0x37
 8004b46:	d9ef      	bls.n	8004b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b48:	480d      	ldr	r0, [pc, #52]	; (8004b80 <prvInitialiseTaskLists+0x64>)
 8004b4a:	f7fe fd1b 	bl	8003584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b4e:	480d      	ldr	r0, [pc, #52]	; (8004b84 <prvInitialiseTaskLists+0x68>)
 8004b50:	f7fe fd18 	bl	8003584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b54:	480c      	ldr	r0, [pc, #48]	; (8004b88 <prvInitialiseTaskLists+0x6c>)
 8004b56:	f7fe fd15 	bl	8003584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b5a:	480c      	ldr	r0, [pc, #48]	; (8004b8c <prvInitialiseTaskLists+0x70>)
 8004b5c:	f7fe fd12 	bl	8003584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b60:	480b      	ldr	r0, [pc, #44]	; (8004b90 <prvInitialiseTaskLists+0x74>)
 8004b62:	f7fe fd0f 	bl	8003584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <prvInitialiseTaskLists+0x78>)
 8004b68:	4a05      	ldr	r2, [pc, #20]	; (8004b80 <prvInitialiseTaskLists+0x64>)
 8004b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvInitialiseTaskLists+0x7c>)
 8004b6e:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <prvInitialiseTaskLists+0x68>)
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000754 	.word	0x20000754
 8004b80:	20000bb4 	.word	0x20000bb4
 8004b84:	20000bc8 	.word	0x20000bc8
 8004b88:	20000be4 	.word	0x20000be4
 8004b8c:	20000bf8 	.word	0x20000bf8
 8004b90:	20000c10 	.word	0x20000c10
 8004b94:	20000bdc 	.word	0x20000bdc
 8004b98:	20000be0 	.word	0x20000be0

08004b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba2:	e019      	b.n	8004bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ba4:	f000 fd48 	bl	8005638 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <prvCheckTasksWaitingTermination+0x4c>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fd6b 	bl	8003690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <prvCheckTasksWaitingTermination+0x50>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <prvCheckTasksWaitingTermination+0x50>)
 8004bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bce:	f000 fd61 	bl	8005694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f80e 	bl	8004bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e1      	bne.n	8004ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000bf8 	.word	0x20000bf8
 8004bec:	20000c24 	.word	0x20000c24
 8004bf0:	20000c0c 	.word	0x20000c0c

08004bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fecc 	bl	80059a8 <vPortFree>
				vPortFree( pxTCB );
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fec9 	bl	80059a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c16:	e017      	b.n	8004c48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d103      	bne.n	8004c2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fec0 	bl	80059a8 <vPortFree>
	}
 8004c28:	e00e      	b.n	8004c48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d009      	beq.n	8004c48 <prvDeleteTCB+0x54>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e7fe      	b.n	8004c46 <prvDeleteTCB+0x52>
	}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <prvResetNextTaskUnblockTime+0x40>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <prvResetNextTaskUnblockTime+0x14>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <prvResetNextTaskUnblockTime+0x16>
 8004c64:	2300      	movs	r3, #0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <prvResetNextTaskUnblockTime+0x44>)
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c72:	e008      	b.n	8004c86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <prvResetNextTaskUnblockTime+0x40>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <prvResetNextTaskUnblockTime+0x44>)
 8004c84:	6013      	str	r3, [r2, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr
 8004c90:	20000bdc 	.word	0x20000bdc
 8004c94:	20000c44 	.word	0x20000c44

08004c98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <xTaskGetSchedulerState+0x34>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e008      	b.n	8004cbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <xTaskGetSchedulerState+0x38>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	e001      	b.n	8004cbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cbe:	687b      	ldr	r3, [r7, #4]
	}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000c30 	.word	0x20000c30
 8004cd0:	20000c4c 	.word	0x20000c4c

08004cd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d054      	beq.n	8004d94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cea:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <xTaskPriorityDisinherit+0xcc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d009      	beq.n	8004d08 <xTaskPriorityDisinherit+0x34>
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e7fe      	b.n	8004d06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <xTaskPriorityDisinherit+0x50>
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	e7fe      	b.n	8004d22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	1e5a      	subs	r2, r3, #1
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d02c      	beq.n	8004d94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d128      	bne.n	8004d94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fca2 	bl	8003690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <xTaskPriorityDisinherit+0xd0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d903      	bls.n	8004d74 <xTaskPriorityDisinherit+0xa0>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <xTaskPriorityDisinherit+0xd0>)
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <xTaskPriorityDisinherit+0xd4>)
 8004d82:	441a      	add	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f7fe fc25 	bl	80035da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d94:	697b      	ldr	r3, [r7, #20]
	}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000750 	.word	0x20000750
 8004da4:	20000c2c 	.word	0x20000c2c
 8004da8:	20000754 	.word	0x20000754

08004dac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <prvAddCurrentTaskToDelayedList+0x90>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe fc64 	bl	8003690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dce:	d10a      	bne.n	8004de6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4819      	ldr	r0, [pc, #100]	; (8004e44 <prvAddCurrentTaskToDelayedList+0x98>)
 8004de0:	f7fe fbfb 	bl	80035da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004de4:	e026      	b.n	8004e34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dee:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d209      	bcs.n	8004e12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe fc08 	bl	8003620 <vListInsert>
}
 8004e10:	e010      	b.n	8004e34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7fe fbfe 	bl	8003620 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d202      	bcs.n	8004e34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6013      	str	r3, [r2, #0]
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000c28 	.word	0x20000c28
 8004e40:	20000750 	.word	0x20000750
 8004e44:	20000c10 	.word	0x20000c10
 8004e48:	20000be0 	.word	0x20000be0
 8004e4c:	20000bdc 	.word	0x20000bdc
 8004e50:	20000c44 	.word	0x20000c44

08004e54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e5e:	f000 fac3 	bl	80053e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <xTimerCreateTimerTask+0x80>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d021      	beq.n	8004eae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e72:	1d3a      	adds	r2, r7, #4
 8004e74:	f107 0108 	add.w	r1, r7, #8
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fb67 	bl	8003550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	9202      	str	r2, [sp, #8]
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	460a      	mov	r2, r1
 8004e94:	4910      	ldr	r1, [pc, #64]	; (8004ed8 <xTimerCreateTimerTask+0x84>)
 8004e96:	4811      	ldr	r0, [pc, #68]	; (8004edc <xTimerCreateTimerTask+0x88>)
 8004e98:	f7ff f8f8 	bl	800408c <xTaskCreateStatic>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <xTimerCreateTimerTask+0x8c>)
 8004ea0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <xTimerCreateTimerTask+0x8c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xTimerCreateTimerTask+0x74>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	e7fe      	b.n	8004ec6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004ec8:	697b      	ldr	r3, [r7, #20]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000c80 	.word	0x20000c80
 8004ed8:	08006aac 	.word	0x08006aac
 8004edc:	08004ffd 	.word	0x08004ffd
 8004ee0:	20000c84 	.word	0x20000c84

08004ee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <xTimerGenericCommand+0x2c>
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	623b      	str	r3, [r7, #32]
 8004f0e:	e7fe      	b.n	8004f0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <xTimerGenericCommand+0x94>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02a      	beq.n	8004f6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	dc18      	bgt.n	8004f5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f2a:	f7ff feb5 	bl	8004c98 <xTaskGetSchedulerState>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d109      	bne.n	8004f48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <xTimerGenericCommand+0x94>)
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	f107 0110 	add.w	r1, r7, #16
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f40:	f7fe fcce 	bl	80038e0 <xQueueGenericSend>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24
 8004f46:	e012      	b.n	8004f6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <xTimerGenericCommand+0x94>)
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	f107 0110 	add.w	r1, r7, #16
 8004f50:	2300      	movs	r3, #0
 8004f52:	2200      	movs	r2, #0
 8004f54:	f7fe fcc4 	bl	80038e0 <xQueueGenericSend>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24
 8004f5a:	e008      	b.n	8004f6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <xTimerGenericCommand+0x94>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	f107 0110 	add.w	r1, r7, #16
 8004f64:	2300      	movs	r3, #0
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	f7fe fdb4 	bl	8003ad4 <xQueueGenericSendFromISR>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	; 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000c80 	.word	0x20000c80

08004f7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f86:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <prvProcessExpiredTimer+0x7c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe fb7b 	bl	8003690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d121      	bne.n	8004fe6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	18d1      	adds	r1, r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f000 f8c8 	bl	8005144 <prvInsertTimerInActiveList>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d015      	beq.n	8004fe6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f7ff ff8d 	bl	8004ee4 <xTimerGenericCommand>
 8004fca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <prvProcessExpiredTimer+0x6a>
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e7fe      	b.n	8004fe4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	4798      	blx	r3
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000c78 	.word	0x20000c78

08004ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f857 	bl	80050bc <prvGetNextExpireTime>
 800500e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4619      	mov	r1, r3
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f803 	bl	8005020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800501a:	f000 f8d5 	bl	80051c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800501e:	e7f1      	b.n	8005004 <prvTimerTask+0x8>

08005020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800502a:	f7ff fa5b 	bl	80044e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800502e:	f107 0308 	add.w	r3, r7, #8
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f866 	bl	8005104 <prvSampleTimeNow>
 8005038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d130      	bne.n	80050a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <prvProcessTimerOrBlockTask+0x3c>
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	429a      	cmp	r2, r3
 800504c:	d806      	bhi.n	800505c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800504e:	f7ff fa57 	bl	8004500 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff91 	bl	8004f7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800505a:	e024      	b.n	80050a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005062:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <prvProcessTimerOrBlockTask+0x90>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005074:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <prvProcessTimerOrBlockTask+0x94>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	4619      	mov	r1, r3
 8005082:	f7fe ffcf 	bl	8004024 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005086:	f7ff fa3b 	bl	8004500 <xTaskResumeAll>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <prvProcessTimerOrBlockTask+0x98>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
}
 80050a0:	e001      	b.n	80050a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050a2:	f7ff fa2d 	bl	8004500 <xTaskResumeAll>
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000c7c 	.word	0x20000c7c
 80050b4:	20000c80 	.word	0x20000c80
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <prvGetNextExpireTime+0x44>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf0c      	ite	eq
 80050ce:	2301      	moveq	r3, #1
 80050d0:	2300      	movne	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <prvGetNextExpireTime+0x44>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e001      	b.n	80050f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050f2:	68fb      	ldr	r3, [r7, #12]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000c78 	.word	0x20000c78

08005104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800510c:	f7ff fa94 	bl	8004638 <xTaskGetTickCount>
 8005110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <prvSampleTimeNow+0x3c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	429a      	cmp	r2, r3
 800511a:	d205      	bcs.n	8005128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800511c:	f000 f904 	bl	8005328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e002      	b.n	800512e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800512e:	4a04      	ldr	r2, [pc, #16]	; (8005140 <prvSampleTimeNow+0x3c>)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005134:	68fb      	ldr	r3, [r7, #12]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000c88 	.word	0x20000c88

08005144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d812      	bhi.n	8005190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d302      	bcc.n	800517e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e01b      	b.n	80051b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <prvInsertTimerInActiveList+0x7c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f7fe fa49 	bl	8003620 <vListInsert>
 800518e:	e012      	b.n	80051b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d206      	bcs.n	80051a6 <prvInsertTimerInActiveList+0x62>
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e007      	b.n	80051b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <prvInsertTimerInActiveList+0x80>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fe fa35 	bl	8003620 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051b6:	697b      	ldr	r3, [r7, #20]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000c7c 	.word	0x20000c7c
 80051c4:	20000c78 	.word	0x20000c78

080051c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051ce:	e099      	b.n	8005304 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da17      	bge.n	8005206 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	3304      	adds	r3, #4
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <prvProcessReceivedCommands+0x2e>
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e7fe      	b.n	80051f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fc:	6850      	ldr	r0, [r2, #4]
 80051fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	4611      	mov	r1, r2
 8005204:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	db7a      	blt.n	8005302 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	3304      	adds	r3, #4
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe fa37 	bl	8003690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005222:	463b      	mov	r3, r7
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff6d 	bl	8005104 <prvSampleTimeNow>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b09      	cmp	r3, #9
 8005230:	d868      	bhi.n	8005304 <prvProcessReceivedCommands+0x13c>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <prvProcessReceivedCommands+0x70>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	08005261 	.word	0x08005261
 800523c:	08005261 	.word	0x08005261
 8005240:	08005261 	.word	0x08005261
 8005244:	08005305 	.word	0x08005305
 8005248:	080052bb 	.word	0x080052bb
 800524c:	080052f1 	.word	0x080052f1
 8005250:	08005261 	.word	0x08005261
 8005254:	08005261 	.word	0x08005261
 8005258:	08005305 	.word	0x08005305
 800525c:	080052bb 	.word	0x080052bb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	18d1      	adds	r1, r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526e:	f7ff ff69 	bl	8005144 <prvInsertTimerInActiveList>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d045      	beq.n	8005304 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d13d      	bne.n	8005304 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	441a      	add	r2, r3
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	2100      	movs	r1, #0
 8005298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529a:	f7ff fe23 	bl	8004ee4 <xTimerGenericCommand>
 800529e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d12e      	bne.n	8005304 <prvProcessReceivedCommands+0x13c>
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e7fe      	b.n	80052b8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <prvProcessReceivedCommands+0x114>
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e7fe      	b.n	80052da <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	18d1      	adds	r1, r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ea:	f7ff ff2b 	bl	8005144 <prvInsertTimerInActiveList>
					break;
 80052ee:	e009      	b.n	8005304 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80052fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052fc:	f000 fb54 	bl	80059a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005300:	e000      	b.n	8005304 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005302:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <prvProcessReceivedCommands+0x15c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1d39      	adds	r1, r7, #4
 800530a:	2200      	movs	r2, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe fc75 	bl	8003bfc <xQueueReceive>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f af5b 	bne.w	80051d0 <prvProcessReceivedCommands+0x8>
	}
}
 800531a:	bf00      	nop
 800531c:	3730      	adds	r7, #48	; 0x30
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000c80 	.word	0x20000c80

08005328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800532e:	e044      	b.n	80053ba <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <prvSwitchTimerLists+0xb8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800533a:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <prvSwitchTimerLists+0xb8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe f9a1 	bl	8003690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d12d      	bne.n	80053ba <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	429a      	cmp	r2, r3
 800536e:	d90e      	bls.n	800538e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <prvSwitchTimerLists+0xb8>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3304      	adds	r3, #4
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f7fe f94a 	bl	8003620 <vListInsert>
 800538c:	e015      	b.n	80053ba <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800538e:	2300      	movs	r3, #0
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	2100      	movs	r1, #0
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fda3 	bl	8004ee4 <xTimerGenericCommand>
 800539e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <prvSwitchTimerLists+0x92>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	e7fe      	b.n	80053b8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <prvSwitchTimerLists+0xb8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1b5      	bne.n	8005330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <prvSwitchTimerLists+0xb8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <prvSwitchTimerLists+0xbc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <prvSwitchTimerLists+0xb8>)
 80053d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053d2:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <prvSwitchTimerLists+0xbc>)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6013      	str	r3, [r2, #0]
}
 80053d8:	bf00      	nop
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000c78 	.word	0x20000c78
 80053e4:	20000c7c 	.word	0x20000c7c

080053e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ee:	f000 f923 	bl	8005638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <prvCheckForValidListAndQueue+0x60>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d120      	bne.n	800543c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053fa:	4814      	ldr	r0, [pc, #80]	; (800544c <prvCheckForValidListAndQueue+0x64>)
 80053fc:	f7fe f8c2 	bl	8003584 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005400:	4813      	ldr	r0, [pc, #76]	; (8005450 <prvCheckForValidListAndQueue+0x68>)
 8005402:	f7fe f8bf 	bl	8003584 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <prvCheckForValidListAndQueue+0x6c>)
 8005408:	4a10      	ldr	r2, [pc, #64]	; (800544c <prvCheckForValidListAndQueue+0x64>)
 800540a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800540c:	4b12      	ldr	r3, [pc, #72]	; (8005458 <prvCheckForValidListAndQueue+0x70>)
 800540e:	4a10      	ldr	r2, [pc, #64]	; (8005450 <prvCheckForValidListAndQueue+0x68>)
 8005410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005412:	2300      	movs	r3, #0
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	4b11      	ldr	r3, [pc, #68]	; (800545c <prvCheckForValidListAndQueue+0x74>)
 8005418:	4a11      	ldr	r2, [pc, #68]	; (8005460 <prvCheckForValidListAndQueue+0x78>)
 800541a:	2110      	movs	r1, #16
 800541c:	200a      	movs	r0, #10
 800541e:	f7fe f9c9 	bl	80037b4 <xQueueGenericCreateStatic>
 8005422:	4602      	mov	r2, r0
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <prvCheckForValidListAndQueue+0x60>)
 8005426:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <prvCheckForValidListAndQueue+0x60>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <prvCheckForValidListAndQueue+0x60>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	490b      	ldr	r1, [pc, #44]	; (8005464 <prvCheckForValidListAndQueue+0x7c>)
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fdcc 	bl	8003fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800543c:	f000 f92a 	bl	8005694 <vPortExitCritical>
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000c80 	.word	0x20000c80
 800544c:	20000c50 	.word	0x20000c50
 8005450:	20000c64 	.word	0x20000c64
 8005454:	20000c78 	.word	0x20000c78
 8005458:	20000c7c 	.word	0x20000c7c
 800545c:	20000d2c 	.word	0x20000d2c
 8005460:	20000c8c 	.word	0x20000c8c
 8005464:	08006ab4 	.word	0x08006ab4

08005468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3b04      	subs	r3, #4
 8005478:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b04      	subs	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f023 0201 	bic.w	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3b04      	subs	r3, #4
 8005496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <pxPortInitialiseStack+0x54>)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3b14      	subs	r3, #20
 80054a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3b20      	subs	r3, #32
 80054ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054b0:	68fb      	ldr	r3, [r7, #12]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	080054c1 	.word	0x080054c1

080054c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <prvTaskExitError+0x4c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d2:	d009      	beq.n	80054e8 <prvTaskExitError+0x28>
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e7fe      	b.n	80054e6 <prvTaskExitError+0x26>
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054fa:	bf00      	nop
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0fc      	beq.n	80054fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	2000000c 	.word	0x2000000c

08005510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <pxCurrentTCBConst2>)
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	6808      	ldr	r0, [r1, #0]
 8005516:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800551a:	f380 8809 	msr	PSP, r0
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8811 	msr	BASEPRI, r0
 800552a:	f04e 0e0d 	orr.w	lr, lr, #13
 800552e:	4770      	bx	lr

08005530 <pxCurrentTCBConst2>:
 8005530:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005538:	4806      	ldr	r0, [pc, #24]	; (8005554 <prvPortStartFirstTask+0x1c>)
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	6800      	ldr	r0, [r0, #0]
 800553e:	f380 8808 	msr	MSP, r0
 8005542:	b662      	cpsie	i
 8005544:	b661      	cpsie	f
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	df00      	svc	0
 8005550:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005552:	bf00      	nop
 8005554:	e000ed08 	.word	0xe000ed08

08005558 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <xPortStartScheduler+0xcc>)
 8005560:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22ff      	movs	r2, #255	; 0xff
 800556e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005580:	b2da      	uxtb	r2, r3
 8005582:	4b29      	ldr	r3, [pc, #164]	; (8005628 <xPortStartScheduler+0xd0>)
 8005584:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005586:	4b29      	ldr	r3, [pc, #164]	; (800562c <xPortStartScheduler+0xd4>)
 8005588:	2207      	movs	r2, #7
 800558a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800558c:	e009      	b.n	80055a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800558e:	4b27      	ldr	r3, [pc, #156]	; (800562c <xPortStartScheduler+0xd4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3b01      	subs	r3, #1
 8005594:	4a25      	ldr	r2, [pc, #148]	; (800562c <xPortStartScheduler+0xd4>)
 8005596:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d0ef      	beq.n	800558e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055ae:	4b1f      	ldr	r3, [pc, #124]	; (800562c <xPortStartScheduler+0xd4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1c3 0307 	rsb	r3, r3, #7
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d009      	beq.n	80055ce <xPortStartScheduler+0x76>
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	e7fe      	b.n	80055cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <xPortStartScheduler+0xd4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	4a15      	ldr	r2, [pc, #84]	; (800562c <xPortStartScheduler+0xd4>)
 80055d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <xPortStartScheduler+0xd4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055e0:	4a12      	ldr	r2, [pc, #72]	; (800562c <xPortStartScheduler+0xd4>)
 80055e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <xPortStartScheduler+0xd8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <xPortStartScheduler+0xd8>)
 80055f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <xPortStartScheduler+0xd8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <xPortStartScheduler+0xd8>)
 80055fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005604:	f000 f8b0 	bl	8005768 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <xPortStartScheduler+0xdc>)
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800560e:	f7ff ff93 	bl	8005538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005612:	f7ff f8dd 	bl	80047d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005616:	f7ff ff53 	bl	80054c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	e000e400 	.word	0xe000e400
 8005628:	20000d7c 	.word	0x20000d7c
 800562c:	20000d80 	.word	0x20000d80
 8005630:	e000ed20 	.word	0xe000ed20
 8005634:	2000000c 	.word	0x2000000c

08005638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <vPortEnterCritical+0x54>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	4a0d      	ldr	r2, [pc, #52]	; (800568c <vPortEnterCritical+0x54>)
 8005658:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <vPortEnterCritical+0x54>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10e      	bne.n	8005680 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005662:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <vPortEnterCritical+0x58>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <vPortEnterCritical+0x48>
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	e7fe      	b.n	800567e <vPortEnterCritical+0x46>
	}
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000000c 	.word	0x2000000c
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <vPortExitCritical+0x48>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <vPortExitCritical+0x22>
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	607b      	str	r3, [r7, #4]
 80056b4:	e7fe      	b.n	80056b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <vPortExitCritical+0x48>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4a07      	ldr	r2, [pc, #28]	; (80056dc <vPortExitCritical+0x48>)
 80056be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <vPortExitCritical+0x48>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <vPortExitCritical+0x3e>
 80056c8:	2300      	movs	r3, #0
 80056ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	2000000c 	.word	0x2000000c

080056e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056e0:	f3ef 8009 	mrs	r0, PSP
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <pxCurrentTCBConst>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056f0:	6010      	str	r0, [r2, #0]
 80056f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056fa:	f380 8811 	msr	BASEPRI, r0
 80056fe:	f7ff f867 	bl	80047d0 <vTaskSwitchContext>
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8811 	msr	BASEPRI, r0
 800570a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005716:	f380 8809 	msr	PSP, r0
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	4770      	bx	lr

08005720 <pxCurrentTCBConst>:
 8005720:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005740:	f7fe ff88 	bl	8004654 <xTaskIncrementTick>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <SysTick_Handler+0x3c>)
 800574c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <vPortSetupTimerInterrupt+0x30>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <vPortSetupTimerInterrupt+0x34>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <vPortSetupTimerInterrupt+0x38>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <vPortSetupTimerInterrupt+0x3c>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <vPortSetupTimerInterrupt+0x40>)
 8005786:	3b01      	subs	r3, #1
 8005788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <vPortSetupTimerInterrupt+0x30>)
 800578c:	2207      	movs	r2, #7
 800578e:	601a      	str	r2, [r3, #0]
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	e000e010 	.word	0xe000e010
 800579c:	e000e018 	.word	0xe000e018
 80057a0:	20000000 	.word	0x20000000
 80057a4:	10624dd3 	.word	0x10624dd3
 80057a8:	e000e014 	.word	0xe000e014

080057ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057b2:	f3ef 8305 	mrs	r3, IPSR
 80057b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d913      	bls.n	80057e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <vPortValidateInterruptPriority+0x68>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <vPortValidateInterruptPriority+0x6c>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	7afa      	ldrb	r2, [r7, #11]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d209      	bcs.n	80057e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	e7fe      	b.n	80057e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057e6:	4b0d      	ldr	r3, [pc, #52]	; (800581c <vPortValidateInterruptPriority+0x70>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <vPortValidateInterruptPriority+0x74>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d909      	bls.n	800580a <vPortValidateInterruptPriority+0x5e>
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	e7fe      	b.n	8005808 <vPortValidateInterruptPriority+0x5c>
	}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	e000e3f0 	.word	0xe000e3f0
 8005818:	20000d7c 	.word	0x20000d7c
 800581c:	e000ed0c 	.word	0xe000ed0c
 8005820:	20000d80 	.word	0x20000d80

08005824 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005830:	f7fe fe58 	bl	80044e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005834:	4b57      	ldr	r3, [pc, #348]	; (8005994 <pvPortMalloc+0x170>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800583c:	f000 f90c 	bl	8005a58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005840:	4b55      	ldr	r3, [pc, #340]	; (8005998 <pvPortMalloc+0x174>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	f040 808c 	bne.w	8005966 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01c      	beq.n	800588e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005854:	2208      	movs	r2, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	2b00      	cmp	r3, #0
 8005864:	d013      	beq.n	800588e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	3308      	adds	r3, #8
 800586e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <pvPortMalloc+0x6a>
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e7fe      	b.n	800588c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d068      	beq.n	8005966 <pvPortMalloc+0x142>
 8005894:	4b41      	ldr	r3, [pc, #260]	; (800599c <pvPortMalloc+0x178>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d863      	bhi.n	8005966 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800589e:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <pvPortMalloc+0x17c>)
 80058a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058a2:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <pvPortMalloc+0x17c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a8:	e004      	b.n	80058b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d903      	bls.n	80058c6 <pvPortMalloc+0xa2>
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f1      	bne.n	80058aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <pvPortMalloc+0x170>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d04a      	beq.n	8005966 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2208      	movs	r2, #8
 80058d6:	4413      	add	r3, r2
 80058d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	1ad2      	subs	r2, r2, r3
 80058ea:	2308      	movs	r3, #8
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d91e      	bls.n	8005930 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4413      	add	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <pvPortMalloc+0xf4>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	e7fe      	b.n	8005916 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800592a:	69b8      	ldr	r0, [r7, #24]
 800592c:	f000 f8f6 	bl	8005b1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <pvPortMalloc+0x178>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <pvPortMalloc+0x178>)
 800593c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800593e:	4b17      	ldr	r3, [pc, #92]	; (800599c <pvPortMalloc+0x178>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <pvPortMalloc+0x180>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d203      	bcs.n	8005952 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <pvPortMalloc+0x178>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <pvPortMalloc+0x180>)
 8005950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <pvPortMalloc+0x174>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	431a      	orrs	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005966:	f7fe fdcb 	bl	8004500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <pvPortMalloc+0x164>
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e7fe      	b.n	8005986 <pvPortMalloc+0x162>
	return pvReturn;
 8005988:	69fb      	ldr	r3, [r7, #28]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3728      	adds	r7, #40	; 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000198c 	.word	0x2000198c
 8005998:	20001998 	.word	0x20001998
 800599c:	20001990 	.word	0x20001990
 80059a0:	20001984 	.word	0x20001984
 80059a4:	20001994 	.word	0x20001994

080059a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d046      	beq.n	8005a48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059ba:	2308      	movs	r3, #8
 80059bc:	425b      	negs	r3, r3
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <vPortFree+0xa8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <vPortFree+0x42>
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e7fe      	b.n	80059e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <vPortFree+0x5e>
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	e7fe      	b.n	8005a04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <vPortFree+0xa8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d019      	beq.n	8005a48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d115      	bne.n	8005a48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortFree+0xa8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	401a      	ands	r2, r3
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a2c:	f7fe fd5a 	bl	80044e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <vPortFree+0xac>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4413      	add	r3, r2
 8005a3a:	4a06      	ldr	r2, [pc, #24]	; (8005a54 <vPortFree+0xac>)
 8005a3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a3e:	6938      	ldr	r0, [r7, #16]
 8005a40:	f000 f86c 	bl	8005b1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a44:	f7fe fd5c 	bl	8004500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20001998 	.word	0x20001998
 8005a54:	20001990 	.word	0x20001990

08005a58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a64:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <prvHeapInit+0xac>)
 8005a66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3307      	adds	r3, #7
 8005a76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <prvHeapInit+0xac>)
 8005a88:	4413      	add	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a90:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <prvHeapInit+0xb0>)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a96:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <prvHeapInit+0xb0>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0307 	bic.w	r3, r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <prvHeapInit+0xb4>)
 8005ab8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <prvHeapInit+0xb4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ac2:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <prvHeapInit+0xb4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <prvHeapInit+0xb4>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <prvHeapInit+0xb8>)
 8005ae6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <prvHeapInit+0xbc>)
 8005aee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005af0:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <prvHeapInit+0xc0>)
 8005af2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005af6:	601a      	str	r2, [r3, #0]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000d84 	.word	0x20000d84
 8005b08:	20001984 	.word	0x20001984
 8005b0c:	2000198c 	.word	0x2000198c
 8005b10:	20001994 	.word	0x20001994
 8005b14:	20001990 	.word	0x20001990
 8005b18:	20001998 	.word	0x20001998

08005b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b24:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <prvInsertBlockIntoFreeList+0xa8>)
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e002      	b.n	8005b30 <prvInsertBlockIntoFreeList+0x14>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d8f7      	bhi.n	8005b2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	4413      	add	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d108      	bne.n	8005b5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	441a      	add	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d118      	bne.n	8005ba4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <prvInsertBlockIntoFreeList+0xac>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d00d      	beq.n	8005b9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	441a      	add	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e008      	b.n	8005bac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <prvInsertBlockIntoFreeList+0xac>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e003      	b.n	8005bac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d002      	beq.n	8005bba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	20001984 	.word	0x20001984
 8005bc8:	2000198c 	.word	0x2000198c

08005bcc <__errno>:
 8005bcc:	4b01      	ldr	r3, [pc, #4]	; (8005bd4 <__errno+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000010 	.word	0x20000010

08005bd8 <__libc_init_array>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	2500      	movs	r5, #0
 8005bdc:	4e0c      	ldr	r6, [pc, #48]	; (8005c10 <__libc_init_array+0x38>)
 8005bde:	4c0d      	ldr	r4, [pc, #52]	; (8005c14 <__libc_init_array+0x3c>)
 8005be0:	1ba4      	subs	r4, r4, r6
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d109      	bne.n	8005bfc <__libc_init_array+0x24>
 8005be8:	f000 ff1c 	bl	8006a24 <_init>
 8005bec:	2500      	movs	r5, #0
 8005bee:	4e0a      	ldr	r6, [pc, #40]	; (8005c18 <__libc_init_array+0x40>)
 8005bf0:	4c0a      	ldr	r4, [pc, #40]	; (8005c1c <__libc_init_array+0x44>)
 8005bf2:	1ba4      	subs	r4, r4, r6
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	42a5      	cmp	r5, r4
 8005bf8:	d105      	bne.n	8005c06 <__libc_init_array+0x2e>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c00:	4798      	blx	r3
 8005c02:	3501      	adds	r5, #1
 8005c04:	e7ee      	b.n	8005be4 <__libc_init_array+0xc>
 8005c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c0a:	4798      	blx	r3
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	e7f2      	b.n	8005bf6 <__libc_init_array+0x1e>
 8005c10:	08006bd8 	.word	0x08006bd8
 8005c14:	08006bd8 	.word	0x08006bd8
 8005c18:	08006bd8 	.word	0x08006bd8
 8005c1c:	08006bdc 	.word	0x08006bdc

08005c20 <memcpy>:
 8005c20:	b510      	push	{r4, lr}
 8005c22:	1e43      	subs	r3, r0, #1
 8005c24:	440a      	add	r2, r1
 8005c26:	4291      	cmp	r1, r2
 8005c28:	d100      	bne.n	8005c2c <memcpy+0xc>
 8005c2a:	bd10      	pop	{r4, pc}
 8005c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c34:	e7f7      	b.n	8005c26 <memcpy+0x6>

08005c36 <memset>:
 8005c36:	4603      	mov	r3, r0
 8005c38:	4402      	add	r2, r0
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d100      	bne.n	8005c40 <memset+0xa>
 8005c3e:	4770      	bx	lr
 8005c40:	f803 1b01 	strb.w	r1, [r3], #1
 8005c44:	e7f9      	b.n	8005c3a <memset+0x4>
	...

08005c48 <iprintf>:
 8005c48:	b40f      	push	{r0, r1, r2, r3}
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <iprintf+0x2c>)
 8005c4c:	b513      	push	{r0, r1, r4, lr}
 8005c4e:	681c      	ldr	r4, [r3, #0]
 8005c50:	b124      	cbz	r4, 8005c5c <iprintf+0x14>
 8005c52:	69a3      	ldr	r3, [r4, #24]
 8005c54:	b913      	cbnz	r3, 8005c5c <iprintf+0x14>
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f84e 	bl	8005cf8 <__sinit>
 8005c5c:	ab05      	add	r3, sp, #20
 8005c5e:	9a04      	ldr	r2, [sp, #16]
 8005c60:	68a1      	ldr	r1, [r4, #8]
 8005c62:	4620      	mov	r0, r4
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	f000 f953 	bl	8005f10 <_vfiprintf_r>
 8005c6a:	b002      	add	sp, #8
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c70:	b004      	add	sp, #16
 8005c72:	4770      	bx	lr
 8005c74:	20000010 	.word	0x20000010

08005c78 <std>:
 8005c78:	2300      	movs	r3, #0
 8005c7a:	b510      	push	{r4, lr}
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c82:	6083      	str	r3, [r0, #8]
 8005c84:	8181      	strh	r1, [r0, #12]
 8005c86:	6643      	str	r3, [r0, #100]	; 0x64
 8005c88:	81c2      	strh	r2, [r0, #14]
 8005c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c8e:	6183      	str	r3, [r0, #24]
 8005c90:	4619      	mov	r1, r3
 8005c92:	2208      	movs	r2, #8
 8005c94:	305c      	adds	r0, #92	; 0x5c
 8005c96:	f7ff ffce 	bl	8005c36 <memset>
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <std+0x38>)
 8005c9c:	6224      	str	r4, [r4, #32]
 8005c9e:	6263      	str	r3, [r4, #36]	; 0x24
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <std+0x3c>)
 8005ca2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <std+0x40>)
 8005ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <std+0x44>)
 8005caa:	6323      	str	r3, [r4, #48]	; 0x30
 8005cac:	bd10      	pop	{r4, pc}
 8005cae:	bf00      	nop
 8005cb0:	0800646d 	.word	0x0800646d
 8005cb4:	0800648f 	.word	0x0800648f
 8005cb8:	080064c7 	.word	0x080064c7
 8005cbc:	080064eb 	.word	0x080064eb

08005cc0 <_cleanup_r>:
 8005cc0:	4901      	ldr	r1, [pc, #4]	; (8005cc8 <_cleanup_r+0x8>)
 8005cc2:	f000 b885 	b.w	8005dd0 <_fwalk_reent>
 8005cc6:	bf00      	nop
 8005cc8:	080067c5 	.word	0x080067c5

08005ccc <__sfmoreglue>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	2568      	movs	r5, #104	; 0x68
 8005cd0:	1e4a      	subs	r2, r1, #1
 8005cd2:	4355      	muls	r5, r2
 8005cd4:	460e      	mov	r6, r1
 8005cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cda:	f000 f897 	bl	8005e0c <_malloc_r>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	b140      	cbz	r0, 8005cf4 <__sfmoreglue+0x28>
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ce8:	300c      	adds	r0, #12
 8005cea:	60a0      	str	r0, [r4, #8]
 8005cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cf0:	f7ff ffa1 	bl	8005c36 <memset>
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}

08005cf8 <__sinit>:
 8005cf8:	6983      	ldr	r3, [r0, #24]
 8005cfa:	b510      	push	{r4, lr}
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	bb33      	cbnz	r3, 8005d4e <__sinit+0x56>
 8005d00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d04:	6503      	str	r3, [r0, #80]	; 0x50
 8005d06:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <__sinit+0x58>)
 8005d08:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <__sinit+0x5c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6282      	str	r2, [r0, #40]	; 0x28
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	bf04      	itt	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	6183      	streq	r3, [r0, #24]
 8005d16:	f000 f81f 	bl	8005d58 <__sfp>
 8005d1a:	6060      	str	r0, [r4, #4]
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 f81b 	bl	8005d58 <__sfp>
 8005d22:	60a0      	str	r0, [r4, #8]
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 f817 	bl	8005d58 <__sfp>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	60e0      	str	r0, [r4, #12]
 8005d2e:	2104      	movs	r1, #4
 8005d30:	6860      	ldr	r0, [r4, #4]
 8005d32:	f7ff ffa1 	bl	8005c78 <std>
 8005d36:	2201      	movs	r2, #1
 8005d38:	2109      	movs	r1, #9
 8005d3a:	68a0      	ldr	r0, [r4, #8]
 8005d3c:	f7ff ff9c 	bl	8005c78 <std>
 8005d40:	2202      	movs	r2, #2
 8005d42:	2112      	movs	r1, #18
 8005d44:	68e0      	ldr	r0, [r4, #12]
 8005d46:	f7ff ff97 	bl	8005c78 <std>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	61a3      	str	r3, [r4, #24]
 8005d4e:	bd10      	pop	{r4, pc}
 8005d50:	08006b40 	.word	0x08006b40
 8005d54:	08005cc1 	.word	0x08005cc1

08005d58 <__sfp>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <__sfp+0x70>)
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	681e      	ldr	r6, [r3, #0]
 8005d60:	69b3      	ldr	r3, [r6, #24]
 8005d62:	b913      	cbnz	r3, 8005d6a <__sfp+0x12>
 8005d64:	4630      	mov	r0, r6
 8005d66:	f7ff ffc7 	bl	8005cf8 <__sinit>
 8005d6a:	3648      	adds	r6, #72	; 0x48
 8005d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	d503      	bpl.n	8005d7c <__sfp+0x24>
 8005d74:	6833      	ldr	r3, [r6, #0]
 8005d76:	b133      	cbz	r3, 8005d86 <__sfp+0x2e>
 8005d78:	6836      	ldr	r6, [r6, #0]
 8005d7a:	e7f7      	b.n	8005d6c <__sfp+0x14>
 8005d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d80:	b16d      	cbz	r5, 8005d9e <__sfp+0x46>
 8005d82:	3468      	adds	r4, #104	; 0x68
 8005d84:	e7f4      	b.n	8005d70 <__sfp+0x18>
 8005d86:	2104      	movs	r1, #4
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7ff ff9f 	bl	8005ccc <__sfmoreglue>
 8005d8e:	6030      	str	r0, [r6, #0]
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d1f1      	bne.n	8005d78 <__sfp+0x20>
 8005d94:	230c      	movs	r3, #12
 8005d96:	4604      	mov	r4, r0
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <__sfp+0x74>)
 8005da0:	6665      	str	r5, [r4, #100]	; 0x64
 8005da2:	e9c4 5500 	strd	r5, r5, [r4]
 8005da6:	60a5      	str	r5, [r4, #8]
 8005da8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005dac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005db0:	2208      	movs	r2, #8
 8005db2:	4629      	mov	r1, r5
 8005db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005db8:	f7ff ff3d 	bl	8005c36 <memset>
 8005dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dc4:	e7e9      	b.n	8005d9a <__sfp+0x42>
 8005dc6:	bf00      	nop
 8005dc8:	08006b40 	.word	0x08006b40
 8005dcc:	ffff0001 	.word	0xffff0001

08005dd0 <_fwalk_reent>:
 8005dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	4689      	mov	r9, r1
 8005dd8:	2600      	movs	r6, #0
 8005dda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dde:	b914      	cbnz	r4, 8005de6 <_fwalk_reent+0x16>
 8005de0:	4630      	mov	r0, r6
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005dea:	3f01      	subs	r7, #1
 8005dec:	d501      	bpl.n	8005df2 <_fwalk_reent+0x22>
 8005dee:	6824      	ldr	r4, [r4, #0]
 8005df0:	e7f5      	b.n	8005dde <_fwalk_reent+0xe>
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d907      	bls.n	8005e08 <_fwalk_reent+0x38>
 8005df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	d003      	beq.n	8005e08 <_fwalk_reent+0x38>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4640      	mov	r0, r8
 8005e04:	47c8      	blx	r9
 8005e06:	4306      	orrs	r6, r0
 8005e08:	3568      	adds	r5, #104	; 0x68
 8005e0a:	e7ee      	b.n	8005dea <_fwalk_reent+0x1a>

08005e0c <_malloc_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	1ccd      	adds	r5, r1, #3
 8005e10:	f025 0503 	bic.w	r5, r5, #3
 8005e14:	3508      	adds	r5, #8
 8005e16:	2d0c      	cmp	r5, #12
 8005e18:	bf38      	it	cc
 8005e1a:	250c      	movcc	r5, #12
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	4606      	mov	r6, r0
 8005e20:	db01      	blt.n	8005e26 <_malloc_r+0x1a>
 8005e22:	42a9      	cmp	r1, r5
 8005e24:	d903      	bls.n	8005e2e <_malloc_r+0x22>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	bd70      	pop	{r4, r5, r6, pc}
 8005e2e:	f000 fd77 	bl	8006920 <__malloc_lock>
 8005e32:	4a21      	ldr	r2, [pc, #132]	; (8005eb8 <_malloc_r+0xac>)
 8005e34:	6814      	ldr	r4, [r2, #0]
 8005e36:	4621      	mov	r1, r4
 8005e38:	b991      	cbnz	r1, 8005e60 <_malloc_r+0x54>
 8005e3a:	4c20      	ldr	r4, [pc, #128]	; (8005ebc <_malloc_r+0xb0>)
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	b91b      	cbnz	r3, 8005e48 <_malloc_r+0x3c>
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fb03 	bl	800644c <_sbrk_r>
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 fafe 	bl	800644c <_sbrk_r>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d124      	bne.n	8005e9e <_malloc_r+0x92>
 8005e54:	230c      	movs	r3, #12
 8005e56:	4630      	mov	r0, r6
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	f000 fd62 	bl	8006922 <__malloc_unlock>
 8005e5e:	e7e4      	b.n	8005e2a <_malloc_r+0x1e>
 8005e60:	680b      	ldr	r3, [r1, #0]
 8005e62:	1b5b      	subs	r3, r3, r5
 8005e64:	d418      	bmi.n	8005e98 <_malloc_r+0x8c>
 8005e66:	2b0b      	cmp	r3, #11
 8005e68:	d90f      	bls.n	8005e8a <_malloc_r+0x7e>
 8005e6a:	600b      	str	r3, [r1, #0]
 8005e6c:	18cc      	adds	r4, r1, r3
 8005e6e:	50cd      	str	r5, [r1, r3]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 fd56 	bl	8006922 <__malloc_unlock>
 8005e76:	f104 000b 	add.w	r0, r4, #11
 8005e7a:	1d23      	adds	r3, r4, #4
 8005e7c:	f020 0007 	bic.w	r0, r0, #7
 8005e80:	1ac3      	subs	r3, r0, r3
 8005e82:	d0d3      	beq.n	8005e2c <_malloc_r+0x20>
 8005e84:	425a      	negs	r2, r3
 8005e86:	50e2      	str	r2, [r4, r3]
 8005e88:	e7d0      	b.n	8005e2c <_malloc_r+0x20>
 8005e8a:	684b      	ldr	r3, [r1, #4]
 8005e8c:	428c      	cmp	r4, r1
 8005e8e:	bf16      	itet	ne
 8005e90:	6063      	strne	r3, [r4, #4]
 8005e92:	6013      	streq	r3, [r2, #0]
 8005e94:	460c      	movne	r4, r1
 8005e96:	e7eb      	b.n	8005e70 <_malloc_r+0x64>
 8005e98:	460c      	mov	r4, r1
 8005e9a:	6849      	ldr	r1, [r1, #4]
 8005e9c:	e7cc      	b.n	8005e38 <_malloc_r+0x2c>
 8005e9e:	1cc4      	adds	r4, r0, #3
 8005ea0:	f024 0403 	bic.w	r4, r4, #3
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d005      	beq.n	8005eb4 <_malloc_r+0xa8>
 8005ea8:	1a21      	subs	r1, r4, r0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f000 face 	bl	800644c <_sbrk_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d0cf      	beq.n	8005e54 <_malloc_r+0x48>
 8005eb4:	6025      	str	r5, [r4, #0]
 8005eb6:	e7db      	b.n	8005e70 <_malloc_r+0x64>
 8005eb8:	2000199c 	.word	0x2000199c
 8005ebc:	200019a0 	.word	0x200019a0

08005ec0 <__sfputc_r>:
 8005ec0:	6893      	ldr	r3, [r2, #8]
 8005ec2:	b410      	push	{r4}
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	6093      	str	r3, [r2, #8]
 8005eca:	da07      	bge.n	8005edc <__sfputc_r+0x1c>
 8005ecc:	6994      	ldr	r4, [r2, #24]
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	db01      	blt.n	8005ed6 <__sfputc_r+0x16>
 8005ed2:	290a      	cmp	r1, #10
 8005ed4:	d102      	bne.n	8005edc <__sfputc_r+0x1c>
 8005ed6:	bc10      	pop	{r4}
 8005ed8:	f000 bb0c 	b.w	80064f4 <__swbuf_r>
 8005edc:	6813      	ldr	r3, [r2, #0]
 8005ede:	1c58      	adds	r0, r3, #1
 8005ee0:	6010      	str	r0, [r2, #0]
 8005ee2:	7019      	strb	r1, [r3, #0]
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	bc10      	pop	{r4}
 8005ee8:	4770      	bx	lr

08005eea <__sfputs_r>:
 8005eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	18d5      	adds	r5, r2, r3
 8005ef4:	42ac      	cmp	r4, r5
 8005ef6:	d101      	bne.n	8005efc <__sfputs_r+0x12>
 8005ef8:	2000      	movs	r0, #0
 8005efa:	e007      	b.n	8005f0c <__sfputs_r+0x22>
 8005efc:	463a      	mov	r2, r7
 8005efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7ff ffdc 	bl	8005ec0 <__sfputc_r>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d1f3      	bne.n	8005ef4 <__sfputs_r+0xa>
 8005f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f10 <_vfiprintf_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	b09d      	sub	sp, #116	; 0x74
 8005f18:	4617      	mov	r7, r2
 8005f1a:	461d      	mov	r5, r3
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	b118      	cbz	r0, 8005f28 <_vfiprintf_r+0x18>
 8005f20:	6983      	ldr	r3, [r0, #24]
 8005f22:	b90b      	cbnz	r3, 8005f28 <_vfiprintf_r+0x18>
 8005f24:	f7ff fee8 	bl	8005cf8 <__sinit>
 8005f28:	4b7c      	ldr	r3, [pc, #496]	; (800611c <_vfiprintf_r+0x20c>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d158      	bne.n	8005fe0 <_vfiprintf_r+0xd0>
 8005f2e:	6874      	ldr	r4, [r6, #4]
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	0718      	lsls	r0, r3, #28
 8005f34:	d55e      	bpl.n	8005ff4 <_vfiprintf_r+0xe4>
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d05b      	beq.n	8005ff4 <_vfiprintf_r+0xe4>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	2320      	movs	r3, #32
 8005f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f46:	2330      	movs	r3, #48	; 0x30
 8005f48:	f04f 0b01 	mov.w	fp, #1
 8005f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f50:	9503      	str	r5, [sp, #12]
 8005f52:	46b8      	mov	r8, r7
 8005f54:	4645      	mov	r5, r8
 8005f56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f5a:	b10b      	cbz	r3, 8005f60 <_vfiprintf_r+0x50>
 8005f5c:	2b25      	cmp	r3, #37	; 0x25
 8005f5e:	d154      	bne.n	800600a <_vfiprintf_r+0xfa>
 8005f60:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f64:	d00b      	beq.n	8005f7e <_vfiprintf_r+0x6e>
 8005f66:	4653      	mov	r3, sl
 8005f68:	463a      	mov	r2, r7
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f7ff ffbc 	bl	8005eea <__sfputs_r>
 8005f72:	3001      	adds	r0, #1
 8005f74:	f000 80c2 	beq.w	80060fc <_vfiprintf_r+0x1ec>
 8005f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7a:	4453      	add	r3, sl
 8005f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7e:	f898 3000 	ldrb.w	r3, [r8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80ba 	beq.w	80060fc <_vfiprintf_r+0x1ec>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	9307      	str	r3, [sp, #28]
 8005f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f9c:	46a8      	mov	r8, r5
 8005f9e:	2205      	movs	r2, #5
 8005fa0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005fa4:	485e      	ldr	r0, [pc, #376]	; (8006120 <_vfiprintf_r+0x210>)
 8005fa6:	f000 fcad 	bl	8006904 <memchr>
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	bb78      	cbnz	r0, 800600e <_vfiprintf_r+0xfe>
 8005fae:	06d9      	lsls	r1, r3, #27
 8005fb0:	bf44      	itt	mi
 8005fb2:	2220      	movmi	r2, #32
 8005fb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fb8:	071a      	lsls	r2, r3, #28
 8005fba:	bf44      	itt	mi
 8005fbc:	222b      	movmi	r2, #43	; 0x2b
 8005fbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fc2:	782a      	ldrb	r2, [r5, #0]
 8005fc4:	2a2a      	cmp	r2, #42	; 0x2a
 8005fc6:	d02a      	beq.n	800601e <_vfiprintf_r+0x10e>
 8005fc8:	46a8      	mov	r8, r5
 8005fca:	2000      	movs	r0, #0
 8005fcc:	250a      	movs	r5, #10
 8005fce:	9a07      	ldr	r2, [sp, #28]
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd6:	3b30      	subs	r3, #48	; 0x30
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d969      	bls.n	80060b0 <_vfiprintf_r+0x1a0>
 8005fdc:	b360      	cbz	r0, 8006038 <_vfiprintf_r+0x128>
 8005fde:	e024      	b.n	800602a <_vfiprintf_r+0x11a>
 8005fe0:	4b50      	ldr	r3, [pc, #320]	; (8006124 <_vfiprintf_r+0x214>)
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	d101      	bne.n	8005fea <_vfiprintf_r+0xda>
 8005fe6:	68b4      	ldr	r4, [r6, #8]
 8005fe8:	e7a2      	b.n	8005f30 <_vfiprintf_r+0x20>
 8005fea:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <_vfiprintf_r+0x218>)
 8005fec:	429c      	cmp	r4, r3
 8005fee:	bf08      	it	eq
 8005ff0:	68f4      	ldreq	r4, [r6, #12]
 8005ff2:	e79d      	b.n	8005f30 <_vfiprintf_r+0x20>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f000 fae0 	bl	80065bc <__swsetup_r>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d09d      	beq.n	8005f3c <_vfiprintf_r+0x2c>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006004:	b01d      	add	sp, #116	; 0x74
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	46a8      	mov	r8, r5
 800600c:	e7a2      	b.n	8005f54 <_vfiprintf_r+0x44>
 800600e:	4a44      	ldr	r2, [pc, #272]	; (8006120 <_vfiprintf_r+0x210>)
 8006010:	4645      	mov	r5, r8
 8006012:	1a80      	subs	r0, r0, r2
 8006014:	fa0b f000 	lsl.w	r0, fp, r0
 8006018:	4318      	orrs	r0, r3
 800601a:	9004      	str	r0, [sp, #16]
 800601c:	e7be      	b.n	8005f9c <_vfiprintf_r+0x8c>
 800601e:	9a03      	ldr	r2, [sp, #12]
 8006020:	1d11      	adds	r1, r2, #4
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	9103      	str	r1, [sp, #12]
 8006026:	2a00      	cmp	r2, #0
 8006028:	db01      	blt.n	800602e <_vfiprintf_r+0x11e>
 800602a:	9207      	str	r2, [sp, #28]
 800602c:	e004      	b.n	8006038 <_vfiprintf_r+0x128>
 800602e:	4252      	negs	r2, r2
 8006030:	f043 0302 	orr.w	r3, r3, #2
 8006034:	9207      	str	r2, [sp, #28]
 8006036:	9304      	str	r3, [sp, #16]
 8006038:	f898 3000 	ldrb.w	r3, [r8]
 800603c:	2b2e      	cmp	r3, #46	; 0x2e
 800603e:	d10e      	bne.n	800605e <_vfiprintf_r+0x14e>
 8006040:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006044:	2b2a      	cmp	r3, #42	; 0x2a
 8006046:	d138      	bne.n	80060ba <_vfiprintf_r+0x1aa>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	f108 0802 	add.w	r8, r8, #2
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	9203      	str	r2, [sp, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	bfb8      	it	lt
 8006058:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	4d33      	ldr	r5, [pc, #204]	; (800612c <_vfiprintf_r+0x21c>)
 8006060:	2203      	movs	r2, #3
 8006062:	f898 1000 	ldrb.w	r1, [r8]
 8006066:	4628      	mov	r0, r5
 8006068:	f000 fc4c 	bl	8006904 <memchr>
 800606c:	b140      	cbz	r0, 8006080 <_vfiprintf_r+0x170>
 800606e:	2340      	movs	r3, #64	; 0x40
 8006070:	1b40      	subs	r0, r0, r5
 8006072:	fa03 f000 	lsl.w	r0, r3, r0
 8006076:	9b04      	ldr	r3, [sp, #16]
 8006078:	f108 0801 	add.w	r8, r8, #1
 800607c:	4303      	orrs	r3, r0
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	f898 1000 	ldrb.w	r1, [r8]
 8006084:	2206      	movs	r2, #6
 8006086:	482a      	ldr	r0, [pc, #168]	; (8006130 <_vfiprintf_r+0x220>)
 8006088:	f108 0701 	add.w	r7, r8, #1
 800608c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006090:	f000 fc38 	bl	8006904 <memchr>
 8006094:	2800      	cmp	r0, #0
 8006096:	d037      	beq.n	8006108 <_vfiprintf_r+0x1f8>
 8006098:	4b26      	ldr	r3, [pc, #152]	; (8006134 <_vfiprintf_r+0x224>)
 800609a:	bb1b      	cbnz	r3, 80060e4 <_vfiprintf_r+0x1d4>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	3307      	adds	r3, #7
 80060a0:	f023 0307 	bic.w	r3, r3, #7
 80060a4:	3308      	adds	r3, #8
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060aa:	444b      	add	r3, r9
 80060ac:	9309      	str	r3, [sp, #36]	; 0x24
 80060ae:	e750      	b.n	8005f52 <_vfiprintf_r+0x42>
 80060b0:	fb05 3202 	mla	r2, r5, r2, r3
 80060b4:	2001      	movs	r0, #1
 80060b6:	4688      	mov	r8, r1
 80060b8:	e78a      	b.n	8005fd0 <_vfiprintf_r+0xc0>
 80060ba:	2300      	movs	r3, #0
 80060bc:	250a      	movs	r5, #10
 80060be:	4619      	mov	r1, r3
 80060c0:	f108 0801 	add.w	r8, r8, #1
 80060c4:	9305      	str	r3, [sp, #20]
 80060c6:	4640      	mov	r0, r8
 80060c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060cc:	3a30      	subs	r2, #48	; 0x30
 80060ce:	2a09      	cmp	r2, #9
 80060d0:	d903      	bls.n	80060da <_vfiprintf_r+0x1ca>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0c3      	beq.n	800605e <_vfiprintf_r+0x14e>
 80060d6:	9105      	str	r1, [sp, #20]
 80060d8:	e7c1      	b.n	800605e <_vfiprintf_r+0x14e>
 80060da:	fb05 2101 	mla	r1, r5, r1, r2
 80060de:	2301      	movs	r3, #1
 80060e0:	4680      	mov	r8, r0
 80060e2:	e7f0      	b.n	80060c6 <_vfiprintf_r+0x1b6>
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4622      	mov	r2, r4
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <_vfiprintf_r+0x228>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4630      	mov	r0, r6
 80060f0:	f3af 8000 	nop.w
 80060f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80060f8:	4681      	mov	r9, r0
 80060fa:	d1d5      	bne.n	80060a8 <_vfiprintf_r+0x198>
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	065b      	lsls	r3, r3, #25
 8006100:	f53f af7e 	bmi.w	8006000 <_vfiprintf_r+0xf0>
 8006104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006106:	e77d      	b.n	8006004 <_vfiprintf_r+0xf4>
 8006108:	ab03      	add	r3, sp, #12
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4622      	mov	r2, r4
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <_vfiprintf_r+0x228>)
 8006110:	a904      	add	r1, sp, #16
 8006112:	4630      	mov	r0, r6
 8006114:	f000 f888 	bl	8006228 <_printf_i>
 8006118:	e7ec      	b.n	80060f4 <_vfiprintf_r+0x1e4>
 800611a:	bf00      	nop
 800611c:	08006b64 	.word	0x08006b64
 8006120:	08006ba4 	.word	0x08006ba4
 8006124:	08006b84 	.word	0x08006b84
 8006128:	08006b44 	.word	0x08006b44
 800612c:	08006baa 	.word	0x08006baa
 8006130:	08006bae 	.word	0x08006bae
 8006134:	00000000 	.word	0x00000000
 8006138:	08005eeb 	.word	0x08005eeb

0800613c <_printf_common>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	4691      	mov	r9, r2
 8006142:	461f      	mov	r7, r3
 8006144:	688a      	ldr	r2, [r1, #8]
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4606      	mov	r6, r0
 800614a:	4293      	cmp	r3, r2
 800614c:	bfb8      	it	lt
 800614e:	4613      	movlt	r3, r2
 8006150:	f8c9 3000 	str.w	r3, [r9]
 8006154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006158:	460c      	mov	r4, r1
 800615a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800615e:	b112      	cbz	r2, 8006166 <_printf_common+0x2a>
 8006160:	3301      	adds	r3, #1
 8006162:	f8c9 3000 	str.w	r3, [r9]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	0699      	lsls	r1, r3, #26
 800616a:	bf42      	ittt	mi
 800616c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006170:	3302      	addmi	r3, #2
 8006172:	f8c9 3000 	strmi.w	r3, [r9]
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	f015 0506 	ands.w	r5, r5, #6
 800617c:	d107      	bne.n	800618e <_printf_common+0x52>
 800617e:	f104 0a19 	add.w	sl, r4, #25
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	f8d9 2000 	ldr.w	r2, [r9]
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	42ab      	cmp	r3, r5
 800618c:	dc29      	bgt.n	80061e2 <_printf_common+0xa6>
 800618e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	3300      	adds	r3, #0
 8006196:	bf18      	it	ne
 8006198:	2301      	movne	r3, #1
 800619a:	0692      	lsls	r2, r2, #26
 800619c:	d42e      	bmi.n	80061fc <_printf_common+0xc0>
 800619e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a2:	4639      	mov	r1, r7
 80061a4:	4630      	mov	r0, r6
 80061a6:	47c0      	blx	r8
 80061a8:	3001      	adds	r0, #1
 80061aa:	d021      	beq.n	80061f0 <_printf_common+0xb4>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	68e5      	ldr	r5, [r4, #12]
 80061b0:	f003 0306 	and.w	r3, r3, #6
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	bf18      	it	ne
 80061b8:	2500      	movne	r5, #0
 80061ba:	f8d9 2000 	ldr.w	r2, [r9]
 80061be:	f04f 0900 	mov.w	r9, #0
 80061c2:	bf08      	it	eq
 80061c4:	1aad      	subeq	r5, r5, r2
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	6922      	ldr	r2, [r4, #16]
 80061ca:	bf08      	it	eq
 80061cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfc4      	itt	gt
 80061d4:	1a9b      	subgt	r3, r3, r2
 80061d6:	18ed      	addgt	r5, r5, r3
 80061d8:	341a      	adds	r4, #26
 80061da:	454d      	cmp	r5, r9
 80061dc:	d11a      	bne.n	8006214 <_printf_common+0xd8>
 80061de:	2000      	movs	r0, #0
 80061e0:	e008      	b.n	80061f4 <_printf_common+0xb8>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4652      	mov	r2, sl
 80061e6:	4639      	mov	r1, r7
 80061e8:	4630      	mov	r0, r6
 80061ea:	47c0      	blx	r8
 80061ec:	3001      	adds	r0, #1
 80061ee:	d103      	bne.n	80061f8 <_printf_common+0xbc>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	3501      	adds	r5, #1
 80061fa:	e7c2      	b.n	8006182 <_printf_common+0x46>
 80061fc:	2030      	movs	r0, #48	; 0x30
 80061fe:	18e1      	adds	r1, r4, r3
 8006200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800620a:	4422      	add	r2, r4
 800620c:	3302      	adds	r3, #2
 800620e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006212:	e7c4      	b.n	800619e <_printf_common+0x62>
 8006214:	2301      	movs	r3, #1
 8006216:	4622      	mov	r2, r4
 8006218:	4639      	mov	r1, r7
 800621a:	4630      	mov	r0, r6
 800621c:	47c0      	blx	r8
 800621e:	3001      	adds	r0, #1
 8006220:	d0e6      	beq.n	80061f0 <_printf_common+0xb4>
 8006222:	f109 0901 	add.w	r9, r9, #1
 8006226:	e7d8      	b.n	80061da <_printf_common+0x9e>

08006228 <_printf_i>:
 8006228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800622c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006230:	460c      	mov	r4, r1
 8006232:	7e09      	ldrb	r1, [r1, #24]
 8006234:	b085      	sub	sp, #20
 8006236:	296e      	cmp	r1, #110	; 0x6e
 8006238:	4617      	mov	r7, r2
 800623a:	4606      	mov	r6, r0
 800623c:	4698      	mov	r8, r3
 800623e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006240:	f000 80b3 	beq.w	80063aa <_printf_i+0x182>
 8006244:	d822      	bhi.n	800628c <_printf_i+0x64>
 8006246:	2963      	cmp	r1, #99	; 0x63
 8006248:	d036      	beq.n	80062b8 <_printf_i+0x90>
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x3a>
 800624c:	2900      	cmp	r1, #0
 800624e:	f000 80b9 	beq.w	80063c4 <_printf_i+0x19c>
 8006252:	2958      	cmp	r1, #88	; 0x58
 8006254:	f000 8083 	beq.w	800635e <_printf_i+0x136>
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006260:	e032      	b.n	80062c8 <_printf_i+0xa0>
 8006262:	2964      	cmp	r1, #100	; 0x64
 8006264:	d001      	beq.n	800626a <_printf_i+0x42>
 8006266:	2969      	cmp	r1, #105	; 0x69
 8006268:	d1f6      	bne.n	8006258 <_printf_i+0x30>
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	0605      	lsls	r5, r0, #24
 8006270:	f103 0104 	add.w	r1, r3, #4
 8006274:	d52a      	bpl.n	80062cc <_printf_i+0xa4>
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da03      	bge.n	8006286 <_printf_i+0x5e>
 800627e:	222d      	movs	r2, #45	; 0x2d
 8006280:	425b      	negs	r3, r3
 8006282:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006286:	486f      	ldr	r0, [pc, #444]	; (8006444 <_printf_i+0x21c>)
 8006288:	220a      	movs	r2, #10
 800628a:	e039      	b.n	8006300 <_printf_i+0xd8>
 800628c:	2973      	cmp	r1, #115	; 0x73
 800628e:	f000 809d 	beq.w	80063cc <_printf_i+0x1a4>
 8006292:	d808      	bhi.n	80062a6 <_printf_i+0x7e>
 8006294:	296f      	cmp	r1, #111	; 0x6f
 8006296:	d020      	beq.n	80062da <_printf_i+0xb2>
 8006298:	2970      	cmp	r1, #112	; 0x70
 800629a:	d1dd      	bne.n	8006258 <_printf_i+0x30>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	f043 0320 	orr.w	r3, r3, #32
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	e003      	b.n	80062ae <_printf_i+0x86>
 80062a6:	2975      	cmp	r1, #117	; 0x75
 80062a8:	d017      	beq.n	80062da <_printf_i+0xb2>
 80062aa:	2978      	cmp	r1, #120	; 0x78
 80062ac:	d1d4      	bne.n	8006258 <_printf_i+0x30>
 80062ae:	2378      	movs	r3, #120	; 0x78
 80062b0:	4865      	ldr	r0, [pc, #404]	; (8006448 <_printf_i+0x220>)
 80062b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b6:	e055      	b.n	8006364 <_printf_i+0x13c>
 80062b8:	6813      	ldr	r3, [r2, #0]
 80062ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062be:	1d19      	adds	r1, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6011      	str	r1, [r2, #0]
 80062c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c8:	2301      	movs	r3, #1
 80062ca:	e08c      	b.n	80063e6 <_printf_i+0x1be>
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062d2:	6011      	str	r1, [r2, #0]
 80062d4:	bf18      	it	ne
 80062d6:	b21b      	sxthne	r3, r3
 80062d8:	e7cf      	b.n	800627a <_printf_i+0x52>
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	6825      	ldr	r5, [r4, #0]
 80062de:	1d18      	adds	r0, r3, #4
 80062e0:	6010      	str	r0, [r2, #0]
 80062e2:	0628      	lsls	r0, r5, #24
 80062e4:	d501      	bpl.n	80062ea <_printf_i+0xc2>
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	e002      	b.n	80062f0 <_printf_i+0xc8>
 80062ea:	0668      	lsls	r0, r5, #25
 80062ec:	d5fb      	bpl.n	80062e6 <_printf_i+0xbe>
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	296f      	cmp	r1, #111	; 0x6f
 80062f2:	bf14      	ite	ne
 80062f4:	220a      	movne	r2, #10
 80062f6:	2208      	moveq	r2, #8
 80062f8:	4852      	ldr	r0, [pc, #328]	; (8006444 <_printf_i+0x21c>)
 80062fa:	2100      	movs	r1, #0
 80062fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006300:	6865      	ldr	r5, [r4, #4]
 8006302:	2d00      	cmp	r5, #0
 8006304:	60a5      	str	r5, [r4, #8]
 8006306:	f2c0 8095 	blt.w	8006434 <_printf_i+0x20c>
 800630a:	6821      	ldr	r1, [r4, #0]
 800630c:	f021 0104 	bic.w	r1, r1, #4
 8006310:	6021      	str	r1, [r4, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13d      	bne.n	8006392 <_printf_i+0x16a>
 8006316:	2d00      	cmp	r5, #0
 8006318:	f040 808e 	bne.w	8006438 <_printf_i+0x210>
 800631c:	4665      	mov	r5, ip
 800631e:	2a08      	cmp	r2, #8
 8006320:	d10b      	bne.n	800633a <_printf_i+0x112>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	07db      	lsls	r3, r3, #31
 8006326:	d508      	bpl.n	800633a <_printf_i+0x112>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	6862      	ldr	r2, [r4, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	bfde      	ittt	le
 8006330:	2330      	movle	r3, #48	; 0x30
 8006332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006336:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800633a:	ebac 0305 	sub.w	r3, ip, r5
 800633e:	6123      	str	r3, [r4, #16]
 8006340:	f8cd 8000 	str.w	r8, [sp]
 8006344:	463b      	mov	r3, r7
 8006346:	aa03      	add	r2, sp, #12
 8006348:	4621      	mov	r1, r4
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff fef6 	bl	800613c <_printf_common>
 8006350:	3001      	adds	r0, #1
 8006352:	d14d      	bne.n	80063f0 <_printf_i+0x1c8>
 8006354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006358:	b005      	add	sp, #20
 800635a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800635e:	4839      	ldr	r0, [pc, #228]	; (8006444 <_printf_i+0x21c>)
 8006360:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006364:	6813      	ldr	r3, [r2, #0]
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1d1d      	adds	r5, r3, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6015      	str	r5, [r2, #0]
 800636e:	060a      	lsls	r2, r1, #24
 8006370:	d50b      	bpl.n	800638a <_printf_i+0x162>
 8006372:	07ca      	lsls	r2, r1, #31
 8006374:	bf44      	itt	mi
 8006376:	f041 0120 	orrmi.w	r1, r1, #32
 800637a:	6021      	strmi	r1, [r4, #0]
 800637c:	b91b      	cbnz	r3, 8006386 <_printf_i+0x15e>
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	f022 0220 	bic.w	r2, r2, #32
 8006384:	6022      	str	r2, [r4, #0]
 8006386:	2210      	movs	r2, #16
 8006388:	e7b7      	b.n	80062fa <_printf_i+0xd2>
 800638a:	064d      	lsls	r5, r1, #25
 800638c:	bf48      	it	mi
 800638e:	b29b      	uxthmi	r3, r3
 8006390:	e7ef      	b.n	8006372 <_printf_i+0x14a>
 8006392:	4665      	mov	r5, ip
 8006394:	fbb3 f1f2 	udiv	r1, r3, r2
 8006398:	fb02 3311 	mls	r3, r2, r1, r3
 800639c:	5cc3      	ldrb	r3, [r0, r3]
 800639e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063a2:	460b      	mov	r3, r1
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d1f5      	bne.n	8006394 <_printf_i+0x16c>
 80063a8:	e7b9      	b.n	800631e <_printf_i+0xf6>
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	6825      	ldr	r5, [r4, #0]
 80063ae:	1d18      	adds	r0, r3, #4
 80063b0:	6961      	ldr	r1, [r4, #20]
 80063b2:	6010      	str	r0, [r2, #0]
 80063b4:	0628      	lsls	r0, r5, #24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	d501      	bpl.n	80063be <_printf_i+0x196>
 80063ba:	6019      	str	r1, [r3, #0]
 80063bc:	e002      	b.n	80063c4 <_printf_i+0x19c>
 80063be:	066a      	lsls	r2, r5, #25
 80063c0:	d5fb      	bpl.n	80063ba <_printf_i+0x192>
 80063c2:	8019      	strh	r1, [r3, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	4665      	mov	r5, ip
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	e7b9      	b.n	8006340 <_printf_i+0x118>
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	1d19      	adds	r1, r3, #4
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	681d      	ldr	r5, [r3, #0]
 80063d4:	6862      	ldr	r2, [r4, #4]
 80063d6:	2100      	movs	r1, #0
 80063d8:	4628      	mov	r0, r5
 80063da:	f000 fa93 	bl	8006904 <memchr>
 80063de:	b108      	cbz	r0, 80063e4 <_printf_i+0x1bc>
 80063e0:	1b40      	subs	r0, r0, r5
 80063e2:	6060      	str	r0, [r4, #4]
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	2300      	movs	r3, #0
 80063ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ee:	e7a7      	b.n	8006340 <_printf_i+0x118>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	462a      	mov	r2, r5
 80063f4:	4639      	mov	r1, r7
 80063f6:	4630      	mov	r0, r6
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d0aa      	beq.n	8006354 <_printf_i+0x12c>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	079b      	lsls	r3, r3, #30
 8006402:	d413      	bmi.n	800642c <_printf_i+0x204>
 8006404:	68e0      	ldr	r0, [r4, #12]
 8006406:	9b03      	ldr	r3, [sp, #12]
 8006408:	4298      	cmp	r0, r3
 800640a:	bfb8      	it	lt
 800640c:	4618      	movlt	r0, r3
 800640e:	e7a3      	b.n	8006358 <_printf_i+0x130>
 8006410:	2301      	movs	r3, #1
 8006412:	464a      	mov	r2, r9
 8006414:	4639      	mov	r1, r7
 8006416:	4630      	mov	r0, r6
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d09a      	beq.n	8006354 <_printf_i+0x12c>
 800641e:	3501      	adds	r5, #1
 8006420:	68e3      	ldr	r3, [r4, #12]
 8006422:	9a03      	ldr	r2, [sp, #12]
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	42ab      	cmp	r3, r5
 8006428:	dcf2      	bgt.n	8006410 <_printf_i+0x1e8>
 800642a:	e7eb      	b.n	8006404 <_printf_i+0x1dc>
 800642c:	2500      	movs	r5, #0
 800642e:	f104 0919 	add.w	r9, r4, #25
 8006432:	e7f5      	b.n	8006420 <_printf_i+0x1f8>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ac      	bne.n	8006392 <_printf_i+0x16a>
 8006438:	7803      	ldrb	r3, [r0, #0]
 800643a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800643e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006442:	e76c      	b.n	800631e <_printf_i+0xf6>
 8006444:	08006bb5 	.word	0x08006bb5
 8006448:	08006bc6 	.word	0x08006bc6

0800644c <_sbrk_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	2300      	movs	r3, #0
 8006450:	4c05      	ldr	r4, [pc, #20]	; (8006468 <_sbrk_r+0x1c>)
 8006452:	4605      	mov	r5, r0
 8006454:	4608      	mov	r0, r1
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	f7fa fa6e 	bl	8000938 <_sbrk>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_sbrk_r+0x1a>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	b103      	cbz	r3, 8006466 <_sbrk_r+0x1a>
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20001ab8 	.word	0x20001ab8

0800646c <__sread>:
 800646c:	b510      	push	{r4, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006474:	f000 faa2 	bl	80069bc <_read_r>
 8006478:	2800      	cmp	r0, #0
 800647a:	bfab      	itete	ge
 800647c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800647e:	89a3      	ldrhlt	r3, [r4, #12]
 8006480:	181b      	addge	r3, r3, r0
 8006482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006486:	bfac      	ite	ge
 8006488:	6563      	strge	r3, [r4, #84]	; 0x54
 800648a:	81a3      	strhlt	r3, [r4, #12]
 800648c:	bd10      	pop	{r4, pc}

0800648e <__swrite>:
 800648e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	461f      	mov	r7, r3
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	4605      	mov	r5, r0
 8006498:	05db      	lsls	r3, r3, #23
 800649a:	460c      	mov	r4, r1
 800649c:	4616      	mov	r6, r2
 800649e:	d505      	bpl.n	80064ac <__swrite+0x1e>
 80064a0:	2302      	movs	r3, #2
 80064a2:	2200      	movs	r2, #0
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	f000 f9b6 	bl	8006818 <_lseek_r>
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	4632      	mov	r2, r6
 80064b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ba:	463b      	mov	r3, r7
 80064bc:	4628      	mov	r0, r5
 80064be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	f000 b869 	b.w	8006598 <_write_r>

080064c6 <__sseek>:
 80064c6:	b510      	push	{r4, lr}
 80064c8:	460c      	mov	r4, r1
 80064ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ce:	f000 f9a3 	bl	8006818 <_lseek_r>
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	bf15      	itete	ne
 80064d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064e2:	81a3      	strheq	r3, [r4, #12]
 80064e4:	bf18      	it	ne
 80064e6:	81a3      	strhne	r3, [r4, #12]
 80064e8:	bd10      	pop	{r4, pc}

080064ea <__sclose>:
 80064ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ee:	f000 b8d3 	b.w	8006698 <_close_r>
	...

080064f4 <__swbuf_r>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	460e      	mov	r6, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	4605      	mov	r5, r0
 80064fc:	b118      	cbz	r0, 8006506 <__swbuf_r+0x12>
 80064fe:	6983      	ldr	r3, [r0, #24]
 8006500:	b90b      	cbnz	r3, 8006506 <__swbuf_r+0x12>
 8006502:	f7ff fbf9 	bl	8005cf8 <__sinit>
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <__swbuf_r+0x98>)
 8006508:	429c      	cmp	r4, r3
 800650a:	d12a      	bne.n	8006562 <__swbuf_r+0x6e>
 800650c:	686c      	ldr	r4, [r5, #4]
 800650e:	69a3      	ldr	r3, [r4, #24]
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	071a      	lsls	r2, r3, #28
 8006516:	d52e      	bpl.n	8006576 <__swbuf_r+0x82>
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	b363      	cbz	r3, 8006576 <__swbuf_r+0x82>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	b2f6      	uxtb	r6, r6
 8006522:	1ac0      	subs	r0, r0, r3
 8006524:	6963      	ldr	r3, [r4, #20]
 8006526:	4637      	mov	r7, r6
 8006528:	4283      	cmp	r3, r0
 800652a:	dc04      	bgt.n	8006536 <__swbuf_r+0x42>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f000 f948 	bl	80067c4 <_fflush_r>
 8006534:	bb28      	cbnz	r0, 8006582 <__swbuf_r+0x8e>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	3001      	adds	r0, #1
 800653a:	3b01      	subs	r3, #1
 800653c:	60a3      	str	r3, [r4, #8]
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	701e      	strb	r6, [r3, #0]
 8006546:	6963      	ldr	r3, [r4, #20]
 8006548:	4283      	cmp	r3, r0
 800654a:	d004      	beq.n	8006556 <__swbuf_r+0x62>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	07db      	lsls	r3, r3, #31
 8006550:	d519      	bpl.n	8006586 <__swbuf_r+0x92>
 8006552:	2e0a      	cmp	r6, #10
 8006554:	d117      	bne.n	8006586 <__swbuf_r+0x92>
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f933 	bl	80067c4 <_fflush_r>
 800655e:	b190      	cbz	r0, 8006586 <__swbuf_r+0x92>
 8006560:	e00f      	b.n	8006582 <__swbuf_r+0x8e>
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <__swbuf_r+0x9c>)
 8006564:	429c      	cmp	r4, r3
 8006566:	d101      	bne.n	800656c <__swbuf_r+0x78>
 8006568:	68ac      	ldr	r4, [r5, #8]
 800656a:	e7d0      	b.n	800650e <__swbuf_r+0x1a>
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <__swbuf_r+0xa0>)
 800656e:	429c      	cmp	r4, r3
 8006570:	bf08      	it	eq
 8006572:	68ec      	ldreq	r4, [r5, #12]
 8006574:	e7cb      	b.n	800650e <__swbuf_r+0x1a>
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f81f 	bl	80065bc <__swsetup_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	d0cc      	beq.n	800651c <__swbuf_r+0x28>
 8006582:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006586:	4638      	mov	r0, r7
 8006588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658a:	bf00      	nop
 800658c:	08006b64 	.word	0x08006b64
 8006590:	08006b84 	.word	0x08006b84
 8006594:	08006b44 	.word	0x08006b44

08006598 <_write_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4605      	mov	r5, r0
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	2200      	movs	r2, #0
 80065a2:	4c05      	ldr	r4, [pc, #20]	; (80065b8 <_write_r+0x20>)
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f7f9 fdf8 	bl	800019c <_write>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_write_r+0x1e>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_write_r+0x1e>
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	20001ab8 	.word	0x20001ab8

080065bc <__swsetup_r>:
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <__swsetup_r+0xcc>)
 80065be:	b570      	push	{r4, r5, r6, lr}
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	b125      	cbz	r5, 80065d2 <__swsetup_r+0x16>
 80065c8:	69ab      	ldr	r3, [r5, #24]
 80065ca:	b913      	cbnz	r3, 80065d2 <__swsetup_r+0x16>
 80065cc:	4628      	mov	r0, r5
 80065ce:	f7ff fb93 	bl	8005cf8 <__sinit>
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <__swsetup_r+0xd0>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d10f      	bne.n	80065f8 <__swsetup_r+0x3c>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	0715      	lsls	r5, r2, #28
 80065e2:	d42c      	bmi.n	800663e <__swsetup_r+0x82>
 80065e4:	06d0      	lsls	r0, r2, #27
 80065e6:	d411      	bmi.n	800660c <__swsetup_r+0x50>
 80065e8:	2209      	movs	r2, #9
 80065ea:	6032      	str	r2, [r6, #0]
 80065ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f6:	e03e      	b.n	8006676 <__swsetup_r+0xba>
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <__swsetup_r+0xd4>)
 80065fa:	429c      	cmp	r4, r3
 80065fc:	d101      	bne.n	8006602 <__swsetup_r+0x46>
 80065fe:	68ac      	ldr	r4, [r5, #8]
 8006600:	e7eb      	b.n	80065da <__swsetup_r+0x1e>
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <__swsetup_r+0xd8>)
 8006604:	429c      	cmp	r4, r3
 8006606:	bf08      	it	eq
 8006608:	68ec      	ldreq	r4, [r5, #12]
 800660a:	e7e6      	b.n	80065da <__swsetup_r+0x1e>
 800660c:	0751      	lsls	r1, r2, #29
 800660e:	d512      	bpl.n	8006636 <__swsetup_r+0x7a>
 8006610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006612:	b141      	cbz	r1, 8006626 <__swsetup_r+0x6a>
 8006614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006618:	4299      	cmp	r1, r3
 800661a:	d002      	beq.n	8006622 <__swsetup_r+0x66>
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f981 	bl	8006924 <_free_r>
 8006622:	2300      	movs	r3, #0
 8006624:	6363      	str	r3, [r4, #52]	; 0x34
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800662c:	81a3      	strh	r3, [r4, #12]
 800662e:	2300      	movs	r3, #0
 8006630:	6063      	str	r3, [r4, #4]
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f043 0308 	orr.w	r3, r3, #8
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	b94b      	cbnz	r3, 8006656 <__swsetup_r+0x9a>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d003      	beq.n	8006656 <__swsetup_r+0x9a>
 800664e:	4621      	mov	r1, r4
 8006650:	4630      	mov	r0, r6
 8006652:	f000 f917 	bl	8006884 <__smakebuf_r>
 8006656:	89a2      	ldrh	r2, [r4, #12]
 8006658:	f012 0301 	ands.w	r3, r2, #1
 800665c:	d00c      	beq.n	8006678 <__swsetup_r+0xbc>
 800665e:	2300      	movs	r3, #0
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	6963      	ldr	r3, [r4, #20]
 8006664:	425b      	negs	r3, r3
 8006666:	61a3      	str	r3, [r4, #24]
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	b953      	cbnz	r3, 8006682 <__swsetup_r+0xc6>
 800666c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006670:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006674:	d1ba      	bne.n	80065ec <__swsetup_r+0x30>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	0792      	lsls	r2, r2, #30
 800667a:	bf58      	it	pl
 800667c:	6963      	ldrpl	r3, [r4, #20]
 800667e:	60a3      	str	r3, [r4, #8]
 8006680:	e7f2      	b.n	8006668 <__swsetup_r+0xac>
 8006682:	2000      	movs	r0, #0
 8006684:	e7f7      	b.n	8006676 <__swsetup_r+0xba>
 8006686:	bf00      	nop
 8006688:	20000010 	.word	0x20000010
 800668c:	08006b64 	.word	0x08006b64
 8006690:	08006b84 	.word	0x08006b84
 8006694:	08006b44 	.word	0x08006b44

08006698 <_close_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	2300      	movs	r3, #0
 800669c:	4c05      	ldr	r4, [pc, #20]	; (80066b4 <_close_r+0x1c>)
 800669e:	4605      	mov	r5, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	f7fa f917 	bl	80008d6 <_close>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_close_r+0x1a>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_close_r+0x1a>
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	20001ab8 	.word	0x20001ab8

080066b8 <__sflush_r>:
 80066b8:	898a      	ldrh	r2, [r1, #12]
 80066ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	0710      	lsls	r0, r2, #28
 80066c2:	460c      	mov	r4, r1
 80066c4:	d458      	bmi.n	8006778 <__sflush_r+0xc0>
 80066c6:	684b      	ldr	r3, [r1, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dc05      	bgt.n	80066d8 <__sflush_r+0x20>
 80066cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dc02      	bgt.n	80066d8 <__sflush_r+0x20>
 80066d2:	2000      	movs	r0, #0
 80066d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066da:	2e00      	cmp	r6, #0
 80066dc:	d0f9      	beq.n	80066d2 <__sflush_r+0x1a>
 80066de:	2300      	movs	r3, #0
 80066e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066e4:	682f      	ldr	r7, [r5, #0]
 80066e6:	6a21      	ldr	r1, [r4, #32]
 80066e8:	602b      	str	r3, [r5, #0]
 80066ea:	d032      	beq.n	8006752 <__sflush_r+0x9a>
 80066ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	075a      	lsls	r2, r3, #29
 80066f2:	d505      	bpl.n	8006700 <__sflush_r+0x48>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	1ac0      	subs	r0, r0, r3
 80066f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066fa:	b10b      	cbz	r3, 8006700 <__sflush_r+0x48>
 80066fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066fe:	1ac0      	subs	r0, r0, r3
 8006700:	2300      	movs	r3, #0
 8006702:	4602      	mov	r2, r0
 8006704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006706:	6a21      	ldr	r1, [r4, #32]
 8006708:	4628      	mov	r0, r5
 800670a:	47b0      	blx	r6
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	d106      	bne.n	8006720 <__sflush_r+0x68>
 8006712:	6829      	ldr	r1, [r5, #0]
 8006714:	291d      	cmp	r1, #29
 8006716:	d848      	bhi.n	80067aa <__sflush_r+0xf2>
 8006718:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <__sflush_r+0x108>)
 800671a:	40ca      	lsrs	r2, r1
 800671c:	07d6      	lsls	r6, r2, #31
 800671e:	d544      	bpl.n	80067aa <__sflush_r+0xf2>
 8006720:	2200      	movs	r2, #0
 8006722:	6062      	str	r2, [r4, #4]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	04d9      	lsls	r1, r3, #19
 8006728:	6022      	str	r2, [r4, #0]
 800672a:	d504      	bpl.n	8006736 <__sflush_r+0x7e>
 800672c:	1c42      	adds	r2, r0, #1
 800672e:	d101      	bne.n	8006734 <__sflush_r+0x7c>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b903      	cbnz	r3, 8006736 <__sflush_r+0x7e>
 8006734:	6560      	str	r0, [r4, #84]	; 0x54
 8006736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006738:	602f      	str	r7, [r5, #0]
 800673a:	2900      	cmp	r1, #0
 800673c:	d0c9      	beq.n	80066d2 <__sflush_r+0x1a>
 800673e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006742:	4299      	cmp	r1, r3
 8006744:	d002      	beq.n	800674c <__sflush_r+0x94>
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f8ec 	bl	8006924 <_free_r>
 800674c:	2000      	movs	r0, #0
 800674e:	6360      	str	r0, [r4, #52]	; 0x34
 8006750:	e7c0      	b.n	80066d4 <__sflush_r+0x1c>
 8006752:	2301      	movs	r3, #1
 8006754:	4628      	mov	r0, r5
 8006756:	47b0      	blx	r6
 8006758:	1c41      	adds	r1, r0, #1
 800675a:	d1c8      	bne.n	80066ee <__sflush_r+0x36>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0c5      	beq.n	80066ee <__sflush_r+0x36>
 8006762:	2b1d      	cmp	r3, #29
 8006764:	d001      	beq.n	800676a <__sflush_r+0xb2>
 8006766:	2b16      	cmp	r3, #22
 8006768:	d101      	bne.n	800676e <__sflush_r+0xb6>
 800676a:	602f      	str	r7, [r5, #0]
 800676c:	e7b1      	b.n	80066d2 <__sflush_r+0x1a>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	e7ad      	b.n	80066d4 <__sflush_r+0x1c>
 8006778:	690f      	ldr	r7, [r1, #16]
 800677a:	2f00      	cmp	r7, #0
 800677c:	d0a9      	beq.n	80066d2 <__sflush_r+0x1a>
 800677e:	0793      	lsls	r3, r2, #30
 8006780:	bf18      	it	ne
 8006782:	2300      	movne	r3, #0
 8006784:	680e      	ldr	r6, [r1, #0]
 8006786:	bf08      	it	eq
 8006788:	694b      	ldreq	r3, [r1, #20]
 800678a:	eba6 0807 	sub.w	r8, r6, r7
 800678e:	600f      	str	r7, [r1, #0]
 8006790:	608b      	str	r3, [r1, #8]
 8006792:	f1b8 0f00 	cmp.w	r8, #0
 8006796:	dd9c      	ble.n	80066d2 <__sflush_r+0x1a>
 8006798:	4643      	mov	r3, r8
 800679a:	463a      	mov	r2, r7
 800679c:	6a21      	ldr	r1, [r4, #32]
 800679e:	4628      	mov	r0, r5
 80067a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067a2:	47b0      	blx	r6
 80067a4:	2800      	cmp	r0, #0
 80067a6:	dc06      	bgt.n	80067b6 <__sflush_r+0xfe>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b4:	e78e      	b.n	80066d4 <__sflush_r+0x1c>
 80067b6:	4407      	add	r7, r0
 80067b8:	eba8 0800 	sub.w	r8, r8, r0
 80067bc:	e7e9      	b.n	8006792 <__sflush_r+0xda>
 80067be:	bf00      	nop
 80067c0:	20400001 	.word	0x20400001

080067c4 <_fflush_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	4605      	mov	r5, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	b1db      	cbz	r3, 8006806 <_fflush_r+0x42>
 80067ce:	b118      	cbz	r0, 80067d8 <_fflush_r+0x14>
 80067d0:	6983      	ldr	r3, [r0, #24]
 80067d2:	b90b      	cbnz	r3, 80067d8 <_fflush_r+0x14>
 80067d4:	f7ff fa90 	bl	8005cf8 <__sinit>
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <_fflush_r+0x48>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d109      	bne.n	80067f2 <_fflush_r+0x2e>
 80067de:	686c      	ldr	r4, [r5, #4]
 80067e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e4:	b17b      	cbz	r3, 8006806 <_fflush_r+0x42>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ee:	f7ff bf63 	b.w	80066b8 <__sflush_r>
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <_fflush_r+0x4c>)
 80067f4:	429c      	cmp	r4, r3
 80067f6:	d101      	bne.n	80067fc <_fflush_r+0x38>
 80067f8:	68ac      	ldr	r4, [r5, #8]
 80067fa:	e7f1      	b.n	80067e0 <_fflush_r+0x1c>
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <_fflush_r+0x50>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	bf08      	it	eq
 8006802:	68ec      	ldreq	r4, [r5, #12]
 8006804:	e7ec      	b.n	80067e0 <_fflush_r+0x1c>
 8006806:	2000      	movs	r0, #0
 8006808:	bd38      	pop	{r3, r4, r5, pc}
 800680a:	bf00      	nop
 800680c:	08006b64 	.word	0x08006b64
 8006810:	08006b84 	.word	0x08006b84
 8006814:	08006b44 	.word	0x08006b44

08006818 <_lseek_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4605      	mov	r5, r0
 800681c:	4608      	mov	r0, r1
 800681e:	4611      	mov	r1, r2
 8006820:	2200      	movs	r2, #0
 8006822:	4c05      	ldr	r4, [pc, #20]	; (8006838 <_lseek_r+0x20>)
 8006824:	6022      	str	r2, [r4, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f7fa f879 	bl	800091e <_lseek>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_lseek_r+0x1e>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	b103      	cbz	r3, 8006836 <_lseek_r+0x1e>
 8006834:	602b      	str	r3, [r5, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20001ab8 	.word	0x20001ab8

0800683c <__swhatbuf_r>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	460e      	mov	r6, r1
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	b096      	sub	sp, #88	; 0x58
 8006846:	2900      	cmp	r1, #0
 8006848:	4614      	mov	r4, r2
 800684a:	461d      	mov	r5, r3
 800684c:	da07      	bge.n	800685e <__swhatbuf_r+0x22>
 800684e:	2300      	movs	r3, #0
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	89b3      	ldrh	r3, [r6, #12]
 8006854:	061a      	lsls	r2, r3, #24
 8006856:	d410      	bmi.n	800687a <__swhatbuf_r+0x3e>
 8006858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800685c:	e00e      	b.n	800687c <__swhatbuf_r+0x40>
 800685e:	466a      	mov	r2, sp
 8006860:	f000 f8be 	bl	80069e0 <_fstat_r>
 8006864:	2800      	cmp	r0, #0
 8006866:	dbf2      	blt.n	800684e <__swhatbuf_r+0x12>
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800686e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006872:	425a      	negs	r2, r3
 8006874:	415a      	adcs	r2, r3
 8006876:	602a      	str	r2, [r5, #0]
 8006878:	e7ee      	b.n	8006858 <__swhatbuf_r+0x1c>
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	2000      	movs	r0, #0
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	b016      	add	sp, #88	; 0x58
 8006882:	bd70      	pop	{r4, r5, r6, pc}

08006884 <__smakebuf_r>:
 8006884:	898b      	ldrh	r3, [r1, #12]
 8006886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006888:	079d      	lsls	r5, r3, #30
 800688a:	4606      	mov	r6, r0
 800688c:	460c      	mov	r4, r1
 800688e:	d507      	bpl.n	80068a0 <__smakebuf_r+0x1c>
 8006890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	6123      	str	r3, [r4, #16]
 8006898:	2301      	movs	r3, #1
 800689a:	6163      	str	r3, [r4, #20]
 800689c:	b002      	add	sp, #8
 800689e:	bd70      	pop	{r4, r5, r6, pc}
 80068a0:	ab01      	add	r3, sp, #4
 80068a2:	466a      	mov	r2, sp
 80068a4:	f7ff ffca 	bl	800683c <__swhatbuf_r>
 80068a8:	9900      	ldr	r1, [sp, #0]
 80068aa:	4605      	mov	r5, r0
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7ff faad 	bl	8005e0c <_malloc_r>
 80068b2:	b948      	cbnz	r0, 80068c8 <__smakebuf_r+0x44>
 80068b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b8:	059a      	lsls	r2, r3, #22
 80068ba:	d4ef      	bmi.n	800689c <__smakebuf_r+0x18>
 80068bc:	f023 0303 	bic.w	r3, r3, #3
 80068c0:	f043 0302 	orr.w	r3, r3, #2
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	e7e3      	b.n	8006890 <__smakebuf_r+0xc>
 80068c8:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <__smakebuf_r+0x7c>)
 80068ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	6020      	str	r0, [r4, #0]
 80068d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	6120      	str	r0, [r4, #16]
 80068da:	6163      	str	r3, [r4, #20]
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	b15b      	cbz	r3, 80068f8 <__smakebuf_r+0x74>
 80068e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 f88d 	bl	8006a04 <_isatty_r>
 80068ea:	b128      	cbz	r0, 80068f8 <__smakebuf_r+0x74>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	431d      	orrs	r5, r3
 80068fc:	81a5      	strh	r5, [r4, #12]
 80068fe:	e7cd      	b.n	800689c <__smakebuf_r+0x18>
 8006900:	08005cc1 	.word	0x08005cc1

08006904 <memchr>:
 8006904:	b510      	push	{r4, lr}
 8006906:	b2c9      	uxtb	r1, r1
 8006908:	4402      	add	r2, r0
 800690a:	4290      	cmp	r0, r2
 800690c:	4603      	mov	r3, r0
 800690e:	d101      	bne.n	8006914 <memchr+0x10>
 8006910:	2300      	movs	r3, #0
 8006912:	e003      	b.n	800691c <memchr+0x18>
 8006914:	781c      	ldrb	r4, [r3, #0]
 8006916:	3001      	adds	r0, #1
 8006918:	428c      	cmp	r4, r1
 800691a:	d1f6      	bne.n	800690a <memchr+0x6>
 800691c:	4618      	mov	r0, r3
 800691e:	bd10      	pop	{r4, pc}

08006920 <__malloc_lock>:
 8006920:	4770      	bx	lr

08006922 <__malloc_unlock>:
 8006922:	4770      	bx	lr

08006924 <_free_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4605      	mov	r5, r0
 8006928:	2900      	cmp	r1, #0
 800692a:	d043      	beq.n	80069b4 <_free_r+0x90>
 800692c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006930:	1f0c      	subs	r4, r1, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfb8      	it	lt
 8006936:	18e4      	addlt	r4, r4, r3
 8006938:	f7ff fff2 	bl	8006920 <__malloc_lock>
 800693c:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <_free_r+0x94>)
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	4610      	mov	r0, r2
 8006942:	b933      	cbnz	r3, 8006952 <_free_r+0x2e>
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6014      	str	r4, [r2, #0]
 8006948:	4628      	mov	r0, r5
 800694a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800694e:	f7ff bfe8 	b.w	8006922 <__malloc_unlock>
 8006952:	42a3      	cmp	r3, r4
 8006954:	d90b      	bls.n	800696e <_free_r+0x4a>
 8006956:	6821      	ldr	r1, [r4, #0]
 8006958:	1862      	adds	r2, r4, r1
 800695a:	4293      	cmp	r3, r2
 800695c:	bf01      	itttt	eq
 800695e:	681a      	ldreq	r2, [r3, #0]
 8006960:	685b      	ldreq	r3, [r3, #4]
 8006962:	1852      	addeq	r2, r2, r1
 8006964:	6022      	streq	r2, [r4, #0]
 8006966:	6063      	str	r3, [r4, #4]
 8006968:	6004      	str	r4, [r0, #0]
 800696a:	e7ed      	b.n	8006948 <_free_r+0x24>
 800696c:	4613      	mov	r3, r2
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	b10a      	cbz	r2, 8006976 <_free_r+0x52>
 8006972:	42a2      	cmp	r2, r4
 8006974:	d9fa      	bls.n	800696c <_free_r+0x48>
 8006976:	6819      	ldr	r1, [r3, #0]
 8006978:	1858      	adds	r0, r3, r1
 800697a:	42a0      	cmp	r0, r4
 800697c:	d10b      	bne.n	8006996 <_free_r+0x72>
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	4401      	add	r1, r0
 8006982:	1858      	adds	r0, r3, r1
 8006984:	4282      	cmp	r2, r0
 8006986:	6019      	str	r1, [r3, #0]
 8006988:	d1de      	bne.n	8006948 <_free_r+0x24>
 800698a:	6810      	ldr	r0, [r2, #0]
 800698c:	6852      	ldr	r2, [r2, #4]
 800698e:	4401      	add	r1, r0
 8006990:	6019      	str	r1, [r3, #0]
 8006992:	605a      	str	r2, [r3, #4]
 8006994:	e7d8      	b.n	8006948 <_free_r+0x24>
 8006996:	d902      	bls.n	800699e <_free_r+0x7a>
 8006998:	230c      	movs	r3, #12
 800699a:	602b      	str	r3, [r5, #0]
 800699c:	e7d4      	b.n	8006948 <_free_r+0x24>
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	1821      	adds	r1, r4, r0
 80069a2:	428a      	cmp	r2, r1
 80069a4:	bf01      	itttt	eq
 80069a6:	6811      	ldreq	r1, [r2, #0]
 80069a8:	6852      	ldreq	r2, [r2, #4]
 80069aa:	1809      	addeq	r1, r1, r0
 80069ac:	6021      	streq	r1, [r4, #0]
 80069ae:	6062      	str	r2, [r4, #4]
 80069b0:	605c      	str	r4, [r3, #4]
 80069b2:	e7c9      	b.n	8006948 <_free_r+0x24>
 80069b4:	bd38      	pop	{r3, r4, r5, pc}
 80069b6:	bf00      	nop
 80069b8:	2000199c 	.word	0x2000199c

080069bc <_read_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	2200      	movs	r2, #0
 80069c6:	4c05      	ldr	r4, [pc, #20]	; (80069dc <_read_r+0x20>)
 80069c8:	6022      	str	r2, [r4, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7f9 ff66 	bl	800089c <_read>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_read_r+0x1e>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	b103      	cbz	r3, 80069da <_read_r+0x1e>
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20001ab8 	.word	0x20001ab8

080069e0 <_fstat_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	2300      	movs	r3, #0
 80069e4:	4c06      	ldr	r4, [pc, #24]	; (8006a00 <_fstat_r+0x20>)
 80069e6:	4605      	mov	r5, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	f7f9 ff7d 	bl	80008ec <_fstat>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d102      	bne.n	80069fc <_fstat_r+0x1c>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	b103      	cbz	r3, 80069fc <_fstat_r+0x1c>
 80069fa:	602b      	str	r3, [r5, #0]
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	20001ab8 	.word	0x20001ab8

08006a04 <_isatty_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	2300      	movs	r3, #0
 8006a08:	4c05      	ldr	r4, [pc, #20]	; (8006a20 <_isatty_r+0x1c>)
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	f7f9 ff7b 	bl	800090a <_isatty>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_isatty_r+0x1a>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_isatty_r+0x1a>
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	20001ab8 	.word	0x20001ab8

08006a24 <_init>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	bf00      	nop
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr

08006a30 <_fini>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr
