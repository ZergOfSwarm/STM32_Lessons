
Usart_over_RS485_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003758  08003758  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003758  08003758  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003758  08003758  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080037d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080037d0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1ed  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204f  00000000  00000000  0002d286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a3f  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf16  00000000  00000000  000495cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd1c  00000000  00000000  000564e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000e2254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003624 	.word	0x08003624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003624 	.word	0x08003624

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbaa 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82a 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f898 	bl	800028c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f86c 	bl	8000238 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // По дефолту откоючаем LED
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	480c      	ldr	r0, [pc, #48]	; (8000198 <main+0x4c>)
 8000168:	f000 fee4 	bl	8000f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET); // Always LOW as Slave receive value from Master
 800016c:	2200      	movs	r2, #0
 800016e:	2101      	movs	r1, #1
 8000170:	480a      	ldr	r0, [pc, #40]	; (800019c <main+0x50>)
 8000172:	f000 fedf 	bl	8000f34 <HAL_GPIO_WritePin>
  printf("Aplication is runing! \n\r");
 8000176:	480a      	ldr	r0, [pc, #40]	; (80001a0 <main+0x54>)
 8000178:	f002 faf4 	bl	8002764 <iprintf>

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); // Флаг IDLE
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <main+0x58>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	68da      	ldr	r2, [r3, #12]
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <main+0x58>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f042 0210 	orr.w	r2, r2, #16
 800018a:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size); // Запуск према данных
 800018c:	2240      	movs	r2, #64	; 0x40
 800018e:	4906      	ldr	r1, [pc, #24]	; (80001a8 <main+0x5c>)
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <main+0x58>)
 8000192:	f001 fe0c 	bl	8001dae <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000196:	e7fe      	b.n	8000196 <main+0x4a>
 8000198:	40011000 	.word	0x40011000
 800019c:	40010c00 	.word	0x40010c00
 80001a0:	0800363c 	.word	0x0800363c
 80001a4:	200000d8 	.word	0x200000d8
 80001a8:	2000008c 	.word	0x2000008c

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 faca 	bl	8002754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ce:	2301      	movs	r3, #1
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 feb5 	bl	8000f64 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000200:	f000 f966 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 f920 	bl	8001464 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022a:	f000 f951 	bl	80004d0 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	; 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 800023e:	4a12      	ldr	r2, [pc, #72]	; (8000288 <MX_USART1_UART_Init+0x50>)
 8000240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 8000244:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 800025e:	220c      	movs	r2, #12
 8000260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <MX_USART1_UART_Init+0x4c>)
 8000270:	f001 fd0c 	bl	8001c8c <HAL_UART_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800027a:	f000 f929 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000d8 	.word	0x200000d8
 8000288:	40013800 	.word	0x40013800

0800028c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a0:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0310 	and.w	r3, r3, #16
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a26      	ldr	r2, [pc, #152]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0320 	and.w	r3, r3, #32
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	603b      	str	r3, [r7, #0]
 80002fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000306:	4815      	ldr	r0, [pc, #84]	; (800035c <MX_GPIO_Init+0xd0>)
 8000308:	f000 fe14 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2101      	movs	r1, #1
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_GPIO_Init+0xd4>)
 8000312:	f000 fe0f 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2302      	movs	r3, #2
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <MX_GPIO_Init+0xd0>)
 8000330:	f000 fc7c 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Pin;
 8000334:	2301      	movs	r3, #1
 8000336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2302      	movs	r3, #2
 8000342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	4619      	mov	r1, r3
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_GPIO_Init+0xd4>)
 800034c:	f000 fc6e 	bl	8000c2c <HAL_GPIO_Init>

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40011000 	.word	0x40011000
 8000360:	40010c00 	.word	0x40010c00

08000364 <HAL_UART_IDLE_Callback>:

/* USER CODE BEGIN 4 */
/*------------------------Callback для флага IDLE---------------------------------------*/
void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) { // Эта функция отслеживает окончание передачи!
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a2b      	ldr	r2, [pc, #172]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d14f      	bne.n	8000414 <HAL_UART_IDLE_Callback+0xb0>
		printf("IDLE = OK\n\r");
 8000374:	482a      	ldr	r0, [pc, #168]	; (8000420 <HAL_UART_IDLE_Callback+0xbc>)
 8000376:	f002 f9f5 	bl	8002764 <iprintf>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE); // Что бы писало один раз "IDLE = OK"
 800037a:	4b28      	ldr	r3, [pc, #160]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f022 0210 	bic.w	r2, r2, #16
 8000388:	60da      	str	r2, [r3, #12]
		rx_buffer_len = rx_buffer_size - huart->RxXferCount;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800038e:	b29b      	uxth	r3, r3
 8000390:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000394:	b29a      	uxth	r2, r3
 8000396:	4b23      	ldr	r3, [pc, #140]	; (8000424 <HAL_UART_IDLE_Callback+0xc0>)
 8000398:	801a      	strh	r2, [r3, #0]

		/*----------Действия с входящими данными, что получили то и отправляем!-----------*/
		if (huart1.gState != HAL_UART_STATE_BUSY_TX) {
 800039a:	4b20      	ldr	r3, [pc, #128]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 800039c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b21      	cmp	r3, #33	; 0x21
 80003a4:	d01b      	beq.n	80003de <HAL_UART_IDLE_Callback+0x7a>
			HAL_UART_Transmit_IT(&huart1, rx_buffer, rx_buffer_len);
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <HAL_UART_IDLE_Callback+0xc0>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	461a      	mov	r2, r3
 80003ac:	491e      	ldr	r1, [pc, #120]	; (8000428 <HAL_UART_IDLE_Callback+0xc4>)
 80003ae:	481b      	ldr	r0, [pc, #108]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 80003b0:	f001 fcb9 	bl	8001d26 <HAL_UART_Transmit_IT>
			if (*rx_buffer == '7') { // Если прилитела 7-ка то...
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <HAL_UART_IDLE_Callback+0xc4>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b37      	cmp	r3, #55	; 0x37
 80003ba:	d106      	bne.n	80003ca <HAL_UART_IDLE_Callback+0x66>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c2:	481a      	ldr	r0, [pc, #104]	; (800042c <HAL_UART_IDLE_Callback+0xc8>)
 80003c4:	f000 fdb6 	bl	8000f34 <HAL_GPIO_WritePin>
 80003c8:	e009      	b.n	80003de <HAL_UART_IDLE_Callback+0x7a>
			} else if (*rx_buffer == '8') { // Если прилитела 8-ка то...
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_UART_IDLE_Callback+0xc4>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b38      	cmp	r3, #56	; 0x38
 80003d0:	d105      	bne.n	80003de <HAL_UART_IDLE_Callback+0x7a>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	4814      	ldr	r0, [pc, #80]	; (800042c <HAL_UART_IDLE_Callback+0xc8>)
 80003da:	f000 fdab 	bl	8000f34 <HAL_GPIO_WritePin>
			}
		} else {
		}
		/*----------основные действия с входящими данными-----------*/
		HAL_UART_AbortReceive_IT(&huart1);      // Без этих 2-х строк,
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 80003e0:	f001 fd16 	bl	8001e10 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1); // работать будет только один раз!
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]

		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size);
 800040a:	2240      	movs	r2, #64	; 0x40
 800040c:	4906      	ldr	r1, [pc, #24]	; (8000428 <HAL_UART_IDLE_Callback+0xc4>)
 800040e:	4803      	ldr	r0, [pc, #12]	; (800041c <HAL_UART_IDLE_Callback+0xb8>)
 8000410:	f001 fccd 	bl	8001dae <HAL_UART_Receive_IT>
	}
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000d8 	.word	0x200000d8
 8000420:	08003658 	.word	0x08003658
 8000424:	2000011c 	.word	0x2000011c
 8000428:	2000008c 	.word	0x2000008c
 800042c:	40011000 	.word	0x40011000

08000430 <HAL_UART_RxCpltCallback>:

/*------------------------UART RxCpltCallback---------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a18      	ldr	r2, [pc, #96]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d128      	bne.n	8000492 <HAL_UART_RxCpltCallback+0x62>
		printf("RxCpltCallback = OK\n\r");
 8000440:	4817      	ldr	r0, [pc, #92]	; (80004a0 <HAL_UART_RxCpltCallback+0x70>)
 8000442:	f002 f98f 	bl	8002764 <iprintf>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68da      	ldr	r2, [r3, #12]
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f022 0210 	bic.w	r2, r2, #16
 8000454:	60da      	str	r2, [r3, #12]

		printf("rx_buffer is overflow! \n\r"); // Если объем данных превышает размер буфера для входных данных будет сообщение!
 8000456:	4813      	ldr	r0, [pc, #76]	; (80004a4 <HAL_UART_RxCpltCallback+0x74>)
 8000458:	f002 f984 	bl	8002764 <iprintf>

		HAL_UART_AbortReceive_IT(&huart1); // Нужно, что бы не суммировало сообщения! Без этих 3-х строк,
 800045c:	480f      	ldr	r0, [pc, #60]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 800045e:	f001 fcd7 	bl	8001e10 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1); // работать будет только один раз!
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); // Сбрасываем флаг IDLE
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	68da      	ldr	r2, [r3, #12]
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f042 0210 	orr.w	r2, r2, #16
 8000486:	60da      	str	r2, [r3, #12]

		HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size);// Снова в режим приёма.
 8000488:	2240      	movs	r2, #64	; 0x40
 800048a:	4907      	ldr	r1, [pc, #28]	; (80004a8 <HAL_UART_RxCpltCallback+0x78>)
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <HAL_UART_RxCpltCallback+0x6c>)
 800048e:	f001 fc8e 	bl	8001dae <HAL_UART_Receive_IT>
	}
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000d8 	.word	0x200000d8
 80004a0:	08003664 	.word	0x08003664
 80004a4:	0800367c 	.word	0x0800367c
 80004a8:	2000008c 	.word	0x2000008c

080004ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d101      	bne.n	80004c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004be:	f000 fa09 	bl	80008d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40000800 	.word	0x40000800

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_UART_MspInit+0x9c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d139      	bne.n	80005d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <HAL_UART_MspInit+0xa4>)
 80005a6:	f000 fb41 	bl	8000c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_UART_MspInit+0xa4>)
 80005c0:	f000 fb34 	bl	8000c2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2025      	movs	r0, #37	; 0x25
 80005ca:	f000 fa54 	bl	8000a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ce:	2025      	movs	r0, #37	; 0x25
 80005d0:	f000 fa6d 	bl	8000aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	; 0x30
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	201e      	movs	r0, #30
 80005fe:	f000 fa3a 	bl	8000a76 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000602:	201e      	movs	r0, #30
 8000604:	f000 fa53 	bl	8000aae <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <HAL_InitTick+0xa0>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <HAL_InitTick+0xa0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	61d3      	str	r3, [r2, #28]
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <HAL_InitTick+0xa0>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000620:	f107 0210 	add.w	r2, r7, #16
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f896 	bl	800175c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000630:	f001 f86c 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8000634:	4603      	mov	r3, r0
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800063c:	4a13      	ldr	r2, [pc, #76]	; (800068c <HAL_InitTick+0xa4>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	0c9b      	lsrs	r3, r3, #18
 8000644:	3b01      	subs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_InitTick+0xa8>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <HAL_InitTick+0xac>)
 800064c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_InitTick+0xa8>)
 8000650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000654:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_InitTick+0xa8>)
 8000658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_InitTick+0xa8>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_InitTick+0xa8>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <HAL_InitTick+0xa8>)
 800066a:	f001 f8c5 	bl	80017f8 <HAL_TIM_Base_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d104      	bne.n	800067e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <HAL_InitTick+0xa8>)
 8000676:	f001 f917 	bl	80018a8 <HAL_TIM_Base_Start_IT>
 800067a:	4603      	mov	r3, r0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3730      	adds	r7, #48	; 0x30
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	431bde83 	.word	0x431bde83
 8000690:	20000120 	.word	0x20000120
 8000694:	40000800 	.word	0x40000800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <TIM4_IRQHandler+0x10>)
 80006ee:	f001 f92d 	bl	800194c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000120 	.word	0x20000120

080006fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <USART1_IRQHandler+0x10>)
 8000702:	f001 fbef 	bl	8001ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000d8 	.word	0x200000d8

08000710 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e00a      	b.n	8000738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000722:	f3af 8000 	nop.w
 8000726:	4601      	mov	r1, r0
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	60ba      	str	r2, [r7, #8]
 800072e:	b2ca      	uxtb	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	dbf0      	blt.n	8000722 <_read+0x12>
	}

return len;
 8000740:	687b      	ldr	r3, [r7, #4]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	e009      	b.n	8000770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	dbf1      	blt.n	800075c <_write+0x12>
	}
	return len;
 8000778:	687b      	ldr	r3, [r7, #4]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <_close>:

int _close(int file)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	return -1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a8:	605a      	str	r2, [r3, #4]
	return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <_isatty>:

int _isatty(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
	return 1;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
	return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
	...

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f001 ff74 	bl	8002700 <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20005000 	.word	0x20005000
 8000844:	00000400 	.word	0x00000400
 8000848:	200000cc 	.word	0x200000cc
 800084c:	20000180 	.word	0x20000180

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffe5 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 ff41 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fc5f 	bl	800014c <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000898:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 800089c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008a0:	2000017c 	.word	0x2000017c

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f8d1 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f7ff fe92 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fe0a 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000168 	.word	0x20000168

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000168 	.word	0x20000168

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <__NVIC_EnableIRQ+0x34>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff4f 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff64 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ffb2 	bl	80009fc <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff81 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff57 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b085      	sub	sp, #20
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d008      	beq.n	8000af2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e020      	b.n	8000b34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 020e 	bic.w	r2, r2, #14
 8000b00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0201 	bic.w	r2, r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
	...

08000b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d005      	beq.n	8000b62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2204      	movs	r2, #4
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e051      	b.n	8000c06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 020e 	bic.w	r2, r2, #14
 8000b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0201 	bic.w	r2, r2, #1
 8000b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_DMA_Abort_IT+0xd0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d029      	beq.n	8000be0 <HAL_DMA_Abort_IT+0xa0>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <HAL_DMA_Abort_IT+0xd4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d022      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x9c>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_DMA_Abort_IT+0xd8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d01a      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x96>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_DMA_Abort_IT+0xdc>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d012      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0x90>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_DMA_Abort_IT+0xe0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d00a      	beq.n	8000bca <HAL_DMA_Abort_IT+0x8a>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <HAL_DMA_Abort_IT+0xe4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d102      	bne.n	8000bc4 <HAL_DMA_Abort_IT+0x84>
 8000bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bc2:	e00e      	b.n	8000be2 <HAL_DMA_Abort_IT+0xa2>
 8000bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bc8:	e00b      	b.n	8000be2 <HAL_DMA_Abort_IT+0xa2>
 8000bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bce:	e008      	b.n	8000be2 <HAL_DMA_Abort_IT+0xa2>
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd4:	e005      	b.n	8000be2 <HAL_DMA_Abort_IT+0xa2>
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	e002      	b.n	8000be2 <HAL_DMA_Abort_IT+0xa2>
 8000bdc:	2310      	movs	r3, #16
 8000bde:	e000      	b.n	8000be2 <HAL_DMA_Abort_IT+0xa2>
 8000be0:	2301      	movs	r3, #1
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <HAL_DMA_Abort_IT+0xe8>)
 8000be4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	4798      	blx	r3
    } 
  }
  return status;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40020008 	.word	0x40020008
 8000c14:	4002001c 	.word	0x4002001c
 8000c18:	40020030 	.word	0x40020030
 8000c1c:	40020044 	.word	0x40020044
 8000c20:	40020058 	.word	0x40020058
 8000c24:	4002006c 	.word	0x4002006c
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e169      	b.n	8000f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c40:	2201      	movs	r2, #1
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f040 8158 	bne.w	8000f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a9a      	ldr	r2, [pc, #616]	; (8000ecc <HAL_GPIO_Init+0x2a0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d05e      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c68:	4a98      	ldr	r2, [pc, #608]	; (8000ecc <HAL_GPIO_Init+0x2a0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d875      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c6e:	4a98      	ldr	r2, [pc, #608]	; (8000ed0 <HAL_GPIO_Init+0x2a4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d058      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c74:	4a96      	ldr	r2, [pc, #600]	; (8000ed0 <HAL_GPIO_Init+0x2a4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d86f      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c7a:	4a96      	ldr	r2, [pc, #600]	; (8000ed4 <HAL_GPIO_Init+0x2a8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d052      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c80:	4a94      	ldr	r2, [pc, #592]	; (8000ed4 <HAL_GPIO_Init+0x2a8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d869      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c86:	4a94      	ldr	r2, [pc, #592]	; (8000ed8 <HAL_GPIO_Init+0x2ac>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d04c      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c8c:	4a92      	ldr	r2, [pc, #584]	; (8000ed8 <HAL_GPIO_Init+0x2ac>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d863      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c92:	4a92      	ldr	r2, [pc, #584]	; (8000edc <HAL_GPIO_Init+0x2b0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d046      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c98:	4a90      	ldr	r2, [pc, #576]	; (8000edc <HAL_GPIO_Init+0x2b0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d85d      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c9e:	2b12      	cmp	r3, #18
 8000ca0:	d82a      	bhi.n	8000cf8 <HAL_GPIO_Init+0xcc>
 8000ca2:	2b12      	cmp	r3, #18
 8000ca4:	d859      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000ca6:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <HAL_GPIO_Init+0x80>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000d27 	.word	0x08000d27
 8000cb0:	08000d01 	.word	0x08000d01
 8000cb4:	08000d13 	.word	0x08000d13
 8000cb8:	08000d55 	.word	0x08000d55
 8000cbc:	08000d5b 	.word	0x08000d5b
 8000cc0:	08000d5b 	.word	0x08000d5b
 8000cc4:	08000d5b 	.word	0x08000d5b
 8000cc8:	08000d5b 	.word	0x08000d5b
 8000ccc:	08000d5b 	.word	0x08000d5b
 8000cd0:	08000d5b 	.word	0x08000d5b
 8000cd4:	08000d5b 	.word	0x08000d5b
 8000cd8:	08000d5b 	.word	0x08000d5b
 8000cdc:	08000d5b 	.word	0x08000d5b
 8000ce0:	08000d5b 	.word	0x08000d5b
 8000ce4:	08000d5b 	.word	0x08000d5b
 8000ce8:	08000d5b 	.word	0x08000d5b
 8000cec:	08000d5b 	.word	0x08000d5b
 8000cf0:	08000d09 	.word	0x08000d09
 8000cf4:	08000d1d 	.word	0x08000d1d
 8000cf8:	4a79      	ldr	r2, [pc, #484]	; (8000ee0 <HAL_GPIO_Init+0x2b4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cfe:	e02c      	b.n	8000d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e029      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e024      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	3308      	adds	r3, #8
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e01f      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	330c      	adds	r3, #12
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e01a      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e013      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d105      	bne.n	8000d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	611a      	str	r2, [r3, #16]
          break;
 8000d46:	e009      	b.n	8000d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	615a      	str	r2, [r3, #20]
          break;
 8000d52:	e003      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          break;
 8000d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	d801      	bhi.n	8000d66 <HAL_GPIO_Init+0x13a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	e001      	b.n	8000d6a <HAL_GPIO_Init+0x13e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d802      	bhi.n	8000d78 <HAL_GPIO_Init+0x14c>
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	3b08      	subs	r3, #8
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	210f      	movs	r1, #15
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	6a39      	ldr	r1, [r7, #32]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dac:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <HAL_GPIO_Init+0x2bc>)
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a40      	ldr	r2, [pc, #256]	; (8000eec <HAL_GPIO_Init+0x2c0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_GPIO_Init+0x2c4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e8>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3e      	ldr	r2, [pc, #248]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a3d      	ldr	r2, [pc, #244]	; (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1e0>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e2a:	492f      	ldr	r1, [pc, #188]	; (8000ee8 <HAL_GPIO_Init+0x2bc>)
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	492c      	ldr	r1, [pc, #176]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4928      	ldr	r1, [pc, #160]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4922      	ldr	r1, [pc, #136]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	491e      	ldr	r1, [pc, #120]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	4918      	ldr	r1, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4914      	ldr	r1, [pc, #80]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d021      	beq.n	8000f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	490e      	ldr	r1, [pc, #56]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60cb      	str	r3, [r1, #12]
 8000ec8:	e021      	b.n	8000f0e <HAL_GPIO_Init+0x2e2>
 8000eca:	bf00      	nop
 8000ecc:	10320000 	.word	0x10320000
 8000ed0:	10310000 	.word	0x10310000
 8000ed4:	10220000 	.word	0x10220000
 8000ed8:	10210000 	.word	0x10210000
 8000edc:	10120000 	.word	0x10120000
 8000ee0:	10110000 	.word	0x10110000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4909      	ldr	r1, [pc, #36]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f ae8e 	bne.w	8000c40 <HAL_GPIO_Init+0x14>
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	372c      	adds	r7, #44	; 0x2c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e26c      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8087 	beq.w	8001092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f84:	4b92      	ldr	r3, [pc, #584]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d00c      	beq.n	8000faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f90:	4b8f      	ldr	r3, [pc, #572]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d112      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06c      	beq.n	8001090 <HAL_RCC_OscConfig+0x12c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d168      	bne.n	8001090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e246      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x76>
 8000fcc:	4b80      	ldr	r3, [pc, #512]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a7f      	ldr	r2, [pc, #508]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e02e      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x98>
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b78      	ldr	r3, [pc, #480]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a77      	ldr	r2, [pc, #476]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0xbc>
 8001006:	4b72      	ldr	r3, [pc, #456]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a71      	ldr	r2, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8001020:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a6a      	ldr	r2, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a67      	ldr	r2, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc5a 	bl	80008f8 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fc56 	bl	80008f8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1fa      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b5d      	ldr	r3, [pc, #372]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe4>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc46 	bl	80008f8 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fc42 	bl	80008f8 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1e6      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x10c>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d063      	beq.n	8001166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e1ba      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e03a      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fbfb 	bl	80008f8 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fbf7 	bl	80008f8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e19b      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4927      	ldr	r1, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fbda 	bl	80008f8 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fbd6 	bl	80008f8 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e17a      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d03a      	beq.n	80011e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d019      	beq.n	80011ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fbba 	bl	80008f8 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fbb6 	bl	80008f8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e15a      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fb08 	bl	80017bc <RCC_Delay>
 80011ac:	e01c      	b.n	80011e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fba0 	bl	80008f8 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ba:	e00f      	b.n	80011dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fb9c 	bl	80008f8 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d908      	bls.n	80011dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e140      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	42420000 	.word	0x42420000
 80011d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b9e      	ldr	r3, [pc, #632]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e9      	bne.n	80011bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a6 	beq.w	8001342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b97      	ldr	r3, [pc, #604]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b94      	ldr	r3, [pc, #592]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a93      	ldr	r2, [pc, #588]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b91      	ldr	r3, [pc, #580]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4b8e      	ldr	r3, [pc, #568]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4b8b      	ldr	r3, [pc, #556]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb5d 	bl	80008f8 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fb59 	bl	80008f8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0fd      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x312>
 8001268:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a7a      	ldr	r2, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	e02d      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x334>
 800127e:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a75      	ldr	r2, [pc, #468]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b73      	ldr	r3, [pc, #460]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a72      	ldr	r2, [pc, #456]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	e01c      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b05      	cmp	r3, #5
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x356>
 80012a0:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a6c      	ldr	r2, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a69      	ldr	r2, [pc, #420]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	e00b      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a66      	ldr	r2, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	4b64      	ldr	r3, [pc, #400]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a63      	ldr	r2, [pc, #396]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fb0d 	bl	80008f8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb09 	bl	80008f8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0ab      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ee      	beq.n	80012e2 <HAL_RCC_OscConfig+0x37e>
 8001304:	e014      	b.n	8001330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff faf7 	bl	80008f8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff faf3 	bl	80008f8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e095      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ee      	bne.n	800130e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8081 	beq.w	800144e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d061      	beq.n	800141c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d146      	bne.n	80013ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <HAL_RCC_OscConfig+0x4fc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fac7 	bl	80008f8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fac3 	bl	80008f8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e067      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	492d      	ldr	r1, [pc, #180]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a19      	ldr	r1, [r3, #32]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	430b      	orrs	r3, r1
 80013ba:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_RCC_OscConfig+0x4fc>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fa97 	bl	80008f8 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff fa93 	bl	80008f8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e037      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x46a>
 80013ec:	e02f      	b.n	800144e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_RCC_OscConfig+0x4fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa80 	bl	80008f8 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff fa7c 	bl	80008f8 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e020      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x498>
 800141a:	e018      	b.n	800144e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e013      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	429a      	cmp	r2, r3
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	40007000 	.word	0x40007000
 8001460:	42420060 	.word	0x42420060

08001464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0d0      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d910      	bls.n	80014a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 0207 	bic.w	r2, r3, #7
 800148e:	4965      	ldr	r1, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0b8      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	494d      	ldr	r1, [pc, #308]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d040      	beq.n	8001584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d115      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e07f      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e073      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06b      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4936      	ldr	r1, [pc, #216]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff f9d0 	bl	80008f8 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff f9cc 	bl	80008f8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e053      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 020c 	and.w	r2, r3, #12
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d1eb      	bne.n	800155c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d210      	bcs.n	80015b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	4922      	ldr	r1, [pc, #136]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e032      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4916      	ldr	r1, [pc, #88]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015f2:	f000 f821 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	5ccb      	ldrb	r3, [r1, r3]
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1cc>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1d0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffe8 	bl	80005e8 <HAL_InitTick>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000
 8001628:	40021000 	.word	0x40021000
 800162c:	080036a8 	.word	0x080036a8
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001638:	b490      	push	{r4, r7}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001640:	1d3c      	adds	r4, r7, #4
 8001642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001648:	f240 2301 	movw	r3, #513	; 0x201
 800164c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x40>
 8001672:	2b08      	cmp	r3, #8
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x46>
 8001676:	e02d      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167a:	623b      	str	r3, [r7, #32]
      break;
 800167c:	e02d      	b.n	80016da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	0c9b      	lsrs	r3, r3, #18
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800168a:	4413      	add	r3, r2
 800168c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001690:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	0c5b      	lsrs	r3, r3, #17
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016aa:	4413      	add	r3, r2
 80016ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b6:	fb02 f203 	mul.w	r2, r2, r3
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	e004      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	623b      	str	r3, [r7, #32]
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d6:	623b      	str	r3, [r7, #32]
      break;
 80016d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016da:	6a3b      	ldr	r3, [r7, #32]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc90      	pop	{r4, r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	08003698 	.word	0x08003698
 80016ec:	40021000 	.word	0x40021000
 80016f0:	007a1200 	.word	0x007a1200
 80016f4:	003d0900 	.word	0x003d0900

080016f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_RCC_GetHCLKFreq+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001710:	f7ff fff2 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4903      	ldr	r1, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	080036b8 	.word	0x080036b8

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001738:	f7ff ffde 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	0adb      	lsrs	r3, r3, #11
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4903      	ldr	r1, [pc, #12]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	080036b8 	.word	0x080036b8

0800175c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	220f      	movs	r2, #15
 800176a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_GetClockConfig+0x58>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_RCC_GetClockConfig+0x58>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_GetClockConfig+0x58>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_RCC_GetClockConfig+0x58>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0207 	and.w	r2, r3, #7
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40022000 	.word	0x40022000

080017bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <RCC_Delay+0x34>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <RCC_Delay+0x38>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0a5b      	lsrs	r3, r3, #9
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d8:	bf00      	nop
  }
  while (Delay --);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	60fa      	str	r2, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f9      	bne.n	80017d8 <RCC_Delay+0x1c>
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000000 	.word	0x20000000
 80017f4:	10624dd3 	.word	0x10624dd3

080017f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e041      	b.n	800188e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f839 	bl	8001896 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3304      	adds	r3, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f000 f9b4 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d001      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e03a      	b.n	8001936 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_TIM_Base_Start_IT+0x98>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x58>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d009      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x58>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_TIM_Base_Start_IT+0x9c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x58>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_TIM_Base_Start_IT+0xa0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d111      	bne.n	8001924 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d010      	beq.n	8001934 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001922:	e007      	b.n	8001934 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40000400 	.word	0x40000400
 8001948:	40000800 	.word	0x40000800

0800194c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b02      	cmp	r3, #2
 8001960:	d122      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b02      	cmp	r3, #2
 800196e:	d11b      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0202 	mvn.w	r2, #2
 8001978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8ed 	bl	8001b6e <HAL_TIM_IC_CaptureCallback>
 8001994:	e005      	b.n	80019a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8e0 	bl	8001b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8ef 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d122      	bne.n	80019fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d11b      	bne.n	80019fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f06f 0204 	mvn.w	r2, #4
 80019cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8c3 	bl	8001b6e <HAL_TIM_IC_CaptureCallback>
 80019e8:	e005      	b.n	80019f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f8b6 	bl	8001b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f8c5 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d122      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d11b      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0208 	mvn.w	r2, #8
 8001a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2204      	movs	r2, #4
 8001a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f899 	bl	8001b6e <HAL_TIM_IC_CaptureCallback>
 8001a3c:	e005      	b.n	8001a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f88c 	bl	8001b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f89b 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0210 	mvn.w	r2, #16
 8001a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f86f 	bl	8001b6e <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f862 	bl	8001b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f871 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0201 	mvn.w	r2, #1
 8001ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fcee 	bl	80004ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b80      	cmp	r3, #128	; 0x80
 8001adc:	d10e      	bne.n	8001afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d107      	bne.n	8001afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8bf 	bl	8001c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d10e      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b14:	2b40      	cmp	r3, #64	; 0x40
 8001b16:	d107      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f835 	bl	8001b92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d107      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0220 	mvn.w	r2, #32
 8001b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f88a 	bl	8001c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00b      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d007      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <TIM_Base_SetConfig+0xbc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <TIM_Base_SetConfig+0xc0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00b      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d007      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <TIM_Base_SetConfig+0xbc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <TIM_Base_SetConfig+0xc0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d103      	bne.n	8001c4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	615a      	str	r2, [r3, #20]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800

08001c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e03f      	b.n	8001d1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fc44 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	; 0x24
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fc87 	bl	80025e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	4613      	mov	r3, r2
 8001d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d130      	bne.n	8001da2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_UART_Transmit_IT+0x26>
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e029      	b.n	8001da4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Transmit_IT+0x38>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e022      	b.n	8001da4 <HAL_UART_Transmit_IT+0x7e>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2221      	movs	r2, #33	; 0x21
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d11d      	bne.n	8001e04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_UART_Receive_IT+0x26>
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e016      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_UART_Receive_IT+0x38>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e00f      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fa50 	bl	80022a0 <UART_Start_Receive_IT>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e000      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
  }
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0210 	bic.w	r2, r2, #16
 8001e4e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d02d      	beq.n	8001eba <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e6c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d013      	beq.n	8001e9e <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_UART_AbortReceive_IT+0xd0>)
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fe5c 	bl	8000b40 <HAL_DMA_Abort_IT>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d022      	beq.n	8001ed4 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4798      	blx	r3
 8001e9c:	e01a      	b.n	8001ed4 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9e0 	bl	8002278 <HAL_UART_AbortReceiveCpltCallback>
 8001eb8:	e00c      	b.n	8001ed4 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f9d2 	bl	8002278 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08002393 	.word	0x08002393

08001ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_UART_IRQHandler+0x52>
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 faae 	bl	8002490 <UART_Receive_IT>
      return;
 8001f34:	e189      	b.n	800224a <HAL_UART_IRQHandler+0x366>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80b1 	beq.w	80020a0 <HAL_UART_IRQHandler+0x1bc>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_UART_IRQHandler+0x70>
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a6 	beq.w	80020a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_UART_IRQHandler+0x90>
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_UART_IRQHandler+0xb0>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f043 0202 	orr.w	r2, r3, #2
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_UART_IRQHandler+0xd0>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00f      	beq.n	8001fde <HAL_UART_IRQHandler+0xfa>
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d104      	bne.n	8001fd2 <HAL_UART_IRQHandler+0xee>
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0208 	orr.w	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 812c 	beq.w	8002240 <HAL_UART_IRQHandler+0x35c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_UART_IRQHandler+0x11e>
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fa47 	bl	8002490 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_UART_IRQHandler+0x146>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d031      	beq.n	800208e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f971 	bl	8002312 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d023      	beq.n	8002086 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800204c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	2b00      	cmp	r3, #0
 8002054:	d013      	beq.n	800207e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4a7d      	ldr	r2, [pc, #500]	; (8002250 <HAL_UART_IRQHandler+0x36c>)
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fd6c 	bl	8000b40 <HAL_DMA_Abort_IT>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002078:	4610      	mov	r0, r2
 800207a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800207c:	e00e      	b.n	800209c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8f1 	bl	8002266 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002084:	e00a      	b.n	800209c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8ed 	bl	8002266 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	e006      	b.n	800209c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8e9 	bl	8002266 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800209a:	e0d1      	b.n	8002240 <HAL_UART_IRQHandler+0x35c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800209c:	bf00      	nop
    return;
 800209e:	e0cf      	b.n	8002240 <HAL_UART_IRQHandler+0x35c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f040 80a1 	bne.w	80021ec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 809b 	beq.w	80021ec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8095 	beq.w	80021ec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04e      	beq.n	8002184 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80020f0:	8a3b      	ldrh	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80a6 	beq.w	8002244 <HAL_UART_IRQHandler+0x360>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020fc:	8a3a      	ldrh	r2, [r7, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	f080 80a0 	bcs.w	8002244 <HAL_UART_IRQHandler+0x360>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8a3a      	ldrh	r2, [r7, #16]
 8002108:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b20      	cmp	r3, #32
 8002112:	d02b      	beq.n	800216c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002122:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002142:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0210 	bic.w	r2, r2, #16
 8002160:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fcaf 	bl	8000aca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002174:	b29b      	uxth	r3, r3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f884 	bl	800228a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002182:	e05f      	b.n	8002244 <HAL_UART_IRQHandler+0x360>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800218c:	b29b      	uxth	r3, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d055      	beq.n	8002248 <HAL_UART_IRQHandler+0x364>
          &&(nb_rx_data > 0U) )
 800219c:	8a7b      	ldrh	r3, [r7, #18]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d052      	beq.n	8002248 <HAL_UART_IRQHandler+0x364>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021b0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0210 	bic.w	r2, r2, #16
 80021de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021e0:	8a7b      	ldrh	r3, [r7, #18]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f850 	bl	800228a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021ea:	e02d      	b.n	8002248 <HAL_UART_IRQHandler+0x364>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_UART_IRQHandler+0x324>
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f8de 	bl	80023c2 <UART_Transmit_IT>
    return;
 8002206:	e020      	b.n	800224a <HAL_UART_IRQHandler+0x366>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_UART_IRQHandler+0x340>
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_UART_IRQHandler+0x340>
  {
    UART_EndTransmit_IT(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f91f 	bl	8002460 <UART_EndTransmit_IT>
    return;
 8002222:	e012      	b.n	800224a <HAL_UART_IRQHandler+0x366>
  }
  /* UART IDLE interrupt end --------------------------------------------*/
    if (((isrflags & USART_SR_IDLE) != RESET) && ((cr1its & USART_CR1_IDLEIE) != RESET))
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <HAL_UART_IRQHandler+0x366>
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_UART_IRQHandler+0x366>
    {
    	HAL_UART_IDLE_Callback(huart);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe f893 	bl	8000364 <HAL_UART_IDLE_Callback>
      return;
 800223e:	e004      	b.n	800224a <HAL_UART_IRQHandler+0x366>
    return;
 8002240:	bf00      	nop
 8002242:	e002      	b.n	800224a <HAL_UART_IRQHandler+0x366>
      return;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <HAL_UART_IRQHandler+0x366>
      return;
 8002248:	bf00      	nop
    }
}
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800236b 	.word	0x0800236b

08002254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	88fa      	ldrh	r2, [r7, #6]
 80022be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2222      	movs	r2, #34	; 0x22
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002328:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0210 	bic.w	r2, r2, #16
 8002350:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ff6e 	bl	8002266 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff ff5f 	bl	8002278 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b21      	cmp	r3, #33	; 0x21
 80023d4:	d13e      	bne.n	8002454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023de:	d114      	bne.n	800240a <UART_Transmit_IT+0x48>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d110      	bne.n	800240a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	621a      	str	r2, [r3, #32]
 8002408:	e008      	b.n	800241c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	1c59      	adds	r1, r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6211      	str	r1, [r2, #32]
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29b      	uxth	r3, r3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4619      	mov	r1, r3
 800242a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800243e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002476:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fee7 	bl	8002254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b22      	cmp	r3, #34	; 0x22
 80024a2:	f040 8099 	bne.w	80025d8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	d117      	bne.n	80024e0 <UART_Receive_IT+0x50>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	1c9a      	adds	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
 80024de:	e026      	b.n	800252e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	d007      	beq.n	8002504 <UART_Receive_IT+0x74>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <UART_Receive_IT+0x82>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e008      	b.n	8002524 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251e:	b2da      	uxtb	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29b      	uxth	r3, r3
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4619      	mov	r1, r3
 800253c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800253e:	2b00      	cmp	r3, #0
 8002540:	d148      	bne.n	80025d4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0220 	bic.w	r2, r2, #32
 8002550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	2b01      	cmp	r3, #1
 8002580:	d123      	bne.n	80025ca <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0210 	bic.w	r2, r2, #16
 8002596:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d10a      	bne.n	80025bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe61 	bl	800228a <HAL_UARTEx_RxEventCallback>
 80025c8:	e002      	b.n	80025d0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fd ff30 	bl	8000430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e002      	b.n	80025da <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800261e:	f023 030c 	bic.w	r3, r3, #12
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	430b      	orrs	r3, r1
 800262a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <UART_SetConfig+0x114>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800264c:	f7ff f872 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	e002      	b.n	800265a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002654:	f7ff f85a 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <UART_SetConfig+0x118>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	0119      	lsls	r1, r3, #4
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <UART_SetConfig+0x118>)
 8002692:	fba3 0302 	umull	r0, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2064      	movs	r0, #100	; 0x64
 800269a:	fb00 f303 	mul.w	r3, r0, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	3332      	adds	r3, #50	; 0x32
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <UART_SetConfig+0x118>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b0:	4419      	add	r1, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009a      	lsls	r2, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <UART_SetConfig+0x118>)
 80026ca:	fba3 0302 	umull	r0, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2064      	movs	r0, #100	; 0x64
 80026d2:	fb00 f303 	mul.w	r3, r0, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	; 0x32
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <UART_SetConfig+0x118>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	440a      	add	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40013800 	.word	0x40013800
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <__errno>:
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <__errno+0x8>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	2000000c 	.word	0x2000000c

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	2600      	movs	r6, #0
 8002710:	4d0c      	ldr	r5, [pc, #48]	; (8002744 <__libc_init_array+0x38>)
 8002712:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <__libc_init_array+0x3c>)
 8002714:	1b64      	subs	r4, r4, r5
 8002716:	10a4      	asrs	r4, r4, #2
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	f000 ff82 	bl	8003624 <_init>
 8002720:	2600      	movs	r6, #0
 8002722:	4d0a      	ldr	r5, [pc, #40]	; (800274c <__libc_init_array+0x40>)
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <__libc_init_array+0x44>)
 8002726:	1b64      	subs	r4, r4, r5
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	08003758 	.word	0x08003758
 8002748:	08003758 	.word	0x08003758
 800274c:	08003758 	.word	0x08003758
 8002750:	0800375c 	.word	0x0800375c

08002754 <memset>:
 8002754:	4603      	mov	r3, r0
 8002756:	4402      	add	r2, r0
 8002758:	4293      	cmp	r3, r2
 800275a:	d100      	bne.n	800275e <memset+0xa>
 800275c:	4770      	bx	lr
 800275e:	f803 1b01 	strb.w	r1, [r3], #1
 8002762:	e7f9      	b.n	8002758 <memset+0x4>

08002764 <iprintf>:
 8002764:	b40f      	push	{r0, r1, r2, r3}
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <iprintf+0x2c>)
 8002768:	b513      	push	{r0, r1, r4, lr}
 800276a:	681c      	ldr	r4, [r3, #0]
 800276c:	b124      	cbz	r4, 8002778 <iprintf+0x14>
 800276e:	69a3      	ldr	r3, [r4, #24]
 8002770:	b913      	cbnz	r3, 8002778 <iprintf+0x14>
 8002772:	4620      	mov	r0, r4
 8002774:	f000 f866 	bl	8002844 <__sinit>
 8002778:	ab05      	add	r3, sp, #20
 800277a:	4620      	mov	r0, r4
 800277c:	9a04      	ldr	r2, [sp, #16]
 800277e:	68a1      	ldr	r1, [r4, #8]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	f000 f981 	bl	8002a88 <_vfiprintf_r>
 8002786:	b002      	add	sp, #8
 8002788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800278c:	b004      	add	sp, #16
 800278e:	4770      	bx	lr
 8002790:	2000000c 	.word	0x2000000c

08002794 <std>:
 8002794:	2300      	movs	r3, #0
 8002796:	b510      	push	{r4, lr}
 8002798:	4604      	mov	r4, r0
 800279a:	e9c0 3300 	strd	r3, r3, [r0]
 800279e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027a2:	6083      	str	r3, [r0, #8]
 80027a4:	8181      	strh	r1, [r0, #12]
 80027a6:	6643      	str	r3, [r0, #100]	; 0x64
 80027a8:	81c2      	strh	r2, [r0, #14]
 80027aa:	6183      	str	r3, [r0, #24]
 80027ac:	4619      	mov	r1, r3
 80027ae:	2208      	movs	r2, #8
 80027b0:	305c      	adds	r0, #92	; 0x5c
 80027b2:	f7ff ffcf 	bl	8002754 <memset>
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <std+0x38>)
 80027b8:	6224      	str	r4, [r4, #32]
 80027ba:	6263      	str	r3, [r4, #36]	; 0x24
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <std+0x3c>)
 80027be:	62a3      	str	r3, [r4, #40]	; 0x28
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <std+0x40>)
 80027c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <std+0x44>)
 80027c6:	6323      	str	r3, [r4, #48]	; 0x30
 80027c8:	bd10      	pop	{r4, pc}
 80027ca:	bf00      	nop
 80027cc:	08003035 	.word	0x08003035
 80027d0:	08003057 	.word	0x08003057
 80027d4:	0800308f 	.word	0x0800308f
 80027d8:	080030b3 	.word	0x080030b3

080027dc <_cleanup_r>:
 80027dc:	4901      	ldr	r1, [pc, #4]	; (80027e4 <_cleanup_r+0x8>)
 80027de:	f000 b8af 	b.w	8002940 <_fwalk_reent>
 80027e2:	bf00      	nop
 80027e4:	0800338d 	.word	0x0800338d

080027e8 <__sfmoreglue>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	2568      	movs	r5, #104	; 0x68
 80027ec:	1e4a      	subs	r2, r1, #1
 80027ee:	4355      	muls	r5, r2
 80027f0:	460e      	mov	r6, r1
 80027f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027f6:	f000 f8c5 	bl	8002984 <_malloc_r>
 80027fa:	4604      	mov	r4, r0
 80027fc:	b140      	cbz	r0, 8002810 <__sfmoreglue+0x28>
 80027fe:	2100      	movs	r1, #0
 8002800:	e9c0 1600 	strd	r1, r6, [r0]
 8002804:	300c      	adds	r0, #12
 8002806:	60a0      	str	r0, [r4, #8]
 8002808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800280c:	f7ff ffa2 	bl	8002754 <memset>
 8002810:	4620      	mov	r0, r4
 8002812:	bd70      	pop	{r4, r5, r6, pc}

08002814 <__sfp_lock_acquire>:
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <__sfp_lock_acquire+0x8>)
 8002816:	f000 b8b3 	b.w	8002980 <__retarget_lock_acquire_recursive>
 800281a:	bf00      	nop
 800281c:	20000174 	.word	0x20000174

08002820 <__sfp_lock_release>:
 8002820:	4801      	ldr	r0, [pc, #4]	; (8002828 <__sfp_lock_release+0x8>)
 8002822:	f000 b8ae 	b.w	8002982 <__retarget_lock_release_recursive>
 8002826:	bf00      	nop
 8002828:	20000174 	.word	0x20000174

0800282c <__sinit_lock_acquire>:
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <__sinit_lock_acquire+0x8>)
 800282e:	f000 b8a7 	b.w	8002980 <__retarget_lock_acquire_recursive>
 8002832:	bf00      	nop
 8002834:	2000016f 	.word	0x2000016f

08002838 <__sinit_lock_release>:
 8002838:	4801      	ldr	r0, [pc, #4]	; (8002840 <__sinit_lock_release+0x8>)
 800283a:	f000 b8a2 	b.w	8002982 <__retarget_lock_release_recursive>
 800283e:	bf00      	nop
 8002840:	2000016f 	.word	0x2000016f

08002844 <__sinit>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	f7ff fff0 	bl	800282c <__sinit_lock_acquire>
 800284c:	69a3      	ldr	r3, [r4, #24]
 800284e:	b11b      	cbz	r3, 8002858 <__sinit+0x14>
 8002850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002854:	f7ff bff0 	b.w	8002838 <__sinit_lock_release>
 8002858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800285c:	6523      	str	r3, [r4, #80]	; 0x50
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <__sinit+0x68>)
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <__sinit+0x6c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	62a2      	str	r2, [r4, #40]	; 0x28
 8002866:	42a3      	cmp	r3, r4
 8002868:	bf08      	it	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	4620      	mov	r0, r4
 800286e:	bf08      	it	eq
 8002870:	61a3      	streq	r3, [r4, #24]
 8002872:	f000 f81f 	bl	80028b4 <__sfp>
 8002876:	6060      	str	r0, [r4, #4]
 8002878:	4620      	mov	r0, r4
 800287a:	f000 f81b 	bl	80028b4 <__sfp>
 800287e:	60a0      	str	r0, [r4, #8]
 8002880:	4620      	mov	r0, r4
 8002882:	f000 f817 	bl	80028b4 <__sfp>
 8002886:	2200      	movs	r2, #0
 8002888:	2104      	movs	r1, #4
 800288a:	60e0      	str	r0, [r4, #12]
 800288c:	6860      	ldr	r0, [r4, #4]
 800288e:	f7ff ff81 	bl	8002794 <std>
 8002892:	2201      	movs	r2, #1
 8002894:	2109      	movs	r1, #9
 8002896:	68a0      	ldr	r0, [r4, #8]
 8002898:	f7ff ff7c 	bl	8002794 <std>
 800289c:	2202      	movs	r2, #2
 800289e:	2112      	movs	r1, #18
 80028a0:	68e0      	ldr	r0, [r4, #12]
 80028a2:	f7ff ff77 	bl	8002794 <std>
 80028a6:	2301      	movs	r3, #1
 80028a8:	61a3      	str	r3, [r4, #24]
 80028aa:	e7d1      	b.n	8002850 <__sinit+0xc>
 80028ac:	080036c0 	.word	0x080036c0
 80028b0:	080027dd 	.word	0x080027dd

080028b4 <__sfp>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	4607      	mov	r7, r0
 80028b8:	f7ff ffac 	bl	8002814 <__sfp_lock_acquire>
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <__sfp+0x84>)
 80028be:	681e      	ldr	r6, [r3, #0]
 80028c0:	69b3      	ldr	r3, [r6, #24]
 80028c2:	b913      	cbnz	r3, 80028ca <__sfp+0x16>
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7ff ffbd 	bl	8002844 <__sinit>
 80028ca:	3648      	adds	r6, #72	; 0x48
 80028cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	d503      	bpl.n	80028dc <__sfp+0x28>
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	b30b      	cbz	r3, 800291c <__sfp+0x68>
 80028d8:	6836      	ldr	r6, [r6, #0]
 80028da:	e7f7      	b.n	80028cc <__sfp+0x18>
 80028dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028e0:	b9d5      	cbnz	r5, 8002918 <__sfp+0x64>
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <__sfp+0x88>)
 80028e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028e8:	60e3      	str	r3, [r4, #12]
 80028ea:	6665      	str	r5, [r4, #100]	; 0x64
 80028ec:	f000 f847 	bl	800297e <__retarget_lock_init_recursive>
 80028f0:	f7ff ff96 	bl	8002820 <__sfp_lock_release>
 80028f4:	2208      	movs	r2, #8
 80028f6:	4629      	mov	r1, r5
 80028f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002900:	6025      	str	r5, [r4, #0]
 8002902:	61a5      	str	r5, [r4, #24]
 8002904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002908:	f7ff ff24 	bl	8002754 <memset>
 800290c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002914:	4620      	mov	r0, r4
 8002916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002918:	3468      	adds	r4, #104	; 0x68
 800291a:	e7d9      	b.n	80028d0 <__sfp+0x1c>
 800291c:	2104      	movs	r1, #4
 800291e:	4638      	mov	r0, r7
 8002920:	f7ff ff62 	bl	80027e8 <__sfmoreglue>
 8002924:	4604      	mov	r4, r0
 8002926:	6030      	str	r0, [r6, #0]
 8002928:	2800      	cmp	r0, #0
 800292a:	d1d5      	bne.n	80028d8 <__sfp+0x24>
 800292c:	f7ff ff78 	bl	8002820 <__sfp_lock_release>
 8002930:	230c      	movs	r3, #12
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	e7ee      	b.n	8002914 <__sfp+0x60>
 8002936:	bf00      	nop
 8002938:	080036c0 	.word	0x080036c0
 800293c:	ffff0001 	.word	0xffff0001

08002940 <_fwalk_reent>:
 8002940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002944:	4606      	mov	r6, r0
 8002946:	4688      	mov	r8, r1
 8002948:	2700      	movs	r7, #0
 800294a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800294e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002952:	f1b9 0901 	subs.w	r9, r9, #1
 8002956:	d505      	bpl.n	8002964 <_fwalk_reent+0x24>
 8002958:	6824      	ldr	r4, [r4, #0]
 800295a:	2c00      	cmp	r4, #0
 800295c:	d1f7      	bne.n	800294e <_fwalk_reent+0xe>
 800295e:	4638      	mov	r0, r7
 8002960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002964:	89ab      	ldrh	r3, [r5, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d907      	bls.n	800297a <_fwalk_reent+0x3a>
 800296a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800296e:	3301      	adds	r3, #1
 8002970:	d003      	beq.n	800297a <_fwalk_reent+0x3a>
 8002972:	4629      	mov	r1, r5
 8002974:	4630      	mov	r0, r6
 8002976:	47c0      	blx	r8
 8002978:	4307      	orrs	r7, r0
 800297a:	3568      	adds	r5, #104	; 0x68
 800297c:	e7e9      	b.n	8002952 <_fwalk_reent+0x12>

0800297e <__retarget_lock_init_recursive>:
 800297e:	4770      	bx	lr

08002980 <__retarget_lock_acquire_recursive>:
 8002980:	4770      	bx	lr

08002982 <__retarget_lock_release_recursive>:
 8002982:	4770      	bx	lr

08002984 <_malloc_r>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	1ccd      	adds	r5, r1, #3
 8002988:	f025 0503 	bic.w	r5, r5, #3
 800298c:	3508      	adds	r5, #8
 800298e:	2d0c      	cmp	r5, #12
 8002990:	bf38      	it	cc
 8002992:	250c      	movcc	r5, #12
 8002994:	2d00      	cmp	r5, #0
 8002996:	4606      	mov	r6, r0
 8002998:	db01      	blt.n	800299e <_malloc_r+0x1a>
 800299a:	42a9      	cmp	r1, r5
 800299c:	d903      	bls.n	80029a6 <_malloc_r+0x22>
 800299e:	230c      	movs	r3, #12
 80029a0:	6033      	str	r3, [r6, #0]
 80029a2:	2000      	movs	r0, #0
 80029a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a6:	f000 fdb1 	bl	800350c <__malloc_lock>
 80029aa:	4921      	ldr	r1, [pc, #132]	; (8002a30 <_malloc_r+0xac>)
 80029ac:	680a      	ldr	r2, [r1, #0]
 80029ae:	4614      	mov	r4, r2
 80029b0:	b99c      	cbnz	r4, 80029da <_malloc_r+0x56>
 80029b2:	4f20      	ldr	r7, [pc, #128]	; (8002a34 <_malloc_r+0xb0>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b923      	cbnz	r3, 80029c2 <_malloc_r+0x3e>
 80029b8:	4621      	mov	r1, r4
 80029ba:	4630      	mov	r0, r6
 80029bc:	f000 fb2a 	bl	8003014 <_sbrk_r>
 80029c0:	6038      	str	r0, [r7, #0]
 80029c2:	4629      	mov	r1, r5
 80029c4:	4630      	mov	r0, r6
 80029c6:	f000 fb25 	bl	8003014 <_sbrk_r>
 80029ca:	1c43      	adds	r3, r0, #1
 80029cc:	d123      	bne.n	8002a16 <_malloc_r+0x92>
 80029ce:	230c      	movs	r3, #12
 80029d0:	4630      	mov	r0, r6
 80029d2:	6033      	str	r3, [r6, #0]
 80029d4:	f000 fda0 	bl	8003518 <__malloc_unlock>
 80029d8:	e7e3      	b.n	80029a2 <_malloc_r+0x1e>
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	1b5b      	subs	r3, r3, r5
 80029de:	d417      	bmi.n	8002a10 <_malloc_r+0x8c>
 80029e0:	2b0b      	cmp	r3, #11
 80029e2:	d903      	bls.n	80029ec <_malloc_r+0x68>
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	441c      	add	r4, r3
 80029e8:	6025      	str	r5, [r4, #0]
 80029ea:	e004      	b.n	80029f6 <_malloc_r+0x72>
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	42a2      	cmp	r2, r4
 80029f0:	bf0c      	ite	eq
 80029f2:	600b      	streq	r3, [r1, #0]
 80029f4:	6053      	strne	r3, [r2, #4]
 80029f6:	4630      	mov	r0, r6
 80029f8:	f000 fd8e 	bl	8003518 <__malloc_unlock>
 80029fc:	f104 000b 	add.w	r0, r4, #11
 8002a00:	1d23      	adds	r3, r4, #4
 8002a02:	f020 0007 	bic.w	r0, r0, #7
 8002a06:	1ac2      	subs	r2, r0, r3
 8002a08:	d0cc      	beq.n	80029a4 <_malloc_r+0x20>
 8002a0a:	1a1b      	subs	r3, r3, r0
 8002a0c:	50a3      	str	r3, [r4, r2]
 8002a0e:	e7c9      	b.n	80029a4 <_malloc_r+0x20>
 8002a10:	4622      	mov	r2, r4
 8002a12:	6864      	ldr	r4, [r4, #4]
 8002a14:	e7cc      	b.n	80029b0 <_malloc_r+0x2c>
 8002a16:	1cc4      	adds	r4, r0, #3
 8002a18:	f024 0403 	bic.w	r4, r4, #3
 8002a1c:	42a0      	cmp	r0, r4
 8002a1e:	d0e3      	beq.n	80029e8 <_malloc_r+0x64>
 8002a20:	1a21      	subs	r1, r4, r0
 8002a22:	4630      	mov	r0, r6
 8002a24:	f000 faf6 	bl	8003014 <_sbrk_r>
 8002a28:	3001      	adds	r0, #1
 8002a2a:	d1dd      	bne.n	80029e8 <_malloc_r+0x64>
 8002a2c:	e7cf      	b.n	80029ce <_malloc_r+0x4a>
 8002a2e:	bf00      	nop
 8002a30:	200000d0 	.word	0x200000d0
 8002a34:	200000d4 	.word	0x200000d4

08002a38 <__sfputc_r>:
 8002a38:	6893      	ldr	r3, [r2, #8]
 8002a3a:	b410      	push	{r4}
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	6093      	str	r3, [r2, #8]
 8002a42:	da07      	bge.n	8002a54 <__sfputc_r+0x1c>
 8002a44:	6994      	ldr	r4, [r2, #24]
 8002a46:	42a3      	cmp	r3, r4
 8002a48:	db01      	blt.n	8002a4e <__sfputc_r+0x16>
 8002a4a:	290a      	cmp	r1, #10
 8002a4c:	d102      	bne.n	8002a54 <__sfputc_r+0x1c>
 8002a4e:	bc10      	pop	{r4}
 8002a50:	f000 bb34 	b.w	80030bc <__swbuf_r>
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	1c58      	adds	r0, r3, #1
 8002a58:	6010      	str	r0, [r2, #0]
 8002a5a:	7019      	strb	r1, [r3, #0]
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	bc10      	pop	{r4}
 8002a60:	4770      	bx	lr

08002a62 <__sfputs_r>:
 8002a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a64:	4606      	mov	r6, r0
 8002a66:	460f      	mov	r7, r1
 8002a68:	4614      	mov	r4, r2
 8002a6a:	18d5      	adds	r5, r2, r3
 8002a6c:	42ac      	cmp	r4, r5
 8002a6e:	d101      	bne.n	8002a74 <__sfputs_r+0x12>
 8002a70:	2000      	movs	r0, #0
 8002a72:	e007      	b.n	8002a84 <__sfputs_r+0x22>
 8002a74:	463a      	mov	r2, r7
 8002a76:	4630      	mov	r0, r6
 8002a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a7c:	f7ff ffdc 	bl	8002a38 <__sfputc_r>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d1f3      	bne.n	8002a6c <__sfputs_r+0xa>
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a88 <_vfiprintf_r>:
 8002a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8c:	460d      	mov	r5, r1
 8002a8e:	4614      	mov	r4, r2
 8002a90:	4698      	mov	r8, r3
 8002a92:	4606      	mov	r6, r0
 8002a94:	b09d      	sub	sp, #116	; 0x74
 8002a96:	b118      	cbz	r0, 8002aa0 <_vfiprintf_r+0x18>
 8002a98:	6983      	ldr	r3, [r0, #24]
 8002a9a:	b90b      	cbnz	r3, 8002aa0 <_vfiprintf_r+0x18>
 8002a9c:	f7ff fed2 	bl	8002844 <__sinit>
 8002aa0:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <_vfiprintf_r+0x240>)
 8002aa2:	429d      	cmp	r5, r3
 8002aa4:	d11b      	bne.n	8002ade <_vfiprintf_r+0x56>
 8002aa6:	6875      	ldr	r5, [r6, #4]
 8002aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002aaa:	07d9      	lsls	r1, r3, #31
 8002aac:	d405      	bmi.n	8002aba <_vfiprintf_r+0x32>
 8002aae:	89ab      	ldrh	r3, [r5, #12]
 8002ab0:	059a      	lsls	r2, r3, #22
 8002ab2:	d402      	bmi.n	8002aba <_vfiprintf_r+0x32>
 8002ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ab6:	f7ff ff63 	bl	8002980 <__retarget_lock_acquire_recursive>
 8002aba:	89ab      	ldrh	r3, [r5, #12]
 8002abc:	071b      	lsls	r3, r3, #28
 8002abe:	d501      	bpl.n	8002ac4 <_vfiprintf_r+0x3c>
 8002ac0:	692b      	ldr	r3, [r5, #16]
 8002ac2:	b9eb      	cbnz	r3, 8002b00 <_vfiprintf_r+0x78>
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f000 fb5c 	bl	8003184 <__swsetup_r>
 8002acc:	b1c0      	cbz	r0, 8002b00 <_vfiprintf_r+0x78>
 8002ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ad0:	07dc      	lsls	r4, r3, #31
 8002ad2:	d50e      	bpl.n	8002af2 <_vfiprintf_r+0x6a>
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad8:	b01d      	add	sp, #116	; 0x74
 8002ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ade:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <_vfiprintf_r+0x244>)
 8002ae0:	429d      	cmp	r5, r3
 8002ae2:	d101      	bne.n	8002ae8 <_vfiprintf_r+0x60>
 8002ae4:	68b5      	ldr	r5, [r6, #8]
 8002ae6:	e7df      	b.n	8002aa8 <_vfiprintf_r+0x20>
 8002ae8:	4b79      	ldr	r3, [pc, #484]	; (8002cd0 <_vfiprintf_r+0x248>)
 8002aea:	429d      	cmp	r5, r3
 8002aec:	bf08      	it	eq
 8002aee:	68f5      	ldreq	r5, [r6, #12]
 8002af0:	e7da      	b.n	8002aa8 <_vfiprintf_r+0x20>
 8002af2:	89ab      	ldrh	r3, [r5, #12]
 8002af4:	0598      	lsls	r0, r3, #22
 8002af6:	d4ed      	bmi.n	8002ad4 <_vfiprintf_r+0x4c>
 8002af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002afa:	f7ff ff42 	bl	8002982 <__retarget_lock_release_recursive>
 8002afe:	e7e9      	b.n	8002ad4 <_vfiprintf_r+0x4c>
 8002b00:	2300      	movs	r3, #0
 8002b02:	9309      	str	r3, [sp, #36]	; 0x24
 8002b04:	2320      	movs	r3, #32
 8002b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b0a:	2330      	movs	r3, #48	; 0x30
 8002b0c:	f04f 0901 	mov.w	r9, #1
 8002b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002cd4 <_vfiprintf_r+0x24c>
 8002b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b1c:	4623      	mov	r3, r4
 8002b1e:	469a      	mov	sl, r3
 8002b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b24:	b10a      	cbz	r2, 8002b2a <_vfiprintf_r+0xa2>
 8002b26:	2a25      	cmp	r2, #37	; 0x25
 8002b28:	d1f9      	bne.n	8002b1e <_vfiprintf_r+0x96>
 8002b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8002b2e:	d00b      	beq.n	8002b48 <_vfiprintf_r+0xc0>
 8002b30:	465b      	mov	r3, fp
 8002b32:	4622      	mov	r2, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	4630      	mov	r0, r6
 8002b38:	f7ff ff93 	bl	8002a62 <__sfputs_r>
 8002b3c:	3001      	adds	r0, #1
 8002b3e:	f000 80aa 	beq.w	8002c96 <_vfiprintf_r+0x20e>
 8002b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b44:	445a      	add	r2, fp
 8002b46:	9209      	str	r2, [sp, #36]	; 0x24
 8002b48:	f89a 3000 	ldrb.w	r3, [sl]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a2 	beq.w	8002c96 <_vfiprintf_r+0x20e>
 8002b52:	2300      	movs	r3, #0
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b5c:	f10a 0a01 	add.w	sl, sl, #1
 8002b60:	9304      	str	r3, [sp, #16]
 8002b62:	9307      	str	r3, [sp, #28]
 8002b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b68:	931a      	str	r3, [sp, #104]	; 0x68
 8002b6a:	4654      	mov	r4, sl
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b72:	4858      	ldr	r0, [pc, #352]	; (8002cd4 <_vfiprintf_r+0x24c>)
 8002b74:	f000 fcbc 	bl	80034f0 <memchr>
 8002b78:	9a04      	ldr	r2, [sp, #16]
 8002b7a:	b9d8      	cbnz	r0, 8002bb4 <_vfiprintf_r+0x12c>
 8002b7c:	06d1      	lsls	r1, r2, #27
 8002b7e:	bf44      	itt	mi
 8002b80:	2320      	movmi	r3, #32
 8002b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b86:	0713      	lsls	r3, r2, #28
 8002b88:	bf44      	itt	mi
 8002b8a:	232b      	movmi	r3, #43	; 0x2b
 8002b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b90:	f89a 3000 	ldrb.w	r3, [sl]
 8002b94:	2b2a      	cmp	r3, #42	; 0x2a
 8002b96:	d015      	beq.n	8002bc4 <_vfiprintf_r+0x13c>
 8002b98:	4654      	mov	r4, sl
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f04f 0c0a 	mov.w	ip, #10
 8002ba0:	9a07      	ldr	r2, [sp, #28]
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ba8:	3b30      	subs	r3, #48	; 0x30
 8002baa:	2b09      	cmp	r3, #9
 8002bac:	d94e      	bls.n	8002c4c <_vfiprintf_r+0x1c4>
 8002bae:	b1b0      	cbz	r0, 8002bde <_vfiprintf_r+0x156>
 8002bb0:	9207      	str	r2, [sp, #28]
 8002bb2:	e014      	b.n	8002bde <_vfiprintf_r+0x156>
 8002bb4:	eba0 0308 	sub.w	r3, r0, r8
 8002bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	46a2      	mov	sl, r4
 8002bc0:	9304      	str	r3, [sp, #16]
 8002bc2:	e7d2      	b.n	8002b6a <_vfiprintf_r+0xe2>
 8002bc4:	9b03      	ldr	r3, [sp, #12]
 8002bc6:	1d19      	adds	r1, r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	9103      	str	r1, [sp, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bfbb      	ittet	lt
 8002bd0:	425b      	neglt	r3, r3
 8002bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8002bd6:	9307      	strge	r3, [sp, #28]
 8002bd8:	9307      	strlt	r3, [sp, #28]
 8002bda:	bfb8      	it	lt
 8002bdc:	9204      	strlt	r2, [sp, #16]
 8002bde:	7823      	ldrb	r3, [r4, #0]
 8002be0:	2b2e      	cmp	r3, #46	; 0x2e
 8002be2:	d10c      	bne.n	8002bfe <_vfiprintf_r+0x176>
 8002be4:	7863      	ldrb	r3, [r4, #1]
 8002be6:	2b2a      	cmp	r3, #42	; 0x2a
 8002be8:	d135      	bne.n	8002c56 <_vfiprintf_r+0x1ce>
 8002bea:	9b03      	ldr	r3, [sp, #12]
 8002bec:	3402      	adds	r4, #2
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	9203      	str	r2, [sp, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bfb8      	it	lt
 8002bf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bfc:	9305      	str	r3, [sp, #20]
 8002bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002ce4 <_vfiprintf_r+0x25c>
 8002c02:	2203      	movs	r2, #3
 8002c04:	4650      	mov	r0, sl
 8002c06:	7821      	ldrb	r1, [r4, #0]
 8002c08:	f000 fc72 	bl	80034f0 <memchr>
 8002c0c:	b140      	cbz	r0, 8002c20 <_vfiprintf_r+0x198>
 8002c0e:	2340      	movs	r3, #64	; 0x40
 8002c10:	eba0 000a 	sub.w	r0, r0, sl
 8002c14:	fa03 f000 	lsl.w	r0, r3, r0
 8002c18:	9b04      	ldr	r3, [sp, #16]
 8002c1a:	3401      	adds	r4, #1
 8002c1c:	4303      	orrs	r3, r0
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c24:	2206      	movs	r2, #6
 8002c26:	482c      	ldr	r0, [pc, #176]	; (8002cd8 <_vfiprintf_r+0x250>)
 8002c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c2c:	f000 fc60 	bl	80034f0 <memchr>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d03f      	beq.n	8002cb4 <_vfiprintf_r+0x22c>
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <_vfiprintf_r+0x254>)
 8002c36:	bb1b      	cbnz	r3, 8002c80 <_vfiprintf_r+0x1f8>
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	3307      	adds	r3, #7
 8002c3c:	f023 0307 	bic.w	r3, r3, #7
 8002c40:	3308      	adds	r3, #8
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c46:	443b      	add	r3, r7
 8002c48:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4a:	e767      	b.n	8002b1c <_vfiprintf_r+0x94>
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	2001      	movs	r0, #1
 8002c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c54:	e7a5      	b.n	8002ba2 <_vfiprintf_r+0x11a>
 8002c56:	2300      	movs	r3, #0
 8002c58:	f04f 0c0a 	mov.w	ip, #10
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	3401      	adds	r4, #1
 8002c60:	9305      	str	r3, [sp, #20]
 8002c62:	4620      	mov	r0, r4
 8002c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c68:	3a30      	subs	r2, #48	; 0x30
 8002c6a:	2a09      	cmp	r2, #9
 8002c6c:	d903      	bls.n	8002c76 <_vfiprintf_r+0x1ee>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0c5      	beq.n	8002bfe <_vfiprintf_r+0x176>
 8002c72:	9105      	str	r1, [sp, #20]
 8002c74:	e7c3      	b.n	8002bfe <_vfiprintf_r+0x176>
 8002c76:	4604      	mov	r4, r0
 8002c78:	2301      	movs	r3, #1
 8002c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c7e:	e7f0      	b.n	8002c62 <_vfiprintf_r+0x1da>
 8002c80:	ab03      	add	r3, sp, #12
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	462a      	mov	r2, r5
 8002c86:	4630      	mov	r0, r6
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <_vfiprintf_r+0x258>)
 8002c8a:	a904      	add	r1, sp, #16
 8002c8c:	f3af 8000 	nop.w
 8002c90:	4607      	mov	r7, r0
 8002c92:	1c78      	adds	r0, r7, #1
 8002c94:	d1d6      	bne.n	8002c44 <_vfiprintf_r+0x1bc>
 8002c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c98:	07d9      	lsls	r1, r3, #31
 8002c9a:	d405      	bmi.n	8002ca8 <_vfiprintf_r+0x220>
 8002c9c:	89ab      	ldrh	r3, [r5, #12]
 8002c9e:	059a      	lsls	r2, r3, #22
 8002ca0:	d402      	bmi.n	8002ca8 <_vfiprintf_r+0x220>
 8002ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ca4:	f7ff fe6d 	bl	8002982 <__retarget_lock_release_recursive>
 8002ca8:	89ab      	ldrh	r3, [r5, #12]
 8002caa:	065b      	lsls	r3, r3, #25
 8002cac:	f53f af12 	bmi.w	8002ad4 <_vfiprintf_r+0x4c>
 8002cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cb2:	e711      	b.n	8002ad8 <_vfiprintf_r+0x50>
 8002cb4:	ab03      	add	r3, sp, #12
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	462a      	mov	r2, r5
 8002cba:	4630      	mov	r0, r6
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <_vfiprintf_r+0x258>)
 8002cbe:	a904      	add	r1, sp, #16
 8002cc0:	f000 f882 	bl	8002dc8 <_printf_i>
 8002cc4:	e7e4      	b.n	8002c90 <_vfiprintf_r+0x208>
 8002cc6:	bf00      	nop
 8002cc8:	080036e4 	.word	0x080036e4
 8002ccc:	08003704 	.word	0x08003704
 8002cd0:	080036c4 	.word	0x080036c4
 8002cd4:	08003724 	.word	0x08003724
 8002cd8:	0800372e 	.word	0x0800372e
 8002cdc:	00000000 	.word	0x00000000
 8002ce0:	08002a63 	.word	0x08002a63
 8002ce4:	0800372a 	.word	0x0800372a

08002ce8 <_printf_common>:
 8002ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cec:	4616      	mov	r6, r2
 8002cee:	4699      	mov	r9, r3
 8002cf0:	688a      	ldr	r2, [r1, #8]
 8002cf2:	690b      	ldr	r3, [r1, #16]
 8002cf4:	4607      	mov	r7, r0
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	bfb8      	it	lt
 8002cfa:	4613      	movlt	r3, r2
 8002cfc:	6033      	str	r3, [r6, #0]
 8002cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d02:	460c      	mov	r4, r1
 8002d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d08:	b10a      	cbz	r2, 8002d0e <_printf_common+0x26>
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	6033      	str	r3, [r6, #0]
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	0699      	lsls	r1, r3, #26
 8002d12:	bf42      	ittt	mi
 8002d14:	6833      	ldrmi	r3, [r6, #0]
 8002d16:	3302      	addmi	r3, #2
 8002d18:	6033      	strmi	r3, [r6, #0]
 8002d1a:	6825      	ldr	r5, [r4, #0]
 8002d1c:	f015 0506 	ands.w	r5, r5, #6
 8002d20:	d106      	bne.n	8002d30 <_printf_common+0x48>
 8002d22:	f104 0a19 	add.w	sl, r4, #25
 8002d26:	68e3      	ldr	r3, [r4, #12]
 8002d28:	6832      	ldr	r2, [r6, #0]
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	42ab      	cmp	r3, r5
 8002d2e:	dc28      	bgt.n	8002d82 <_printf_common+0x9a>
 8002d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d34:	1e13      	subs	r3, r2, #0
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	bf18      	it	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	0692      	lsls	r2, r2, #26
 8002d3e:	d42d      	bmi.n	8002d9c <_printf_common+0xb4>
 8002d40:	4649      	mov	r1, r9
 8002d42:	4638      	mov	r0, r7
 8002d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d48:	47c0      	blx	r8
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d020      	beq.n	8002d90 <_printf_common+0xa8>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	68e5      	ldr	r5, [r4, #12]
 8002d52:	f003 0306 	and.w	r3, r3, #6
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf18      	it	ne
 8002d5a:	2500      	movne	r5, #0
 8002d5c:	6832      	ldr	r2, [r6, #0]
 8002d5e:	f04f 0600 	mov.w	r6, #0
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	bf08      	it	eq
 8002d66:	1aad      	subeq	r5, r5, r2
 8002d68:	6922      	ldr	r2, [r4, #16]
 8002d6a:	bf08      	it	eq
 8002d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d70:	4293      	cmp	r3, r2
 8002d72:	bfc4      	itt	gt
 8002d74:	1a9b      	subgt	r3, r3, r2
 8002d76:	18ed      	addgt	r5, r5, r3
 8002d78:	341a      	adds	r4, #26
 8002d7a:	42b5      	cmp	r5, r6
 8002d7c:	d11a      	bne.n	8002db4 <_printf_common+0xcc>
 8002d7e:	2000      	movs	r0, #0
 8002d80:	e008      	b.n	8002d94 <_printf_common+0xac>
 8002d82:	2301      	movs	r3, #1
 8002d84:	4652      	mov	r2, sl
 8002d86:	4649      	mov	r1, r9
 8002d88:	4638      	mov	r0, r7
 8002d8a:	47c0      	blx	r8
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	d103      	bne.n	8002d98 <_printf_common+0xb0>
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d98:	3501      	adds	r5, #1
 8002d9a:	e7c4      	b.n	8002d26 <_printf_common+0x3e>
 8002d9c:	2030      	movs	r0, #48	; 0x30
 8002d9e:	18e1      	adds	r1, r4, r3
 8002da0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002daa:	4422      	add	r2, r4
 8002dac:	3302      	adds	r3, #2
 8002dae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002db2:	e7c5      	b.n	8002d40 <_printf_common+0x58>
 8002db4:	2301      	movs	r3, #1
 8002db6:	4622      	mov	r2, r4
 8002db8:	4649      	mov	r1, r9
 8002dba:	4638      	mov	r0, r7
 8002dbc:	47c0      	blx	r8
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d0e6      	beq.n	8002d90 <_printf_common+0xa8>
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7d9      	b.n	8002d7a <_printf_common+0x92>
	...

08002dc8 <_printf_i>:
 8002dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dcc:	460c      	mov	r4, r1
 8002dce:	7e27      	ldrb	r7, [r4, #24]
 8002dd0:	4691      	mov	r9, r2
 8002dd2:	2f78      	cmp	r7, #120	; 0x78
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	469a      	mov	sl, r3
 8002dd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002dda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dde:	d807      	bhi.n	8002df0 <_printf_i+0x28>
 8002de0:	2f62      	cmp	r7, #98	; 0x62
 8002de2:	d80a      	bhi.n	8002dfa <_printf_i+0x32>
 8002de4:	2f00      	cmp	r7, #0
 8002de6:	f000 80d9 	beq.w	8002f9c <_printf_i+0x1d4>
 8002dea:	2f58      	cmp	r7, #88	; 0x58
 8002dec:	f000 80a4 	beq.w	8002f38 <_printf_i+0x170>
 8002df0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002df8:	e03a      	b.n	8002e70 <_printf_i+0xa8>
 8002dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dfe:	2b15      	cmp	r3, #21
 8002e00:	d8f6      	bhi.n	8002df0 <_printf_i+0x28>
 8002e02:	a001      	add	r0, pc, #4	; (adr r0, 8002e08 <_printf_i+0x40>)
 8002e04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e08:	08002e61 	.word	0x08002e61
 8002e0c:	08002e75 	.word	0x08002e75
 8002e10:	08002df1 	.word	0x08002df1
 8002e14:	08002df1 	.word	0x08002df1
 8002e18:	08002df1 	.word	0x08002df1
 8002e1c:	08002df1 	.word	0x08002df1
 8002e20:	08002e75 	.word	0x08002e75
 8002e24:	08002df1 	.word	0x08002df1
 8002e28:	08002df1 	.word	0x08002df1
 8002e2c:	08002df1 	.word	0x08002df1
 8002e30:	08002df1 	.word	0x08002df1
 8002e34:	08002f83 	.word	0x08002f83
 8002e38:	08002ea5 	.word	0x08002ea5
 8002e3c:	08002f65 	.word	0x08002f65
 8002e40:	08002df1 	.word	0x08002df1
 8002e44:	08002df1 	.word	0x08002df1
 8002e48:	08002fa5 	.word	0x08002fa5
 8002e4c:	08002df1 	.word	0x08002df1
 8002e50:	08002ea5 	.word	0x08002ea5
 8002e54:	08002df1 	.word	0x08002df1
 8002e58:	08002df1 	.word	0x08002df1
 8002e5c:	08002f6d 	.word	0x08002f6d
 8002e60:	680b      	ldr	r3, [r1, #0]
 8002e62:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e66:	1d1a      	adds	r2, r3, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	600a      	str	r2, [r1, #0]
 8002e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0a4      	b.n	8002fbe <_printf_i+0x1f6>
 8002e74:	6825      	ldr	r5, [r4, #0]
 8002e76:	6808      	ldr	r0, [r1, #0]
 8002e78:	062e      	lsls	r6, r5, #24
 8002e7a:	f100 0304 	add.w	r3, r0, #4
 8002e7e:	d50a      	bpl.n	8002e96 <_printf_i+0xce>
 8002e80:	6805      	ldr	r5, [r0, #0]
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	da03      	bge.n	8002e90 <_printf_i+0xc8>
 8002e88:	232d      	movs	r3, #45	; 0x2d
 8002e8a:	426d      	negs	r5, r5
 8002e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e90:	230a      	movs	r3, #10
 8002e92:	485e      	ldr	r0, [pc, #376]	; (800300c <_printf_i+0x244>)
 8002e94:	e019      	b.n	8002eca <_printf_i+0x102>
 8002e96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e9a:	6805      	ldr	r5, [r0, #0]
 8002e9c:	600b      	str	r3, [r1, #0]
 8002e9e:	bf18      	it	ne
 8002ea0:	b22d      	sxthne	r5, r5
 8002ea2:	e7ef      	b.n	8002e84 <_printf_i+0xbc>
 8002ea4:	680b      	ldr	r3, [r1, #0]
 8002ea6:	6825      	ldr	r5, [r4, #0]
 8002ea8:	1d18      	adds	r0, r3, #4
 8002eaa:	6008      	str	r0, [r1, #0]
 8002eac:	0628      	lsls	r0, r5, #24
 8002eae:	d501      	bpl.n	8002eb4 <_printf_i+0xec>
 8002eb0:	681d      	ldr	r5, [r3, #0]
 8002eb2:	e002      	b.n	8002eba <_printf_i+0xf2>
 8002eb4:	0669      	lsls	r1, r5, #25
 8002eb6:	d5fb      	bpl.n	8002eb0 <_printf_i+0xe8>
 8002eb8:	881d      	ldrh	r5, [r3, #0]
 8002eba:	2f6f      	cmp	r7, #111	; 0x6f
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2308      	moveq	r3, #8
 8002ec0:	230a      	movne	r3, #10
 8002ec2:	4852      	ldr	r0, [pc, #328]	; (800300c <_printf_i+0x244>)
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002eca:	6866      	ldr	r6, [r4, #4]
 8002ecc:	2e00      	cmp	r6, #0
 8002ece:	bfa8      	it	ge
 8002ed0:	6821      	ldrge	r1, [r4, #0]
 8002ed2:	60a6      	str	r6, [r4, #8]
 8002ed4:	bfa4      	itt	ge
 8002ed6:	f021 0104 	bicge.w	r1, r1, #4
 8002eda:	6021      	strge	r1, [r4, #0]
 8002edc:	b90d      	cbnz	r5, 8002ee2 <_printf_i+0x11a>
 8002ede:	2e00      	cmp	r6, #0
 8002ee0:	d04d      	beq.n	8002f7e <_printf_i+0x1b6>
 8002ee2:	4616      	mov	r6, r2
 8002ee4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ee8:	fb03 5711 	mls	r7, r3, r1, r5
 8002eec:	5dc7      	ldrb	r7, [r0, r7]
 8002eee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ef2:	462f      	mov	r7, r5
 8002ef4:	42bb      	cmp	r3, r7
 8002ef6:	460d      	mov	r5, r1
 8002ef8:	d9f4      	bls.n	8002ee4 <_printf_i+0x11c>
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d10b      	bne.n	8002f16 <_printf_i+0x14e>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	07df      	lsls	r7, r3, #31
 8002f02:	d508      	bpl.n	8002f16 <_printf_i+0x14e>
 8002f04:	6923      	ldr	r3, [r4, #16]
 8002f06:	6861      	ldr	r1, [r4, #4]
 8002f08:	4299      	cmp	r1, r3
 8002f0a:	bfde      	ittt	le
 8002f0c:	2330      	movle	r3, #48	; 0x30
 8002f0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f12:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002f16:	1b92      	subs	r2, r2, r6
 8002f18:	6122      	str	r2, [r4, #16]
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	4640      	mov	r0, r8
 8002f20:	f8cd a000 	str.w	sl, [sp]
 8002f24:	aa03      	add	r2, sp, #12
 8002f26:	f7ff fedf 	bl	8002ce8 <_printf_common>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d14c      	bne.n	8002fc8 <_printf_i+0x200>
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f32:	b004      	add	sp, #16
 8002f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f38:	4834      	ldr	r0, [pc, #208]	; (800300c <_printf_i+0x244>)
 8002f3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f3e:	680e      	ldr	r6, [r1, #0]
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f46:	061f      	lsls	r7, r3, #24
 8002f48:	600e      	str	r6, [r1, #0]
 8002f4a:	d514      	bpl.n	8002f76 <_printf_i+0x1ae>
 8002f4c:	07d9      	lsls	r1, r3, #31
 8002f4e:	bf44      	itt	mi
 8002f50:	f043 0320 	orrmi.w	r3, r3, #32
 8002f54:	6023      	strmi	r3, [r4, #0]
 8002f56:	b91d      	cbnz	r5, 8002f60 <_printf_i+0x198>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	f023 0320 	bic.w	r3, r3, #32
 8002f5e:	6023      	str	r3, [r4, #0]
 8002f60:	2310      	movs	r3, #16
 8002f62:	e7af      	b.n	8002ec4 <_printf_i+0xfc>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	2378      	movs	r3, #120	; 0x78
 8002f6e:	4828      	ldr	r0, [pc, #160]	; (8003010 <_printf_i+0x248>)
 8002f70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f74:	e7e3      	b.n	8002f3e <_printf_i+0x176>
 8002f76:	065e      	lsls	r6, r3, #25
 8002f78:	bf48      	it	mi
 8002f7a:	b2ad      	uxthmi	r5, r5
 8002f7c:	e7e6      	b.n	8002f4c <_printf_i+0x184>
 8002f7e:	4616      	mov	r6, r2
 8002f80:	e7bb      	b.n	8002efa <_printf_i+0x132>
 8002f82:	680b      	ldr	r3, [r1, #0]
 8002f84:	6826      	ldr	r6, [r4, #0]
 8002f86:	1d1d      	adds	r5, r3, #4
 8002f88:	6960      	ldr	r0, [r4, #20]
 8002f8a:	600d      	str	r5, [r1, #0]
 8002f8c:	0635      	lsls	r5, r6, #24
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	d501      	bpl.n	8002f96 <_printf_i+0x1ce>
 8002f92:	6018      	str	r0, [r3, #0]
 8002f94:	e002      	b.n	8002f9c <_printf_i+0x1d4>
 8002f96:	0671      	lsls	r1, r6, #25
 8002f98:	d5fb      	bpl.n	8002f92 <_printf_i+0x1ca>
 8002f9a:	8018      	strh	r0, [r3, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	4616      	mov	r6, r2
 8002fa0:	6123      	str	r3, [r4, #16]
 8002fa2:	e7ba      	b.n	8002f1a <_printf_i+0x152>
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	600a      	str	r2, [r1, #0]
 8002faa:	681e      	ldr	r6, [r3, #0]
 8002fac:	2100      	movs	r1, #0
 8002fae:	4630      	mov	r0, r6
 8002fb0:	6862      	ldr	r2, [r4, #4]
 8002fb2:	f000 fa9d 	bl	80034f0 <memchr>
 8002fb6:	b108      	cbz	r0, 8002fbc <_printf_i+0x1f4>
 8002fb8:	1b80      	subs	r0, r0, r6
 8002fba:	6060      	str	r0, [r4, #4]
 8002fbc:	6863      	ldr	r3, [r4, #4]
 8002fbe:	6123      	str	r3, [r4, #16]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fc6:	e7a8      	b.n	8002f1a <_printf_i+0x152>
 8002fc8:	4632      	mov	r2, r6
 8002fca:	4649      	mov	r1, r9
 8002fcc:	4640      	mov	r0, r8
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	47d0      	blx	sl
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d0ab      	beq.n	8002f2e <_printf_i+0x166>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	079b      	lsls	r3, r3, #30
 8002fda:	d413      	bmi.n	8003004 <_printf_i+0x23c>
 8002fdc:	68e0      	ldr	r0, [r4, #12]
 8002fde:	9b03      	ldr	r3, [sp, #12]
 8002fe0:	4298      	cmp	r0, r3
 8002fe2:	bfb8      	it	lt
 8002fe4:	4618      	movlt	r0, r3
 8002fe6:	e7a4      	b.n	8002f32 <_printf_i+0x16a>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4632      	mov	r2, r6
 8002fec:	4649      	mov	r1, r9
 8002fee:	4640      	mov	r0, r8
 8002ff0:	47d0      	blx	sl
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d09b      	beq.n	8002f2e <_printf_i+0x166>
 8002ff6:	3501      	adds	r5, #1
 8002ff8:	68e3      	ldr	r3, [r4, #12]
 8002ffa:	9903      	ldr	r1, [sp, #12]
 8002ffc:	1a5b      	subs	r3, r3, r1
 8002ffe:	42ab      	cmp	r3, r5
 8003000:	dcf2      	bgt.n	8002fe8 <_printf_i+0x220>
 8003002:	e7eb      	b.n	8002fdc <_printf_i+0x214>
 8003004:	2500      	movs	r5, #0
 8003006:	f104 0619 	add.w	r6, r4, #25
 800300a:	e7f5      	b.n	8002ff8 <_printf_i+0x230>
 800300c:	08003735 	.word	0x08003735
 8003010:	08003746 	.word	0x08003746

08003014 <_sbrk_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	2300      	movs	r3, #0
 8003018:	4d05      	ldr	r5, [pc, #20]	; (8003030 <_sbrk_r+0x1c>)
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	f7fd fbe0 	bl	80007e4 <_sbrk>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_sbrk_r+0x1a>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b103      	cbz	r3, 800302e <_sbrk_r+0x1a>
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000178 	.word	0x20000178

08003034 <__sread>:
 8003034:	b510      	push	{r4, lr}
 8003036:	460c      	mov	r4, r1
 8003038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303c:	f000 fabe 	bl	80035bc <_read_r>
 8003040:	2800      	cmp	r0, #0
 8003042:	bfab      	itete	ge
 8003044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003046:	89a3      	ldrhlt	r3, [r4, #12]
 8003048:	181b      	addge	r3, r3, r0
 800304a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800304e:	bfac      	ite	ge
 8003050:	6563      	strge	r3, [r4, #84]	; 0x54
 8003052:	81a3      	strhlt	r3, [r4, #12]
 8003054:	bd10      	pop	{r4, pc}

08003056 <__swrite>:
 8003056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800305a:	461f      	mov	r7, r3
 800305c:	898b      	ldrh	r3, [r1, #12]
 800305e:	4605      	mov	r5, r0
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	460c      	mov	r4, r1
 8003064:	4616      	mov	r6, r2
 8003066:	d505      	bpl.n	8003074 <__swrite+0x1e>
 8003068:	2302      	movs	r3, #2
 800306a:	2200      	movs	r2, #0
 800306c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003070:	f000 f9c8 	bl	8003404 <_lseek_r>
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	4632      	mov	r2, r6
 8003078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	4628      	mov	r0, r5
 8003080:	463b      	mov	r3, r7
 8003082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800308a:	f000 b869 	b.w	8003160 <_write_r>

0800308e <__sseek>:
 800308e:	b510      	push	{r4, lr}
 8003090:	460c      	mov	r4, r1
 8003092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003096:	f000 f9b5 	bl	8003404 <_lseek_r>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	bf15      	itete	ne
 80030a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80030a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030aa:	81a3      	strheq	r3, [r4, #12]
 80030ac:	bf18      	it	ne
 80030ae:	81a3      	strhne	r3, [r4, #12]
 80030b0:	bd10      	pop	{r4, pc}

080030b2 <__sclose>:
 80030b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b6:	f000 b8d3 	b.w	8003260 <_close_r>
	...

080030bc <__swbuf_r>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	460e      	mov	r6, r1
 80030c0:	4614      	mov	r4, r2
 80030c2:	4605      	mov	r5, r0
 80030c4:	b118      	cbz	r0, 80030ce <__swbuf_r+0x12>
 80030c6:	6983      	ldr	r3, [r0, #24]
 80030c8:	b90b      	cbnz	r3, 80030ce <__swbuf_r+0x12>
 80030ca:	f7ff fbbb 	bl	8002844 <__sinit>
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <__swbuf_r+0x98>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d12b      	bne.n	800312c <__swbuf_r+0x70>
 80030d4:	686c      	ldr	r4, [r5, #4]
 80030d6:	69a3      	ldr	r3, [r4, #24]
 80030d8:	60a3      	str	r3, [r4, #8]
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	071a      	lsls	r2, r3, #28
 80030de:	d52f      	bpl.n	8003140 <__swbuf_r+0x84>
 80030e0:	6923      	ldr	r3, [r4, #16]
 80030e2:	b36b      	cbz	r3, 8003140 <__swbuf_r+0x84>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	b2f6      	uxtb	r6, r6
 80030ea:	1ac0      	subs	r0, r0, r3
 80030ec:	6963      	ldr	r3, [r4, #20]
 80030ee:	4637      	mov	r7, r6
 80030f0:	4283      	cmp	r3, r0
 80030f2:	dc04      	bgt.n	80030fe <__swbuf_r+0x42>
 80030f4:	4621      	mov	r1, r4
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 f948 	bl	800338c <_fflush_r>
 80030fc:	bb30      	cbnz	r0, 800314c <__swbuf_r+0x90>
 80030fe:	68a3      	ldr	r3, [r4, #8]
 8003100:	3001      	adds	r0, #1
 8003102:	3b01      	subs	r3, #1
 8003104:	60a3      	str	r3, [r4, #8]
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	6022      	str	r2, [r4, #0]
 800310c:	701e      	strb	r6, [r3, #0]
 800310e:	6963      	ldr	r3, [r4, #20]
 8003110:	4283      	cmp	r3, r0
 8003112:	d004      	beq.n	800311e <__swbuf_r+0x62>
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	07db      	lsls	r3, r3, #31
 8003118:	d506      	bpl.n	8003128 <__swbuf_r+0x6c>
 800311a:	2e0a      	cmp	r6, #10
 800311c:	d104      	bne.n	8003128 <__swbuf_r+0x6c>
 800311e:	4621      	mov	r1, r4
 8003120:	4628      	mov	r0, r5
 8003122:	f000 f933 	bl	800338c <_fflush_r>
 8003126:	b988      	cbnz	r0, 800314c <__swbuf_r+0x90>
 8003128:	4638      	mov	r0, r7
 800312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <__swbuf_r+0x9c>)
 800312e:	429c      	cmp	r4, r3
 8003130:	d101      	bne.n	8003136 <__swbuf_r+0x7a>
 8003132:	68ac      	ldr	r4, [r5, #8]
 8003134:	e7cf      	b.n	80030d6 <__swbuf_r+0x1a>
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <__swbuf_r+0xa0>)
 8003138:	429c      	cmp	r4, r3
 800313a:	bf08      	it	eq
 800313c:	68ec      	ldreq	r4, [r5, #12]
 800313e:	e7ca      	b.n	80030d6 <__swbuf_r+0x1a>
 8003140:	4621      	mov	r1, r4
 8003142:	4628      	mov	r0, r5
 8003144:	f000 f81e 	bl	8003184 <__swsetup_r>
 8003148:	2800      	cmp	r0, #0
 800314a:	d0cb      	beq.n	80030e4 <__swbuf_r+0x28>
 800314c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003150:	e7ea      	b.n	8003128 <__swbuf_r+0x6c>
 8003152:	bf00      	nop
 8003154:	080036e4 	.word	0x080036e4
 8003158:	08003704 	.word	0x08003704
 800315c:	080036c4 	.word	0x080036c4

08003160 <_write_r>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	2200      	movs	r2, #0
 800316a:	4d05      	ldr	r5, [pc, #20]	; (8003180 <_write_r+0x20>)
 800316c:	602a      	str	r2, [r5, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	f7fd faeb 	bl	800074a <_write>
 8003174:	1c43      	adds	r3, r0, #1
 8003176:	d102      	bne.n	800317e <_write_r+0x1e>
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	b103      	cbz	r3, 800317e <_write_r+0x1e>
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	bd38      	pop	{r3, r4, r5, pc}
 8003180:	20000178 	.word	0x20000178

08003184 <__swsetup_r>:
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <__swsetup_r+0xcc>)
 8003186:	b570      	push	{r4, r5, r6, lr}
 8003188:	681d      	ldr	r5, [r3, #0]
 800318a:	4606      	mov	r6, r0
 800318c:	460c      	mov	r4, r1
 800318e:	b125      	cbz	r5, 800319a <__swsetup_r+0x16>
 8003190:	69ab      	ldr	r3, [r5, #24]
 8003192:	b913      	cbnz	r3, 800319a <__swsetup_r+0x16>
 8003194:	4628      	mov	r0, r5
 8003196:	f7ff fb55 	bl	8002844 <__sinit>
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <__swsetup_r+0xd0>)
 800319c:	429c      	cmp	r4, r3
 800319e:	d10f      	bne.n	80031c0 <__swsetup_r+0x3c>
 80031a0:	686c      	ldr	r4, [r5, #4]
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031a8:	0719      	lsls	r1, r3, #28
 80031aa:	d42c      	bmi.n	8003206 <__swsetup_r+0x82>
 80031ac:	06dd      	lsls	r5, r3, #27
 80031ae:	d411      	bmi.n	80031d4 <__swsetup_r+0x50>
 80031b0:	2309      	movs	r3, #9
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	e03e      	b.n	800323e <__swsetup_r+0xba>
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <__swsetup_r+0xd4>)
 80031c2:	429c      	cmp	r4, r3
 80031c4:	d101      	bne.n	80031ca <__swsetup_r+0x46>
 80031c6:	68ac      	ldr	r4, [r5, #8]
 80031c8:	e7eb      	b.n	80031a2 <__swsetup_r+0x1e>
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <__swsetup_r+0xd8>)
 80031cc:	429c      	cmp	r4, r3
 80031ce:	bf08      	it	eq
 80031d0:	68ec      	ldreq	r4, [r5, #12]
 80031d2:	e7e6      	b.n	80031a2 <__swsetup_r+0x1e>
 80031d4:	0758      	lsls	r0, r3, #29
 80031d6:	d512      	bpl.n	80031fe <__swsetup_r+0x7a>
 80031d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031da:	b141      	cbz	r1, 80031ee <__swsetup_r+0x6a>
 80031dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <__swsetup_r+0x66>
 80031e4:	4630      	mov	r0, r6
 80031e6:	f000 f99d 	bl	8003524 <_free_r>
 80031ea:	2300      	movs	r3, #0
 80031ec:	6363      	str	r3, [r4, #52]	; 0x34
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031f4:	81a3      	strh	r3, [r4, #12]
 80031f6:	2300      	movs	r3, #0
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	6923      	ldr	r3, [r4, #16]
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	81a3      	strh	r3, [r4, #12]
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	b94b      	cbnz	r3, 800321e <__swsetup_r+0x9a>
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d003      	beq.n	800321e <__swsetup_r+0x9a>
 8003216:	4621      	mov	r1, r4
 8003218:	4630      	mov	r0, r6
 800321a:	f000 f929 	bl	8003470 <__smakebuf_r>
 800321e:	89a0      	ldrh	r0, [r4, #12]
 8003220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003224:	f010 0301 	ands.w	r3, r0, #1
 8003228:	d00a      	beq.n	8003240 <__swsetup_r+0xbc>
 800322a:	2300      	movs	r3, #0
 800322c:	60a3      	str	r3, [r4, #8]
 800322e:	6963      	ldr	r3, [r4, #20]
 8003230:	425b      	negs	r3, r3
 8003232:	61a3      	str	r3, [r4, #24]
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	b943      	cbnz	r3, 800324a <__swsetup_r+0xc6>
 8003238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800323c:	d1ba      	bne.n	80031b4 <__swsetup_r+0x30>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	0781      	lsls	r1, r0, #30
 8003242:	bf58      	it	pl
 8003244:	6963      	ldrpl	r3, [r4, #20]
 8003246:	60a3      	str	r3, [r4, #8]
 8003248:	e7f4      	b.n	8003234 <__swsetup_r+0xb0>
 800324a:	2000      	movs	r0, #0
 800324c:	e7f7      	b.n	800323e <__swsetup_r+0xba>
 800324e:	bf00      	nop
 8003250:	2000000c 	.word	0x2000000c
 8003254:	080036e4 	.word	0x080036e4
 8003258:	08003704 	.word	0x08003704
 800325c:	080036c4 	.word	0x080036c4

08003260 <_close_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	2300      	movs	r3, #0
 8003264:	4d05      	ldr	r5, [pc, #20]	; (800327c <_close_r+0x1c>)
 8003266:	4604      	mov	r4, r0
 8003268:	4608      	mov	r0, r1
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	f7fd fa89 	bl	8000782 <_close>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d102      	bne.n	800327a <_close_r+0x1a>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b103      	cbz	r3, 800327a <_close_r+0x1a>
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	20000178 	.word	0x20000178

08003280 <__sflush_r>:
 8003280:	898a      	ldrh	r2, [r1, #12]
 8003282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003286:	4605      	mov	r5, r0
 8003288:	0710      	lsls	r0, r2, #28
 800328a:	460c      	mov	r4, r1
 800328c:	d458      	bmi.n	8003340 <__sflush_r+0xc0>
 800328e:	684b      	ldr	r3, [r1, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	dc05      	bgt.n	80032a0 <__sflush_r+0x20>
 8003294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	dc02      	bgt.n	80032a0 <__sflush_r+0x20>
 800329a:	2000      	movs	r0, #0
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032a2:	2e00      	cmp	r6, #0
 80032a4:	d0f9      	beq.n	800329a <__sflush_r+0x1a>
 80032a6:	2300      	movs	r3, #0
 80032a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032ac:	682f      	ldr	r7, [r5, #0]
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	d032      	beq.n	8003318 <__sflush_r+0x98>
 80032b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	075a      	lsls	r2, r3, #29
 80032b8:	d505      	bpl.n	80032c6 <__sflush_r+0x46>
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	1ac0      	subs	r0, r0, r3
 80032be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032c0:	b10b      	cbz	r3, 80032c6 <__sflush_r+0x46>
 80032c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032c4:	1ac0      	subs	r0, r0, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	4602      	mov	r2, r0
 80032ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032cc:	4628      	mov	r0, r5
 80032ce:	6a21      	ldr	r1, [r4, #32]
 80032d0:	47b0      	blx	r6
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	d106      	bne.n	80032e6 <__sflush_r+0x66>
 80032d8:	6829      	ldr	r1, [r5, #0]
 80032da:	291d      	cmp	r1, #29
 80032dc:	d82c      	bhi.n	8003338 <__sflush_r+0xb8>
 80032de:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <__sflush_r+0x108>)
 80032e0:	40ca      	lsrs	r2, r1
 80032e2:	07d6      	lsls	r6, r2, #31
 80032e4:	d528      	bpl.n	8003338 <__sflush_r+0xb8>
 80032e6:	2200      	movs	r2, #0
 80032e8:	6062      	str	r2, [r4, #4]
 80032ea:	6922      	ldr	r2, [r4, #16]
 80032ec:	04d9      	lsls	r1, r3, #19
 80032ee:	6022      	str	r2, [r4, #0]
 80032f0:	d504      	bpl.n	80032fc <__sflush_r+0x7c>
 80032f2:	1c42      	adds	r2, r0, #1
 80032f4:	d101      	bne.n	80032fa <__sflush_r+0x7a>
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	b903      	cbnz	r3, 80032fc <__sflush_r+0x7c>
 80032fa:	6560      	str	r0, [r4, #84]	; 0x54
 80032fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032fe:	602f      	str	r7, [r5, #0]
 8003300:	2900      	cmp	r1, #0
 8003302:	d0ca      	beq.n	800329a <__sflush_r+0x1a>
 8003304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003308:	4299      	cmp	r1, r3
 800330a:	d002      	beq.n	8003312 <__sflush_r+0x92>
 800330c:	4628      	mov	r0, r5
 800330e:	f000 f909 	bl	8003524 <_free_r>
 8003312:	2000      	movs	r0, #0
 8003314:	6360      	str	r0, [r4, #52]	; 0x34
 8003316:	e7c1      	b.n	800329c <__sflush_r+0x1c>
 8003318:	6a21      	ldr	r1, [r4, #32]
 800331a:	2301      	movs	r3, #1
 800331c:	4628      	mov	r0, r5
 800331e:	47b0      	blx	r6
 8003320:	1c41      	adds	r1, r0, #1
 8003322:	d1c7      	bne.n	80032b4 <__sflush_r+0x34>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0c4      	beq.n	80032b4 <__sflush_r+0x34>
 800332a:	2b1d      	cmp	r3, #29
 800332c:	d001      	beq.n	8003332 <__sflush_r+0xb2>
 800332e:	2b16      	cmp	r3, #22
 8003330:	d101      	bne.n	8003336 <__sflush_r+0xb6>
 8003332:	602f      	str	r7, [r5, #0]
 8003334:	e7b1      	b.n	800329a <__sflush_r+0x1a>
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	e7ad      	b.n	800329c <__sflush_r+0x1c>
 8003340:	690f      	ldr	r7, [r1, #16]
 8003342:	2f00      	cmp	r7, #0
 8003344:	d0a9      	beq.n	800329a <__sflush_r+0x1a>
 8003346:	0793      	lsls	r3, r2, #30
 8003348:	bf18      	it	ne
 800334a:	2300      	movne	r3, #0
 800334c:	680e      	ldr	r6, [r1, #0]
 800334e:	bf08      	it	eq
 8003350:	694b      	ldreq	r3, [r1, #20]
 8003352:	eba6 0807 	sub.w	r8, r6, r7
 8003356:	600f      	str	r7, [r1, #0]
 8003358:	608b      	str	r3, [r1, #8]
 800335a:	f1b8 0f00 	cmp.w	r8, #0
 800335e:	dd9c      	ble.n	800329a <__sflush_r+0x1a>
 8003360:	4643      	mov	r3, r8
 8003362:	463a      	mov	r2, r7
 8003364:	4628      	mov	r0, r5
 8003366:	6a21      	ldr	r1, [r4, #32]
 8003368:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800336a:	47b0      	blx	r6
 800336c:	2800      	cmp	r0, #0
 800336e:	dc06      	bgt.n	800337e <__sflush_r+0xfe>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800337a:	81a3      	strh	r3, [r4, #12]
 800337c:	e78e      	b.n	800329c <__sflush_r+0x1c>
 800337e:	4407      	add	r7, r0
 8003380:	eba8 0800 	sub.w	r8, r8, r0
 8003384:	e7e9      	b.n	800335a <__sflush_r+0xda>
 8003386:	bf00      	nop
 8003388:	20400001 	.word	0x20400001

0800338c <_fflush_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	690b      	ldr	r3, [r1, #16]
 8003390:	4605      	mov	r5, r0
 8003392:	460c      	mov	r4, r1
 8003394:	b913      	cbnz	r3, 800339c <_fflush_r+0x10>
 8003396:	2500      	movs	r5, #0
 8003398:	4628      	mov	r0, r5
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	b118      	cbz	r0, 80033a6 <_fflush_r+0x1a>
 800339e:	6983      	ldr	r3, [r0, #24]
 80033a0:	b90b      	cbnz	r3, 80033a6 <_fflush_r+0x1a>
 80033a2:	f7ff fa4f 	bl	8002844 <__sinit>
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <_fflush_r+0x6c>)
 80033a8:	429c      	cmp	r4, r3
 80033aa:	d11b      	bne.n	80033e4 <_fflush_r+0x58>
 80033ac:	686c      	ldr	r4, [r5, #4]
 80033ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ef      	beq.n	8003396 <_fflush_r+0xa>
 80033b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033b8:	07d0      	lsls	r0, r2, #31
 80033ba:	d404      	bmi.n	80033c6 <_fflush_r+0x3a>
 80033bc:	0599      	lsls	r1, r3, #22
 80033be:	d402      	bmi.n	80033c6 <_fflush_r+0x3a>
 80033c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033c2:	f7ff fadd 	bl	8002980 <__retarget_lock_acquire_recursive>
 80033c6:	4628      	mov	r0, r5
 80033c8:	4621      	mov	r1, r4
 80033ca:	f7ff ff59 	bl	8003280 <__sflush_r>
 80033ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033d0:	4605      	mov	r5, r0
 80033d2:	07da      	lsls	r2, r3, #31
 80033d4:	d4e0      	bmi.n	8003398 <_fflush_r+0xc>
 80033d6:	89a3      	ldrh	r3, [r4, #12]
 80033d8:	059b      	lsls	r3, r3, #22
 80033da:	d4dd      	bmi.n	8003398 <_fflush_r+0xc>
 80033dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033de:	f7ff fad0 	bl	8002982 <__retarget_lock_release_recursive>
 80033e2:	e7d9      	b.n	8003398 <_fflush_r+0xc>
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <_fflush_r+0x70>)
 80033e6:	429c      	cmp	r4, r3
 80033e8:	d101      	bne.n	80033ee <_fflush_r+0x62>
 80033ea:	68ac      	ldr	r4, [r5, #8]
 80033ec:	e7df      	b.n	80033ae <_fflush_r+0x22>
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <_fflush_r+0x74>)
 80033f0:	429c      	cmp	r4, r3
 80033f2:	bf08      	it	eq
 80033f4:	68ec      	ldreq	r4, [r5, #12]
 80033f6:	e7da      	b.n	80033ae <_fflush_r+0x22>
 80033f8:	080036e4 	.word	0x080036e4
 80033fc:	08003704 	.word	0x08003704
 8003400:	080036c4 	.word	0x080036c4

08003404 <_lseek_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	4608      	mov	r0, r1
 800340a:	4611      	mov	r1, r2
 800340c:	2200      	movs	r2, #0
 800340e:	4d05      	ldr	r5, [pc, #20]	; (8003424 <_lseek_r+0x20>)
 8003410:	602a      	str	r2, [r5, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	f7fd f9d9 	bl	80007ca <_lseek>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d102      	bne.n	8003422 <_lseek_r+0x1e>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	b103      	cbz	r3, 8003422 <_lseek_r+0x1e>
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	20000178 	.word	0x20000178

08003428 <__swhatbuf_r>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	460e      	mov	r6, r1
 800342c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003430:	4614      	mov	r4, r2
 8003432:	2900      	cmp	r1, #0
 8003434:	461d      	mov	r5, r3
 8003436:	b096      	sub	sp, #88	; 0x58
 8003438:	da07      	bge.n	800344a <__swhatbuf_r+0x22>
 800343a:	2300      	movs	r3, #0
 800343c:	602b      	str	r3, [r5, #0]
 800343e:	89b3      	ldrh	r3, [r6, #12]
 8003440:	061a      	lsls	r2, r3, #24
 8003442:	d410      	bmi.n	8003466 <__swhatbuf_r+0x3e>
 8003444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003448:	e00e      	b.n	8003468 <__swhatbuf_r+0x40>
 800344a:	466a      	mov	r2, sp
 800344c:	f000 f8c8 	bl	80035e0 <_fstat_r>
 8003450:	2800      	cmp	r0, #0
 8003452:	dbf2      	blt.n	800343a <__swhatbuf_r+0x12>
 8003454:	9a01      	ldr	r2, [sp, #4]
 8003456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800345a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800345e:	425a      	negs	r2, r3
 8003460:	415a      	adcs	r2, r3
 8003462:	602a      	str	r2, [r5, #0]
 8003464:	e7ee      	b.n	8003444 <__swhatbuf_r+0x1c>
 8003466:	2340      	movs	r3, #64	; 0x40
 8003468:	2000      	movs	r0, #0
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	b016      	add	sp, #88	; 0x58
 800346e:	bd70      	pop	{r4, r5, r6, pc}

08003470 <__smakebuf_r>:
 8003470:	898b      	ldrh	r3, [r1, #12]
 8003472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003474:	079d      	lsls	r5, r3, #30
 8003476:	4606      	mov	r6, r0
 8003478:	460c      	mov	r4, r1
 800347a:	d507      	bpl.n	800348c <__smakebuf_r+0x1c>
 800347c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	6123      	str	r3, [r4, #16]
 8003484:	2301      	movs	r3, #1
 8003486:	6163      	str	r3, [r4, #20]
 8003488:	b002      	add	sp, #8
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	466a      	mov	r2, sp
 800348e:	ab01      	add	r3, sp, #4
 8003490:	f7ff ffca 	bl	8003428 <__swhatbuf_r>
 8003494:	9900      	ldr	r1, [sp, #0]
 8003496:	4605      	mov	r5, r0
 8003498:	4630      	mov	r0, r6
 800349a:	f7ff fa73 	bl	8002984 <_malloc_r>
 800349e:	b948      	cbnz	r0, 80034b4 <__smakebuf_r+0x44>
 80034a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d4ef      	bmi.n	8003488 <__smakebuf_r+0x18>
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	e7e3      	b.n	800347c <__smakebuf_r+0xc>
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <__smakebuf_r+0x7c>)
 80034b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	6020      	str	r0, [r4, #0]
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	9b00      	ldr	r3, [sp, #0]
 80034c4:	6120      	str	r0, [r4, #16]
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	9b01      	ldr	r3, [sp, #4]
 80034ca:	b15b      	cbz	r3, 80034e4 <__smakebuf_r+0x74>
 80034cc:	4630      	mov	r0, r6
 80034ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d2:	f000 f897 	bl	8003604 <_isatty_r>
 80034d6:	b128      	cbz	r0, 80034e4 <__smakebuf_r+0x74>
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	81a3      	strh	r3, [r4, #12]
 80034e4:	89a0      	ldrh	r0, [r4, #12]
 80034e6:	4305      	orrs	r5, r0
 80034e8:	81a5      	strh	r5, [r4, #12]
 80034ea:	e7cd      	b.n	8003488 <__smakebuf_r+0x18>
 80034ec:	080027dd 	.word	0x080027dd

080034f0 <memchr>:
 80034f0:	4603      	mov	r3, r0
 80034f2:	b510      	push	{r4, lr}
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	4402      	add	r2, r0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	d101      	bne.n	8003502 <memchr+0x12>
 80034fe:	2000      	movs	r0, #0
 8003500:	e003      	b.n	800350a <memchr+0x1a>
 8003502:	7804      	ldrb	r4, [r0, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	428c      	cmp	r4, r1
 8003508:	d1f6      	bne.n	80034f8 <memchr+0x8>
 800350a:	bd10      	pop	{r4, pc}

0800350c <__malloc_lock>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__malloc_lock+0x8>)
 800350e:	f7ff ba37 	b.w	8002980 <__retarget_lock_acquire_recursive>
 8003512:	bf00      	nop
 8003514:	20000170 	.word	0x20000170

08003518 <__malloc_unlock>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__malloc_unlock+0x8>)
 800351a:	f7ff ba32 	b.w	8002982 <__retarget_lock_release_recursive>
 800351e:	bf00      	nop
 8003520:	20000170 	.word	0x20000170

08003524 <_free_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4605      	mov	r5, r0
 8003528:	2900      	cmp	r1, #0
 800352a:	d043      	beq.n	80035b4 <_free_r+0x90>
 800352c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003530:	1f0c      	subs	r4, r1, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	bfb8      	it	lt
 8003536:	18e4      	addlt	r4, r4, r3
 8003538:	f7ff ffe8 	bl	800350c <__malloc_lock>
 800353c:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <_free_r+0x94>)
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	4610      	mov	r0, r2
 8003542:	b933      	cbnz	r3, 8003552 <_free_r+0x2e>
 8003544:	6063      	str	r3, [r4, #4]
 8003546:	6014      	str	r4, [r2, #0]
 8003548:	4628      	mov	r0, r5
 800354a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800354e:	f7ff bfe3 	b.w	8003518 <__malloc_unlock>
 8003552:	42a3      	cmp	r3, r4
 8003554:	d90a      	bls.n	800356c <_free_r+0x48>
 8003556:	6821      	ldr	r1, [r4, #0]
 8003558:	1862      	adds	r2, r4, r1
 800355a:	4293      	cmp	r3, r2
 800355c:	bf01      	itttt	eq
 800355e:	681a      	ldreq	r2, [r3, #0]
 8003560:	685b      	ldreq	r3, [r3, #4]
 8003562:	1852      	addeq	r2, r2, r1
 8003564:	6022      	streq	r2, [r4, #0]
 8003566:	6063      	str	r3, [r4, #4]
 8003568:	6004      	str	r4, [r0, #0]
 800356a:	e7ed      	b.n	8003548 <_free_r+0x24>
 800356c:	461a      	mov	r2, r3
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	b10b      	cbz	r3, 8003576 <_free_r+0x52>
 8003572:	42a3      	cmp	r3, r4
 8003574:	d9fa      	bls.n	800356c <_free_r+0x48>
 8003576:	6811      	ldr	r1, [r2, #0]
 8003578:	1850      	adds	r0, r2, r1
 800357a:	42a0      	cmp	r0, r4
 800357c:	d10b      	bne.n	8003596 <_free_r+0x72>
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	4401      	add	r1, r0
 8003582:	1850      	adds	r0, r2, r1
 8003584:	4283      	cmp	r3, r0
 8003586:	6011      	str	r1, [r2, #0]
 8003588:	d1de      	bne.n	8003548 <_free_r+0x24>
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4401      	add	r1, r0
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	6053      	str	r3, [r2, #4]
 8003594:	e7d8      	b.n	8003548 <_free_r+0x24>
 8003596:	d902      	bls.n	800359e <_free_r+0x7a>
 8003598:	230c      	movs	r3, #12
 800359a:	602b      	str	r3, [r5, #0]
 800359c:	e7d4      	b.n	8003548 <_free_r+0x24>
 800359e:	6820      	ldr	r0, [r4, #0]
 80035a0:	1821      	adds	r1, r4, r0
 80035a2:	428b      	cmp	r3, r1
 80035a4:	bf01      	itttt	eq
 80035a6:	6819      	ldreq	r1, [r3, #0]
 80035a8:	685b      	ldreq	r3, [r3, #4]
 80035aa:	1809      	addeq	r1, r1, r0
 80035ac:	6021      	streq	r1, [r4, #0]
 80035ae:	6063      	str	r3, [r4, #4]
 80035b0:	6054      	str	r4, [r2, #4]
 80035b2:	e7c9      	b.n	8003548 <_free_r+0x24>
 80035b4:	bd38      	pop	{r3, r4, r5, pc}
 80035b6:	bf00      	nop
 80035b8:	200000d0 	.word	0x200000d0

080035bc <_read_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	2200      	movs	r2, #0
 80035c6:	4d05      	ldr	r5, [pc, #20]	; (80035dc <_read_r+0x20>)
 80035c8:	602a      	str	r2, [r5, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f7fd f8a0 	bl	8000710 <_read>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_read_r+0x1e>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_read_r+0x1e>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	20000178 	.word	0x20000178

080035e0 <_fstat_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	2300      	movs	r3, #0
 80035e4:	4d06      	ldr	r5, [pc, #24]	; (8003600 <_fstat_r+0x20>)
 80035e6:	4604      	mov	r4, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	f7fd f8d3 	bl	8000798 <_fstat>
 80035f2:	1c43      	adds	r3, r0, #1
 80035f4:	d102      	bne.n	80035fc <_fstat_r+0x1c>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	b103      	cbz	r3, 80035fc <_fstat_r+0x1c>
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	bd38      	pop	{r3, r4, r5, pc}
 80035fe:	bf00      	nop
 8003600:	20000178 	.word	0x20000178

08003604 <_isatty_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	2300      	movs	r3, #0
 8003608:	4d05      	ldr	r5, [pc, #20]	; (8003620 <_isatty_r+0x1c>)
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fd f8d1 	bl	80007b6 <_isatty>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_isatty_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_isatty_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	20000178 	.word	0x20000178

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
