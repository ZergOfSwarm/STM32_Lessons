
MPU6050_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08008728  08008728  00018728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dc8  08008dc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008dc8  08008dc8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dc8  08008dc8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001dc  08008fac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08008fac  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f851  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fea  00000000  00000000  0002fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00032960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c3b  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f6f  00000000  00000000  0004c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea9d  00000000  00000000  0005d37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebe17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000ebe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800870c 	.word	0x0800870c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800870c 	.word	0x0800870c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b29a      	uxth	r2, r3
 8001040:	2332      	movs	r3, #50	; 0x32
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <_write+0x48>)
 8001046:	f003 f8e7 	bl	8004218 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffc3 	bl	8000fe4 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x20>
	}
	return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000288 	.word	0x20000288

0800107c <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_Init (void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2275      	movs	r2, #117	; 0x75
 8001094:	21d0      	movs	r1, #208	; 0xd0
 8001096:	4823      	ldr	r0, [pc, #140]	; (8001124 <MPU6050_Init+0xa8>)
 8001098:	f001 fbc8 	bl	800282c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b68      	cmp	r3, #104	; 0x68
 80010a0:	d13b      	bne.n	800111a <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up //  Включение / пробудка модуля.
		Data = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	226b      	movs	r2, #107	; 0x6b
 80010b8:	21d0      	movs	r1, #208	; 0xd0
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <MPU6050_Init+0xa8>)
 80010bc:	f001 fabc 	bl	8002638 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80010c0:	2307      	movs	r3, #7
 80010c2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80010c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	1dbb      	adds	r3, r7, #6
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2219      	movs	r2, #25
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	4812      	ldr	r0, [pc, #72]	; (8001124 <MPU6050_Init+0xa8>)
 80010da:	f001 faad 	bl	8002638 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	71bb      	strb	r3, [r7, #6]
		//Data = 0x10; // 2 => +-8g
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	221c      	movs	r2, #28
 80010f4:	21d0      	movs	r1, #208	; 0xd0
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <MPU6050_Init+0xa8>)
 80010f8:	f001 fa9e 	bl	8002638 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	71bb      	strb	r3, [r7, #6]
		//Data = 0x8; // 1 => +-500s т.е. в 3-й бит установим 1
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2301      	movs	r3, #1
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	221b      	movs	r2, #27
 8001112:	21d0      	movs	r1, #208	; 0xd0
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <MPU6050_Init+0xa8>)
 8001116:	f001 fa8f 	bl	8002638 <HAL_I2C_Mem_Write>
	}

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000234 	.word	0x20000234

08001128 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2306      	movs	r3, #6
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	463b      	mov	r3, r7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	223b      	movs	r2, #59	; 0x3b
 8001140:	21d0      	movs	r1, #208	; 0xd0
 8001142:	482f      	ldr	r0, [pc, #188]	; (8001200 <MPU6050_Read_Accel+0xd8>)
 8001144:	f001 fb72 	bl	800282c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001148:	783b      	ldrb	r3, [r7, #0]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	787b      	ldrb	r3, [r7, #1]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MPU6050_Read_Accel+0xdc>)
 8001158:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800115a:	78bb      	ldrb	r3, [r7, #2]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MPU6050_Read_Accel+0xe0>)
 800116a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800116c:	793b      	ldrb	r3, [r7, #4]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <MPU6050_Read_Accel+0xe4>)
 800117c:	801a      	strh	r2, [r3, #0]

	/*** Для преобразования сырых значений акселерометра в ускорение в "g"
	необходимо разделить их на значение, установленное в регистре FS_SEL (полный диапазон шкалы).
	Мы установили FS_SEL равным 0, поэтому мы делите сырые значения на 16384.0.    ****/

	Ax = Accel_X_RAW/16384.0;// Преобразование Accel_X_RAW, в ускорение в единицах "g".
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MPU6050_Read_Accel+0xdc>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f93d 	bl	8000404 <__aeabi_i2d>
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <MPU6050_Read_Accel+0xe8>)
 8001190:	f7ff facc 	bl	800072c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MPU6050_Read_Accel+0xec>)
 80011a4:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;// Преобразование Accel_Y_RAW, в ускорение в единицах "g".
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MPU6050_Read_Accel+0xe0>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f929 	bl	8000404 <__aeabi_i2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MPU6050_Read_Accel+0xe8>)
 80011b8:	f7ff fab8 	bl	800072c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fc60 	bl	8000a88 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MPU6050_Read_Accel+0xf0>)
 80011cc:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;// Преобразование Accel_Z_RAW, в ускорение в единицах "g".
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MPU6050_Read_Accel+0xe4>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f915 	bl	8000404 <__aeabi_i2d>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MPU6050_Read_Accel+0xe8>)
 80011e0:	f7ff faa4 	bl	800072c <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fc4c 	bl	8000a88 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <MPU6050_Read_Accel+0xf4>)
 80011f4:	6013      	str	r3, [r2, #0]
	//printf("Ax = %lf   Ay = %lf   Az = %lf\r\n",Ax,Ay,Az);
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000234 	.word	0x20000234
 8001204:	200001f8 	.word	0x200001f8
 8001208:	200001fa 	.word	0x200001fa
 800120c:	200001fc 	.word	0x200001fc
 8001210:	40d00000 	.word	0x40d00000
 8001214:	20000204 	.word	0x20000204
 8001218:	20000208 	.word	0x20000208
 800121c:	2000020c 	.word	0x2000020c

08001220 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2306      	movs	r3, #6
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	2243      	movs	r2, #67	; 0x43
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	489f      	ldr	r0, [pc, #636]	; (80014b8 <MPU6050_Read_Gyro+0x298>)
 800123c:	f001 faf6 	bl	800282c <HAL_I2C_Mem_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <MPU6050_Read_Gyro+0x32>
        // Обработка ошибки чтения по I2C
        printf("Error reading gyro data via I2C\r\n");
 800124a:	489c      	ldr	r0, [pc, #624]	; (80014bc <MPU6050_Read_Gyro+0x29c>)
 800124c:	f003 fe7c 	bl	8004f48 <puts>
 8001250:	e11d      	b.n	800148e <MPU6050_Read_Gyro+0x26e>
        return;  // или выполните другие необходимые действия в случае ошибки
    }
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001252:	793b      	ldrb	r3, [r7, #4]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	797b      	ldrb	r3, [r7, #5]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b97      	ldr	r3, [pc, #604]	; (80014c0 <MPU6050_Read_Gyro+0x2a0>)
 8001262:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	4b94      	ldr	r3, [pc, #592]	; (80014c4 <MPU6050_Read_Gyro+0x2a4>)
 8001274:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001276:	7a3b      	ldrb	r3, [r7, #8]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7a7b      	ldrb	r3, [r7, #9]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <MPU6050_Read_Gyro+0x2a8>)
 8001286:	801a      	strh	r2, [r3, #0]

	/*** Для преобразования сырых значений гироскопа в скорость вращения в "градусах в секунду"
	необходимо разделить их на значение, установленное в регистре FS_SEL.
	Мы установили FS_SEL равным 0, поэтому мы делите сырые значения на 131.0.    ****/

	Gx = Gyro_X_RAW/131.0; // Преобразование Gyro_X_RAW, в скорость вращения в единицах "градусы в секунду".
 8001288:	4b8d      	ldr	r3, [pc, #564]	; (80014c0 <MPU6050_Read_Gyro+0x2a0>)
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f8b8 	bl	8000404 <__aeabi_i2d>
 8001294:	a380      	add	r3, pc, #512	; (adr r3, 8001498 <MPU6050_Read_Gyro+0x278>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff fa47 	bl	800072c <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fbef 	bl	8000a88 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a87      	ldr	r2, [pc, #540]	; (80014cc <MPU6050_Read_Gyro+0x2ac>)
 80012ae:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0; // Преобразование Gyro_Y_RAW, в скорость вращения в единицах "градусы в секунду".
 80012b0:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <MPU6050_Read_Gyro+0x2a4>)
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8a4 	bl	8000404 <__aeabi_i2d>
 80012bc:	a376      	add	r3, pc, #472	; (adr r3, 8001498 <MPU6050_Read_Gyro+0x278>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fa33 	bl	800072c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fbdb 	bl	8000a88 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a7e      	ldr	r2, [pc, #504]	; (80014d0 <MPU6050_Read_Gyro+0x2b0>)
 80012d6:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0; // Преобразование Gyro_Z_RAW, в скорость вращения в единицах "градусы в секунду".
 80012d8:	4b7b      	ldr	r3, [pc, #492]	; (80014c8 <MPU6050_Read_Gyro+0x2a8>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f890 	bl	8000404 <__aeabi_i2d>
 80012e4:	a36c      	add	r3, pc, #432	; (adr r3, 8001498 <MPU6050_Read_Gyro+0x278>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff fa1f 	bl	800072c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fbc7 	bl	8000a88 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <MPU6050_Read_Gyro+0x2b4>)
 80012fe:	6013      	str	r3, [r2, #0]

    // Вычисление угла Roll (Крен) (произведения наклона)
	//MPU6050_Data.aROLL = atan2(Ay, sqrt(Ax * Ax + Az * Az)) / 180.0 * M_PI;
	MPU6050_Data.aROLL = atan2(Ay, Az) * 180.0 / M_PI; // Крен (Roll)
 8001300:	4b75      	ldr	r3, [pc, #468]	; (80014d8 <MPU6050_Read_Gyro+0x2b8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f88f 	bl	8000428 <__aeabi_f2d>
 800130a:	4604      	mov	r4, r0
 800130c:	460d      	mov	r5, r1
 800130e:	4b73      	ldr	r3, [pc, #460]	; (80014dc <MPU6050_Read_Gyro+0x2bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f888 	bl	8000428 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f005 ff0a 	bl	8007138 <atan2>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <MPU6050_Read_Gyro+0x2c0>)
 800132a:	f7ff f8d5 	bl	80004d8 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	a35a      	add	r3, pc, #360	; (adr r3, 80014a0 <MPU6050_Read_Gyro+0x280>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f9f6 	bl	800072c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fb9e 	bl	8000a88 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 8001350:	6013      	str	r3, [r2, #0]

//	float ROLL = mpu6050data[4] - fGY_Cal; // относительно "нуля"
//	ROLL = ROLL / 65.5 / 50; // TODO Укажи правильное количество измерений вместо 50!

	// Вычисление угла PITCH (Тангаж):
	MPU6050_Data.aPitch = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) / 180.0 * M_PI;// Если отбросить деление (180.0 * M_PI) то, результат будет в радианах а не в градусах!
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <MPU6050_Read_Gyro+0x2c8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f864 	bl	8000428 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <MPU6050_Read_Gyro+0x2b8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <MPU6050_Read_Gyro+0x2b8>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fce8 	bl	8000d44 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	461e      	mov	r6, r3
 8001378:	4b58      	ldr	r3, [pc, #352]	; (80014dc <MPU6050_Read_Gyro+0x2bc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a57      	ldr	r2, [pc, #348]	; (80014dc <MPU6050_Read_Gyro+0x2bc>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcde 	bl	8000d44 <__aeabi_fmul>
 8001388:	4603      	mov	r3, r0
 800138a:	4619      	mov	r1, r3
 800138c:	4630      	mov	r0, r6
 800138e:	f7ff fbd1 	bl	8000b34 <__addsf3>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f847 	bl	8000428 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f005 fecb 	bl	800713c <sqrt>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f005 fec3 	bl	8007138 <atan2>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <MPU6050_Read_Gyro+0x2c0>)
 80013b8:	f7ff f9b8 	bl	800072c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	a336      	add	r3, pc, #216	; (adr r3, 80014a0 <MPU6050_Read_Gyro+0x280>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f885 	bl	80004d8 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fb57 	bl	8000a88 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 80013de:	6053      	str	r3, [r2, #4]
	//printf("Roll = %lf   Pitch = %lf\r\n",MPU6050_Data.aROLL,MPU6050_Data.aPitch);

	//float Yaw = (Gz - sumGz) / 131.0 / 50; // TODO Укажи правильное количество измерений вместо 50!
	float Yaw = (Gz) / 131.0;
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <MPU6050_Read_Gyro+0x2b4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4941      	ldr	r1, [pc, #260]	; (80014ec <MPU6050_Read_Gyro+0x2cc>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fd60 	bl	8000eac <__aeabi_fdiv>
 80013ec:	4603      	mov	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]
	MPU6050_Data.aYaw = Yaw; // РЫСКАНЬЕ
 80013f0:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6093      	str	r3, [r2, #8]
	// Если есть перемещения по крену и тангажу и после мы делаем рыскание то изменяется и крен и тонгаж!
	// Но, датчик будет показывать только рысканье а крен и тангаж будет иметь прежние значения!
	// Нам нужно каждый раз пересчитывать и крен и тангаж относительно рысканья!
	if (Yaw > 0.01) { //Обработка рыскания: TODO сравнение с дельтой
 80013f6:	6938      	ldr	r0, [r7, #16]
 80013f8:	f7ff f816 	bl	8000428 <__aeabi_f2d>
 80013fc:	a32a      	add	r3, pc, #168	; (adr r3, 80014a8 <MPU6050_Read_Gyro+0x288>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff faf9 	bl	80009f8 <__aeabi_dcmpgt>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d040      	beq.n	800148e <MPU6050_Read_Gyro+0x26e>
		float _Y = sin(Yaw * 3.1415 / 180);
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f7ff f80b 	bl	8000428 <__aeabi_f2d>
 8001412:	a327      	add	r3, pc, #156	; (adr r3, 80014b0 <MPU6050_Read_Gyro+0x290>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f85e 	bl	80004d8 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MPU6050_Read_Gyro+0x2c0>)
 800142a:	f7ff f97f 	bl	800072c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f005 fe39 	bl	80070ac <sin>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fb21 	bl	8000a88 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	60fb      	str	r3, [r7, #12]
		MPU6050_Data.aPitch += MPU6050_Data.aROLL * _Y;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 800144c:	685c      	ldr	r4, [r3, #4]
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68f9      	ldr	r1, [r7, #12]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc75 	bl	8000d44 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	4619      	mov	r1, r3
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fb68 	bl	8000b34 <__addsf3>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 800146a:	605a      	str	r2, [r3, #4]
		MPU6050_Data.aROLL -= MPU6050_Data.aPitch * _Y;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	68f9      	ldr	r1, [r7, #12]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc64 	bl	8000d44 <__aeabi_fmul>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff fb55 	bl	8000b30 <__aeabi_fsub>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MPU6050_Read_Gyro+0x2c4>)
 800148c:	601a      	str	r2, [r3, #0]
	}
	//printf("ROLL:%f  Pithch:%f  Yaw:%f\r\n", MPU6050_Data.aROLL, MPU6050_Data.aPitch, MPU6050_Data.aYaw);
}
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	00000000 	.word	0x00000000
 800149c:	40606000 	.word	0x40606000
 80014a0:	54442d18 	.word	0x54442d18
 80014a4:	400921fb 	.word	0x400921fb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f847ae1 	.word	0x3f847ae1
 80014b0:	c083126f 	.word	0xc083126f
 80014b4:	400921ca 	.word	0x400921ca
 80014b8:	20000234 	.word	0x20000234
 80014bc:	08008728 	.word	0x08008728
 80014c0:	200001fe 	.word	0x200001fe
 80014c4:	20000200 	.word	0x20000200
 80014c8:	20000202 	.word	0x20000202
 80014cc:	20000210 	.word	0x20000210
 80014d0:	20000214 	.word	0x20000214
 80014d4:	20000218 	.word	0x20000218
 80014d8:	20000208 	.word	0x20000208
 80014dc:	2000020c 	.word	0x2000020c
 80014e0:	40668000 	.word	0x40668000
 80014e4:	2000021c 	.word	0x2000021c
 80014e8:	20000204 	.word	0x20000204
 80014ec:	43030000 	.word	0x43030000

080014f0 <ComplementaryFilter>:

void ComplementaryFilter(float accelPitch, float gyroPitch, float accelRoll, float gyroRoll, float accelYaw, float gyroYaw) {
 80014f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af04      	add	r7, sp, #16
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	603b      	str	r3, [r7, #0]
    // ... (ваш код без изменений)

    // Применение комплиментарного фильтра для сглаживания измерений акселерометра и гироскопа
    MPU6050_Data.aPitch = COMP_FILTER_ALPHA * (gyroPitch + accelPitch) + (1 - COMP_FILTER_ALPHA) * prevPitch;
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f7ff fb16 	bl	8000b34 <__addsf3>
 8001508:	4603      	mov	r3, r0
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff8c 	bl	8000428 <__aeabi_f2d>
 8001510:	a34d      	add	r3, pc, #308	; (adr r3, 8001648 <ComplementaryFilter+0x158>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7fe ffdf 	bl	80004d8 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4614      	mov	r4, r2
 8001520:	461d      	mov	r5, r3
 8001522:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <ComplementaryFilter+0x168>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ff7e 	bl	8000428 <__aeabi_f2d>
 800152c:	a348      	add	r3, pc, #288	; (adr r3, 8001650 <ComplementaryFilter+0x160>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7fe ffd1 	bl	80004d8 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fe15 	bl	800016c <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fa9d 	bl	8000a88 <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	4a42      	ldr	r2, [pc, #264]	; (800165c <ComplementaryFilter+0x16c>)
 8001552:	6053      	str	r3, [r2, #4]
    MPU6050_Data.aROLL = COMP_FILTER_ALPHA * (gyroRoll + accelRoll) + (1 - COMP_FILTER_ALPHA) * prevRoll;
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f7ff faec 	bl	8000b34 <__addsf3>
 800155c:	4603      	mov	r3, r0
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff62 	bl	8000428 <__aeabi_f2d>
 8001564:	a338      	add	r3, pc, #224	; (adr r3, 8001648 <ComplementaryFilter+0x158>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe ffb5 	bl	80004d8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <ComplementaryFilter+0x170>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff54 	bl	8000428 <__aeabi_f2d>
 8001580:	a333      	add	r3, pc, #204	; (adr r3, 8001650 <ComplementaryFilter+0x160>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe ffa7 	bl	80004d8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4620      	mov	r0, r4
 8001590:	4629      	mov	r1, r5
 8001592:	f7fe fdeb 	bl	800016c <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fa73 	bl	8000a88 <__aeabi_d2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <ComplementaryFilter+0x16c>)
 80015a6:	6013      	str	r3, [r2, #0]

    // Применение комплиментарного фильтра для угла Yaw
    MPU6050_Data.aYaw = COMP_FILTER_ALPHA * (gyroYaw + accelYaw) + (1 - COMP_FILTER_ALPHA) * prevYaw;
 80015a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ac:	f7ff fac2 	bl	8000b34 <__addsf3>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff38 	bl	8000428 <__aeabi_f2d>
 80015b8:	a323      	add	r3, pc, #140	; (adr r3, 8001648 <ComplementaryFilter+0x158>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7fe ff8b 	bl	80004d8 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	461d      	mov	r5, r3
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <ComplementaryFilter+0x174>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff2a 	bl	8000428 <__aeabi_f2d>
 80015d4:	a31e      	add	r3, pc, #120	; (adr r3, 8001650 <ComplementaryFilter+0x160>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7fe ff7d 	bl	80004d8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe fdc1 	bl	800016c <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa49 	bl	8000a88 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <ComplementaryFilter+0x16c>)
 80015fa:	6093      	str	r3, [r2, #8]

    printf("f_Pitch: %f, f_ROLL: %f, f_YAW: %f\r\n", MPU6050_Data.aPitch, MPU6050_Data.aROLL, MPU6050_Data.aYaw);
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <ComplementaryFilter+0x16c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff11 	bl	8000428 <__aeabi_f2d>
 8001606:	4680      	mov	r8, r0
 8001608:	4689      	mov	r9, r1
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <ComplementaryFilter+0x16c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff0a 	bl	8000428 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <ComplementaryFilter+0x16c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff03 	bl	8000428 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800162a:	e9cd 4500 	strd	r4, r5, [sp]
 800162e:	4642      	mov	r2, r8
 8001630:	464b      	mov	r3, r9
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <ComplementaryFilter+0x178>)
 8001634:	f003 fc02 	bl	8004e3c <iprintf>
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	f5c28f5c 	.word	0xf5c28f5c
 800164c:	3fef5c28 	.word	0x3fef5c28
 8001650:	47ae1480 	.word	0x47ae1480
 8001654:	3f947ae1 	.word	0x3f947ae1
 8001658:	20000228 	.word	0x20000228
 800165c:	2000021c 	.word	0x2000021c
 8001660:	2000022c 	.word	0x2000022c
 8001664:	20000230 	.word	0x20000230
 8001668:	0800874c 	.word	0x0800874c
 800166c:	00000000 	.word	0x00000000

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001676:	f000 fbe1 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167a:	f000 f8bf 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167e:	f000 f95b 	bl	8001938 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001682:	f000 f901 	bl	8001888 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001686:	f000 f92d 	bl	80018e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800168a:	f7ff fcf7 	bl	800107c <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 800168e:	f7ff fd4b 	bl	8001128 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001692:	f7ff fdc5 	bl	8001220 <MPU6050_Read_Gyro>
	  // Вычисление углов Pitch, Roll и Yaw из акселерометра
	  MPU6050_Data.aPitch = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * 180.0 / M_PI;
 8001696:	4b4e      	ldr	r3, [pc, #312]	; (80017d0 <main+0x160>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fec2 	bl	8000428 <__aeabi_f2d>
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <main+0x164>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <main+0x164>)
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb46 	bl	8000d44 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461e      	mov	r6, r3
 80016bc:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <main+0x168>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <main+0x168>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb3c 	bl	8000d44 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	4630      	mov	r0, r6
 80016d2:	f7ff fa2f 	bl	8000b34 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fea5 	bl	8000428 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f005 fd29 	bl	800713c <sqrt>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f005 fd21 	bl	8007138 <atan2>
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <main+0x16c>)
 80016fc:	f7fe feec 	bl	80004d8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a32f      	add	r3, pc, #188	; (adr r3, 80017c8 <main+0x158>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f80d 	bl	800072c <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f9b5 	bl	8000a88 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <main+0x170>)
 8001722:	6053      	str	r3, [r2, #4]
	  MPU6050_Data.aROLL = atan2(Ay, Az) * 180.0 / M_PI;
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <main+0x164>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fe7d 	bl	8000428 <__aeabi_f2d>
 800172e:	4604      	mov	r4, r0
 8001730:	460d      	mov	r5, r1
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0x168>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe76 	bl	8000428 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4620      	mov	r0, r4
 8001742:	4629      	mov	r1, r5
 8001744:	f005 fcf8 	bl	8007138 <atan2>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <main+0x16c>)
 800174e:	f7fe fec3 	bl	80004d8 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	a31b      	add	r3, pc, #108	; (adr r3, 80017c8 <main+0x158>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ffe4 	bl	800072c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f98c 	bl	8000a88 <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <main+0x170>)
 8001774:	6013      	str	r3, [r2, #0]
	  MPU6050_Data.aYaw = 0;  // Здесь нужно использовать данные магнитометра для полной оценки угла Yaw
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <main+0x170>)
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	609a      	str	r2, [r3, #8]

	  ComplementaryFilter(MPU6050_Data.aPitch, Gx, MPU6050_Data.aROLL, Gy, MPU6050_Data.aYaw, Gz);
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <main+0x170>)
 8001780:	6858      	ldr	r0, [r3, #4]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <main+0x174>)
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <main+0x170>)
 8001788:	681c      	ldr	r4, [r3, #0]
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <main+0x178>)
 800178c:	681d      	ldr	r5, [r3, #0]
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <main+0x170>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4a16      	ldr	r2, [pc, #88]	; (80017ec <main+0x17c>)
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	9201      	str	r2, [sp, #4]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	462b      	mov	r3, r5
 800179c:	4622      	mov	r2, r4
 800179e:	f7ff fea7 	bl	80014f0 <ComplementaryFilter>

	  prevPitch = MPU6050_Data.aPitch;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <main+0x170>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <main+0x180>)
 80017a8:	6013      	str	r3, [r2, #0]
	  prevRoll = MPU6050_Data.aROLL;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <main+0x170>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <main+0x184>)
 80017b0:	6013      	str	r3, [r2, #0]
	  prevYaw = MPU6050_Data.aYaw;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <main+0x170>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <main+0x188>)
 80017b8:	6013      	str	r3, [r2, #0]
	  HAL_Delay(20);
 80017ba:	2014      	movs	r0, #20
 80017bc:	f000 fb70 	bl	8001ea0 <HAL_Delay>
	  MPU6050_Read_Accel();
 80017c0:	e765      	b.n	800168e <main+0x1e>
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	20000204 	.word	0x20000204
 80017d4:	20000208 	.word	0x20000208
 80017d8:	2000020c 	.word	0x2000020c
 80017dc:	40668000 	.word	0x40668000
 80017e0:	2000021c 	.word	0x2000021c
 80017e4:	20000210 	.word	0x20000210
 80017e8:	20000214 	.word	0x20000214
 80017ec:	20000218 	.word	0x20000218
 80017f0:	20000228 	.word	0x20000228
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	20000230 	.word	0x20000230

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	; 0x40
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	2228      	movs	r2, #40	; 0x28
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f002 feae 	bl	800456c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001830:	2302      	movs	r3, #2
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fe0d 	bl	8003464 <HAL_RCC_OscConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001850:	f000 f8b2 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	230f      	movs	r3, #15
 8001856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f87a 	bl	8003968 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800187a:	f000 f89d 	bl	80019b8 <Error_Handler>
  }
}
 800187e:	bf00      	nop
 8001880:	3740      	adds	r7, #64	; 0x40
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x50>)
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <MX_I2C1_Init+0x54>)
 8001890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_I2C1_Init+0x50>)
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x58>)
 8001896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c6:	f000 fd73 	bl	80023b0 <HAL_I2C_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d0:	f000 f872 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000234 	.word	0x20000234
 80018dc:	40005400 	.word	0x40005400
 80018e0:	00061a80 	.word	0x00061a80

080018e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_USART1_UART_Init+0x50>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 800191c:	f002 fc2c 	bl	8004178 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001926:	f000 f847 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000288 	.word	0x20000288
 8001934:	40013800 	.word	0x40013800

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_GPIO_Init+0x58>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <MX_GPIO_Init+0x58>)
 8001944:	f043 0320 	orr.w	r3, r3, #32
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_GPIO_Init+0x58>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_GPIO_Init+0x58>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <MX_GPIO_Init+0x58>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_GPIO_Init+0x58>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_GPIO_Init+0x58>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <MX_GPIO_Init+0x58>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <MX_GPIO_Init+0x58>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019a6:	f000 fa5f 	bl	8001e68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40000800 	.word	0x40000800

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <Error_Handler+0x8>
	...

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <HAL_MspInit+0x5c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_MspInit+0x5c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_MspInit+0x5c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_MspInit+0x5c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_MspInit+0x60>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_MspInit+0x60>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000

08001a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_I2C_MspInit+0x70>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d123      	bne.n	8001a90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_I2C_MspInit+0x74>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_I2C_MspInit+0x74>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_I2C_MspInit+0x74>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a60:	23c0      	movs	r3, #192	; 0xc0
 8001a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a64:	2312      	movs	r3, #18
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <HAL_I2C_MspInit+0x78>)
 8001a74:	f000 fb18 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_I2C_MspInit+0x74>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_I2C_MspInit+0x74>)
 8001a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a82:	61d3      	str	r3, [r2, #28]
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_I2C_MspInit+0x74>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_UART_MspInit+0x8c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d131      	bne.n	8001b28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_UART_MspInit+0x90>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4619      	mov	r1, r3
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <HAL_UART_MspInit+0x94>)
 8001b0a:	f000 facd 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4619      	mov	r1, r3
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_UART_MspInit+0x94>)
 8001b24:	f000 fac0 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010800 	.word	0x40010800

08001b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_InitTick+0xe8>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <HAL_InitTick+0xe8>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_InitTick+0xe8>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6a:	f107 0210 	add.w	r2, r7, #16
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 f867 	bl	8003c48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b84:	f002 f838 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8001b88:	6378      	str	r0, [r7, #52]	; 0x34
 8001b8a:	e004      	b.n	8001b96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b8c:	f002 f834 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_InitTick+0xec>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_InitTick+0xf0>)
 8001ba6:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <HAL_InitTick+0xf4>)
 8001ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_InitTick+0xf0>)
 8001bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_InitTick+0xf0>)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_InitTick+0xf0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_InitTick+0xf0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_InitTick+0xf0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001bca:	4818      	ldr	r0, [pc, #96]	; (8001c2c <HAL_InitTick+0xf0>)
 8001bcc:	f002 f88a 	bl	8003ce4 <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d11b      	bne.n	8001c16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001bde:	4813      	ldr	r0, [pc, #76]	; (8001c2c <HAL_InitTick+0xf0>)
 8001be0:	f002 f8d8 	bl	8003d94 <HAL_TIM_Base_Start_IT>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d111      	bne.n	8001c16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf2:	201e      	movs	r0, #30
 8001bf4:	f000 fa49 	bl	800208a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	d808      	bhi.n	8001c10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	201e      	movs	r0, #30
 8001c04:	f000 fa25 	bl	8002052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_InitTick+0xf8>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e002      	b.n	8001c16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3738      	adds	r7, #56	; 0x38
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	200002d0 	.word	0x200002d0
 8001c30:	40000800 	.word	0x40000800
 8001c34:	20000004 	.word	0x20000004

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM4_IRQHandler+0x10>)
 8001c8e:	f002 f8d3 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002d0 	.word	0x200002d0

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <_kill>:

int _kill(int pid, int sig)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb4:	f002 fc30 	bl	8004518 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2216      	movs	r2, #22
 8001cbc:	601a      	str	r2, [r3, #0]
  return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_exit>:

void _exit (int status)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffe7 	bl	8001caa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cdc:	e7fe      	b.n	8001cdc <_exit+0x12>

08001cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e00a      	b.n	8001d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf0:	f3af 8000 	nop.w
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	b2ca      	uxtb	r2, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3301      	adds	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dbf0      	blt.n	8001cf0 <_read+0x12>
  }

  return len;
 8001d0e:	687b      	ldr	r3, [r7, #4]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <_isatty>:

int _isatty(int file)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f002 fbb6 	bl	8004518 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20005000 	.word	0x20005000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	20000318 	.word	0x20000318
 8001de0:	20000330 	.word	0x20000330

08001de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df0:	f7ff fff8 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df4:	480b      	ldr	r0, [pc, #44]	; (8001e24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001df6:	490c      	ldr	r1, [pc, #48]	; (8001e28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e0c:	4c09      	ldr	r4, [pc, #36]	; (8001e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f002 fb83 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1e:	f7ff fc27 	bl	8001670 <main>
  bx lr
 8001e22:	4770      	bx	lr
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e2c:	08008dd0 	.word	0x08008dd0
  ldr r2, =_sbss
 8001e30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e34:	20000330 	.word	0x20000330

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f8f5 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	200f      	movs	r0, #15
 8001e54:	f7ff fe72 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fdb4 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_IncTick+0x1c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x20>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_IncTick+0x20>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000008 	.word	0x20000008
 8001e88:	2000031c 	.word	0x2000031c

08001e8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <HAL_GetTick+0x10>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	2000031c 	.word	0x2000031c

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffe0 	bl	8001e8c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <__NVIC_SetPriorityGrouping>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4906      	ldr	r1, [pc, #24]	; (8001f80 <__NVIC_EnableIRQ+0x34>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff4f 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff64 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ffb2 	bl	8001fd8 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff81 	bl	8001f84 <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff57 	bl	8001f4c <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e169      	b.n	8002390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020bc:	2201      	movs	r2, #1
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8158 	bne.w	800238a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a9a      	ldr	r2, [pc, #616]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020e4:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d875      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020ea:	4a98      	ldr	r2, [pc, #608]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d058      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020f0:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d86f      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020f6:	4a96      	ldr	r2, [pc, #600]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d052      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020fc:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d869      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002102:	4a94      	ldr	r2, [pc, #592]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04c      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002108:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d863      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800210e:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d046      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002114:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d85d      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d82a      	bhi.n	8002174 <HAL_GPIO_Init+0xcc>
 800211e:	2b12      	cmp	r3, #18
 8002120:	d859      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_GPIO_Init+0x80>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	080021a3 	.word	0x080021a3
 800212c:	0800217d 	.word	0x0800217d
 8002130:	0800218f 	.word	0x0800218f
 8002134:	080021d1 	.word	0x080021d1
 8002138:	080021d7 	.word	0x080021d7
 800213c:	080021d7 	.word	0x080021d7
 8002140:	080021d7 	.word	0x080021d7
 8002144:	080021d7 	.word	0x080021d7
 8002148:	080021d7 	.word	0x080021d7
 800214c:	080021d7 	.word	0x080021d7
 8002150:	080021d7 	.word	0x080021d7
 8002154:	080021d7 	.word	0x080021d7
 8002158:	080021d7 	.word	0x080021d7
 800215c:	080021d7 	.word	0x080021d7
 8002160:	080021d7 	.word	0x080021d7
 8002164:	080021d7 	.word	0x080021d7
 8002168:	080021d7 	.word	0x080021d7
 800216c:	08002185 	.word	0x08002185
 8002170:	08002199 	.word	0x08002199
 8002174:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_GPIO_Init+0x2b4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800217a:	e02c      	b.n	80021d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e029      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	3304      	adds	r3, #4
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e024      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	3308      	adds	r3, #8
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e01f      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	330c      	adds	r3, #12
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e01a      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021aa:	2304      	movs	r3, #4
 80021ac:	623b      	str	r3, [r7, #32]
          break;
 80021ae:	e013      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b8:	2308      	movs	r3, #8
 80021ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	611a      	str	r2, [r3, #16]
          break;
 80021c2:	e009      	b.n	80021d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c4:	2308      	movs	r3, #8
 80021c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	615a      	str	r2, [r3, #20]
          break;
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          break;
 80021d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d801      	bhi.n	80021e2 <HAL_GPIO_Init+0x13a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_Init+0x13e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d802      	bhi.n	80021f4 <HAL_GPIO_Init+0x14c>
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x152>
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3b08      	subs	r3, #8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	210f      	movs	r1, #15
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	6a39      	ldr	r1, [r7, #32]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80b1 	beq.w	800238a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_GPIO_Init+0x2c0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_GPIO_Init+0x1ec>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_GPIO_Init+0x2c4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_GPIO_Init+0x1e8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_GPIO_Init+0x2c8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x1e4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <HAL_GPIO_Init+0x2cc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_GPIO_Init+0x1e0>
 8002284:	2303      	movs	r3, #3
 8002286:	e006      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002288:	2304      	movs	r3, #4
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 800228c:	2302      	movs	r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002294:	2300      	movs	r3, #0
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a6:	492f      	ldr	r1, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	492c      	ldr	r1, [pc, #176]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4928      	ldr	r1, [pc, #160]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	491e      	ldr	r1, [pc, #120]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4918      	ldr	r1, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4914      	ldr	r1, [pc, #80]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d021      	beq.n	800237c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e021      	b.n	800238a <HAL_GPIO_Init+0x2e2>
 8002346:	bf00      	nop
 8002348:	10320000 	.word	0x10320000
 800234c:	10310000 	.word	0x10310000
 8002350:	10220000 	.word	0x10220000
 8002354:	10210000 	.word	0x10210000
 8002358:	10120000 	.word	0x10120000
 800235c:	10110000 	.word	0x10110000
 8002360:	40021000 	.word	0x40021000
 8002364:	40010000 	.word	0x40010000
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00
 8002370:	40011000 	.word	0x40011000
 8002374:	40011400 	.word	0x40011400
 8002378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_GPIO_Init+0x304>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4909      	ldr	r1, [pc, #36]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002386:	4013      	ands	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f ae8e 	bne.w	80020bc <HAL_GPIO_Init+0x14>
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	372c      	adds	r7, #44	; 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e12b      	b.n	800261a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fb26 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002414:	f001 fbf0 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a81      	ldr	r2, [pc, #516]	; (8002624 <HAL_I2C_Init+0x274>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d807      	bhi.n	8002434 <HAL_I2C_Init+0x84>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_I2C_Init+0x278>)
 8002428:	4293      	cmp	r3, r2
 800242a:	bf94      	ite	ls
 800242c:	2301      	movls	r3, #1
 800242e:	2300      	movhi	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e006      	b.n	8002442 <HAL_I2C_Init+0x92>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a7d      	ldr	r2, [pc, #500]	; (800262c <HAL_I2C_Init+0x27c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e7      	b.n	800261a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_I2C_Init+0x280>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9b      	lsrs	r3, r3, #18
 8002454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_I2C_Init+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d802      	bhi.n	8002484 <HAL_I2C_Init+0xd4>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	e009      	b.n	8002498 <HAL_I2C_Init+0xe8>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_I2C_Init+0x284>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	3301      	adds	r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	495c      	ldr	r1, [pc, #368]	; (8002624 <HAL_I2C_Init+0x274>)
 80024b4:	428b      	cmp	r3, r1
 80024b6:	d819      	bhi.n	80024ec <HAL_I2C_Init+0x13c>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e59      	subs	r1, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024cc:	400b      	ands	r3, r1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_I2C_Init+0x138>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e59      	subs	r1, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	e051      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e04f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_I2C_Init+0x168>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e012      	b.n	800253e <HAL_I2C_Init+0x18e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Init+0x196>
 8002542:	2301      	movs	r3, #1
 8002544:	e022      	b.n	800258c <HAL_I2C_Init+0x1dc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10e      	bne.n	800256c <HAL_I2C_Init+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e58      	subs	r0, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	440b      	add	r3, r1
 800255c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	e00f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	6809      	ldr	r1, [r1, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6911      	ldr	r1, [r2, #16]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	000186a0 	.word	0x000186a0
 8002628:	001e847f 	.word	0x001e847f
 800262c:	003d08ff 	.word	0x003d08ff
 8002630:	431bde83 	.word	0x431bde83
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	460b      	mov	r3, r1
 800264c:	813b      	strh	r3, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002652:	f7ff fc1b 	bl	8001e8c <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b20      	cmp	r3, #32
 8002662:	f040 80d9 	bne.w	8002818 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2319      	movs	r3, #25
 800266c:	2201      	movs	r2, #1
 800266e:	496d      	ldr	r1, [pc, #436]	; (8002824 <HAL_I2C_Mem_Write+0x1ec>)
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fcc1 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	e0cc      	b.n	800281a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_I2C_Mem_Write+0x56>
 800268a:	2302      	movs	r3, #2
 800268c:	e0c5      	b.n	800281a <HAL_I2C_Mem_Write+0x1e2>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d007      	beq.n	80026b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2221      	movs	r2, #33	; 0x21
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <HAL_I2C_Mem_Write+0x1f0>)
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f6:	88f8      	ldrh	r0, [r7, #6]
 80026f8:	893a      	ldrh	r2, [r7, #8]
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4603      	mov	r3, r0
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 faf8 	bl	8002cfc <I2C_RequestMemoryWrite>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d052      	beq.n	80027b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e081      	b.n	800281a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fd86 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b04      	cmp	r3, #4
 800272c:	d107      	bne.n	800273e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06b      	b.n	800281a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d11b      	bne.n	80027b8 <HAL_I2C_Mem_Write+0x180>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1aa      	bne.n	8002716 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fd79 	bl	80032bc <I2C_WaitOnBTFFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e016      	b.n	800281a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002818:	2302      	movs	r3, #2
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	00100002 	.word	0x00100002
 8002828:	ffff0000 	.word	0xffff0000

0800282c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	4608      	mov	r0, r1
 8002836:	4611      	mov	r1, r2
 8002838:	461a      	mov	r2, r3
 800283a:	4603      	mov	r3, r0
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	460b      	mov	r3, r1
 8002840:	813b      	strh	r3, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284a:	f7ff fb1f 	bl	8001e8c <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	f040 8244 	bne.w	8002ce6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2319      	movs	r3, #25
 8002864:	2201      	movs	r2, #1
 8002866:	4982      	ldr	r1, [pc, #520]	; (8002a70 <HAL_I2C_Mem_Read+0x244>)
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fbc5 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
 8002876:	e237      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Mem_Read+0x5a>
 8002882:	2302      	movs	r3, #2
 8002884:	e230      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d007      	beq.n	80028ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2222      	movs	r2, #34	; 0x22
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a62      	ldr	r2, [pc, #392]	; (8002a74 <HAL_I2C_Mem_Read+0x248>)
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ee:	88f8      	ldrh	r0, [r7, #6]
 80028f0:	893a      	ldrh	r2, [r7, #8]
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4603      	mov	r3, r0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa92 	bl	8002e28 <I2C_RequestMemoryRead>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1ec      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	2b00      	cmp	r3, #0
 8002914:	d113      	bne.n	800293e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e1c0      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	2b01      	cmp	r3, #1
 8002944:	d11e      	bne.n	8002984 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002956:	b672      	cpsid	i
}
 8002958:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002980:	b662      	cpsie	i
}
 8002982:	e035      	b.n	80029f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11e      	bne.n	80029ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029c6:	b662      	cpsie	i
}
 80029c8:	e012      	b.n	80029f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029f0:	e166      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	f200 811f 	bhi.w	8002c3a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d123      	bne.n	8002a4c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fc9f 	bl	800334c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e167      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a4a:	e139      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d152      	bne.n	8002afa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4906      	ldr	r1, [pc, #24]	; (8002a78 <HAL_I2C_Mem_Read+0x24c>)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 faca 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e13c      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
 8002a6e:	bf00      	nop
 8002a70:	00100002 	.word	0x00100002
 8002a74:	ffff0000 	.word	0xffff0000
 8002a78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a7c:	b672      	cpsid	i
}
 8002a7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac2:	b662      	cpsie	i
}
 8002ac4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002af8:	e0e2      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	2200      	movs	r2, #0
 8002b02:	497b      	ldr	r1, [pc, #492]	; (8002cf0 <HAL_I2C_Mem_Read+0x4c4>)
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fa77 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0e9      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b5a:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <HAL_I2C_Mem_Read+0x4c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	4a65      	ldr	r2, [pc, #404]	; (8002cf8 <HAL_I2C_Mem_Read+0x4cc>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0a1a      	lsrs	r2, r3, #8
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00da      	lsls	r2, r3, #3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d118      	bne.n	8002bb2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ba2:	b662      	cpsie	i
}
 8002ba4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e09a      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d1d9      	bne.n	8002b74 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c02:	b662      	cpsie	i
}
 8002c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c38:	e042      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fb84 	bl	800334c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e04c      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d118      	bne.n	8002cc0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f ae94 	bne.w	80029f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010004 	.word	0x00010004
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	14f8b589 	.word	0x14f8b589

08002cfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	4608      	mov	r0, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	817b      	strh	r3, [r7, #10]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	813b      	strh	r3, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f960 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4c:	d103      	bne.n	8002d56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e05f      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	492d      	ldr	r1, [pc, #180]	; (8002e24 <I2C_RequestMemoryWrite+0x128>)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f9bb 	bl	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04c      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	6a39      	ldr	r1, [r7, #32]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fa46 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d107      	bne.n	8002dbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e02b      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	e021      	b.n	8002e18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa20 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e005      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	00010002 	.word	0x00010002

08002e28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f8c2 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d103      	bne.n	8002e92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0aa      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	4952      	ldr	r1, [pc, #328]	; (8002ff4 <I2C_RequestMemoryRead+0x1cc>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f91d 	bl	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e097      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f9a8 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d107      	bne.n	8002efa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e076      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	611a      	str	r2, [r3, #16]
 8002f0e:	e021      	b.n	8002f54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	6a39      	ldr	r1, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f982 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d107      	bne.n	8002f46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e050      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4a:	893b      	ldrh	r3, [r7, #8]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f56:	6a39      	ldr	r1, [r7, #32]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f967 	bl	800322c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e035      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f82b 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb6:	d103      	bne.n	8002fc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e013      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	4906      	ldr	r1, [pc, #24]	; (8002ff4 <I2C_RequestMemoryRead+0x1cc>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f886 	bl	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	00010002 	.word	0x00010002

08002ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003008:	e048      	b.n	800309c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d044      	beq.n	800309c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fe ff3b 	bl	8001e8c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d139      	bne.n	800309c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10d      	bne.n	800304e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	43da      	mvns	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4013      	ands	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	e00c      	b.n	8003068 <I2C_WaitOnFlagUntilTimeout+0x70>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	d116      	bne.n	800309c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e023      	b.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10d      	bne.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	e00c      	b.n	80030dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	43da      	mvns	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d093      	beq.n	800300a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fa:	e071      	b.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d123      	bne.n	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e067      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315a:	d041      	beq.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7fe fe96 	bl	8001e8c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d136      	bne.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10c      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e00b      	b.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e021      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10c      	bne.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e00b      	b.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af6d 	bne.w	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003238:	e034      	b.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f8e3 	bl	8003406 <I2C_IsAcknowledgeFailed>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e034      	b.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003250:	d028      	beq.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7fe fe1b 	bl	8001e8c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11d      	bne.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d016      	beq.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e007      	b.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d1c3      	bne.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c8:	e034      	b.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f89b 	bl	8003406 <I2C_IsAcknowledgeFailed>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e034      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e0:	d028      	beq.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe fdd3 	bl	8001e8c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11d      	bne.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d016      	beq.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e007      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d1c3      	bne.n	80032ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003358:	e049      	b.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b10      	cmp	r3, #16
 8003366:	d119      	bne.n	800339c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0210 	mvn.w	r2, #16
 8003370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e030      	b.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fe fd76 	bl	8001e8c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11d      	bne.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d016      	beq.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d1ae      	bne.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341c:	d11b      	bne.n	8003456 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003426:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
	...

08003464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e272      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8087 	beq.w	8003592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003484:	4b92      	ldr	r3, [pc, #584]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b04      	cmp	r3, #4
 800348e:	d00c      	beq.n	80034aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003490:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d112      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5e>
 800349c:	4b8c      	ldr	r3, [pc, #560]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034aa:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d06c      	beq.n	8003590 <HAL_RCC_OscConfig+0x12c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d168      	bne.n	8003590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e24c      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x76>
 80034cc:	4b80      	ldr	r3, [pc, #512]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a7f      	ldr	r2, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e02e      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x98>
 80034e2:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7a      	ldr	r2, [pc, #488]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b78      	ldr	r3, [pc, #480]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a77      	ldr	r2, [pc, #476]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0xbc>
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a71      	ldr	r2, [pc, #452]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6e      	ldr	r2, [pc, #440]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 8003520:	4b6b      	ldr	r3, [pc, #428]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a67      	ldr	r2, [pc, #412]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe fca4 	bl	8001e8c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fca0 	bl	8001e8c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e200      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xe4>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fc90 	bl	8001e8c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe fc8c 	bl	8001e8c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1ec      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x10c>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d063      	beq.n	8003666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035aa:	4b49      	ldr	r3, [pc, #292]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x18c>
 80035b6:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x176>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1c0      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4939      	ldr	r1, [pc, #228]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fc45 	bl	8001e8c <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fc41 	bl	8001e8c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1a1      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4927      	ldr	r1, [pc, #156]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fc24 	bl	8001e8c <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe fc20 	bl	8001e8c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e180      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03a      	beq.n	80036e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_RCC_OscConfig+0x274>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7fe fc04 	bl	8001e8c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003688:	f7fe fc00 	bl	8001e8c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e160      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f000 fafe 	bl	8003ca8 <RCC_Delay>
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_RCC_OscConfig+0x274>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b4:	f7fe fbea 	bl	8001e8c <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ba:	e00f      	b.n	80036dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fe fbe6 	bl	8001e8c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d908      	bls.n	80036dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e146      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	42420000 	.word	0x42420000
 80036d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	4b92      	ldr	r3, [pc, #584]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e9      	bne.n	80036bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a6 	beq.w	8003842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d118      	bne.n	8003760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372e:	4b7f      	ldr	r3, [pc, #508]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7e      	ldr	r2, [pc, #504]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373a:	f7fe fba7 	bl	8001e8c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7fe fba3 	bl	8001e8c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b64      	cmp	r3, #100	; 0x64
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e103      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x312>
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6213      	str	r3, [r2, #32]
 8003774:	e02d      	b.n	80037d2 <HAL_RCC_OscConfig+0x36e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x334>
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4a66      	ldr	r2, [pc, #408]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6213      	str	r3, [r2, #32]
 8003796:	e01c      	b.n	80037d2 <HAL_RCC_OscConfig+0x36e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b05      	cmp	r3, #5
 800379e:	d10c      	bne.n	80037ba <HAL_RCC_OscConfig+0x356>
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a60      	ldr	r2, [pc, #384]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6213      	str	r3, [r2, #32]
 80037ac:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6213      	str	r3, [r2, #32]
 80037b8:	e00b      	b.n	80037d2 <HAL_RCC_OscConfig+0x36e>
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a5a      	ldr	r2, [pc, #360]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6213      	str	r3, [r2, #32]
 80037c6:	4b58      	ldr	r3, [pc, #352]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4a57      	ldr	r2, [pc, #348]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d015      	beq.n	8003806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe fb57 	bl	8001e8c <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe fb53 	bl	8001e8c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0b1      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ee      	beq.n	80037e2 <HAL_RCC_OscConfig+0x37e>
 8003804:	e014      	b.n	8003830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe fb41 	bl	8001e8c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe fb3d 	bl	8001e8c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e09b      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ee      	bne.n	800380e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d105      	bne.n	8003842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003836:	4b3c      	ldr	r3, [pc, #240]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8087 	beq.w	800395a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d061      	beq.n	800391c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d146      	bne.n	80038ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b33      	ldr	r3, [pc, #204]	; (8003930 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fe fb11 	bl	8001e8c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe fb0d 	bl	8001e8c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e06d      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d108      	bne.n	80038a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4921      	ldr	r1, [pc, #132]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a8:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a19      	ldr	r1, [r3, #32]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	430b      	orrs	r3, r1
 80038ba:	491b      	ldr	r1, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x4cc>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe fae1 	bl	8001e8c <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe fadd 	bl	8001e8c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e03d      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x46a>
 80038ec:	e035      	b.n	800395a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_RCC_OscConfig+0x4cc>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe faca 	bl	8001e8c <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe fac6 	bl	8001e8c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e026      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x498>
 800391a:	e01e      	b.n	800395a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e019      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
 8003928:	40021000 	.word	0x40021000
 800392c:	40007000 	.word	0x40007000
 8003930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_OscConfig+0x500>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	429a      	cmp	r2, r3
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000

08003968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0d0      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d910      	bls.n	80039ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	4965      	ldr	r1, [pc, #404]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d040      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d115      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e073      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06b      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4936      	ldr	r1, [pc, #216]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fe fa18 	bl	8001e8c <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fe fa14 	bl	8001e8c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e053      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d210      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0207 	bic.w	r2, r3, #7
 8003a9e:	4922      	ldr	r1, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f821 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1cc>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1d0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe f810 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40022000 	.word	0x40022000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08008774 	.word	0x08008774
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x30>
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x36>
 8003b6a:	e027      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b6e:	613b      	str	r3, [r7, #16]
      break;
 8003b70:	e027      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	0c9b      	lsrs	r3, r3, #18
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b7c:	5cd3      	ldrb	r3, [r2, r3]
 8003b7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0c5b      	lsrs	r3, r3, #17
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e004      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	613b      	str	r3, [r7, #16]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bbe:	613b      	str	r3, [r7, #16]
      break;
 8003bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc2:	693b      	ldr	r3, [r7, #16]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	007a1200 	.word	0x007a1200
 8003bd8:	0800878c 	.word	0x0800878c
 8003bdc:	0800879c 	.word	0x0800879c
 8003be0:	003d0900 	.word	0x003d0900

08003be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be8:	4b02      	ldr	r3, [pc, #8]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bfc:	f7ff fff2 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08008784 	.word	0x08008784

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c24:	f7ff ffde 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	0adb      	lsrs	r3, r3, #11
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	08008784 	.word	0x08008784

08003c48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	220f      	movs	r2, #15
 8003c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCC_GetClockConfig+0x58>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0203 	and.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCC_GetClockConfig+0x58>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetClockConfig+0x58>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_RCC_GetClockConfig+0x58>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0207 	and.w	r2, r3, #7
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <RCC_Delay+0x34>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <RCC_Delay+0x38>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0a5b      	lsrs	r3, r3, #9
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cc4:	bf00      	nop
  }
  while (Delay --);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e5a      	subs	r2, r3, #1
 8003cca:	60fa      	str	r2, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f9      	bne.n	8003cc4 <RCC_Delay+0x1c>
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	10624dd3 	.word	0x10624dd3

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e041      	b.n	8003d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f839 	bl	8003d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 f9b4 	bl	8004090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e03a      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <HAL_TIM_Base_Start_IT+0x98>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_TIM_Base_Start_IT+0x58>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d009      	beq.n	8003dec <HAL_TIM_Base_Start_IT+0x58>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_TIM_Base_Start_IT+0x58>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <HAL_TIM_Base_Start_IT+0xa0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d111      	bne.n	8003e10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d010      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	e007      	b.n	8003e20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800

08003e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0202 	mvn.w	r2, #2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8ed 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8e0 	bl	8004048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f8ef 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0204 	mvn.w	r2, #4
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8c3 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8b6 	bl	8004048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8c5 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0208 	mvn.w	r2, #8
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2204      	movs	r2, #4
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f899 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f88c 	bl	8004048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f89b 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2208      	movs	r2, #8
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f86f 	bl	800405a <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f862 	bl	8004048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f871 	bl	800406c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10e      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0201 	mvn.w	r2, #1
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fcec 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8bf 	bl	8004166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d10e      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d107      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f835 	bl	800407e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b20      	cmp	r3, #32
 8004020:	d10e      	bne.n	8004040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b20      	cmp	r3, #32
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0220 	mvn.w	r2, #32
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f88a 	bl	8004154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a29      	ldr	r2, [pc, #164]	; (8004148 <TIM_Base_SetConfig+0xb8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x30>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x30>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a26      	ldr	r2, [pc, #152]	; (800414c <TIM_Base_SetConfig+0xbc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x30>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a25      	ldr	r2, [pc, #148]	; (8004150 <TIM_Base_SetConfig+0xc0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <TIM_Base_SetConfig+0xb8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <TIM_Base_SetConfig+0x62>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d007      	beq.n	80040f2 <TIM_Base_SetConfig+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <TIM_Base_SetConfig+0xbc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_Base_SetConfig+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a18      	ldr	r2, [pc, #96]	; (8004150 <TIM_Base_SetConfig+0xc0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d108      	bne.n	8004104 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a07      	ldr	r2, [pc, #28]	; (8004148 <TIM_Base_SetConfig+0xb8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	615a      	str	r2, [r3, #20]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800

08004154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e042      	b.n	8004210 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fc80 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	; 0x24
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f91d 	bl	80043fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b20      	cmp	r3, #32
 8004236:	d16d      	bne.n	8004314 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Transmit+0x2c>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e066      	b.n	8004316 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	; 0x21
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fd fe19 	bl	8001e8c <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x6c>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800428c:	e02a      	b.n	80042e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f840 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e036      	b.n	8004316 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3302      	adds	r3, #2
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e007      	b.n	80042d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1cf      	bne.n	800428e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2140      	movs	r1, #64	; 0x40
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f810 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e006      	b.n	8004316 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b090      	sub	sp, #64	; 0x40
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	e050      	b.n	80043d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004336:	d04c      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0x30>
 800433e:	f7fd fda5 	bl	8001e8c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434a:	429a      	cmp	r2, r3
 800434c:	d241      	bcs.n	80043d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800436e:	637a      	str	r2, [r7, #52]	; 0x34
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3314      	adds	r3, #20
 8004388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	613b      	str	r3, [r7, #16]
   return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a2:	623a      	str	r2, [r7, #32]
 80043a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	69f9      	ldr	r1, [r7, #28]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e00f      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d09f      	beq.n	8004330 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3740      	adds	r7, #64	; 0x40
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004436:	f023 030c 	bic.w	r3, r3, #12
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	430b      	orrs	r3, r1
 8004442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <UART_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7ff fbdc 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	e002      	b.n	8004472 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7ff fbc4 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8004470:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	0119      	lsls	r1, r3, #4
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <UART_SetConfig+0x118>)
 80044aa:	fba3 0302 	umull	r0, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2064      	movs	r0, #100	; 0x64
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <UART_SetConfig+0x118>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	4419      	add	r1, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <UART_SetConfig+0x118>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2064      	movs	r0, #100	; 0x64
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	440a      	add	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40013800 	.word	0x40013800
 8004514:	51eb851f 	.word	0x51eb851f

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	2000000c 	.word	0x2000000c

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	2600      	movs	r6, #0
 8004528:	4d0c      	ldr	r5, [pc, #48]	; (800455c <__libc_init_array+0x38>)
 800452a:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452c:	1b64      	subs	r4, r4, r5
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	f004 f8ea 	bl	800870c <_init>
 8004538:	2600      	movs	r6, #0
 800453a:	4d0a      	ldr	r5, [pc, #40]	; (8004564 <__libc_init_array+0x40>)
 800453c:	4c0a      	ldr	r4, [pc, #40]	; (8004568 <__libc_init_array+0x44>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	08008dc8 	.word	0x08008dc8
 8004560:	08008dc8 	.word	0x08008dc8
 8004564:	08008dc8 	.word	0x08008dc8
 8004568:	08008dcc 	.word	0x08008dcc

0800456c <memset>:
 800456c:	4603      	mov	r3, r0
 800456e:	4402      	add	r2, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <__cvt>:
 800457c:	2b00      	cmp	r3, #0
 800457e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004582:	461f      	mov	r7, r3
 8004584:	bfbb      	ittet	lt
 8004586:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800458a:	461f      	movlt	r7, r3
 800458c:	2300      	movge	r3, #0
 800458e:	232d      	movlt	r3, #45	; 0x2d
 8004590:	b088      	sub	sp, #32
 8004592:	4614      	mov	r4, r2
 8004594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004596:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004598:	7013      	strb	r3, [r2, #0]
 800459a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800459c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045a0:	f023 0820 	bic.w	r8, r3, #32
 80045a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045a8:	d005      	beq.n	80045b6 <__cvt+0x3a>
 80045aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045ae:	d100      	bne.n	80045b2 <__cvt+0x36>
 80045b0:	3501      	adds	r5, #1
 80045b2:	2302      	movs	r3, #2
 80045b4:	e000      	b.n	80045b8 <__cvt+0x3c>
 80045b6:	2303      	movs	r3, #3
 80045b8:	aa07      	add	r2, sp, #28
 80045ba:	9204      	str	r2, [sp, #16]
 80045bc:	aa06      	add	r2, sp, #24
 80045be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045c2:	e9cd 3500 	strd	r3, r5, [sp]
 80045c6:	4622      	mov	r2, r4
 80045c8:	463b      	mov	r3, r7
 80045ca:	f000 fe11 	bl	80051f0 <_dtoa_r>
 80045ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045d2:	4606      	mov	r6, r0
 80045d4:	d102      	bne.n	80045dc <__cvt+0x60>
 80045d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045d8:	07db      	lsls	r3, r3, #31
 80045da:	d522      	bpl.n	8004622 <__cvt+0xa6>
 80045dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045e0:	eb06 0905 	add.w	r9, r6, r5
 80045e4:	d110      	bne.n	8004608 <__cvt+0x8c>
 80045e6:	7833      	ldrb	r3, [r6, #0]
 80045e8:	2b30      	cmp	r3, #48	; 0x30
 80045ea:	d10a      	bne.n	8004602 <__cvt+0x86>
 80045ec:	2200      	movs	r2, #0
 80045ee:	2300      	movs	r3, #0
 80045f0:	4620      	mov	r0, r4
 80045f2:	4639      	mov	r1, r7
 80045f4:	f7fc f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80045f8:	b918      	cbnz	r0, 8004602 <__cvt+0x86>
 80045fa:	f1c5 0501 	rsb	r5, r5, #1
 80045fe:	f8ca 5000 	str.w	r5, [sl]
 8004602:	f8da 3000 	ldr.w	r3, [sl]
 8004606:	4499      	add	r9, r3
 8004608:	2200      	movs	r2, #0
 800460a:	2300      	movs	r3, #0
 800460c:	4620      	mov	r0, r4
 800460e:	4639      	mov	r1, r7
 8004610:	f7fc f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8004614:	b108      	cbz	r0, 800461a <__cvt+0x9e>
 8004616:	f8cd 901c 	str.w	r9, [sp, #28]
 800461a:	2230      	movs	r2, #48	; 0x30
 800461c:	9b07      	ldr	r3, [sp, #28]
 800461e:	454b      	cmp	r3, r9
 8004620:	d307      	bcc.n	8004632 <__cvt+0xb6>
 8004622:	4630      	mov	r0, r6
 8004624:	9b07      	ldr	r3, [sp, #28]
 8004626:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004628:	1b9b      	subs	r3, r3, r6
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	b008      	add	sp, #32
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	9107      	str	r1, [sp, #28]
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e7f0      	b.n	800461c <__cvt+0xa0>

0800463a <__exponent>:
 800463a:	4603      	mov	r3, r0
 800463c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463e:	2900      	cmp	r1, #0
 8004640:	f803 2b02 	strb.w	r2, [r3], #2
 8004644:	bfb6      	itet	lt
 8004646:	222d      	movlt	r2, #45	; 0x2d
 8004648:	222b      	movge	r2, #43	; 0x2b
 800464a:	4249      	neglt	r1, r1
 800464c:	2909      	cmp	r1, #9
 800464e:	7042      	strb	r2, [r0, #1]
 8004650:	dd2b      	ble.n	80046aa <__exponent+0x70>
 8004652:	f10d 0407 	add.w	r4, sp, #7
 8004656:	46a4      	mov	ip, r4
 8004658:	270a      	movs	r7, #10
 800465a:	fb91 f6f7 	sdiv	r6, r1, r7
 800465e:	460a      	mov	r2, r1
 8004660:	46a6      	mov	lr, r4
 8004662:	fb07 1516 	mls	r5, r7, r6, r1
 8004666:	2a63      	cmp	r2, #99	; 0x63
 8004668:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800466c:	4631      	mov	r1, r6
 800466e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004672:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004676:	dcf0      	bgt.n	800465a <__exponent+0x20>
 8004678:	3130      	adds	r1, #48	; 0x30
 800467a:	f1ae 0502 	sub.w	r5, lr, #2
 800467e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004682:	4629      	mov	r1, r5
 8004684:	1c44      	adds	r4, r0, #1
 8004686:	4561      	cmp	r1, ip
 8004688:	d30a      	bcc.n	80046a0 <__exponent+0x66>
 800468a:	f10d 0209 	add.w	r2, sp, #9
 800468e:	eba2 020e 	sub.w	r2, r2, lr
 8004692:	4565      	cmp	r5, ip
 8004694:	bf88      	it	hi
 8004696:	2200      	movhi	r2, #0
 8004698:	4413      	add	r3, r2
 800469a:	1a18      	subs	r0, r3, r0
 800469c:	b003      	add	sp, #12
 800469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046a8:	e7ed      	b.n	8004686 <__exponent+0x4c>
 80046aa:	2330      	movs	r3, #48	; 0x30
 80046ac:	3130      	adds	r1, #48	; 0x30
 80046ae:	7083      	strb	r3, [r0, #2]
 80046b0:	70c1      	strb	r1, [r0, #3]
 80046b2:	1d03      	adds	r3, r0, #4
 80046b4:	e7f1      	b.n	800469a <__exponent+0x60>
	...

080046b8 <_printf_float>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	b091      	sub	sp, #68	; 0x44
 80046be:	460c      	mov	r4, r1
 80046c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046c4:	4616      	mov	r6, r2
 80046c6:	461f      	mov	r7, r3
 80046c8:	4605      	mov	r5, r0
 80046ca:	f001 fd33 	bl	8006134 <_localeconv_r>
 80046ce:	6803      	ldr	r3, [r0, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	9309      	str	r3, [sp, #36]	; 0x24
 80046d4:	f7fb fd3c 	bl	8000150 <strlen>
 80046d8:	2300      	movs	r3, #0
 80046da:	930e      	str	r3, [sp, #56]	; 0x38
 80046dc:	f8d8 3000 	ldr.w	r3, [r8]
 80046e0:	900a      	str	r0, [sp, #40]	; 0x28
 80046e2:	3307      	adds	r3, #7
 80046e4:	f023 0307 	bic.w	r3, r3, #7
 80046e8:	f103 0208 	add.w	r2, r3, #8
 80046ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046f0:	f8d4 b000 	ldr.w	fp, [r4]
 80046f4:	f8c8 2000 	str.w	r2, [r8]
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004700:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004704:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004708:	930b      	str	r3, [sp, #44]	; 0x2c
 800470a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800470e:	4640      	mov	r0, r8
 8004710:	4b9c      	ldr	r3, [pc, #624]	; (8004984 <_printf_float+0x2cc>)
 8004712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004714:	f7fc f97a 	bl	8000a0c <__aeabi_dcmpun>
 8004718:	bb70      	cbnz	r0, 8004778 <_printf_float+0xc0>
 800471a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800471e:	4640      	mov	r0, r8
 8004720:	4b98      	ldr	r3, [pc, #608]	; (8004984 <_printf_float+0x2cc>)
 8004722:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004724:	f7fc f954 	bl	80009d0 <__aeabi_dcmple>
 8004728:	bb30      	cbnz	r0, 8004778 <_printf_float+0xc0>
 800472a:	2200      	movs	r2, #0
 800472c:	2300      	movs	r3, #0
 800472e:	4640      	mov	r0, r8
 8004730:	4651      	mov	r1, sl
 8004732:	f7fc f943 	bl	80009bc <__aeabi_dcmplt>
 8004736:	b110      	cbz	r0, 800473e <_printf_float+0x86>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473e:	4b92      	ldr	r3, [pc, #584]	; (8004988 <_printf_float+0x2d0>)
 8004740:	4892      	ldr	r0, [pc, #584]	; (800498c <_printf_float+0x2d4>)
 8004742:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004746:	bf94      	ite	ls
 8004748:	4698      	movls	r8, r3
 800474a:	4680      	movhi	r8, r0
 800474c:	2303      	movs	r3, #3
 800474e:	f04f 0a00 	mov.w	sl, #0
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	f02b 0304 	bic.w	r3, fp, #4
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	4633      	mov	r3, r6
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	9700      	str	r7, [sp, #0]
 8004762:	aa0f      	add	r2, sp, #60	; 0x3c
 8004764:	f000 f9d4 	bl	8004b10 <_printf_common>
 8004768:	3001      	adds	r0, #1
 800476a:	f040 8090 	bne.w	800488e <_printf_float+0x1d6>
 800476e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004772:	b011      	add	sp, #68	; 0x44
 8004774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	4642      	mov	r2, r8
 800477a:	4653      	mov	r3, sl
 800477c:	4640      	mov	r0, r8
 800477e:	4651      	mov	r1, sl
 8004780:	f7fc f944 	bl	8000a0c <__aeabi_dcmpun>
 8004784:	b148      	cbz	r0, 800479a <_printf_float+0xe2>
 8004786:	f1ba 0f00 	cmp.w	sl, #0
 800478a:	bfb8      	it	lt
 800478c:	232d      	movlt	r3, #45	; 0x2d
 800478e:	4880      	ldr	r0, [pc, #512]	; (8004990 <_printf_float+0x2d8>)
 8004790:	bfb8      	it	lt
 8004792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004796:	4b7f      	ldr	r3, [pc, #508]	; (8004994 <_printf_float+0x2dc>)
 8004798:	e7d3      	b.n	8004742 <_printf_float+0x8a>
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	d142      	bne.n	800482a <_printf_float+0x172>
 80047a4:	2306      	movs	r3, #6
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	9206      	str	r2, [sp, #24]
 80047ac:	aa0e      	add	r2, sp, #56	; 0x38
 80047ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80047b2:	aa0d      	add	r2, sp, #52	; 0x34
 80047b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80047b8:	9203      	str	r2, [sp, #12]
 80047ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80047be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	4642      	mov	r2, r8
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	4628      	mov	r0, r5
 80047cc:	4653      	mov	r3, sl
 80047ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80047d0:	f7ff fed4 	bl	800457c <__cvt>
 80047d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047d6:	4680      	mov	r8, r0
 80047d8:	2947      	cmp	r1, #71	; 0x47
 80047da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047dc:	d108      	bne.n	80047f0 <_printf_float+0x138>
 80047de:	1cc8      	adds	r0, r1, #3
 80047e0:	db02      	blt.n	80047e8 <_printf_float+0x130>
 80047e2:	6863      	ldr	r3, [r4, #4]
 80047e4:	4299      	cmp	r1, r3
 80047e6:	dd40      	ble.n	800486a <_printf_float+0x1b2>
 80047e8:	f1a9 0902 	sub.w	r9, r9, #2
 80047ec:	fa5f f989 	uxtb.w	r9, r9
 80047f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047f4:	d81f      	bhi.n	8004836 <_printf_float+0x17e>
 80047f6:	464a      	mov	r2, r9
 80047f8:	3901      	subs	r1, #1
 80047fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047fe:	910d      	str	r1, [sp, #52]	; 0x34
 8004800:	f7ff ff1b 	bl	800463a <__exponent>
 8004804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004806:	4682      	mov	sl, r0
 8004808:	1813      	adds	r3, r2, r0
 800480a:	2a01      	cmp	r2, #1
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	dc02      	bgt.n	8004816 <_printf_float+0x15e>
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	07d2      	lsls	r2, r2, #31
 8004814:	d501      	bpl.n	800481a <_printf_float+0x162>
 8004816:	3301      	adds	r3, #1
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800481e:	2b00      	cmp	r3, #0
 8004820:	d09b      	beq.n	800475a <_printf_float+0xa2>
 8004822:	232d      	movs	r3, #45	; 0x2d
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	e797      	b.n	800475a <_printf_float+0xa2>
 800482a:	2947      	cmp	r1, #71	; 0x47
 800482c:	d1bc      	bne.n	80047a8 <_printf_float+0xf0>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ba      	bne.n	80047a8 <_printf_float+0xf0>
 8004832:	2301      	movs	r3, #1
 8004834:	e7b7      	b.n	80047a6 <_printf_float+0xee>
 8004836:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800483a:	d118      	bne.n	800486e <_printf_float+0x1b6>
 800483c:	2900      	cmp	r1, #0
 800483e:	6863      	ldr	r3, [r4, #4]
 8004840:	dd0b      	ble.n	800485a <_printf_float+0x1a2>
 8004842:	6121      	str	r1, [r4, #16]
 8004844:	b913      	cbnz	r3, 800484c <_printf_float+0x194>
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	07d0      	lsls	r0, r2, #31
 800484a:	d502      	bpl.n	8004852 <_printf_float+0x19a>
 800484c:	3301      	adds	r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	6123      	str	r3, [r4, #16]
 8004852:	f04f 0a00 	mov.w	sl, #0
 8004856:	65a1      	str	r1, [r4, #88]	; 0x58
 8004858:	e7df      	b.n	800481a <_printf_float+0x162>
 800485a:	b913      	cbnz	r3, 8004862 <_printf_float+0x1aa>
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	07d2      	lsls	r2, r2, #31
 8004860:	d501      	bpl.n	8004866 <_printf_float+0x1ae>
 8004862:	3302      	adds	r3, #2
 8004864:	e7f4      	b.n	8004850 <_printf_float+0x198>
 8004866:	2301      	movs	r3, #1
 8004868:	e7f2      	b.n	8004850 <_printf_float+0x198>
 800486a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800486e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004870:	4299      	cmp	r1, r3
 8004872:	db05      	blt.n	8004880 <_printf_float+0x1c8>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	6121      	str	r1, [r4, #16]
 8004878:	07d8      	lsls	r0, r3, #31
 800487a:	d5ea      	bpl.n	8004852 <_printf_float+0x19a>
 800487c:	1c4b      	adds	r3, r1, #1
 800487e:	e7e7      	b.n	8004850 <_printf_float+0x198>
 8004880:	2900      	cmp	r1, #0
 8004882:	bfcc      	ite	gt
 8004884:	2201      	movgt	r2, #1
 8004886:	f1c1 0202 	rsble	r2, r1, #2
 800488a:	4413      	add	r3, r2
 800488c:	e7e0      	b.n	8004850 <_printf_float+0x198>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	055a      	lsls	r2, r3, #21
 8004892:	d407      	bmi.n	80048a4 <_printf_float+0x1ec>
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	4642      	mov	r2, r8
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	d12b      	bne.n	80048fa <_printf_float+0x242>
 80048a2:	e764      	b.n	800476e <_printf_float+0xb6>
 80048a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048a8:	f240 80dd 	bls.w	8004a66 <_printf_float+0x3ae>
 80048ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048b0:	2200      	movs	r2, #0
 80048b2:	2300      	movs	r3, #0
 80048b4:	f7fc f878 	bl	80009a8 <__aeabi_dcmpeq>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d033      	beq.n	8004924 <_printf_float+0x26c>
 80048bc:	2301      	movs	r3, #1
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	4a35      	ldr	r2, [pc, #212]	; (8004998 <_printf_float+0x2e0>)
 80048c4:	47b8      	blx	r7
 80048c6:	3001      	adds	r0, #1
 80048c8:	f43f af51 	beq.w	800476e <_printf_float+0xb6>
 80048cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048d0:	429a      	cmp	r2, r3
 80048d2:	db02      	blt.n	80048da <_printf_float+0x222>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	07d8      	lsls	r0, r3, #31
 80048d8:	d50f      	bpl.n	80048fa <_printf_float+0x242>
 80048da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f af42 	beq.w	800476e <_printf_float+0xb6>
 80048ea:	f04f 0800 	mov.w	r8, #0
 80048ee:	f104 091a 	add.w	r9, r4, #26
 80048f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4543      	cmp	r3, r8
 80048f8:	dc09      	bgt.n	800490e <_printf_float+0x256>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	079b      	lsls	r3, r3, #30
 80048fe:	f100 8102 	bmi.w	8004b06 <_printf_float+0x44e>
 8004902:	68e0      	ldr	r0, [r4, #12]
 8004904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004906:	4298      	cmp	r0, r3
 8004908:	bfb8      	it	lt
 800490a:	4618      	movlt	r0, r3
 800490c:	e731      	b.n	8004772 <_printf_float+0xba>
 800490e:	2301      	movs	r3, #1
 8004910:	464a      	mov	r2, r9
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	f43f af28 	beq.w	800476e <_printf_float+0xb6>
 800491e:	f108 0801 	add.w	r8, r8, #1
 8004922:	e7e6      	b.n	80048f2 <_printf_float+0x23a>
 8004924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004926:	2b00      	cmp	r3, #0
 8004928:	dc38      	bgt.n	800499c <_printf_float+0x2e4>
 800492a:	2301      	movs	r3, #1
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <_printf_float+0x2e0>)
 8004932:	47b8      	blx	r7
 8004934:	3001      	adds	r0, #1
 8004936:	f43f af1a 	beq.w	800476e <_printf_float+0xb6>
 800493a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800493e:	4313      	orrs	r3, r2
 8004940:	d102      	bne.n	8004948 <_printf_float+0x290>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	07d9      	lsls	r1, r3, #31
 8004946:	d5d8      	bpl.n	80048fa <_printf_float+0x242>
 8004948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f af0b 	beq.w	800476e <_printf_float+0xb6>
 8004958:	f04f 0900 	mov.w	r9, #0
 800495c:	f104 0a1a 	add.w	sl, r4, #26
 8004960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004962:	425b      	negs	r3, r3
 8004964:	454b      	cmp	r3, r9
 8004966:	dc01      	bgt.n	800496c <_printf_float+0x2b4>
 8004968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800496a:	e794      	b.n	8004896 <_printf_float+0x1de>
 800496c:	2301      	movs	r3, #1
 800496e:	4652      	mov	r2, sl
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f aef9 	beq.w	800476e <_printf_float+0xb6>
 800497c:	f109 0901 	add.w	r9, r9, #1
 8004980:	e7ee      	b.n	8004960 <_printf_float+0x2a8>
 8004982:	bf00      	nop
 8004984:	7fefffff 	.word	0x7fefffff
 8004988:	080087a4 	.word	0x080087a4
 800498c:	080087a8 	.word	0x080087a8
 8004990:	080087b0 	.word	0x080087b0
 8004994:	080087ac 	.word	0x080087ac
 8004998:	080087b4 	.word	0x080087b4
 800499c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800499e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bfa8      	it	ge
 80049a4:	461a      	movge	r2, r3
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	4691      	mov	r9, r2
 80049aa:	dc37      	bgt.n	8004a1c <_printf_float+0x364>
 80049ac:	f04f 0b00 	mov.w	fp, #0
 80049b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b4:	f104 021a 	add.w	r2, r4, #26
 80049b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049bc:	ebaa 0309 	sub.w	r3, sl, r9
 80049c0:	455b      	cmp	r3, fp
 80049c2:	dc33      	bgt.n	8004a2c <_printf_float+0x374>
 80049c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049c8:	429a      	cmp	r2, r3
 80049ca:	db3b      	blt.n	8004a44 <_printf_float+0x38c>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	07da      	lsls	r2, r3, #31
 80049d0:	d438      	bmi.n	8004a44 <_printf_float+0x38c>
 80049d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049d6:	eba3 020a 	sub.w	r2, r3, sl
 80049da:	eba3 0901 	sub.w	r9, r3, r1
 80049de:	4591      	cmp	r9, r2
 80049e0:	bfa8      	it	ge
 80049e2:	4691      	movge	r9, r2
 80049e4:	f1b9 0f00 	cmp.w	r9, #0
 80049e8:	dc34      	bgt.n	8004a54 <_printf_float+0x39c>
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049f2:	f104 0a1a 	add.w	sl, r4, #26
 80049f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	eba3 0309 	sub.w	r3, r3, r9
 8004a00:	4543      	cmp	r3, r8
 8004a02:	f77f af7a 	ble.w	80048fa <_printf_float+0x242>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4652      	mov	r2, sl
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f aeac 	beq.w	800476e <_printf_float+0xb6>
 8004a16:	f108 0801 	add.w	r8, r8, #1
 8004a1a:	e7ec      	b.n	80049f6 <_printf_float+0x33e>
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4642      	mov	r2, r8
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	d1c0      	bne.n	80049ac <_printf_float+0x2f4>
 8004a2a:	e6a0      	b.n	800476e <_printf_float+0xb6>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	f43f ae99 	beq.w	800476e <_printf_float+0xb6>
 8004a3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a3e:	f10b 0b01 	add.w	fp, fp, #1
 8004a42:	e7b9      	b.n	80049b8 <_printf_float+0x300>
 8004a44:	4631      	mov	r1, r6
 8004a46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d1bf      	bne.n	80049d2 <_printf_float+0x31a>
 8004a52:	e68c      	b.n	800476e <_printf_float+0xb6>
 8004a54:	464b      	mov	r3, r9
 8004a56:	4631      	mov	r1, r6
 8004a58:	4628      	mov	r0, r5
 8004a5a:	eb08 020a 	add.w	r2, r8, sl
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	d1c2      	bne.n	80049ea <_printf_float+0x332>
 8004a64:	e683      	b.n	800476e <_printf_float+0xb6>
 8004a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a68:	2a01      	cmp	r2, #1
 8004a6a:	dc01      	bgt.n	8004a70 <_printf_float+0x3b8>
 8004a6c:	07db      	lsls	r3, r3, #31
 8004a6e:	d537      	bpl.n	8004ae0 <_printf_float+0x428>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4642      	mov	r2, r8
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f ae77 	beq.w	800476e <_printf_float+0xb6>
 8004a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f43f ae6f 	beq.w	800476e <_printf_float+0xb6>
 8004a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a94:	2200      	movs	r2, #0
 8004a96:	2300      	movs	r3, #0
 8004a98:	f7fb ff86 	bl	80009a8 <__aeabi_dcmpeq>
 8004a9c:	b9d8      	cbnz	r0, 8004ad6 <_printf_float+0x41e>
 8004a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aa0:	f108 0201 	add.w	r2, r8, #1
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	d10e      	bne.n	8004ace <_printf_float+0x416>
 8004ab0:	e65d      	b.n	800476e <_printf_float+0xb6>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	464a      	mov	r2, r9
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	f43f ae56 	beq.w	800476e <_printf_float+0xb6>
 8004ac2:	f108 0801 	add.w	r8, r8, #1
 8004ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	4543      	cmp	r3, r8
 8004acc:	dcf1      	bgt.n	8004ab2 <_printf_float+0x3fa>
 8004ace:	4653      	mov	r3, sl
 8004ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ad4:	e6e0      	b.n	8004898 <_printf_float+0x1e0>
 8004ad6:	f04f 0800 	mov.w	r8, #0
 8004ada:	f104 091a 	add.w	r9, r4, #26
 8004ade:	e7f2      	b.n	8004ac6 <_printf_float+0x40e>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4642      	mov	r2, r8
 8004ae4:	e7df      	b.n	8004aa6 <_printf_float+0x3ee>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	464a      	mov	r2, r9
 8004aea:	4631      	mov	r1, r6
 8004aec:	4628      	mov	r0, r5
 8004aee:	47b8      	blx	r7
 8004af0:	3001      	adds	r0, #1
 8004af2:	f43f ae3c 	beq.w	800476e <_printf_float+0xb6>
 8004af6:	f108 0801 	add.w	r8, r8, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	4543      	cmp	r3, r8
 8004b02:	dcf0      	bgt.n	8004ae6 <_printf_float+0x42e>
 8004b04:	e6fd      	b.n	8004902 <_printf_float+0x24a>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	f104 0919 	add.w	r9, r4, #25
 8004b0e:	e7f4      	b.n	8004afa <_printf_float+0x442>

08004b10 <_printf_common>:
 8004b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	4616      	mov	r6, r2
 8004b16:	4699      	mov	r9, r3
 8004b18:	688a      	ldr	r2, [r1, #8]
 8004b1a:	690b      	ldr	r3, [r1, #16]
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	bfb8      	it	lt
 8004b22:	4613      	movlt	r3, r2
 8004b24:	6033      	str	r3, [r6, #0]
 8004b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b30:	b10a      	cbz	r2, 8004b36 <_printf_common+0x26>
 8004b32:	3301      	adds	r3, #1
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	0699      	lsls	r1, r3, #26
 8004b3a:	bf42      	ittt	mi
 8004b3c:	6833      	ldrmi	r3, [r6, #0]
 8004b3e:	3302      	addmi	r3, #2
 8004b40:	6033      	strmi	r3, [r6, #0]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	f015 0506 	ands.w	r5, r5, #6
 8004b48:	d106      	bne.n	8004b58 <_printf_common+0x48>
 8004b4a:	f104 0a19 	add.w	sl, r4, #25
 8004b4e:	68e3      	ldr	r3, [r4, #12]
 8004b50:	6832      	ldr	r2, [r6, #0]
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	42ab      	cmp	r3, r5
 8004b56:	dc28      	bgt.n	8004baa <_printf_common+0x9a>
 8004b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b5c:	1e13      	subs	r3, r2, #0
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	bf18      	it	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	0692      	lsls	r2, r2, #26
 8004b66:	d42d      	bmi.n	8004bc4 <_printf_common+0xb4>
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b70:	47c0      	blx	r8
 8004b72:	3001      	adds	r0, #1
 8004b74:	d020      	beq.n	8004bb8 <_printf_common+0xa8>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	68e5      	ldr	r5, [r4, #12]
 8004b7a:	f003 0306 	and.w	r3, r3, #6
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	bf18      	it	ne
 8004b82:	2500      	movne	r5, #0
 8004b84:	6832      	ldr	r2, [r6, #0]
 8004b86:	f04f 0600 	mov.w	r6, #0
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	bf08      	it	eq
 8004b8e:	1aad      	subeq	r5, r5, r2
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	bf08      	it	eq
 8004b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	bfc4      	itt	gt
 8004b9c:	1a9b      	subgt	r3, r3, r2
 8004b9e:	18ed      	addgt	r5, r5, r3
 8004ba0:	341a      	adds	r4, #26
 8004ba2:	42b5      	cmp	r5, r6
 8004ba4:	d11a      	bne.n	8004bdc <_printf_common+0xcc>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e008      	b.n	8004bbc <_printf_common+0xac>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4652      	mov	r2, sl
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	47c0      	blx	r8
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_printf_common+0xb0>
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7c4      	b.n	8004b4e <_printf_common+0x3e>
 8004bc4:	2030      	movs	r0, #48	; 0x30
 8004bc6:	18e1      	adds	r1, r4, r3
 8004bc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd2:	4422      	add	r2, r4
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bda:	e7c5      	b.n	8004b68 <_printf_common+0x58>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4622      	mov	r2, r4
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d0e6      	beq.n	8004bb8 <_printf_common+0xa8>
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7d9      	b.n	8004ba2 <_printf_common+0x92>
	...

08004bf0 <_printf_i>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	7e0f      	ldrb	r7, [r1, #24]
 8004bf6:	4691      	mov	r9, r2
 8004bf8:	2f78      	cmp	r7, #120	; 0x78
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	469a      	mov	sl, r3
 8004c00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c06:	d807      	bhi.n	8004c18 <_printf_i+0x28>
 8004c08:	2f62      	cmp	r7, #98	; 0x62
 8004c0a:	d80a      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	f000 80d9 	beq.w	8004dc4 <_printf_i+0x1d4>
 8004c12:	2f58      	cmp	r7, #88	; 0x58
 8004c14:	f000 80a4 	beq.w	8004d60 <_printf_i+0x170>
 8004c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c20:	e03a      	b.n	8004c98 <_printf_i+0xa8>
 8004c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c26:	2b15      	cmp	r3, #21
 8004c28:	d8f6      	bhi.n	8004c18 <_printf_i+0x28>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_printf_i+0x40>)
 8004c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c19 	.word	0x08004c19
 8004c3c:	08004c19 	.word	0x08004c19
 8004c40:	08004c19 	.word	0x08004c19
 8004c44:	08004c19 	.word	0x08004c19
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c19 	.word	0x08004c19
 8004c50:	08004c19 	.word	0x08004c19
 8004c54:	08004c19 	.word	0x08004c19
 8004c58:	08004c19 	.word	0x08004c19
 8004c5c:	08004dab 	.word	0x08004dab
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004d8d 	.word	0x08004d8d
 8004c68:	08004c19 	.word	0x08004c19
 8004c6c:	08004c19 	.word	0x08004c19
 8004c70:	08004dcd 	.word	0x08004dcd
 8004c74:	08004c19 	.word	0x08004c19
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c19 	.word	0x08004c19
 8004c80:	08004c19 	.word	0x08004c19
 8004c84:	08004d95 	.word	0x08004d95
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	602a      	str	r2, [r5, #0]
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a4      	b.n	8004de6 <_printf_i+0x1f6>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	6829      	ldr	r1, [r5, #0]
 8004ca0:	0606      	lsls	r6, r0, #24
 8004ca2:	f101 0304 	add.w	r3, r1, #4
 8004ca6:	d50a      	bpl.n	8004cbe <_printf_i+0xce>
 8004ca8:	680e      	ldr	r6, [r1, #0]
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	da03      	bge.n	8004cb8 <_printf_i+0xc8>
 8004cb0:	232d      	movs	r3, #45	; 0x2d
 8004cb2:	4276      	negs	r6, r6
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb8:	230a      	movs	r3, #10
 8004cba:	485e      	ldr	r0, [pc, #376]	; (8004e34 <_printf_i+0x244>)
 8004cbc:	e019      	b.n	8004cf2 <_printf_i+0x102>
 8004cbe:	680e      	ldr	r6, [r1, #0]
 8004cc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	bf18      	it	ne
 8004cc8:	b236      	sxthne	r6, r6
 8004cca:	e7ef      	b.n	8004cac <_printf_i+0xbc>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	1d19      	adds	r1, r3, #4
 8004cd2:	6029      	str	r1, [r5, #0]
 8004cd4:	0601      	lsls	r1, r0, #24
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0xec>
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0xf2>
 8004cdc:	0646      	lsls	r6, r0, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0xe8>
 8004ce0:	881e      	ldrh	r6, [r3, #0]
 8004ce2:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2308      	moveq	r3, #8
 8004ce8:	230a      	movne	r3, #10
 8004cea:	4852      	ldr	r0, [pc, #328]	; (8004e34 <_printf_i+0x244>)
 8004cec:	2100      	movs	r1, #0
 8004cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf2:	6865      	ldr	r5, [r4, #4]
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	bfa8      	it	ge
 8004cf8:	6821      	ldrge	r1, [r4, #0]
 8004cfa:	60a5      	str	r5, [r4, #8]
 8004cfc:	bfa4      	itt	ge
 8004cfe:	f021 0104 	bicge.w	r1, r1, #4
 8004d02:	6021      	strge	r1, [r4, #0]
 8004d04:	b90e      	cbnz	r6, 8004d0a <_printf_i+0x11a>
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	d04d      	beq.n	8004da6 <_printf_i+0x1b6>
 8004d0a:	4615      	mov	r5, r2
 8004d0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d10:	fb03 6711 	mls	r7, r3, r1, r6
 8004d14:	5dc7      	ldrb	r7, [r0, r7]
 8004d16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d1a:	4637      	mov	r7, r6
 8004d1c:	42bb      	cmp	r3, r7
 8004d1e:	460e      	mov	r6, r1
 8004d20:	d9f4      	bls.n	8004d0c <_printf_i+0x11c>
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d10b      	bne.n	8004d3e <_printf_i+0x14e>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	07de      	lsls	r6, r3, #31
 8004d2a:	d508      	bpl.n	8004d3e <_printf_i+0x14e>
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	6861      	ldr	r1, [r4, #4]
 8004d30:	4299      	cmp	r1, r3
 8004d32:	bfde      	ittt	le
 8004d34:	2330      	movle	r3, #48	; 0x30
 8004d36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d3e:	1b52      	subs	r2, r2, r5
 8004d40:	6122      	str	r2, [r4, #16]
 8004d42:	464b      	mov	r3, r9
 8004d44:	4621      	mov	r1, r4
 8004d46:	4640      	mov	r0, r8
 8004d48:	f8cd a000 	str.w	sl, [sp]
 8004d4c:	aa03      	add	r2, sp, #12
 8004d4e:	f7ff fedf 	bl	8004b10 <_printf_common>
 8004d52:	3001      	adds	r0, #1
 8004d54:	d14c      	bne.n	8004df0 <_printf_i+0x200>
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5a:	b004      	add	sp, #16
 8004d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d60:	4834      	ldr	r0, [pc, #208]	; (8004e34 <_printf_i+0x244>)
 8004d62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d66:	6829      	ldr	r1, [r5, #0]
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d6e:	6029      	str	r1, [r5, #0]
 8004d70:	061d      	lsls	r5, r3, #24
 8004d72:	d514      	bpl.n	8004d9e <_printf_i+0x1ae>
 8004d74:	07df      	lsls	r7, r3, #31
 8004d76:	bf44      	itt	mi
 8004d78:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7c:	6023      	strmi	r3, [r4, #0]
 8004d7e:	b91e      	cbnz	r6, 8004d88 <_printf_i+0x198>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	f023 0320 	bic.w	r3, r3, #32
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	2310      	movs	r3, #16
 8004d8a:	e7af      	b.n	8004cec <_printf_i+0xfc>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	f043 0320 	orr.w	r3, r3, #32
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	2378      	movs	r3, #120	; 0x78
 8004d96:	4828      	ldr	r0, [pc, #160]	; (8004e38 <_printf_i+0x248>)
 8004d98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9c:	e7e3      	b.n	8004d66 <_printf_i+0x176>
 8004d9e:	0659      	lsls	r1, r3, #25
 8004da0:	bf48      	it	mi
 8004da2:	b2b6      	uxthmi	r6, r6
 8004da4:	e7e6      	b.n	8004d74 <_printf_i+0x184>
 8004da6:	4615      	mov	r5, r2
 8004da8:	e7bb      	b.n	8004d22 <_printf_i+0x132>
 8004daa:	682b      	ldr	r3, [r5, #0]
 8004dac:	6826      	ldr	r6, [r4, #0]
 8004dae:	1d18      	adds	r0, r3, #4
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	6028      	str	r0, [r5, #0]
 8004db4:	0635      	lsls	r5, r6, #24
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	d501      	bpl.n	8004dbe <_printf_i+0x1ce>
 8004dba:	6019      	str	r1, [r3, #0]
 8004dbc:	e002      	b.n	8004dc4 <_printf_i+0x1d4>
 8004dbe:	0670      	lsls	r0, r6, #25
 8004dc0:	d5fb      	bpl.n	8004dba <_printf_i+0x1ca>
 8004dc2:	8019      	strh	r1, [r3, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4615      	mov	r5, r2
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	e7ba      	b.n	8004d42 <_printf_i+0x152>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	681d      	ldr	r5, [r3, #0]
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f001 fa1f 	bl	800621c <memchr>
 8004dde:	b108      	cbz	r0, 8004de4 <_printf_i+0x1f4>
 8004de0:	1b40      	subs	r0, r0, r5
 8004de2:	6060      	str	r0, [r4, #4]
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	6123      	str	r3, [r4, #16]
 8004de8:	2300      	movs	r3, #0
 8004dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dee:	e7a8      	b.n	8004d42 <_printf_i+0x152>
 8004df0:	462a      	mov	r2, r5
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	47d0      	blx	sl
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0ab      	beq.n	8004d56 <_printf_i+0x166>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	079b      	lsls	r3, r3, #30
 8004e02:	d413      	bmi.n	8004e2c <_printf_i+0x23c>
 8004e04:	68e0      	ldr	r0, [r4, #12]
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	4298      	cmp	r0, r3
 8004e0a:	bfb8      	it	lt
 8004e0c:	4618      	movlt	r0, r3
 8004e0e:	e7a4      	b.n	8004d5a <_printf_i+0x16a>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4632      	mov	r2, r6
 8004e14:	4649      	mov	r1, r9
 8004e16:	4640      	mov	r0, r8
 8004e18:	47d0      	blx	sl
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d09b      	beq.n	8004d56 <_printf_i+0x166>
 8004e1e:	3501      	adds	r5, #1
 8004e20:	68e3      	ldr	r3, [r4, #12]
 8004e22:	9903      	ldr	r1, [sp, #12]
 8004e24:	1a5b      	subs	r3, r3, r1
 8004e26:	42ab      	cmp	r3, r5
 8004e28:	dcf2      	bgt.n	8004e10 <_printf_i+0x220>
 8004e2a:	e7eb      	b.n	8004e04 <_printf_i+0x214>
 8004e2c:	2500      	movs	r5, #0
 8004e2e:	f104 0619 	add.w	r6, r4, #25
 8004e32:	e7f5      	b.n	8004e20 <_printf_i+0x230>
 8004e34:	080087b6 	.word	0x080087b6
 8004e38:	080087c7 	.word	0x080087c7

08004e3c <iprintf>:
 8004e3c:	b40f      	push	{r0, r1, r2, r3}
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <iprintf+0x2c>)
 8004e40:	b513      	push	{r0, r1, r4, lr}
 8004e42:	681c      	ldr	r4, [r3, #0]
 8004e44:	b124      	cbz	r4, 8004e50 <iprintf+0x14>
 8004e46:	69a3      	ldr	r3, [r4, #24]
 8004e48:	b913      	cbnz	r3, 8004e50 <iprintf+0x14>
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f001 f8d4 	bl	8005ff8 <__sinit>
 8004e50:	ab05      	add	r3, sp, #20
 8004e52:	4620      	mov	r0, r4
 8004e54:	9a04      	ldr	r2, [sp, #16]
 8004e56:	68a1      	ldr	r1, [r4, #8]
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	f001 fe95 	bl	8006b88 <_vfiprintf_r>
 8004e5e:	b002      	add	sp, #8
 8004e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e64:	b004      	add	sp, #16
 8004e66:	4770      	bx	lr
 8004e68:	2000000c 	.word	0x2000000c

08004e6c <_puts_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	4605      	mov	r5, r0
 8004e72:	b118      	cbz	r0, 8004e7c <_puts_r+0x10>
 8004e74:	6983      	ldr	r3, [r0, #24]
 8004e76:	b90b      	cbnz	r3, 8004e7c <_puts_r+0x10>
 8004e78:	f001 f8be 	bl	8005ff8 <__sinit>
 8004e7c:	69ab      	ldr	r3, [r5, #24]
 8004e7e:	68ac      	ldr	r4, [r5, #8]
 8004e80:	b913      	cbnz	r3, 8004e88 <_puts_r+0x1c>
 8004e82:	4628      	mov	r0, r5
 8004e84:	f001 f8b8 	bl	8005ff8 <__sinit>
 8004e88:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <_puts_r+0xd0>)
 8004e8a:	429c      	cmp	r4, r3
 8004e8c:	d120      	bne.n	8004ed0 <_puts_r+0x64>
 8004e8e:	686c      	ldr	r4, [r5, #4]
 8004e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e92:	07db      	lsls	r3, r3, #31
 8004e94:	d405      	bmi.n	8004ea2 <_puts_r+0x36>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	0598      	lsls	r0, r3, #22
 8004e9a:	d402      	bmi.n	8004ea2 <_puts_r+0x36>
 8004e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9e:	f001 f94e 	bl	800613e <__retarget_lock_acquire_recursive>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	d51d      	bpl.n	8004ee4 <_puts_r+0x78>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	b1db      	cbz	r3, 8004ee4 <_puts_r+0x78>
 8004eac:	3e01      	subs	r6, #1
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	60a3      	str	r3, [r4, #8]
 8004eb8:	bb39      	cbnz	r1, 8004f0a <_puts_r+0x9e>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da38      	bge.n	8004f30 <_puts_r+0xc4>
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	210a      	movs	r1, #10
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 f848 	bl	8004f58 <__swbuf_r>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d011      	beq.n	8004ef0 <_puts_r+0x84>
 8004ecc:	250a      	movs	r5, #10
 8004ece:	e011      	b.n	8004ef4 <_puts_r+0x88>
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <_puts_r+0xd4>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d101      	bne.n	8004eda <_puts_r+0x6e>
 8004ed6:	68ac      	ldr	r4, [r5, #8]
 8004ed8:	e7da      	b.n	8004e90 <_puts_r+0x24>
 8004eda:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <_puts_r+0xd8>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	bf08      	it	eq
 8004ee0:	68ec      	ldreq	r4, [r5, #12]
 8004ee2:	e7d5      	b.n	8004e90 <_puts_r+0x24>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 f888 	bl	8004ffc <__swsetup_r>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0dd      	beq.n	8004eac <_puts_r+0x40>
 8004ef0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ef6:	07da      	lsls	r2, r3, #31
 8004ef8:	d405      	bmi.n	8004f06 <_puts_r+0x9a>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	059b      	lsls	r3, r3, #22
 8004efe:	d402      	bmi.n	8004f06 <_puts_r+0x9a>
 8004f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f02:	f001 f91d 	bl	8006140 <__retarget_lock_release_recursive>
 8004f06:	4628      	mov	r0, r5
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da04      	bge.n	8004f18 <_puts_r+0xac>
 8004f0e:	69a2      	ldr	r2, [r4, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	dc06      	bgt.n	8004f22 <_puts_r+0xb6>
 8004f14:	290a      	cmp	r1, #10
 8004f16:	d004      	beq.n	8004f22 <_puts_r+0xb6>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	6022      	str	r2, [r4, #0]
 8004f1e:	7019      	strb	r1, [r3, #0]
 8004f20:	e7c5      	b.n	8004eae <_puts_r+0x42>
 8004f22:	4622      	mov	r2, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f817 	bl	8004f58 <__swbuf_r>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d1bf      	bne.n	8004eae <_puts_r+0x42>
 8004f2e:	e7df      	b.n	8004ef0 <_puts_r+0x84>
 8004f30:	250a      	movs	r5, #10
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	6022      	str	r2, [r4, #0]
 8004f38:	701d      	strb	r5, [r3, #0]
 8004f3a:	e7db      	b.n	8004ef4 <_puts_r+0x88>
 8004f3c:	08008888 	.word	0x08008888
 8004f40:	080088a8 	.word	0x080088a8
 8004f44:	08008868 	.word	0x08008868

08004f48 <puts>:
 8004f48:	4b02      	ldr	r3, [pc, #8]	; (8004f54 <puts+0xc>)
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f7ff bf8d 	b.w	8004e6c <_puts_r>
 8004f52:	bf00      	nop
 8004f54:	2000000c 	.word	0x2000000c

08004f58 <__swbuf_r>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	460e      	mov	r6, r1
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	4605      	mov	r5, r0
 8004f60:	b118      	cbz	r0, 8004f6a <__swbuf_r+0x12>
 8004f62:	6983      	ldr	r3, [r0, #24]
 8004f64:	b90b      	cbnz	r3, 8004f6a <__swbuf_r+0x12>
 8004f66:	f001 f847 	bl	8005ff8 <__sinit>
 8004f6a:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <__swbuf_r+0x98>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d12b      	bne.n	8004fc8 <__swbuf_r+0x70>
 8004f70:	686c      	ldr	r4, [r5, #4]
 8004f72:	69a3      	ldr	r3, [r4, #24]
 8004f74:	60a3      	str	r3, [r4, #8]
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	071a      	lsls	r2, r3, #28
 8004f7a:	d52f      	bpl.n	8004fdc <__swbuf_r+0x84>
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	b36b      	cbz	r3, 8004fdc <__swbuf_r+0x84>
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	b2f6      	uxtb	r6, r6
 8004f86:	1ac0      	subs	r0, r0, r3
 8004f88:	6963      	ldr	r3, [r4, #20]
 8004f8a:	4637      	mov	r7, r6
 8004f8c:	4283      	cmp	r3, r0
 8004f8e:	dc04      	bgt.n	8004f9a <__swbuf_r+0x42>
 8004f90:	4621      	mov	r1, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	f000 ff9c 	bl	8005ed0 <_fflush_r>
 8004f98:	bb30      	cbnz	r0, 8004fe8 <__swbuf_r+0x90>
 8004f9a:	68a3      	ldr	r3, [r4, #8]
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	6022      	str	r2, [r4, #0]
 8004fa8:	701e      	strb	r6, [r3, #0]
 8004faa:	6963      	ldr	r3, [r4, #20]
 8004fac:	4283      	cmp	r3, r0
 8004fae:	d004      	beq.n	8004fba <__swbuf_r+0x62>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	07db      	lsls	r3, r3, #31
 8004fb4:	d506      	bpl.n	8004fc4 <__swbuf_r+0x6c>
 8004fb6:	2e0a      	cmp	r6, #10
 8004fb8:	d104      	bne.n	8004fc4 <__swbuf_r+0x6c>
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f000 ff87 	bl	8005ed0 <_fflush_r>
 8004fc2:	b988      	cbnz	r0, 8004fe8 <__swbuf_r+0x90>
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <__swbuf_r+0x9c>)
 8004fca:	429c      	cmp	r4, r3
 8004fcc:	d101      	bne.n	8004fd2 <__swbuf_r+0x7a>
 8004fce:	68ac      	ldr	r4, [r5, #8]
 8004fd0:	e7cf      	b.n	8004f72 <__swbuf_r+0x1a>
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <__swbuf_r+0xa0>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	bf08      	it	eq
 8004fd8:	68ec      	ldreq	r4, [r5, #12]
 8004fda:	e7ca      	b.n	8004f72 <__swbuf_r+0x1a>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f80c 	bl	8004ffc <__swsetup_r>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d0cb      	beq.n	8004f80 <__swbuf_r+0x28>
 8004fe8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004fec:	e7ea      	b.n	8004fc4 <__swbuf_r+0x6c>
 8004fee:	bf00      	nop
 8004ff0:	08008888 	.word	0x08008888
 8004ff4:	080088a8 	.word	0x080088a8
 8004ff8:	08008868 	.word	0x08008868

08004ffc <__swsetup_r>:
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <__swsetup_r+0xcc>)
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	681d      	ldr	r5, [r3, #0]
 8005002:	4606      	mov	r6, r0
 8005004:	460c      	mov	r4, r1
 8005006:	b125      	cbz	r5, 8005012 <__swsetup_r+0x16>
 8005008:	69ab      	ldr	r3, [r5, #24]
 800500a:	b913      	cbnz	r3, 8005012 <__swsetup_r+0x16>
 800500c:	4628      	mov	r0, r5
 800500e:	f000 fff3 	bl	8005ff8 <__sinit>
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <__swsetup_r+0xd0>)
 8005014:	429c      	cmp	r4, r3
 8005016:	d10f      	bne.n	8005038 <__swsetup_r+0x3c>
 8005018:	686c      	ldr	r4, [r5, #4]
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005020:	0719      	lsls	r1, r3, #28
 8005022:	d42c      	bmi.n	800507e <__swsetup_r+0x82>
 8005024:	06dd      	lsls	r5, r3, #27
 8005026:	d411      	bmi.n	800504c <__swsetup_r+0x50>
 8005028:	2309      	movs	r3, #9
 800502a:	6033      	str	r3, [r6, #0]
 800502c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	e03e      	b.n	80050b6 <__swsetup_r+0xba>
 8005038:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <__swsetup_r+0xd4>)
 800503a:	429c      	cmp	r4, r3
 800503c:	d101      	bne.n	8005042 <__swsetup_r+0x46>
 800503e:	68ac      	ldr	r4, [r5, #8]
 8005040:	e7eb      	b.n	800501a <__swsetup_r+0x1e>
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <__swsetup_r+0xd8>)
 8005044:	429c      	cmp	r4, r3
 8005046:	bf08      	it	eq
 8005048:	68ec      	ldreq	r4, [r5, #12]
 800504a:	e7e6      	b.n	800501a <__swsetup_r+0x1e>
 800504c:	0758      	lsls	r0, r3, #29
 800504e:	d512      	bpl.n	8005076 <__swsetup_r+0x7a>
 8005050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005052:	b141      	cbz	r1, 8005066 <__swsetup_r+0x6a>
 8005054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005058:	4299      	cmp	r1, r3
 800505a:	d002      	beq.n	8005062 <__swsetup_r+0x66>
 800505c:	4630      	mov	r0, r6
 800505e:	f001 fc8f 	bl	8006980 <_free_r>
 8005062:	2300      	movs	r3, #0
 8005064:	6363      	str	r3, [r4, #52]	; 0x34
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	2300      	movs	r3, #0
 8005070:	6063      	str	r3, [r4, #4]
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f043 0308 	orr.w	r3, r3, #8
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	b94b      	cbnz	r3, 8005096 <__swsetup_r+0x9a>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508c:	d003      	beq.n	8005096 <__swsetup_r+0x9a>
 800508e:	4621      	mov	r1, r4
 8005090:	4630      	mov	r0, r6
 8005092:	f001 f87b 	bl	800618c <__smakebuf_r>
 8005096:	89a0      	ldrh	r0, [r4, #12]
 8005098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800509c:	f010 0301 	ands.w	r3, r0, #1
 80050a0:	d00a      	beq.n	80050b8 <__swsetup_r+0xbc>
 80050a2:	2300      	movs	r3, #0
 80050a4:	60a3      	str	r3, [r4, #8]
 80050a6:	6963      	ldr	r3, [r4, #20]
 80050a8:	425b      	negs	r3, r3
 80050aa:	61a3      	str	r3, [r4, #24]
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	b943      	cbnz	r3, 80050c2 <__swsetup_r+0xc6>
 80050b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050b4:	d1ba      	bne.n	800502c <__swsetup_r+0x30>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	0781      	lsls	r1, r0, #30
 80050ba:	bf58      	it	pl
 80050bc:	6963      	ldrpl	r3, [r4, #20]
 80050be:	60a3      	str	r3, [r4, #8]
 80050c0:	e7f4      	b.n	80050ac <__swsetup_r+0xb0>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e7f7      	b.n	80050b6 <__swsetup_r+0xba>
 80050c6:	bf00      	nop
 80050c8:	2000000c 	.word	0x2000000c
 80050cc:	08008888 	.word	0x08008888
 80050d0:	080088a8 	.word	0x080088a8
 80050d4:	08008868 	.word	0x08008868

080050d8 <quorem>:
 80050d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	6903      	ldr	r3, [r0, #16]
 80050de:	690c      	ldr	r4, [r1, #16]
 80050e0:	4607      	mov	r7, r0
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	f2c0 8082 	blt.w	80051ec <quorem+0x114>
 80050e8:	3c01      	subs	r4, #1
 80050ea:	f100 0514 	add.w	r5, r0, #20
 80050ee:	f101 0814 	add.w	r8, r1, #20
 80050f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005100:	3301      	adds	r3, #1
 8005102:	429a      	cmp	r2, r3
 8005104:	fbb2 f6f3 	udiv	r6, r2, r3
 8005108:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800510c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005110:	d331      	bcc.n	8005176 <quorem+0x9e>
 8005112:	f04f 0e00 	mov.w	lr, #0
 8005116:	4640      	mov	r0, r8
 8005118:	46ac      	mov	ip, r5
 800511a:	46f2      	mov	sl, lr
 800511c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005120:	b293      	uxth	r3, r2
 8005122:	fb06 e303 	mla	r3, r6, r3, lr
 8005126:	0c12      	lsrs	r2, r2, #16
 8005128:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800512c:	b29b      	uxth	r3, r3
 800512e:	fb06 e202 	mla	r2, r6, r2, lr
 8005132:	ebaa 0303 	sub.w	r3, sl, r3
 8005136:	f8dc a000 	ldr.w	sl, [ip]
 800513a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800513e:	fa1f fa8a 	uxth.w	sl, sl
 8005142:	4453      	add	r3, sl
 8005144:	f8dc a000 	ldr.w	sl, [ip]
 8005148:	b292      	uxth	r2, r2
 800514a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800514e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005158:	4581      	cmp	r9, r0
 800515a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800515e:	f84c 3b04 	str.w	r3, [ip], #4
 8005162:	d2db      	bcs.n	800511c <quorem+0x44>
 8005164:	f855 300b 	ldr.w	r3, [r5, fp]
 8005168:	b92b      	cbnz	r3, 8005176 <quorem+0x9e>
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	3b04      	subs	r3, #4
 800516e:	429d      	cmp	r5, r3
 8005170:	461a      	mov	r2, r3
 8005172:	d32f      	bcc.n	80051d4 <quorem+0xfc>
 8005174:	613c      	str	r4, [r7, #16]
 8005176:	4638      	mov	r0, r7
 8005178:	f001 faea 	bl	8006750 <__mcmp>
 800517c:	2800      	cmp	r0, #0
 800517e:	db25      	blt.n	80051cc <quorem+0xf4>
 8005180:	4628      	mov	r0, r5
 8005182:	f04f 0c00 	mov.w	ip, #0
 8005186:	3601      	adds	r6, #1
 8005188:	f858 1b04 	ldr.w	r1, [r8], #4
 800518c:	f8d0 e000 	ldr.w	lr, [r0]
 8005190:	b28b      	uxth	r3, r1
 8005192:	ebac 0303 	sub.w	r3, ip, r3
 8005196:	fa1f f28e 	uxth.w	r2, lr
 800519a:	4413      	add	r3, r2
 800519c:	0c0a      	lsrs	r2, r1, #16
 800519e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051ac:	45c1      	cmp	r9, r8
 80051ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051b2:	f840 3b04 	str.w	r3, [r0], #4
 80051b6:	d2e7      	bcs.n	8005188 <quorem+0xb0>
 80051b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051c0:	b922      	cbnz	r2, 80051cc <quorem+0xf4>
 80051c2:	3b04      	subs	r3, #4
 80051c4:	429d      	cmp	r5, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	d30a      	bcc.n	80051e0 <quorem+0x108>
 80051ca:	613c      	str	r4, [r7, #16]
 80051cc:	4630      	mov	r0, r6
 80051ce:	b003      	add	sp, #12
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	3b04      	subs	r3, #4
 80051d8:	2a00      	cmp	r2, #0
 80051da:	d1cb      	bne.n	8005174 <quorem+0x9c>
 80051dc:	3c01      	subs	r4, #1
 80051de:	e7c6      	b.n	800516e <quorem+0x96>
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	3b04      	subs	r3, #4
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d1f0      	bne.n	80051ca <quorem+0xf2>
 80051e8:	3c01      	subs	r4, #1
 80051ea:	e7eb      	b.n	80051c4 <quorem+0xec>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e7ee      	b.n	80051ce <quorem+0xf6>

080051f0 <_dtoa_r>:
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	4616      	mov	r6, r2
 80051f6:	461f      	mov	r7, r3
 80051f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80051fa:	b099      	sub	sp, #100	; 0x64
 80051fc:	4605      	mov	r5, r0
 80051fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005202:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005206:	b974      	cbnz	r4, 8005226 <_dtoa_r+0x36>
 8005208:	2010      	movs	r0, #16
 800520a:	f000 ffff 	bl	800620c <malloc>
 800520e:	4602      	mov	r2, r0
 8005210:	6268      	str	r0, [r5, #36]	; 0x24
 8005212:	b920      	cbnz	r0, 800521e <_dtoa_r+0x2e>
 8005214:	21ea      	movs	r1, #234	; 0xea
 8005216:	4ba8      	ldr	r3, [pc, #672]	; (80054b8 <_dtoa_r+0x2c8>)
 8005218:	48a8      	ldr	r0, [pc, #672]	; (80054bc <_dtoa_r+0x2cc>)
 800521a:	f001 fe4b 	bl	8006eb4 <__assert_func>
 800521e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005222:	6004      	str	r4, [r0, #0]
 8005224:	60c4      	str	r4, [r0, #12]
 8005226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	b151      	cbz	r1, 8005242 <_dtoa_r+0x52>
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	2301      	movs	r3, #1
 8005230:	4093      	lsls	r3, r2
 8005232:	604a      	str	r2, [r1, #4]
 8005234:	608b      	str	r3, [r1, #8]
 8005236:	4628      	mov	r0, r5
 8005238:	f001 f84c 	bl	80062d4 <_Bfree>
 800523c:	2200      	movs	r2, #0
 800523e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	1e3b      	subs	r3, r7, #0
 8005244:	bfaf      	iteee	ge
 8005246:	2300      	movge	r3, #0
 8005248:	2201      	movlt	r2, #1
 800524a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800524e:	9305      	strlt	r3, [sp, #20]
 8005250:	bfa8      	it	ge
 8005252:	f8c8 3000 	strge.w	r3, [r8]
 8005256:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800525a:	4b99      	ldr	r3, [pc, #612]	; (80054c0 <_dtoa_r+0x2d0>)
 800525c:	bfb8      	it	lt
 800525e:	f8c8 2000 	strlt.w	r2, [r8]
 8005262:	ea33 0309 	bics.w	r3, r3, r9
 8005266:	d119      	bne.n	800529c <_dtoa_r+0xac>
 8005268:	f242 730f 	movw	r3, #9999	; 0x270f
 800526c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005274:	4333      	orrs	r3, r6
 8005276:	f000 857f 	beq.w	8005d78 <_dtoa_r+0xb88>
 800527a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800527c:	b953      	cbnz	r3, 8005294 <_dtoa_r+0xa4>
 800527e:	4b91      	ldr	r3, [pc, #580]	; (80054c4 <_dtoa_r+0x2d4>)
 8005280:	e022      	b.n	80052c8 <_dtoa_r+0xd8>
 8005282:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <_dtoa_r+0x2d8>)
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	3308      	adds	r3, #8
 8005288:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	9803      	ldr	r0, [sp, #12]
 800528e:	b019      	add	sp, #100	; 0x64
 8005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005294:	4b8b      	ldr	r3, [pc, #556]	; (80054c4 <_dtoa_r+0x2d4>)
 8005296:	9303      	str	r3, [sp, #12]
 8005298:	3303      	adds	r3, #3
 800529a:	e7f5      	b.n	8005288 <_dtoa_r+0x98>
 800529c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80052a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	f7fb fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80052b0:	4680      	mov	r8, r0
 80052b2:	b158      	cbz	r0, 80052cc <_dtoa_r+0xdc>
 80052b4:	2301      	movs	r3, #1
 80052b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8558 	beq.w	8005d72 <_dtoa_r+0xb82>
 80052c2:	4882      	ldr	r0, [pc, #520]	; (80054cc <_dtoa_r+0x2dc>)
 80052c4:	6018      	str	r0, [r3, #0]
 80052c6:	1e43      	subs	r3, r0, #1
 80052c8:	9303      	str	r3, [sp, #12]
 80052ca:	e7df      	b.n	800528c <_dtoa_r+0x9c>
 80052cc:	ab16      	add	r3, sp, #88	; 0x58
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	ab17      	add	r3, sp, #92	; 0x5c
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4628      	mov	r0, r5
 80052d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052da:	f001 fae1 	bl	80068a0 <__d2b>
 80052de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80052e2:	4683      	mov	fp, r0
 80052e4:	2c00      	cmp	r4, #0
 80052e6:	d07f      	beq.n	80053e8 <_dtoa_r+0x1f8>
 80052e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80052f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80052fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80052fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005302:	2200      	movs	r2, #0
 8005304:	4b72      	ldr	r3, [pc, #456]	; (80054d0 <_dtoa_r+0x2e0>)
 8005306:	f7fa ff2f 	bl	8000168 <__aeabi_dsub>
 800530a:	a365      	add	r3, pc, #404	; (adr r3, 80054a0 <_dtoa_r+0x2b0>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fb f8e2 	bl	80004d8 <__aeabi_dmul>
 8005314:	a364      	add	r3, pc, #400	; (adr r3, 80054a8 <_dtoa_r+0x2b8>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fa ff27 	bl	800016c <__adddf3>
 800531e:	4606      	mov	r6, r0
 8005320:	4620      	mov	r0, r4
 8005322:	460f      	mov	r7, r1
 8005324:	f7fb f86e 	bl	8000404 <__aeabi_i2d>
 8005328:	a361      	add	r3, pc, #388	; (adr r3, 80054b0 <_dtoa_r+0x2c0>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f7fb f8d3 	bl	80004d8 <__aeabi_dmul>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4630      	mov	r0, r6
 8005338:	4639      	mov	r1, r7
 800533a:	f7fa ff17 	bl	800016c <__adddf3>
 800533e:	4606      	mov	r6, r0
 8005340:	460f      	mov	r7, r1
 8005342:	f7fb fb79 	bl	8000a38 <__aeabi_d2iz>
 8005346:	2200      	movs	r2, #0
 8005348:	4682      	mov	sl, r0
 800534a:	2300      	movs	r3, #0
 800534c:	4630      	mov	r0, r6
 800534e:	4639      	mov	r1, r7
 8005350:	f7fb fb34 	bl	80009bc <__aeabi_dcmplt>
 8005354:	b148      	cbz	r0, 800536a <_dtoa_r+0x17a>
 8005356:	4650      	mov	r0, sl
 8005358:	f7fb f854 	bl	8000404 <__aeabi_i2d>
 800535c:	4632      	mov	r2, r6
 800535e:	463b      	mov	r3, r7
 8005360:	f7fb fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8005364:	b908      	cbnz	r0, 800536a <_dtoa_r+0x17a>
 8005366:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800536a:	f1ba 0f16 	cmp.w	sl, #22
 800536e:	d858      	bhi.n	8005422 <_dtoa_r+0x232>
 8005370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005374:	4b57      	ldr	r3, [pc, #348]	; (80054d4 <_dtoa_r+0x2e4>)
 8005376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f7fb fb1d 	bl	80009bc <__aeabi_dcmplt>
 8005382:	2800      	cmp	r0, #0
 8005384:	d04f      	beq.n	8005426 <_dtoa_r+0x236>
 8005386:	2300      	movs	r3, #0
 8005388:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800538c:	930f      	str	r3, [sp, #60]	; 0x3c
 800538e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005390:	1b1c      	subs	r4, r3, r4
 8005392:	1e63      	subs	r3, r4, #1
 8005394:	9309      	str	r3, [sp, #36]	; 0x24
 8005396:	bf49      	itett	mi
 8005398:	f1c4 0301 	rsbmi	r3, r4, #1
 800539c:	2300      	movpl	r3, #0
 800539e:	9306      	strmi	r3, [sp, #24]
 80053a0:	2300      	movmi	r3, #0
 80053a2:	bf54      	ite	pl
 80053a4:	9306      	strpl	r3, [sp, #24]
 80053a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80053a8:	f1ba 0f00 	cmp.w	sl, #0
 80053ac:	db3d      	blt.n	800542a <_dtoa_r+0x23a>
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80053b4:	4453      	add	r3, sl
 80053b6:	9309      	str	r3, [sp, #36]	; 0x24
 80053b8:	2300      	movs	r3, #0
 80053ba:	930a      	str	r3, [sp, #40]	; 0x28
 80053bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053be:	2b09      	cmp	r3, #9
 80053c0:	f200 808c 	bhi.w	80054dc <_dtoa_r+0x2ec>
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	bfc4      	itt	gt
 80053c8:	3b04      	subgt	r3, #4
 80053ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80053cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ce:	bfc8      	it	gt
 80053d0:	2400      	movgt	r4, #0
 80053d2:	f1a3 0302 	sub.w	r3, r3, #2
 80053d6:	bfd8      	it	le
 80053d8:	2401      	movle	r4, #1
 80053da:	2b03      	cmp	r3, #3
 80053dc:	f200 808a 	bhi.w	80054f4 <_dtoa_r+0x304>
 80053e0:	e8df f003 	tbb	[pc, r3]
 80053e4:	5b4d4f2d 	.word	0x5b4d4f2d
 80053e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80053ec:	441c      	add	r4, r3
 80053ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	bfc3      	ittte	gt
 80053f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80053fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80053fe:	fa09 f303 	lslgt.w	r3, r9, r3
 8005402:	f1c3 0320 	rsble	r3, r3, #32
 8005406:	bfc6      	itte	gt
 8005408:	fa26 f000 	lsrgt.w	r0, r6, r0
 800540c:	4318      	orrgt	r0, r3
 800540e:	fa06 f003 	lslle.w	r0, r6, r3
 8005412:	f7fa ffe7 	bl	80003e4 <__aeabi_ui2d>
 8005416:	2301      	movs	r3, #1
 8005418:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800541c:	3c01      	subs	r4, #1
 800541e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005420:	e76f      	b.n	8005302 <_dtoa_r+0x112>
 8005422:	2301      	movs	r3, #1
 8005424:	e7b2      	b.n	800538c <_dtoa_r+0x19c>
 8005426:	900f      	str	r0, [sp, #60]	; 0x3c
 8005428:	e7b1      	b.n	800538e <_dtoa_r+0x19e>
 800542a:	9b06      	ldr	r3, [sp, #24]
 800542c:	eba3 030a 	sub.w	r3, r3, sl
 8005430:	9306      	str	r3, [sp, #24]
 8005432:	f1ca 0300 	rsb	r3, sl, #0
 8005436:	930a      	str	r3, [sp, #40]	; 0x28
 8005438:	2300      	movs	r3, #0
 800543a:	930e      	str	r3, [sp, #56]	; 0x38
 800543c:	e7be      	b.n	80053bc <_dtoa_r+0x1cc>
 800543e:	2300      	movs	r3, #0
 8005440:	930b      	str	r3, [sp, #44]	; 0x2c
 8005442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005444:	2b00      	cmp	r3, #0
 8005446:	dc58      	bgt.n	80054fa <_dtoa_r+0x30a>
 8005448:	f04f 0901 	mov.w	r9, #1
 800544c:	464b      	mov	r3, r9
 800544e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005452:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005456:	2200      	movs	r2, #0
 8005458:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800545a:	6042      	str	r2, [r0, #4]
 800545c:	2204      	movs	r2, #4
 800545e:	f102 0614 	add.w	r6, r2, #20
 8005462:	429e      	cmp	r6, r3
 8005464:	6841      	ldr	r1, [r0, #4]
 8005466:	d94e      	bls.n	8005506 <_dtoa_r+0x316>
 8005468:	4628      	mov	r0, r5
 800546a:	f000 fef3 	bl	8006254 <_Balloc>
 800546e:	9003      	str	r0, [sp, #12]
 8005470:	2800      	cmp	r0, #0
 8005472:	d14c      	bne.n	800550e <_dtoa_r+0x31e>
 8005474:	4602      	mov	r2, r0
 8005476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <_dtoa_r+0x2e8>)
 800547c:	e6cc      	b.n	8005218 <_dtoa_r+0x28>
 800547e:	2301      	movs	r3, #1
 8005480:	e7de      	b.n	8005440 <_dtoa_r+0x250>
 8005482:	2300      	movs	r3, #0
 8005484:	930b      	str	r3, [sp, #44]	; 0x2c
 8005486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005488:	eb0a 0903 	add.w	r9, sl, r3
 800548c:	f109 0301 	add.w	r3, r9, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	9308      	str	r3, [sp, #32]
 8005494:	bfb8      	it	lt
 8005496:	2301      	movlt	r3, #1
 8005498:	e7dd      	b.n	8005456 <_dtoa_r+0x266>
 800549a:	2301      	movs	r3, #1
 800549c:	e7f2      	b.n	8005484 <_dtoa_r+0x294>
 800549e:	bf00      	nop
 80054a0:	636f4361 	.word	0x636f4361
 80054a4:	3fd287a7 	.word	0x3fd287a7
 80054a8:	8b60c8b3 	.word	0x8b60c8b3
 80054ac:	3fc68a28 	.word	0x3fc68a28
 80054b0:	509f79fb 	.word	0x509f79fb
 80054b4:	3fd34413 	.word	0x3fd34413
 80054b8:	080087e5 	.word	0x080087e5
 80054bc:	080087fc 	.word	0x080087fc
 80054c0:	7ff00000 	.word	0x7ff00000
 80054c4:	080087e1 	.word	0x080087e1
 80054c8:	080087d8 	.word	0x080087d8
 80054cc:	080087b5 	.word	0x080087b5
 80054d0:	3ff80000 	.word	0x3ff80000
 80054d4:	08008950 	.word	0x08008950
 80054d8:	08008857 	.word	0x08008857
 80054dc:	2401      	movs	r4, #1
 80054de:	2300      	movs	r3, #0
 80054e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80054e2:	9322      	str	r3, [sp, #136]	; 0x88
 80054e4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80054e8:	2200      	movs	r2, #0
 80054ea:	2312      	movs	r3, #18
 80054ec:	f8cd 9020 	str.w	r9, [sp, #32]
 80054f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80054f2:	e7b0      	b.n	8005456 <_dtoa_r+0x266>
 80054f4:	2301      	movs	r3, #1
 80054f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80054f8:	e7f4      	b.n	80054e4 <_dtoa_r+0x2f4>
 80054fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80054fe:	464b      	mov	r3, r9
 8005500:	f8cd 9020 	str.w	r9, [sp, #32]
 8005504:	e7a7      	b.n	8005456 <_dtoa_r+0x266>
 8005506:	3101      	adds	r1, #1
 8005508:	6041      	str	r1, [r0, #4]
 800550a:	0052      	lsls	r2, r2, #1
 800550c:	e7a7      	b.n	800545e <_dtoa_r+0x26e>
 800550e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005510:	9a03      	ldr	r2, [sp, #12]
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	2b0e      	cmp	r3, #14
 8005518:	f200 80a8 	bhi.w	800566c <_dtoa_r+0x47c>
 800551c:	2c00      	cmp	r4, #0
 800551e:	f000 80a5 	beq.w	800566c <_dtoa_r+0x47c>
 8005522:	f1ba 0f00 	cmp.w	sl, #0
 8005526:	dd34      	ble.n	8005592 <_dtoa_r+0x3a2>
 8005528:	4a9a      	ldr	r2, [pc, #616]	; (8005794 <_dtoa_r+0x5a4>)
 800552a:	f00a 030f 	and.w	r3, sl, #15
 800552e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005532:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005536:	e9d3 3400 	ldrd	r3, r4, [r3]
 800553a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800553e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005542:	d016      	beq.n	8005572 <_dtoa_r+0x382>
 8005544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005548:	4b93      	ldr	r3, [pc, #588]	; (8005798 <_dtoa_r+0x5a8>)
 800554a:	2703      	movs	r7, #3
 800554c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005550:	f7fb f8ec 	bl	800072c <__aeabi_ddiv>
 8005554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005558:	f004 040f 	and.w	r4, r4, #15
 800555c:	4e8e      	ldr	r6, [pc, #568]	; (8005798 <_dtoa_r+0x5a8>)
 800555e:	b954      	cbnz	r4, 8005576 <_dtoa_r+0x386>
 8005560:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005568:	f7fb f8e0 	bl	800072c <__aeabi_ddiv>
 800556c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005570:	e029      	b.n	80055c6 <_dtoa_r+0x3d6>
 8005572:	2702      	movs	r7, #2
 8005574:	e7f2      	b.n	800555c <_dtoa_r+0x36c>
 8005576:	07e1      	lsls	r1, r4, #31
 8005578:	d508      	bpl.n	800558c <_dtoa_r+0x39c>
 800557a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800557e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005582:	f7fa ffa9 	bl	80004d8 <__aeabi_dmul>
 8005586:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800558a:	3701      	adds	r7, #1
 800558c:	1064      	asrs	r4, r4, #1
 800558e:	3608      	adds	r6, #8
 8005590:	e7e5      	b.n	800555e <_dtoa_r+0x36e>
 8005592:	f000 80a5 	beq.w	80056e0 <_dtoa_r+0x4f0>
 8005596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800559a:	f1ca 0400 	rsb	r4, sl, #0
 800559e:	4b7d      	ldr	r3, [pc, #500]	; (8005794 <_dtoa_r+0x5a4>)
 80055a0:	f004 020f 	and.w	r2, r4, #15
 80055a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f7fa ff94 	bl	80004d8 <__aeabi_dmul>
 80055b0:	2702      	movs	r7, #2
 80055b2:	2300      	movs	r3, #0
 80055b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055b8:	4e77      	ldr	r6, [pc, #476]	; (8005798 <_dtoa_r+0x5a8>)
 80055ba:	1124      	asrs	r4, r4, #4
 80055bc:	2c00      	cmp	r4, #0
 80055be:	f040 8084 	bne.w	80056ca <_dtoa_r+0x4da>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1d2      	bne.n	800556c <_dtoa_r+0x37c>
 80055c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 808b 	beq.w	80056e4 <_dtoa_r+0x4f4>
 80055ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055da:	2200      	movs	r2, #0
 80055dc:	4b6f      	ldr	r3, [pc, #444]	; (800579c <_dtoa_r+0x5ac>)
 80055de:	f7fb f9ed 	bl	80009bc <__aeabi_dcmplt>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d07e      	beq.n	80056e4 <_dtoa_r+0x4f4>
 80055e6:	9b08      	ldr	r3, [sp, #32]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d07b      	beq.n	80056e4 <_dtoa_r+0x4f4>
 80055ec:	f1b9 0f00 	cmp.w	r9, #0
 80055f0:	dd38      	ble.n	8005664 <_dtoa_r+0x474>
 80055f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055f6:	2200      	movs	r2, #0
 80055f8:	4b69      	ldr	r3, [pc, #420]	; (80057a0 <_dtoa_r+0x5b0>)
 80055fa:	f7fa ff6d 	bl	80004d8 <__aeabi_dmul>
 80055fe:	464c      	mov	r4, r9
 8005600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005604:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005608:	3701      	adds	r7, #1
 800560a:	4638      	mov	r0, r7
 800560c:	f7fa fefa 	bl	8000404 <__aeabi_i2d>
 8005610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005614:	f7fa ff60 	bl	80004d8 <__aeabi_dmul>
 8005618:	2200      	movs	r2, #0
 800561a:	4b62      	ldr	r3, [pc, #392]	; (80057a4 <_dtoa_r+0x5b4>)
 800561c:	f7fa fda6 	bl	800016c <__adddf3>
 8005620:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005628:	9611      	str	r6, [sp, #68]	; 0x44
 800562a:	2c00      	cmp	r4, #0
 800562c:	d15d      	bne.n	80056ea <_dtoa_r+0x4fa>
 800562e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005632:	2200      	movs	r2, #0
 8005634:	4b5c      	ldr	r3, [pc, #368]	; (80057a8 <_dtoa_r+0x5b8>)
 8005636:	f7fa fd97 	bl	8000168 <__aeabi_dsub>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005642:	4633      	mov	r3, r6
 8005644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005646:	f7fb f9d7 	bl	80009f8 <__aeabi_dcmpgt>
 800564a:	2800      	cmp	r0, #0
 800564c:	f040 829c 	bne.w	8005b88 <_dtoa_r+0x998>
 8005650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005656:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800565a:	f7fb f9af 	bl	80009bc <__aeabi_dcmplt>
 800565e:	2800      	cmp	r0, #0
 8005660:	f040 8290 	bne.w	8005b84 <_dtoa_r+0x994>
 8005664:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005668:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800566c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800566e:	2b00      	cmp	r3, #0
 8005670:	f2c0 8152 	blt.w	8005918 <_dtoa_r+0x728>
 8005674:	f1ba 0f0e 	cmp.w	sl, #14
 8005678:	f300 814e 	bgt.w	8005918 <_dtoa_r+0x728>
 800567c:	4b45      	ldr	r3, [pc, #276]	; (8005794 <_dtoa_r+0x5a4>)
 800567e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005682:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005686:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800568a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800568c:	2b00      	cmp	r3, #0
 800568e:	f280 80db 	bge.w	8005848 <_dtoa_r+0x658>
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f300 80d7 	bgt.w	8005848 <_dtoa_r+0x658>
 800569a:	f040 8272 	bne.w	8005b82 <_dtoa_r+0x992>
 800569e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056a2:	2200      	movs	r2, #0
 80056a4:	4b40      	ldr	r3, [pc, #256]	; (80057a8 <_dtoa_r+0x5b8>)
 80056a6:	f7fa ff17 	bl	80004d8 <__aeabi_dmul>
 80056aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ae:	f7fb f999 	bl	80009e4 <__aeabi_dcmpge>
 80056b2:	9c08      	ldr	r4, [sp, #32]
 80056b4:	4626      	mov	r6, r4
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f040 8248 	bne.w	8005b4c <_dtoa_r+0x95c>
 80056bc:	2331      	movs	r3, #49	; 0x31
 80056be:	9f03      	ldr	r7, [sp, #12]
 80056c0:	f10a 0a01 	add.w	sl, sl, #1
 80056c4:	f807 3b01 	strb.w	r3, [r7], #1
 80056c8:	e244      	b.n	8005b54 <_dtoa_r+0x964>
 80056ca:	07e2      	lsls	r2, r4, #31
 80056cc:	d505      	bpl.n	80056da <_dtoa_r+0x4ea>
 80056ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056d2:	f7fa ff01 	bl	80004d8 <__aeabi_dmul>
 80056d6:	2301      	movs	r3, #1
 80056d8:	3701      	adds	r7, #1
 80056da:	1064      	asrs	r4, r4, #1
 80056dc:	3608      	adds	r6, #8
 80056de:	e76d      	b.n	80055bc <_dtoa_r+0x3cc>
 80056e0:	2702      	movs	r7, #2
 80056e2:	e770      	b.n	80055c6 <_dtoa_r+0x3d6>
 80056e4:	46d0      	mov	r8, sl
 80056e6:	9c08      	ldr	r4, [sp, #32]
 80056e8:	e78f      	b.n	800560a <_dtoa_r+0x41a>
 80056ea:	9903      	ldr	r1, [sp, #12]
 80056ec:	4b29      	ldr	r3, [pc, #164]	; (8005794 <_dtoa_r+0x5a4>)
 80056ee:	4421      	add	r1, r4
 80056f0:	9112      	str	r1, [sp, #72]	; 0x48
 80056f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80056fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005700:	2900      	cmp	r1, #0
 8005702:	d055      	beq.n	80057b0 <_dtoa_r+0x5c0>
 8005704:	2000      	movs	r0, #0
 8005706:	4929      	ldr	r1, [pc, #164]	; (80057ac <_dtoa_r+0x5bc>)
 8005708:	f7fb f810 	bl	800072c <__aeabi_ddiv>
 800570c:	463b      	mov	r3, r7
 800570e:	4632      	mov	r2, r6
 8005710:	f7fa fd2a 	bl	8000168 <__aeabi_dsub>
 8005714:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005718:	9f03      	ldr	r7, [sp, #12]
 800571a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800571e:	f7fb f98b 	bl	8000a38 <__aeabi_d2iz>
 8005722:	4604      	mov	r4, r0
 8005724:	f7fa fe6e 	bl	8000404 <__aeabi_i2d>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005730:	f7fa fd1a 	bl	8000168 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	3430      	adds	r4, #48	; 0x30
 800573a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800573e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005742:	f807 4b01 	strb.w	r4, [r7], #1
 8005746:	f7fb f939 	bl	80009bc <__aeabi_dcmplt>
 800574a:	2800      	cmp	r0, #0
 800574c:	d174      	bne.n	8005838 <_dtoa_r+0x648>
 800574e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005752:	2000      	movs	r0, #0
 8005754:	4911      	ldr	r1, [pc, #68]	; (800579c <_dtoa_r+0x5ac>)
 8005756:	f7fa fd07 	bl	8000168 <__aeabi_dsub>
 800575a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800575e:	f7fb f92d 	bl	80009bc <__aeabi_dcmplt>
 8005762:	2800      	cmp	r0, #0
 8005764:	f040 80b7 	bne.w	80058d6 <_dtoa_r+0x6e6>
 8005768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800576a:	429f      	cmp	r7, r3
 800576c:	f43f af7a 	beq.w	8005664 <_dtoa_r+0x474>
 8005770:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005774:	2200      	movs	r2, #0
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <_dtoa_r+0x5b0>)
 8005778:	f7fa feae 	bl	80004d8 <__aeabi_dmul>
 800577c:	2200      	movs	r2, #0
 800577e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <_dtoa_r+0x5b0>)
 8005788:	f7fa fea6 	bl	80004d8 <__aeabi_dmul>
 800578c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005790:	e7c3      	b.n	800571a <_dtoa_r+0x52a>
 8005792:	bf00      	nop
 8005794:	08008950 	.word	0x08008950
 8005798:	08008928 	.word	0x08008928
 800579c:	3ff00000 	.word	0x3ff00000
 80057a0:	40240000 	.word	0x40240000
 80057a4:	401c0000 	.word	0x401c0000
 80057a8:	40140000 	.word	0x40140000
 80057ac:	3fe00000 	.word	0x3fe00000
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f7fa fe90 	bl	80004d8 <__aeabi_dmul>
 80057b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057be:	9c03      	ldr	r4, [sp, #12]
 80057c0:	9314      	str	r3, [sp, #80]	; 0x50
 80057c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c6:	f7fb f937 	bl	8000a38 <__aeabi_d2iz>
 80057ca:	9015      	str	r0, [sp, #84]	; 0x54
 80057cc:	f7fa fe1a 	bl	8000404 <__aeabi_i2d>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d8:	f7fa fcc6 	bl	8000168 <__aeabi_dsub>
 80057dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057de:	4606      	mov	r6, r0
 80057e0:	3330      	adds	r3, #48	; 0x30
 80057e2:	f804 3b01 	strb.w	r3, [r4], #1
 80057e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057e8:	460f      	mov	r7, r1
 80057ea:	429c      	cmp	r4, r3
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	d124      	bne.n	800583c <_dtoa_r+0x64c>
 80057f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057f6:	4bb0      	ldr	r3, [pc, #704]	; (8005ab8 <_dtoa_r+0x8c8>)
 80057f8:	f7fa fcb8 	bl	800016c <__adddf3>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f7fb f8f8 	bl	80009f8 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	d163      	bne.n	80058d4 <_dtoa_r+0x6e4>
 800580c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005810:	2000      	movs	r0, #0
 8005812:	49a9      	ldr	r1, [pc, #676]	; (8005ab8 <_dtoa_r+0x8c8>)
 8005814:	f7fa fca8 	bl	8000168 <__aeabi_dsub>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4630      	mov	r0, r6
 800581e:	4639      	mov	r1, r7
 8005820:	f7fb f8cc 	bl	80009bc <__aeabi_dcmplt>
 8005824:	2800      	cmp	r0, #0
 8005826:	f43f af1d 	beq.w	8005664 <_dtoa_r+0x474>
 800582a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800582c:	1e7b      	subs	r3, r7, #1
 800582e:	9314      	str	r3, [sp, #80]	; 0x50
 8005830:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d0f8      	beq.n	800582a <_dtoa_r+0x63a>
 8005838:	46c2      	mov	sl, r8
 800583a:	e03b      	b.n	80058b4 <_dtoa_r+0x6c4>
 800583c:	4b9f      	ldr	r3, [pc, #636]	; (8005abc <_dtoa_r+0x8cc>)
 800583e:	f7fa fe4b 	bl	80004d8 <__aeabi_dmul>
 8005842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005846:	e7bc      	b.n	80057c2 <_dtoa_r+0x5d2>
 8005848:	9f03      	ldr	r7, [sp, #12]
 800584a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800584e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fa ff69 	bl	800072c <__aeabi_ddiv>
 800585a:	f7fb f8ed 	bl	8000a38 <__aeabi_d2iz>
 800585e:	4604      	mov	r4, r0
 8005860:	f7fa fdd0 	bl	8000404 <__aeabi_i2d>
 8005864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005868:	f7fa fe36 	bl	80004d8 <__aeabi_dmul>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4640      	mov	r0, r8
 8005872:	4649      	mov	r1, r9
 8005874:	f7fa fc78 	bl	8000168 <__aeabi_dsub>
 8005878:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800587c:	f807 6b01 	strb.w	r6, [r7], #1
 8005880:	9e03      	ldr	r6, [sp, #12]
 8005882:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005886:	1bbe      	subs	r6, r7, r6
 8005888:	45b4      	cmp	ip, r6
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	d136      	bne.n	80058fe <_dtoa_r+0x70e>
 8005890:	f7fa fc6c 	bl	800016c <__adddf3>
 8005894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005898:	4680      	mov	r8, r0
 800589a:	4689      	mov	r9, r1
 800589c:	f7fb f8ac 	bl	80009f8 <__aeabi_dcmpgt>
 80058a0:	bb58      	cbnz	r0, 80058fa <_dtoa_r+0x70a>
 80058a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fb f87d 	bl	80009a8 <__aeabi_dcmpeq>
 80058ae:	b108      	cbz	r0, 80058b4 <_dtoa_r+0x6c4>
 80058b0:	07e1      	lsls	r1, r4, #31
 80058b2:	d422      	bmi.n	80058fa <_dtoa_r+0x70a>
 80058b4:	4628      	mov	r0, r5
 80058b6:	4659      	mov	r1, fp
 80058b8:	f000 fd0c 	bl	80062d4 <_Bfree>
 80058bc:	2300      	movs	r3, #0
 80058be:	703b      	strb	r3, [r7, #0]
 80058c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058c2:	f10a 0001 	add.w	r0, sl, #1
 80058c6:	6018      	str	r0, [r3, #0]
 80058c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f43f acde 	beq.w	800528c <_dtoa_r+0x9c>
 80058d0:	601f      	str	r7, [r3, #0]
 80058d2:	e4db      	b.n	800528c <_dtoa_r+0x9c>
 80058d4:	4627      	mov	r7, r4
 80058d6:	463b      	mov	r3, r7
 80058d8:	461f      	mov	r7, r3
 80058da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058de:	2a39      	cmp	r2, #57	; 0x39
 80058e0:	d107      	bne.n	80058f2 <_dtoa_r+0x702>
 80058e2:	9a03      	ldr	r2, [sp, #12]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1f7      	bne.n	80058d8 <_dtoa_r+0x6e8>
 80058e8:	2230      	movs	r2, #48	; 0x30
 80058ea:	9903      	ldr	r1, [sp, #12]
 80058ec:	f108 0801 	add.w	r8, r8, #1
 80058f0:	700a      	strb	r2, [r1, #0]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	3201      	adds	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e79e      	b.n	8005838 <_dtoa_r+0x648>
 80058fa:	46d0      	mov	r8, sl
 80058fc:	e7eb      	b.n	80058d6 <_dtoa_r+0x6e6>
 80058fe:	2200      	movs	r2, #0
 8005900:	4b6e      	ldr	r3, [pc, #440]	; (8005abc <_dtoa_r+0x8cc>)
 8005902:	f7fa fde9 	bl	80004d8 <__aeabi_dmul>
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	4680      	mov	r8, r0
 800590c:	4689      	mov	r9, r1
 800590e:	f7fb f84b 	bl	80009a8 <__aeabi_dcmpeq>
 8005912:	2800      	cmp	r0, #0
 8005914:	d09b      	beq.n	800584e <_dtoa_r+0x65e>
 8005916:	e7cd      	b.n	80058b4 <_dtoa_r+0x6c4>
 8005918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800591a:	2a00      	cmp	r2, #0
 800591c:	f000 80d0 	beq.w	8005ac0 <_dtoa_r+0x8d0>
 8005920:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005922:	2a01      	cmp	r2, #1
 8005924:	f300 80ae 	bgt.w	8005a84 <_dtoa_r+0x894>
 8005928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800592a:	2a00      	cmp	r2, #0
 800592c:	f000 80a6 	beq.w	8005a7c <_dtoa_r+0x88c>
 8005930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005936:	9f06      	ldr	r7, [sp, #24]
 8005938:	9a06      	ldr	r2, [sp, #24]
 800593a:	2101      	movs	r1, #1
 800593c:	441a      	add	r2, r3
 800593e:	9206      	str	r2, [sp, #24]
 8005940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005942:	4628      	mov	r0, r5
 8005944:	441a      	add	r2, r3
 8005946:	9209      	str	r2, [sp, #36]	; 0x24
 8005948:	f000 fd7a 	bl	8006440 <__i2b>
 800594c:	4606      	mov	r6, r0
 800594e:	2f00      	cmp	r7, #0
 8005950:	dd0c      	ble.n	800596c <_dtoa_r+0x77c>
 8005952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd09      	ble.n	800596c <_dtoa_r+0x77c>
 8005958:	42bb      	cmp	r3, r7
 800595a:	bfa8      	it	ge
 800595c:	463b      	movge	r3, r7
 800595e:	9a06      	ldr	r2, [sp, #24]
 8005960:	1aff      	subs	r7, r7, r3
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	9206      	str	r2, [sp, #24]
 8005966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	9309      	str	r3, [sp, #36]	; 0x24
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	b1f3      	cbz	r3, 80059ae <_dtoa_r+0x7be>
 8005970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80a8 	beq.w	8005ac8 <_dtoa_r+0x8d8>
 8005978:	2c00      	cmp	r4, #0
 800597a:	dd10      	ble.n	800599e <_dtoa_r+0x7ae>
 800597c:	4631      	mov	r1, r6
 800597e:	4622      	mov	r2, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 fe1b 	bl	80065bc <__pow5mult>
 8005986:	465a      	mov	r2, fp
 8005988:	4601      	mov	r1, r0
 800598a:	4606      	mov	r6, r0
 800598c:	4628      	mov	r0, r5
 800598e:	f000 fd6d 	bl	800646c <__multiply>
 8005992:	4680      	mov	r8, r0
 8005994:	4659      	mov	r1, fp
 8005996:	4628      	mov	r0, r5
 8005998:	f000 fc9c 	bl	80062d4 <_Bfree>
 800599c:	46c3      	mov	fp, r8
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	1b1a      	subs	r2, r3, r4
 80059a2:	d004      	beq.n	80059ae <_dtoa_r+0x7be>
 80059a4:	4659      	mov	r1, fp
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fe08 	bl	80065bc <__pow5mult>
 80059ac:	4683      	mov	fp, r0
 80059ae:	2101      	movs	r1, #1
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fd45 	bl	8006440 <__i2b>
 80059b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b8:	4604      	mov	r4, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f340 8086 	ble.w	8005acc <_dtoa_r+0x8dc>
 80059c0:	461a      	mov	r2, r3
 80059c2:	4601      	mov	r1, r0
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 fdf9 	bl	80065bc <__pow5mult>
 80059ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059cc:	4604      	mov	r4, r0
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	dd7f      	ble.n	8005ad2 <_dtoa_r+0x8e2>
 80059d2:	f04f 0800 	mov.w	r8, #0
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059dc:	6918      	ldr	r0, [r3, #16]
 80059de:	f000 fce1 	bl	80063a4 <__hi0bits>
 80059e2:	f1c0 0020 	rsb	r0, r0, #32
 80059e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e8:	4418      	add	r0, r3
 80059ea:	f010 001f 	ands.w	r0, r0, #31
 80059ee:	f000 8092 	beq.w	8005b16 <_dtoa_r+0x926>
 80059f2:	f1c0 0320 	rsb	r3, r0, #32
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	f340 808a 	ble.w	8005b10 <_dtoa_r+0x920>
 80059fc:	f1c0 001c 	rsb	r0, r0, #28
 8005a00:	9b06      	ldr	r3, [sp, #24]
 8005a02:	4407      	add	r7, r0
 8005a04:	4403      	add	r3, r0
 8005a06:	9306      	str	r3, [sp, #24]
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	4403      	add	r3, r0
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0e:	9b06      	ldr	r3, [sp, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dd05      	ble.n	8005a20 <_dtoa_r+0x830>
 8005a14:	4659      	mov	r1, fp
 8005a16:	461a      	mov	r2, r3
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 fe29 	bl	8006670 <__lshift>
 8005a1e:	4683      	mov	fp, r0
 8005a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dd05      	ble.n	8005a32 <_dtoa_r+0x842>
 8005a26:	4621      	mov	r1, r4
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 fe20 	bl	8006670 <__lshift>
 8005a30:	4604      	mov	r4, r0
 8005a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d070      	beq.n	8005b1a <_dtoa_r+0x92a>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4658      	mov	r0, fp
 8005a3c:	f000 fe88 	bl	8006750 <__mcmp>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	da6a      	bge.n	8005b1a <_dtoa_r+0x92a>
 8005a44:	2300      	movs	r3, #0
 8005a46:	4659      	mov	r1, fp
 8005a48:	220a      	movs	r2, #10
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 fc64 	bl	8006318 <__multadd>
 8005a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a52:	4683      	mov	fp, r0
 8005a54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8194 	beq.w	8005d86 <_dtoa_r+0xb96>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	2300      	movs	r3, #0
 8005a62:	220a      	movs	r2, #10
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 fc57 	bl	8006318 <__multadd>
 8005a6a:	f1b9 0f00 	cmp.w	r9, #0
 8005a6e:	4606      	mov	r6, r0
 8005a70:	f300 8093 	bgt.w	8005b9a <_dtoa_r+0x9aa>
 8005a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	dc57      	bgt.n	8005b2a <_dtoa_r+0x93a>
 8005a7a:	e08e      	b.n	8005b9a <_dtoa_r+0x9aa>
 8005a7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a82:	e757      	b.n	8005934 <_dtoa_r+0x744>
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	1e5c      	subs	r4, r3, #1
 8005a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a8a:	42a3      	cmp	r3, r4
 8005a8c:	bfb7      	itett	lt
 8005a8e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a90:	1b1c      	subge	r4, r3, r4
 8005a92:	1ae2      	sublt	r2, r4, r3
 8005a94:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a96:	bfbe      	ittt	lt
 8005a98:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a9a:	189b      	addlt	r3, r3, r2
 8005a9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a9e:	9b08      	ldr	r3, [sp, #32]
 8005aa0:	bfb8      	it	lt
 8005aa2:	2400      	movlt	r4, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfbb      	ittet	lt
 8005aa8:	9b06      	ldrlt	r3, [sp, #24]
 8005aaa:	9a08      	ldrlt	r2, [sp, #32]
 8005aac:	9f06      	ldrge	r7, [sp, #24]
 8005aae:	1a9f      	sublt	r7, r3, r2
 8005ab0:	bfac      	ite	ge
 8005ab2:	9b08      	ldrge	r3, [sp, #32]
 8005ab4:	2300      	movlt	r3, #0
 8005ab6:	e73f      	b.n	8005938 <_dtoa_r+0x748>
 8005ab8:	3fe00000 	.word	0x3fe00000
 8005abc:	40240000 	.word	0x40240000
 8005ac0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ac2:	9f06      	ldr	r7, [sp, #24]
 8005ac4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ac6:	e742      	b.n	800594e <_dtoa_r+0x75e>
 8005ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aca:	e76b      	b.n	80059a4 <_dtoa_r+0x7b4>
 8005acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	dc19      	bgt.n	8005b06 <_dtoa_r+0x916>
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	b9bb      	cbnz	r3, 8005b06 <_dtoa_r+0x916>
 8005ad6:	9b05      	ldr	r3, [sp, #20]
 8005ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005adc:	b99b      	cbnz	r3, 8005b06 <_dtoa_r+0x916>
 8005ade:	9b05      	ldr	r3, [sp, #20]
 8005ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ae4:	0d1b      	lsrs	r3, r3, #20
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	b183      	cbz	r3, 8005b0c <_dtoa_r+0x91c>
 8005aea:	f04f 0801 	mov.w	r8, #1
 8005aee:	9b06      	ldr	r3, [sp, #24]
 8005af0:	3301      	adds	r3, #1
 8005af2:	9306      	str	r3, [sp, #24]
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	3301      	adds	r3, #1
 8005af8:	9309      	str	r3, [sp, #36]	; 0x24
 8005afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f af6a 	bne.w	80059d6 <_dtoa_r+0x7e6>
 8005b02:	2001      	movs	r0, #1
 8005b04:	e76f      	b.n	80059e6 <_dtoa_r+0x7f6>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	e7f6      	b.n	8005afa <_dtoa_r+0x90a>
 8005b0c:	4698      	mov	r8, r3
 8005b0e:	e7f4      	b.n	8005afa <_dtoa_r+0x90a>
 8005b10:	f43f af7d 	beq.w	8005a0e <_dtoa_r+0x81e>
 8005b14:	4618      	mov	r0, r3
 8005b16:	301c      	adds	r0, #28
 8005b18:	e772      	b.n	8005a00 <_dtoa_r+0x810>
 8005b1a:	9b08      	ldr	r3, [sp, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc36      	bgt.n	8005b8e <_dtoa_r+0x99e>
 8005b20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	dd33      	ble.n	8005b8e <_dtoa_r+0x99e>
 8005b26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b2a:	f1b9 0f00 	cmp.w	r9, #0
 8005b2e:	d10d      	bne.n	8005b4c <_dtoa_r+0x95c>
 8005b30:	4621      	mov	r1, r4
 8005b32:	464b      	mov	r3, r9
 8005b34:	2205      	movs	r2, #5
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 fbee 	bl	8006318 <__multadd>
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4658      	mov	r0, fp
 8005b42:	f000 fe05 	bl	8006750 <__mcmp>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f73f adb8 	bgt.w	80056bc <_dtoa_r+0x4cc>
 8005b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b4e:	9f03      	ldr	r7, [sp, #12]
 8005b50:	ea6f 0a03 	mvn.w	sl, r3
 8005b54:	f04f 0800 	mov.w	r8, #0
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fbba 	bl	80062d4 <_Bfree>
 8005b60:	2e00      	cmp	r6, #0
 8005b62:	f43f aea7 	beq.w	80058b4 <_dtoa_r+0x6c4>
 8005b66:	f1b8 0f00 	cmp.w	r8, #0
 8005b6a:	d005      	beq.n	8005b78 <_dtoa_r+0x988>
 8005b6c:	45b0      	cmp	r8, r6
 8005b6e:	d003      	beq.n	8005b78 <_dtoa_r+0x988>
 8005b70:	4641      	mov	r1, r8
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 fbae 	bl	80062d4 <_Bfree>
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 fbaa 	bl	80062d4 <_Bfree>
 8005b80:	e698      	b.n	80058b4 <_dtoa_r+0x6c4>
 8005b82:	2400      	movs	r4, #0
 8005b84:	4626      	mov	r6, r4
 8005b86:	e7e1      	b.n	8005b4c <_dtoa_r+0x95c>
 8005b88:	46c2      	mov	sl, r8
 8005b8a:	4626      	mov	r6, r4
 8005b8c:	e596      	b.n	80056bc <_dtoa_r+0x4cc>
 8005b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80fd 	beq.w	8005d94 <_dtoa_r+0xba4>
 8005b9a:	2f00      	cmp	r7, #0
 8005b9c:	dd05      	ble.n	8005baa <_dtoa_r+0x9ba>
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	463a      	mov	r2, r7
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 fd64 	bl	8006670 <__lshift>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	f1b8 0f00 	cmp.w	r8, #0
 8005bae:	d05c      	beq.n	8005c6a <_dtoa_r+0xa7a>
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	6871      	ldr	r1, [r6, #4]
 8005bb4:	f000 fb4e 	bl	8006254 <_Balloc>
 8005bb8:	4607      	mov	r7, r0
 8005bba:	b928      	cbnz	r0, 8005bc8 <_dtoa_r+0x9d8>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	; (8005dc0 <_dtoa_r+0xbd0>)
 8005bc4:	f7ff bb28 	b.w	8005218 <_dtoa_r+0x28>
 8005bc8:	6932      	ldr	r2, [r6, #16]
 8005bca:	f106 010c 	add.w	r1, r6, #12
 8005bce:	3202      	adds	r2, #2
 8005bd0:	0092      	lsls	r2, r2, #2
 8005bd2:	300c      	adds	r0, #12
 8005bd4:	f000 fb30 	bl	8006238 <memcpy>
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4639      	mov	r1, r7
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 fd47 	bl	8006670 <__lshift>
 8005be2:	46b0      	mov	r8, r6
 8005be4:	4606      	mov	r6, r0
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	9308      	str	r3, [sp, #32]
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	444b      	add	r3, r9
 8005bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfa:	9b08      	ldr	r3, [sp, #32]
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4658      	mov	r0, fp
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	f7ff fa68 	bl	80050d8 <quorem>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	3330      	adds	r3, #48	; 0x30
 8005c0e:	9006      	str	r0, [sp, #24]
 8005c10:	4658      	mov	r0, fp
 8005c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c14:	f000 fd9c 	bl	8006750 <__mcmp>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fdb2 	bl	8006788 <__mdiff>
 8005c24:	68c2      	ldr	r2, [r0, #12]
 8005c26:	4607      	mov	r7, r0
 8005c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c2a:	bb02      	cbnz	r2, 8005c6e <_dtoa_r+0xa7e>
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	4658      	mov	r0, fp
 8005c30:	f000 fd8e 	bl	8006750 <__mcmp>
 8005c34:	4602      	mov	r2, r0
 8005c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005c40:	f000 fb48 	bl	80062d4 <_Bfree>
 8005c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c48:	9f08      	ldr	r7, [sp, #32]
 8005c4a:	ea43 0102 	orr.w	r1, r3, r2
 8005c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c50:	430b      	orrs	r3, r1
 8005c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c54:	d10d      	bne.n	8005c72 <_dtoa_r+0xa82>
 8005c56:	2b39      	cmp	r3, #57	; 0x39
 8005c58:	d029      	beq.n	8005cae <_dtoa_r+0xabe>
 8005c5a:	f1b9 0f00 	cmp.w	r9, #0
 8005c5e:	dd01      	ble.n	8005c64 <_dtoa_r+0xa74>
 8005c60:	9b06      	ldr	r3, [sp, #24]
 8005c62:	3331      	adds	r3, #49	; 0x31
 8005c64:	9a04      	ldr	r2, [sp, #16]
 8005c66:	7013      	strb	r3, [r2, #0]
 8005c68:	e776      	b.n	8005b58 <_dtoa_r+0x968>
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	e7b9      	b.n	8005be2 <_dtoa_r+0x9f2>
 8005c6e:	2201      	movs	r2, #1
 8005c70:	e7e2      	b.n	8005c38 <_dtoa_r+0xa48>
 8005c72:	f1b9 0f00 	cmp.w	r9, #0
 8005c76:	db06      	blt.n	8005c86 <_dtoa_r+0xa96>
 8005c78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005c7a:	ea41 0909 	orr.w	r9, r1, r9
 8005c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c80:	ea59 0101 	orrs.w	r1, r9, r1
 8005c84:	d120      	bne.n	8005cc8 <_dtoa_r+0xad8>
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	ddec      	ble.n	8005c64 <_dtoa_r+0xa74>
 8005c8a:	4659      	mov	r1, fp
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4628      	mov	r0, r5
 8005c90:	9308      	str	r3, [sp, #32]
 8005c92:	f000 fced 	bl	8006670 <__lshift>
 8005c96:	4621      	mov	r1, r4
 8005c98:	4683      	mov	fp, r0
 8005c9a:	f000 fd59 	bl	8006750 <__mcmp>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	9b08      	ldr	r3, [sp, #32]
 8005ca2:	dc02      	bgt.n	8005caa <_dtoa_r+0xaba>
 8005ca4:	d1de      	bne.n	8005c64 <_dtoa_r+0xa74>
 8005ca6:	07da      	lsls	r2, r3, #31
 8005ca8:	d5dc      	bpl.n	8005c64 <_dtoa_r+0xa74>
 8005caa:	2b39      	cmp	r3, #57	; 0x39
 8005cac:	d1d8      	bne.n	8005c60 <_dtoa_r+0xa70>
 8005cae:	2339      	movs	r3, #57	; 0x39
 8005cb0:	9a04      	ldr	r2, [sp, #16]
 8005cb2:	7013      	strb	r3, [r2, #0]
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	2a39      	cmp	r2, #57	; 0x39
 8005cc0:	d050      	beq.n	8005d64 <_dtoa_r+0xb74>
 8005cc2:	3201      	adds	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e747      	b.n	8005b58 <_dtoa_r+0x968>
 8005cc8:	2a00      	cmp	r2, #0
 8005cca:	dd03      	ble.n	8005cd4 <_dtoa_r+0xae4>
 8005ccc:	2b39      	cmp	r3, #57	; 0x39
 8005cce:	d0ee      	beq.n	8005cae <_dtoa_r+0xabe>
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	e7c7      	b.n	8005c64 <_dtoa_r+0xa74>
 8005cd4:	9a08      	ldr	r2, [sp, #32]
 8005cd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005cdc:	428a      	cmp	r2, r1
 8005cde:	d02a      	beq.n	8005d36 <_dtoa_r+0xb46>
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	220a      	movs	r2, #10
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 fb16 	bl	8006318 <__multadd>
 8005cec:	45b0      	cmp	r8, r6
 8005cee:	4683      	mov	fp, r0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	f04f 020a 	mov.w	r2, #10
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	d107      	bne.n	8005d0e <_dtoa_r+0xb1e>
 8005cfe:	f000 fb0b 	bl	8006318 <__multadd>
 8005d02:	4680      	mov	r8, r0
 8005d04:	4606      	mov	r6, r0
 8005d06:	9b08      	ldr	r3, [sp, #32]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	9308      	str	r3, [sp, #32]
 8005d0c:	e775      	b.n	8005bfa <_dtoa_r+0xa0a>
 8005d0e:	f000 fb03 	bl	8006318 <__multadd>
 8005d12:	4631      	mov	r1, r6
 8005d14:	4680      	mov	r8, r0
 8005d16:	2300      	movs	r3, #0
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fafc 	bl	8006318 <__multadd>
 8005d20:	4606      	mov	r6, r0
 8005d22:	e7f0      	b.n	8005d06 <_dtoa_r+0xb16>
 8005d24:	f1b9 0f00 	cmp.w	r9, #0
 8005d28:	bfcc      	ite	gt
 8005d2a:	464f      	movgt	r7, r9
 8005d2c:	2701      	movle	r7, #1
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	9a03      	ldr	r2, [sp, #12]
 8005d34:	4417      	add	r7, r2
 8005d36:	4659      	mov	r1, fp
 8005d38:	2201      	movs	r2, #1
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	f000 fc97 	bl	8006670 <__lshift>
 8005d42:	4621      	mov	r1, r4
 8005d44:	4683      	mov	fp, r0
 8005d46:	f000 fd03 	bl	8006750 <__mcmp>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	dcb2      	bgt.n	8005cb4 <_dtoa_r+0xac4>
 8005d4e:	d102      	bne.n	8005d56 <_dtoa_r+0xb66>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	07db      	lsls	r3, r3, #31
 8005d54:	d4ae      	bmi.n	8005cb4 <_dtoa_r+0xac4>
 8005d56:	463b      	mov	r3, r7
 8005d58:	461f      	mov	r7, r3
 8005d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d5e:	2a30      	cmp	r2, #48	; 0x30
 8005d60:	d0fa      	beq.n	8005d58 <_dtoa_r+0xb68>
 8005d62:	e6f9      	b.n	8005b58 <_dtoa_r+0x968>
 8005d64:	9a03      	ldr	r2, [sp, #12]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d1a5      	bne.n	8005cb6 <_dtoa_r+0xac6>
 8005d6a:	2331      	movs	r3, #49	; 0x31
 8005d6c:	f10a 0a01 	add.w	sl, sl, #1
 8005d70:	e779      	b.n	8005c66 <_dtoa_r+0xa76>
 8005d72:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <_dtoa_r+0xbd4>)
 8005d74:	f7ff baa8 	b.w	80052c8 <_dtoa_r+0xd8>
 8005d78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f47f aa81 	bne.w	8005282 <_dtoa_r+0x92>
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <_dtoa_r+0xbd8>)
 8005d82:	f7ff baa1 	b.w	80052c8 <_dtoa_r+0xd8>
 8005d86:	f1b9 0f00 	cmp.w	r9, #0
 8005d8a:	dc03      	bgt.n	8005d94 <_dtoa_r+0xba4>
 8005d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	f73f aecb 	bgt.w	8005b2a <_dtoa_r+0x93a>
 8005d94:	9f03      	ldr	r7, [sp, #12]
 8005d96:	4621      	mov	r1, r4
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f7ff f99d 	bl	80050d8 <quorem>
 8005d9e:	9a03      	ldr	r2, [sp, #12]
 8005da0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005da4:	f807 3b01 	strb.w	r3, [r7], #1
 8005da8:	1aba      	subs	r2, r7, r2
 8005daa:	4591      	cmp	r9, r2
 8005dac:	ddba      	ble.n	8005d24 <_dtoa_r+0xb34>
 8005dae:	4659      	mov	r1, fp
 8005db0:	2300      	movs	r3, #0
 8005db2:	220a      	movs	r2, #10
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 faaf 	bl	8006318 <__multadd>
 8005dba:	4683      	mov	fp, r0
 8005dbc:	e7eb      	b.n	8005d96 <_dtoa_r+0xba6>
 8005dbe:	bf00      	nop
 8005dc0:	08008857 	.word	0x08008857
 8005dc4:	080087b4 	.word	0x080087b4
 8005dc8:	080087d8 	.word	0x080087d8

08005dcc <__sflush_r>:
 8005dcc:	898a      	ldrh	r2, [r1, #12]
 8005dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	0710      	lsls	r0, r2, #28
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	d457      	bmi.n	8005e88 <__sflush_r+0xbc>
 8005dd8:	684b      	ldr	r3, [r1, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dc04      	bgt.n	8005de8 <__sflush_r+0x1c>
 8005dde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc01      	bgt.n	8005de8 <__sflush_r+0x1c>
 8005de4:	2000      	movs	r0, #0
 8005de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	d0fa      	beq.n	8005de4 <__sflush_r+0x18>
 8005dee:	2300      	movs	r3, #0
 8005df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005df4:	682f      	ldr	r7, [r5, #0]
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	d032      	beq.n	8005e60 <__sflush_r+0x94>
 8005dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	075a      	lsls	r2, r3, #29
 8005e00:	d505      	bpl.n	8005e0e <__sflush_r+0x42>
 8005e02:	6863      	ldr	r3, [r4, #4]
 8005e04:	1ac0      	subs	r0, r0, r3
 8005e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e08:	b10b      	cbz	r3, 8005e0e <__sflush_r+0x42>
 8005e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e0c:	1ac0      	subs	r0, r0, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4602      	mov	r2, r0
 8005e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e14:	4628      	mov	r0, r5
 8005e16:	6a21      	ldr	r1, [r4, #32]
 8005e18:	47b0      	blx	r6
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	d106      	bne.n	8005e2e <__sflush_r+0x62>
 8005e20:	6829      	ldr	r1, [r5, #0]
 8005e22:	291d      	cmp	r1, #29
 8005e24:	d82c      	bhi.n	8005e80 <__sflush_r+0xb4>
 8005e26:	4a29      	ldr	r2, [pc, #164]	; (8005ecc <__sflush_r+0x100>)
 8005e28:	40ca      	lsrs	r2, r1
 8005e2a:	07d6      	lsls	r6, r2, #31
 8005e2c:	d528      	bpl.n	8005e80 <__sflush_r+0xb4>
 8005e2e:	2200      	movs	r2, #0
 8005e30:	6062      	str	r2, [r4, #4]
 8005e32:	6922      	ldr	r2, [r4, #16]
 8005e34:	04d9      	lsls	r1, r3, #19
 8005e36:	6022      	str	r2, [r4, #0]
 8005e38:	d504      	bpl.n	8005e44 <__sflush_r+0x78>
 8005e3a:	1c42      	adds	r2, r0, #1
 8005e3c:	d101      	bne.n	8005e42 <__sflush_r+0x76>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	b903      	cbnz	r3, 8005e44 <__sflush_r+0x78>
 8005e42:	6560      	str	r0, [r4, #84]	; 0x54
 8005e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e46:	602f      	str	r7, [r5, #0]
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d0cb      	beq.n	8005de4 <__sflush_r+0x18>
 8005e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e50:	4299      	cmp	r1, r3
 8005e52:	d002      	beq.n	8005e5a <__sflush_r+0x8e>
 8005e54:	4628      	mov	r0, r5
 8005e56:	f000 fd93 	bl	8006980 <_free_r>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e5e:	e7c2      	b.n	8005de6 <__sflush_r+0x1a>
 8005e60:	6a21      	ldr	r1, [r4, #32]
 8005e62:	2301      	movs	r3, #1
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b0      	blx	r6
 8005e68:	1c41      	adds	r1, r0, #1
 8005e6a:	d1c7      	bne.n	8005dfc <__sflush_r+0x30>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0c4      	beq.n	8005dfc <__sflush_r+0x30>
 8005e72:	2b1d      	cmp	r3, #29
 8005e74:	d001      	beq.n	8005e7a <__sflush_r+0xae>
 8005e76:	2b16      	cmp	r3, #22
 8005e78:	d101      	bne.n	8005e7e <__sflush_r+0xb2>
 8005e7a:	602f      	str	r7, [r5, #0]
 8005e7c:	e7b2      	b.n	8005de4 <__sflush_r+0x18>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	e7ae      	b.n	8005de6 <__sflush_r+0x1a>
 8005e88:	690f      	ldr	r7, [r1, #16]
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	d0aa      	beq.n	8005de4 <__sflush_r+0x18>
 8005e8e:	0793      	lsls	r3, r2, #30
 8005e90:	bf18      	it	ne
 8005e92:	2300      	movne	r3, #0
 8005e94:	680e      	ldr	r6, [r1, #0]
 8005e96:	bf08      	it	eq
 8005e98:	694b      	ldreq	r3, [r1, #20]
 8005e9a:	1bf6      	subs	r6, r6, r7
 8005e9c:	600f      	str	r7, [r1, #0]
 8005e9e:	608b      	str	r3, [r1, #8]
 8005ea0:	2e00      	cmp	r6, #0
 8005ea2:	dd9f      	ble.n	8005de4 <__sflush_r+0x18>
 8005ea4:	4633      	mov	r3, r6
 8005ea6:	463a      	mov	r2, r7
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	6a21      	ldr	r1, [r4, #32]
 8005eac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005eb0:	47e0      	blx	ip
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dc06      	bgt.n	8005ec4 <__sflush_r+0xf8>
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e790      	b.n	8005de6 <__sflush_r+0x1a>
 8005ec4:	4407      	add	r7, r0
 8005ec6:	1a36      	subs	r6, r6, r0
 8005ec8:	e7ea      	b.n	8005ea0 <__sflush_r+0xd4>
 8005eca:	bf00      	nop
 8005ecc:	20400001 	.word	0x20400001

08005ed0 <_fflush_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	690b      	ldr	r3, [r1, #16]
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	b913      	cbnz	r3, 8005ee0 <_fflush_r+0x10>
 8005eda:	2500      	movs	r5, #0
 8005edc:	4628      	mov	r0, r5
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	b118      	cbz	r0, 8005eea <_fflush_r+0x1a>
 8005ee2:	6983      	ldr	r3, [r0, #24]
 8005ee4:	b90b      	cbnz	r3, 8005eea <_fflush_r+0x1a>
 8005ee6:	f000 f887 	bl	8005ff8 <__sinit>
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <_fflush_r+0x6c>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	d11b      	bne.n	8005f28 <_fflush_r+0x58>
 8005ef0:	686c      	ldr	r4, [r5, #4]
 8005ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0ef      	beq.n	8005eda <_fflush_r+0xa>
 8005efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005efc:	07d0      	lsls	r0, r2, #31
 8005efe:	d404      	bmi.n	8005f0a <_fflush_r+0x3a>
 8005f00:	0599      	lsls	r1, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_fflush_r+0x3a>
 8005f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f06:	f000 f91a 	bl	800613e <__retarget_lock_acquire_recursive>
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f7ff ff5d 	bl	8005dcc <__sflush_r>
 8005f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f14:	4605      	mov	r5, r0
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d4e0      	bmi.n	8005edc <_fflush_r+0xc>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	059b      	lsls	r3, r3, #22
 8005f1e:	d4dd      	bmi.n	8005edc <_fflush_r+0xc>
 8005f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f22:	f000 f90d 	bl	8006140 <__retarget_lock_release_recursive>
 8005f26:	e7d9      	b.n	8005edc <_fflush_r+0xc>
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <_fflush_r+0x70>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d101      	bne.n	8005f32 <_fflush_r+0x62>
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	e7df      	b.n	8005ef2 <_fflush_r+0x22>
 8005f32:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <_fflush_r+0x74>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	bf08      	it	eq
 8005f38:	68ec      	ldreq	r4, [r5, #12]
 8005f3a:	e7da      	b.n	8005ef2 <_fflush_r+0x22>
 8005f3c:	08008888 	.word	0x08008888
 8005f40:	080088a8 	.word	0x080088a8
 8005f44:	08008868 	.word	0x08008868

08005f48 <std>:
 8005f48:	2300      	movs	r3, #0
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f56:	6083      	str	r3, [r0, #8]
 8005f58:	8181      	strh	r1, [r0, #12]
 8005f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f5c:	81c2      	strh	r2, [r0, #14]
 8005f5e:	6183      	str	r3, [r0, #24]
 8005f60:	4619      	mov	r1, r3
 8005f62:	2208      	movs	r2, #8
 8005f64:	305c      	adds	r0, #92	; 0x5c
 8005f66:	f7fe fb01 	bl	800456c <memset>
 8005f6a:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <std+0x38>)
 8005f6c:	6224      	str	r4, [r4, #32]
 8005f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <std+0x3c>)
 8005f72:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <std+0x40>)
 8005f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <std+0x44>)
 8005f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop
 8005f80:	08006e09 	.word	0x08006e09
 8005f84:	08006e2b 	.word	0x08006e2b
 8005f88:	08006e63 	.word	0x08006e63
 8005f8c:	08006e87 	.word	0x08006e87

08005f90 <_cleanup_r>:
 8005f90:	4901      	ldr	r1, [pc, #4]	; (8005f98 <_cleanup_r+0x8>)
 8005f92:	f000 b8af 	b.w	80060f4 <_fwalk_reent>
 8005f96:	bf00      	nop
 8005f98:	08005ed1 	.word	0x08005ed1

08005f9c <__sfmoreglue>:
 8005f9c:	2268      	movs	r2, #104	; 0x68
 8005f9e:	b570      	push	{r4, r5, r6, lr}
 8005fa0:	1e4d      	subs	r5, r1, #1
 8005fa2:	4355      	muls	r5, r2
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005faa:	f000 fd51 	bl	8006a50 <_malloc_r>
 8005fae:	4604      	mov	r4, r0
 8005fb0:	b140      	cbz	r0, 8005fc4 <__sfmoreglue+0x28>
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fb8:	300c      	adds	r0, #12
 8005fba:	60a0      	str	r0, [r4, #8]
 8005fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fc0:	f7fe fad4 	bl	800456c <memset>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}

08005fc8 <__sfp_lock_acquire>:
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <__sfp_lock_acquire+0x8>)
 8005fca:	f000 b8b8 	b.w	800613e <__retarget_lock_acquire_recursive>
 8005fce:	bf00      	nop
 8005fd0:	20000321 	.word	0x20000321

08005fd4 <__sfp_lock_release>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__sfp_lock_release+0x8>)
 8005fd6:	f000 b8b3 	b.w	8006140 <__retarget_lock_release_recursive>
 8005fda:	bf00      	nop
 8005fdc:	20000321 	.word	0x20000321

08005fe0 <__sinit_lock_acquire>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__sinit_lock_acquire+0x8>)
 8005fe2:	f000 b8ac 	b.w	800613e <__retarget_lock_acquire_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	20000322 	.word	0x20000322

08005fec <__sinit_lock_release>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__sinit_lock_release+0x8>)
 8005fee:	f000 b8a7 	b.w	8006140 <__retarget_lock_release_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20000322 	.word	0x20000322

08005ff8 <__sinit>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	f7ff fff0 	bl	8005fe0 <__sinit_lock_acquire>
 8006000:	69a3      	ldr	r3, [r4, #24]
 8006002:	b11b      	cbz	r3, 800600c <__sinit+0x14>
 8006004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006008:	f7ff bff0 	b.w	8005fec <__sinit_lock_release>
 800600c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006010:	6523      	str	r3, [r4, #80]	; 0x50
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <__sinit+0x68>)
 8006014:	4a13      	ldr	r2, [pc, #76]	; (8006064 <__sinit+0x6c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	62a2      	str	r2, [r4, #40]	; 0x28
 800601a:	42a3      	cmp	r3, r4
 800601c:	bf08      	it	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	4620      	mov	r0, r4
 8006022:	bf08      	it	eq
 8006024:	61a3      	streq	r3, [r4, #24]
 8006026:	f000 f81f 	bl	8006068 <__sfp>
 800602a:	6060      	str	r0, [r4, #4]
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f81b 	bl	8006068 <__sfp>
 8006032:	60a0      	str	r0, [r4, #8]
 8006034:	4620      	mov	r0, r4
 8006036:	f000 f817 	bl	8006068 <__sfp>
 800603a:	2200      	movs	r2, #0
 800603c:	2104      	movs	r1, #4
 800603e:	60e0      	str	r0, [r4, #12]
 8006040:	6860      	ldr	r0, [r4, #4]
 8006042:	f7ff ff81 	bl	8005f48 <std>
 8006046:	2201      	movs	r2, #1
 8006048:	2109      	movs	r1, #9
 800604a:	68a0      	ldr	r0, [r4, #8]
 800604c:	f7ff ff7c 	bl	8005f48 <std>
 8006050:	2202      	movs	r2, #2
 8006052:	2112      	movs	r1, #18
 8006054:	68e0      	ldr	r0, [r4, #12]
 8006056:	f7ff ff77 	bl	8005f48 <std>
 800605a:	2301      	movs	r3, #1
 800605c:	61a3      	str	r3, [r4, #24]
 800605e:	e7d1      	b.n	8006004 <__sinit+0xc>
 8006060:	080087a0 	.word	0x080087a0
 8006064:	08005f91 	.word	0x08005f91

08006068 <__sfp>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	4607      	mov	r7, r0
 800606c:	f7ff ffac 	bl	8005fc8 <__sfp_lock_acquire>
 8006070:	4b1e      	ldr	r3, [pc, #120]	; (80060ec <__sfp+0x84>)
 8006072:	681e      	ldr	r6, [r3, #0]
 8006074:	69b3      	ldr	r3, [r6, #24]
 8006076:	b913      	cbnz	r3, 800607e <__sfp+0x16>
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ffbd 	bl	8005ff8 <__sinit>
 800607e:	3648      	adds	r6, #72	; 0x48
 8006080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006084:	3b01      	subs	r3, #1
 8006086:	d503      	bpl.n	8006090 <__sfp+0x28>
 8006088:	6833      	ldr	r3, [r6, #0]
 800608a:	b30b      	cbz	r3, 80060d0 <__sfp+0x68>
 800608c:	6836      	ldr	r6, [r6, #0]
 800608e:	e7f7      	b.n	8006080 <__sfp+0x18>
 8006090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006094:	b9d5      	cbnz	r5, 80060cc <__sfp+0x64>
 8006096:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <__sfp+0x88>)
 8006098:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800609c:	60e3      	str	r3, [r4, #12]
 800609e:	6665      	str	r5, [r4, #100]	; 0x64
 80060a0:	f000 f84c 	bl	800613c <__retarget_lock_init_recursive>
 80060a4:	f7ff ff96 	bl	8005fd4 <__sfp_lock_release>
 80060a8:	2208      	movs	r2, #8
 80060aa:	4629      	mov	r1, r5
 80060ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060b4:	6025      	str	r5, [r4, #0]
 80060b6:	61a5      	str	r5, [r4, #24]
 80060b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060bc:	f7fe fa56 	bl	800456c <memset>
 80060c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060c8:	4620      	mov	r0, r4
 80060ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060cc:	3468      	adds	r4, #104	; 0x68
 80060ce:	e7d9      	b.n	8006084 <__sfp+0x1c>
 80060d0:	2104      	movs	r1, #4
 80060d2:	4638      	mov	r0, r7
 80060d4:	f7ff ff62 	bl	8005f9c <__sfmoreglue>
 80060d8:	4604      	mov	r4, r0
 80060da:	6030      	str	r0, [r6, #0]
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1d5      	bne.n	800608c <__sfp+0x24>
 80060e0:	f7ff ff78 	bl	8005fd4 <__sfp_lock_release>
 80060e4:	230c      	movs	r3, #12
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	e7ee      	b.n	80060c8 <__sfp+0x60>
 80060ea:	bf00      	nop
 80060ec:	080087a0 	.word	0x080087a0
 80060f0:	ffff0001 	.word	0xffff0001

080060f4 <_fwalk_reent>:
 80060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f8:	4606      	mov	r6, r0
 80060fa:	4688      	mov	r8, r1
 80060fc:	2700      	movs	r7, #0
 80060fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006102:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006106:	f1b9 0901 	subs.w	r9, r9, #1
 800610a:	d505      	bpl.n	8006118 <_fwalk_reent+0x24>
 800610c:	6824      	ldr	r4, [r4, #0]
 800610e:	2c00      	cmp	r4, #0
 8006110:	d1f7      	bne.n	8006102 <_fwalk_reent+0xe>
 8006112:	4638      	mov	r0, r7
 8006114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006118:	89ab      	ldrh	r3, [r5, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d907      	bls.n	800612e <_fwalk_reent+0x3a>
 800611e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006122:	3301      	adds	r3, #1
 8006124:	d003      	beq.n	800612e <_fwalk_reent+0x3a>
 8006126:	4629      	mov	r1, r5
 8006128:	4630      	mov	r0, r6
 800612a:	47c0      	blx	r8
 800612c:	4307      	orrs	r7, r0
 800612e:	3568      	adds	r5, #104	; 0x68
 8006130:	e7e9      	b.n	8006106 <_fwalk_reent+0x12>
	...

08006134 <_localeconv_r>:
 8006134:	4800      	ldr	r0, [pc, #0]	; (8006138 <_localeconv_r+0x4>)
 8006136:	4770      	bx	lr
 8006138:	20000160 	.word	0x20000160

0800613c <__retarget_lock_init_recursive>:
 800613c:	4770      	bx	lr

0800613e <__retarget_lock_acquire_recursive>:
 800613e:	4770      	bx	lr

08006140 <__retarget_lock_release_recursive>:
 8006140:	4770      	bx	lr

08006142 <__swhatbuf_r>:
 8006142:	b570      	push	{r4, r5, r6, lr}
 8006144:	460e      	mov	r6, r1
 8006146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614a:	4614      	mov	r4, r2
 800614c:	2900      	cmp	r1, #0
 800614e:	461d      	mov	r5, r3
 8006150:	b096      	sub	sp, #88	; 0x58
 8006152:	da08      	bge.n	8006166 <__swhatbuf_r+0x24>
 8006154:	2200      	movs	r2, #0
 8006156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800615a:	602a      	str	r2, [r5, #0]
 800615c:	061a      	lsls	r2, r3, #24
 800615e:	d410      	bmi.n	8006182 <__swhatbuf_r+0x40>
 8006160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006164:	e00e      	b.n	8006184 <__swhatbuf_r+0x42>
 8006166:	466a      	mov	r2, sp
 8006168:	f000 fee4 	bl	8006f34 <_fstat_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	dbf1      	blt.n	8006154 <__swhatbuf_r+0x12>
 8006170:	9a01      	ldr	r2, [sp, #4]
 8006172:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006176:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800617a:	425a      	negs	r2, r3
 800617c:	415a      	adcs	r2, r3
 800617e:	602a      	str	r2, [r5, #0]
 8006180:	e7ee      	b.n	8006160 <__swhatbuf_r+0x1e>
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	2000      	movs	r0, #0
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	b016      	add	sp, #88	; 0x58
 800618a:	bd70      	pop	{r4, r5, r6, pc}

0800618c <__smakebuf_r>:
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006190:	079d      	lsls	r5, r3, #30
 8006192:	4606      	mov	r6, r0
 8006194:	460c      	mov	r4, r1
 8006196:	d507      	bpl.n	80061a8 <__smakebuf_r+0x1c>
 8006198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	2301      	movs	r3, #1
 80061a2:	6163      	str	r3, [r4, #20]
 80061a4:	b002      	add	sp, #8
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	466a      	mov	r2, sp
 80061aa:	ab01      	add	r3, sp, #4
 80061ac:	f7ff ffc9 	bl	8006142 <__swhatbuf_r>
 80061b0:	9900      	ldr	r1, [sp, #0]
 80061b2:	4605      	mov	r5, r0
 80061b4:	4630      	mov	r0, r6
 80061b6:	f000 fc4b 	bl	8006a50 <_malloc_r>
 80061ba:	b948      	cbnz	r0, 80061d0 <__smakebuf_r+0x44>
 80061bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c0:	059a      	lsls	r2, r3, #22
 80061c2:	d4ef      	bmi.n	80061a4 <__smakebuf_r+0x18>
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	e7e3      	b.n	8006198 <__smakebuf_r+0xc>
 80061d0:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <__smakebuf_r+0x7c>)
 80061d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	6020      	str	r0, [r4, #0]
 80061d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	9b00      	ldr	r3, [sp, #0]
 80061e0:	6120      	str	r0, [r4, #16]
 80061e2:	6163      	str	r3, [r4, #20]
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	b15b      	cbz	r3, 8006200 <__smakebuf_r+0x74>
 80061e8:	4630      	mov	r0, r6
 80061ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ee:	f000 feb3 	bl	8006f58 <_isatty_r>
 80061f2:	b128      	cbz	r0, 8006200 <__smakebuf_r+0x74>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	89a0      	ldrh	r0, [r4, #12]
 8006202:	4305      	orrs	r5, r0
 8006204:	81a5      	strh	r5, [r4, #12]
 8006206:	e7cd      	b.n	80061a4 <__smakebuf_r+0x18>
 8006208:	08005f91 	.word	0x08005f91

0800620c <malloc>:
 800620c:	4b02      	ldr	r3, [pc, #8]	; (8006218 <malloc+0xc>)
 800620e:	4601      	mov	r1, r0
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	f000 bc1d 	b.w	8006a50 <_malloc_r>
 8006216:	bf00      	nop
 8006218:	2000000c 	.word	0x2000000c

0800621c <memchr>:
 800621c:	4603      	mov	r3, r0
 800621e:	b510      	push	{r4, lr}
 8006220:	b2c9      	uxtb	r1, r1
 8006222:	4402      	add	r2, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	4618      	mov	r0, r3
 8006228:	d101      	bne.n	800622e <memchr+0x12>
 800622a:	2000      	movs	r0, #0
 800622c:	e003      	b.n	8006236 <memchr+0x1a>
 800622e:	7804      	ldrb	r4, [r0, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	428c      	cmp	r4, r1
 8006234:	d1f6      	bne.n	8006224 <memchr+0x8>
 8006236:	bd10      	pop	{r4, pc}

08006238 <memcpy>:
 8006238:	440a      	add	r2, r1
 800623a:	4291      	cmp	r1, r2
 800623c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006240:	d100      	bne.n	8006244 <memcpy+0xc>
 8006242:	4770      	bx	lr
 8006244:	b510      	push	{r4, lr}
 8006246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800624a:	4291      	cmp	r1, r2
 800624c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006250:	d1f9      	bne.n	8006246 <memcpy+0xe>
 8006252:	bd10      	pop	{r4, pc}

08006254 <_Balloc>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006258:	4604      	mov	r4, r0
 800625a:	460d      	mov	r5, r1
 800625c:	b976      	cbnz	r6, 800627c <_Balloc+0x28>
 800625e:	2010      	movs	r0, #16
 8006260:	f7ff ffd4 	bl	800620c <malloc>
 8006264:	4602      	mov	r2, r0
 8006266:	6260      	str	r0, [r4, #36]	; 0x24
 8006268:	b920      	cbnz	r0, 8006274 <_Balloc+0x20>
 800626a:	2166      	movs	r1, #102	; 0x66
 800626c:	4b17      	ldr	r3, [pc, #92]	; (80062cc <_Balloc+0x78>)
 800626e:	4818      	ldr	r0, [pc, #96]	; (80062d0 <_Balloc+0x7c>)
 8006270:	f000 fe20 	bl	8006eb4 <__assert_func>
 8006274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006278:	6006      	str	r6, [r0, #0]
 800627a:	60c6      	str	r6, [r0, #12]
 800627c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800627e:	68f3      	ldr	r3, [r6, #12]
 8006280:	b183      	cbz	r3, 80062a4 <_Balloc+0x50>
 8006282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800628a:	b9b8      	cbnz	r0, 80062bc <_Balloc+0x68>
 800628c:	2101      	movs	r1, #1
 800628e:	fa01 f605 	lsl.w	r6, r1, r5
 8006292:	1d72      	adds	r2, r6, #5
 8006294:	4620      	mov	r0, r4
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	f000 fb5e 	bl	8006958 <_calloc_r>
 800629c:	b160      	cbz	r0, 80062b8 <_Balloc+0x64>
 800629e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062a2:	e00e      	b.n	80062c2 <_Balloc+0x6e>
 80062a4:	2221      	movs	r2, #33	; 0x21
 80062a6:	2104      	movs	r1, #4
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fb55 	bl	8006958 <_calloc_r>
 80062ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b0:	60f0      	str	r0, [r6, #12]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e4      	bne.n	8006282 <_Balloc+0x2e>
 80062b8:	2000      	movs	r0, #0
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	6802      	ldr	r2, [r0, #0]
 80062be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062c2:	2300      	movs	r3, #0
 80062c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062c8:	e7f7      	b.n	80062ba <_Balloc+0x66>
 80062ca:	bf00      	nop
 80062cc:	080087e5 	.word	0x080087e5
 80062d0:	080088c8 	.word	0x080088c8

080062d4 <_Bfree>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062d8:	4605      	mov	r5, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	b976      	cbnz	r6, 80062fc <_Bfree+0x28>
 80062de:	2010      	movs	r0, #16
 80062e0:	f7ff ff94 	bl	800620c <malloc>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6268      	str	r0, [r5, #36]	; 0x24
 80062e8:	b920      	cbnz	r0, 80062f4 <_Bfree+0x20>
 80062ea:	218a      	movs	r1, #138	; 0x8a
 80062ec:	4b08      	ldr	r3, [pc, #32]	; (8006310 <_Bfree+0x3c>)
 80062ee:	4809      	ldr	r0, [pc, #36]	; (8006314 <_Bfree+0x40>)
 80062f0:	f000 fde0 	bl	8006eb4 <__assert_func>
 80062f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062f8:	6006      	str	r6, [r0, #0]
 80062fa:	60c6      	str	r6, [r0, #12]
 80062fc:	b13c      	cbz	r4, 800630e <_Bfree+0x3a>
 80062fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006300:	6862      	ldr	r2, [r4, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006308:	6021      	str	r1, [r4, #0]
 800630a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	080087e5 	.word	0x080087e5
 8006314:	080088c8 	.word	0x080088c8

08006318 <__multadd>:
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4607      	mov	r7, r0
 800631e:	460c      	mov	r4, r1
 8006320:	461e      	mov	r6, r3
 8006322:	2000      	movs	r0, #0
 8006324:	690d      	ldr	r5, [r1, #16]
 8006326:	f101 0c14 	add.w	ip, r1, #20
 800632a:	f8dc 3000 	ldr.w	r3, [ip]
 800632e:	3001      	adds	r0, #1
 8006330:	b299      	uxth	r1, r3
 8006332:	fb02 6101 	mla	r1, r2, r1, r6
 8006336:	0c1e      	lsrs	r6, r3, #16
 8006338:	0c0b      	lsrs	r3, r1, #16
 800633a:	fb02 3306 	mla	r3, r2, r6, r3
 800633e:	b289      	uxth	r1, r1
 8006340:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006344:	4285      	cmp	r5, r0
 8006346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800634a:	f84c 1b04 	str.w	r1, [ip], #4
 800634e:	dcec      	bgt.n	800632a <__multadd+0x12>
 8006350:	b30e      	cbz	r6, 8006396 <__multadd+0x7e>
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	42ab      	cmp	r3, r5
 8006356:	dc19      	bgt.n	800638c <__multadd+0x74>
 8006358:	6861      	ldr	r1, [r4, #4]
 800635a:	4638      	mov	r0, r7
 800635c:	3101      	adds	r1, #1
 800635e:	f7ff ff79 	bl	8006254 <_Balloc>
 8006362:	4680      	mov	r8, r0
 8006364:	b928      	cbnz	r0, 8006372 <__multadd+0x5a>
 8006366:	4602      	mov	r2, r0
 8006368:	21b5      	movs	r1, #181	; 0xb5
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <__multadd+0x84>)
 800636c:	480c      	ldr	r0, [pc, #48]	; (80063a0 <__multadd+0x88>)
 800636e:	f000 fda1 	bl	8006eb4 <__assert_func>
 8006372:	6922      	ldr	r2, [r4, #16]
 8006374:	f104 010c 	add.w	r1, r4, #12
 8006378:	3202      	adds	r2, #2
 800637a:	0092      	lsls	r2, r2, #2
 800637c:	300c      	adds	r0, #12
 800637e:	f7ff ff5b 	bl	8006238 <memcpy>
 8006382:	4621      	mov	r1, r4
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff ffa5 	bl	80062d4 <_Bfree>
 800638a:	4644      	mov	r4, r8
 800638c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006390:	3501      	adds	r5, #1
 8006392:	615e      	str	r6, [r3, #20]
 8006394:	6125      	str	r5, [r4, #16]
 8006396:	4620      	mov	r0, r4
 8006398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639c:	08008857 	.word	0x08008857
 80063a0:	080088c8 	.word	0x080088c8

080063a4 <__hi0bits>:
 80063a4:	0c02      	lsrs	r2, r0, #16
 80063a6:	0412      	lsls	r2, r2, #16
 80063a8:	4603      	mov	r3, r0
 80063aa:	b9ca      	cbnz	r2, 80063e0 <__hi0bits+0x3c>
 80063ac:	0403      	lsls	r3, r0, #16
 80063ae:	2010      	movs	r0, #16
 80063b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063b4:	bf04      	itt	eq
 80063b6:	021b      	lsleq	r3, r3, #8
 80063b8:	3008      	addeq	r0, #8
 80063ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063be:	bf04      	itt	eq
 80063c0:	011b      	lsleq	r3, r3, #4
 80063c2:	3004      	addeq	r0, #4
 80063c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063c8:	bf04      	itt	eq
 80063ca:	009b      	lsleq	r3, r3, #2
 80063cc:	3002      	addeq	r0, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db05      	blt.n	80063de <__hi0bits+0x3a>
 80063d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80063d6:	f100 0001 	add.w	r0, r0, #1
 80063da:	bf08      	it	eq
 80063dc:	2020      	moveq	r0, #32
 80063de:	4770      	bx	lr
 80063e0:	2000      	movs	r0, #0
 80063e2:	e7e5      	b.n	80063b0 <__hi0bits+0xc>

080063e4 <__lo0bits>:
 80063e4:	6803      	ldr	r3, [r0, #0]
 80063e6:	4602      	mov	r2, r0
 80063e8:	f013 0007 	ands.w	r0, r3, #7
 80063ec:	d00b      	beq.n	8006406 <__lo0bits+0x22>
 80063ee:	07d9      	lsls	r1, r3, #31
 80063f0:	d421      	bmi.n	8006436 <__lo0bits+0x52>
 80063f2:	0798      	lsls	r0, r3, #30
 80063f4:	bf49      	itett	mi
 80063f6:	085b      	lsrmi	r3, r3, #1
 80063f8:	089b      	lsrpl	r3, r3, #2
 80063fa:	2001      	movmi	r0, #1
 80063fc:	6013      	strmi	r3, [r2, #0]
 80063fe:	bf5c      	itt	pl
 8006400:	2002      	movpl	r0, #2
 8006402:	6013      	strpl	r3, [r2, #0]
 8006404:	4770      	bx	lr
 8006406:	b299      	uxth	r1, r3
 8006408:	b909      	cbnz	r1, 800640e <__lo0bits+0x2a>
 800640a:	2010      	movs	r0, #16
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	b2d9      	uxtb	r1, r3
 8006410:	b909      	cbnz	r1, 8006416 <__lo0bits+0x32>
 8006412:	3008      	adds	r0, #8
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	0719      	lsls	r1, r3, #28
 8006418:	bf04      	itt	eq
 800641a:	091b      	lsreq	r3, r3, #4
 800641c:	3004      	addeq	r0, #4
 800641e:	0799      	lsls	r1, r3, #30
 8006420:	bf04      	itt	eq
 8006422:	089b      	lsreq	r3, r3, #2
 8006424:	3002      	addeq	r0, #2
 8006426:	07d9      	lsls	r1, r3, #31
 8006428:	d403      	bmi.n	8006432 <__lo0bits+0x4e>
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	f100 0001 	add.w	r0, r0, #1
 8006430:	d003      	beq.n	800643a <__lo0bits+0x56>
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	4770      	bx	lr
 8006436:	2000      	movs	r0, #0
 8006438:	4770      	bx	lr
 800643a:	2020      	movs	r0, #32
 800643c:	4770      	bx	lr
	...

08006440 <__i2b>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	2101      	movs	r1, #1
 8006446:	f7ff ff05 	bl	8006254 <_Balloc>
 800644a:	4602      	mov	r2, r0
 800644c:	b928      	cbnz	r0, 800645a <__i2b+0x1a>
 800644e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006452:	4b04      	ldr	r3, [pc, #16]	; (8006464 <__i2b+0x24>)
 8006454:	4804      	ldr	r0, [pc, #16]	; (8006468 <__i2b+0x28>)
 8006456:	f000 fd2d 	bl	8006eb4 <__assert_func>
 800645a:	2301      	movs	r3, #1
 800645c:	6144      	str	r4, [r0, #20]
 800645e:	6103      	str	r3, [r0, #16]
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop
 8006464:	08008857 	.word	0x08008857
 8006468:	080088c8 	.word	0x080088c8

0800646c <__multiply>:
 800646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	4691      	mov	r9, r2
 8006472:	690a      	ldr	r2, [r1, #16]
 8006474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006478:	460c      	mov	r4, r1
 800647a:	429a      	cmp	r2, r3
 800647c:	bfbe      	ittt	lt
 800647e:	460b      	movlt	r3, r1
 8006480:	464c      	movlt	r4, r9
 8006482:	4699      	movlt	r9, r3
 8006484:	6927      	ldr	r7, [r4, #16]
 8006486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	6861      	ldr	r1, [r4, #4]
 800648e:	eb07 060a 	add.w	r6, r7, sl
 8006492:	42b3      	cmp	r3, r6
 8006494:	b085      	sub	sp, #20
 8006496:	bfb8      	it	lt
 8006498:	3101      	addlt	r1, #1
 800649a:	f7ff fedb 	bl	8006254 <_Balloc>
 800649e:	b930      	cbnz	r0, 80064ae <__multiply+0x42>
 80064a0:	4602      	mov	r2, r0
 80064a2:	f240 115d 	movw	r1, #349	; 0x15d
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <__multiply+0x148>)
 80064a8:	4843      	ldr	r0, [pc, #268]	; (80065b8 <__multiply+0x14c>)
 80064aa:	f000 fd03 	bl	8006eb4 <__assert_func>
 80064ae:	f100 0514 	add.w	r5, r0, #20
 80064b2:	462b      	mov	r3, r5
 80064b4:	2200      	movs	r2, #0
 80064b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064ba:	4543      	cmp	r3, r8
 80064bc:	d321      	bcc.n	8006502 <__multiply+0x96>
 80064be:	f104 0314 	add.w	r3, r4, #20
 80064c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064c6:	f109 0314 	add.w	r3, r9, #20
 80064ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064ce:	9202      	str	r2, [sp, #8]
 80064d0:	1b3a      	subs	r2, r7, r4
 80064d2:	3a15      	subs	r2, #21
 80064d4:	f022 0203 	bic.w	r2, r2, #3
 80064d8:	3204      	adds	r2, #4
 80064da:	f104 0115 	add.w	r1, r4, #21
 80064de:	428f      	cmp	r7, r1
 80064e0:	bf38      	it	cc
 80064e2:	2204      	movcc	r2, #4
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	9a02      	ldr	r2, [sp, #8]
 80064e8:	9303      	str	r3, [sp, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d80c      	bhi.n	8006508 <__multiply+0x9c>
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	dd03      	ble.n	80064fa <__multiply+0x8e>
 80064f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d059      	beq.n	80065ae <__multiply+0x142>
 80064fa:	6106      	str	r6, [r0, #16]
 80064fc:	b005      	add	sp, #20
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	f843 2b04 	str.w	r2, [r3], #4
 8006506:	e7d8      	b.n	80064ba <__multiply+0x4e>
 8006508:	f8b3 a000 	ldrh.w	sl, [r3]
 800650c:	f1ba 0f00 	cmp.w	sl, #0
 8006510:	d023      	beq.n	800655a <__multiply+0xee>
 8006512:	46a9      	mov	r9, r5
 8006514:	f04f 0c00 	mov.w	ip, #0
 8006518:	f104 0e14 	add.w	lr, r4, #20
 800651c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006520:	f8d9 1000 	ldr.w	r1, [r9]
 8006524:	fa1f fb82 	uxth.w	fp, r2
 8006528:	b289      	uxth	r1, r1
 800652a:	fb0a 110b 	mla	r1, sl, fp, r1
 800652e:	4461      	add	r1, ip
 8006530:	f8d9 c000 	ldr.w	ip, [r9]
 8006534:	0c12      	lsrs	r2, r2, #16
 8006536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800653a:	fb0a c202 	mla	r2, sl, r2, ip
 800653e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006542:	b289      	uxth	r1, r1
 8006544:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006548:	4577      	cmp	r7, lr
 800654a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800654e:	f849 1b04 	str.w	r1, [r9], #4
 8006552:	d8e3      	bhi.n	800651c <__multiply+0xb0>
 8006554:	9a01      	ldr	r2, [sp, #4]
 8006556:	f845 c002 	str.w	ip, [r5, r2]
 800655a:	9a03      	ldr	r2, [sp, #12]
 800655c:	3304      	adds	r3, #4
 800655e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006562:	f1b9 0f00 	cmp.w	r9, #0
 8006566:	d020      	beq.n	80065aa <__multiply+0x13e>
 8006568:	46ae      	mov	lr, r5
 800656a:	f04f 0a00 	mov.w	sl, #0
 800656e:	6829      	ldr	r1, [r5, #0]
 8006570:	f104 0c14 	add.w	ip, r4, #20
 8006574:	f8bc b000 	ldrh.w	fp, [ip]
 8006578:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800657c:	b289      	uxth	r1, r1
 800657e:	fb09 220b 	mla	r2, r9, fp, r2
 8006582:	4492      	add	sl, r2
 8006584:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006588:	f84e 1b04 	str.w	r1, [lr], #4
 800658c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006590:	f8be 1000 	ldrh.w	r1, [lr]
 8006594:	0c12      	lsrs	r2, r2, #16
 8006596:	fb09 1102 	mla	r1, r9, r2, r1
 800659a:	4567      	cmp	r7, ip
 800659c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065a4:	d8e6      	bhi.n	8006574 <__multiply+0x108>
 80065a6:	9a01      	ldr	r2, [sp, #4]
 80065a8:	50a9      	str	r1, [r5, r2]
 80065aa:	3504      	adds	r5, #4
 80065ac:	e79b      	b.n	80064e6 <__multiply+0x7a>
 80065ae:	3e01      	subs	r6, #1
 80065b0:	e79d      	b.n	80064ee <__multiply+0x82>
 80065b2:	bf00      	nop
 80065b4:	08008857 	.word	0x08008857
 80065b8:	080088c8 	.word	0x080088c8

080065bc <__pow5mult>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4615      	mov	r5, r2
 80065c2:	f012 0203 	ands.w	r2, r2, #3
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	d007      	beq.n	80065dc <__pow5mult+0x20>
 80065cc:	4c25      	ldr	r4, [pc, #148]	; (8006664 <__pow5mult+0xa8>)
 80065ce:	3a01      	subs	r2, #1
 80065d0:	2300      	movs	r3, #0
 80065d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065d6:	f7ff fe9f 	bl	8006318 <__multadd>
 80065da:	4607      	mov	r7, r0
 80065dc:	10ad      	asrs	r5, r5, #2
 80065de:	d03d      	beq.n	800665c <__pow5mult+0xa0>
 80065e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065e2:	b97c      	cbnz	r4, 8006604 <__pow5mult+0x48>
 80065e4:	2010      	movs	r0, #16
 80065e6:	f7ff fe11 	bl	800620c <malloc>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6270      	str	r0, [r6, #36]	; 0x24
 80065ee:	b928      	cbnz	r0, 80065fc <__pow5mult+0x40>
 80065f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065f4:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <__pow5mult+0xac>)
 80065f6:	481d      	ldr	r0, [pc, #116]	; (800666c <__pow5mult+0xb0>)
 80065f8:	f000 fc5c 	bl	8006eb4 <__assert_func>
 80065fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006600:	6004      	str	r4, [r0, #0]
 8006602:	60c4      	str	r4, [r0, #12]
 8006604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800660c:	b94c      	cbnz	r4, 8006622 <__pow5mult+0x66>
 800660e:	f240 2171 	movw	r1, #625	; 0x271
 8006612:	4630      	mov	r0, r6
 8006614:	f7ff ff14 	bl	8006440 <__i2b>
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006620:	6003      	str	r3, [r0, #0]
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	07eb      	lsls	r3, r5, #31
 8006628:	d50a      	bpl.n	8006640 <__pow5mult+0x84>
 800662a:	4639      	mov	r1, r7
 800662c:	4622      	mov	r2, r4
 800662e:	4630      	mov	r0, r6
 8006630:	f7ff ff1c 	bl	800646c <__multiply>
 8006634:	4680      	mov	r8, r0
 8006636:	4639      	mov	r1, r7
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff fe4b 	bl	80062d4 <_Bfree>
 800663e:	4647      	mov	r7, r8
 8006640:	106d      	asrs	r5, r5, #1
 8006642:	d00b      	beq.n	800665c <__pow5mult+0xa0>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	b938      	cbnz	r0, 8006658 <__pow5mult+0x9c>
 8006648:	4622      	mov	r2, r4
 800664a:	4621      	mov	r1, r4
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff ff0d 	bl	800646c <__multiply>
 8006652:	6020      	str	r0, [r4, #0]
 8006654:	f8c0 9000 	str.w	r9, [r0]
 8006658:	4604      	mov	r4, r0
 800665a:	e7e4      	b.n	8006626 <__pow5mult+0x6a>
 800665c:	4638      	mov	r0, r7
 800665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006662:	bf00      	nop
 8006664:	08008a18 	.word	0x08008a18
 8006668:	080087e5 	.word	0x080087e5
 800666c:	080088c8 	.word	0x080088c8

08006670 <__lshift>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	4607      	mov	r7, r0
 8006678:	4691      	mov	r9, r2
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6849      	ldr	r1, [r1, #4]
 800667e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006688:	f108 0601 	add.w	r6, r8, #1
 800668c:	42b3      	cmp	r3, r6
 800668e:	db0b      	blt.n	80066a8 <__lshift+0x38>
 8006690:	4638      	mov	r0, r7
 8006692:	f7ff fddf 	bl	8006254 <_Balloc>
 8006696:	4605      	mov	r5, r0
 8006698:	b948      	cbnz	r0, 80066ae <__lshift+0x3e>
 800669a:	4602      	mov	r2, r0
 800669c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066a0:	4b29      	ldr	r3, [pc, #164]	; (8006748 <__lshift+0xd8>)
 80066a2:	482a      	ldr	r0, [pc, #168]	; (800674c <__lshift+0xdc>)
 80066a4:	f000 fc06 	bl	8006eb4 <__assert_func>
 80066a8:	3101      	adds	r1, #1
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	e7ee      	b.n	800668c <__lshift+0x1c>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f100 0114 	add.w	r1, r0, #20
 80066b4:	f100 0210 	add.w	r2, r0, #16
 80066b8:	4618      	mov	r0, r3
 80066ba:	4553      	cmp	r3, sl
 80066bc:	db37      	blt.n	800672e <__lshift+0xbe>
 80066be:	6920      	ldr	r0, [r4, #16]
 80066c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066c4:	f104 0314 	add.w	r3, r4, #20
 80066c8:	f019 091f 	ands.w	r9, r9, #31
 80066cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066d4:	d02f      	beq.n	8006736 <__lshift+0xc6>
 80066d6:	468a      	mov	sl, r1
 80066d8:	f04f 0c00 	mov.w	ip, #0
 80066dc:	f1c9 0e20 	rsb	lr, r9, #32
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	fa02 f209 	lsl.w	r2, r2, r9
 80066e6:	ea42 020c 	orr.w	r2, r2, ip
 80066ea:	f84a 2b04 	str.w	r2, [sl], #4
 80066ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f2:	4298      	cmp	r0, r3
 80066f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066f8:	d8f2      	bhi.n	80066e0 <__lshift+0x70>
 80066fa:	1b03      	subs	r3, r0, r4
 80066fc:	3b15      	subs	r3, #21
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	3304      	adds	r3, #4
 8006704:	f104 0215 	add.w	r2, r4, #21
 8006708:	4290      	cmp	r0, r2
 800670a:	bf38      	it	cc
 800670c:	2304      	movcc	r3, #4
 800670e:	f841 c003 	str.w	ip, [r1, r3]
 8006712:	f1bc 0f00 	cmp.w	ip, #0
 8006716:	d001      	beq.n	800671c <__lshift+0xac>
 8006718:	f108 0602 	add.w	r6, r8, #2
 800671c:	3e01      	subs	r6, #1
 800671e:	4638      	mov	r0, r7
 8006720:	4621      	mov	r1, r4
 8006722:	612e      	str	r6, [r5, #16]
 8006724:	f7ff fdd6 	bl	80062d4 <_Bfree>
 8006728:	4628      	mov	r0, r5
 800672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006732:	3301      	adds	r3, #1
 8006734:	e7c1      	b.n	80066ba <__lshift+0x4a>
 8006736:	3904      	subs	r1, #4
 8006738:	f853 2b04 	ldr.w	r2, [r3], #4
 800673c:	4298      	cmp	r0, r3
 800673e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006742:	d8f9      	bhi.n	8006738 <__lshift+0xc8>
 8006744:	e7ea      	b.n	800671c <__lshift+0xac>
 8006746:	bf00      	nop
 8006748:	08008857 	.word	0x08008857
 800674c:	080088c8 	.word	0x080088c8

08006750 <__mcmp>:
 8006750:	4603      	mov	r3, r0
 8006752:	690a      	ldr	r2, [r1, #16]
 8006754:	6900      	ldr	r0, [r0, #16]
 8006756:	b530      	push	{r4, r5, lr}
 8006758:	1a80      	subs	r0, r0, r2
 800675a:	d10d      	bne.n	8006778 <__mcmp+0x28>
 800675c:	3314      	adds	r3, #20
 800675e:	3114      	adds	r1, #20
 8006760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800676c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006770:	4295      	cmp	r5, r2
 8006772:	d002      	beq.n	800677a <__mcmp+0x2a>
 8006774:	d304      	bcc.n	8006780 <__mcmp+0x30>
 8006776:	2001      	movs	r0, #1
 8006778:	bd30      	pop	{r4, r5, pc}
 800677a:	42a3      	cmp	r3, r4
 800677c:	d3f4      	bcc.n	8006768 <__mcmp+0x18>
 800677e:	e7fb      	b.n	8006778 <__mcmp+0x28>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006784:	e7f8      	b.n	8006778 <__mcmp+0x28>
	...

08006788 <__mdiff>:
 8006788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	460d      	mov	r5, r1
 800678e:	4607      	mov	r7, r0
 8006790:	4611      	mov	r1, r2
 8006792:	4628      	mov	r0, r5
 8006794:	4614      	mov	r4, r2
 8006796:	f7ff ffdb 	bl	8006750 <__mcmp>
 800679a:	1e06      	subs	r6, r0, #0
 800679c:	d111      	bne.n	80067c2 <__mdiff+0x3a>
 800679e:	4631      	mov	r1, r6
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff fd57 	bl	8006254 <_Balloc>
 80067a6:	4602      	mov	r2, r0
 80067a8:	b928      	cbnz	r0, 80067b6 <__mdiff+0x2e>
 80067aa:	f240 2132 	movw	r1, #562	; 0x232
 80067ae:	4b3a      	ldr	r3, [pc, #232]	; (8006898 <__mdiff+0x110>)
 80067b0:	483a      	ldr	r0, [pc, #232]	; (800689c <__mdiff+0x114>)
 80067b2:	f000 fb7f 	bl	8006eb4 <__assert_func>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067bc:	4610      	mov	r0, r2
 80067be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c2:	bfa4      	itt	ge
 80067c4:	4623      	movge	r3, r4
 80067c6:	462c      	movge	r4, r5
 80067c8:	4638      	mov	r0, r7
 80067ca:	6861      	ldr	r1, [r4, #4]
 80067cc:	bfa6      	itte	ge
 80067ce:	461d      	movge	r5, r3
 80067d0:	2600      	movge	r6, #0
 80067d2:	2601      	movlt	r6, #1
 80067d4:	f7ff fd3e 	bl	8006254 <_Balloc>
 80067d8:	4602      	mov	r2, r0
 80067da:	b918      	cbnz	r0, 80067e4 <__mdiff+0x5c>
 80067dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <__mdiff+0x110>)
 80067e2:	e7e5      	b.n	80067b0 <__mdiff+0x28>
 80067e4:	f102 0814 	add.w	r8, r2, #20
 80067e8:	46c2      	mov	sl, r8
 80067ea:	f04f 0c00 	mov.w	ip, #0
 80067ee:	6927      	ldr	r7, [r4, #16]
 80067f0:	60c6      	str	r6, [r0, #12]
 80067f2:	692e      	ldr	r6, [r5, #16]
 80067f4:	f104 0014 	add.w	r0, r4, #20
 80067f8:	f105 0914 	add.w	r9, r5, #20
 80067fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006800:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006804:	3410      	adds	r4, #16
 8006806:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800680a:	f859 3b04 	ldr.w	r3, [r9], #4
 800680e:	fa1f f18b 	uxth.w	r1, fp
 8006812:	448c      	add	ip, r1
 8006814:	b299      	uxth	r1, r3
 8006816:	0c1b      	lsrs	r3, r3, #16
 8006818:	ebac 0101 	sub.w	r1, ip, r1
 800681c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006820:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006824:	b289      	uxth	r1, r1
 8006826:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800682a:	454e      	cmp	r6, r9
 800682c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006830:	f84a 3b04 	str.w	r3, [sl], #4
 8006834:	d8e7      	bhi.n	8006806 <__mdiff+0x7e>
 8006836:	1b73      	subs	r3, r6, r5
 8006838:	3b15      	subs	r3, #21
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	3515      	adds	r5, #21
 8006840:	3304      	adds	r3, #4
 8006842:	42ae      	cmp	r6, r5
 8006844:	bf38      	it	cc
 8006846:	2304      	movcc	r3, #4
 8006848:	4418      	add	r0, r3
 800684a:	4443      	add	r3, r8
 800684c:	461e      	mov	r6, r3
 800684e:	4605      	mov	r5, r0
 8006850:	4575      	cmp	r5, lr
 8006852:	d30e      	bcc.n	8006872 <__mdiff+0xea>
 8006854:	f10e 0103 	add.w	r1, lr, #3
 8006858:	1a09      	subs	r1, r1, r0
 800685a:	f021 0103 	bic.w	r1, r1, #3
 800685e:	3803      	subs	r0, #3
 8006860:	4586      	cmp	lr, r0
 8006862:	bf38      	it	cc
 8006864:	2100      	movcc	r1, #0
 8006866:	4419      	add	r1, r3
 8006868:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800686c:	b18b      	cbz	r3, 8006892 <__mdiff+0x10a>
 800686e:	6117      	str	r7, [r2, #16]
 8006870:	e7a4      	b.n	80067bc <__mdiff+0x34>
 8006872:	f855 8b04 	ldr.w	r8, [r5], #4
 8006876:	fa1f f188 	uxth.w	r1, r8
 800687a:	4461      	add	r1, ip
 800687c:	140c      	asrs	r4, r1, #16
 800687e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006882:	b289      	uxth	r1, r1
 8006884:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006888:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800688c:	f846 1b04 	str.w	r1, [r6], #4
 8006890:	e7de      	b.n	8006850 <__mdiff+0xc8>
 8006892:	3f01      	subs	r7, #1
 8006894:	e7e8      	b.n	8006868 <__mdiff+0xe0>
 8006896:	bf00      	nop
 8006898:	08008857 	.word	0x08008857
 800689c:	080088c8 	.word	0x080088c8

080068a0 <__d2b>:
 80068a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068a4:	2101      	movs	r1, #1
 80068a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80068aa:	4690      	mov	r8, r2
 80068ac:	461d      	mov	r5, r3
 80068ae:	f7ff fcd1 	bl	8006254 <_Balloc>
 80068b2:	4604      	mov	r4, r0
 80068b4:	b930      	cbnz	r0, 80068c4 <__d2b+0x24>
 80068b6:	4602      	mov	r2, r0
 80068b8:	f240 310a 	movw	r1, #778	; 0x30a
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <__d2b+0xb0>)
 80068be:	4825      	ldr	r0, [pc, #148]	; (8006954 <__d2b+0xb4>)
 80068c0:	f000 faf8 	bl	8006eb4 <__assert_func>
 80068c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80068c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80068cc:	bb2d      	cbnz	r5, 800691a <__d2b+0x7a>
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	f1b8 0300 	subs.w	r3, r8, #0
 80068d4:	d026      	beq.n	8006924 <__d2b+0x84>
 80068d6:	4668      	mov	r0, sp
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	f7ff fd83 	bl	80063e4 <__lo0bits>
 80068de:	9900      	ldr	r1, [sp, #0]
 80068e0:	b1f0      	cbz	r0, 8006920 <__d2b+0x80>
 80068e2:	9a01      	ldr	r2, [sp, #4]
 80068e4:	f1c0 0320 	rsb	r3, r0, #32
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	430b      	orrs	r3, r1
 80068ee:	40c2      	lsrs	r2, r0
 80068f0:	6163      	str	r3, [r4, #20]
 80068f2:	9201      	str	r2, [sp, #4]
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2102      	movne	r1, #2
 80068fc:	2101      	moveq	r1, #1
 80068fe:	61a3      	str	r3, [r4, #24]
 8006900:	6121      	str	r1, [r4, #16]
 8006902:	b1c5      	cbz	r5, 8006936 <__d2b+0x96>
 8006904:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006908:	4405      	add	r5, r0
 800690a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800690e:	603d      	str	r5, [r7, #0]
 8006910:	6030      	str	r0, [r6, #0]
 8006912:	4620      	mov	r0, r4
 8006914:	b002      	add	sp, #8
 8006916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800691e:	e7d6      	b.n	80068ce <__d2b+0x2e>
 8006920:	6161      	str	r1, [r4, #20]
 8006922:	e7e7      	b.n	80068f4 <__d2b+0x54>
 8006924:	a801      	add	r0, sp, #4
 8006926:	f7ff fd5d 	bl	80063e4 <__lo0bits>
 800692a:	2101      	movs	r1, #1
 800692c:	9b01      	ldr	r3, [sp, #4]
 800692e:	6121      	str	r1, [r4, #16]
 8006930:	6163      	str	r3, [r4, #20]
 8006932:	3020      	adds	r0, #32
 8006934:	e7e5      	b.n	8006902 <__d2b+0x62>
 8006936:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800693a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800693e:	6038      	str	r0, [r7, #0]
 8006940:	6918      	ldr	r0, [r3, #16]
 8006942:	f7ff fd2f 	bl	80063a4 <__hi0bits>
 8006946:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800694a:	6031      	str	r1, [r6, #0]
 800694c:	e7e1      	b.n	8006912 <__d2b+0x72>
 800694e:	bf00      	nop
 8006950:	08008857 	.word	0x08008857
 8006954:	080088c8 	.word	0x080088c8

08006958 <_calloc_r>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	fba1 5402 	umull	r5, r4, r1, r2
 800695e:	b934      	cbnz	r4, 800696e <_calloc_r+0x16>
 8006960:	4629      	mov	r1, r5
 8006962:	f000 f875 	bl	8006a50 <_malloc_r>
 8006966:	4606      	mov	r6, r0
 8006968:	b928      	cbnz	r0, 8006976 <_calloc_r+0x1e>
 800696a:	4630      	mov	r0, r6
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	220c      	movs	r2, #12
 8006970:	2600      	movs	r6, #0
 8006972:	6002      	str	r2, [r0, #0]
 8006974:	e7f9      	b.n	800696a <_calloc_r+0x12>
 8006976:	462a      	mov	r2, r5
 8006978:	4621      	mov	r1, r4
 800697a:	f7fd fdf7 	bl	800456c <memset>
 800697e:	e7f4      	b.n	800696a <_calloc_r+0x12>

08006980 <_free_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4605      	mov	r5, r0
 8006984:	2900      	cmp	r1, #0
 8006986:	d040      	beq.n	8006a0a <_free_r+0x8a>
 8006988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698c:	1f0c      	subs	r4, r1, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	bfb8      	it	lt
 8006992:	18e4      	addlt	r4, r4, r3
 8006994:	f000 fb14 	bl	8006fc0 <__malloc_lock>
 8006998:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <_free_r+0x8c>)
 800699a:	6813      	ldr	r3, [r2, #0]
 800699c:	b933      	cbnz	r3, 80069ac <_free_r+0x2c>
 800699e:	6063      	str	r3, [r4, #4]
 80069a0:	6014      	str	r4, [r2, #0]
 80069a2:	4628      	mov	r0, r5
 80069a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a8:	f000 bb10 	b.w	8006fcc <__malloc_unlock>
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	d908      	bls.n	80069c2 <_free_r+0x42>
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	1821      	adds	r1, r4, r0
 80069b4:	428b      	cmp	r3, r1
 80069b6:	bf01      	itttt	eq
 80069b8:	6819      	ldreq	r1, [r3, #0]
 80069ba:	685b      	ldreq	r3, [r3, #4]
 80069bc:	1809      	addeq	r1, r1, r0
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	e7ed      	b.n	800699e <_free_r+0x1e>
 80069c2:	461a      	mov	r2, r3
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b10b      	cbz	r3, 80069cc <_free_r+0x4c>
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	d9fa      	bls.n	80069c2 <_free_r+0x42>
 80069cc:	6811      	ldr	r1, [r2, #0]
 80069ce:	1850      	adds	r0, r2, r1
 80069d0:	42a0      	cmp	r0, r4
 80069d2:	d10b      	bne.n	80069ec <_free_r+0x6c>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	4401      	add	r1, r0
 80069d8:	1850      	adds	r0, r2, r1
 80069da:	4283      	cmp	r3, r0
 80069dc:	6011      	str	r1, [r2, #0]
 80069de:	d1e0      	bne.n	80069a2 <_free_r+0x22>
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4401      	add	r1, r0
 80069e6:	6011      	str	r1, [r2, #0]
 80069e8:	6053      	str	r3, [r2, #4]
 80069ea:	e7da      	b.n	80069a2 <_free_r+0x22>
 80069ec:	d902      	bls.n	80069f4 <_free_r+0x74>
 80069ee:	230c      	movs	r3, #12
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	e7d6      	b.n	80069a2 <_free_r+0x22>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	1821      	adds	r1, r4, r0
 80069f8:	428b      	cmp	r3, r1
 80069fa:	bf01      	itttt	eq
 80069fc:	6819      	ldreq	r1, [r3, #0]
 80069fe:	685b      	ldreq	r3, [r3, #4]
 8006a00:	1809      	addeq	r1, r1, r0
 8006a02:	6021      	streq	r1, [r4, #0]
 8006a04:	6063      	str	r3, [r4, #4]
 8006a06:	6054      	str	r4, [r2, #4]
 8006a08:	e7cb      	b.n	80069a2 <_free_r+0x22>
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20000324 	.word	0x20000324

08006a10 <sbrk_aligned>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4e0e      	ldr	r6, [pc, #56]	; (8006a4c <sbrk_aligned+0x3c>)
 8006a14:	460c      	mov	r4, r1
 8006a16:	6831      	ldr	r1, [r6, #0]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	b911      	cbnz	r1, 8006a22 <sbrk_aligned+0x12>
 8006a1c:	f000 f9e4 	bl	8006de8 <_sbrk_r>
 8006a20:	6030      	str	r0, [r6, #0]
 8006a22:	4621      	mov	r1, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f9df 	bl	8006de8 <_sbrk_r>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	d00a      	beq.n	8006a44 <sbrk_aligned+0x34>
 8006a2e:	1cc4      	adds	r4, r0, #3
 8006a30:	f024 0403 	bic.w	r4, r4, #3
 8006a34:	42a0      	cmp	r0, r4
 8006a36:	d007      	beq.n	8006a48 <sbrk_aligned+0x38>
 8006a38:	1a21      	subs	r1, r4, r0
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f9d4 	bl	8006de8 <_sbrk_r>
 8006a40:	3001      	adds	r0, #1
 8006a42:	d101      	bne.n	8006a48 <sbrk_aligned+0x38>
 8006a44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a48:	4620      	mov	r0, r4
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	20000328 	.word	0x20000328

08006a50 <_malloc_r>:
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	1ccd      	adds	r5, r1, #3
 8006a56:	f025 0503 	bic.w	r5, r5, #3
 8006a5a:	3508      	adds	r5, #8
 8006a5c:	2d0c      	cmp	r5, #12
 8006a5e:	bf38      	it	cc
 8006a60:	250c      	movcc	r5, #12
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	4607      	mov	r7, r0
 8006a66:	db01      	blt.n	8006a6c <_malloc_r+0x1c>
 8006a68:	42a9      	cmp	r1, r5
 8006a6a:	d905      	bls.n	8006a78 <_malloc_r+0x28>
 8006a6c:	230c      	movs	r3, #12
 8006a6e:	2600      	movs	r6, #0
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4630      	mov	r0, r6
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a78:	4e2e      	ldr	r6, [pc, #184]	; (8006b34 <_malloc_r+0xe4>)
 8006a7a:	f000 faa1 	bl	8006fc0 <__malloc_lock>
 8006a7e:	6833      	ldr	r3, [r6, #0]
 8006a80:	461c      	mov	r4, r3
 8006a82:	bb34      	cbnz	r4, 8006ad2 <_malloc_r+0x82>
 8006a84:	4629      	mov	r1, r5
 8006a86:	4638      	mov	r0, r7
 8006a88:	f7ff ffc2 	bl	8006a10 <sbrk_aligned>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	4604      	mov	r4, r0
 8006a90:	d14d      	bne.n	8006b2e <_malloc_r+0xde>
 8006a92:	6834      	ldr	r4, [r6, #0]
 8006a94:	4626      	mov	r6, r4
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	d140      	bne.n	8006b1c <_malloc_r+0xcc>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	eb04 0803 	add.w	r8, r4, r3
 8006aa4:	f000 f9a0 	bl	8006de8 <_sbrk_r>
 8006aa8:	4580      	cmp	r8, r0
 8006aaa:	d13a      	bne.n	8006b22 <_malloc_r+0xd2>
 8006aac:	6821      	ldr	r1, [r4, #0]
 8006aae:	3503      	adds	r5, #3
 8006ab0:	1a6d      	subs	r5, r5, r1
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	4638      	mov	r0, r7
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7ff ffa5 	bl	8006a10 <sbrk_aligned>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d02b      	beq.n	8006b22 <_malloc_r+0xd2>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	442b      	add	r3, r5
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	e00e      	b.n	8006af0 <_malloc_r+0xa0>
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	1b52      	subs	r2, r2, r5
 8006ad6:	d41e      	bmi.n	8006b16 <_malloc_r+0xc6>
 8006ad8:	2a0b      	cmp	r2, #11
 8006ada:	d916      	bls.n	8006b0a <_malloc_r+0xba>
 8006adc:	1961      	adds	r1, r4, r5
 8006ade:	42a3      	cmp	r3, r4
 8006ae0:	6025      	str	r5, [r4, #0]
 8006ae2:	bf18      	it	ne
 8006ae4:	6059      	strne	r1, [r3, #4]
 8006ae6:	6863      	ldr	r3, [r4, #4]
 8006ae8:	bf08      	it	eq
 8006aea:	6031      	streq	r1, [r6, #0]
 8006aec:	5162      	str	r2, [r4, r5]
 8006aee:	604b      	str	r3, [r1, #4]
 8006af0:	4638      	mov	r0, r7
 8006af2:	f104 060b 	add.w	r6, r4, #11
 8006af6:	f000 fa69 	bl	8006fcc <__malloc_unlock>
 8006afa:	f026 0607 	bic.w	r6, r6, #7
 8006afe:	1d23      	adds	r3, r4, #4
 8006b00:	1af2      	subs	r2, r6, r3
 8006b02:	d0b6      	beq.n	8006a72 <_malloc_r+0x22>
 8006b04:	1b9b      	subs	r3, r3, r6
 8006b06:	50a3      	str	r3, [r4, r2]
 8006b08:	e7b3      	b.n	8006a72 <_malloc_r+0x22>
 8006b0a:	6862      	ldr	r2, [r4, #4]
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	bf0c      	ite	eq
 8006b10:	6032      	streq	r2, [r6, #0]
 8006b12:	605a      	strne	r2, [r3, #4]
 8006b14:	e7ec      	b.n	8006af0 <_malloc_r+0xa0>
 8006b16:	4623      	mov	r3, r4
 8006b18:	6864      	ldr	r4, [r4, #4]
 8006b1a:	e7b2      	b.n	8006a82 <_malloc_r+0x32>
 8006b1c:	4634      	mov	r4, r6
 8006b1e:	6876      	ldr	r6, [r6, #4]
 8006b20:	e7b9      	b.n	8006a96 <_malloc_r+0x46>
 8006b22:	230c      	movs	r3, #12
 8006b24:	4638      	mov	r0, r7
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	f000 fa50 	bl	8006fcc <__malloc_unlock>
 8006b2c:	e7a1      	b.n	8006a72 <_malloc_r+0x22>
 8006b2e:	6025      	str	r5, [r4, #0]
 8006b30:	e7de      	b.n	8006af0 <_malloc_r+0xa0>
 8006b32:	bf00      	nop
 8006b34:	20000324 	.word	0x20000324

08006b38 <__sfputc_r>:
 8006b38:	6893      	ldr	r3, [r2, #8]
 8006b3a:	b410      	push	{r4}
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	6093      	str	r3, [r2, #8]
 8006b42:	da07      	bge.n	8006b54 <__sfputc_r+0x1c>
 8006b44:	6994      	ldr	r4, [r2, #24]
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	db01      	blt.n	8006b4e <__sfputc_r+0x16>
 8006b4a:	290a      	cmp	r1, #10
 8006b4c:	d102      	bne.n	8006b54 <__sfputc_r+0x1c>
 8006b4e:	bc10      	pop	{r4}
 8006b50:	f7fe ba02 	b.w	8004f58 <__swbuf_r>
 8006b54:	6813      	ldr	r3, [r2, #0]
 8006b56:	1c58      	adds	r0, r3, #1
 8006b58:	6010      	str	r0, [r2, #0]
 8006b5a:	7019      	strb	r1, [r3, #0]
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	bc10      	pop	{r4}
 8006b60:	4770      	bx	lr

08006b62 <__sfputs_r>:
 8006b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	4614      	mov	r4, r2
 8006b6a:	18d5      	adds	r5, r2, r3
 8006b6c:	42ac      	cmp	r4, r5
 8006b6e:	d101      	bne.n	8006b74 <__sfputs_r+0x12>
 8006b70:	2000      	movs	r0, #0
 8006b72:	e007      	b.n	8006b84 <__sfputs_r+0x22>
 8006b74:	463a      	mov	r2, r7
 8006b76:	4630      	mov	r0, r6
 8006b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7c:	f7ff ffdc 	bl	8006b38 <__sfputc_r>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d1f3      	bne.n	8006b6c <__sfputs_r+0xa>
 8006b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b88 <_vfiprintf_r>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	4614      	mov	r4, r2
 8006b90:	4698      	mov	r8, r3
 8006b92:	4606      	mov	r6, r0
 8006b94:	b09d      	sub	sp, #116	; 0x74
 8006b96:	b118      	cbz	r0, 8006ba0 <_vfiprintf_r+0x18>
 8006b98:	6983      	ldr	r3, [r0, #24]
 8006b9a:	b90b      	cbnz	r3, 8006ba0 <_vfiprintf_r+0x18>
 8006b9c:	f7ff fa2c 	bl	8005ff8 <__sinit>
 8006ba0:	4b89      	ldr	r3, [pc, #548]	; (8006dc8 <_vfiprintf_r+0x240>)
 8006ba2:	429d      	cmp	r5, r3
 8006ba4:	d11b      	bne.n	8006bde <_vfiprintf_r+0x56>
 8006ba6:	6875      	ldr	r5, [r6, #4]
 8006ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006baa:	07d9      	lsls	r1, r3, #31
 8006bac:	d405      	bmi.n	8006bba <_vfiprintf_r+0x32>
 8006bae:	89ab      	ldrh	r3, [r5, #12]
 8006bb0:	059a      	lsls	r2, r3, #22
 8006bb2:	d402      	bmi.n	8006bba <_vfiprintf_r+0x32>
 8006bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bb6:	f7ff fac2 	bl	800613e <__retarget_lock_acquire_recursive>
 8006bba:	89ab      	ldrh	r3, [r5, #12]
 8006bbc:	071b      	lsls	r3, r3, #28
 8006bbe:	d501      	bpl.n	8006bc4 <_vfiprintf_r+0x3c>
 8006bc0:	692b      	ldr	r3, [r5, #16]
 8006bc2:	b9eb      	cbnz	r3, 8006c00 <_vfiprintf_r+0x78>
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7fe fa18 	bl	8004ffc <__swsetup_r>
 8006bcc:	b1c0      	cbz	r0, 8006c00 <_vfiprintf_r+0x78>
 8006bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd0:	07dc      	lsls	r4, r3, #31
 8006bd2:	d50e      	bpl.n	8006bf2 <_vfiprintf_r+0x6a>
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd8:	b01d      	add	sp, #116	; 0x74
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	4b7b      	ldr	r3, [pc, #492]	; (8006dcc <_vfiprintf_r+0x244>)
 8006be0:	429d      	cmp	r5, r3
 8006be2:	d101      	bne.n	8006be8 <_vfiprintf_r+0x60>
 8006be4:	68b5      	ldr	r5, [r6, #8]
 8006be6:	e7df      	b.n	8006ba8 <_vfiprintf_r+0x20>
 8006be8:	4b79      	ldr	r3, [pc, #484]	; (8006dd0 <_vfiprintf_r+0x248>)
 8006bea:	429d      	cmp	r5, r3
 8006bec:	bf08      	it	eq
 8006bee:	68f5      	ldreq	r5, [r6, #12]
 8006bf0:	e7da      	b.n	8006ba8 <_vfiprintf_r+0x20>
 8006bf2:	89ab      	ldrh	r3, [r5, #12]
 8006bf4:	0598      	lsls	r0, r3, #22
 8006bf6:	d4ed      	bmi.n	8006bd4 <_vfiprintf_r+0x4c>
 8006bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfa:	f7ff faa1 	bl	8006140 <__retarget_lock_release_recursive>
 8006bfe:	e7e9      	b.n	8006bd4 <_vfiprintf_r+0x4c>
 8006c00:	2300      	movs	r3, #0
 8006c02:	9309      	str	r3, [sp, #36]	; 0x24
 8006c04:	2320      	movs	r3, #32
 8006c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0a:	2330      	movs	r3, #48	; 0x30
 8006c0c:	f04f 0901 	mov.w	r9, #1
 8006c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006dd4 <_vfiprintf_r+0x24c>
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	469a      	mov	sl, r3
 8006c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c24:	b10a      	cbz	r2, 8006c2a <_vfiprintf_r+0xa2>
 8006c26:	2a25      	cmp	r2, #37	; 0x25
 8006c28:	d1f9      	bne.n	8006c1e <_vfiprintf_r+0x96>
 8006c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c2e:	d00b      	beq.n	8006c48 <_vfiprintf_r+0xc0>
 8006c30:	465b      	mov	r3, fp
 8006c32:	4622      	mov	r2, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff ff93 	bl	8006b62 <__sfputs_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f000 80aa 	beq.w	8006d96 <_vfiprintf_r+0x20e>
 8006c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c44:	445a      	add	r2, fp
 8006c46:	9209      	str	r2, [sp, #36]	; 0x24
 8006c48:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80a2 	beq.w	8006d96 <_vfiprintf_r+0x20e>
 8006c52:	2300      	movs	r3, #0
 8006c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c5c:	f10a 0a01 	add.w	sl, sl, #1
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c68:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6a:	4654      	mov	r4, sl
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c72:	4858      	ldr	r0, [pc, #352]	; (8006dd4 <_vfiprintf_r+0x24c>)
 8006c74:	f7ff fad2 	bl	800621c <memchr>
 8006c78:	9a04      	ldr	r2, [sp, #16]
 8006c7a:	b9d8      	cbnz	r0, 8006cb4 <_vfiprintf_r+0x12c>
 8006c7c:	06d1      	lsls	r1, r2, #27
 8006c7e:	bf44      	itt	mi
 8006c80:	2320      	movmi	r3, #32
 8006c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c86:	0713      	lsls	r3, r2, #28
 8006c88:	bf44      	itt	mi
 8006c8a:	232b      	movmi	r3, #43	; 0x2b
 8006c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c90:	f89a 3000 	ldrb.w	r3, [sl]
 8006c94:	2b2a      	cmp	r3, #42	; 0x2a
 8006c96:	d015      	beq.n	8006cc4 <_vfiprintf_r+0x13c>
 8006c98:	4654      	mov	r4, sl
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f04f 0c0a 	mov.w	ip, #10
 8006ca0:	9a07      	ldr	r2, [sp, #28]
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca8:	3b30      	subs	r3, #48	; 0x30
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d94e      	bls.n	8006d4c <_vfiprintf_r+0x1c4>
 8006cae:	b1b0      	cbz	r0, 8006cde <_vfiprintf_r+0x156>
 8006cb0:	9207      	str	r2, [sp, #28]
 8006cb2:	e014      	b.n	8006cde <_vfiprintf_r+0x156>
 8006cb4:	eba0 0308 	sub.w	r3, r0, r8
 8006cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	46a2      	mov	sl, r4
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	e7d2      	b.n	8006c6a <_vfiprintf_r+0xe2>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	1d19      	adds	r1, r3, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	9103      	str	r1, [sp, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bfbb      	ittet	lt
 8006cd0:	425b      	neglt	r3, r3
 8006cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd6:	9307      	strge	r3, [sp, #28]
 8006cd8:	9307      	strlt	r3, [sp, #28]
 8006cda:	bfb8      	it	lt
 8006cdc:	9204      	strlt	r2, [sp, #16]
 8006cde:	7823      	ldrb	r3, [r4, #0]
 8006ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce2:	d10c      	bne.n	8006cfe <_vfiprintf_r+0x176>
 8006ce4:	7863      	ldrb	r3, [r4, #1]
 8006ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce8:	d135      	bne.n	8006d56 <_vfiprintf_r+0x1ce>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	3402      	adds	r4, #2
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	9203      	str	r2, [sp, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bfb8      	it	lt
 8006cf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006dd8 <_vfiprintf_r+0x250>
 8006d02:	2203      	movs	r2, #3
 8006d04:	4650      	mov	r0, sl
 8006d06:	7821      	ldrb	r1, [r4, #0]
 8006d08:	f7ff fa88 	bl	800621c <memchr>
 8006d0c:	b140      	cbz	r0, 8006d20 <_vfiprintf_r+0x198>
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	eba0 000a 	sub.w	r0, r0, sl
 8006d14:	fa03 f000 	lsl.w	r0, r3, r0
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	3401      	adds	r4, #1
 8006d1c:	4303      	orrs	r3, r0
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d24:	2206      	movs	r2, #6
 8006d26:	482d      	ldr	r0, [pc, #180]	; (8006ddc <_vfiprintf_r+0x254>)
 8006d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2c:	f7ff fa76 	bl	800621c <memchr>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d03f      	beq.n	8006db4 <_vfiprintf_r+0x22c>
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <_vfiprintf_r+0x258>)
 8006d36:	bb1b      	cbnz	r3, 8006d80 <_vfiprintf_r+0x1f8>
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	3307      	adds	r3, #7
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	3308      	adds	r3, #8
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	443b      	add	r3, r7
 8006d48:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4a:	e767      	b.n	8006c1c <_vfiprintf_r+0x94>
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	2001      	movs	r0, #1
 8006d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d54:	e7a5      	b.n	8006ca2 <_vfiprintf_r+0x11a>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f04f 0c0a 	mov.w	ip, #10
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	3401      	adds	r4, #1
 8006d60:	9305      	str	r3, [sp, #20]
 8006d62:	4620      	mov	r0, r4
 8006d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d68:	3a30      	subs	r2, #48	; 0x30
 8006d6a:	2a09      	cmp	r2, #9
 8006d6c:	d903      	bls.n	8006d76 <_vfiprintf_r+0x1ee>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0c5      	beq.n	8006cfe <_vfiprintf_r+0x176>
 8006d72:	9105      	str	r1, [sp, #20]
 8006d74:	e7c3      	b.n	8006cfe <_vfiprintf_r+0x176>
 8006d76:	4604      	mov	r4, r0
 8006d78:	2301      	movs	r3, #1
 8006d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7e:	e7f0      	b.n	8006d62 <_vfiprintf_r+0x1da>
 8006d80:	ab03      	add	r3, sp, #12
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	462a      	mov	r2, r5
 8006d86:	4630      	mov	r0, r6
 8006d88:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <_vfiprintf_r+0x25c>)
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	f7fd fc94 	bl	80046b8 <_printf_float>
 8006d90:	4607      	mov	r7, r0
 8006d92:	1c78      	adds	r0, r7, #1
 8006d94:	d1d6      	bne.n	8006d44 <_vfiprintf_r+0x1bc>
 8006d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d98:	07d9      	lsls	r1, r3, #31
 8006d9a:	d405      	bmi.n	8006da8 <_vfiprintf_r+0x220>
 8006d9c:	89ab      	ldrh	r3, [r5, #12]
 8006d9e:	059a      	lsls	r2, r3, #22
 8006da0:	d402      	bmi.n	8006da8 <_vfiprintf_r+0x220>
 8006da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da4:	f7ff f9cc 	bl	8006140 <__retarget_lock_release_recursive>
 8006da8:	89ab      	ldrh	r3, [r5, #12]
 8006daa:	065b      	lsls	r3, r3, #25
 8006dac:	f53f af12 	bmi.w	8006bd4 <_vfiprintf_r+0x4c>
 8006db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db2:	e711      	b.n	8006bd8 <_vfiprintf_r+0x50>
 8006db4:	ab03      	add	r3, sp, #12
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	462a      	mov	r2, r5
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <_vfiprintf_r+0x25c>)
 8006dbe:	a904      	add	r1, sp, #16
 8006dc0:	f7fd ff16 	bl	8004bf0 <_printf_i>
 8006dc4:	e7e4      	b.n	8006d90 <_vfiprintf_r+0x208>
 8006dc6:	bf00      	nop
 8006dc8:	08008888 	.word	0x08008888
 8006dcc:	080088a8 	.word	0x080088a8
 8006dd0:	08008868 	.word	0x08008868
 8006dd4:	08008a24 	.word	0x08008a24
 8006dd8:	08008a2a 	.word	0x08008a2a
 8006ddc:	08008a2e 	.word	0x08008a2e
 8006de0:	080046b9 	.word	0x080046b9
 8006de4:	08006b63 	.word	0x08006b63

08006de8 <_sbrk_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	2300      	movs	r3, #0
 8006dec:	4d05      	ldr	r5, [pc, #20]	; (8006e04 <_sbrk_r+0x1c>)
 8006dee:	4604      	mov	r4, r0
 8006df0:	4608      	mov	r0, r1
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	f7fa ffc0 	bl	8001d78 <_sbrk>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_sbrk_r+0x1a>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_sbrk_r+0x1a>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	2000032c 	.word	0x2000032c

08006e08 <__sread>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e10:	f000 f8e2 	bl	8006fd8 <_read_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	bfab      	itete	ge
 8006e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e1c:	181b      	addge	r3, r3, r0
 8006e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e22:	bfac      	ite	ge
 8006e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e26:	81a3      	strhlt	r3, [r4, #12]
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <__swrite>:
 8006e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2e:	461f      	mov	r7, r3
 8006e30:	898b      	ldrh	r3, [r1, #12]
 8006e32:	4605      	mov	r5, r0
 8006e34:	05db      	lsls	r3, r3, #23
 8006e36:	460c      	mov	r4, r1
 8006e38:	4616      	mov	r6, r2
 8006e3a:	d505      	bpl.n	8006e48 <__swrite+0x1e>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	f000 f898 	bl	8006f78 <_lseek_r>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	4632      	mov	r2, r6
 8006e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	4628      	mov	r0, r5
 8006e54:	463b      	mov	r3, r7
 8006e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5e:	f000 b817 	b.w	8006e90 <_write_r>

08006e62 <__sseek>:
 8006e62:	b510      	push	{r4, lr}
 8006e64:	460c      	mov	r4, r1
 8006e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6a:	f000 f885 	bl	8006f78 <_lseek_r>
 8006e6e:	1c43      	adds	r3, r0, #1
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	bf15      	itete	ne
 8006e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e7e:	81a3      	strheq	r3, [r4, #12]
 8006e80:	bf18      	it	ne
 8006e82:	81a3      	strhne	r3, [r4, #12]
 8006e84:	bd10      	pop	{r4, pc}

08006e86 <__sclose>:
 8006e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8a:	f000 b831 	b.w	8006ef0 <_close_r>
	...

08006e90 <_write_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4d05      	ldr	r5, [pc, #20]	; (8006eb0 <_write_r+0x20>)
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fa f8c6 	bl	8001030 <_write>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_write_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_write_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	2000032c 	.word	0x2000032c

08006eb4 <__assert_func>:
 8006eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <__assert_func+0x2c>)
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68d8      	ldr	r0, [r3, #12]
 8006ec2:	b14c      	cbz	r4, 8006ed8 <__assert_func+0x24>
 8006ec4:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <__assert_func+0x30>)
 8006ec6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006eca:	9100      	str	r1, [sp, #0]
 8006ecc:	462b      	mov	r3, r5
 8006ece:	4906      	ldr	r1, [pc, #24]	; (8006ee8 <__assert_func+0x34>)
 8006ed0:	f000 f81e 	bl	8006f10 <fiprintf>
 8006ed4:	f000 f89f 	bl	8007016 <abort>
 8006ed8:	4b04      	ldr	r3, [pc, #16]	; (8006eec <__assert_func+0x38>)
 8006eda:	461c      	mov	r4, r3
 8006edc:	e7f3      	b.n	8006ec6 <__assert_func+0x12>
 8006ede:	bf00      	nop
 8006ee0:	2000000c 	.word	0x2000000c
 8006ee4:	08008a35 	.word	0x08008a35
 8006ee8:	08008a42 	.word	0x08008a42
 8006eec:	08008a70 	.word	0x08008a70

08006ef0 <_close_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4d05      	ldr	r5, [pc, #20]	; (8006f0c <_close_r+0x1c>)
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f7fa ff0c 	bl	8001d18 <_close>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_close_r+0x1a>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_close_r+0x1a>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	2000032c 	.word	0x2000032c

08006f10 <fiprintf>:
 8006f10:	b40e      	push	{r1, r2, r3}
 8006f12:	b503      	push	{r0, r1, lr}
 8006f14:	4601      	mov	r1, r0
 8006f16:	ab03      	add	r3, sp, #12
 8006f18:	4805      	ldr	r0, [pc, #20]	; (8006f30 <fiprintf+0x20>)
 8006f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1e:	6800      	ldr	r0, [r0, #0]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	f7ff fe31 	bl	8006b88 <_vfiprintf_r>
 8006f26:	b002      	add	sp, #8
 8006f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f2c:	b003      	add	sp, #12
 8006f2e:	4770      	bx	lr
 8006f30:	2000000c 	.word	0x2000000c

08006f34 <_fstat_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	2300      	movs	r3, #0
 8006f38:	4d06      	ldr	r5, [pc, #24]	; (8006f54 <_fstat_r+0x20>)
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	f7fa fef4 	bl	8001d2e <_fstat>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	d102      	bne.n	8006f50 <_fstat_r+0x1c>
 8006f4a:	682b      	ldr	r3, [r5, #0]
 8006f4c:	b103      	cbz	r3, 8006f50 <_fstat_r+0x1c>
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	bd38      	pop	{r3, r4, r5, pc}
 8006f52:	bf00      	nop
 8006f54:	2000032c 	.word	0x2000032c

08006f58 <_isatty_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4d05      	ldr	r5, [pc, #20]	; (8006f74 <_isatty_r+0x1c>)
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fa fef2 	bl	8001d4c <_isatty>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_isatty_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_isatty_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000032c 	.word	0x2000032c

08006f78 <_lseek_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	2200      	movs	r2, #0
 8006f82:	4d05      	ldr	r5, [pc, #20]	; (8006f98 <_lseek_r+0x20>)
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7fa feea 	bl	8001d60 <_lseek>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_lseek_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_lseek_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000032c 	.word	0x2000032c

08006f9c <__ascii_mbtowc>:
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	b901      	cbnz	r1, 8006fa2 <__ascii_mbtowc+0x6>
 8006fa0:	a901      	add	r1, sp, #4
 8006fa2:	b142      	cbz	r2, 8006fb6 <__ascii_mbtowc+0x1a>
 8006fa4:	b14b      	cbz	r3, 8006fba <__ascii_mbtowc+0x1e>
 8006fa6:	7813      	ldrb	r3, [r2, #0]
 8006fa8:	600b      	str	r3, [r1, #0]
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	1e10      	subs	r0, r2, #0
 8006fae:	bf18      	it	ne
 8006fb0:	2001      	movne	r0, #1
 8006fb2:	b002      	add	sp, #8
 8006fb4:	4770      	bx	lr
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	e7fb      	b.n	8006fb2 <__ascii_mbtowc+0x16>
 8006fba:	f06f 0001 	mvn.w	r0, #1
 8006fbe:	e7f8      	b.n	8006fb2 <__ascii_mbtowc+0x16>

08006fc0 <__malloc_lock>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	; (8006fc8 <__malloc_lock+0x8>)
 8006fc2:	f7ff b8bc 	b.w	800613e <__retarget_lock_acquire_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	20000320 	.word	0x20000320

08006fcc <__malloc_unlock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__malloc_unlock+0x8>)
 8006fce:	f7ff b8b7 	b.w	8006140 <__retarget_lock_release_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	20000320 	.word	0x20000320

08006fd8 <_read_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4d05      	ldr	r5, [pc, #20]	; (8006ff8 <_read_r+0x20>)
 8006fe4:	602a      	str	r2, [r5, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f7fa fe79 	bl	8001cde <_read>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_read_r+0x1e>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_read_r+0x1e>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	2000032c 	.word	0x2000032c

08006ffc <__ascii_wctomb>:
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	b141      	cbz	r1, 8007014 <__ascii_wctomb+0x18>
 8007002:	2aff      	cmp	r2, #255	; 0xff
 8007004:	d904      	bls.n	8007010 <__ascii_wctomb+0x14>
 8007006:	228a      	movs	r2, #138	; 0x8a
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	4770      	bx	lr
 8007010:	2001      	movs	r0, #1
 8007012:	700a      	strb	r2, [r1, #0]
 8007014:	4770      	bx	lr

08007016 <abort>:
 8007016:	2006      	movs	r0, #6
 8007018:	b508      	push	{r3, lr}
 800701a:	f000 f82b 	bl	8007074 <raise>
 800701e:	2001      	movs	r0, #1
 8007020:	f7fa fe53 	bl	8001cca <_exit>

08007024 <_raise_r>:
 8007024:	291f      	cmp	r1, #31
 8007026:	b538      	push	{r3, r4, r5, lr}
 8007028:	4604      	mov	r4, r0
 800702a:	460d      	mov	r5, r1
 800702c:	d904      	bls.n	8007038 <_raise_r+0x14>
 800702e:	2316      	movs	r3, #22
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800703a:	b112      	cbz	r2, 8007042 <_raise_r+0x1e>
 800703c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007040:	b94b      	cbnz	r3, 8007056 <_raise_r+0x32>
 8007042:	4620      	mov	r0, r4
 8007044:	f000 f830 	bl	80070a8 <_getpid_r>
 8007048:	462a      	mov	r2, r5
 800704a:	4601      	mov	r1, r0
 800704c:	4620      	mov	r0, r4
 800704e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007052:	f000 b817 	b.w	8007084 <_kill_r>
 8007056:	2b01      	cmp	r3, #1
 8007058:	d00a      	beq.n	8007070 <_raise_r+0x4c>
 800705a:	1c59      	adds	r1, r3, #1
 800705c:	d103      	bne.n	8007066 <_raise_r+0x42>
 800705e:	2316      	movs	r3, #22
 8007060:	6003      	str	r3, [r0, #0]
 8007062:	2001      	movs	r0, #1
 8007064:	e7e7      	b.n	8007036 <_raise_r+0x12>
 8007066:	2400      	movs	r4, #0
 8007068:	4628      	mov	r0, r5
 800706a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800706e:	4798      	blx	r3
 8007070:	2000      	movs	r0, #0
 8007072:	e7e0      	b.n	8007036 <_raise_r+0x12>

08007074 <raise>:
 8007074:	4b02      	ldr	r3, [pc, #8]	; (8007080 <raise+0xc>)
 8007076:	4601      	mov	r1, r0
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f7ff bfd3 	b.w	8007024 <_raise_r>
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c

08007084 <_kill_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	2300      	movs	r3, #0
 8007088:	4d06      	ldr	r5, [pc, #24]	; (80070a4 <_kill_r+0x20>)
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	602b      	str	r3, [r5, #0]
 8007092:	f7fa fe0a 	bl	8001caa <_kill>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d102      	bne.n	80070a0 <_kill_r+0x1c>
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	b103      	cbz	r3, 80070a0 <_kill_r+0x1c>
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	bd38      	pop	{r3, r4, r5, pc}
 80070a2:	bf00      	nop
 80070a4:	2000032c 	.word	0x2000032c

080070a8 <_getpid_r>:
 80070a8:	f7fa bdf8 	b.w	8001c9c <_getpid>

080070ac <sin>:
 80070ac:	b530      	push	{r4, r5, lr}
 80070ae:	4a20      	ldr	r2, [pc, #128]	; (8007130 <sin+0x84>)
 80070b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070b4:	4293      	cmp	r3, r2
 80070b6:	b087      	sub	sp, #28
 80070b8:	dc06      	bgt.n	80070c8 <sin+0x1c>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2200      	movs	r2, #0
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	f000 ffdd 	bl	8008080 <__kernel_sin>
 80070c6:	e006      	b.n	80070d6 <sin+0x2a>
 80070c8:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <sin+0x88>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	dd05      	ble.n	80070da <sin+0x2e>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	f7f9 f849 	bl	8000168 <__aeabi_dsub>
 80070d6:	b007      	add	sp, #28
 80070d8:	bd30      	pop	{r4, r5, pc}
 80070da:	aa02      	add	r2, sp, #8
 80070dc:	f000 f928 	bl	8007330 <__ieee754_rem_pio2>
 80070e0:	f000 0003 	and.w	r0, r0, #3
 80070e4:	2801      	cmp	r0, #1
 80070e6:	d009      	beq.n	80070fc <sin+0x50>
 80070e8:	2802      	cmp	r0, #2
 80070ea:	d00e      	beq.n	800710a <sin+0x5e>
 80070ec:	b9c0      	cbnz	r0, 8007120 <sin+0x74>
 80070ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f2:	2301      	movs	r3, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	e7e2      	b.n	80070c2 <sin+0x16>
 80070fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007104:	f000 fbbc 	bl	8007880 <__kernel_cos>
 8007108:	e7e5      	b.n	80070d6 <sin+0x2a>
 800710a:	2301      	movs	r3, #1
 800710c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007116:	f000 ffb3 	bl	8008080 <__kernel_sin>
 800711a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800711e:	e7da      	b.n	80070d6 <sin+0x2a>
 8007120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007128:	f000 fbaa 	bl	8007880 <__kernel_cos>
 800712c:	e7f5      	b.n	800711a <sin+0x6e>
 800712e:	bf00      	nop
 8007130:	3fe921fb 	.word	0x3fe921fb
 8007134:	7fefffff 	.word	0x7fefffff

08007138 <atan2>:
 8007138:	f000 b826 	b.w	8007188 <__ieee754_atan2>

0800713c <sqrt>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	4606      	mov	r6, r0
 8007140:	460f      	mov	r7, r1
 8007142:	f000 faed 	bl	8007720 <__ieee754_sqrt>
 8007146:	4632      	mov	r2, r6
 8007148:	4604      	mov	r4, r0
 800714a:	460d      	mov	r5, r1
 800714c:	463b      	mov	r3, r7
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 fc5b 	bl	8000a0c <__aeabi_dcmpun>
 8007156:	b990      	cbnz	r0, 800717e <sqrt+0x42>
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	4630      	mov	r0, r6
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 fc2c 	bl	80009bc <__aeabi_dcmplt>
 8007164:	b158      	cbz	r0, 800717e <sqrt+0x42>
 8007166:	f7fd f9d7 	bl	8004518 <__errno>
 800716a:	2321      	movs	r3, #33	; 0x21
 800716c:	2200      	movs	r2, #0
 800716e:	6003      	str	r3, [r0, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	f7f9 fad9 	bl	800072c <__aeabi_ddiv>
 800717a:	4604      	mov	r4, r0
 800717c:	460d      	mov	r5, r1
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007184:	0000      	movs	r0, r0
	...

08007188 <__ieee754_atan2>:
 8007188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	4692      	mov	sl, r2
 800718e:	4699      	mov	r9, r3
 8007190:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007194:	461f      	mov	r7, r3
 8007196:	f1ca 0300 	rsb	r3, sl, #0
 800719a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007320 <__ieee754_atan2+0x198>
 800719e:	ea43 030a 	orr.w	r3, r3, sl
 80071a2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80071a6:	4573      	cmp	r3, lr
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	d808      	bhi.n	80071c0 <__ieee754_atan2+0x38>
 80071ae:	4246      	negs	r6, r0
 80071b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071b4:	4306      	orrs	r6, r0
 80071b6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80071ba:	4576      	cmp	r6, lr
 80071bc:	468c      	mov	ip, r1
 80071be:	d908      	bls.n	80071d2 <__ieee754_atan2+0x4a>
 80071c0:	4652      	mov	r2, sl
 80071c2:	464b      	mov	r3, r9
 80071c4:	4620      	mov	r0, r4
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7f8 ffd0 	bl	800016c <__adddf3>
 80071cc:	4604      	mov	r4, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	e019      	b.n	8007206 <__ieee754_atan2+0x7e>
 80071d2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80071d6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80071da:	ea56 060a 	orrs.w	r6, r6, sl
 80071de:	d103      	bne.n	80071e8 <__ieee754_atan2+0x60>
 80071e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	f001 b804 	b.w	80081f0 <atan>
 80071e8:	17be      	asrs	r6, r7, #30
 80071ea:	f006 0602 	and.w	r6, r6, #2
 80071ee:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80071f2:	ea53 0100 	orrs.w	r1, r3, r0
 80071f6:	d10a      	bne.n	800720e <__ieee754_atan2+0x86>
 80071f8:	2e02      	cmp	r6, #2
 80071fa:	d067      	beq.n	80072cc <__ieee754_atan2+0x144>
 80071fc:	2e03      	cmp	r6, #3
 80071fe:	d102      	bne.n	8007206 <__ieee754_atan2+0x7e>
 8007200:	a53b      	add	r5, pc, #236	; (adr r5, 80072f0 <__ieee754_atan2+0x168>)
 8007202:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	ea52 010a 	orrs.w	r1, r2, sl
 8007212:	d106      	bne.n	8007222 <__ieee754_atan2+0x9a>
 8007214:	f1bc 0f00 	cmp.w	ip, #0
 8007218:	da63      	bge.n	80072e2 <__ieee754_atan2+0x15a>
 800721a:	a537      	add	r5, pc, #220	; (adr r5, 80072f8 <__ieee754_atan2+0x170>)
 800721c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007220:	e7f1      	b.n	8007206 <__ieee754_atan2+0x7e>
 8007222:	4572      	cmp	r2, lr
 8007224:	d10f      	bne.n	8007246 <__ieee754_atan2+0xbe>
 8007226:	4293      	cmp	r3, r2
 8007228:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800722c:	d107      	bne.n	800723e <__ieee754_atan2+0xb6>
 800722e:	2e02      	cmp	r6, #2
 8007230:	d850      	bhi.n	80072d4 <__ieee754_atan2+0x14c>
 8007232:	4b3c      	ldr	r3, [pc, #240]	; (8007324 <__ieee754_atan2+0x19c>)
 8007234:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007238:	e9d6 4500 	ldrd	r4, r5, [r6]
 800723c:	e7e3      	b.n	8007206 <__ieee754_atan2+0x7e>
 800723e:	2e02      	cmp	r6, #2
 8007240:	d84c      	bhi.n	80072dc <__ieee754_atan2+0x154>
 8007242:	4b39      	ldr	r3, [pc, #228]	; (8007328 <__ieee754_atan2+0x1a0>)
 8007244:	e7f6      	b.n	8007234 <__ieee754_atan2+0xac>
 8007246:	4573      	cmp	r3, lr
 8007248:	d0e4      	beq.n	8007214 <__ieee754_atan2+0x8c>
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007250:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007254:	da20      	bge.n	8007298 <__ieee754_atan2+0x110>
 8007256:	2f00      	cmp	r7, #0
 8007258:	da01      	bge.n	800725e <__ieee754_atan2+0xd6>
 800725a:	323c      	adds	r2, #60	; 0x3c
 800725c:	db20      	blt.n	80072a0 <__ieee754_atan2+0x118>
 800725e:	4652      	mov	r2, sl
 8007260:	464b      	mov	r3, r9
 8007262:	4620      	mov	r0, r4
 8007264:	4629      	mov	r1, r5
 8007266:	f7f9 fa61 	bl	800072c <__aeabi_ddiv>
 800726a:	f001 f94b 	bl	8008504 <fabs>
 800726e:	f000 ffbf 	bl	80081f0 <atan>
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	2e01      	cmp	r6, #1
 8007278:	d015      	beq.n	80072a6 <__ieee754_atan2+0x11e>
 800727a:	2e02      	cmp	r6, #2
 800727c:	d017      	beq.n	80072ae <__ieee754_atan2+0x126>
 800727e:	2e00      	cmp	r6, #0
 8007280:	d0c1      	beq.n	8007206 <__ieee754_atan2+0x7e>
 8007282:	a31f      	add	r3, pc, #124	; (adr r3, 8007300 <__ieee754_atan2+0x178>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f8 ff6c 	bl	8000168 <__aeabi_dsub>
 8007290:	a31d      	add	r3, pc, #116	; (adr r3, 8007308 <__ieee754_atan2+0x180>)
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	e016      	b.n	80072c6 <__ieee754_atan2+0x13e>
 8007298:	a51d      	add	r5, pc, #116	; (adr r5, 8007310 <__ieee754_atan2+0x188>)
 800729a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800729e:	e7ea      	b.n	8007276 <__ieee754_atan2+0xee>
 80072a0:	2400      	movs	r4, #0
 80072a2:	2500      	movs	r5, #0
 80072a4:	e7e7      	b.n	8007276 <__ieee754_atan2+0xee>
 80072a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80072aa:	461d      	mov	r5, r3
 80072ac:	e7ab      	b.n	8007206 <__ieee754_atan2+0x7e>
 80072ae:	a314      	add	r3, pc, #80	; (adr r3, 8007300 <__ieee754_atan2+0x178>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f8 ff56 	bl	8000168 <__aeabi_dsub>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	a111      	add	r1, pc, #68	; (adr r1, 8007308 <__ieee754_atan2+0x180>)
 80072c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c6:	f7f8 ff4f 	bl	8000168 <__aeabi_dsub>
 80072ca:	e77f      	b.n	80071cc <__ieee754_atan2+0x44>
 80072cc:	a50e      	add	r5, pc, #56	; (adr r5, 8007308 <__ieee754_atan2+0x180>)
 80072ce:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072d2:	e798      	b.n	8007206 <__ieee754_atan2+0x7e>
 80072d4:	a510      	add	r5, pc, #64	; (adr r5, 8007318 <__ieee754_atan2+0x190>)
 80072d6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072da:	e794      	b.n	8007206 <__ieee754_atan2+0x7e>
 80072dc:	2400      	movs	r4, #0
 80072de:	2500      	movs	r5, #0
 80072e0:	e791      	b.n	8007206 <__ieee754_atan2+0x7e>
 80072e2:	a50b      	add	r5, pc, #44	; (adr r5, 8007310 <__ieee754_atan2+0x188>)
 80072e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072e8:	e78d      	b.n	8007206 <__ieee754_atan2+0x7e>
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w
 80072f0:	54442d18 	.word	0x54442d18
 80072f4:	c00921fb 	.word	0xc00921fb
 80072f8:	54442d18 	.word	0x54442d18
 80072fc:	bff921fb 	.word	0xbff921fb
 8007300:	33145c07 	.word	0x33145c07
 8007304:	3ca1a626 	.word	0x3ca1a626
 8007308:	54442d18 	.word	0x54442d18
 800730c:	400921fb 	.word	0x400921fb
 8007310:	54442d18 	.word	0x54442d18
 8007314:	3ff921fb 	.word	0x3ff921fb
 8007318:	54442d18 	.word	0x54442d18
 800731c:	3fe921fb 	.word	0x3fe921fb
 8007320:	7ff00000 	.word	0x7ff00000
 8007324:	08008b80 	.word	0x08008b80
 8007328:	08008b98 	.word	0x08008b98
 800732c:	00000000 	.word	0x00000000

08007330 <__ieee754_rem_pio2>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	4614      	mov	r4, r2
 8007336:	4ac4      	ldr	r2, [pc, #784]	; (8007648 <__ieee754_rem_pio2+0x318>)
 8007338:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800733c:	b08d      	sub	sp, #52	; 0x34
 800733e:	4592      	cmp	sl, r2
 8007340:	9104      	str	r1, [sp, #16]
 8007342:	dc07      	bgt.n	8007354 <__ieee754_rem_pio2+0x24>
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	e9c4 0100 	strd	r0, r1, [r4]
 800734c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007350:	2500      	movs	r5, #0
 8007352:	e024      	b.n	800739e <__ieee754_rem_pio2+0x6e>
 8007354:	4abd      	ldr	r2, [pc, #756]	; (800764c <__ieee754_rem_pio2+0x31c>)
 8007356:	4592      	cmp	sl, r2
 8007358:	dc72      	bgt.n	8007440 <__ieee754_rem_pio2+0x110>
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	4dbc      	ldr	r5, [pc, #752]	; (8007650 <__ieee754_rem_pio2+0x320>)
 800735e:	2b00      	cmp	r3, #0
 8007360:	a3ab      	add	r3, pc, #684	; (adr r3, 8007610 <__ieee754_rem_pio2+0x2e0>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	dd36      	ble.n	80073d6 <__ieee754_rem_pio2+0xa6>
 8007368:	f7f8 fefe 	bl	8000168 <__aeabi_dsub>
 800736c:	45aa      	cmp	sl, r5
 800736e:	4606      	mov	r6, r0
 8007370:	460f      	mov	r7, r1
 8007372:	d018      	beq.n	80073a6 <__ieee754_rem_pio2+0x76>
 8007374:	a3a8      	add	r3, pc, #672	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e8>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 fef5 	bl	8000168 <__aeabi_dsub>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4630      	mov	r0, r6
 8007384:	e9c4 2300 	strd	r2, r3, [r4]
 8007388:	4639      	mov	r1, r7
 800738a:	f7f8 feed 	bl	8000168 <__aeabi_dsub>
 800738e:	a3a2      	add	r3, pc, #648	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e8>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f8 fee8 	bl	8000168 <__aeabi_dsub>
 8007398:	2501      	movs	r5, #1
 800739a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800739e:	4628      	mov	r0, r5
 80073a0:	b00d      	add	sp, #52	; 0x34
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a6:	a39e      	add	r3, pc, #632	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2f0>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f7f8 fedc 	bl	8000168 <__aeabi_dsub>
 80073b0:	a39d      	add	r3, pc, #628	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f8>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	4606      	mov	r6, r0
 80073b8:	460f      	mov	r7, r1
 80073ba:	f7f8 fed5 	bl	8000168 <__aeabi_dsub>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4630      	mov	r0, r6
 80073c4:	e9c4 2300 	strd	r2, r3, [r4]
 80073c8:	4639      	mov	r1, r7
 80073ca:	f7f8 fecd 	bl	8000168 <__aeabi_dsub>
 80073ce:	a396      	add	r3, pc, #600	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f8>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	e7de      	b.n	8007394 <__ieee754_rem_pio2+0x64>
 80073d6:	f7f8 fec9 	bl	800016c <__adddf3>
 80073da:	45aa      	cmp	sl, r5
 80073dc:	4606      	mov	r6, r0
 80073de:	460f      	mov	r7, r1
 80073e0:	d016      	beq.n	8007410 <__ieee754_rem_pio2+0xe0>
 80073e2:	a38d      	add	r3, pc, #564	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e8>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f7f8 fec0 	bl	800016c <__adddf3>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4630      	mov	r0, r6
 80073f2:	e9c4 2300 	strd	r2, r3, [r4]
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f8 feb6 	bl	8000168 <__aeabi_dsub>
 80073fc:	a386      	add	r3, pc, #536	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e8>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 feb3 	bl	800016c <__adddf3>
 8007406:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800740a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800740e:	e7c6      	b.n	800739e <__ieee754_rem_pio2+0x6e>
 8007410:	a383      	add	r3, pc, #524	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2f0>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f8 fea9 	bl	800016c <__adddf3>
 800741a:	a383      	add	r3, pc, #524	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	4606      	mov	r6, r0
 8007422:	460f      	mov	r7, r1
 8007424:	f7f8 fea2 	bl	800016c <__adddf3>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4630      	mov	r0, r6
 800742e:	e9c4 2300 	strd	r2, r3, [r4]
 8007432:	4639      	mov	r1, r7
 8007434:	f7f8 fe98 	bl	8000168 <__aeabi_dsub>
 8007438:	a37b      	add	r3, pc, #492	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f8>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	e7e0      	b.n	8007402 <__ieee754_rem_pio2+0xd2>
 8007440:	4a84      	ldr	r2, [pc, #528]	; (8007654 <__ieee754_rem_pio2+0x324>)
 8007442:	4592      	cmp	sl, r2
 8007444:	f300 80d5 	bgt.w	80075f2 <__ieee754_rem_pio2+0x2c2>
 8007448:	f001 f85c 	bl	8008504 <fabs>
 800744c:	a378      	add	r3, pc, #480	; (adr r3, 8007630 <__ieee754_rem_pio2+0x300>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	f7f9 f83f 	bl	80004d8 <__aeabi_dmul>
 800745a:	2200      	movs	r2, #0
 800745c:	4b7e      	ldr	r3, [pc, #504]	; (8007658 <__ieee754_rem_pio2+0x328>)
 800745e:	f7f8 fe85 	bl	800016c <__adddf3>
 8007462:	f7f9 fae9 	bl	8000a38 <__aeabi_d2iz>
 8007466:	4605      	mov	r5, r0
 8007468:	f7f8 ffcc 	bl	8000404 <__aeabi_i2d>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007474:	a366      	add	r3, pc, #408	; (adr r3, 8007610 <__ieee754_rem_pio2+0x2e0>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f9 f82d 	bl	80004d8 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f8 fe6f 	bl	8000168 <__aeabi_dsub>
 800748a:	a363      	add	r3, pc, #396	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e8>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	4680      	mov	r8, r0
 8007492:	4689      	mov	r9, r1
 8007494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007498:	f7f9 f81e 	bl	80004d8 <__aeabi_dmul>
 800749c:	2d1f      	cmp	r5, #31
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	dc0e      	bgt.n	80074c2 <__ieee754_rem_pio2+0x192>
 80074a4:	4b6d      	ldr	r3, [pc, #436]	; (800765c <__ieee754_rem_pio2+0x32c>)
 80074a6:	1e6a      	subs	r2, r5, #1
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	4553      	cmp	r3, sl
 80074ae:	d008      	beq.n	80074c2 <__ieee754_rem_pio2+0x192>
 80074b0:	4632      	mov	r2, r6
 80074b2:	463b      	mov	r3, r7
 80074b4:	4640      	mov	r0, r8
 80074b6:	4649      	mov	r1, r9
 80074b8:	f7f8 fe56 	bl	8000168 <__aeabi_dsub>
 80074bc:	e9c4 0100 	strd	r0, r1, [r4]
 80074c0:	e013      	b.n	80074ea <__ieee754_rem_pio2+0x1ba>
 80074c2:	463b      	mov	r3, r7
 80074c4:	4632      	mov	r2, r6
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f8 fe4d 	bl	8000168 <__aeabi_dsub>
 80074ce:	ea4f 532a 	mov.w	r3, sl, asr #20
 80074d2:	9305      	str	r3, [sp, #20]
 80074d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074d8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80074dc:	f1ba 0f10 	cmp.w	sl, #16
 80074e0:	dc1f      	bgt.n	8007522 <__ieee754_rem_pio2+0x1f2>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	e9c4 2300 	strd	r2, r3, [r4]
 80074ea:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80074ee:	4640      	mov	r0, r8
 80074f0:	4653      	mov	r3, sl
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f8 fe38 	bl	8000168 <__aeabi_dsub>
 80074f8:	4632      	mov	r2, r6
 80074fa:	463b      	mov	r3, r7
 80074fc:	f7f8 fe34 	bl	8000168 <__aeabi_dsub>
 8007500:	460b      	mov	r3, r1
 8007502:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007506:	9904      	ldr	r1, [sp, #16]
 8007508:	4602      	mov	r2, r0
 800750a:	2900      	cmp	r1, #0
 800750c:	f6bf af47 	bge.w	800739e <__ieee754_rem_pio2+0x6e>
 8007510:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8007514:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007518:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800751c:	60e3      	str	r3, [r4, #12]
 800751e:	426d      	negs	r5, r5
 8007520:	e73d      	b.n	800739e <__ieee754_rem_pio2+0x6e>
 8007522:	a33f      	add	r3, pc, #252	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2f0>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752c:	f7f8 ffd4 	bl	80004d8 <__aeabi_dmul>
 8007530:	4606      	mov	r6, r0
 8007532:	460f      	mov	r7, r1
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	f7f8 fe14 	bl	8000168 <__aeabi_dsub>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4682      	mov	sl, r0
 8007546:	468b      	mov	fp, r1
 8007548:	4640      	mov	r0, r8
 800754a:	4649      	mov	r1, r9
 800754c:	f7f8 fe0c 	bl	8000168 <__aeabi_dsub>
 8007550:	4632      	mov	r2, r6
 8007552:	463b      	mov	r3, r7
 8007554:	f7f8 fe08 	bl	8000168 <__aeabi_dsub>
 8007558:	a333      	add	r3, pc, #204	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f8>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007566:	f7f8 ffb7 	bl	80004d8 <__aeabi_dmul>
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	f7f8 fdfb 	bl	8000168 <__aeabi_dsub>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	4650      	mov	r0, sl
 800757c:	4659      	mov	r1, fp
 800757e:	f7f8 fdf3 	bl	8000168 <__aeabi_dsub>
 8007582:	9a05      	ldr	r2, [sp, #20]
 8007584:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b31      	cmp	r3, #49	; 0x31
 800758c:	dc06      	bgt.n	800759c <__ieee754_rem_pio2+0x26c>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	46d0      	mov	r8, sl
 8007594:	46d9      	mov	r9, fp
 8007596:	e9c4 2300 	strd	r2, r3, [r4]
 800759a:	e7a6      	b.n	80074ea <__ieee754_rem_pio2+0x1ba>
 800759c:	a326      	add	r3, pc, #152	; (adr r3, 8007638 <__ieee754_rem_pio2+0x308>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a6:	f7f8 ff97 	bl	80004d8 <__aeabi_dmul>
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4650      	mov	r0, sl
 80075b4:	4659      	mov	r1, fp
 80075b6:	f7f8 fdd7 	bl	8000168 <__aeabi_dsub>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4680      	mov	r8, r0
 80075c0:	4689      	mov	r9, r1
 80075c2:	4650      	mov	r0, sl
 80075c4:	4659      	mov	r1, fp
 80075c6:	f7f8 fdcf 	bl	8000168 <__aeabi_dsub>
 80075ca:	4632      	mov	r2, r6
 80075cc:	463b      	mov	r3, r7
 80075ce:	f7f8 fdcb 	bl	8000168 <__aeabi_dsub>
 80075d2:	a31b      	add	r3, pc, #108	; (adr r3, 8007640 <__ieee754_rem_pio2+0x310>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	4606      	mov	r6, r0
 80075da:	460f      	mov	r7, r1
 80075dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e0:	f7f8 ff7a 	bl	80004d8 <__aeabi_dmul>
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	f7f8 fdbe 	bl	8000168 <__aeabi_dsub>
 80075ec:	4606      	mov	r6, r0
 80075ee:	460f      	mov	r7, r1
 80075f0:	e75e      	b.n	80074b0 <__ieee754_rem_pio2+0x180>
 80075f2:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <__ieee754_rem_pio2+0x330>)
 80075f4:	4592      	cmp	sl, r2
 80075f6:	dd35      	ble.n	8007664 <__ieee754_rem_pio2+0x334>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	f7f8 fdb4 	bl	8000168 <__aeabi_dsub>
 8007600:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007604:	e9c4 0100 	strd	r0, r1, [r4]
 8007608:	e6a2      	b.n	8007350 <__ieee754_rem_pio2+0x20>
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w
 8007610:	54400000 	.word	0x54400000
 8007614:	3ff921fb 	.word	0x3ff921fb
 8007618:	1a626331 	.word	0x1a626331
 800761c:	3dd0b461 	.word	0x3dd0b461
 8007620:	1a600000 	.word	0x1a600000
 8007624:	3dd0b461 	.word	0x3dd0b461
 8007628:	2e037073 	.word	0x2e037073
 800762c:	3ba3198a 	.word	0x3ba3198a
 8007630:	6dc9c883 	.word	0x6dc9c883
 8007634:	3fe45f30 	.word	0x3fe45f30
 8007638:	2e000000 	.word	0x2e000000
 800763c:	3ba3198a 	.word	0x3ba3198a
 8007640:	252049c1 	.word	0x252049c1
 8007644:	397b839a 	.word	0x397b839a
 8007648:	3fe921fb 	.word	0x3fe921fb
 800764c:	4002d97b 	.word	0x4002d97b
 8007650:	3ff921fb 	.word	0x3ff921fb
 8007654:	413921fb 	.word	0x413921fb
 8007658:	3fe00000 	.word	0x3fe00000
 800765c:	08008bb0 	.word	0x08008bb0
 8007660:	7fefffff 	.word	0x7fefffff
 8007664:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007668:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800766c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007670:	460f      	mov	r7, r1
 8007672:	4606      	mov	r6, r0
 8007674:	f7f9 f9e0 	bl	8000a38 <__aeabi_d2iz>
 8007678:	f7f8 fec4 	bl	8000404 <__aeabi_i2d>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007688:	f7f8 fd6e 	bl	8000168 <__aeabi_dsub>
 800768c:	2200      	movs	r2, #0
 800768e:	4b22      	ldr	r3, [pc, #136]	; (8007718 <__ieee754_rem_pio2+0x3e8>)
 8007690:	f7f8 ff22 	bl	80004d8 <__aeabi_dmul>
 8007694:	460f      	mov	r7, r1
 8007696:	4606      	mov	r6, r0
 8007698:	f7f9 f9ce 	bl	8000a38 <__aeabi_d2iz>
 800769c:	f7f8 feb2 	bl	8000404 <__aeabi_i2d>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076ac:	f7f8 fd5c 	bl	8000168 <__aeabi_dsub>
 80076b0:	2200      	movs	r2, #0
 80076b2:	4b19      	ldr	r3, [pc, #100]	; (8007718 <__ieee754_rem_pio2+0x3e8>)
 80076b4:	f7f8 ff10 	bl	80004d8 <__aeabi_dmul>
 80076b8:	f04f 0803 	mov.w	r8, #3
 80076bc:	2600      	movs	r6, #0
 80076be:	2700      	movs	r7, #0
 80076c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076c4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80076c8:	4632      	mov	r2, r6
 80076ca:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80076ce:	463b      	mov	r3, r7
 80076d0:	46c2      	mov	sl, r8
 80076d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80076d6:	f7f9 f967 	bl	80009a8 <__aeabi_dcmpeq>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d1f4      	bne.n	80076c8 <__ieee754_rem_pio2+0x398>
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <__ieee754_rem_pio2+0x3ec>)
 80076e0:	462a      	mov	r2, r5
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	2302      	movs	r3, #2
 80076e6:	4621      	mov	r1, r4
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	a806      	add	r0, sp, #24
 80076ec:	4653      	mov	r3, sl
 80076ee:	f000 f985 	bl	80079fc <__kernel_rem_pio2>
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	4605      	mov	r5, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f6bf ae51 	bge.w	800739e <__ieee754_rem_pio2+0x6e>
 80076fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007704:	e9c4 2300 	strd	r2, r3, [r4]
 8007708:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800770c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007710:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007714:	e703      	b.n	800751e <__ieee754_rem_pio2+0x1ee>
 8007716:	bf00      	nop
 8007718:	41700000 	.word	0x41700000
 800771c:	08008c30 	.word	0x08008c30

08007720 <__ieee754_sqrt>:
 8007720:	f8df c158 	ldr.w	ip, [pc, #344]	; 800787c <__ieee754_sqrt+0x15c>
 8007724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007728:	ea3c 0c01 	bics.w	ip, ip, r1
 800772c:	4606      	mov	r6, r0
 800772e:	460d      	mov	r5, r1
 8007730:	460c      	mov	r4, r1
 8007732:	460a      	mov	r2, r1
 8007734:	4607      	mov	r7, r0
 8007736:	4603      	mov	r3, r0
 8007738:	d10f      	bne.n	800775a <__ieee754_sqrt+0x3a>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	f7f8 fecb 	bl	80004d8 <__aeabi_dmul>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4630      	mov	r0, r6
 8007748:	4629      	mov	r1, r5
 800774a:	f7f8 fd0f 	bl	800016c <__adddf3>
 800774e:	4606      	mov	r6, r0
 8007750:	460d      	mov	r5, r1
 8007752:	4630      	mov	r0, r6
 8007754:	4629      	mov	r1, r5
 8007756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775a:	2900      	cmp	r1, #0
 800775c:	dc0e      	bgt.n	800777c <__ieee754_sqrt+0x5c>
 800775e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007762:	ea5c 0707 	orrs.w	r7, ip, r7
 8007766:	d0f4      	beq.n	8007752 <__ieee754_sqrt+0x32>
 8007768:	b141      	cbz	r1, 800777c <__ieee754_sqrt+0x5c>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	f7f8 fcfb 	bl	8000168 <__aeabi_dsub>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	f7f8 ffd9 	bl	800072c <__aeabi_ddiv>
 800777a:	e7e8      	b.n	800774e <__ieee754_sqrt+0x2e>
 800777c:	1521      	asrs	r1, r4, #20
 800777e:	d075      	beq.n	800786c <__ieee754_sqrt+0x14c>
 8007780:	07cc      	lsls	r4, r1, #31
 8007782:	f04f 0400 	mov.w	r4, #0
 8007786:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800778a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800778e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007792:	bf5e      	ittt	pl
 8007794:	0fd9      	lsrpl	r1, r3, #31
 8007796:	005b      	lslpl	r3, r3, #1
 8007798:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800779c:	0fd9      	lsrs	r1, r3, #31
 800779e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80077a2:	2516      	movs	r5, #22
 80077a4:	4620      	mov	r0, r4
 80077a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077aa:	107f      	asrs	r7, r7, #1
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	1846      	adds	r6, r0, r1
 80077b0:	4296      	cmp	r6, r2
 80077b2:	bfde      	ittt	le
 80077b4:	1b92      	suble	r2, r2, r6
 80077b6:	1870      	addle	r0, r6, r1
 80077b8:	1864      	addle	r4, r4, r1
 80077ba:	0052      	lsls	r2, r2, #1
 80077bc:	3d01      	subs	r5, #1
 80077be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80077c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80077c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077ca:	d1f0      	bne.n	80077ae <__ieee754_sqrt+0x8e>
 80077cc:	4629      	mov	r1, r5
 80077ce:	f04f 0e20 	mov.w	lr, #32
 80077d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80077d6:	4282      	cmp	r2, r0
 80077d8:	eb06 0c05 	add.w	ip, r6, r5
 80077dc:	dc02      	bgt.n	80077e4 <__ieee754_sqrt+0xc4>
 80077de:	d113      	bne.n	8007808 <__ieee754_sqrt+0xe8>
 80077e0:	459c      	cmp	ip, r3
 80077e2:	d811      	bhi.n	8007808 <__ieee754_sqrt+0xe8>
 80077e4:	f1bc 0f00 	cmp.w	ip, #0
 80077e8:	eb0c 0506 	add.w	r5, ip, r6
 80077ec:	da43      	bge.n	8007876 <__ieee754_sqrt+0x156>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	db41      	blt.n	8007876 <__ieee754_sqrt+0x156>
 80077f2:	f100 0801 	add.w	r8, r0, #1
 80077f6:	1a12      	subs	r2, r2, r0
 80077f8:	4640      	mov	r0, r8
 80077fa:	459c      	cmp	ip, r3
 80077fc:	bf88      	it	hi
 80077fe:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007802:	eba3 030c 	sub.w	r3, r3, ip
 8007806:	4431      	add	r1, r6
 8007808:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800780c:	f1be 0e01 	subs.w	lr, lr, #1
 8007810:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007818:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800781c:	d1db      	bne.n	80077d6 <__ieee754_sqrt+0xb6>
 800781e:	4313      	orrs	r3, r2
 8007820:	d006      	beq.n	8007830 <__ieee754_sqrt+0x110>
 8007822:	1c48      	adds	r0, r1, #1
 8007824:	bf0b      	itete	eq
 8007826:	4671      	moveq	r1, lr
 8007828:	3101      	addne	r1, #1
 800782a:	3401      	addeq	r4, #1
 800782c:	f021 0101 	bicne.w	r1, r1, #1
 8007830:	1063      	asrs	r3, r4, #1
 8007832:	0849      	lsrs	r1, r1, #1
 8007834:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007838:	07e2      	lsls	r2, r4, #31
 800783a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800783e:	bf48      	it	mi
 8007840:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007844:	460e      	mov	r6, r1
 8007846:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800784a:	e782      	b.n	8007752 <__ieee754_sqrt+0x32>
 800784c:	0ada      	lsrs	r2, r3, #11
 800784e:	3815      	subs	r0, #21
 8007850:	055b      	lsls	r3, r3, #21
 8007852:	2a00      	cmp	r2, #0
 8007854:	d0fa      	beq.n	800784c <__ieee754_sqrt+0x12c>
 8007856:	02d5      	lsls	r5, r2, #11
 8007858:	d50a      	bpl.n	8007870 <__ieee754_sqrt+0x150>
 800785a:	f1c1 0420 	rsb	r4, r1, #32
 800785e:	fa23 f404 	lsr.w	r4, r3, r4
 8007862:	1e4d      	subs	r5, r1, #1
 8007864:	408b      	lsls	r3, r1
 8007866:	4322      	orrs	r2, r4
 8007868:	1b41      	subs	r1, r0, r5
 800786a:	e789      	b.n	8007780 <__ieee754_sqrt+0x60>
 800786c:	4608      	mov	r0, r1
 800786e:	e7f0      	b.n	8007852 <__ieee754_sqrt+0x132>
 8007870:	0052      	lsls	r2, r2, #1
 8007872:	3101      	adds	r1, #1
 8007874:	e7ef      	b.n	8007856 <__ieee754_sqrt+0x136>
 8007876:	4680      	mov	r8, r0
 8007878:	e7bd      	b.n	80077f6 <__ieee754_sqrt+0xd6>
 800787a:	bf00      	nop
 800787c:	7ff00000 	.word	0x7ff00000

08007880 <__kernel_cos>:
 8007880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007888:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800788c:	4680      	mov	r8, r0
 800788e:	460f      	mov	r7, r1
 8007890:	e9cd 2300 	strd	r2, r3, [sp]
 8007894:	da04      	bge.n	80078a0 <__kernel_cos+0x20>
 8007896:	f7f9 f8cf 	bl	8000a38 <__aeabi_d2iz>
 800789a:	2800      	cmp	r0, #0
 800789c:	f000 8086 	beq.w	80079ac <__kernel_cos+0x12c>
 80078a0:	4642      	mov	r2, r8
 80078a2:	463b      	mov	r3, r7
 80078a4:	4640      	mov	r0, r8
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 fe16 	bl	80004d8 <__aeabi_dmul>
 80078ac:	2200      	movs	r2, #0
 80078ae:	4b4e      	ldr	r3, [pc, #312]	; (80079e8 <__kernel_cos+0x168>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	f7f8 fe10 	bl	80004d8 <__aeabi_dmul>
 80078b8:	a33f      	add	r3, pc, #252	; (adr r3, 80079b8 <__kernel_cos+0x138>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	4682      	mov	sl, r0
 80078c0:	468b      	mov	fp, r1
 80078c2:	4620      	mov	r0, r4
 80078c4:	4629      	mov	r1, r5
 80078c6:	f7f8 fe07 	bl	80004d8 <__aeabi_dmul>
 80078ca:	a33d      	add	r3, pc, #244	; (adr r3, 80079c0 <__kernel_cos+0x140>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 fc4c 	bl	800016c <__adddf3>
 80078d4:	4622      	mov	r2, r4
 80078d6:	462b      	mov	r3, r5
 80078d8:	f7f8 fdfe 	bl	80004d8 <__aeabi_dmul>
 80078dc:	a33a      	add	r3, pc, #232	; (adr r3, 80079c8 <__kernel_cos+0x148>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fc41 	bl	8000168 <__aeabi_dsub>
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	f7f8 fdf5 	bl	80004d8 <__aeabi_dmul>
 80078ee:	a338      	add	r3, pc, #224	; (adr r3, 80079d0 <__kernel_cos+0x150>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f8 fc3a 	bl	800016c <__adddf3>
 80078f8:	4622      	mov	r2, r4
 80078fa:	462b      	mov	r3, r5
 80078fc:	f7f8 fdec 	bl	80004d8 <__aeabi_dmul>
 8007900:	a335      	add	r3, pc, #212	; (adr r3, 80079d8 <__kernel_cos+0x158>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fc2f 	bl	8000168 <__aeabi_dsub>
 800790a:	4622      	mov	r2, r4
 800790c:	462b      	mov	r3, r5
 800790e:	f7f8 fde3 	bl	80004d8 <__aeabi_dmul>
 8007912:	a333      	add	r3, pc, #204	; (adr r3, 80079e0 <__kernel_cos+0x160>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fc28 	bl	800016c <__adddf3>
 800791c:	4622      	mov	r2, r4
 800791e:	462b      	mov	r3, r5
 8007920:	f7f8 fdda 	bl	80004d8 <__aeabi_dmul>
 8007924:	4622      	mov	r2, r4
 8007926:	462b      	mov	r3, r5
 8007928:	f7f8 fdd6 	bl	80004d8 <__aeabi_dmul>
 800792c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007930:	4604      	mov	r4, r0
 8007932:	460d      	mov	r5, r1
 8007934:	4640      	mov	r0, r8
 8007936:	4639      	mov	r1, r7
 8007938:	f7f8 fdce 	bl	80004d8 <__aeabi_dmul>
 800793c:	460b      	mov	r3, r1
 800793e:	4602      	mov	r2, r0
 8007940:	4629      	mov	r1, r5
 8007942:	4620      	mov	r0, r4
 8007944:	f7f8 fc10 	bl	8000168 <__aeabi_dsub>
 8007948:	4b28      	ldr	r3, [pc, #160]	; (80079ec <__kernel_cos+0x16c>)
 800794a:	4680      	mov	r8, r0
 800794c:	429e      	cmp	r6, r3
 800794e:	4689      	mov	r9, r1
 8007950:	dc0e      	bgt.n	8007970 <__kernel_cos+0xf0>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4650      	mov	r0, sl
 8007958:	4659      	mov	r1, fp
 800795a:	f7f8 fc05 	bl	8000168 <__aeabi_dsub>
 800795e:	4602      	mov	r2, r0
 8007960:	2000      	movs	r0, #0
 8007962:	460b      	mov	r3, r1
 8007964:	4922      	ldr	r1, [pc, #136]	; (80079f0 <__kernel_cos+0x170>)
 8007966:	f7f8 fbff 	bl	8000168 <__aeabi_dsub>
 800796a:	b003      	add	sp, #12
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007970:	2400      	movs	r4, #0
 8007972:	4b20      	ldr	r3, [pc, #128]	; (80079f4 <__kernel_cos+0x174>)
 8007974:	4622      	mov	r2, r4
 8007976:	429e      	cmp	r6, r3
 8007978:	bfcc      	ite	gt
 800797a:	4d1f      	ldrgt	r5, [pc, #124]	; (80079f8 <__kernel_cos+0x178>)
 800797c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007980:	462b      	mov	r3, r5
 8007982:	2000      	movs	r0, #0
 8007984:	491a      	ldr	r1, [pc, #104]	; (80079f0 <__kernel_cos+0x170>)
 8007986:	f7f8 fbef 	bl	8000168 <__aeabi_dsub>
 800798a:	4622      	mov	r2, r4
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	462b      	mov	r3, r5
 8007992:	4650      	mov	r0, sl
 8007994:	4659      	mov	r1, fp
 8007996:	f7f8 fbe7 	bl	8000168 <__aeabi_dsub>
 800799a:	4642      	mov	r2, r8
 800799c:	464b      	mov	r3, r9
 800799e:	f7f8 fbe3 	bl	8000168 <__aeabi_dsub>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4630      	mov	r0, r6
 80079a8:	4639      	mov	r1, r7
 80079aa:	e7dc      	b.n	8007966 <__kernel_cos+0xe6>
 80079ac:	2000      	movs	r0, #0
 80079ae:	4910      	ldr	r1, [pc, #64]	; (80079f0 <__kernel_cos+0x170>)
 80079b0:	e7db      	b.n	800796a <__kernel_cos+0xea>
 80079b2:	bf00      	nop
 80079b4:	f3af 8000 	nop.w
 80079b8:	be8838d4 	.word	0xbe8838d4
 80079bc:	bda8fae9 	.word	0xbda8fae9
 80079c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80079c4:	3e21ee9e 	.word	0x3e21ee9e
 80079c8:	809c52ad 	.word	0x809c52ad
 80079cc:	3e927e4f 	.word	0x3e927e4f
 80079d0:	19cb1590 	.word	0x19cb1590
 80079d4:	3efa01a0 	.word	0x3efa01a0
 80079d8:	16c15177 	.word	0x16c15177
 80079dc:	3f56c16c 	.word	0x3f56c16c
 80079e0:	5555554c 	.word	0x5555554c
 80079e4:	3fa55555 	.word	0x3fa55555
 80079e8:	3fe00000 	.word	0x3fe00000
 80079ec:	3fd33332 	.word	0x3fd33332
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	3fe90000 	.word	0x3fe90000
 80079f8:	3fd20000 	.word	0x3fd20000

080079fc <__kernel_rem_pio2>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007a04:	9308      	str	r3, [sp, #32]
 8007a06:	9106      	str	r1, [sp, #24]
 8007a08:	4bb6      	ldr	r3, [pc, #728]	; (8007ce4 <__kernel_rem_pio2+0x2e8>)
 8007a0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007a0c:	f112 0f14 	cmn.w	r2, #20
 8007a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a14:	bfa8      	it	ge
 8007a16:	1ed4      	subge	r4, r2, #3
 8007a18:	9302      	str	r3, [sp, #8]
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	bfb8      	it	lt
 8007a1e:	2400      	movlt	r4, #0
 8007a20:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007a24:	9307      	str	r3, [sp, #28]
 8007a26:	bfa4      	itt	ge
 8007a28:	2318      	movge	r3, #24
 8007a2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007a2e:	f06f 0317 	mvn.w	r3, #23
 8007a32:	fb04 3303 	mla	r3, r4, r3, r3
 8007a36:	eb03 0b02 	add.w	fp, r3, r2
 8007a3a:	9a07      	ldr	r2, [sp, #28]
 8007a3c:	9b02      	ldr	r3, [sp, #8]
 8007a3e:	1aa7      	subs	r7, r4, r2
 8007a40:	eb03 0802 	add.w	r8, r3, r2
 8007a44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007a46:	2500      	movs	r5, #0
 8007a48:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9009      	str	r0, [sp, #36]	; 0x24
 8007a52:	ae20      	add	r6, sp, #128	; 0x80
 8007a54:	4545      	cmp	r5, r8
 8007a56:	dd14      	ble.n	8007a82 <__kernel_rem_pio2+0x86>
 8007a58:	f04f 0800 	mov.w	r8, #0
 8007a5c:	9a08      	ldr	r2, [sp, #32]
 8007a5e:	ab20      	add	r3, sp, #128	; 0x80
 8007a60:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8007a64:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8007a68:	9b02      	ldr	r3, [sp, #8]
 8007a6a:	4598      	cmp	r8, r3
 8007a6c:	dc35      	bgt.n	8007ada <__kernel_rem_pio2+0xde>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a70:	2200      	movs	r2, #0
 8007a72:	f1a3 0908 	sub.w	r9, r3, #8
 8007a76:	2300      	movs	r3, #0
 8007a78:	462f      	mov	r7, r5
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8007a80:	e01f      	b.n	8007ac2 <__kernel_rem_pio2+0xc6>
 8007a82:	42ef      	cmn	r7, r5
 8007a84:	d40b      	bmi.n	8007a9e <__kernel_rem_pio2+0xa2>
 8007a86:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8007a8e:	f7f8 fcb9 	bl	8000404 <__aeabi_i2d>
 8007a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a96:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007a9a:	3501      	adds	r5, #1
 8007a9c:	e7da      	b.n	8007a54 <__kernel_rem_pio2+0x58>
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	e7f8      	b.n	8007a96 <__kernel_rem_pio2+0x9a>
 8007aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007aac:	f7f8 fd14 	bl	80004d8 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ab8:	f7f8 fb58 	bl	800016c <__adddf3>
 8007abc:	e9cd 0100 	strd	r0, r1, [sp]
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	3f08      	subs	r7, #8
 8007ac6:	429e      	cmp	r6, r3
 8007ac8:	ddec      	ble.n	8007aa4 <__kernel_rem_pio2+0xa8>
 8007aca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ace:	f108 0801 	add.w	r8, r8, #1
 8007ad2:	e8ea 2302 	strd	r2, r3, [sl], #8
 8007ad6:	3508      	adds	r5, #8
 8007ad8:	e7c6      	b.n	8007a68 <__kernel_rem_pio2+0x6c>
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	aa0c      	add	r2, sp, #48	; 0x30
 8007ade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ae4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007ae6:	9e02      	ldr	r6, [sp, #8]
 8007ae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007aec:	930a      	str	r3, [sp, #40]	; 0x28
 8007aee:	ab98      	add	r3, sp, #608	; 0x260
 8007af0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007af4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007af8:	ab70      	add	r3, sp, #448	; 0x1c0
 8007afa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8007afe:	46d0      	mov	r8, sl
 8007b00:	46b1      	mov	r9, r6
 8007b02:	af0c      	add	r7, sp, #48	; 0x30
 8007b04:	9700      	str	r7, [sp, #0]
 8007b06:	f1b9 0f00 	cmp.w	r9, #0
 8007b0a:	f1a8 0808 	sub.w	r8, r8, #8
 8007b0e:	dc71      	bgt.n	8007bf4 <__kernel_rem_pio2+0x1f8>
 8007b10:	465a      	mov	r2, fp
 8007b12:	4620      	mov	r0, r4
 8007b14:	4629      	mov	r1, r5
 8007b16:	f000 fd7b 	bl	8008610 <scalbn>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007b20:	4604      	mov	r4, r0
 8007b22:	460d      	mov	r5, r1
 8007b24:	f7f8 fcd8 	bl	80004d8 <__aeabi_dmul>
 8007b28:	f000 fcf2 	bl	8008510 <floor>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4b6e      	ldr	r3, [pc, #440]	; (8007ce8 <__kernel_rem_pio2+0x2ec>)
 8007b30:	f7f8 fcd2 	bl	80004d8 <__aeabi_dmul>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7f8 fb14 	bl	8000168 <__aeabi_dsub>
 8007b40:	460d      	mov	r5, r1
 8007b42:	4604      	mov	r4, r0
 8007b44:	f7f8 ff78 	bl	8000a38 <__aeabi_d2iz>
 8007b48:	9004      	str	r0, [sp, #16]
 8007b4a:	f7f8 fc5b 	bl	8000404 <__aeabi_i2d>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4620      	mov	r0, r4
 8007b54:	4629      	mov	r1, r5
 8007b56:	f7f8 fb07 	bl	8000168 <__aeabi_dsub>
 8007b5a:	f1bb 0f00 	cmp.w	fp, #0
 8007b5e:	4680      	mov	r8, r0
 8007b60:	4689      	mov	r9, r1
 8007b62:	dd70      	ble.n	8007c46 <__kernel_rem_pio2+0x24a>
 8007b64:	1e72      	subs	r2, r6, #1
 8007b66:	ab0c      	add	r3, sp, #48	; 0x30
 8007b68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007b6c:	9c04      	ldr	r4, [sp, #16]
 8007b6e:	f1cb 0118 	rsb	r1, fp, #24
 8007b72:	fa40 f301 	asr.w	r3, r0, r1
 8007b76:	441c      	add	r4, r3
 8007b78:	408b      	lsls	r3, r1
 8007b7a:	1ac0      	subs	r0, r0, r3
 8007b7c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007b82:	f1cb 0317 	rsb	r3, fp, #23
 8007b86:	9404      	str	r4, [sp, #16]
 8007b88:	fa40 f303 	asr.w	r3, r0, r3
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	9b00      	ldr	r3, [sp, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dd66      	ble.n	8007c62 <__kernel_rem_pio2+0x266>
 8007b94:	2200      	movs	r2, #0
 8007b96:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007b9a:	4614      	mov	r4, r2
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	4296      	cmp	r6, r2
 8007ba4:	f300 80ac 	bgt.w	8007d00 <__kernel_rem_pio2+0x304>
 8007ba8:	f1bb 0f00 	cmp.w	fp, #0
 8007bac:	dd07      	ble.n	8007bbe <__kernel_rem_pio2+0x1c2>
 8007bae:	f1bb 0f01 	cmp.w	fp, #1
 8007bb2:	f000 80b4 	beq.w	8007d1e <__kernel_rem_pio2+0x322>
 8007bb6:	f1bb 0f02 	cmp.w	fp, #2
 8007bba:	f000 80ba 	beq.w	8007d32 <__kernel_rem_pio2+0x336>
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d14e      	bne.n	8007c62 <__kernel_rem_pio2+0x266>
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	2000      	movs	r0, #0
 8007bca:	4948      	ldr	r1, [pc, #288]	; (8007cec <__kernel_rem_pio2+0x2f0>)
 8007bcc:	f7f8 facc 	bl	8000168 <__aeabi_dsub>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4689      	mov	r9, r1
 8007bd4:	2c00      	cmp	r4, #0
 8007bd6:	d044      	beq.n	8007c62 <__kernel_rem_pio2+0x266>
 8007bd8:	465a      	mov	r2, fp
 8007bda:	2000      	movs	r0, #0
 8007bdc:	4943      	ldr	r1, [pc, #268]	; (8007cec <__kernel_rem_pio2+0x2f0>)
 8007bde:	f000 fd17 	bl	8008610 <scalbn>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4640      	mov	r0, r8
 8007be8:	4649      	mov	r1, r9
 8007bea:	f7f8 fabd 	bl	8000168 <__aeabi_dsub>
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	e036      	b.n	8007c62 <__kernel_rem_pio2+0x266>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4b3e      	ldr	r3, [pc, #248]	; (8007cf0 <__kernel_rem_pio2+0x2f4>)
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f7f8 fc6c 	bl	80004d8 <__aeabi_dmul>
 8007c00:	f7f8 ff1a 	bl	8000a38 <__aeabi_d2iz>
 8007c04:	f7f8 fbfe 	bl	8000404 <__aeabi_i2d>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c10:	2200      	movs	r2, #0
 8007c12:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <__kernel_rem_pio2+0x2f8>)
 8007c14:	f7f8 fc60 	bl	80004d8 <__aeabi_dmul>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 faa2 	bl	8000168 <__aeabi_dsub>
 8007c24:	f7f8 ff08 	bl	8000a38 <__aeabi_d2iz>
 8007c28:	9b00      	ldr	r3, [sp, #0]
 8007c2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007c2e:	f843 0b04 	str.w	r0, [r3], #4
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c38:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c3c:	f7f8 fa96 	bl	800016c <__adddf3>
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	e75f      	b.n	8007b06 <__kernel_rem_pio2+0x10a>
 8007c46:	d105      	bne.n	8007c54 <__kernel_rem_pio2+0x258>
 8007c48:	1e73      	subs	r3, r6, #1
 8007c4a:	aa0c      	add	r2, sp, #48	; 0x30
 8007c4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007c50:	15c3      	asrs	r3, r0, #23
 8007c52:	e79b      	b.n	8007b8c <__kernel_rem_pio2+0x190>
 8007c54:	2200      	movs	r2, #0
 8007c56:	4b28      	ldr	r3, [pc, #160]	; (8007cf8 <__kernel_rem_pio2+0x2fc>)
 8007c58:	f7f8 fec4 	bl	80009e4 <__aeabi_dcmpge>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d13e      	bne.n	8007cde <__kernel_rem_pio2+0x2e2>
 8007c60:	9000      	str	r0, [sp, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	2300      	movs	r3, #0
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f7f8 fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f000 80b1 	beq.w	8007dd6 <__kernel_rem_pio2+0x3da>
 8007c74:	1e74      	subs	r4, r6, #1
 8007c76:	4623      	mov	r3, r4
 8007c78:	2200      	movs	r2, #0
 8007c7a:	9902      	ldr	r1, [sp, #8]
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	da5f      	bge.n	8007d40 <__kernel_rem_pio2+0x344>
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	d074      	beq.n	8007d6e <__kernel_rem_pio2+0x372>
 8007c84:	ab0c      	add	r3, sp, #48	; 0x30
 8007c86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c8a:	f1ab 0b18 	sub.w	fp, fp, #24
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 809f 	beq.w	8007dd2 <__kernel_rem_pio2+0x3d6>
 8007c94:	465a      	mov	r2, fp
 8007c96:	2000      	movs	r0, #0
 8007c98:	4914      	ldr	r1, [pc, #80]	; (8007cec <__kernel_rem_pio2+0x2f0>)
 8007c9a:	f000 fcb9 	bl	8008610 <scalbn>
 8007c9e:	46a2      	mov	sl, r4
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460f      	mov	r7, r1
 8007ca4:	f04f 0800 	mov.w	r8, #0
 8007ca8:	ab70      	add	r3, sp, #448	; 0x1c0
 8007caa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007cf0 <__kernel_rem_pio2+0x2f4>
 8007cae:	00e5      	lsls	r5, r4, #3
 8007cb0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007cb4:	f1ba 0f00 	cmp.w	sl, #0
 8007cb8:	f280 80c3 	bge.w	8007e42 <__kernel_rem_pio2+0x446>
 8007cbc:	4626      	mov	r6, r4
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	f2c0 80f5 	blt.w	8007eae <__kernel_rem_pio2+0x4b2>
 8007cc4:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <__kernel_rem_pio2+0x300>)
 8007cc6:	f04f 0a00 	mov.w	sl, #0
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	ab70      	add	r3, sp, #448	; 0x1c0
 8007cce:	f04f 0b00 	mov.w	fp, #0
 8007cd2:	f04f 0800 	mov.w	r8, #0
 8007cd6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007cda:	1ba7      	subs	r7, r4, r6
 8007cdc:	e0db      	b.n	8007e96 <__kernel_rem_pio2+0x49a>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	e757      	b.n	8007b94 <__kernel_rem_pio2+0x198>
 8007ce4:	08008d78 	.word	0x08008d78
 8007ce8:	40200000 	.word	0x40200000
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	3e700000 	.word	0x3e700000
 8007cf4:	41700000 	.word	0x41700000
 8007cf8:	3fe00000 	.word	0x3fe00000
 8007cfc:	08008d38 	.word	0x08008d38
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	b944      	cbnz	r4, 8007d16 <__kernel_rem_pio2+0x31a>
 8007d04:	b11b      	cbz	r3, 8007d0e <__kernel_rem_pio2+0x312>
 8007d06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	461c      	mov	r4, r3
 8007d10:	3201      	adds	r2, #1
 8007d12:	3704      	adds	r7, #4
 8007d14:	e745      	b.n	8007ba2 <__kernel_rem_pio2+0x1a6>
 8007d16:	1acb      	subs	r3, r1, r3
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	e7f7      	b.n	8007d0e <__kernel_rem_pio2+0x312>
 8007d1e:	1e72      	subs	r2, r6, #1
 8007d20:	ab0c      	add	r3, sp, #48	; 0x30
 8007d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007d2a:	a90c      	add	r1, sp, #48	; 0x30
 8007d2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d30:	e745      	b.n	8007bbe <__kernel_rem_pio2+0x1c2>
 8007d32:	1e72      	subs	r2, r6, #1
 8007d34:	ab0c      	add	r3, sp, #48	; 0x30
 8007d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007d3e:	e7f4      	b.n	8007d2a <__kernel_rem_pio2+0x32e>
 8007d40:	a90c      	add	r1, sp, #48	; 0x30
 8007d42:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	e796      	b.n	8007c7a <__kernel_rem_pio2+0x27e>
 8007d4c:	3401      	adds	r4, #1
 8007d4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d0fa      	beq.n	8007d4c <__kernel_rem_pio2+0x350>
 8007d56:	9b08      	ldr	r3, [sp, #32]
 8007d58:	f106 0801 	add.w	r8, r6, #1
 8007d5c:	18f5      	adds	r5, r6, r3
 8007d5e:	ab20      	add	r3, sp, #128	; 0x80
 8007d60:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d64:	4434      	add	r4, r6
 8007d66:	4544      	cmp	r4, r8
 8007d68:	da04      	bge.n	8007d74 <__kernel_rem_pio2+0x378>
 8007d6a:	4626      	mov	r6, r4
 8007d6c:	e6bf      	b.n	8007aee <__kernel_rem_pio2+0xf2>
 8007d6e:	2401      	movs	r4, #1
 8007d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d72:	e7ec      	b.n	8007d4e <__kernel_rem_pio2+0x352>
 8007d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d76:	f04f 0900 	mov.w	r9, #0
 8007d7a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007d7e:	f7f8 fb41 	bl	8000404 <__aeabi_i2d>
 8007d82:	2600      	movs	r6, #0
 8007d84:	2700      	movs	r7, #0
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	e9c5 0100 	strd	r0, r1, [r5]
 8007d8c:	3b08      	subs	r3, #8
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	9504      	str	r5, [sp, #16]
 8007d92:	9b07      	ldr	r3, [sp, #28]
 8007d94:	4599      	cmp	r9, r3
 8007d96:	dd05      	ble.n	8007da4 <__kernel_rem_pio2+0x3a8>
 8007d98:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007d9c:	f108 0801 	add.w	r8, r8, #1
 8007da0:	3508      	adds	r5, #8
 8007da2:	e7e0      	b.n	8007d66 <__kernel_rem_pio2+0x36a>
 8007da4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007da8:	9900      	ldr	r1, [sp, #0]
 8007daa:	f109 0901 	add.w	r9, r9, #1
 8007dae:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007db2:	9100      	str	r1, [sp, #0]
 8007db4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007db8:	f8cd c010 	str.w	ip, [sp, #16]
 8007dbc:	f7f8 fb8c 	bl	80004d8 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f7f8 f9d0 	bl	800016c <__adddf3>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	e7df      	b.n	8007d92 <__kernel_rem_pio2+0x396>
 8007dd2:	3c01      	subs	r4, #1
 8007dd4:	e756      	b.n	8007c84 <__kernel_rem_pio2+0x288>
 8007dd6:	f1cb 0200 	rsb	r2, fp, #0
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f000 fc17 	bl	8008610 <scalbn>
 8007de2:	2200      	movs	r2, #0
 8007de4:	4ba4      	ldr	r3, [pc, #656]	; (8008078 <__kernel_rem_pio2+0x67c>)
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	f7f8 fdfb 	bl	80009e4 <__aeabi_dcmpge>
 8007dee:	b1f8      	cbz	r0, 8007e30 <__kernel_rem_pio2+0x434>
 8007df0:	2200      	movs	r2, #0
 8007df2:	4ba2      	ldr	r3, [pc, #648]	; (800807c <__kernel_rem_pio2+0x680>)
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fb6e 	bl	80004d8 <__aeabi_dmul>
 8007dfc:	f7f8 fe1c 	bl	8000a38 <__aeabi_d2iz>
 8007e00:	4607      	mov	r7, r0
 8007e02:	f7f8 faff 	bl	8000404 <__aeabi_i2d>
 8007e06:	2200      	movs	r2, #0
 8007e08:	4b9b      	ldr	r3, [pc, #620]	; (8008078 <__kernel_rem_pio2+0x67c>)
 8007e0a:	f7f8 fb65 	bl	80004d8 <__aeabi_dmul>
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4602      	mov	r2, r0
 8007e12:	4629      	mov	r1, r5
 8007e14:	4620      	mov	r0, r4
 8007e16:	f7f8 f9a7 	bl	8000168 <__aeabi_dsub>
 8007e1a:	f7f8 fe0d 	bl	8000a38 <__aeabi_d2iz>
 8007e1e:	1c74      	adds	r4, r6, #1
 8007e20:	ab0c      	add	r3, sp, #48	; 0x30
 8007e22:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007e26:	f10b 0b18 	add.w	fp, fp, #24
 8007e2a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007e2e:	e731      	b.n	8007c94 <__kernel_rem_pio2+0x298>
 8007e30:	4620      	mov	r0, r4
 8007e32:	4629      	mov	r1, r5
 8007e34:	f7f8 fe00 	bl	8000a38 <__aeabi_d2iz>
 8007e38:	ab0c      	add	r3, sp, #48	; 0x30
 8007e3a:	4634      	mov	r4, r6
 8007e3c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007e40:	e728      	b.n	8007c94 <__kernel_rem_pio2+0x298>
 8007e42:	ab0c      	add	r3, sp, #48	; 0x30
 8007e44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007e48:	f7f8 fadc 	bl	8000404 <__aeabi_i2d>
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	463b      	mov	r3, r7
 8007e50:	f7f8 fb42 	bl	80004d8 <__aeabi_dmul>
 8007e54:	4642      	mov	r2, r8
 8007e56:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fb3a 	bl	80004d8 <__aeabi_dmul>
 8007e64:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e68:	4606      	mov	r6, r0
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	e722      	b.n	8007cb4 <__kernel_rem_pio2+0x2b8>
 8007e6e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007e72:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007e76:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007e7a:	f8cd c01c 	str.w	ip, [sp, #28]
 8007e7e:	f7f8 fb2b 	bl	80004d8 <__aeabi_dmul>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4650      	mov	r0, sl
 8007e88:	4659      	mov	r1, fp
 8007e8a:	f7f8 f96f 	bl	800016c <__adddf3>
 8007e8e:	4682      	mov	sl, r0
 8007e90:	468b      	mov	fp, r1
 8007e92:	f108 0801 	add.w	r8, r8, #1
 8007e96:	9b02      	ldr	r3, [sp, #8]
 8007e98:	4598      	cmp	r8, r3
 8007e9a:	dc01      	bgt.n	8007ea0 <__kernel_rem_pio2+0x4a4>
 8007e9c:	45b8      	cmp	r8, r7
 8007e9e:	dde6      	ble.n	8007e6e <__kernel_rem_pio2+0x472>
 8007ea0:	ab48      	add	r3, sp, #288	; 0x120
 8007ea2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ea6:	e9c7 ab00 	strd	sl, fp, [r7]
 8007eaa:	3e01      	subs	r6, #1
 8007eac:	e707      	b.n	8007cbe <__kernel_rem_pio2+0x2c2>
 8007eae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	dc09      	bgt.n	8007ec8 <__kernel_rem_pio2+0x4cc>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dc32      	bgt.n	8007f1e <__kernel_rem_pio2+0x522>
 8007eb8:	d05a      	beq.n	8007f70 <__kernel_rem_pio2+0x574>
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	f003 0007 	and.w	r0, r3, #7
 8007ec0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d1f5      	bne.n	8007eba <__kernel_rem_pio2+0x4be>
 8007ece:	ab48      	add	r3, sp, #288	; 0x120
 8007ed0:	441d      	add	r5, r3
 8007ed2:	46aa      	mov	sl, r5
 8007ed4:	46a3      	mov	fp, r4
 8007ed6:	f1bb 0f00 	cmp.w	fp, #0
 8007eda:	dc76      	bgt.n	8007fca <__kernel_rem_pio2+0x5ce>
 8007edc:	46aa      	mov	sl, r5
 8007ede:	46a3      	mov	fp, r4
 8007ee0:	f1bb 0f01 	cmp.w	fp, #1
 8007ee4:	f300 8090 	bgt.w	8008008 <__kernel_rem_pio2+0x60c>
 8007ee8:	2700      	movs	r7, #0
 8007eea:	463e      	mov	r6, r7
 8007eec:	2c01      	cmp	r4, #1
 8007eee:	f300 80aa 	bgt.w	8008046 <__kernel_rem_pio2+0x64a>
 8007ef2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007ef6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007efa:	9b00      	ldr	r3, [sp, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 80ac 	bne.w	800805a <__kernel_rem_pio2+0x65e>
 8007f02:	4603      	mov	r3, r0
 8007f04:	462a      	mov	r2, r5
 8007f06:	9806      	ldr	r0, [sp, #24]
 8007f08:	e9c0 2300 	strd	r2, r3, [r0]
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	460b      	mov	r3, r1
 8007f10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007f14:	463a      	mov	r2, r7
 8007f16:	4633      	mov	r3, r6
 8007f18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007f1c:	e7cd      	b.n	8007eba <__kernel_rem_pio2+0x4be>
 8007f1e:	2000      	movs	r0, #0
 8007f20:	46a0      	mov	r8, r4
 8007f22:	4601      	mov	r1, r0
 8007f24:	ab48      	add	r3, sp, #288	; 0x120
 8007f26:	441d      	add	r5, r3
 8007f28:	f1b8 0f00 	cmp.w	r8, #0
 8007f2c:	da3a      	bge.n	8007fa4 <__kernel_rem_pio2+0x5a8>
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d03e      	beq.n	8007fb2 <__kernel_rem_pio2+0x5b6>
 8007f34:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007f38:	4602      	mov	r2, r0
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	9d06      	ldr	r5, [sp, #24]
 8007f3e:	2601      	movs	r6, #1
 8007f40:	e9c5 2300 	strd	r2, r3, [r5]
 8007f44:	460b      	mov	r3, r1
 8007f46:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007f4a:	f7f8 f90d 	bl	8000168 <__aeabi_dsub>
 8007f4e:	4684      	mov	ip, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	ad48      	add	r5, sp, #288	; 0x120
 8007f54:	42b4      	cmp	r4, r6
 8007f56:	f105 0508 	add.w	r5, r5, #8
 8007f5a:	da2c      	bge.n	8007fb6 <__kernel_rem_pio2+0x5ba>
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	b10b      	cbz	r3, 8007f64 <__kernel_rem_pio2+0x568>
 8007f60:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007f64:	4662      	mov	r2, ip
 8007f66:	463b      	mov	r3, r7
 8007f68:	9906      	ldr	r1, [sp, #24]
 8007f6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007f6e:	e7a4      	b.n	8007eba <__kernel_rem_pio2+0x4be>
 8007f70:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007f72:	ab48      	add	r3, sp, #288	; 0x120
 8007f74:	4637      	mov	r7, r6
 8007f76:	441d      	add	r5, r3
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	da09      	bge.n	8007f90 <__kernel_rem_pio2+0x594>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	b10b      	cbz	r3, 8007f84 <__kernel_rem_pio2+0x588>
 8007f80:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	9906      	ldr	r1, [sp, #24]
 8007f8a:	e9c1 2300 	strd	r2, r3, [r1]
 8007f8e:	e794      	b.n	8007eba <__kernel_rem_pio2+0x4be>
 8007f90:	4630      	mov	r0, r6
 8007f92:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f8e8 	bl	800016c <__adddf3>
 8007f9c:	3c01      	subs	r4, #1
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	e7e9      	b.n	8007f78 <__kernel_rem_pio2+0x57c>
 8007fa4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007fa8:	f7f8 f8e0 	bl	800016c <__adddf3>
 8007fac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007fb0:	e7ba      	b.n	8007f28 <__kernel_rem_pio2+0x52c>
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	e7c0      	b.n	8007f38 <__kernel_rem_pio2+0x53c>
 8007fb6:	4660      	mov	r0, ip
 8007fb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	f7f8 f8d5 	bl	800016c <__adddf3>
 8007fc2:	3601      	adds	r6, #1
 8007fc4:	4684      	mov	ip, r0
 8007fc6:	460f      	mov	r7, r1
 8007fc8:	e7c4      	b.n	8007f54 <__kernel_rem_pio2+0x558>
 8007fca:	e9da 6700 	ldrd	r6, r7, [sl]
 8007fce:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	4649      	mov	r1, r9
 8007fda:	f7f8 f8c7 	bl	800016c <__adddf3>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	4649      	mov	r1, r9
 8007fea:	f7f8 f8bd 	bl	8000168 <__aeabi_dsub>
 8007fee:	4632      	mov	r2, r6
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	f7f8 f8bb 	bl	800016c <__adddf3>
 8007ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ffa:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007ffe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008002:	e9ca 2300 	strd	r2, r3, [sl]
 8008006:	e766      	b.n	8007ed6 <__kernel_rem_pio2+0x4da>
 8008008:	e9da 8900 	ldrd	r8, r9, [sl]
 800800c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 f8a8 	bl	800016c <__adddf3>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 f89e 	bl	8000168 <__aeabi_dsub>
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	f7f8 f89c 	bl	800016c <__adddf3>
 8008034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008038:	e86a 0102 	strd	r0, r1, [sl], #-8
 800803c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008040:	e9ca 2300 	strd	r2, r3, [sl]
 8008044:	e74c      	b.n	8007ee0 <__kernel_rem_pio2+0x4e4>
 8008046:	4638      	mov	r0, r7
 8008048:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800804c:	4631      	mov	r1, r6
 800804e:	f7f8 f88d 	bl	800016c <__adddf3>
 8008052:	3c01      	subs	r4, #1
 8008054:	4607      	mov	r7, r0
 8008056:	460e      	mov	r6, r1
 8008058:	e748      	b.n	8007eec <__kernel_rem_pio2+0x4f0>
 800805a:	9b06      	ldr	r3, [sp, #24]
 800805c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008060:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008064:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008068:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800806c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008070:	601d      	str	r5, [r3, #0]
 8008072:	615e      	str	r6, [r3, #20]
 8008074:	e721      	b.n	8007eba <__kernel_rem_pio2+0x4be>
 8008076:	bf00      	nop
 8008078:	41700000 	.word	0x41700000
 800807c:	3e700000 	.word	0x3e700000

08008080 <__kernel_sin>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	e9cd 2300 	strd	r2, r3, [sp]
 800808a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800808e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008092:	4682      	mov	sl, r0
 8008094:	460c      	mov	r4, r1
 8008096:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008098:	da03      	bge.n	80080a2 <__kernel_sin+0x22>
 800809a:	f7f8 fccd 	bl	8000a38 <__aeabi_d2iz>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d050      	beq.n	8008144 <__kernel_sin+0xc4>
 80080a2:	4652      	mov	r2, sl
 80080a4:	4623      	mov	r3, r4
 80080a6:	4650      	mov	r0, sl
 80080a8:	4621      	mov	r1, r4
 80080aa:	f7f8 fa15 	bl	80004d8 <__aeabi_dmul>
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4650      	mov	r0, sl
 80080b8:	4621      	mov	r1, r4
 80080ba:	f7f8 fa0d 	bl	80004d8 <__aeabi_dmul>
 80080be:	a33e      	add	r3, pc, #248	; (adr r3, 80081b8 <__kernel_sin+0x138>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	4680      	mov	r8, r0
 80080c6:	4689      	mov	r9, r1
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fa04 	bl	80004d8 <__aeabi_dmul>
 80080d0:	a33b      	add	r3, pc, #236	; (adr r3, 80081c0 <__kernel_sin+0x140>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 f847 	bl	8000168 <__aeabi_dsub>
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 f9fb 	bl	80004d8 <__aeabi_dmul>
 80080e2:	a339      	add	r3, pc, #228	; (adr r3, 80081c8 <__kernel_sin+0x148>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f840 	bl	800016c <__adddf3>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 f9f2 	bl	80004d8 <__aeabi_dmul>
 80080f4:	a336      	add	r3, pc, #216	; (adr r3, 80081d0 <__kernel_sin+0x150>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f835 	bl	8000168 <__aeabi_dsub>
 80080fe:	4632      	mov	r2, r6
 8008100:	463b      	mov	r3, r7
 8008102:	f7f8 f9e9 	bl	80004d8 <__aeabi_dmul>
 8008106:	a334      	add	r3, pc, #208	; (adr r3, 80081d8 <__kernel_sin+0x158>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f82e 	bl	800016c <__adddf3>
 8008110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008114:	b9dd      	cbnz	r5, 800814e <__kernel_sin+0xce>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 f9db 	bl	80004d8 <__aeabi_dmul>
 8008122:	a32f      	add	r3, pc, #188	; (adr r3, 80081e0 <__kernel_sin+0x160>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 f81e 	bl	8000168 <__aeabi_dsub>
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	f7f8 f9d2 	bl	80004d8 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4650      	mov	r0, sl
 800813a:	4621      	mov	r1, r4
 800813c:	f7f8 f816 	bl	800016c <__adddf3>
 8008140:	4682      	mov	sl, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4650      	mov	r0, sl
 8008146:	4621      	mov	r1, r4
 8008148:	b006      	add	sp, #24
 800814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814e:	2200      	movs	r2, #0
 8008150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008154:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <__kernel_sin+0x168>)
 8008156:	f7f8 f9bf 	bl	80004d8 <__aeabi_dmul>
 800815a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800815e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f9b7 	bl	80004d8 <__aeabi_dmul>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008172:	f7f7 fff9 	bl	8000168 <__aeabi_dsub>
 8008176:	4632      	mov	r2, r6
 8008178:	463b      	mov	r3, r7
 800817a:	f7f8 f9ad 	bl	80004d8 <__aeabi_dmul>
 800817e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008182:	f7f7 fff1 	bl	8000168 <__aeabi_dsub>
 8008186:	a316      	add	r3, pc, #88	; (adr r3, 80081e0 <__kernel_sin+0x160>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	4640      	mov	r0, r8
 8008192:	4649      	mov	r1, r9
 8008194:	f7f8 f9a0 	bl	80004d8 <__aeabi_dmul>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f7 ffe4 	bl	800016c <__adddf3>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4650      	mov	r0, sl
 80081aa:	4621      	mov	r1, r4
 80081ac:	f7f7 ffdc 	bl	8000168 <__aeabi_dsub>
 80081b0:	e7c6      	b.n	8008140 <__kernel_sin+0xc0>
 80081b2:	bf00      	nop
 80081b4:	f3af 8000 	nop.w
 80081b8:	5acfd57c 	.word	0x5acfd57c
 80081bc:	3de5d93a 	.word	0x3de5d93a
 80081c0:	8a2b9ceb 	.word	0x8a2b9ceb
 80081c4:	3e5ae5e6 	.word	0x3e5ae5e6
 80081c8:	57b1fe7d 	.word	0x57b1fe7d
 80081cc:	3ec71de3 	.word	0x3ec71de3
 80081d0:	19c161d5 	.word	0x19c161d5
 80081d4:	3f2a01a0 	.word	0x3f2a01a0
 80081d8:	1110f8a6 	.word	0x1110f8a6
 80081dc:	3f811111 	.word	0x3f811111
 80081e0:	55555549 	.word	0x55555549
 80081e4:	3fc55555 	.word	0x3fc55555
 80081e8:	3fe00000 	.word	0x3fe00000
 80081ec:	00000000 	.word	0x00000000

080081f0 <atan>:
 80081f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	4bb6      	ldr	r3, [pc, #728]	; (80084d0 <atan+0x2e0>)
 80081f6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80081fa:	429e      	cmp	r6, r3
 80081fc:	4604      	mov	r4, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	468b      	mov	fp, r1
 8008202:	dd17      	ble.n	8008234 <atan+0x44>
 8008204:	4bb3      	ldr	r3, [pc, #716]	; (80084d4 <atan+0x2e4>)
 8008206:	429e      	cmp	r6, r3
 8008208:	dc01      	bgt.n	800820e <atan+0x1e>
 800820a:	d109      	bne.n	8008220 <atan+0x30>
 800820c:	b140      	cbz	r0, 8008220 <atan+0x30>
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	4620      	mov	r0, r4
 8008214:	4629      	mov	r1, r5
 8008216:	f7f7 ffa9 	bl	800016c <__adddf3>
 800821a:	4604      	mov	r4, r0
 800821c:	460d      	mov	r5, r1
 800821e:	e005      	b.n	800822c <atan+0x3c>
 8008220:	f1bb 0f00 	cmp.w	fp, #0
 8008224:	4cac      	ldr	r4, [pc, #688]	; (80084d8 <atan+0x2e8>)
 8008226:	f300 8121 	bgt.w	800846c <atan+0x27c>
 800822a:	4dac      	ldr	r5, [pc, #688]	; (80084dc <atan+0x2ec>)
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	4baa      	ldr	r3, [pc, #680]	; (80084e0 <atan+0x2f0>)
 8008236:	429e      	cmp	r6, r3
 8008238:	dc11      	bgt.n	800825e <atan+0x6e>
 800823a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800823e:	429e      	cmp	r6, r3
 8008240:	dc0a      	bgt.n	8008258 <atan+0x68>
 8008242:	a38b      	add	r3, pc, #556	; (adr r3, 8008470 <atan+0x280>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f7 ff90 	bl	800016c <__adddf3>
 800824c:	2200      	movs	r2, #0
 800824e:	4ba5      	ldr	r3, [pc, #660]	; (80084e4 <atan+0x2f4>)
 8008250:	f7f8 fbd2 	bl	80009f8 <__aeabi_dcmpgt>
 8008254:	2800      	cmp	r0, #0
 8008256:	d1e9      	bne.n	800822c <atan+0x3c>
 8008258:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800825c:	e027      	b.n	80082ae <atan+0xbe>
 800825e:	f000 f951 	bl	8008504 <fabs>
 8008262:	4ba1      	ldr	r3, [pc, #644]	; (80084e8 <atan+0x2f8>)
 8008264:	4604      	mov	r4, r0
 8008266:	429e      	cmp	r6, r3
 8008268:	460d      	mov	r5, r1
 800826a:	f300 80b8 	bgt.w	80083de <atan+0x1ee>
 800826e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008272:	429e      	cmp	r6, r3
 8008274:	f300 809c 	bgt.w	80083b0 <atan+0x1c0>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	f7f7 ff76 	bl	800016c <__adddf3>
 8008280:	2200      	movs	r2, #0
 8008282:	4b98      	ldr	r3, [pc, #608]	; (80084e4 <atan+0x2f4>)
 8008284:	f7f7 ff70 	bl	8000168 <__aeabi_dsub>
 8008288:	2200      	movs	r2, #0
 800828a:	4606      	mov	r6, r0
 800828c:	460f      	mov	r7, r1
 800828e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f7 ff69 	bl	800016c <__adddf3>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 fa43 	bl	800072c <__aeabi_ddiv>
 80082a6:	f04f 0a00 	mov.w	sl, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	460d      	mov	r5, r1
 80082ae:	4622      	mov	r2, r4
 80082b0:	462b      	mov	r3, r5
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f8 f90f 	bl	80004d8 <__aeabi_dmul>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4680      	mov	r8, r0
 80082c0:	4689      	mov	r9, r1
 80082c2:	f7f8 f909 	bl	80004d8 <__aeabi_dmul>
 80082c6:	a36c      	add	r3, pc, #432	; (adr r3, 8008478 <atan+0x288>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	f7f8 f902 	bl	80004d8 <__aeabi_dmul>
 80082d4:	a36a      	add	r3, pc, #424	; (adr r3, 8008480 <atan+0x290>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f7 ff47 	bl	800016c <__adddf3>
 80082de:	4632      	mov	r2, r6
 80082e0:	463b      	mov	r3, r7
 80082e2:	f7f8 f8f9 	bl	80004d8 <__aeabi_dmul>
 80082e6:	a368      	add	r3, pc, #416	; (adr r3, 8008488 <atan+0x298>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f7 ff3e 	bl	800016c <__adddf3>
 80082f0:	4632      	mov	r2, r6
 80082f2:	463b      	mov	r3, r7
 80082f4:	f7f8 f8f0 	bl	80004d8 <__aeabi_dmul>
 80082f8:	a365      	add	r3, pc, #404	; (adr r3, 8008490 <atan+0x2a0>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f7 ff35 	bl	800016c <__adddf3>
 8008302:	4632      	mov	r2, r6
 8008304:	463b      	mov	r3, r7
 8008306:	f7f8 f8e7 	bl	80004d8 <__aeabi_dmul>
 800830a:	a363      	add	r3, pc, #396	; (adr r3, 8008498 <atan+0x2a8>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f7 ff2c 	bl	800016c <__adddf3>
 8008314:	4632      	mov	r2, r6
 8008316:	463b      	mov	r3, r7
 8008318:	f7f8 f8de 	bl	80004d8 <__aeabi_dmul>
 800831c:	a360      	add	r3, pc, #384	; (adr r3, 80084a0 <atan+0x2b0>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f7 ff23 	bl	800016c <__adddf3>
 8008326:	4642      	mov	r2, r8
 8008328:	464b      	mov	r3, r9
 800832a:	f7f8 f8d5 	bl	80004d8 <__aeabi_dmul>
 800832e:	a35e      	add	r3, pc, #376	; (adr r3, 80084a8 <atan+0x2b8>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	4630      	mov	r0, r6
 800833a:	4639      	mov	r1, r7
 800833c:	f7f8 f8cc 	bl	80004d8 <__aeabi_dmul>
 8008340:	a35b      	add	r3, pc, #364	; (adr r3, 80084b0 <atan+0x2c0>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f7f7 ff0f 	bl	8000168 <__aeabi_dsub>
 800834a:	4632      	mov	r2, r6
 800834c:	463b      	mov	r3, r7
 800834e:	f7f8 f8c3 	bl	80004d8 <__aeabi_dmul>
 8008352:	a359      	add	r3, pc, #356	; (adr r3, 80084b8 <atan+0x2c8>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f7 ff06 	bl	8000168 <__aeabi_dsub>
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	f7f8 f8ba 	bl	80004d8 <__aeabi_dmul>
 8008364:	a356      	add	r3, pc, #344	; (adr r3, 80084c0 <atan+0x2d0>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f7f7 fefd 	bl	8000168 <__aeabi_dsub>
 800836e:	4632      	mov	r2, r6
 8008370:	463b      	mov	r3, r7
 8008372:	f7f8 f8b1 	bl	80004d8 <__aeabi_dmul>
 8008376:	a354      	add	r3, pc, #336	; (adr r3, 80084c8 <atan+0x2d8>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 fef4 	bl	8000168 <__aeabi_dsub>
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	f7f8 f8a8 	bl	80004d8 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4640      	mov	r0, r8
 800838e:	4649      	mov	r1, r9
 8008390:	f7f7 feec 	bl	800016c <__adddf3>
 8008394:	4622      	mov	r2, r4
 8008396:	462b      	mov	r3, r5
 8008398:	f7f8 f89e 	bl	80004d8 <__aeabi_dmul>
 800839c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	d144      	bne.n	8008430 <atan+0x240>
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f7 fedd 	bl	8000168 <__aeabi_dsub>
 80083ae:	e734      	b.n	800821a <atan+0x2a>
 80083b0:	2200      	movs	r2, #0
 80083b2:	4b4c      	ldr	r3, [pc, #304]	; (80084e4 <atan+0x2f4>)
 80083b4:	f7f7 fed8 	bl	8000168 <__aeabi_dsub>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	4b48      	ldr	r3, [pc, #288]	; (80084e4 <atan+0x2f4>)
 80083c4:	f7f7 fed2 	bl	800016c <__adddf3>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f8 f9ac 	bl	800072c <__aeabi_ddiv>
 80083d4:	f04f 0a01 	mov.w	sl, #1
 80083d8:	4604      	mov	r4, r0
 80083da:	460d      	mov	r5, r1
 80083dc:	e767      	b.n	80082ae <atan+0xbe>
 80083de:	4b43      	ldr	r3, [pc, #268]	; (80084ec <atan+0x2fc>)
 80083e0:	429e      	cmp	r6, r3
 80083e2:	da1a      	bge.n	800841a <atan+0x22a>
 80083e4:	2200      	movs	r2, #0
 80083e6:	4b42      	ldr	r3, [pc, #264]	; (80084f0 <atan+0x300>)
 80083e8:	f7f7 febe 	bl	8000168 <__aeabi_dsub>
 80083ec:	2200      	movs	r2, #0
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	4b3e      	ldr	r3, [pc, #248]	; (80084f0 <atan+0x300>)
 80083f8:	f7f8 f86e 	bl	80004d8 <__aeabi_dmul>
 80083fc:	2200      	movs	r2, #0
 80083fe:	4b39      	ldr	r3, [pc, #228]	; (80084e4 <atan+0x2f4>)
 8008400:	f7f7 feb4 	bl	800016c <__adddf3>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f8 f98e 	bl	800072c <__aeabi_ddiv>
 8008410:	f04f 0a02 	mov.w	sl, #2
 8008414:	4604      	mov	r4, r0
 8008416:	460d      	mov	r5, r1
 8008418:	e749      	b.n	80082ae <atan+0xbe>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	2000      	movs	r0, #0
 8008420:	4934      	ldr	r1, [pc, #208]	; (80084f4 <atan+0x304>)
 8008422:	f7f8 f983 	bl	800072c <__aeabi_ddiv>
 8008426:	f04f 0a03 	mov.w	sl, #3
 800842a:	4604      	mov	r4, r0
 800842c:	460d      	mov	r5, r1
 800842e:	e73e      	b.n	80082ae <atan+0xbe>
 8008430:	4b31      	ldr	r3, [pc, #196]	; (80084f8 <atan+0x308>)
 8008432:	4e32      	ldr	r6, [pc, #200]	; (80084fc <atan+0x30c>)
 8008434:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008438:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800843c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008440:	f7f7 fe92 	bl	8000168 <__aeabi_dsub>
 8008444:	4622      	mov	r2, r4
 8008446:	462b      	mov	r3, r5
 8008448:	f7f7 fe8e 	bl	8000168 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008454:	f7f7 fe88 	bl	8000168 <__aeabi_dsub>
 8008458:	f1bb 0f00 	cmp.w	fp, #0
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	f6bf aee4 	bge.w	800822c <atan+0x3c>
 8008464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008468:	461d      	mov	r5, r3
 800846a:	e6df      	b.n	800822c <atan+0x3c>
 800846c:	4d24      	ldr	r5, [pc, #144]	; (8008500 <atan+0x310>)
 800846e:	e6dd      	b.n	800822c <atan+0x3c>
 8008470:	8800759c 	.word	0x8800759c
 8008474:	7e37e43c 	.word	0x7e37e43c
 8008478:	e322da11 	.word	0xe322da11
 800847c:	3f90ad3a 	.word	0x3f90ad3a
 8008480:	24760deb 	.word	0x24760deb
 8008484:	3fa97b4b 	.word	0x3fa97b4b
 8008488:	a0d03d51 	.word	0xa0d03d51
 800848c:	3fb10d66 	.word	0x3fb10d66
 8008490:	c54c206e 	.word	0xc54c206e
 8008494:	3fb745cd 	.word	0x3fb745cd
 8008498:	920083ff 	.word	0x920083ff
 800849c:	3fc24924 	.word	0x3fc24924
 80084a0:	5555550d 	.word	0x5555550d
 80084a4:	3fd55555 	.word	0x3fd55555
 80084a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80084ac:	bfa2b444 	.word	0xbfa2b444
 80084b0:	52defd9a 	.word	0x52defd9a
 80084b4:	3fadde2d 	.word	0x3fadde2d
 80084b8:	af749a6d 	.word	0xaf749a6d
 80084bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80084c0:	fe231671 	.word	0xfe231671
 80084c4:	3fbc71c6 	.word	0x3fbc71c6
 80084c8:	9998ebc4 	.word	0x9998ebc4
 80084cc:	3fc99999 	.word	0x3fc99999
 80084d0:	440fffff 	.word	0x440fffff
 80084d4:	7ff00000 	.word	0x7ff00000
 80084d8:	54442d18 	.word	0x54442d18
 80084dc:	bff921fb 	.word	0xbff921fb
 80084e0:	3fdbffff 	.word	0x3fdbffff
 80084e4:	3ff00000 	.word	0x3ff00000
 80084e8:	3ff2ffff 	.word	0x3ff2ffff
 80084ec:	40038000 	.word	0x40038000
 80084f0:	3ff80000 	.word	0x3ff80000
 80084f4:	bff00000 	.word	0xbff00000
 80084f8:	08008da8 	.word	0x08008da8
 80084fc:	08008d88 	.word	0x08008d88
 8008500:	3ff921fb 	.word	0x3ff921fb

08008504 <fabs>:
 8008504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008508:	4770      	bx	lr
 800850a:	0000      	movs	r0, r0
 800850c:	0000      	movs	r0, r0
	...

08008510 <floor>:
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008518:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800851c:	2e13      	cmp	r6, #19
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4607      	mov	r7, r0
 8008524:	460c      	mov	r4, r1
 8008526:	4605      	mov	r5, r0
 8008528:	dc33      	bgt.n	8008592 <floor+0x82>
 800852a:	2e00      	cmp	r6, #0
 800852c:	da14      	bge.n	8008558 <floor+0x48>
 800852e:	a334      	add	r3, pc, #208	; (adr r3, 8008600 <floor+0xf0>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f7 fe1a 	bl	800016c <__adddf3>
 8008538:	2200      	movs	r2, #0
 800853a:	2300      	movs	r3, #0
 800853c:	f7f8 fa5c 	bl	80009f8 <__aeabi_dcmpgt>
 8008540:	b138      	cbz	r0, 8008552 <floor+0x42>
 8008542:	2c00      	cmp	r4, #0
 8008544:	da58      	bge.n	80085f8 <floor+0xe8>
 8008546:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800854a:	431d      	orrs	r5, r3
 800854c:	d001      	beq.n	8008552 <floor+0x42>
 800854e:	2500      	movs	r5, #0
 8008550:	4c2d      	ldr	r4, [pc, #180]	; (8008608 <floor+0xf8>)
 8008552:	4623      	mov	r3, r4
 8008554:	462f      	mov	r7, r5
 8008556:	e025      	b.n	80085a4 <floor+0x94>
 8008558:	4a2c      	ldr	r2, [pc, #176]	; (800860c <floor+0xfc>)
 800855a:	fa42 f806 	asr.w	r8, r2, r6
 800855e:	ea01 0208 	and.w	r2, r1, r8
 8008562:	4302      	orrs	r2, r0
 8008564:	d01e      	beq.n	80085a4 <floor+0x94>
 8008566:	a326      	add	r3, pc, #152	; (adr r3, 8008600 <floor+0xf0>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f7 fdfe 	bl	800016c <__adddf3>
 8008570:	2200      	movs	r2, #0
 8008572:	2300      	movs	r3, #0
 8008574:	f7f8 fa40 	bl	80009f8 <__aeabi_dcmpgt>
 8008578:	2800      	cmp	r0, #0
 800857a:	d0ea      	beq.n	8008552 <floor+0x42>
 800857c:	2c00      	cmp	r4, #0
 800857e:	bfbe      	ittt	lt
 8008580:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008584:	fa43 f606 	asrlt.w	r6, r3, r6
 8008588:	19a4      	addlt	r4, r4, r6
 800858a:	2500      	movs	r5, #0
 800858c:	ea24 0408 	bic.w	r4, r4, r8
 8008590:	e7df      	b.n	8008552 <floor+0x42>
 8008592:	2e33      	cmp	r6, #51	; 0x33
 8008594:	dd0a      	ble.n	80085ac <floor+0x9c>
 8008596:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800859a:	d103      	bne.n	80085a4 <floor+0x94>
 800859c:	f7f7 fde6 	bl	800016c <__adddf3>
 80085a0:	4607      	mov	r7, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4638      	mov	r0, r7
 80085a6:	4619      	mov	r1, r3
 80085a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085b0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80085b4:	fa22 f808 	lsr.w	r8, r2, r8
 80085b8:	ea18 0f00 	tst.w	r8, r0
 80085bc:	d0f2      	beq.n	80085a4 <floor+0x94>
 80085be:	a310      	add	r3, pc, #64	; (adr r3, 8008600 <floor+0xf0>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f7f7 fdd2 	bl	800016c <__adddf3>
 80085c8:	2200      	movs	r2, #0
 80085ca:	2300      	movs	r3, #0
 80085cc:	f7f8 fa14 	bl	80009f8 <__aeabi_dcmpgt>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d0be      	beq.n	8008552 <floor+0x42>
 80085d4:	2c00      	cmp	r4, #0
 80085d6:	da02      	bge.n	80085de <floor+0xce>
 80085d8:	2e14      	cmp	r6, #20
 80085da:	d103      	bne.n	80085e4 <floor+0xd4>
 80085dc:	3401      	adds	r4, #1
 80085de:	ea25 0508 	bic.w	r5, r5, r8
 80085e2:	e7b6      	b.n	8008552 <floor+0x42>
 80085e4:	2301      	movs	r3, #1
 80085e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80085ea:	fa03 f606 	lsl.w	r6, r3, r6
 80085ee:	4435      	add	r5, r6
 80085f0:	42bd      	cmp	r5, r7
 80085f2:	bf38      	it	cc
 80085f4:	18e4      	addcc	r4, r4, r3
 80085f6:	e7f2      	b.n	80085de <floor+0xce>
 80085f8:	2500      	movs	r5, #0
 80085fa:	462c      	mov	r4, r5
 80085fc:	e7a9      	b.n	8008552 <floor+0x42>
 80085fe:	bf00      	nop
 8008600:	8800759c 	.word	0x8800759c
 8008604:	7e37e43c 	.word	0x7e37e43c
 8008608:	bff00000 	.word	0xbff00000
 800860c:	000fffff 	.word	0x000fffff

08008610 <scalbn>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008616:	4604      	mov	r4, r0
 8008618:	460d      	mov	r5, r1
 800861a:	4617      	mov	r7, r2
 800861c:	460b      	mov	r3, r1
 800861e:	b996      	cbnz	r6, 8008646 <scalbn+0x36>
 8008620:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008624:	4303      	orrs	r3, r0
 8008626:	d039      	beq.n	800869c <scalbn+0x8c>
 8008628:	4b33      	ldr	r3, [pc, #204]	; (80086f8 <scalbn+0xe8>)
 800862a:	2200      	movs	r2, #0
 800862c:	f7f7 ff54 	bl	80004d8 <__aeabi_dmul>
 8008630:	4b32      	ldr	r3, [pc, #200]	; (80086fc <scalbn+0xec>)
 8008632:	4604      	mov	r4, r0
 8008634:	429f      	cmp	r7, r3
 8008636:	460d      	mov	r5, r1
 8008638:	da0f      	bge.n	800865a <scalbn+0x4a>
 800863a:	a32b      	add	r3, pc, #172	; (adr r3, 80086e8 <scalbn+0xd8>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 ff4a 	bl	80004d8 <__aeabi_dmul>
 8008644:	e006      	b.n	8008654 <scalbn+0x44>
 8008646:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800864a:	4296      	cmp	r6, r2
 800864c:	d10a      	bne.n	8008664 <scalbn+0x54>
 800864e:	4602      	mov	r2, r0
 8008650:	f7f7 fd8c 	bl	800016c <__adddf3>
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	e020      	b.n	800869c <scalbn+0x8c>
 800865a:	460b      	mov	r3, r1
 800865c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008660:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008664:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008668:	19b9      	adds	r1, r7, r6
 800866a:	4291      	cmp	r1, r2
 800866c:	dd0e      	ble.n	800868c <scalbn+0x7c>
 800866e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008672:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008676:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800867a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800867e:	4820      	ldr	r0, [pc, #128]	; (8008700 <scalbn+0xf0>)
 8008680:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008684:	a31a      	add	r3, pc, #104	; (adr r3, 80086f0 <scalbn+0xe0>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	e7d9      	b.n	8008640 <scalbn+0x30>
 800868c:	2900      	cmp	r1, #0
 800868e:	dd08      	ble.n	80086a2 <scalbn+0x92>
 8008690:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008698:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800869c:	4620      	mov	r0, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80086a6:	da12      	bge.n	80086ce <scalbn+0xbe>
 80086a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80086ac:	429f      	cmp	r7, r3
 80086ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80086b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80086b6:	dcdc      	bgt.n	8008672 <scalbn+0x62>
 80086b8:	a30b      	add	r3, pc, #44	; (adr r3, 80086e8 <scalbn+0xd8>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80086c2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80086c6:	480f      	ldr	r0, [pc, #60]	; (8008704 <scalbn+0xf4>)
 80086c8:	f041 011f 	orr.w	r1, r1, #31
 80086cc:	e7b8      	b.n	8008640 <scalbn+0x30>
 80086ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086d2:	3136      	adds	r1, #54	; 0x36
 80086d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80086dc:	4620      	mov	r0, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	2200      	movs	r2, #0
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <scalbn+0xf8>)
 80086e4:	e7ac      	b.n	8008640 <scalbn+0x30>
 80086e6:	bf00      	nop
 80086e8:	c2f8f359 	.word	0xc2f8f359
 80086ec:	01a56e1f 	.word	0x01a56e1f
 80086f0:	8800759c 	.word	0x8800759c
 80086f4:	7e37e43c 	.word	0x7e37e43c
 80086f8:	43500000 	.word	0x43500000
 80086fc:	ffff3cb0 	.word	0xffff3cb0
 8008700:	8800759c 	.word	0x8800759c
 8008704:	c2f8f359 	.word	0xc2f8f359
 8008708:	3c900000 	.word	0x3c900000

0800870c <_init>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr

08008718 <_fini>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr
