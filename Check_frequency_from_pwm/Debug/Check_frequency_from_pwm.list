
Check_frequency_from_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009d58  08009d58  00019d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a254  0800a254  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a254  0800a254  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a254  0800a254  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002160  200001e4  0800a440  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002344  0800a440  00022344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014331  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a8  00000000  00000000  0003453e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00038b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad82  00000000  00000000  00039cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c91  00000000  00000000  00054a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009941b  00000000  00000000  00068703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006258  00000000  00000000  00101b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d40 	.word	0x08009d40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08009d40 	.word	0x08009d40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <vApplicationGetIdleTaskMemory+0x28>)
 8000c24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000200 	.word	0x20000200
 8000c40:	200002b4 	.word	0x200002b4

08000c44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00b      	beq.n	8000c84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c6c:	e000      	b.n	8000c70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f9      	beq.n	8000c6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <_write>:
void StartDefaultTask(void const * argument);
void Start_PWM_Task(void const * argument);
void Start_ADC_Task(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	2332      	movs	r3, #50	; 0x32
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <_write+0x48>)
 8000ca6:	f004 fcc3 	bl	8005630 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e009      	b.n	8000cc4 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ffc3 	bl	8000c44 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf1      	blt.n	8000cb0 <_write+0x20>
	}
	return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000714 	.word	0x20000714

08000cdc <median>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/************** Медианный фильтр *******************/
float median(float newVal) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	static float buf[3];
	static int count = 0;
	buf[count] = newVal;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <median+0xc8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	492f      	ldr	r1, [pc, #188]	; (8000da8 <median+0xcc>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (++count > 2)
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <median+0xc8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <median+0xc8>)
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <median+0xc8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	dd02      	ble.n	8000d08 <median+0x2c>
		count = 0;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <median+0xc8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

	float a = buf[0];
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <median+0xcc>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	613b      	str	r3, [r7, #16]
	float b = buf[1];
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <median+0xcc>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	60fb      	str	r3, [r7, #12]
	float c = buf[2];
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <median+0xcc>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	60bb      	str	r3, [r7, #8]

	float middle;
	if ((a <= b) && (a <= c)) {
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	6938      	ldr	r0, [r7, #16]
 8000d1e:	f7ff ff5b 	bl	8000bd8 <__aeabi_fcmple>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d012      	beq.n	8000d4e <median+0x72>
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6938      	ldr	r0, [r7, #16]
 8000d2c:	f7ff ff54 	bl	8000bd8 <__aeabi_fcmple>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <median+0x72>
		middle = (b <= c) ? b : c;
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff ff4d 	bl	8000bd8 <__aeabi_fcmple>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <median+0x6c>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	e000      	b.n	8000d4a <median+0x6e>
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e024      	b.n	8000d98 <median+0xbc>
	} else {
		if ((b <= a) && (b <= c)) {
 8000d4e:	6939      	ldr	r1, [r7, #16]
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff ff41 	bl	8000bd8 <__aeabi_fcmple>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d012      	beq.n	8000d82 <median+0xa6>
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff ff3a 	bl	8000bd8 <__aeabi_fcmple>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00b      	beq.n	8000d82 <median+0xa6>
			middle = (a <= c) ? a : c;
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	6938      	ldr	r0, [r7, #16]
 8000d6e:	f7ff ff33 	bl	8000bd8 <__aeabi_fcmple>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <median+0xa0>
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	e000      	b.n	8000d7e <median+0xa2>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <median+0xbc>
		} else {
			middle = (a <= b) ? a : b;
 8000d82:	68f9      	ldr	r1, [r7, #12]
 8000d84:	6938      	ldr	r0, [r7, #16]
 8000d86:	f7ff ff27 	bl	8000bd8 <__aeabi_fcmple>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <median+0xb8>
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	e000      	b.n	8000d96 <median+0xba>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	617b      	str	r3, [r7, #20]
		}
	}
	return middle;
 8000d98:	697b      	ldr	r3, [r7, #20]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20001588 	.word	0x20001588
 8000da8:	2000158c 	.word	0x2000158c
 8000dac:	00000000 	.word	0x00000000

08000db0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0a0      	sub	sp, #128	; 0x80
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a49      	ldr	r2, [pc, #292]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	f040 8087 	bne.w	8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f1b      	ldrb	r3, [r3, #28]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	f040 8082 	bne.w	8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>
			count++;
 8000dcc:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dd8:	701a      	strb	r2, [r3, #0]

			if (count == 1) {
 8000dda:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_TIM_IC_CaptureCallback+0x46>
				__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000de4:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24

				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
			}
		}
	}
}
 8000df4:	e06c      	b.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>
			else if (count == 2) {
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d167      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	4837      	ldr	r0, [pc, #220]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e04:	f003 f97c 	bl	8004100 <HAL_TIM_IC_Stop_IT>
				count = 0;
 8000e08:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
				uint16_t count_main = HAL_TIM_ReadCapturedValue(&htim3,
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e12:	f003 fd7d 	bl	8004910 <HAL_TIM_ReadCapturedValue>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim2);
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				uint32_t res = count_main + (count_secondary * arr)
 8000e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000e34:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e38:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	441a      	add	r2, r3
						+ count_secondary;
 8000e42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e46:	4413      	add	r3, r2
				uint32_t res = count_main + (count_secondary * arr)
 8000e48:	66fb      	str	r3, [r7, #108]	; 0x6c
				float freq = 1 / (res / 1000000.0);
 8000e4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000e4c:	f7ff faca 	bl	80003e4 <__aeabi_ui2d>
 8000e50:	a321      	add	r3, pc, #132	; (adr r3, 8000ed8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fc69 	bl	800072c <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	4922      	ldr	r1, [pc, #136]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e64:	f7ff fc62 	bl	800072c <__aeabi_ddiv>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fe0a 	bl	8000a88 <__aeabi_d2f>
 8000e74:	4603      	mov	r3, r0
 8000e76:	66bb      	str	r3, [r7, #104]	; 0x68
				char str[96] = { 0, };
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	225c      	movs	r2, #92	; 0x5c
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 f874 	bl	8006f72 <memset>
				freq = median(freq);
 8000e8a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000e8c:	f7ff ff26 	bl	8000cdc <median>
 8000e90:	66b8      	str	r0, [r7, #104]	; 0x68
				snprintf(str, 96, "Capture Freq: %.3f Hz\n", (float) freq);
 8000e92:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000e94:	f7ff fac8 	bl	8000428 <__aeabi_f2d>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	f107 0008 	add.w	r0, r7, #8
 8000ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000ea6:	2160      	movs	r1, #96	; 0x60
 8000ea8:	f006 fe68 	bl	8007b7c <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 1000);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff f94d 	bl	8000150 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f107 0108 	add.w	r1, r7, #8
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ec4:	f004 fbb4 	bl	8005630 <HAL_UART_Transmit>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ecc:	f003 f812 	bl	8003ef4 <HAL_TIM_IC_Start_IT>
}
 8000ed0:	bf00      	nop
 8000ed2:	3778      	adds	r7, #120	; 0x78
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	412e8480 	.word	0x412e8480
 8000ee0:	20000688 	.word	0x20000688
 8000ee4:	20000580 	.word	0x20000580
 8000ee8:	20000640 	.word	0x20000640
 8000eec:	3ff00000 	.word	0x3ff00000
 8000ef0:	08009d7c 	.word	0x08009d7c
 8000ef4:	20000714 	.word	0x20000714

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/************** Button *******************/
	hMenuButton.buttonFlag.data = RESET; //Flag reset
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <main+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	719a      	strb	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 ff88 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f85c 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 fa86 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f000 fa5e 	bl	80013d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f14:	f000 f8b2 	bl	800107c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f18:	f000 f8ee 	bl	80010f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f1c:	f000 f98c 	bl	8001238 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f20:	f000 f9d8 	bl	80012d4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f24:	f000 fa2a 	bl	800137c <MX_USART1_UART_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <main+0xb0>)
 8000f2a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f2e:	461d      	mov	r5, r3
 8000f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fcfc 	bl	8005940 <osThreadCreate>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <main+0xb4>)
 8000f4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_PWM_Task */
  osThreadStaticDef(my_PWM_Task, Start_PWM_Task, osPriorityNormal, 0, 256, my_PWM_TaskBuffer, &my_PWM_TaskControlBlock);
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <main+0xb8>)
 8000f50:	f107 0420 	add.w	r4, r7, #32
 8000f54:	461d      	mov	r5, r3
 8000f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_PWM_TaskHandle = osThreadCreate(osThread(my_PWM_Task), NULL);
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 fce9 	bl	8005940 <osThreadCreate>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <main+0xbc>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_ADC_Task */
  osThreadStaticDef(my_ADC_Task, Start_ADC_Task, osPriorityNormal, 0, 256, my_ADC_TaskBuffer, &my_ADC_TaskControlBlock);
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <main+0xc0>)
 8000f76:	1d3c      	adds	r4, r7, #4
 8000f78:	461d      	mov	r5, r3
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_ADC_TaskHandle = osThreadCreate(osThread(my_ADC_Task), NULL);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 fcd8 	bl	8005940 <osThreadCreate>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <main+0xc4>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	printf("Hello world! \r\n");
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <main+0xc8>)
 8000f98:	f006 fd6e 	bl	8007a78 <puts>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f9c:	f004 fcc9 	bl	8005932 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fa0:	e7fe      	b.n	8000fa0 <main+0xa8>
 8000fa2:	bf00      	nop
 8000fa4:	20001580 	.word	0x20001580
 8000fa8:	08009da4 	.word	0x08009da4
 8000fac:	20000758 	.word	0x20000758
 8000fb0:	08009dc0 	.word	0x08009dc0
 8000fb4:	20000c10 	.word	0x20000c10
 8000fb8:	08009ddc 	.word	0x08009ddc
 8000fbc:	200010c8 	.word	0x200010c8
 8000fc0:	08009d94 	.word	0x08009d94

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2228      	movs	r2, #40	; 0x28
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 ffcd 	bl	8006f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001010:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	4618      	mov	r0, r3
 800101c:	f001 ff86 	bl	8002f2c <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001026:	f000 fb95 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f002 f9f2 	bl	8003430 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001052:	f000 fb7f 	bl	8001754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001056:	2302      	movs	r3, #2
 8001058:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800105a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fbac 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800106e:	f000 fb71 	bl	8001754 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_ADC1_Init+0x74>)
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <MX_ADC1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_ADC1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_ADC1_Init+0x74>)
 800109a:	2201      	movs	r2, #1
 800109c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_ADC1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_ADC1_Init+0x74>)
 80010a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_ADC1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_ADC1_Init+0x74>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_ADC1_Init+0x74>)
 80010ba:	f000 fedf 	bl	8001e7c <HAL_ADC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 fb46 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_ADC1_Init+0x74>)
 80010da:	f001 f8a1 	bl	8002220 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010e4:	f000 fb36 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000584 	.word	0x20000584
 80010f4:	40012400 	.word	0x40012400

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b096      	sub	sp, #88	; 0x58
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2220      	movs	r2, #32
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f005 ff1e 	bl	8006f72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <MX_TIM1_Init+0x138>)
 8001138:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <MX_TIM1_Init+0x13c>)
 800113a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71-1;
 800113c:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <MX_TIM1_Init+0x138>)
 800113e:	2246      	movs	r2, #70	; 0x46
 8001140:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <MX_TIM1_Init+0x138>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001148:	4b39      	ldr	r3, [pc, #228]	; (8001230 <MX_TIM1_Init+0x138>)
 800114a:	2263      	movs	r2, #99	; 0x63
 800114c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <MX_TIM1_Init+0x138>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <MX_TIM1_Init+0x138>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <MX_TIM1_Init+0x138>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001160:	4833      	ldr	r0, [pc, #204]	; (8001230 <MX_TIM1_Init+0x138>)
 8001162:	f002 fbe3 	bl	800392c <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800116c:	f000 faf2 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800117a:	4619      	mov	r1, r3
 800117c:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_TIM1_Init+0x138>)
 800117e:	f003 fac1 	bl	8004704 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001188:	f000 fae4 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800118c:	4828      	ldr	r0, [pc, #160]	; (8001230 <MX_TIM1_Init+0x138>)
 800118e:	f002 fc6f 	bl	8003a70 <HAL_TIM_PWM_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001198:	f000 fadc 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a8:	4619      	mov	r1, r3
 80011aa:	4821      	ldr	r0, [pc, #132]	; (8001230 <MX_TIM1_Init+0x138>)
 80011ac:	f004 f932 	bl	8005414 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80011b6:	f000 facd 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	; 0x60
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM1_Init+0x138>)
 80011e0:	f003 f9d2 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011ea:	f000 fab3 	bl	8001754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM1_Init+0x138>)
 8001212:	f004 f95d 	bl	80054d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800121c:	f000 fa9a 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM1_Init+0x138>)
 8001222:	f000 fbdf 	bl	80019e4 <HAL_TIM_MspPostInit>

}
 8001226:	bf00      	nop
 8001228:	3758      	adds	r7, #88	; 0x58
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200005f8 	.word	0x200005f8
 8001234:	40012c00 	.word	0x40012c00

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM2_Init+0x98>)
 800126c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001280:	f002 fb54 	bl	800392c <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 fa63 	bl	8001754 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800128e:	2307      	movs	r3, #7
 8001290:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001292:	2320      	movs	r3, #32
 8001294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <MX_TIM2_Init+0x98>)
 800129e:	f003 faf5 	bl	800488c <HAL_TIM_SlaveConfigSynchro>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012a8:	f000 fa54 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM2_Init+0x98>)
 80012ba:	f004 f8ab 	bl	8005414 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012c4:	f000 fa46 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000640 	.word	0x20000640

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_TIM3_Init+0xa0>)
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <MX_TIM3_Init+0xa4>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_TIM3_Init+0xa0>)
 80012f8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80012fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM3_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM3_Init+0xa0>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM3_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM3_Init+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <MX_TIM3_Init+0xa0>)
 800131a:	f002 fd9b 	bl	8003e54 <HAL_TIM_IC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001324:	f000 fa16 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001328:	2320      	movs	r3, #32
 800132a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	480f      	ldr	r0, [pc, #60]	; (8001374 <MX_TIM3_Init+0xa0>)
 8001338:	f004 f86c 	bl	8005414 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001342:	f000 fa07 	bl	8001754 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800134a:	2301      	movs	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_TIM3_Init+0xa0>)
 800135e:	f003 f87f 	bl	8004460 <HAL_TIM_IC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001368:	f000 f9f4 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000688 	.word	0x20000688
 8001378:	40000400 	.word	0x40000400

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_USART1_UART_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f004 f8ef 	bl	8005596 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013be:	f000 f9c9 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000714 	.word	0x20000714
 80013cc:	40013800 	.word	0x40013800

080013d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_DMA_Init+0x48>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <MX_DMA_Init+0x48>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6153      	str	r3, [r2, #20]
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_DMA_Init+0x48>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	200b      	movs	r0, #11
 80013f4:	f001 f9c3 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f8:	200b      	movs	r0, #11
 80013fa:	f001 f9dc 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	200c      	movs	r0, #12
 8001404:	f001 f9bb 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001408:	200c      	movs	r0, #12
 800140a:	f001 f9d4 	bl	80027b6 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_GPIO_Init+0x8c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <MX_GPIO_Init+0x8c>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_GPIO_Init+0x8c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_GPIO_Init+0x8c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <MX_GPIO_Init+0x8c>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_GPIO_Init+0x8c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_GPIO_Init+0x8c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <MX_GPIO_Init+0x8c>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_GPIO_Init+0x8c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : menu_button_Pin */
  GPIO_InitStruct.Pin = menu_button_Pin;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_GPIO_Init+0x90>)
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(menu_button_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <MX_GPIO_Init+0x94>)
 800148c:	f001 fb90 	bl	8002bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2105      	movs	r1, #5
 8001494:	2017      	movs	r0, #23
 8001496:	f001 f972 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800149a:	2017      	movs	r0, #23
 800149c:	f001 f98b 	bl	80027b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	10210000 	.word	0x10210000
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <MenuButton_Debounce>:

/* USER CODE BEGIN 4 */
uint8_t MenuButton_Debounce(void) //Menu Button debounce function
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	uint8_t ret = DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	71fb      	strb	r3, [r7, #7]
	static uint16_t Level = Restart_Level;
	if (!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin)) {
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	4815      	ldr	r0, [pc, #84]	; (8001518 <MenuButton_Debounce+0x64>)
 80014c2:	f001 fcf9 	bl	8002eb8 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <MenuButton_Debounce+0x26>
		++Level;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MenuButton_Debounce+0x68>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MenuButton_Debounce+0x68>)
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	e00e      	b.n	80014f8 <MenuButton_Debounce+0x44>
	} else {
		--Level;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MenuButton_Debounce+0x68>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MenuButton_Debounce+0x68>)
 80014e4:	801a      	strh	r2, [r3, #0]
		if (Level <= Restart_Level) {
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MenuButton_Debounce+0x68>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ee:	d803      	bhi.n	80014f8 <MenuButton_Debounce+0x44>
			Level = Restart_Level;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MenuButton_Debounce+0x68>)
 80014f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014f6:	801a      	strh	r2, [r3, #0]
		}
	}
	if (Level >= 4000) {
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <MenuButton_Debounce+0x68>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001500:	d305      	bcc.n	800150e <MenuButton_Debounce+0x5a>
		Level = Acceptance_Level;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MenuButton_Debounce+0x68>)
 8001504:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001508:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
	}
	return ret;
 800150e:	79fb      	ldrb	r3, [r7, #7]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010c00 	.word	0x40010c00
 800151c:	20000000 	.word	0x20000000

08001520 <setTimer>:

void setTimer(uint32_t *timer) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 8001528:	f000 fc9e 	bl	8001e68 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <checkTimer>:
uint8_t checkTimer(uint32_t *timer, uint32_t msTime) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime) ? ENABLE : DISABLE;
 8001548:	f000 fc8e 	bl	8001e68 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	bf34      	ite	cc
 800155a:	2301      	movcc	r3, #1
 800155c:	2300      	movcs	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001574:	2100      	movs	r1, #0
 8001576:	4850      	ldr	r0, [pc, #320]	; (80016b8 <StartDefaultTask+0x14c>)
 8001578:	f002 fcbc 	bl	8003ef4 <HAL_TIM_IC_Start_IT>
	/* Infinite loop */
	for (;;) {
		if (hMenuButton.buttonFlag.bit.B0) {
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <StartDefaultTask+0x150>)
 800157e:	799b      	ldrb	r3, [r3, #6]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01d      	beq.n	80015c6 <StartDefaultTask+0x5a>
			if (MenuButton_Debounce())//Apply de-bounce algorithm before taking any action
 800158a:	f7ff ff93 	bl	80014b4 <MenuButton_Debounce>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d018      	beq.n	80015c6 <StartDefaultTask+0x5a>
			{
				hMenuButton.buttonFlag.bit.B0 = RESET;	//Reset interrupt flag
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <StartDefaultTask+0x150>)
 8001596:	7993      	ldrb	r3, [r2, #6]
 8001598:	f36f 0300 	bfc	r3, #0, #1
 800159c:	7193      	strb	r3, [r2, #6]

				if (hMenuButton.buttonTimerEnable != SET)//Start timer when the menu button gets pressed for the first time
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <StartDefaultTask+0x150>)
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <StartDefaultTask+0x54>
						{
					hMenuButton.buttonTimerEnable = SET;//Enable software timer
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <StartDefaultTask+0x150>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	711a      	strb	r2, [r3, #4]
					hMenuButton.buttonStatus = MenuButtonStatus_oneClick;//The menu button has been pressed for one time
 80015b2:	4b42      	ldr	r3, [pc, #264]	; (80016bc <StartDefaultTask+0x150>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	715a      	strb	r2, [r3, #5]
					setTimer(&hMenuButton.buttonTimer);	//Start software timer
 80015b8:	4840      	ldr	r0, [pc, #256]	; (80016bc <StartDefaultTask+0x150>)
 80015ba:	f7ff ffb1 	bl	8001520 <setTimer>
 80015be:	e002      	b.n	80015c6 <StartDefaultTask+0x5a>
				} else {
					hMenuButton.buttonStatus = MenuButtonStatus_doubleClick;//If the timer is already started this means that the button is pressed for the second time
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <StartDefaultTask+0x150>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	715a      	strb	r2, [r3, #5]
				}
			}
		}
		if ((checkTimer(&hMenuButton.buttonTimer,
				5 * hMenuButton.buttonHeldPressedCounter))
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <StartDefaultTask+0x150>)
 80015c8:	79db      	ldrb	r3, [r3, #7]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
		if ((checkTimer(&hMenuButton.buttonTimer,
 80015d2:	4619      	mov	r1, r3
 80015d4:	4839      	ldr	r0, [pc, #228]	; (80016bc <StartDefaultTask+0x150>)
 80015d6:	f7ff ffb0 	bl	800153a <checkTimer>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01a      	beq.n	8001616 <StartDefaultTask+0xaa>
				&& (hMenuButton.buttonStatus == MenuButtonStatus_oneClick)) {//If the menu button has been pressed, take logic sample every 10 ms from the button read pin
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <StartDefaultTask+0x150>)
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d116      	bne.n	8001616 <StartDefaultTask+0xaa>
			if (!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))//To check if the button is still pressed
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4835      	ldr	r0, [pc, #212]	; (80016c0 <StartDefaultTask+0x154>)
 80015ec:	f001 fc64 	bl	8002eb8 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <StartDefaultTask+0x96>
					{
				++hMenuButton.buttonHeldPressedCounter;	//Increment samples number
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <StartDefaultTask+0x150>)
 80015f8:	79db      	ldrb	r3, [r3, #7]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <StartDefaultTask+0x150>)
 8001600:	71da      	strb	r2, [r3, #7]
			}
			hMenuButton.buttonStatus =
					(hMenuButton.buttonHeldPressedCounter >= 65) ?
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <StartDefaultTask+0x150>)
 8001604:	79db      	ldrb	r3, [r3, #7]
							MenuButtonStatus_heldPressed :
 8001606:	2b40      	cmp	r3, #64	; 0x40
 8001608:	d802      	bhi.n	8001610 <StartDefaultTask+0xa4>
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <StartDefaultTask+0x150>)
 800160c:	795b      	ldrb	r3, [r3, #5]
 800160e:	e000      	b.n	8001612 <StartDefaultTask+0xa6>
 8001610:	2302      	movs	r3, #2
			hMenuButton.buttonStatus =
 8001612:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <StartDefaultTask+0x150>)
 8001614:	7153      	strb	r3, [r2, #5]
							hMenuButton.buttonStatus;
		}					//If the button is held pressed change button status
		if ((checkTimer(&hMenuButton.buttonTimer, 350))
 8001616:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800161a:	4828      	ldr	r0, [pc, #160]	; (80016bc <StartDefaultTask+0x150>)
 800161c:	f7ff ff8d 	bl	800153a <checkTimer>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0aa      	beq.n	800157c <StartDefaultTask+0x10>
				&& hMenuButton.buttonTimerEnable) {	//Take decision after 300 ms whether one click, double click or held pressed event has occured
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <StartDefaultTask+0x150>)
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0a6      	beq.n	800157c <StartDefaultTask+0x10>
			switch (hMenuButton.buttonStatus) {
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <StartDefaultTask+0x150>)
 8001630:	795b      	ldrb	r3, [r3, #5]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d835      	bhi.n	80016a2 <StartDefaultTask+0x136>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <StartDefaultTask+0xd0>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001661 	.word	0x08001661
 8001644:	08001693 	.word	0x08001693
 8001648:	080016a3 	.word	0x080016a3
			case MenuButtonStatus_oneClick:
				printf("oneClick \r\n");
 800164c:	481d      	ldr	r0, [pc, #116]	; (80016c4 <StartDefaultTask+0x158>)
 800164e:	f006 fa13 	bl	8007a78 <puts>
				pwmData[0] += 1; // Уменьшаем значение pwmData[0] на -1
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <StartDefaultTask+0x15c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <StartDefaultTask+0x15c>)
 800165c:	801a      	strh	r2, [r3, #0]
				break;
 800165e:	e020      	b.n	80016a2 <StartDefaultTask+0x136>
			case MenuButtonStatus_doubleClick:
				printf("doubleClick \r\n");
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <StartDefaultTask+0x160>)
 8001662:	f006 fa09 	bl	8007a78 <puts>
				if (pwmData[0] >= 100) {
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <StartDefaultTask+0x15c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b63      	cmp	r3, #99	; 0x63
 800166c:	d903      	bls.n	8001676 <StartDefaultTask+0x10a>
					pwmData[0] = 100;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <StartDefaultTask+0x15c>)
 8001670:	2264      	movs	r2, #100	; 0x64
 8001672:	801a      	strh	r2, [r3, #0]
					pwmData[0] += 100; // Увеличиваем значение pwmData[0] на +3
					if (pwmData[0] >= 100) {
						pwmData[0] = 100;
					}
				}
				break;
 8001674:	e014      	b.n	80016a0 <StartDefaultTask+0x134>
					pwmData[0] += 100; // Увеличиваем значение pwmData[0] на +3
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <StartDefaultTask+0x15c>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	3364      	adds	r3, #100	; 0x64
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <StartDefaultTask+0x15c>)
 8001680:	801a      	strh	r2, [r3, #0]
					if (pwmData[0] >= 100) {
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <StartDefaultTask+0x15c>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b63      	cmp	r3, #99	; 0x63
 8001688:	d90a      	bls.n	80016a0 <StartDefaultTask+0x134>
						pwmData[0] = 100;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <StartDefaultTask+0x15c>)
 800168c:	2264      	movs	r2, #100	; 0x64
 800168e:	801a      	strh	r2, [r3, #0]
				break;
 8001690:	e006      	b.n	80016a0 <StartDefaultTask+0x134>
			case MenuButtonStatus_heldPressed:
				printf("heldPressed & pwmData[0] = 0\r\n");
 8001692:	480f      	ldr	r0, [pc, #60]	; (80016d0 <StartDefaultTask+0x164>)
 8001694:	f006 f9f0 	bl	8007a78 <puts>
				pwmData[0] = 0;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <StartDefaultTask+0x15c>)
 800169a:	2200      	movs	r2, #0
 800169c:	801a      	strh	r2, [r3, #0]
				break;
 800169e:	e000      	b.n	80016a2 <StartDefaultTask+0x136>
				break;
 80016a0:	bf00      	nop
			case MenuButtonStatus_notPressed:
				break;

			}
			hMenuButton.buttonTimerEnable = RESET;		//Disable software timer
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <StartDefaultTask+0x150>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	711a      	strb	r2, [r3, #4]
			hMenuButton.buttonHeldPressedCounter = RESET;		//Reset counter
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <StartDefaultTask+0x150>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	71da      	strb	r2, [r3, #7]
			hMenuButton.buttonStatus = MenuButtonStatus_notPressed;
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <StartDefaultTask+0x150>)
 80016b0:	2203      	movs	r2, #3
 80016b2:	715a      	strb	r2, [r3, #5]
		if (hMenuButton.buttonFlag.bit.B0) {
 80016b4:	e762      	b.n	800157c <StartDefaultTask+0x10>
 80016b6:	bf00      	nop
 80016b8:	20000688 	.word	0x20000688
 80016bc:	20001580 	.word	0x20001580
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	08009df8 	.word	0x08009df8
 80016c8:	200004b4 	.word	0x200004b4
 80016cc:	08009e04 	.word	0x08009e04
 80016d0:	08009e14 	.word	0x08009e14

080016d4 <Start_PWM_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_PWM_Task */
void Start_PWM_Task(void const * argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {
//	    value = (adc_buf[0] - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; // Function map
//	    pwmData[0] = value;
//	    pwmData[0] = value;
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, 1);
 80016dc:	2301      	movs	r3, #1
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <Start_PWM_Task+0x2c>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <Start_PWM_Task+0x30>)
 80016e4:	f002 fa1c 	bl	8003b20 <HAL_TIM_PWM_Start_DMA>
		printf("pwmData[0] = %d\r\n", pwmData[0]);
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <Start_PWM_Task+0x2c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <Start_PWM_Task+0x34>)
 80016f0:	f006 f93c 	bl	800796c <iprintf>
		osDelay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f004 f96e 	bl	80059d8 <osDelay>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, 1);
 80016fc:	e7ee      	b.n	80016dc <Start_PWM_Task+0x8>
 80016fe:	bf00      	nop
 8001700:	200004b4 	.word	0x200004b4
 8001704:	200005f8 	.word	0x200005f8
 8001708:	08009e34 	.word	0x08009e34

0800170c <Start_ADC_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ADC_Task */
void Start_ADC_Task(void const * argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ADC_Task */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LED);
 8001714:	2264      	movs	r2, #100	; 0x64
 8001716:	4904      	ldr	r1, [pc, #16]	; (8001728 <Start_ADC_Task+0x1c>)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <Start_ADC_Task+0x20>)
 800171a:	f000 fc87 	bl	800202c <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
//	  printf("adc_buf = %u\r\n",(unsigned int)adc_buf[0]);
		osDelay(1000);
 800171e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001722:	f004 f959 	bl	80059d8 <osDelay>
 8001726:	e7fa      	b.n	800171e <Start_ADC_Task+0x12>
 8001728:	200004b8 	.word	0x200004b8
 800172c:	20000584 	.word	0x20000584

08001730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001742:	f000 fb7f 	bl	8001e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40000800 	.word	0x40000800

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_MspInit+0x68>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_MspInit+0x68>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6193      	str	r3, [r2, #24]
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_MspInit+0x68>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_MspInit+0x68>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_MspInit+0x68>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_MspInit+0x68>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	210f      	movs	r1, #15
 800179a:	f06f 0001 	mvn.w	r0, #1
 800179e:	f000 ffee 	bl	800277e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_MspInit+0x6c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_MspInit+0x6c>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_ADC_MspInit+0xbc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d149      	bne.n	8001884 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_ADC_MspInit+0xc0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_ADC_MspInit+0xc0>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_ADC_MspInit+0xc0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_ADC_MspInit+0xc0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_ADC_MspInit+0xc0>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_ADC_MspInit+0xc0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001820:	2301      	movs	r3, #1
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	4819      	ldr	r0, [pc, #100]	; (8001894 <HAL_ADC_MspInit+0xc4>)
 8001830:	f001 f9be 	bl	8002bb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 8001836:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_ADC_MspInit+0xcc>)
 8001838:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 800185e:	2220      	movs	r2, #32
 8001860:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 800186a:	f000 ffb3 	bl	80027d4 <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001874:	f7ff ff6e 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 800187c:	621a      	str	r2, [r3, #32]
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_ADC_MspInit+0xc8>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40012400 	.word	0x40012400
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800
 8001898:	200005b4 	.word	0x200005b4
 800189c:	40020008 	.word	0x40020008

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_TIM_Base_MspInit+0xa8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d134      	bne.n	800191c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_TIM_Base_MspInit+0xac>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_TIM_Base_MspInit+0xac>)
 80018b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018bc:	6193      	str	r3, [r2, #24]
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_TIM_Base_MspInit+0xac>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018cc:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018d2:	2210      	movs	r2, #16
 80018d4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018f4:	2220      	movs	r2, #32
 80018f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 8001900:	f000 ff68 	bl	80027d4 <HAL_DMA_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800190a:	f7ff ff23 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_TIM_Base_MspInit+0xb0>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191a:	e010      	b.n	800193e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d10b      	bne.n	800193e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_TIM_Base_MspInit+0xac>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_TIM_Base_MspInit+0xac>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_TIM_Base_MspInit+0xac>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40021000 	.word	0x40021000
 8001950:	200006d0 	.word	0x200006d0
 8001954:	4002001c 	.word	0x4002001c

08001958 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_TIM_IC_MspInit+0x80>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12b      	bne.n	80019d0 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_TIM_IC_MspInit+0x84>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_TIM_IC_MspInit+0x84>)
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	61d3      	str	r3, [r2, #28]
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_TIM_IC_MspInit+0x84>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_TIM_IC_MspInit+0x84>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_TIM_IC_MspInit+0x84>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_TIM_IC_MspInit+0x84>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4619      	mov	r1, r3
 80019ba:	4809      	ldr	r0, [pc, #36]	; (80019e0 <HAL_TIM_IC_MspInit+0x88>)
 80019bc:	f001 f8f8 	bl	8002bb0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2105      	movs	r1, #5
 80019c4:	201d      	movs	r0, #29
 80019c6:	f000 feda 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019ca:	201d      	movs	r0, #29
 80019cc:	f000 fef3 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010800 	.word	0x40010800

080019e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0x5c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d118      	bne.n	8001a36 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_TIM_MspPostInit+0x64>)
 8001a32:	f001 f8bd 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010800 	.word	0x40010800

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d131      	bne.n	8001ad0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <HAL_UART_MspInit+0x94>)
 8001ab2:	f001 f87d 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_UART_MspInit+0x94>)
 8001acc:	f001 f870 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	; 0x38
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_InitTick+0xe8>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <HAL_InitTick+0xe8>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_InitTick+0xe8>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b12:	f107 0210 	add.w	r2, r7, #16
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fe01 	bl	8003724 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f001 fdd2 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8001b30:	6378      	str	r0, [r7, #52]	; 0x34
 8001b32:	e004      	b.n	8001b3e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b34:	f001 fdce 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b40:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_InitTick+0xec>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0c9b      	lsrs	r3, r3, #18
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_InitTick+0xf4>)
 8001b50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b58:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b74:	f001 feda 	bl	800392c <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11b      	bne.n	8001bbe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001b86:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <HAL_InitTick+0xf0>)
 8001b88:	f001 ff20 	bl	80039cc <HAL_TIM_Base_Start_IT>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d111      	bne.n	8001bbe <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b9a:	201e      	movs	r0, #30
 8001b9c:	f000 fe0b 	bl	80027b6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	d808      	bhi.n	8001bb8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	201e      	movs	r0, #30
 8001bac:	f000 fde7 	bl	800277e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_InitTick+0xf8>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e002      	b.n	8001bbe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3738      	adds	r7, #56	; 0x38
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	20001598 	.word	0x20001598
 8001bd8:	40000800 	.word	0x40000800
 8001bdc:	20000008 	.word	0x20000008

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <DMA1_Channel1_IRQHandler+0x10>)
 8001c12:	f000 fe99 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200005b4 	.word	0x200005b4

08001c20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <DMA1_Channel2_IRQHandler+0x10>)
 8001c26:	f000 fe8f 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200006d0 	.word	0x200006d0

08001c34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	hMenuButton.buttonFlag.bit.B0 = SET; //Flag bit0 is set for interrupt detection flag
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <EXTI9_5_IRQHandler+0x18>)
 8001c3a:	7993      	ldrb	r3, [r2, #6]
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	7193      	strb	r3, [r2, #6]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(menu_button_Pin);
 8001c42:	2080      	movs	r0, #128	; 0x80
 8001c44:	f001 f950 	bl	8002ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20001580 	.word	0x20001580

08001c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM3_IRQHandler+0x10>)
 8001c56:	f002 fafb 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000688 	.word	0x20000688

08001c64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM4_IRQHandler+0x10>)
 8001c6a:	f002 faf1 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20001598 	.word	0x20001598

08001c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return 1;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <_kill>:

int _kill(int pid, int sig)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c90:	f005 f83e 	bl	8006d10 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2216      	movs	r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
  return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_exit>:

void _exit (int status)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffe7 	bl	8001c86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb8:	e7fe      	b.n	8001cb8 <_exit+0x12>

08001cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e00a      	b.n	8001ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf0      	blt.n	8001ccc <_read+0x12>
  }

  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_isatty>:

int _isatty(int file)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <_sbrk+0x5c>)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <_sbrk+0x60>)
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_sbrk+0x64>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <_sbrk+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d207      	bcs.n	8001d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d84:	f004 ffc4 	bl	8006d10 <__errno>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d92:	e009      	b.n	8001da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <_sbrk+0x64>)
 8001da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20005000 	.word	0x20005000
 8001db4:	00000400 	.word	0x00000400
 8001db8:	200015e0 	.word	0x200015e0
 8001dbc:	20002348 	.word	0x20002348

08001dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001df2:	f7ff ffe5 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df6:	f005 f887 	bl	8006f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7ff f87d 	bl	8000ef8 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e08:	0800a25c 	.word	0x0800a25c
  ldr r2, =_sbss
 8001e0c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e10:	20002344 	.word	0x20002344

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fc9d 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f7ff fe58 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fc94 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	2000000c 	.word	0x2000000c
 8001e64:	200015e4 	.word	0x200015e4

08001e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	200015e4 	.word	0x200015e4

08001e7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0be      	b.n	800201c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fc88 	bl	80017d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 faff 	bl	80024c4 <ADC_ConversionStop_Disable>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8099 	bne.w	800200a <HAL_ADC_Init+0x18e>
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8095 	bne.w	800200a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee8:	f023 0302 	bic.w	r3, r3, #2
 8001eec:	f043 0202 	orr.w	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001efc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7b1b      	ldrb	r3, [r3, #12]
 8001f02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f14:	d003      	beq.n	8001f1e <HAL_ADC_Init+0xa2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_ADC_Init+0xa8>
 8001f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_Init+0xaa>
 8001f24:	2300      	movs	r3, #0
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7d1b      	ldrb	r3, [r3, #20]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d119      	bne.n	8001f68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7b1b      	ldrb	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	035a      	lsls	r2, r3, #13
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e00b      	b.n	8001f68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_ADC_Init+0x1a8>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f98:	d003      	beq.n	8001fa2 <HAL_ADC_Init+0x126>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d104      	bne.n	8001fac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	051b      	lsls	r3, r3, #20
 8001faa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_ADC_Init+0x1ac>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10b      	bne.n	8001fe8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe6:	e018      	b.n	800201a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	f023 0312 	bic.w	r3, r3, #18
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002008:	e007      	b.n	800201a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f043 0210 	orr.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800201a:	7dfb      	ldrb	r3, [r7, #23]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	ffe1f7fd 	.word	0xffe1f7fd
 8002028:	ff1f0efe 	.word	0xff1f0efe

0800202c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a64      	ldr	r2, [pc, #400]	; (80021d4 <HAL_ADC_Start_DMA+0x1a8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_ADC_Start_DMA+0x24>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_ADC_Start_DMA+0x1ac>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d106      	bne.n	800205e <HAL_ADC_Start_DMA+0x32>
 8002050:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <HAL_ADC_Start_DMA+0x1a8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 80b3 	bne.w	80021c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_Start_DMA+0x40>
 8002068:	2302      	movs	r3, #2
 800206a:	e0ae      	b.n	80021ca <HAL_ADC_Start_DMA+0x19e>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f9cb 	bl	8002410 <ADC_Enable>
 800207a:	4603      	mov	r3, r0
 800207c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 809a 	bne.w	80021ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4e      	ldr	r2, [pc, #312]	; (80021d8 <HAL_ADC_Start_DMA+0x1ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_Start_DMA+0x84>
 80020a4:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_ADC_Start_DMA+0x1a8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d115      	bne.n	80020dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d026      	beq.n	8002118 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020da:	e01d      	b.n	8002118 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <HAL_ADC_Start_DMA+0x1a8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_ADC_Start_DMA+0xd0>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a38      	ldr	r2, [pc, #224]	; (80021d8 <HAL_ADC_Start_DMA+0x1ac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10d      	bne.n	8002118 <HAL_ADC_Start_DMA+0xec>
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_ADC_Start_DMA+0x1a8>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002110:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f023 0206 	bic.w	r2, r3, #6
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002130:	e002      	b.n	8002138 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a25      	ldr	r2, [pc, #148]	; (80021dc <HAL_ADC_Start_DMA+0x1b0>)
 8002146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_ADC_Start_DMA+0x1b4>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_ADC_Start_DMA+0x1b8>)
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0202 	mvn.w	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a18      	ldr	r0, [r3, #32]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	334c      	adds	r3, #76	; 0x4c
 800217c:	4619      	mov	r1, r3
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f000 fb81 	bl	8002888 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002190:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002194:	d108      	bne.n	80021a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021a6:	e00f      	b.n	80021c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021b8:	e006      	b.n	80021c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80021c2:	e001      	b.n	80021c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40012400 	.word	0x40012400
 80021d8:	40012800 	.word	0x40012800
 80021dc:	08002547 	.word	0x08002547
 80021e0:	080025c3 	.word	0x080025c3
 80021e4:	080025df 	.word	0x080025df

080021e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x20>
 800223c:	2302      	movs	r3, #2
 800223e:	e0dc      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1da>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b06      	cmp	r3, #6
 800224e:	d81c      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b05      	subs	r3, #5
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
 8002288:	e03c      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d81c      	bhi.n	80022cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b23      	subs	r3, #35	; 0x23
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4019      	ands	r1, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b23      	subs	r3, #35	; 0x23
 80022be:	fa00 f203 	lsl.w	r2, r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ca:	e01b      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b41      	subs	r3, #65	; 0x41
 80022de:	221f      	movs	r2, #31
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4019      	ands	r1, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b41      	subs	r3, #65	; 0x41
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b09      	cmp	r3, #9
 800230a:	d91c      	bls.n	8002346 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68d9      	ldr	r1, [r3, #12]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	3b1e      	subs	r3, #30
 8002338:	fa00 f203 	lsl.w	r2, r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e019      	b.n	800237a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6919      	ldr	r1, [r3, #16]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	2207      	movs	r2, #7
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	4019      	ands	r1, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6898      	ldr	r0, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d003      	beq.n	800238a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002386:	2b11      	cmp	r3, #17
 8002388:	d132      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_ADC_ConfigChannel+0x1e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d125      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d126      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d11a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_ADC_ConfigChannel+0x1e8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <HAL_ADC_ConfigChannel+0x1ec>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9a      	lsrs	r2, r3, #18
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x1b2>
 80023de:	e007      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40012400 	.word	0x40012400
 8002408:	20000004 	.word	0x20000004
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d040      	beq.n	80024b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <ADC_Enable+0xac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <ADC_Enable+0xb0>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800244c:	e002      	b.n	8002454 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800245a:	f7ff fd05 	bl	8001e68 <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002460:	e01f      	b.n	80024a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002462:	f7ff fd01 	bl	8001e68 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d918      	bls.n	80024a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d011      	beq.n	80024a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e007      	b.n	80024b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d1d8      	bne.n	8002462 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000004 	.word	0x20000004
 80024c0:	431bde83 	.word	0x431bde83

080024c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d12e      	bne.n	800253c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ee:	f7ff fcbb 	bl	8001e68 <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024f4:	e01b      	b.n	800252e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024f6:	f7ff fcb7 	bl	8001e68 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d914      	bls.n	800252e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e007      	b.n	800253e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d0dc      	beq.n	80024f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800255c:	2b00      	cmp	r3, #0
 800255e:	d127      	bne.n	80025b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002576:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800257a:	d115      	bne.n	80025a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fe1d 	bl	80021e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025ae:	e004      	b.n	80025ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff fe12 	bl	80021fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	f043 0204 	orr.w	r2, r3, #4
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff fe01 	bl	800220c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <__NVIC_SetPriorityGrouping>:
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <__NVIC_EnableIRQ+0x34>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff4f 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002790:	f7ff ff64 	bl	800265c <__NVIC_GetPriorityGrouping>
 8002794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ffb2 	bl	8002704 <NVIC_EncodePriority>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff81 	bl	80026b0 <__NVIC_SetPriority>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff57 	bl	8002678 <__NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e043      	b.n	8002872 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_DMA_Init+0xa8>)
 80027f2:	4413      	add	r3, r2
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_DMA_Init+0xac>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	009a      	lsls	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1f      	ldr	r2, [pc, #124]	; (8002884 <HAL_DMA_Init+0xb0>)
 8002806:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800281e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	bffdfff8 	.word	0xbffdfff8
 8002880:	cccccccd 	.word	0xcccccccd
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Start_IT+0x20>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e04a      	b.n	800293e <HAL_DMA_Start_IT+0xb6>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d13a      	bne.n	8002930 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f938 	bl	8002b54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 020e 	orr.w	r2, r2, #14
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e00f      	b.n	800291e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0204 	bic.w	r2, r2, #4
 800290c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 020a 	orr.w	r2, r2, #10
 800291c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e005      	b.n	800293c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	2204      	movs	r2, #4
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d04f      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xc8>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d04a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a66      	ldr	r2, [pc, #408]	; (8002b38 <HAL_DMA_IRQHandler+0x1f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d029      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xae>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_DMA_IRQHandler+0x1f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xaa>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <HAL_DMA_IRQHandler+0x1f8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01a      	beq.n	80029ec <HAL_DMA_IRQHandler+0xa4>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a62      	ldr	r2, [pc, #392]	; (8002b44 <HAL_DMA_IRQHandler+0x1fc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d012      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x9e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_DMA_IRQHandler+0x200>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x98>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <HAL_DMA_IRQHandler+0x204>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d102      	bne.n	80029da <HAL_DMA_IRQHandler+0x92>
 80029d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029d8:	e00e      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029de:	e00b      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029e4:	e008      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ea:	e005      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	e002      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029f2:	2340      	movs	r3, #64	; 0x40
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029f6:	2304      	movs	r3, #4
 80029f8:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <HAL_DMA_IRQHandler+0x208>)
 80029fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8094 	beq.w	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a0e:	e08e      	b.n	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2202      	movs	r2, #2
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d056      	beq.n	8002ace <HAL_DMA_IRQHandler+0x186>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d051      	beq.n	8002ace <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020a 	bic.w	r2, r2, #10
 8002a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <HAL_DMA_IRQHandler+0x1f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d029      	beq.n	8002aae <HAL_DMA_IRQHandler+0x166>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a37      	ldr	r2, [pc, #220]	; (8002b3c <HAL_DMA_IRQHandler+0x1f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x162>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a35      	ldr	r2, [pc, #212]	; (8002b40 <HAL_DMA_IRQHandler+0x1f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x15c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <HAL_DMA_IRQHandler+0x1fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x156>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a32      	ldr	r2, [pc, #200]	; (8002b48 <HAL_DMA_IRQHandler+0x200>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x150>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_DMA_IRQHandler+0x204>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d102      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x14a>
 8002a8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a90:	e00e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	e00b      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	e008      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa2:	e005      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa8:	e002      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_DMA_IRQHandler+0x208>)
 8002ab2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d034      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002acc:	e02f      	b.n	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d028      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x1e8>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 020e 	bic.w	r2, r2, #14
 8002af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
    }
  }
  return;
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
}
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40020008 	.word	0x40020008
 8002b3c:	4002001c 	.word	0x4002001c
 8002b40:	40020030 	.word	0x40020030
 8002b44:	40020044 	.word	0x40020044
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	4002006c 	.word	0x4002006c
 8002b50:	40020000 	.word	0x40020000

08002b54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d108      	bne.n	8002b94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b92:	e007      	b.n	8002ba4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b08b      	sub	sp, #44	; 0x2c
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc2:	e169      	b.n	8002e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 8158 	bne.w	8002e92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a9a      	ldr	r2, [pc, #616]	; (8002e50 <HAL_GPIO_Init+0x2a0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d05e      	beq.n	8002caa <HAL_GPIO_Init+0xfa>
 8002bec:	4a98      	ldr	r2, [pc, #608]	; (8002e50 <HAL_GPIO_Init+0x2a0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d875      	bhi.n	8002cde <HAL_GPIO_Init+0x12e>
 8002bf2:	4a98      	ldr	r2, [pc, #608]	; (8002e54 <HAL_GPIO_Init+0x2a4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d058      	beq.n	8002caa <HAL_GPIO_Init+0xfa>
 8002bf8:	4a96      	ldr	r2, [pc, #600]	; (8002e54 <HAL_GPIO_Init+0x2a4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d86f      	bhi.n	8002cde <HAL_GPIO_Init+0x12e>
 8002bfe:	4a96      	ldr	r2, [pc, #600]	; (8002e58 <HAL_GPIO_Init+0x2a8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d052      	beq.n	8002caa <HAL_GPIO_Init+0xfa>
 8002c04:	4a94      	ldr	r2, [pc, #592]	; (8002e58 <HAL_GPIO_Init+0x2a8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d869      	bhi.n	8002cde <HAL_GPIO_Init+0x12e>
 8002c0a:	4a94      	ldr	r2, [pc, #592]	; (8002e5c <HAL_GPIO_Init+0x2ac>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d04c      	beq.n	8002caa <HAL_GPIO_Init+0xfa>
 8002c10:	4a92      	ldr	r2, [pc, #584]	; (8002e5c <HAL_GPIO_Init+0x2ac>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d863      	bhi.n	8002cde <HAL_GPIO_Init+0x12e>
 8002c16:	4a92      	ldr	r2, [pc, #584]	; (8002e60 <HAL_GPIO_Init+0x2b0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d046      	beq.n	8002caa <HAL_GPIO_Init+0xfa>
 8002c1c:	4a90      	ldr	r2, [pc, #576]	; (8002e60 <HAL_GPIO_Init+0x2b0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d85d      	bhi.n	8002cde <HAL_GPIO_Init+0x12e>
 8002c22:	2b12      	cmp	r3, #18
 8002c24:	d82a      	bhi.n	8002c7c <HAL_GPIO_Init+0xcc>
 8002c26:	2b12      	cmp	r3, #18
 8002c28:	d859      	bhi.n	8002cde <HAL_GPIO_Init+0x12e>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_GPIO_Init+0x80>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002cab 	.word	0x08002cab
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c97 	.word	0x08002c97
 8002c3c:	08002cd9 	.word	0x08002cd9
 8002c40:	08002cdf 	.word	0x08002cdf
 8002c44:	08002cdf 	.word	0x08002cdf
 8002c48:	08002cdf 	.word	0x08002cdf
 8002c4c:	08002cdf 	.word	0x08002cdf
 8002c50:	08002cdf 	.word	0x08002cdf
 8002c54:	08002cdf 	.word	0x08002cdf
 8002c58:	08002cdf 	.word	0x08002cdf
 8002c5c:	08002cdf 	.word	0x08002cdf
 8002c60:	08002cdf 	.word	0x08002cdf
 8002c64:	08002cdf 	.word	0x08002cdf
 8002c68:	08002cdf 	.word	0x08002cdf
 8002c6c:	08002cdf 	.word	0x08002cdf
 8002c70:	08002cdf 	.word	0x08002cdf
 8002c74:	08002c8d 	.word	0x08002c8d
 8002c78:	08002ca1 	.word	0x08002ca1
 8002c7c:	4a79      	ldr	r2, [pc, #484]	; (8002e64 <HAL_GPIO_Init+0x2b4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c82:	e02c      	b.n	8002cde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	623b      	str	r3, [r7, #32]
          break;
 8002c8a:	e029      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	3304      	adds	r3, #4
 8002c92:	623b      	str	r3, [r7, #32]
          break;
 8002c94:	e024      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	623b      	str	r3, [r7, #32]
          break;
 8002c9e:	e01f      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	623b      	str	r3, [r7, #32]
          break;
 8002ca8:	e01a      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	623b      	str	r3, [r7, #32]
          break;
 8002cb6:	e013      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	611a      	str	r2, [r3, #16]
          break;
 8002cca:	e009      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	615a      	str	r2, [r3, #20]
          break;
 8002cd6:	e003      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
          break;
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x130>
          break;
 8002cde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2bff      	cmp	r3, #255	; 0xff
 8002ce4:	d801      	bhi.n	8002cea <HAL_GPIO_Init+0x13a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	e001      	b.n	8002cee <HAL_GPIO_Init+0x13e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d802      	bhi.n	8002cfc <HAL_GPIO_Init+0x14c>
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_Init+0x152>
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	3b08      	subs	r3, #8
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	210f      	movs	r1, #15
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	6a39      	ldr	r1, [r7, #32]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80b1 	beq.w	8002e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d30:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <HAL_GPIO_Init+0x2b8>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a4c      	ldr	r2, [pc, #304]	; (8002e68 <HAL_GPIO_Init+0x2b8>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_GPIO_Init+0x2b8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d48:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <HAL_GPIO_Init+0x2bc>)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <HAL_GPIO_Init+0x2c0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <HAL_GPIO_Init+0x1ec>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3f      	ldr	r2, [pc, #252]	; (8002e74 <HAL_GPIO_Init+0x2c4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00d      	beq.n	8002d98 <HAL_GPIO_Init+0x1e8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3e      	ldr	r2, [pc, #248]	; (8002e78 <HAL_GPIO_Init+0x2c8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <HAL_GPIO_Init+0x1e4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3d      	ldr	r2, [pc, #244]	; (8002e7c <HAL_GPIO_Init+0x2cc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <HAL_GPIO_Init+0x1e0>
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e006      	b.n	8002d9e <HAL_GPIO_Init+0x1ee>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e004      	b.n	8002d9e <HAL_GPIO_Init+0x1ee>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e002      	b.n	8002d9e <HAL_GPIO_Init+0x1ee>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_GPIO_Init+0x1ee>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	f002 0203 	and.w	r2, r2, #3
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	4093      	lsls	r3, r2
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dae:	492f      	ldr	r1, [pc, #188]	; (8002e6c <HAL_GPIO_Init+0x2bc>)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	492c      	ldr	r1, [pc, #176]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	4928      	ldr	r1, [pc, #160]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4922      	ldr	r1, [pc, #136]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	491e      	ldr	r1, [pc, #120]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4918      	ldr	r1, [pc, #96]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4914      	ldr	r1, [pc, #80]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d021      	beq.n	8002e84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60cb      	str	r3, [r1, #12]
 8002e4c:	e021      	b.n	8002e92 <HAL_GPIO_Init+0x2e2>
 8002e4e:	bf00      	nop
 8002e50:	10320000 	.word	0x10320000
 8002e54:	10310000 	.word	0x10310000
 8002e58:	10220000 	.word	0x10220000
 8002e5c:	10210000 	.word	0x10210000
 8002e60:	10120000 	.word	0x10120000
 8002e64:	10110000 	.word	0x10110000
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40010800 	.word	0x40010800
 8002e74:	40010c00 	.word	0x40010c00
 8002e78:	40011000 	.word	0x40011000
 8002e7c:	40011400 	.word	0x40011400
 8002e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	4909      	ldr	r1, [pc, #36]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	3301      	adds	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f47f ae8e 	bne.w	8002bc4 <HAL_GPIO_Init+0x14>
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	372c      	adds	r7, #44	; 0x2c
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e001      	b.n	8002eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f806 	bl	8002f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e272      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8087 	beq.w	800305a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f58:	4b8f      	ldr	r3, [pc, #572]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d112      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5e>
 8002f64:	4b8c      	ldr	r3, [pc, #560]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06c      	beq.n	8003058 <HAL_RCC_OscConfig+0x12c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d168      	bne.n	8003058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e24c      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x76>
 8002f94:	4b80      	ldr	r3, [pc, #512]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a7f      	ldr	r2, [pc, #508]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e02e      	b.n	8003000 <HAL_RCC_OscConfig+0xd4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x98>
 8002faa:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7a      	ldr	r2, [pc, #488]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b78      	ldr	r3, [pc, #480]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a77      	ldr	r2, [pc, #476]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xd4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xbc>
 8002fce:	4b72      	ldr	r3, [pc, #456]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a71      	ldr	r2, [pc, #452]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xd4>
 8002fe8:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6a      	ldr	r2, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b68      	ldr	r3, [pc, #416]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a67      	ldr	r2, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff2e 	bl	8001e68 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe ff2a 	bl	8001e68 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e200      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xe4>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe ff1a 	bl	8001e68 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe ff16 	bl	8001e68 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1ec      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x10c>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003072:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x18c>
 800307e:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x176>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1c0      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4939      	ldr	r1, [pc, #228]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe fecf 	bl	8001e68 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fecb 	bl	8001e68 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1a1      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4927      	ldr	r1, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe feae 	bl	8001e68 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe feaa 	bl	8001e68 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e180      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03a      	beq.n	80031b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d019      	beq.n	8003176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_RCC_OscConfig+0x274>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003148:	f7fe fe8e 	bl	8001e68 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe fe8a 	bl	8001e68 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e160      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800316e:	2001      	movs	r0, #1
 8003170:	f000 fb08 	bl	8003784 <RCC_Delay>
 8003174:	e01c      	b.n	80031b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_OscConfig+0x274>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fe74 	bl	8001e68 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003182:	e00f      	b.n	80031a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003184:	f7fe fe70 	bl	8001e68 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d908      	bls.n	80031a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e146      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	42420000 	.word	0x42420000
 80031a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e9      	bne.n	8003184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a6 	beq.w	800330a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c2:	4b8b      	ldr	r3, [pc, #556]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4a87      	ldr	r2, [pc, #540]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	61d3      	str	r3, [r2, #28]
 80031da:	4b85      	ldr	r3, [pc, #532]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d118      	bne.n	8003228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f6:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7e      	ldr	r2, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 80031fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003202:	f7fe fe31 	bl	8001e68 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fe fe2d 	bl	8001e68 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e103      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x312>
 8003230:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e02d      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x334>
 8003246:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	e01c      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x356>
 8003268:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a60      	ldr	r2, [pc, #384]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	e00b      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
 8003282:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a5a      	ldr	r2, [pc, #360]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a57      	ldr	r2, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d015      	beq.n	80032ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fde1 	bl	8001e68 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe fddd 	bl	8001e68 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0b1      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ee      	beq.n	80032aa <HAL_RCC_OscConfig+0x37e>
 80032cc:	e014      	b.n	80032f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fdcb 	bl	8001e68 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fdc7 	bl	8001e68 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e09b      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ee      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8087 	beq.w	8003422 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d061      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d146      	bne.n	80033b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <HAL_RCC_OscConfig+0x4cc>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fe fd9b 	bl	8001e68 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fd97 	bl	8001e68 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e06d      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d108      	bne.n	8003370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4921      	ldr	r1, [pc, #132]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a19      	ldr	r1, [r3, #32]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	430b      	orrs	r3, r1
 8003382:	491b      	ldr	r1, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x4cc>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7fe fd6b 	bl	8001e68 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003396:	f7fe fd67 	bl	8001e68 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e03d      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x46a>
 80033b4:	e035      	b.n	8003422 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_OscConfig+0x4cc>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fd54 	bl	8001e68 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fd50 	bl	8001e68 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e026      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x498>
 80033e2:	e01e      	b.n	8003422 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e019      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_OscConfig+0x500>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	429a      	cmp	r2, r3
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0d0      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d910      	bls.n	8003474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 0207 	bic.w	r2, r3, #7
 800345a:	4965      	ldr	r1, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0b8      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d040      	beq.n	8003550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d115      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e073      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06b      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4936      	ldr	r1, [pc, #216]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003520:	f7fe fca2 	bl	8001e68 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fc9e 	bl	8001e68 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e053      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d210      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 0207 	bic.w	r2, r3, #7
 8003566:	4922      	ldr	r1, [pc, #136]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e032      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4916      	ldr	r1, [pc, #88]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035be:	f000 f821 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1cc>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fa80 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08009e60 	.word	0x08009e60
 80035fc:	20000004 	.word	0x20000004
 8003600:	20000008 	.word	0x20000008

08003604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b490      	push	{r4, r7}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800360c:	1d3c      	adds	r4, r7, #4
 800360e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003614:	f240 2301 	movw	r3, #513	; 0x201
 8003618:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d002      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x40>
 800363e:	2b08      	cmp	r3, #8
 8003640:	d003      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x46>
 8003642:	e02b      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003646:	623b      	str	r3, [r7, #32]
      break;
 8003648:	e02b      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	0c9b      	lsrs	r3, r3, #18
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3328      	adds	r3, #40	; 0x28
 8003654:	443b      	add	r3, r7
 8003656:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800365a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0c5b      	lsrs	r3, r3, #17
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	3328      	adds	r3, #40	; 0x28
 8003672:	443b      	add	r3, r7
 8003674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003678:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e004      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	623b      	str	r3, [r7, #32]
      break;
 800369a:	e002      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800369e:	623b      	str	r3, [r7, #32]
      break;
 80036a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a2:	6a3b      	ldr	r3, [r7, #32]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc90      	pop	{r4, r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	08009e48 	.word	0x08009e48
 80036b4:	40021000 	.word	0x40021000
 80036b8:	007a1200 	.word	0x007a1200
 80036bc:	003d0900 	.word	0x003d0900

080036c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c4:	4b02      	ldr	r3, [pc, #8]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff2 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08009e70 	.word	0x08009e70

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003700:	f7ff ffde 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0adb      	lsrs	r3, r3, #11
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	08009e70 	.word	0x08009e70

08003724 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	220f      	movs	r2, #15
 8003732:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0203 	and.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetClockConfig+0x5c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0207 	and.w	r2, r3, #7
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	40022000 	.word	0x40022000

08003784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <RCC_Delay+0x34>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <RCC_Delay+0x38>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0a5b      	lsrs	r3, r3, #9
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037a0:	bf00      	nop
  }
  while (Delay --);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e5a      	subs	r2, r3, #1
 80037a6:	60fa      	str	r2, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f9      	bne.n	80037a0 <RCC_Delay+0x1c>
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	20000004 	.word	0x20000004
 80037bc:	10624dd3 	.word	0x10624dd3

080037c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d07d      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e0:	4b4f      	ldr	r3, [pc, #316]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	61d3      	str	r3, [r2, #28]
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d118      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003814:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003820:	f7fe fb22 	bl	8001e68 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003826:	e008      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003828:	f7fe fb1e 	bl	8001e68 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e06d      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02e      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	429a      	cmp	r2, r3
 8003862:	d027      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe faed 	bl	8001e68 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe fae9 	bl	8001e68 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e036      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ee      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4917      	ldr	r1, [pc, #92]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	490b      	ldr	r1, [pc, #44]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
 8003928:	42420440 	.word	0x42420440

0800392c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e041      	b.n	80039c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd ffa4 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f001 f912 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e03a      	b.n	8003a5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_Base_Start_IT+0x98>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x58>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x58>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x58>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d111      	bne.n	8003a48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d010      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	e007      	b.n	8003a58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800

08003a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e041      	b.n	8003b06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f839 	bl	8003b0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f001 f870 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_TIM_PWM_Start_DMA+0x28>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e022      	b.n	8003b8e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d109      	bne.n	8003b62 <HAL_TIM_PWM_Start_DMA+0x42>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e015      	b.n	8003b8e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d109      	bne.n	8003b7c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e008      	b.n	8003b8e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	e14e      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_TIM_PWM_Start_DMA+0x90>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e022      	b.n	8003bf6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d109      	bne.n	8003bca <HAL_TIM_PWM_Start_DMA+0xaa>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e015      	b.n	8003bf6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d109      	bne.n	8003be4 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d024      	beq.n	8003c44 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start_DMA+0xea>
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e114      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start_DMA+0xfa>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e016      	b.n	8003c48 <HAL_TIM_PWM_Start_DMA+0x128>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00e      	b.n	8003c48 <HAL_TIM_PWM_Start_DMA+0x128>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e006      	b.n	8003c48 <HAL_TIM_PWM_Start_DMA+0x128>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c42:	e001      	b.n	8003c48 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0f5      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	f200 80ae 	bhi.w	8003dac <HAL_TIM_PWM_Start_DMA+0x28c>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003dad 	.word	0x08003dad
 8003c60:	08003dad 	.word	0x08003dad
 8003c64:	08003dad 	.word	0x08003dad
 8003c68:	08003cd5 	.word	0x08003cd5
 8003c6c:	08003dad 	.word	0x08003dad
 8003c70:	08003dad 	.word	0x08003dad
 8003c74:	08003dad 	.word	0x08003dad
 8003c78:	08003d1d 	.word	0x08003d1d
 8003c7c:	08003dad 	.word	0x08003dad
 8003c80:	08003dad 	.word	0x08003dad
 8003c84:	08003dad 	.word	0x08003dad
 8003c88:	08003d65 	.word	0x08003d65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	4a69      	ldr	r2, [pc, #420]	; (8003e40 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	4a68      	ldr	r2, [pc, #416]	; (8003e44 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3334      	adds	r3, #52	; 0x34
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	f7fe fde8 	bl	8002888 <HAL_DMA_Start_IT>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0b8      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd0:	60da      	str	r2, [r3, #12]
      break;
 8003cd2:	e06c      	b.n	8003dae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	4a57      	ldr	r2, [pc, #348]	; (8003e40 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	4a56      	ldr	r2, [pc, #344]	; (8003e44 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3338      	adds	r3, #56	; 0x38
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	f7fe fdc4 	bl	8002888 <HAL_DMA_Start_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e094      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d18:	60da      	str	r2, [r3, #12]
      break;
 8003d1a:	e048      	b.n	8003dae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a45      	ldr	r2, [pc, #276]	; (8003e40 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a44      	ldr	r2, [pc, #272]	; (8003e44 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	333c      	adds	r3, #60	; 0x3c
 8003d40:	461a      	mov	r2, r3
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	f7fe fda0 	bl	8002888 <HAL_DMA_Start_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e070      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d60:	60da      	str	r2, [r3, #12]
      break;
 8003d62:	e024      	b.n	8003dae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4a34      	ldr	r2, [pc, #208]	; (8003e3c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	4a33      	ldr	r2, [pc, #204]	; (8003e40 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3340      	adds	r3, #64	; 0x40
 8003d88:	461a      	mov	r2, r3
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	f7fe fd7c 	bl	8002888 <HAL_DMA_Start_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e04c      	b.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003da8:	60da      	str	r2, [r3, #12]
      break;
 8003daa:	e000      	b.n	8003dae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003dac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2201      	movs	r2, #1
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fb07 	bl	80053ca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_TIM_PWM_Start_DMA+0x2de>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d009      	beq.n	8003dfe <HAL_TIM_PWM_Start_DMA+0x2de>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIM_PWM_Start_DMA+0x2de>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d111      	bne.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d010      	beq.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	e007      	b.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08004a85 	.word	0x08004a85
 8003e40:	08004b2d 	.word	0x08004b2d
 8003e44:	080049f3 	.word	0x080049f3
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800

08003e54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e041      	b.n	8003eea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd fd6c 	bl	8001958 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f000 fe7e 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_IC_Start_IT+0x1a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	e013      	b.n	8003f36 <HAL_TIM_IC_Start_IT+0x42>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d104      	bne.n	8003f1e <HAL_TIM_IC_Start_IT+0x2a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e00b      	b.n	8003f36 <HAL_TIM_IC_Start_IT+0x42>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d104      	bne.n	8003f2e <HAL_TIM_IC_Start_IT+0x3a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e003      	b.n	8003f36 <HAL_TIM_IC_Start_IT+0x42>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_TIM_IC_Start_IT+0x54>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e013      	b.n	8003f70 <HAL_TIM_IC_Start_IT+0x7c>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d104      	bne.n	8003f58 <HAL_TIM_IC_Start_IT+0x64>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e00b      	b.n	8003f70 <HAL_TIM_IC_Start_IT+0x7c>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d104      	bne.n	8003f68 <HAL_TIM_IC_Start_IT+0x74>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e003      	b.n	8003f70 <HAL_TIM_IC_Start_IT+0x7c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f78:	7bbb      	ldrb	r3, [r7, #14]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0b3      	b.n	80040ea <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_IC_Start_IT+0x9e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f90:	e013      	b.n	8003fba <HAL_TIM_IC_Start_IT+0xc6>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_IC_Start_IT+0xae>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa0:	e00b      	b.n	8003fba <HAL_TIM_IC_Start_IT+0xc6>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_IC_Start_IT+0xbe>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb0:	e003      	b.n	8003fba <HAL_TIM_IC_Start_IT+0xc6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_IC_Start_IT+0xd6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	e013      	b.n	8003ff2 <HAL_TIM_IC_Start_IT+0xfe>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0xe6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	e00b      	b.n	8003ff2 <HAL_TIM_IC_Start_IT+0xfe>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_IC_Start_IT+0xf6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	e003      	b.n	8003ff2 <HAL_TIM_IC_Start_IT+0xfe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d841      	bhi.n	800407c <HAL_TIM_IC_Start_IT+0x188>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_TIM_IC_Start_IT+0x10c>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004035 	.word	0x08004035
 8004004:	0800407d 	.word	0x0800407d
 8004008:	0800407d 	.word	0x0800407d
 800400c:	0800407d 	.word	0x0800407d
 8004010:	08004047 	.word	0x08004047
 8004014:	0800407d 	.word	0x0800407d
 8004018:	0800407d 	.word	0x0800407d
 800401c:	0800407d 	.word	0x0800407d
 8004020:	08004059 	.word	0x08004059
 8004024:	0800407d 	.word	0x0800407d
 8004028:	0800407d 	.word	0x0800407d
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800406b 	.word	0x0800406b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0202 	orr.w	r2, r2, #2
 8004042:	60da      	str	r2, [r3, #12]
      break;
 8004044:	e01b      	b.n	800407e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0204 	orr.w	r2, r2, #4
 8004054:	60da      	str	r2, [r3, #12]
      break;
 8004056:	e012      	b.n	800407e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0208 	orr.w	r2, r2, #8
 8004066:	60da      	str	r2, [r3, #12]
      break;
 8004068:	e009      	b.n	800407e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0210 	orr.w	r2, r2, #16
 8004078:	60da      	str	r2, [r3, #12]
      break;
 800407a:	e000      	b.n	800407e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800407c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f99f 	bl	80053ca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_TIM_IC_Start_IT+0x200>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <HAL_TIM_IC_Start_IT+0x204>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_TIM_IC_Start_IT+0x208>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d111      	bne.n	80040d8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d010      	beq.n	80040e8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	e007      	b.n	80040e8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800

08004100 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d841      	bhi.n	8004194 <HAL_TIM_IC_Stop_IT+0x94>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_TIM_IC_Stop_IT+0x18>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004195 	.word	0x08004195
 8004120:	08004195 	.word	0x08004195
 8004124:	08004195 	.word	0x08004195
 8004128:	0800415f 	.word	0x0800415f
 800412c:	08004195 	.word	0x08004195
 8004130:	08004195 	.word	0x08004195
 8004134:	08004195 	.word	0x08004195
 8004138:	08004171 	.word	0x08004171
 800413c:	08004195 	.word	0x08004195
 8004140:	08004195 	.word	0x08004195
 8004144:	08004195 	.word	0x08004195
 8004148:	08004183 	.word	0x08004183
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0202 	bic.w	r2, r2, #2
 800415a:	60da      	str	r2, [r3, #12]
      break;
 800415c:	e01b      	b.n	8004196 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0204 	bic.w	r2, r2, #4
 800416c:	60da      	str	r2, [r3, #12]
      break;
 800416e:	e012      	b.n	8004196 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0208 	bic.w	r2, r2, #8
 800417e:	60da      	str	r2, [r3, #12]
      break;
 8004180:	e009      	b.n	8004196 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0210 	bic.w	r2, r2, #16
 8004190:	60da      	str	r2, [r3, #12]
      break;
 8004192:	e000      	b.n	8004196 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8004194:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 f913 	bl	80053ca <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <HAL_TIM_IC_Stop_IT+0xd4>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	f240 4344 	movw	r3, #1092	; 0x444
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IC_Stop_IT+0xd4>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <HAL_TIM_IC_Stop_IT+0xe4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e2:	e013      	b.n	800420c <HAL_TIM_IC_Stop_IT+0x10c>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d104      	bne.n	80041f4 <HAL_TIM_IC_Stop_IT+0xf4>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f2:	e00b      	b.n	800420c <HAL_TIM_IC_Stop_IT+0x10c>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d104      	bne.n	8004204 <HAL_TIM_IC_Stop_IT+0x104>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004202:	e003      	b.n	800420c <HAL_TIM_IC_Stop_IT+0x10c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d104      	bne.n	800421c <HAL_TIM_IC_Stop_IT+0x11c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421a:	e013      	b.n	8004244 <HAL_TIM_IC_Stop_IT+0x144>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b04      	cmp	r3, #4
 8004220:	d104      	bne.n	800422c <HAL_TIM_IC_Stop_IT+0x12c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800422a:	e00b      	b.n	8004244 <HAL_TIM_IC_Stop_IT+0x144>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b08      	cmp	r3, #8
 8004230:	d104      	bne.n	800423c <HAL_TIM_IC_Stop_IT+0x13c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423a:	e003      	b.n	8004244 <HAL_TIM_IC_Stop_IT+0x144>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop

08004250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0202 	mvn.w	r2, #2
 800427c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fd8c 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fb7c 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fb82 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0204 	mvn.w	r2, #4
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fd62 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fb52 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fb58 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b08      	cmp	r3, #8
 800430c:	d122      	bne.n	8004354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b08      	cmp	r3, #8
 800431a:	d11b      	bne.n	8004354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0208 	mvn.w	r2, #8
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fd38 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fb28 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb2e 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b10      	cmp	r3, #16
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d11b      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0210 	mvn.w	r2, #16
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2208      	movs	r2, #8
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc fd0e 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fafe 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb04 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10e      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0201 	mvn.w	r2, #1
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f9ae 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b80      	cmp	r3, #128	; 0x80
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f001 f8c2 	bl	8005584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fad1 	bl	80049ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b20      	cmp	r3, #32
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0220 	mvn.w	r2, #32
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f001 f88d 	bl	8005572 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004476:	2302      	movs	r3, #2
 8004478:	e082      	b.n	8004580 <HAL_TIM_IC_ConfigChannel+0x120>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11b      	bne.n	80044c0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f000 fdf4 	bl	8005084 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 020c 	bic.w	r2, r2, #12
 80044aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6999      	ldr	r1, [r3, #24]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	619a      	str	r2, [r3, #24]
 80044be:	e05a      	b.n	8004576 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d11c      	bne.n	8004500 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f000 fe5d 	bl	8005194 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6999      	ldr	r1, [r3, #24]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	021a      	lsls	r2, r3, #8
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	619a      	str	r2, [r3, #24]
 80044fe:	e03a      	b.n	8004576 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b08      	cmp	r3, #8
 8004504:	d11b      	bne.n	800453e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f000 fea8 	bl	800526a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 020c 	bic.w	r2, r2, #12
 8004528:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	61da      	str	r2, [r3, #28]
 800453c:	e01b      	b.n	8004576 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6819      	ldr	r1, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f000 fec7 	bl	80052e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004560:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	021a      	lsls	r2, r3, #8
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0ac      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	f200 809f 	bhi.w	80046f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080046f1 	.word	0x080046f1
 80045c0:	080046f1 	.word	0x080046f1
 80045c4:	080046f1 	.word	0x080046f1
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	080046f1 	.word	0x080046f1
 80045d0:	080046f1 	.word	0x080046f1
 80045d4:	080046f1 	.word	0x080046f1
 80045d8:	0800466f 	.word	0x0800466f
 80045dc:	080046f1 	.word	0x080046f1
 80045e0:	080046f1 	.word	0x080046f1
 80045e4:	080046f1 	.word	0x080046f1
 80045e8:	080046af 	.word	0x080046af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fb30 	bl	8004c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
      break;
 800462a:	e062      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fb76 	bl	8004d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6999      	ldr	r1, [r3, #24]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]
      break;
 800466c:	e041      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fbbf 	bl	8004df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0208 	orr.w	r2, r2, #8
 8004688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0204 	bic.w	r2, r2, #4
 8004698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
      break;
 80046ac:	e021      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fc09 	bl	8004ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
      break;
 80046ee:	e000      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIM_ConfigClockSource+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e0b3      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x180>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004742:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d03e      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0xd0>
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475a:	f200 8087 	bhi.w	800486c <HAL_TIM_ConfigClockSource+0x168>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	f000 8085 	beq.w	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d87f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d01a      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xa2>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d87b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d050      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x116>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d877      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d03c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0xf6>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d873      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d058      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x136>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d86f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d064      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d86b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d060      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d867      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d05a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047a4:	e062      	b.n	800486c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f000 fde9 	bl	800538c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	609a      	str	r2, [r3, #8]
      break;
 80047d2:	e04e      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f000 fdd2 	bl	800538c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f6:	609a      	str	r2, [r3, #8]
      break;
 80047f8:	e03b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fc96 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2150      	movs	r1, #80	; 0x50
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fda0 	bl	8005358 <TIM_ITRx_SetConfig>
      break;
 8004818:	e02b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	f000 fcf0 	bl	800520c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2160      	movs	r1, #96	; 0x60
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fd90 	bl	8005358 <TIM_ITRx_SetConfig>
      break;
 8004838:	e01b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fc76 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2140      	movs	r1, #64	; 0x40
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd80 	bl	8005358 <TIM_ITRx_SetConfig>
      break;
 8004858:	e00b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 fd77 	bl	8005358 <TIM_ITRx_SetConfig>
        break;
 800486a:	e002      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004870:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e031      	b.n	8004908 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb56 	bl	8004f68 <TIM_SlaveTimer_SetConfig>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e018      	b.n	8004908 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d831      	bhi.n	8004988 <HAL_TIM_ReadCapturedValue+0x78>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004989 	.word	0x08004989
 8004934:	08004989 	.word	0x08004989
 8004938:	08004989 	.word	0x08004989
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004989 	.word	0x08004989
 8004944:	08004989 	.word	0x08004989
 8004948:	08004989 	.word	0x08004989
 800494c:	08004975 	.word	0x08004975
 8004950:	08004989 	.word	0x08004989
 8004954:	08004989 	.word	0x08004989
 8004958:	08004989 	.word	0x08004989
 800495c:	0800497f 	.word	0x0800497f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	60fb      	str	r3, [r7, #12]

      break;
 8004968:	e00f      	b.n	800498a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	60fb      	str	r3, [r7, #12]

      break;
 8004972:	e00a      	b.n	800498a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	60fb      	str	r3, [r7, #12]

      break;
 800497c:	e005      	b.n	800498a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	60fb      	str	r3, [r7, #12]

      break;
 8004986:	e000      	b.n	800498a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004988:	bf00      	nop
  }

  return tmpreg;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop

08004998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d107      	bne.n	8004a1a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	e02a      	b.n	8004a70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2202      	movs	r2, #2
 8004a28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a32:	e01d      	b.n	8004a70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d107      	bne.n	8004a4e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2204      	movs	r2, #4
 8004a42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a4c:	e010      	b.n	8004a70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d107      	bne.n	8004a68 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a66:	e003      	b.n	8004a70 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff ffb5 	bl	80049e0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d10b      	bne.n	8004ab4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d136      	bne.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab2:	e031      	b.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d10b      	bne.n	8004ad6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d125      	bne.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	e020      	b.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d10b      	bne.n	8004af8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d114      	bne.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af6:	e00f      	b.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d10a      	bne.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff ff46 	bl	80049aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d103      	bne.n	8004b4c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	771a      	strb	r2, [r3, #28]
 8004b4a:	e019      	b.n	8004b80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d103      	bne.n	8004b5e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	771a      	strb	r2, [r3, #28]
 8004b5c:	e010      	b.n	8004b80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d103      	bne.n	8004b70 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	771a      	strb	r2, [r3, #28]
 8004b6e:	e007      	b.n	8004b80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d102      	bne.n	8004b80 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff1b 	bl	80049bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <TIM_Base_SetConfig+0xb8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <TIM_Base_SetConfig+0x30>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d007      	beq.n	8004bc4 <TIM_Base_SetConfig+0x30>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <TIM_Base_SetConfig+0xbc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_Base_SetConfig+0x30>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <TIM_Base_SetConfig+0xc0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d108      	bne.n	8004bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <TIM_Base_SetConfig+0xb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <TIM_Base_SetConfig+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be4:	d007      	beq.n	8004bf6 <TIM_Base_SetConfig+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <TIM_Base_SetConfig+0xbc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_Base_SetConfig+0x62>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <TIM_Base_SetConfig+0xc0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <TIM_Base_SetConfig+0xb8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d103      	bne.n	8004c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	615a      	str	r2, [r3, #20]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800

08004c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 0302 	bic.w	r3, r3, #2
 8004ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <TIM_OC1_SetConfig+0xc8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10c      	bne.n	8004cce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0308 	bic.w	r3, r3, #8
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <TIM_OC1_SetConfig+0xc8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d111      	bne.n	8004cfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00

08004d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0210 	bic.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 0320 	bic.w	r3, r3, #32
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <TIM_OC2_SetConfig+0xd0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d10d      	bne.n	8004da0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <TIM_OC2_SetConfig+0xd0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	40012c00 	.word	0x40012c00

08004df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <TIM_OC3_SetConfig+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10d      	bne.n	8004e72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <TIM_OC3_SetConfig+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d113      	bne.n	8004ea2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00

08004ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a0f      	ldr	r2, [pc, #60]	; (8004f64 <TIM_OC4_SetConfig+0x98>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00

08004f68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b70      	cmp	r3, #112	; 0x70
 8004fac:	d01a      	beq.n	8004fe4 <TIM_SlaveTimer_SetConfig+0x7c>
 8004fae:	2b70      	cmp	r3, #112	; 0x70
 8004fb0:	d860      	bhi.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
 8004fb2:	2b60      	cmp	r3, #96	; 0x60
 8004fb4:	d054      	beq.n	8005060 <TIM_SlaveTimer_SetConfig+0xf8>
 8004fb6:	2b60      	cmp	r3, #96	; 0x60
 8004fb8:	d85c      	bhi.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
 8004fba:	2b50      	cmp	r3, #80	; 0x50
 8004fbc:	d046      	beq.n	800504c <TIM_SlaveTimer_SetConfig+0xe4>
 8004fbe:	2b50      	cmp	r3, #80	; 0x50
 8004fc0:	d858      	bhi.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d019      	beq.n	8004ffa <TIM_SlaveTimer_SetConfig+0x92>
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d854      	bhi.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
 8004fca:	2b30      	cmp	r3, #48	; 0x30
 8004fcc:	d054      	beq.n	8005078 <TIM_SlaveTimer_SetConfig+0x110>
 8004fce:	2b30      	cmp	r3, #48	; 0x30
 8004fd0:	d850      	bhi.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d050      	beq.n	8005078 <TIM_SlaveTimer_SetConfig+0x110>
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d84c      	bhi.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04c      	beq.n	8005078 <TIM_SlaveTimer_SetConfig+0x110>
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d04a      	beq.n	8005078 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004fe2:	e047      	b.n	8005074 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68d9      	ldr	r1, [r3, #12]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f000 f9ca 	bl	800538c <TIM_ETR_SetConfig>
      break;
 8004ff8:	e03f      	b.n	800507a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d101      	bne.n	8005006 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e03a      	b.n	800507c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
      break;
 800504a:	e016      	b.n	800507a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	461a      	mov	r2, r3
 800505a:	f000 f86d 	bl	8005138 <TIM_TI1_ConfigInputStage>
      break;
 800505e:	e00c      	b.n	800507a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	461a      	mov	r2, r3
 800506e:	f000 f8cd 	bl	800520c <TIM_TI2_ConfigInputStage>
      break;
 8005072:	e002      	b.n	800507a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005078:	bf00      	nop
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <TIM_TI1_SetConfig+0xa8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00b      	beq.n	80050ca <TIM_TI1_SetConfig+0x46>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d007      	beq.n	80050ca <TIM_TI1_SetConfig+0x46>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <TIM_TI1_SetConfig+0xac>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_TI1_SetConfig+0x46>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <TIM_TI1_SetConfig+0xb0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <TIM_TI1_SetConfig+0x4a>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <TIM_TI1_SetConfig+0x4c>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e003      	b.n	80050ee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f023 030a 	bic.w	r3, r3, #10
 8005108:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 030a 	and.w	r3, r3, #10
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0210 	bic.w	r2, r3, #16
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	031b      	lsls	r3, r3, #12
 80051d8:	b29b      	uxth	r3, r3
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 0210 	bic.w	r2, r3, #16
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005236:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	031b      	lsls	r3, r3, #12
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005248:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800531e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	031b      	lsls	r3, r3, #12
 8005324:	b29b      	uxth	r3, r3
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005332:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	031b      	lsls	r3, r3, #12
 8005338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	f043 0307 	orr.w	r3, r3, #7
 800537a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	609a      	str	r2, [r3, #8]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2201      	movs	r2, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1a      	ldr	r2, [r3, #32]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	401a      	ands	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	431a      	orrs	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
	...

08005414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005428:	2302      	movs	r3, #2
 800542a:	e046      	b.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005478:	d009      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a12      	ldr	r2, [pc, #72]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a10      	ldr	r2, [pc, #64]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10c      	bne.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4313      	orrs	r3, r2
 800549e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800

080054d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e03d      	b.n	8005568 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e03f      	b.n	8005628 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fc fa45 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2224      	movs	r2, #36	; 0x24
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f904 	bl	80057e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b20      	cmp	r3, #32
 800564e:	d17c      	bne.n	800574a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Transmit+0x2c>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e075      	b.n	800574c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_UART_Transmit+0x3e>
 800566a:	2302      	movs	r3, #2
 800566c:	e06e      	b.n	800574c <HAL_UART_Transmit+0x11c>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2221      	movs	r2, #33	; 0x21
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005684:	f7fc fbf0 	bl	8001e68 <HAL_GetTick>
 8005688:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d108      	bne.n	80056b2 <HAL_UART_Transmit+0x82>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e003      	b.n	80056ba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056c2:	e02a      	b.n	800571a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f840 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e036      	b.n	800574c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	3302      	adds	r3, #2
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e007      	b.n	800570c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3301      	adds	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1cf      	bne.n	80056c4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2200      	movs	r2, #0
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f810 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e006      	b.n	800574c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005764:	e02c      	b.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576c:	d028      	beq.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x30>
 8005774:	f7fc fb78 	bl	8001e68 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	d21d      	bcs.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005792:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e00f      	b.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4013      	ands	r3, r2
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d0c3      	beq.n	8005766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005822:	f023 030c 	bic.w	r3, r3, #12
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	430b      	orrs	r3, r1
 800582e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <UART_SetConfig+0x114>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7fd ff54 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	e002      	b.n	800585e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fd ff3c 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 800585c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009a      	lsls	r2, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	4a22      	ldr	r2, [pc, #136]	; (8005900 <UART_SetConfig+0x118>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	0119      	lsls	r1, r3, #4
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009a      	lsls	r2, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fbb2 f2f3 	udiv	r2, r2, r3
 8005894:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <UART_SetConfig+0x118>)
 8005896:	fba3 0302 	umull	r0, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2064      	movs	r0, #100	; 0x64
 800589e:	fb00 f303 	mul.w	r3, r0, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	3332      	adds	r3, #50	; 0x32
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <UART_SetConfig+0x118>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b4:	4419      	add	r1, r3
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009a      	lsls	r2, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <UART_SetConfig+0x118>)
 80058ce:	fba3 0302 	umull	r0, r3, r3, r2
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	2064      	movs	r0, #100	; 0x64
 80058d6:	fb00 f303 	mul.w	r3, r0, r3
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	3332      	adds	r3, #50	; 0x32
 80058e0:	4a07      	ldr	r2, [pc, #28]	; (8005900 <UART_SetConfig+0x118>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	440a      	add	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40013800 	.word	0x40013800
 8005900:	51eb851f 	.word	0x51eb851f

08005904 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005916:	2b84      	cmp	r3, #132	; 0x84
 8005918:	d005      	beq.n	8005926 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800591a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	3303      	adds	r3, #3
 8005924:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005936:	f000 fae7 	bl	8005f08 <vTaskStartScheduler>
  
  return osOK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}

08005940 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af04      	add	r7, sp, #16
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d020      	beq.n	8005994 <osThreadCreate+0x54>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01c      	beq.n	8005994 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685c      	ldr	r4, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681d      	ldr	r5, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691e      	ldr	r6, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ffc9 	bl	8005904 <makeFreeRtosPriority>
 8005972:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800597c:	9202      	str	r2, [sp, #8]
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	9100      	str	r1, [sp, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	4632      	mov	r2, r6
 8005986:	4629      	mov	r1, r5
 8005988:	4620      	mov	r0, r4
 800598a:	f000 f8e8 	bl	8005b5e <xTaskCreateStatic>
 800598e:	4603      	mov	r3, r0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e01c      	b.n	80059ce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685c      	ldr	r4, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059a0:	b29e      	uxth	r6, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff ffab 	bl	8005904 <makeFreeRtosPriority>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f107 030c 	add.w	r3, r7, #12
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	9200      	str	r2, [sp, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4632      	mov	r2, r6
 80059bc:	4629      	mov	r1, r5
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f929 	bl	8005c16 <xTaskCreate>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d001      	beq.n	80059ce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e000      	b.n	80059d0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059ce:	68fb      	ldr	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <osDelay+0x16>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	e000      	b.n	80059f0 <osDelay+0x18>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fa55 	bl	8005ea0 <vTaskDelay>
  
  return osOK;
 80059f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f103 0208 	add.w	r2, r3, #8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f103 0208 	add.w	r2, r3, #8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f103 0208 	add.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab2:	d103      	bne.n	8005abc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e00c      	b.n	8005ad6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e002      	b.n	8005aca <vListInsert+0x2e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d2f6      	bcs.n	8005ac4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6892      	ldr	r2, [r2, #8]
 8005b22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6852      	ldr	r2, [r2, #4]
 8005b2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d103      	bne.n	8005b40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1e5a      	subs	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b08e      	sub	sp, #56	; 0x38
 8005b62:	af04      	add	r7, sp, #16
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	61fb      	str	r3, [r7, #28]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ba4:	23b4      	movs	r3, #180	; 0xb4
 8005ba6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2bb4      	cmp	r3, #180	; 0xb4
 8005bac:	d00a      	beq.n	8005bc4 <xTaskCreateStatic+0x66>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61bb      	str	r3, [r7, #24]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d01e      	beq.n	8005c08 <xTaskCreateStatic+0xaa>
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005be2:	2300      	movs	r3, #0
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	9302      	str	r3, [sp, #8]
 8005bea:	f107 0314 	add.w	r3, r7, #20
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f850 	bl	8005ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c02:	f000 f8e3 	bl	8005dcc <prvAddNewTaskToReadyList>
 8005c06:	e001      	b.n	8005c0c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c0c:	697b      	ldr	r3, [r7, #20]
	}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3728      	adds	r7, #40	; 0x28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b08c      	sub	sp, #48	; 0x30
 8005c1a:	af04      	add	r7, sp, #16
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fe98 	bl	8006960 <pvPortMalloc>
 8005c30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00e      	beq.n	8005c56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c38:	20b4      	movs	r0, #180	; 0xb4
 8005c3a:	f000 fe91 	bl	8006960 <pvPortMalloc>
 8005c3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c4c:	e005      	b.n	8005c5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c4e:	6978      	ldr	r0, [r7, #20]
 8005c50:	f000 ff4a 	bl	8006ae8 <vPortFree>
 8005c54:	e001      	b.n	8005c5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9303      	str	r3, [sp, #12]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	9302      	str	r3, [sp, #8]
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f80e 	bl	8005ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c84:	69f8      	ldr	r0, [r7, #28]
 8005c86:	f000 f8a1 	bl	8005dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e002      	b.n	8005c96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c96:	69bb      	ldr	r3, [r7, #24]
	}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f023 0307 	bic.w	r3, r3, #7
 8005cc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	617b      	str	r3, [r7, #20]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e012      	b.n	8005d14 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	7819      	ldrb	r1, [r3, #0]
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3334      	adds	r3, #52	; 0x34
 8005cfe:	460a      	mov	r2, r1
 8005d00:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d9e9      	bls.n	8005cee <prvInitialiseNewTask+0x4e>
 8005d1a:	e000      	b.n	8005d1e <prvInitialiseNewTask+0x7e>
		{
			break;
 8005d1c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b06      	cmp	r3, #6
 8005d2a:	d901      	bls.n	8005d30 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d2c:	2306      	movs	r3, #6
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2200      	movs	r2, #0
 8005d40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fe79 	bl	8005a3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fe74 	bl	8005a3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	f1c3 0207 	rsb	r2, r3, #7
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	334c      	adds	r3, #76	; 0x4c
 8005d80:	2260      	movs	r2, #96	; 0x60
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 f8f4 	bl	8006f72 <memset>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <prvInitialiseNewTask+0x120>)
 8005d8e:	651a      	str	r2, [r3, #80]	; 0x50
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <prvInitialiseNewTask+0x124>)
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <prvInitialiseNewTask+0x128>)
 8005d9a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	69b8      	ldr	r0, [r7, #24]
 8005da2:	f000 fc29 	bl	80065f8 <pxPortInitialiseStack>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db8:	bf00      	nop
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	08009e98 	.word	0x08009e98
 8005dc4:	08009eb8 	.word	0x08009eb8
 8005dc8:	08009e78 	.word	0x08009e78

08005dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dd4:	f000 fd02 	bl	80067dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dd8:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <prvAddNewTaskToReadyList+0xb8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <prvAddNewTaskToReadyList+0xb8>)
 8005de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <prvAddNewTaskToReadyList+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <prvAddNewTaskToReadyList+0xbc>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <prvAddNewTaskToReadyList+0xb8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d110      	bne.n	8005e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005df8:	f000 fad2 	bl	80063a0 <prvInitialiseTaskLists>
 8005dfc:	e00d      	b.n	8005e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dfe:	4b23      	ldr	r3, [pc, #140]	; (8005e8c <prvAddNewTaskToReadyList+0xc0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <prvAddNewTaskToReadyList+0xbc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d802      	bhi.n	8005e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e14:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <prvAddNewTaskToReadyList+0xbc>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <prvAddNewTaskToReadyList+0xc4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4a1b      	ldr	r2, [pc, #108]	; (8005e90 <prvAddNewTaskToReadyList+0xc4>)
 8005e22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	2201      	movs	r2, #1
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <prvAddNewTaskToReadyList+0xc8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <prvAddNewTaskToReadyList+0xc8>)
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <prvAddNewTaskToReadyList+0xcc>)
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7ff fe02 	bl	8005a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e52:	f000 fcf3 	bl	800683c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e56:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <prvAddNewTaskToReadyList+0xc0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00e      	beq.n	8005e7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <prvAddNewTaskToReadyList+0xbc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d207      	bcs.n	8005e7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <prvAddNewTaskToReadyList+0xd0>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	200016e8 	.word	0x200016e8
 8005e88:	200015e8 	.word	0x200015e8
 8005e8c:	200016f4 	.word	0x200016f4
 8005e90:	20001704 	.word	0x20001704
 8005e94:	200016f0 	.word	0x200016f0
 8005e98:	200015ec 	.word	0x200015ec
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d017      	beq.n	8005ee2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <vTaskDelay+0x60>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <vTaskDelay+0x30>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60bb      	str	r3, [r7, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ed0:	f000 f884 	bl	8005fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb28 	bl	800652c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005edc:	f000 f88c 	bl	8005ff8 <xTaskResumeAll>
 8005ee0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <vTaskDelay+0x64>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20001710 	.word	0x20001710
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f16:	463a      	mov	r2, r7
 8005f18:	1d39      	adds	r1, r7, #4
 8005f1a:	f107 0308 	add.w	r3, r7, #8
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fa fe78 	bl	8000c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	9202      	str	r2, [sp, #8]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	460a      	mov	r2, r1
 8005f36:	4921      	ldr	r1, [pc, #132]	; (8005fbc <vTaskStartScheduler+0xb4>)
 8005f38:	4821      	ldr	r0, [pc, #132]	; (8005fc0 <vTaskStartScheduler+0xb8>)
 8005f3a:	f7ff fe10 	bl	8005b5e <xTaskCreateStatic>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4a20      	ldr	r2, [pc, #128]	; (8005fc4 <vTaskStartScheduler+0xbc>)
 8005f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f44:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <vTaskStartScheduler+0xbc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e001      	b.n	8005f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d11b      	bne.n	8005f94 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	613b      	str	r3, [r7, #16]
}
 8005f6e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f70:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <vTaskStartScheduler+0xc0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	334c      	adds	r3, #76	; 0x4c
 8005f76:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <vTaskStartScheduler+0xc4>)
 8005f78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <vTaskStartScheduler+0xc8>)
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f82:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <vTaskStartScheduler+0xcc>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <vTaskStartScheduler+0xd0>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f8e:	f000 fbb3 	bl	80066f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f92:	e00e      	b.n	8005fb2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f9a:	d10a      	bne.n	8005fb2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <vTaskStartScheduler+0xa8>
}
 8005fb2:	bf00      	nop
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	08009e58 	.word	0x08009e58
 8005fc0:	08006371 	.word	0x08006371
 8005fc4:	2000170c 	.word	0x2000170c
 8005fc8:	200015e8 	.word	0x200015e8
 8005fcc:	20000014 	.word	0x20000014
 8005fd0:	20001708 	.word	0x20001708
 8005fd4:	200016f4 	.word	0x200016f4
 8005fd8:	200016ec 	.word	0x200016ec

08005fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <vTaskSuspendAll+0x18>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <vTaskSuspendAll+0x18>)
 8005fe8:	6013      	str	r3, [r2, #0]
}
 8005fea:	bf00      	nop
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20001710 	.word	0x20001710

08005ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006006:	4b41      	ldr	r3, [pc, #260]	; (800610c <xTaskResumeAll+0x114>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <xTaskResumeAll+0x2c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	603b      	str	r3, [r7, #0]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006024:	f000 fbda 	bl	80067dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006028:	4b38      	ldr	r3, [pc, #224]	; (800610c <xTaskResumeAll+0x114>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3b01      	subs	r3, #1
 800602e:	4a37      	ldr	r2, [pc, #220]	; (800610c <xTaskResumeAll+0x114>)
 8006030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006032:	4b36      	ldr	r3, [pc, #216]	; (800610c <xTaskResumeAll+0x114>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d161      	bne.n	80060fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800603a:	4b35      	ldr	r3, [pc, #212]	; (8006110 <xTaskResumeAll+0x118>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d05d      	beq.n	80060fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006042:	e02e      	b.n	80060a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006044:	4b33      	ldr	r3, [pc, #204]	; (8006114 <xTaskResumeAll+0x11c>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3318      	adds	r3, #24
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fd5b 	bl	8005b0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fd56 	bl	8005b0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2201      	movs	r2, #1
 8006066:	409a      	lsls	r2, r3
 8006068:	4b2b      	ldr	r3, [pc, #172]	; (8006118 <xTaskResumeAll+0x120>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4313      	orrs	r3, r2
 800606e:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <xTaskResumeAll+0x120>)
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a27      	ldr	r2, [pc, #156]	; (800611c <xTaskResumeAll+0x124>)
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7ff fce4 	bl	8005a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	4b23      	ldr	r3, [pc, #140]	; (8006120 <xTaskResumeAll+0x128>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800609c:	4b21      	ldr	r3, [pc, #132]	; (8006124 <xTaskResumeAll+0x12c>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <xTaskResumeAll+0x11c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1cc      	bne.n	8006044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060b0:	f000 fa18 	bl	80064e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060b4:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <xTaskResumeAll+0x130>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d010      	beq.n	80060e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060c0:	f000 f836 	bl	8006130 <xTaskIncrementTick>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060ca:	4b16      	ldr	r3, [pc, #88]	; (8006124 <xTaskResumeAll+0x12c>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f1      	bne.n	80060c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <xTaskResumeAll+0x130>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060e2:	4b10      	ldr	r3, [pc, #64]	; (8006124 <xTaskResumeAll+0x12c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <xTaskResumeAll+0x134>)
 80060f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060fe:	f000 fb9d 	bl	800683c <vPortExitCritical>

	return xAlreadyYielded;
 8006102:	68bb      	ldr	r3, [r7, #8]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20001710 	.word	0x20001710
 8006110:	200016e8 	.word	0x200016e8
 8006114:	200016a8 	.word	0x200016a8
 8006118:	200016f0 	.word	0x200016f0
 800611c:	200015ec 	.word	0x200015ec
 8006120:	200015e8 	.word	0x200015e8
 8006124:	200016fc 	.word	0x200016fc
 8006128:	200016f8 	.word	0x200016f8
 800612c:	e000ed04 	.word	0xe000ed04

08006130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800613a:	4b51      	ldr	r3, [pc, #324]	; (8006280 <xTaskIncrementTick+0x150>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f040 808d 	bne.w	800625e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006144:	4b4f      	ldr	r3, [pc, #316]	; (8006284 <xTaskIncrementTick+0x154>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800614c:	4a4d      	ldr	r2, [pc, #308]	; (8006284 <xTaskIncrementTick+0x154>)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d120      	bne.n	800619a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006158:	4b4b      	ldr	r3, [pc, #300]	; (8006288 <xTaskIncrementTick+0x158>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <xTaskIncrementTick+0x48>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	603b      	str	r3, [r7, #0]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xTaskIncrementTick+0x46>
 8006178:	4b43      	ldr	r3, [pc, #268]	; (8006288 <xTaskIncrementTick+0x158>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4b43      	ldr	r3, [pc, #268]	; (800628c <xTaskIncrementTick+0x15c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a41      	ldr	r2, [pc, #260]	; (8006288 <xTaskIncrementTick+0x158>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4a41      	ldr	r2, [pc, #260]	; (800628c <xTaskIncrementTick+0x15c>)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4b40      	ldr	r3, [pc, #256]	; (8006290 <xTaskIncrementTick+0x160>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	4a3f      	ldr	r2, [pc, #252]	; (8006290 <xTaskIncrementTick+0x160>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	f000 f9a5 	bl	80064e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800619a:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <xTaskIncrementTick+0x164>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d34d      	bcc.n	8006240 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a4:	4b38      	ldr	r3, [pc, #224]	; (8006288 <xTaskIncrementTick+0x158>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <xTaskIncrementTick+0x82>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <xTaskIncrementTick+0x84>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b8:	4b36      	ldr	r3, [pc, #216]	; (8006294 <xTaskIncrementTick+0x164>)
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061be:	601a      	str	r2, [r3, #0]
					break;
 80061c0:	e03e      	b.n	8006240 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061c2:	4b31      	ldr	r3, [pc, #196]	; (8006288 <xTaskIncrementTick+0x158>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d203      	bcs.n	80061e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061da:	4a2e      	ldr	r2, [pc, #184]	; (8006294 <xTaskIncrementTick+0x164>)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6013      	str	r3, [r2, #0]
						break;
 80061e0:	e02e      	b.n	8006240 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fc90 	bl	8005b0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	3318      	adds	r3, #24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fc87 	bl	8005b0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	2201      	movs	r2, #1
 8006204:	409a      	lsls	r2, r3
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <xTaskIncrementTick+0x168>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4313      	orrs	r3, r2
 800620c:	4a22      	ldr	r2, [pc, #136]	; (8006298 <xTaskIncrementTick+0x168>)
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <xTaskIncrementTick+0x16c>)
 800621e:	441a      	add	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7ff fc15 	bl	8005a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <xTaskIncrementTick+0x170>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	429a      	cmp	r2, r3
 8006238:	d3b4      	bcc.n	80061a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800623a:	2301      	movs	r3, #1
 800623c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623e:	e7b1      	b.n	80061a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006240:	4b17      	ldr	r3, [pc, #92]	; (80062a0 <xTaskIncrementTick+0x170>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006246:	4915      	ldr	r1, [pc, #84]	; (800629c <xTaskIncrementTick+0x16c>)
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e004      	b.n	8006268 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800625e:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <xTaskIncrementTick+0x174>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <xTaskIncrementTick+0x174>)
 8006266:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <xTaskIncrementTick+0x178>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006274:	697b      	ldr	r3, [r7, #20]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20001710 	.word	0x20001710
 8006284:	200016ec 	.word	0x200016ec
 8006288:	200016a0 	.word	0x200016a0
 800628c:	200016a4 	.word	0x200016a4
 8006290:	20001700 	.word	0x20001700
 8006294:	20001708 	.word	0x20001708
 8006298:	200016f0 	.word	0x200016f0
 800629c:	200015ec 	.word	0x200015ec
 80062a0:	200015e8 	.word	0x200015e8
 80062a4:	200016f8 	.word	0x200016f8
 80062a8:	200016fc 	.word	0x200016fc

080062ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <vTaskSwitchContext+0xac>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ba:	4b28      	ldr	r3, [pc, #160]	; (800635c <vTaskSwitchContext+0xb0>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062c0:	e044      	b.n	800634c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80062c2:	4b26      	ldr	r3, [pc, #152]	; (800635c <vTaskSwitchContext+0xb0>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <vTaskSwitchContext+0xb4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	fab3 f383 	clz	r3, r3
 80062d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	f1c3 031f 	rsb	r3, r3, #31
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	4921      	ldr	r1, [pc, #132]	; (8006364 <vTaskSwitchContext+0xb8>)
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <vTaskSwitchContext+0x5c>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	607b      	str	r3, [r7, #4]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vTaskSwitchContext+0x5a>
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a14      	ldr	r2, [pc, #80]	; (8006364 <vTaskSwitchContext+0xb8>)
 8006314:	4413      	add	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3308      	adds	r3, #8
 800632a:	429a      	cmp	r2, r3
 800632c:	d104      	bne.n	8006338 <vTaskSwitchContext+0x8c>
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <vTaskSwitchContext+0xbc>)
 8006340:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <vTaskSwitchContext+0xbc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	334c      	adds	r3, #76	; 0x4c
 8006348:	4a08      	ldr	r2, [pc, #32]	; (800636c <vTaskSwitchContext+0xc0>)
 800634a:	6013      	str	r3, [r2, #0]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20001710 	.word	0x20001710
 800635c:	200016fc 	.word	0x200016fc
 8006360:	200016f0 	.word	0x200016f0
 8006364:	200015ec 	.word	0x200015ec
 8006368:	200015e8 	.word	0x200015e8
 800636c:	20000014 	.word	0x20000014

08006370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006378:	f000 f852 	bl	8006420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <prvIdleTask+0x28>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d9f9      	bls.n	8006378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <prvIdleTask+0x2c>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006394:	e7f0      	b.n	8006378 <prvIdleTask+0x8>
 8006396:	bf00      	nop
 8006398:	200015ec 	.word	0x200015ec
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	e00c      	b.n	80063c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <prvInitialiseTaskLists+0x60>)
 80063b8:	4413      	add	r3, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fb20 	bl	8005a00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3301      	adds	r3, #1
 80063c4:	607b      	str	r3, [r7, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b06      	cmp	r3, #6
 80063ca:	d9ef      	bls.n	80063ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063cc:	480d      	ldr	r0, [pc, #52]	; (8006404 <prvInitialiseTaskLists+0x64>)
 80063ce:	f7ff fb17 	bl	8005a00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063d2:	480d      	ldr	r0, [pc, #52]	; (8006408 <prvInitialiseTaskLists+0x68>)
 80063d4:	f7ff fb14 	bl	8005a00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063d8:	480c      	ldr	r0, [pc, #48]	; (800640c <prvInitialiseTaskLists+0x6c>)
 80063da:	f7ff fb11 	bl	8005a00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063de:	480c      	ldr	r0, [pc, #48]	; (8006410 <prvInitialiseTaskLists+0x70>)
 80063e0:	f7ff fb0e 	bl	8005a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063e4:	480b      	ldr	r0, [pc, #44]	; (8006414 <prvInitialiseTaskLists+0x74>)
 80063e6:	f7ff fb0b 	bl	8005a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <prvInitialiseTaskLists+0x78>)
 80063ec:	4a05      	ldr	r2, [pc, #20]	; (8006404 <prvInitialiseTaskLists+0x64>)
 80063ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <prvInitialiseTaskLists+0x7c>)
 80063f2:	4a05      	ldr	r2, [pc, #20]	; (8006408 <prvInitialiseTaskLists+0x68>)
 80063f4:	601a      	str	r2, [r3, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200015ec 	.word	0x200015ec
 8006404:	20001678 	.word	0x20001678
 8006408:	2000168c 	.word	0x2000168c
 800640c:	200016a8 	.word	0x200016a8
 8006410:	200016bc 	.word	0x200016bc
 8006414:	200016d4 	.word	0x200016d4
 8006418:	200016a0 	.word	0x200016a0
 800641c:	200016a4 	.word	0x200016a4

08006420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006426:	e019      	b.n	800645c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006428:	f000 f9d8 	bl	80067dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <prvCheckTasksWaitingTermination+0x50>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fb67 	bl	8005b0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <prvCheckTasksWaitingTermination+0x54>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3b01      	subs	r3, #1
 8006444:	4a0b      	ldr	r2, [pc, #44]	; (8006474 <prvCheckTasksWaitingTermination+0x54>)
 8006446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <prvCheckTasksWaitingTermination+0x58>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3b01      	subs	r3, #1
 800644e:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <prvCheckTasksWaitingTermination+0x58>)
 8006450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006452:	f000 f9f3 	bl	800683c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f810 	bl	800647c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <prvCheckTasksWaitingTermination+0x58>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e1      	bne.n	8006428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	200016bc 	.word	0x200016bc
 8006474:	200016e8 	.word	0x200016e8
 8006478:	200016d0 	.word	0x200016d0

0800647c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	334c      	adds	r3, #76	; 0x4c
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fb0b 	bl	8007aa4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fb23 	bl	8006ae8 <vPortFree>
				vPortFree( pxTCB );
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb20 	bl	8006ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064a8:	e018      	b.n	80064dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d103      	bne.n	80064bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fb17 	bl	8006ae8 <vPortFree>
	}
 80064ba:	e00f      	b.n	80064dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d00a      	beq.n	80064dc <prvDeleteTCB+0x60>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60fb      	str	r3, [r7, #12]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <prvDeleteTCB+0x5e>
	}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ea:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <prvResetNextTaskUnblockTime+0x40>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <prvResetNextTaskUnblockTime+0x14>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <prvResetNextTaskUnblockTime+0x16>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d004      	beq.n	8006508 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064fe:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <prvResetNextTaskUnblockTime+0x44>)
 8006500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006504:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006506:	e008      	b.n	800651a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <prvResetNextTaskUnblockTime+0x40>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a04      	ldr	r2, [pc, #16]	; (8006528 <prvResetNextTaskUnblockTime+0x44>)
 8006518:	6013      	str	r3, [r2, #0]
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr
 8006524:	200016a0 	.word	0x200016a0
 8006528:	20001708 	.word	0x20001708

0800652c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006536:	4b29      	ldr	r3, [pc, #164]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800653c:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3304      	adds	r3, #4
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fae2 	bl	8005b0c <uxListRemove>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	2201      	movs	r2, #1
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43da      	mvns	r2, r3
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4013      	ands	r3, r2
 8006562:	4a20      	ldr	r2, [pc, #128]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800656c:	d10a      	bne.n	8006584 <prvAddCurrentTaskToDelayedList+0x58>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006574:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3304      	adds	r3, #4
 800657a:	4619      	mov	r1, r3
 800657c:	481a      	ldr	r0, [pc, #104]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800657e:	f7ff fa6a 	bl	8005a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006582:	e026      	b.n	80065d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4413      	add	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800658c:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	429a      	cmp	r2, r3
 800659a:	d209      	bcs.n	80065b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659c:	4b13      	ldr	r3, [pc, #76]	; (80065ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7ff fa77 	bl	8005a9c <vListInsert>
}
 80065ae:	e010      	b.n	80065d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065b0:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f7ff fa6d 	bl	8005a9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065c2:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d202      	bcs.n	80065d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80065cc:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6013      	str	r3, [r2, #0]
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200016ec 	.word	0x200016ec
 80065e0:	200015e8 	.word	0x200015e8
 80065e4:	200016f0 	.word	0x200016f0
 80065e8:	200016d4 	.word	0x200016d4
 80065ec:	200016a4 	.word	0x200016a4
 80065f0:	200016a0 	.word	0x200016a0
 80065f4:	20001708 	.word	0x20001708

080065f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3b04      	subs	r3, #4
 8006608:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b04      	subs	r3, #4
 8006616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3b04      	subs	r3, #4
 8006626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006628:	4a08      	ldr	r2, [pc, #32]	; (800664c <pxPortInitialiseStack+0x54>)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3b14      	subs	r3, #20
 8006632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b20      	subs	r3, #32
 800663e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	08006651 	.word	0x08006651

08006650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006656:	2300      	movs	r3, #0
 8006658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <prvTaskExitError+0x54>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006662:	d00a      	beq.n	800667a <prvTaskExitError+0x2a>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	60fb      	str	r3, [r7, #12]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <prvTaskExitError+0x28>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	60bb      	str	r3, [r7, #8]
}
 800668c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800668e:	bf00      	nop
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0fc      	beq.n	8006690 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20000010 	.word	0x20000010
	...

080066b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <pxCurrentTCBConst2>)
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	6808      	ldr	r0, [r1, #0]
 80066b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066ba:	f380 8809 	msr	PSP, r0
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80066ce:	4770      	bx	lr

080066d0 <pxCurrentTCBConst2>:
 80066d0:	200015e8 	.word	0x200015e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80066d8:	4806      	ldr	r0, [pc, #24]	; (80066f4 <prvPortStartFirstTask+0x1c>)
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f380 8808 	msr	MSP, r0
 80066e2:	b662      	cpsie	i
 80066e4:	b661      	cpsie	f
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	df00      	svc	0
 80066f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066f2:	bf00      	nop
 80066f4:	e000ed08 	.word	0xe000ed08

080066f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066fe:	4b32      	ldr	r3, [pc, #200]	; (80067c8 <xPortStartScheduler+0xd0>)
 8006700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	22ff      	movs	r2, #255	; 0xff
 800670e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006720:	b2da      	uxtb	r2, r3
 8006722:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <xPortStartScheduler+0xd4>)
 8006724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006726:	4b2a      	ldr	r3, [pc, #168]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006728:	2207      	movs	r2, #7
 800672a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800672c:	e009      	b.n	8006742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800672e:	4b28      	ldr	r3, [pc, #160]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3b01      	subs	r3, #1
 8006734:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d0ef      	beq.n	800672e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800674e:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1c3 0307 	rsb	r3, r3, #7
 8006756:	2b04      	cmp	r3, #4
 8006758:	d00a      	beq.n	8006770 <xPortStartScheduler+0x78>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	60bb      	str	r3, [r7, #8]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006770:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006778:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <xPortStartScheduler+0xd8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <xPortStartScheduler+0xd8>)
 8006784:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <xPortStartScheduler+0xdc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <xPortStartScheduler+0xdc>)
 8006794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800679a:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <xPortStartScheduler+0xdc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a0d      	ldr	r2, [pc, #52]	; (80067d4 <xPortStartScheduler+0xdc>)
 80067a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067a6:	f000 f8b9 	bl	800691c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <xPortStartScheduler+0xe0>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067b0:	f7ff ff92 	bl	80066d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067b4:	f7ff fd7a 	bl	80062ac <vTaskSwitchContext>
	prvTaskExitError();
 80067b8:	f7ff ff4a 	bl	8006650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	e000e400 	.word	0xe000e400
 80067cc:	20001714 	.word	0x20001714
 80067d0:	20001718 	.word	0x20001718
 80067d4:	e000ed20 	.word	0xe000ed20
 80067d8:	20000010 	.word	0x20000010

080067dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	607b      	str	r3, [r7, #4]
}
 80067f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <vPortEnterCritical+0x58>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	4a0d      	ldr	r2, [pc, #52]	; (8006834 <vPortEnterCritical+0x58>)
 80067fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <vPortEnterCritical+0x58>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d10f      	bne.n	8006828 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <vPortEnterCritical+0x5c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <vPortEnterCritical+0x4c>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	603b      	str	r3, [r7, #0]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <vPortEnterCritical+0x4a>
	}
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000010 	.word	0x20000010
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <vPortExitCritical+0x4c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <vPortExitCritical+0x24>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	607b      	str	r3, [r7, #4]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <vPortExitCritical+0x4c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3b01      	subs	r3, #1
 8006866:	4a08      	ldr	r2, [pc, #32]	; (8006888 <vPortExitCritical+0x4c>)
 8006868:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <vPortExitCritical+0x4c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <vPortExitCritical+0x42>
 8006872:	2300      	movs	r3, #0
 8006874:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800687c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr
 8006888:	20000010 	.word	0x20000010
 800688c:	00000000 	.word	0x00000000

08006890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006890:	f3ef 8009 	mrs	r0, PSP
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <pxCurrentTCBConst>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068a0:	6010      	str	r0, [r2, #0]
 80068a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80068a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068aa:	f380 8811 	msr	BASEPRI, r0
 80068ae:	f7ff fcfd 	bl	80062ac <vTaskSwitchContext>
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80068be:	6819      	ldr	r1, [r3, #0]
 80068c0:	6808      	ldr	r0, [r1, #0]
 80068c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068c6:	f380 8809 	msr	PSP, r0
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	4770      	bx	lr

080068d0 <pxCurrentTCBConst>:
 80068d0:	200015e8 	.word	0x200015e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068f2:	f7ff fc1d 	bl	8006130 <xTaskIncrementTick>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <SysTick_Handler+0x40>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f383 8811 	msr	BASEPRI, r3
}
 800690e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006920:	4b0a      	ldr	r3, [pc, #40]	; (800694c <vPortSetupTimerInterrupt+0x30>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <vPortSetupTimerInterrupt+0x34>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <vPortSetupTimerInterrupt+0x38>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a09      	ldr	r2, [pc, #36]	; (8006958 <vPortSetupTimerInterrupt+0x3c>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	4a08      	ldr	r2, [pc, #32]	; (800695c <vPortSetupTimerInterrupt+0x40>)
 800693a:	3b01      	subs	r3, #1
 800693c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <vPortSetupTimerInterrupt+0x30>)
 8006940:	2207      	movs	r2, #7
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	e000e010 	.word	0xe000e010
 8006950:	e000e018 	.word	0xe000e018
 8006954:	20000004 	.word	0x20000004
 8006958:	10624dd3 	.word	0x10624dd3
 800695c:	e000e014 	.word	0xe000e014

08006960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800696c:	f7ff fb36 	bl	8005fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006970:	4b58      	ldr	r3, [pc, #352]	; (8006ad4 <pvPortMalloc+0x174>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006978:	f000 f910 	bl	8006b9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800697c:	4b56      	ldr	r3, [pc, #344]	; (8006ad8 <pvPortMalloc+0x178>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4013      	ands	r3, r2
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 808e 	bne.w	8006aa6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01d      	beq.n	80069cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006990:	2208      	movs	r2, #8
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d014      	beq.n	80069cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f023 0307 	bic.w	r3, r3, #7
 80069a8:	3308      	adds	r3, #8
 80069aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <pvPortMalloc+0x6c>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	617b      	str	r3, [r7, #20]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d069      	beq.n	8006aa6 <pvPortMalloc+0x146>
 80069d2:	4b42      	ldr	r3, [pc, #264]	; (8006adc <pvPortMalloc+0x17c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d864      	bhi.n	8006aa6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069dc:	4b40      	ldr	r3, [pc, #256]	; (8006ae0 <pvPortMalloc+0x180>)
 80069de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <pvPortMalloc+0x180>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e6:	e004      	b.n	80069f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d903      	bls.n	8006a04 <pvPortMalloc+0xa4>
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f1      	bne.n	80069e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a04:	4b33      	ldr	r3, [pc, #204]	; (8006ad4 <pvPortMalloc+0x174>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d04b      	beq.n	8006aa6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2208      	movs	r2, #8
 8006a14:	4413      	add	r3, r2
 8006a16:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	2308      	movs	r3, #8
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d91f      	bls.n	8006a70 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4413      	add	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <pvPortMalloc+0xf8>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	613b      	str	r3, [r7, #16]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a6a:	69b8      	ldr	r0, [r7, #24]
 8006a6c:	f000 f8f8 	bl	8006c60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a70:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <pvPortMalloc+0x17c>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	4a18      	ldr	r2, [pc, #96]	; (8006adc <pvPortMalloc+0x17c>)
 8006a7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7e:	4b17      	ldr	r3, [pc, #92]	; (8006adc <pvPortMalloc+0x17c>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b18      	ldr	r3, [pc, #96]	; (8006ae4 <pvPortMalloc+0x184>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d203      	bcs.n	8006a92 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <pvPortMalloc+0x17c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <pvPortMalloc+0x184>)
 8006a90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <pvPortMalloc+0x178>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aa6:	f7ff faa7 	bl	8005ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <pvPortMalloc+0x16a>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <pvPortMalloc+0x168>
	return pvReturn;
 8006aca:	69fb      	ldr	r3, [r7, #28]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3728      	adds	r7, #40	; 0x28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20002324 	.word	0x20002324
 8006ad8:	20002330 	.word	0x20002330
 8006adc:	20002328 	.word	0x20002328
 8006ae0:	2000231c 	.word	0x2000231c
 8006ae4:	2000232c 	.word	0x2000232c

08006ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d048      	beq.n	8006b8c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006afa:	2308      	movs	r3, #8
 8006afc:	425b      	negs	r3, r3
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <vPortFree+0xac>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <vPortFree+0x44>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60fb      	str	r3, [r7, #12]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <vPortFree+0x62>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60bb      	str	r3, [r7, #8]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <vPortFree+0xac>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4013      	ands	r3, r2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d019      	beq.n	8006b8c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <vPortFree+0xac>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b70:	f7ff fa34 	bl	8005fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <vPortFree+0xb0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	4a06      	ldr	r2, [pc, #24]	; (8006b98 <vPortFree+0xb0>)
 8006b80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b82:	6938      	ldr	r0, [r7, #16]
 8006b84:	f000 f86c 	bl	8006c60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b88:	f7ff fa36 	bl	8005ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b8c:	bf00      	nop
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20002330 	.word	0x20002330
 8006b98:	20002328 	.word	0x20002328

08006b9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ba2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <prvHeapInit+0xac>)
 8006baa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00c      	beq.n	8006bd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3307      	adds	r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <prvHeapInit+0xac>)
 8006bcc:	4413      	add	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	; (8006c4c <prvHeapInit+0xb0>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <prvHeapInit+0xb0>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	4413      	add	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006be8:	2208      	movs	r2, #8
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <prvHeapInit+0xb4>)
 8006bfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bfe:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <prvHeapInit+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c06:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <prvHeapInit+0xb4>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <prvHeapInit+0xb8>)
 8006c2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <prvHeapInit+0xbc>)
 8006c32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <prvHeapInit+0xc0>)
 8006c36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	2000171c 	.word	0x2000171c
 8006c4c:	2000231c 	.word	0x2000231c
 8006c50:	20002324 	.word	0x20002324
 8006c54:	2000232c 	.word	0x2000232c
 8006c58:	20002328 	.word	0x20002328
 8006c5c:	20002330 	.word	0x20002330

08006c60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c68:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <prvInsertBlockIntoFreeList+0xa8>)
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e002      	b.n	8006c74 <prvInsertBlockIntoFreeList+0x14>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d8f7      	bhi.n	8006c6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d108      	bne.n	8006ca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d118      	bne.n	8006ce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <prvInsertBlockIntoFreeList+0xac>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d00d      	beq.n	8006cde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	441a      	add	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e008      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <prvInsertBlockIntoFreeList+0xac>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e003      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d002      	beq.n	8006cfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr
 8006d08:	2000231c 	.word	0x2000231c
 8006d0c:	20002324 	.word	0x20002324

08006d10 <__errno>:
 8006d10:	4b01      	ldr	r3, [pc, #4]	; (8006d18 <__errno+0x8>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000014 	.word	0x20000014

08006d1c <std>:
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	e9c0 3300 	strd	r3, r3, [r0]
 8006d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2a:	6083      	str	r3, [r0, #8]
 8006d2c:	8181      	strh	r1, [r0, #12]
 8006d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d30:	81c2      	strh	r2, [r0, #14]
 8006d32:	6183      	str	r3, [r0, #24]
 8006d34:	4619      	mov	r1, r3
 8006d36:	2208      	movs	r2, #8
 8006d38:	305c      	adds	r0, #92	; 0x5c
 8006d3a:	f000 f91a 	bl	8006f72 <memset>
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <std+0x38>)
 8006d40:	6224      	str	r4, [r4, #32]
 8006d42:	6263      	str	r3, [r4, #36]	; 0x24
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <std+0x3c>)
 8006d46:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <std+0x40>)
 8006d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <std+0x44>)
 8006d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d50:	bd10      	pop	{r4, pc}
 8006d52:	bf00      	nop
 8006d54:	08007be5 	.word	0x08007be5
 8006d58:	08007c07 	.word	0x08007c07
 8006d5c:	08007c3f 	.word	0x08007c3f
 8006d60:	08007c63 	.word	0x08007c63

08006d64 <_cleanup_r>:
 8006d64:	4901      	ldr	r1, [pc, #4]	; (8006d6c <_cleanup_r+0x8>)
 8006d66:	f000 b8af 	b.w	8006ec8 <_fwalk_reent>
 8006d6a:	bf00      	nop
 8006d6c:	08008c29 	.word	0x08008c29

08006d70 <__sfmoreglue>:
 8006d70:	2268      	movs	r2, #104	; 0x68
 8006d72:	b570      	push	{r4, r5, r6, lr}
 8006d74:	1e4d      	subs	r5, r1, #1
 8006d76:	4355      	muls	r5, r2
 8006d78:	460e      	mov	r6, r1
 8006d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d7e:	f000 f921 	bl	8006fc4 <_malloc_r>
 8006d82:	4604      	mov	r4, r0
 8006d84:	b140      	cbz	r0, 8006d98 <__sfmoreglue+0x28>
 8006d86:	2100      	movs	r1, #0
 8006d88:	e9c0 1600 	strd	r1, r6, [r0]
 8006d8c:	300c      	adds	r0, #12
 8006d8e:	60a0      	str	r0, [r4, #8]
 8006d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d94:	f000 f8ed 	bl	8006f72 <memset>
 8006d98:	4620      	mov	r0, r4
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}

08006d9c <__sfp_lock_acquire>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__sfp_lock_acquire+0x8>)
 8006d9e:	f000 b8d8 	b.w	8006f52 <__retarget_lock_acquire_recursive>
 8006da2:	bf00      	nop
 8006da4:	20002335 	.word	0x20002335

08006da8 <__sfp_lock_release>:
 8006da8:	4801      	ldr	r0, [pc, #4]	; (8006db0 <__sfp_lock_release+0x8>)
 8006daa:	f000 b8d3 	b.w	8006f54 <__retarget_lock_release_recursive>
 8006dae:	bf00      	nop
 8006db0:	20002335 	.word	0x20002335

08006db4 <__sinit_lock_acquire>:
 8006db4:	4801      	ldr	r0, [pc, #4]	; (8006dbc <__sinit_lock_acquire+0x8>)
 8006db6:	f000 b8cc 	b.w	8006f52 <__retarget_lock_acquire_recursive>
 8006dba:	bf00      	nop
 8006dbc:	20002336 	.word	0x20002336

08006dc0 <__sinit_lock_release>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <__sinit_lock_release+0x8>)
 8006dc2:	f000 b8c7 	b.w	8006f54 <__retarget_lock_release_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20002336 	.word	0x20002336

08006dcc <__sinit>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4604      	mov	r4, r0
 8006dd0:	f7ff fff0 	bl	8006db4 <__sinit_lock_acquire>
 8006dd4:	69a3      	ldr	r3, [r4, #24]
 8006dd6:	b11b      	cbz	r3, 8006de0 <__sinit+0x14>
 8006dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ddc:	f7ff bff0 	b.w	8006dc0 <__sinit_lock_release>
 8006de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006de4:	6523      	str	r3, [r4, #80]	; 0x50
 8006de6:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <__sinit+0x68>)
 8006de8:	4a13      	ldr	r2, [pc, #76]	; (8006e38 <__sinit+0x6c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	bf08      	it	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	4620      	mov	r0, r4
 8006df6:	bf08      	it	eq
 8006df8:	61a3      	streq	r3, [r4, #24]
 8006dfa:	f000 f81f 	bl	8006e3c <__sfp>
 8006dfe:	6060      	str	r0, [r4, #4]
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 f81b 	bl	8006e3c <__sfp>
 8006e06:	60a0      	str	r0, [r4, #8]
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f817 	bl	8006e3c <__sfp>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2104      	movs	r1, #4
 8006e12:	60e0      	str	r0, [r4, #12]
 8006e14:	6860      	ldr	r0, [r4, #4]
 8006e16:	f7ff ff81 	bl	8006d1c <std>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	2109      	movs	r1, #9
 8006e1e:	68a0      	ldr	r0, [r4, #8]
 8006e20:	f7ff ff7c 	bl	8006d1c <std>
 8006e24:	2202      	movs	r2, #2
 8006e26:	2112      	movs	r1, #18
 8006e28:	68e0      	ldr	r0, [r4, #12]
 8006e2a:	f7ff ff77 	bl	8006d1c <std>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61a3      	str	r3, [r4, #24]
 8006e32:	e7d1      	b.n	8006dd8 <__sinit+0xc>
 8006e34:	08009ed8 	.word	0x08009ed8
 8006e38:	08006d65 	.word	0x08006d65

08006e3c <__sfp>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	4607      	mov	r7, r0
 8006e40:	f7ff ffac 	bl	8006d9c <__sfp_lock_acquire>
 8006e44:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <__sfp+0x84>)
 8006e46:	681e      	ldr	r6, [r3, #0]
 8006e48:	69b3      	ldr	r3, [r6, #24]
 8006e4a:	b913      	cbnz	r3, 8006e52 <__sfp+0x16>
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff ffbd 	bl	8006dcc <__sinit>
 8006e52:	3648      	adds	r6, #72	; 0x48
 8006e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	d503      	bpl.n	8006e64 <__sfp+0x28>
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	b30b      	cbz	r3, 8006ea4 <__sfp+0x68>
 8006e60:	6836      	ldr	r6, [r6, #0]
 8006e62:	e7f7      	b.n	8006e54 <__sfp+0x18>
 8006e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e68:	b9d5      	cbnz	r5, 8006ea0 <__sfp+0x64>
 8006e6a:	4b16      	ldr	r3, [pc, #88]	; (8006ec4 <__sfp+0x88>)
 8006e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e70:	60e3      	str	r3, [r4, #12]
 8006e72:	6665      	str	r5, [r4, #100]	; 0x64
 8006e74:	f000 f86c 	bl	8006f50 <__retarget_lock_init_recursive>
 8006e78:	f7ff ff96 	bl	8006da8 <__sfp_lock_release>
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	4629      	mov	r1, r5
 8006e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e88:	6025      	str	r5, [r4, #0]
 8006e8a:	61a5      	str	r5, [r4, #24]
 8006e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e90:	f000 f86f 	bl	8006f72 <memset>
 8006e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea0:	3468      	adds	r4, #104	; 0x68
 8006ea2:	e7d9      	b.n	8006e58 <__sfp+0x1c>
 8006ea4:	2104      	movs	r1, #4
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f7ff ff62 	bl	8006d70 <__sfmoreglue>
 8006eac:	4604      	mov	r4, r0
 8006eae:	6030      	str	r0, [r6, #0]
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d1d5      	bne.n	8006e60 <__sfp+0x24>
 8006eb4:	f7ff ff78 	bl	8006da8 <__sfp_lock_release>
 8006eb8:	230c      	movs	r3, #12
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	e7ee      	b.n	8006e9c <__sfp+0x60>
 8006ebe:	bf00      	nop
 8006ec0:	08009ed8 	.word	0x08009ed8
 8006ec4:	ffff0001 	.word	0xffff0001

08006ec8 <_fwalk_reent>:
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	4606      	mov	r6, r0
 8006ece:	4688      	mov	r8, r1
 8006ed0:	2700      	movs	r7, #0
 8006ed2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eda:	f1b9 0901 	subs.w	r9, r9, #1
 8006ede:	d505      	bpl.n	8006eec <_fwalk_reent+0x24>
 8006ee0:	6824      	ldr	r4, [r4, #0]
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	d1f7      	bne.n	8006ed6 <_fwalk_reent+0xe>
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eec:	89ab      	ldrh	r3, [r5, #12]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d907      	bls.n	8006f02 <_fwalk_reent+0x3a>
 8006ef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	d003      	beq.n	8006f02 <_fwalk_reent+0x3a>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	47c0      	blx	r8
 8006f00:	4307      	orrs	r7, r0
 8006f02:	3568      	adds	r5, #104	; 0x68
 8006f04:	e7e9      	b.n	8006eda <_fwalk_reent+0x12>
	...

08006f08 <__libc_init_array>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	4d0c      	ldr	r5, [pc, #48]	; (8006f40 <__libc_init_array+0x38>)
 8006f0e:	4c0d      	ldr	r4, [pc, #52]	; (8006f44 <__libc_init_array+0x3c>)
 8006f10:	1b64      	subs	r4, r4, r5
 8006f12:	10a4      	asrs	r4, r4, #2
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	d109      	bne.n	8006f2c <__libc_init_array+0x24>
 8006f18:	f002 ff12 	bl	8009d40 <_init>
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	4d0a      	ldr	r5, [pc, #40]	; (8006f48 <__libc_init_array+0x40>)
 8006f20:	4c0a      	ldr	r4, [pc, #40]	; (8006f4c <__libc_init_array+0x44>)
 8006f22:	1b64      	subs	r4, r4, r5
 8006f24:	10a4      	asrs	r4, r4, #2
 8006f26:	42a6      	cmp	r6, r4
 8006f28:	d105      	bne.n	8006f36 <__libc_init_array+0x2e>
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f30:	4798      	blx	r3
 8006f32:	3601      	adds	r6, #1
 8006f34:	e7ee      	b.n	8006f14 <__libc_init_array+0xc>
 8006f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3a:	4798      	blx	r3
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	e7f2      	b.n	8006f26 <__libc_init_array+0x1e>
 8006f40:	0800a254 	.word	0x0800a254
 8006f44:	0800a254 	.word	0x0800a254
 8006f48:	0800a254 	.word	0x0800a254
 8006f4c:	0800a258 	.word	0x0800a258

08006f50 <__retarget_lock_init_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <__retarget_lock_acquire_recursive>:
 8006f52:	4770      	bx	lr

08006f54 <__retarget_lock_release_recursive>:
 8006f54:	4770      	bx	lr

08006f56 <memcpy>:
 8006f56:	440a      	add	r2, r1
 8006f58:	4291      	cmp	r1, r2
 8006f5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f5e:	d100      	bne.n	8006f62 <memcpy+0xc>
 8006f60:	4770      	bx	lr
 8006f62:	b510      	push	{r4, lr}
 8006f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f68:	4291      	cmp	r1, r2
 8006f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6e:	d1f9      	bne.n	8006f64 <memcpy+0xe>
 8006f70:	bd10      	pop	{r4, pc}

08006f72 <memset>:
 8006f72:	4603      	mov	r3, r0
 8006f74:	4402      	add	r2, r0
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d100      	bne.n	8006f7c <memset+0xa>
 8006f7a:	4770      	bx	lr
 8006f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f80:	e7f9      	b.n	8006f76 <memset+0x4>
	...

08006f84 <sbrk_aligned>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4e0e      	ldr	r6, [pc, #56]	; (8006fc0 <sbrk_aligned+0x3c>)
 8006f88:	460c      	mov	r4, r1
 8006f8a:	6831      	ldr	r1, [r6, #0]
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	b911      	cbnz	r1, 8006f96 <sbrk_aligned+0x12>
 8006f90:	f000 fde4 	bl	8007b5c <_sbrk_r>
 8006f94:	6030      	str	r0, [r6, #0]
 8006f96:	4621      	mov	r1, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 fddf 	bl	8007b5c <_sbrk_r>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	d00a      	beq.n	8006fb8 <sbrk_aligned+0x34>
 8006fa2:	1cc4      	adds	r4, r0, #3
 8006fa4:	f024 0403 	bic.w	r4, r4, #3
 8006fa8:	42a0      	cmp	r0, r4
 8006faa:	d007      	beq.n	8006fbc <sbrk_aligned+0x38>
 8006fac:	1a21      	subs	r1, r4, r0
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 fdd4 	bl	8007b5c <_sbrk_r>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d101      	bne.n	8006fbc <sbrk_aligned+0x38>
 8006fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	2000233c 	.word	0x2000233c

08006fc4 <_malloc_r>:
 8006fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc8:	1ccd      	adds	r5, r1, #3
 8006fca:	f025 0503 	bic.w	r5, r5, #3
 8006fce:	3508      	adds	r5, #8
 8006fd0:	2d0c      	cmp	r5, #12
 8006fd2:	bf38      	it	cc
 8006fd4:	250c      	movcc	r5, #12
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	4607      	mov	r7, r0
 8006fda:	db01      	blt.n	8006fe0 <_malloc_r+0x1c>
 8006fdc:	42a9      	cmp	r1, r5
 8006fde:	d905      	bls.n	8006fec <_malloc_r+0x28>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fec:	4e2e      	ldr	r6, [pc, #184]	; (80070a8 <_malloc_r+0xe4>)
 8006fee:	f001 fee9 	bl	8008dc4 <__malloc_lock>
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	bb34      	cbnz	r4, 8007046 <_malloc_r+0x82>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f7ff ffc2 	bl	8006f84 <sbrk_aligned>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	4604      	mov	r4, r0
 8007004:	d14d      	bne.n	80070a2 <_malloc_r+0xde>
 8007006:	6834      	ldr	r4, [r6, #0]
 8007008:	4626      	mov	r6, r4
 800700a:	2e00      	cmp	r6, #0
 800700c:	d140      	bne.n	8007090 <_malloc_r+0xcc>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	4631      	mov	r1, r6
 8007012:	4638      	mov	r0, r7
 8007014:	eb04 0803 	add.w	r8, r4, r3
 8007018:	f000 fda0 	bl	8007b5c <_sbrk_r>
 800701c:	4580      	cmp	r8, r0
 800701e:	d13a      	bne.n	8007096 <_malloc_r+0xd2>
 8007020:	6821      	ldr	r1, [r4, #0]
 8007022:	3503      	adds	r5, #3
 8007024:	1a6d      	subs	r5, r5, r1
 8007026:	f025 0503 	bic.w	r5, r5, #3
 800702a:	3508      	adds	r5, #8
 800702c:	2d0c      	cmp	r5, #12
 800702e:	bf38      	it	cc
 8007030:	250c      	movcc	r5, #12
 8007032:	4638      	mov	r0, r7
 8007034:	4629      	mov	r1, r5
 8007036:	f7ff ffa5 	bl	8006f84 <sbrk_aligned>
 800703a:	3001      	adds	r0, #1
 800703c:	d02b      	beq.n	8007096 <_malloc_r+0xd2>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	442b      	add	r3, r5
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	e00e      	b.n	8007064 <_malloc_r+0xa0>
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	1b52      	subs	r2, r2, r5
 800704a:	d41e      	bmi.n	800708a <_malloc_r+0xc6>
 800704c:	2a0b      	cmp	r2, #11
 800704e:	d916      	bls.n	800707e <_malloc_r+0xba>
 8007050:	1961      	adds	r1, r4, r5
 8007052:	42a3      	cmp	r3, r4
 8007054:	6025      	str	r5, [r4, #0]
 8007056:	bf18      	it	ne
 8007058:	6059      	strne	r1, [r3, #4]
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	bf08      	it	eq
 800705e:	6031      	streq	r1, [r6, #0]
 8007060:	5162      	str	r2, [r4, r5]
 8007062:	604b      	str	r3, [r1, #4]
 8007064:	4638      	mov	r0, r7
 8007066:	f104 060b 	add.w	r6, r4, #11
 800706a:	f001 feb1 	bl	8008dd0 <__malloc_unlock>
 800706e:	f026 0607 	bic.w	r6, r6, #7
 8007072:	1d23      	adds	r3, r4, #4
 8007074:	1af2      	subs	r2, r6, r3
 8007076:	d0b6      	beq.n	8006fe6 <_malloc_r+0x22>
 8007078:	1b9b      	subs	r3, r3, r6
 800707a:	50a3      	str	r3, [r4, r2]
 800707c:	e7b3      	b.n	8006fe6 <_malloc_r+0x22>
 800707e:	6862      	ldr	r2, [r4, #4]
 8007080:	42a3      	cmp	r3, r4
 8007082:	bf0c      	ite	eq
 8007084:	6032      	streq	r2, [r6, #0]
 8007086:	605a      	strne	r2, [r3, #4]
 8007088:	e7ec      	b.n	8007064 <_malloc_r+0xa0>
 800708a:	4623      	mov	r3, r4
 800708c:	6864      	ldr	r4, [r4, #4]
 800708e:	e7b2      	b.n	8006ff6 <_malloc_r+0x32>
 8007090:	4634      	mov	r4, r6
 8007092:	6876      	ldr	r6, [r6, #4]
 8007094:	e7b9      	b.n	800700a <_malloc_r+0x46>
 8007096:	230c      	movs	r3, #12
 8007098:	4638      	mov	r0, r7
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	f001 fe98 	bl	8008dd0 <__malloc_unlock>
 80070a0:	e7a1      	b.n	8006fe6 <_malloc_r+0x22>
 80070a2:	6025      	str	r5, [r4, #0]
 80070a4:	e7de      	b.n	8007064 <_malloc_r+0xa0>
 80070a6:	bf00      	nop
 80070a8:	20002338 	.word	0x20002338

080070ac <__cvt>:
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b2:	461f      	mov	r7, r3
 80070b4:	bfbb      	ittet	lt
 80070b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070ba:	461f      	movlt	r7, r3
 80070bc:	2300      	movge	r3, #0
 80070be:	232d      	movlt	r3, #45	; 0x2d
 80070c0:	b088      	sub	sp, #32
 80070c2:	4614      	mov	r4, r2
 80070c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070c8:	7013      	strb	r3, [r2, #0]
 80070ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80070d0:	f023 0820 	bic.w	r8, r3, #32
 80070d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070d8:	d005      	beq.n	80070e6 <__cvt+0x3a>
 80070da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070de:	d100      	bne.n	80070e2 <__cvt+0x36>
 80070e0:	3501      	adds	r5, #1
 80070e2:	2302      	movs	r3, #2
 80070e4:	e000      	b.n	80070e8 <__cvt+0x3c>
 80070e6:	2303      	movs	r3, #3
 80070e8:	aa07      	add	r2, sp, #28
 80070ea:	9204      	str	r2, [sp, #16]
 80070ec:	aa06      	add	r2, sp, #24
 80070ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070f2:	e9cd 3500 	strd	r3, r5, [sp]
 80070f6:	4622      	mov	r2, r4
 80070f8:	463b      	mov	r3, r7
 80070fa:	f000 ff25 	bl	8007f48 <_dtoa_r>
 80070fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007102:	4606      	mov	r6, r0
 8007104:	d102      	bne.n	800710c <__cvt+0x60>
 8007106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007108:	07db      	lsls	r3, r3, #31
 800710a:	d522      	bpl.n	8007152 <__cvt+0xa6>
 800710c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007110:	eb06 0905 	add.w	r9, r6, r5
 8007114:	d110      	bne.n	8007138 <__cvt+0x8c>
 8007116:	7833      	ldrb	r3, [r6, #0]
 8007118:	2b30      	cmp	r3, #48	; 0x30
 800711a:	d10a      	bne.n	8007132 <__cvt+0x86>
 800711c:	2200      	movs	r2, #0
 800711e:	2300      	movs	r3, #0
 8007120:	4620      	mov	r0, r4
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8007128:	b918      	cbnz	r0, 8007132 <__cvt+0x86>
 800712a:	f1c5 0501 	rsb	r5, r5, #1
 800712e:	f8ca 5000 	str.w	r5, [sl]
 8007132:	f8da 3000 	ldr.w	r3, [sl]
 8007136:	4499      	add	r9, r3
 8007138:	2200      	movs	r2, #0
 800713a:	2300      	movs	r3, #0
 800713c:	4620      	mov	r0, r4
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 fc32 	bl	80009a8 <__aeabi_dcmpeq>
 8007144:	b108      	cbz	r0, 800714a <__cvt+0x9e>
 8007146:	f8cd 901c 	str.w	r9, [sp, #28]
 800714a:	2230      	movs	r2, #48	; 0x30
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	454b      	cmp	r3, r9
 8007150:	d307      	bcc.n	8007162 <__cvt+0xb6>
 8007152:	4630      	mov	r0, r6
 8007154:	9b07      	ldr	r3, [sp, #28]
 8007156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007158:	1b9b      	subs	r3, r3, r6
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	b008      	add	sp, #32
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007162:	1c59      	adds	r1, r3, #1
 8007164:	9107      	str	r1, [sp, #28]
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e7f0      	b.n	800714c <__cvt+0xa0>

0800716a <__exponent>:
 800716a:	4603      	mov	r3, r0
 800716c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716e:	2900      	cmp	r1, #0
 8007170:	f803 2b02 	strb.w	r2, [r3], #2
 8007174:	bfb6      	itet	lt
 8007176:	222d      	movlt	r2, #45	; 0x2d
 8007178:	222b      	movge	r2, #43	; 0x2b
 800717a:	4249      	neglt	r1, r1
 800717c:	2909      	cmp	r1, #9
 800717e:	7042      	strb	r2, [r0, #1]
 8007180:	dd2b      	ble.n	80071da <__exponent+0x70>
 8007182:	f10d 0407 	add.w	r4, sp, #7
 8007186:	46a4      	mov	ip, r4
 8007188:	270a      	movs	r7, #10
 800718a:	fb91 f6f7 	sdiv	r6, r1, r7
 800718e:	460a      	mov	r2, r1
 8007190:	46a6      	mov	lr, r4
 8007192:	fb07 1516 	mls	r5, r7, r6, r1
 8007196:	2a63      	cmp	r2, #99	; 0x63
 8007198:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800719c:	4631      	mov	r1, r6
 800719e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80071a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071a6:	dcf0      	bgt.n	800718a <__exponent+0x20>
 80071a8:	3130      	adds	r1, #48	; 0x30
 80071aa:	f1ae 0502 	sub.w	r5, lr, #2
 80071ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071b2:	4629      	mov	r1, r5
 80071b4:	1c44      	adds	r4, r0, #1
 80071b6:	4561      	cmp	r1, ip
 80071b8:	d30a      	bcc.n	80071d0 <__exponent+0x66>
 80071ba:	f10d 0209 	add.w	r2, sp, #9
 80071be:	eba2 020e 	sub.w	r2, r2, lr
 80071c2:	4565      	cmp	r5, ip
 80071c4:	bf88      	it	hi
 80071c6:	2200      	movhi	r2, #0
 80071c8:	4413      	add	r3, r2
 80071ca:	1a18      	subs	r0, r3, r0
 80071cc:	b003      	add	sp, #12
 80071ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071d8:	e7ed      	b.n	80071b6 <__exponent+0x4c>
 80071da:	2330      	movs	r3, #48	; 0x30
 80071dc:	3130      	adds	r1, #48	; 0x30
 80071de:	7083      	strb	r3, [r0, #2]
 80071e0:	70c1      	strb	r1, [r0, #3]
 80071e2:	1d03      	adds	r3, r0, #4
 80071e4:	e7f1      	b.n	80071ca <__exponent+0x60>
	...

080071e8 <_printf_float>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	b091      	sub	sp, #68	; 0x44
 80071ee:	460c      	mov	r4, r1
 80071f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80071f4:	4616      	mov	r6, r2
 80071f6:	461f      	mov	r7, r3
 80071f8:	4605      	mov	r5, r0
 80071fa:	f001 fd51 	bl	8008ca0 <_localeconv_r>
 80071fe:	6803      	ldr	r3, [r0, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	9309      	str	r3, [sp, #36]	; 0x24
 8007204:	f7f8 ffa4 	bl	8000150 <strlen>
 8007208:	2300      	movs	r3, #0
 800720a:	930e      	str	r3, [sp, #56]	; 0x38
 800720c:	f8d8 3000 	ldr.w	r3, [r8]
 8007210:	900a      	str	r0, [sp, #40]	; 0x28
 8007212:	3307      	adds	r3, #7
 8007214:	f023 0307 	bic.w	r3, r3, #7
 8007218:	f103 0208 	add.w	r2, r3, #8
 800721c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007220:	f8d4 b000 	ldr.w	fp, [r4]
 8007224:	f8c8 2000 	str.w	r2, [r8]
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007230:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007234:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007238:	930b      	str	r3, [sp, #44]	; 0x2c
 800723a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800723e:	4640      	mov	r0, r8
 8007240:	4b9c      	ldr	r3, [pc, #624]	; (80074b4 <_printf_float+0x2cc>)
 8007242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007244:	f7f9 fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8007248:	bb70      	cbnz	r0, 80072a8 <_printf_float+0xc0>
 800724a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800724e:	4640      	mov	r0, r8
 8007250:	4b98      	ldr	r3, [pc, #608]	; (80074b4 <_printf_float+0x2cc>)
 8007252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007254:	f7f9 fbbc 	bl	80009d0 <__aeabi_dcmple>
 8007258:	bb30      	cbnz	r0, 80072a8 <_printf_float+0xc0>
 800725a:	2200      	movs	r2, #0
 800725c:	2300      	movs	r3, #0
 800725e:	4640      	mov	r0, r8
 8007260:	4651      	mov	r1, sl
 8007262:	f7f9 fbab 	bl	80009bc <__aeabi_dcmplt>
 8007266:	b110      	cbz	r0, 800726e <_printf_float+0x86>
 8007268:	232d      	movs	r3, #45	; 0x2d
 800726a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726e:	4b92      	ldr	r3, [pc, #584]	; (80074b8 <_printf_float+0x2d0>)
 8007270:	4892      	ldr	r0, [pc, #584]	; (80074bc <_printf_float+0x2d4>)
 8007272:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007276:	bf94      	ite	ls
 8007278:	4698      	movls	r8, r3
 800727a:	4680      	movhi	r8, r0
 800727c:	2303      	movs	r3, #3
 800727e:	f04f 0a00 	mov.w	sl, #0
 8007282:	6123      	str	r3, [r4, #16]
 8007284:	f02b 0304 	bic.w	r3, fp, #4
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	4633      	mov	r3, r6
 800728c:	4621      	mov	r1, r4
 800728e:	4628      	mov	r0, r5
 8007290:	9700      	str	r7, [sp, #0]
 8007292:	aa0f      	add	r2, sp, #60	; 0x3c
 8007294:	f000 f9d4 	bl	8007640 <_printf_common>
 8007298:	3001      	adds	r0, #1
 800729a:	f040 8090 	bne.w	80073be <_printf_float+0x1d6>
 800729e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a2:	b011      	add	sp, #68	; 0x44
 80072a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a8:	4642      	mov	r2, r8
 80072aa:	4653      	mov	r3, sl
 80072ac:	4640      	mov	r0, r8
 80072ae:	4651      	mov	r1, sl
 80072b0:	f7f9 fbac 	bl	8000a0c <__aeabi_dcmpun>
 80072b4:	b148      	cbz	r0, 80072ca <_printf_float+0xe2>
 80072b6:	f1ba 0f00 	cmp.w	sl, #0
 80072ba:	bfb8      	it	lt
 80072bc:	232d      	movlt	r3, #45	; 0x2d
 80072be:	4880      	ldr	r0, [pc, #512]	; (80074c0 <_printf_float+0x2d8>)
 80072c0:	bfb8      	it	lt
 80072c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072c6:	4b7f      	ldr	r3, [pc, #508]	; (80074c4 <_printf_float+0x2dc>)
 80072c8:	e7d3      	b.n	8007272 <_printf_float+0x8a>
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	d142      	bne.n	800735a <_printf_float+0x172>
 80072d4:	2306      	movs	r3, #6
 80072d6:	6063      	str	r3, [r4, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	9206      	str	r2, [sp, #24]
 80072dc:	aa0e      	add	r2, sp, #56	; 0x38
 80072de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80072e2:	aa0d      	add	r2, sp, #52	; 0x34
 80072e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80072e8:	9203      	str	r2, [sp, #12]
 80072ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80072ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	4642      	mov	r2, r8
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	4628      	mov	r0, r5
 80072fc:	4653      	mov	r3, sl
 80072fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8007300:	f7ff fed4 	bl	80070ac <__cvt>
 8007304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007306:	4680      	mov	r8, r0
 8007308:	2947      	cmp	r1, #71	; 0x47
 800730a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800730c:	d108      	bne.n	8007320 <_printf_float+0x138>
 800730e:	1cc8      	adds	r0, r1, #3
 8007310:	db02      	blt.n	8007318 <_printf_float+0x130>
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	4299      	cmp	r1, r3
 8007316:	dd40      	ble.n	800739a <_printf_float+0x1b2>
 8007318:	f1a9 0902 	sub.w	r9, r9, #2
 800731c:	fa5f f989 	uxtb.w	r9, r9
 8007320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007324:	d81f      	bhi.n	8007366 <_printf_float+0x17e>
 8007326:	464a      	mov	r2, r9
 8007328:	3901      	subs	r1, #1
 800732a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800732e:	910d      	str	r1, [sp, #52]	; 0x34
 8007330:	f7ff ff1b 	bl	800716a <__exponent>
 8007334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007336:	4682      	mov	sl, r0
 8007338:	1813      	adds	r3, r2, r0
 800733a:	2a01      	cmp	r2, #1
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	dc02      	bgt.n	8007346 <_printf_float+0x15e>
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	07d2      	lsls	r2, r2, #31
 8007344:	d501      	bpl.n	800734a <_printf_float+0x162>
 8007346:	3301      	adds	r3, #1
 8007348:	6123      	str	r3, [r4, #16]
 800734a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800734e:	2b00      	cmp	r3, #0
 8007350:	d09b      	beq.n	800728a <_printf_float+0xa2>
 8007352:	232d      	movs	r3, #45	; 0x2d
 8007354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007358:	e797      	b.n	800728a <_printf_float+0xa2>
 800735a:	2947      	cmp	r1, #71	; 0x47
 800735c:	d1bc      	bne.n	80072d8 <_printf_float+0xf0>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1ba      	bne.n	80072d8 <_printf_float+0xf0>
 8007362:	2301      	movs	r3, #1
 8007364:	e7b7      	b.n	80072d6 <_printf_float+0xee>
 8007366:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800736a:	d118      	bne.n	800739e <_printf_float+0x1b6>
 800736c:	2900      	cmp	r1, #0
 800736e:	6863      	ldr	r3, [r4, #4]
 8007370:	dd0b      	ble.n	800738a <_printf_float+0x1a2>
 8007372:	6121      	str	r1, [r4, #16]
 8007374:	b913      	cbnz	r3, 800737c <_printf_float+0x194>
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	07d0      	lsls	r0, r2, #31
 800737a:	d502      	bpl.n	8007382 <_printf_float+0x19a>
 800737c:	3301      	adds	r3, #1
 800737e:	440b      	add	r3, r1
 8007380:	6123      	str	r3, [r4, #16]
 8007382:	f04f 0a00 	mov.w	sl, #0
 8007386:	65a1      	str	r1, [r4, #88]	; 0x58
 8007388:	e7df      	b.n	800734a <_printf_float+0x162>
 800738a:	b913      	cbnz	r3, 8007392 <_printf_float+0x1aa>
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	07d2      	lsls	r2, r2, #31
 8007390:	d501      	bpl.n	8007396 <_printf_float+0x1ae>
 8007392:	3302      	adds	r3, #2
 8007394:	e7f4      	b.n	8007380 <_printf_float+0x198>
 8007396:	2301      	movs	r3, #1
 8007398:	e7f2      	b.n	8007380 <_printf_float+0x198>
 800739a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800739e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a0:	4299      	cmp	r1, r3
 80073a2:	db05      	blt.n	80073b0 <_printf_float+0x1c8>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	6121      	str	r1, [r4, #16]
 80073a8:	07d8      	lsls	r0, r3, #31
 80073aa:	d5ea      	bpl.n	8007382 <_printf_float+0x19a>
 80073ac:	1c4b      	adds	r3, r1, #1
 80073ae:	e7e7      	b.n	8007380 <_printf_float+0x198>
 80073b0:	2900      	cmp	r1, #0
 80073b2:	bfcc      	ite	gt
 80073b4:	2201      	movgt	r2, #1
 80073b6:	f1c1 0202 	rsble	r2, r1, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	e7e0      	b.n	8007380 <_printf_float+0x198>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	055a      	lsls	r2, r3, #21
 80073c2:	d407      	bmi.n	80073d4 <_printf_float+0x1ec>
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	4642      	mov	r2, r8
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	d12b      	bne.n	800742a <_printf_float+0x242>
 80073d2:	e764      	b.n	800729e <_printf_float+0xb6>
 80073d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073d8:	f240 80dd 	bls.w	8007596 <_printf_float+0x3ae>
 80073dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073e0:	2200      	movs	r2, #0
 80073e2:	2300      	movs	r3, #0
 80073e4:	f7f9 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d033      	beq.n	8007454 <_printf_float+0x26c>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	4a35      	ldr	r2, [pc, #212]	; (80074c8 <_printf_float+0x2e0>)
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af51 	beq.w	800729e <_printf_float+0xb6>
 80073fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007400:	429a      	cmp	r2, r3
 8007402:	db02      	blt.n	800740a <_printf_float+0x222>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07d8      	lsls	r0, r3, #31
 8007408:	d50f      	bpl.n	800742a <_printf_float+0x242>
 800740a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f af42 	beq.w	800729e <_printf_float+0xb6>
 800741a:	f04f 0800 	mov.w	r8, #0
 800741e:	f104 091a 	add.w	r9, r4, #26
 8007422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007424:	3b01      	subs	r3, #1
 8007426:	4543      	cmp	r3, r8
 8007428:	dc09      	bgt.n	800743e <_printf_float+0x256>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	079b      	lsls	r3, r3, #30
 800742e:	f100 8102 	bmi.w	8007636 <_printf_float+0x44e>
 8007432:	68e0      	ldr	r0, [r4, #12]
 8007434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007436:	4298      	cmp	r0, r3
 8007438:	bfb8      	it	lt
 800743a:	4618      	movlt	r0, r3
 800743c:	e731      	b.n	80072a2 <_printf_float+0xba>
 800743e:	2301      	movs	r3, #1
 8007440:	464a      	mov	r2, r9
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f af28 	beq.w	800729e <_printf_float+0xb6>
 800744e:	f108 0801 	add.w	r8, r8, #1
 8007452:	e7e6      	b.n	8007422 <_printf_float+0x23a>
 8007454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc38      	bgt.n	80074cc <_printf_float+0x2e4>
 800745a:	2301      	movs	r3, #1
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <_printf_float+0x2e0>)
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f af1a 	beq.w	800729e <_printf_float+0xb6>
 800746a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800746e:	4313      	orrs	r3, r2
 8007470:	d102      	bne.n	8007478 <_printf_float+0x290>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	07d9      	lsls	r1, r3, #31
 8007476:	d5d8      	bpl.n	800742a <_printf_float+0x242>
 8007478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f af0b 	beq.w	800729e <_printf_float+0xb6>
 8007488:	f04f 0900 	mov.w	r9, #0
 800748c:	f104 0a1a 	add.w	sl, r4, #26
 8007490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007492:	425b      	negs	r3, r3
 8007494:	454b      	cmp	r3, r9
 8007496:	dc01      	bgt.n	800749c <_printf_float+0x2b4>
 8007498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800749a:	e794      	b.n	80073c6 <_printf_float+0x1de>
 800749c:	2301      	movs	r3, #1
 800749e:	4652      	mov	r2, sl
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f aef9 	beq.w	800729e <_printf_float+0xb6>
 80074ac:	f109 0901 	add.w	r9, r9, #1
 80074b0:	e7ee      	b.n	8007490 <_printf_float+0x2a8>
 80074b2:	bf00      	nop
 80074b4:	7fefffff 	.word	0x7fefffff
 80074b8:	08009edc 	.word	0x08009edc
 80074bc:	08009ee0 	.word	0x08009ee0
 80074c0:	08009ee8 	.word	0x08009ee8
 80074c4:	08009ee4 	.word	0x08009ee4
 80074c8:	08009eec 	.word	0x08009eec
 80074cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074d0:	429a      	cmp	r2, r3
 80074d2:	bfa8      	it	ge
 80074d4:	461a      	movge	r2, r3
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	4691      	mov	r9, r2
 80074da:	dc37      	bgt.n	800754c <_printf_float+0x364>
 80074dc:	f04f 0b00 	mov.w	fp, #0
 80074e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074e4:	f104 021a 	add.w	r2, r4, #26
 80074e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074ec:	ebaa 0309 	sub.w	r3, sl, r9
 80074f0:	455b      	cmp	r3, fp
 80074f2:	dc33      	bgt.n	800755c <_printf_float+0x374>
 80074f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80074f8:	429a      	cmp	r2, r3
 80074fa:	db3b      	blt.n	8007574 <_printf_float+0x38c>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	07da      	lsls	r2, r3, #31
 8007500:	d438      	bmi.n	8007574 <_printf_float+0x38c>
 8007502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007504:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007506:	eba3 020a 	sub.w	r2, r3, sl
 800750a:	eba3 0901 	sub.w	r9, r3, r1
 800750e:	4591      	cmp	r9, r2
 8007510:	bfa8      	it	ge
 8007512:	4691      	movge	r9, r2
 8007514:	f1b9 0f00 	cmp.w	r9, #0
 8007518:	dc34      	bgt.n	8007584 <_printf_float+0x39c>
 800751a:	f04f 0800 	mov.w	r8, #0
 800751e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007522:	f104 0a1a 	add.w	sl, r4, #26
 8007526:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	eba3 0309 	sub.w	r3, r3, r9
 8007530:	4543      	cmp	r3, r8
 8007532:	f77f af7a 	ble.w	800742a <_printf_float+0x242>
 8007536:	2301      	movs	r3, #1
 8007538:	4652      	mov	r2, sl
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f aeac 	beq.w	800729e <_printf_float+0xb6>
 8007546:	f108 0801 	add.w	r8, r8, #1
 800754a:	e7ec      	b.n	8007526 <_printf_float+0x33e>
 800754c:	4613      	mov	r3, r2
 800754e:	4631      	mov	r1, r6
 8007550:	4642      	mov	r2, r8
 8007552:	4628      	mov	r0, r5
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	d1c0      	bne.n	80074dc <_printf_float+0x2f4>
 800755a:	e6a0      	b.n	800729e <_printf_float+0xb6>
 800755c:	2301      	movs	r3, #1
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	920b      	str	r2, [sp, #44]	; 0x2c
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f ae99 	beq.w	800729e <_printf_float+0xb6>
 800756c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800756e:	f10b 0b01 	add.w	fp, fp, #1
 8007572:	e7b9      	b.n	80074e8 <_printf_float+0x300>
 8007574:	4631      	mov	r1, r6
 8007576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	d1bf      	bne.n	8007502 <_printf_float+0x31a>
 8007582:	e68c      	b.n	800729e <_printf_float+0xb6>
 8007584:	464b      	mov	r3, r9
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	eb08 020a 	add.w	r2, r8, sl
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	d1c2      	bne.n	800751a <_printf_float+0x332>
 8007594:	e683      	b.n	800729e <_printf_float+0xb6>
 8007596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007598:	2a01      	cmp	r2, #1
 800759a:	dc01      	bgt.n	80075a0 <_printf_float+0x3b8>
 800759c:	07db      	lsls	r3, r3, #31
 800759e:	d537      	bpl.n	8007610 <_printf_float+0x428>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4642      	mov	r2, r8
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f ae77 	beq.w	800729e <_printf_float+0xb6>
 80075b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	f43f ae6f 	beq.w	800729e <_printf_float+0xb6>
 80075c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	f7f9 f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80075cc:	b9d8      	cbnz	r0, 8007606 <_printf_float+0x41e>
 80075ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d0:	f108 0201 	add.w	r2, r8, #1
 80075d4:	3b01      	subs	r3, #1
 80075d6:	4631      	mov	r1, r6
 80075d8:	4628      	mov	r0, r5
 80075da:	47b8      	blx	r7
 80075dc:	3001      	adds	r0, #1
 80075de:	d10e      	bne.n	80075fe <_printf_float+0x416>
 80075e0:	e65d      	b.n	800729e <_printf_float+0xb6>
 80075e2:	2301      	movs	r3, #1
 80075e4:	464a      	mov	r2, r9
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	f43f ae56 	beq.w	800729e <_printf_float+0xb6>
 80075f2:	f108 0801 	add.w	r8, r8, #1
 80075f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f8:	3b01      	subs	r3, #1
 80075fa:	4543      	cmp	r3, r8
 80075fc:	dcf1      	bgt.n	80075e2 <_printf_float+0x3fa>
 80075fe:	4653      	mov	r3, sl
 8007600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007604:	e6e0      	b.n	80073c8 <_printf_float+0x1e0>
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	f104 091a 	add.w	r9, r4, #26
 800760e:	e7f2      	b.n	80075f6 <_printf_float+0x40e>
 8007610:	2301      	movs	r3, #1
 8007612:	4642      	mov	r2, r8
 8007614:	e7df      	b.n	80075d6 <_printf_float+0x3ee>
 8007616:	2301      	movs	r3, #1
 8007618:	464a      	mov	r2, r9
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f ae3c 	beq.w	800729e <_printf_float+0xb6>
 8007626:	f108 0801 	add.w	r8, r8, #1
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800762e:	1a5b      	subs	r3, r3, r1
 8007630:	4543      	cmp	r3, r8
 8007632:	dcf0      	bgt.n	8007616 <_printf_float+0x42e>
 8007634:	e6fd      	b.n	8007432 <_printf_float+0x24a>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	f104 0919 	add.w	r9, r4, #25
 800763e:	e7f4      	b.n	800762a <_printf_float+0x442>

08007640 <_printf_common>:
 8007640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	4616      	mov	r6, r2
 8007646:	4699      	mov	r9, r3
 8007648:	688a      	ldr	r2, [r1, #8]
 800764a:	690b      	ldr	r3, [r1, #16]
 800764c:	4607      	mov	r7, r0
 800764e:	4293      	cmp	r3, r2
 8007650:	bfb8      	it	lt
 8007652:	4613      	movlt	r3, r2
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800765a:	460c      	mov	r4, r1
 800765c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007660:	b10a      	cbz	r2, 8007666 <_printf_common+0x26>
 8007662:	3301      	adds	r3, #1
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	0699      	lsls	r1, r3, #26
 800766a:	bf42      	ittt	mi
 800766c:	6833      	ldrmi	r3, [r6, #0]
 800766e:	3302      	addmi	r3, #2
 8007670:	6033      	strmi	r3, [r6, #0]
 8007672:	6825      	ldr	r5, [r4, #0]
 8007674:	f015 0506 	ands.w	r5, r5, #6
 8007678:	d106      	bne.n	8007688 <_printf_common+0x48>
 800767a:	f104 0a19 	add.w	sl, r4, #25
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	6832      	ldr	r2, [r6, #0]
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	42ab      	cmp	r3, r5
 8007686:	dc28      	bgt.n	80076da <_printf_common+0x9a>
 8007688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800768c:	1e13      	subs	r3, r2, #0
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	bf18      	it	ne
 8007692:	2301      	movne	r3, #1
 8007694:	0692      	lsls	r2, r2, #26
 8007696:	d42d      	bmi.n	80076f4 <_printf_common+0xb4>
 8007698:	4649      	mov	r1, r9
 800769a:	4638      	mov	r0, r7
 800769c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076a0:	47c0      	blx	r8
 80076a2:	3001      	adds	r0, #1
 80076a4:	d020      	beq.n	80076e8 <_printf_common+0xa8>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	68e5      	ldr	r5, [r4, #12]
 80076aa:	f003 0306 	and.w	r3, r3, #6
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	bf18      	it	ne
 80076b2:	2500      	movne	r5, #0
 80076b4:	6832      	ldr	r2, [r6, #0]
 80076b6:	f04f 0600 	mov.w	r6, #0
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	bf08      	it	eq
 80076be:	1aad      	subeq	r5, r5, r2
 80076c0:	6922      	ldr	r2, [r4, #16]
 80076c2:	bf08      	it	eq
 80076c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c8:	4293      	cmp	r3, r2
 80076ca:	bfc4      	itt	gt
 80076cc:	1a9b      	subgt	r3, r3, r2
 80076ce:	18ed      	addgt	r5, r5, r3
 80076d0:	341a      	adds	r4, #26
 80076d2:	42b5      	cmp	r5, r6
 80076d4:	d11a      	bne.n	800770c <_printf_common+0xcc>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e008      	b.n	80076ec <_printf_common+0xac>
 80076da:	2301      	movs	r3, #1
 80076dc:	4652      	mov	r2, sl
 80076de:	4649      	mov	r1, r9
 80076e0:	4638      	mov	r0, r7
 80076e2:	47c0      	blx	r8
 80076e4:	3001      	adds	r0, #1
 80076e6:	d103      	bne.n	80076f0 <_printf_common+0xb0>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f0:	3501      	adds	r5, #1
 80076f2:	e7c4      	b.n	800767e <_printf_common+0x3e>
 80076f4:	2030      	movs	r0, #48	; 0x30
 80076f6:	18e1      	adds	r1, r4, r3
 80076f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007702:	4422      	add	r2, r4
 8007704:	3302      	adds	r3, #2
 8007706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800770a:	e7c5      	b.n	8007698 <_printf_common+0x58>
 800770c:	2301      	movs	r3, #1
 800770e:	4622      	mov	r2, r4
 8007710:	4649      	mov	r1, r9
 8007712:	4638      	mov	r0, r7
 8007714:	47c0      	blx	r8
 8007716:	3001      	adds	r0, #1
 8007718:	d0e6      	beq.n	80076e8 <_printf_common+0xa8>
 800771a:	3601      	adds	r6, #1
 800771c:	e7d9      	b.n	80076d2 <_printf_common+0x92>
	...

08007720 <_printf_i>:
 8007720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	7e0f      	ldrb	r7, [r1, #24]
 8007726:	4691      	mov	r9, r2
 8007728:	2f78      	cmp	r7, #120	; 0x78
 800772a:	4680      	mov	r8, r0
 800772c:	460c      	mov	r4, r1
 800772e:	469a      	mov	sl, r3
 8007730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007736:	d807      	bhi.n	8007748 <_printf_i+0x28>
 8007738:	2f62      	cmp	r7, #98	; 0x62
 800773a:	d80a      	bhi.n	8007752 <_printf_i+0x32>
 800773c:	2f00      	cmp	r7, #0
 800773e:	f000 80d9 	beq.w	80078f4 <_printf_i+0x1d4>
 8007742:	2f58      	cmp	r7, #88	; 0x58
 8007744:	f000 80a4 	beq.w	8007890 <_printf_i+0x170>
 8007748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800774c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007750:	e03a      	b.n	80077c8 <_printf_i+0xa8>
 8007752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007756:	2b15      	cmp	r3, #21
 8007758:	d8f6      	bhi.n	8007748 <_printf_i+0x28>
 800775a:	a101      	add	r1, pc, #4	; (adr r1, 8007760 <_printf_i+0x40>)
 800775c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077cd 	.word	0x080077cd
 8007768:	08007749 	.word	0x08007749
 800776c:	08007749 	.word	0x08007749
 8007770:	08007749 	.word	0x08007749
 8007774:	08007749 	.word	0x08007749
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007749 	.word	0x08007749
 8007780:	08007749 	.word	0x08007749
 8007784:	08007749 	.word	0x08007749
 8007788:	08007749 	.word	0x08007749
 800778c:	080078db 	.word	0x080078db
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080078bd 	.word	0x080078bd
 8007798:	08007749 	.word	0x08007749
 800779c:	08007749 	.word	0x08007749
 80077a0:	080078fd 	.word	0x080078fd
 80077a4:	08007749 	.word	0x08007749
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	08007749 	.word	0x08007749
 80077b0:	08007749 	.word	0x08007749
 80077b4:	080078c5 	.word	0x080078c5
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0a4      	b.n	8007916 <_printf_i+0x1f6>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	6829      	ldr	r1, [r5, #0]
 80077d0:	0606      	lsls	r6, r0, #24
 80077d2:	f101 0304 	add.w	r3, r1, #4
 80077d6:	d50a      	bpl.n	80077ee <_printf_i+0xce>
 80077d8:	680e      	ldr	r6, [r1, #0]
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	2e00      	cmp	r6, #0
 80077de:	da03      	bge.n	80077e8 <_printf_i+0xc8>
 80077e0:	232d      	movs	r3, #45	; 0x2d
 80077e2:	4276      	negs	r6, r6
 80077e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e8:	230a      	movs	r3, #10
 80077ea:	485e      	ldr	r0, [pc, #376]	; (8007964 <_printf_i+0x244>)
 80077ec:	e019      	b.n	8007822 <_printf_i+0x102>
 80077ee:	680e      	ldr	r6, [r1, #0]
 80077f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	bf18      	it	ne
 80077f8:	b236      	sxthne	r6, r6
 80077fa:	e7ef      	b.n	80077dc <_printf_i+0xbc>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	6820      	ldr	r0, [r4, #0]
 8007800:	1d19      	adds	r1, r3, #4
 8007802:	6029      	str	r1, [r5, #0]
 8007804:	0601      	lsls	r1, r0, #24
 8007806:	d501      	bpl.n	800780c <_printf_i+0xec>
 8007808:	681e      	ldr	r6, [r3, #0]
 800780a:	e002      	b.n	8007812 <_printf_i+0xf2>
 800780c:	0646      	lsls	r6, r0, #25
 800780e:	d5fb      	bpl.n	8007808 <_printf_i+0xe8>
 8007810:	881e      	ldrh	r6, [r3, #0]
 8007812:	2f6f      	cmp	r7, #111	; 0x6f
 8007814:	bf0c      	ite	eq
 8007816:	2308      	moveq	r3, #8
 8007818:	230a      	movne	r3, #10
 800781a:	4852      	ldr	r0, [pc, #328]	; (8007964 <_printf_i+0x244>)
 800781c:	2100      	movs	r1, #0
 800781e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007822:	6865      	ldr	r5, [r4, #4]
 8007824:	2d00      	cmp	r5, #0
 8007826:	bfa8      	it	ge
 8007828:	6821      	ldrge	r1, [r4, #0]
 800782a:	60a5      	str	r5, [r4, #8]
 800782c:	bfa4      	itt	ge
 800782e:	f021 0104 	bicge.w	r1, r1, #4
 8007832:	6021      	strge	r1, [r4, #0]
 8007834:	b90e      	cbnz	r6, 800783a <_printf_i+0x11a>
 8007836:	2d00      	cmp	r5, #0
 8007838:	d04d      	beq.n	80078d6 <_printf_i+0x1b6>
 800783a:	4615      	mov	r5, r2
 800783c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007840:	fb03 6711 	mls	r7, r3, r1, r6
 8007844:	5dc7      	ldrb	r7, [r0, r7]
 8007846:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800784a:	4637      	mov	r7, r6
 800784c:	42bb      	cmp	r3, r7
 800784e:	460e      	mov	r6, r1
 8007850:	d9f4      	bls.n	800783c <_printf_i+0x11c>
 8007852:	2b08      	cmp	r3, #8
 8007854:	d10b      	bne.n	800786e <_printf_i+0x14e>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	07de      	lsls	r6, r3, #31
 800785a:	d508      	bpl.n	800786e <_printf_i+0x14e>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	6861      	ldr	r1, [r4, #4]
 8007860:	4299      	cmp	r1, r3
 8007862:	bfde      	ittt	le
 8007864:	2330      	movle	r3, #48	; 0x30
 8007866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800786a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800786e:	1b52      	subs	r2, r2, r5
 8007870:	6122      	str	r2, [r4, #16]
 8007872:	464b      	mov	r3, r9
 8007874:	4621      	mov	r1, r4
 8007876:	4640      	mov	r0, r8
 8007878:	f8cd a000 	str.w	sl, [sp]
 800787c:	aa03      	add	r2, sp, #12
 800787e:	f7ff fedf 	bl	8007640 <_printf_common>
 8007882:	3001      	adds	r0, #1
 8007884:	d14c      	bne.n	8007920 <_printf_i+0x200>
 8007886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800788a:	b004      	add	sp, #16
 800788c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007890:	4834      	ldr	r0, [pc, #208]	; (8007964 <_printf_i+0x244>)
 8007892:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007896:	6829      	ldr	r1, [r5, #0]
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	f851 6b04 	ldr.w	r6, [r1], #4
 800789e:	6029      	str	r1, [r5, #0]
 80078a0:	061d      	lsls	r5, r3, #24
 80078a2:	d514      	bpl.n	80078ce <_printf_i+0x1ae>
 80078a4:	07df      	lsls	r7, r3, #31
 80078a6:	bf44      	itt	mi
 80078a8:	f043 0320 	orrmi.w	r3, r3, #32
 80078ac:	6023      	strmi	r3, [r4, #0]
 80078ae:	b91e      	cbnz	r6, 80078b8 <_printf_i+0x198>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	f023 0320 	bic.w	r3, r3, #32
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	2310      	movs	r3, #16
 80078ba:	e7af      	b.n	800781c <_printf_i+0xfc>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	f043 0320 	orr.w	r3, r3, #32
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	2378      	movs	r3, #120	; 0x78
 80078c6:	4828      	ldr	r0, [pc, #160]	; (8007968 <_printf_i+0x248>)
 80078c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078cc:	e7e3      	b.n	8007896 <_printf_i+0x176>
 80078ce:	0659      	lsls	r1, r3, #25
 80078d0:	bf48      	it	mi
 80078d2:	b2b6      	uxthmi	r6, r6
 80078d4:	e7e6      	b.n	80078a4 <_printf_i+0x184>
 80078d6:	4615      	mov	r5, r2
 80078d8:	e7bb      	b.n	8007852 <_printf_i+0x132>
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	6826      	ldr	r6, [r4, #0]
 80078de:	1d18      	adds	r0, r3, #4
 80078e0:	6961      	ldr	r1, [r4, #20]
 80078e2:	6028      	str	r0, [r5, #0]
 80078e4:	0635      	lsls	r5, r6, #24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	d501      	bpl.n	80078ee <_printf_i+0x1ce>
 80078ea:	6019      	str	r1, [r3, #0]
 80078ec:	e002      	b.n	80078f4 <_printf_i+0x1d4>
 80078ee:	0670      	lsls	r0, r6, #25
 80078f0:	d5fb      	bpl.n	80078ea <_printf_i+0x1ca>
 80078f2:	8019      	strh	r1, [r3, #0]
 80078f4:	2300      	movs	r3, #0
 80078f6:	4615      	mov	r5, r2
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	e7ba      	b.n	8007872 <_printf_i+0x152>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	2100      	movs	r1, #0
 8007900:	1d1a      	adds	r2, r3, #4
 8007902:	602a      	str	r2, [r5, #0]
 8007904:	681d      	ldr	r5, [r3, #0]
 8007906:	6862      	ldr	r2, [r4, #4]
 8007908:	4628      	mov	r0, r5
 800790a:	f001 fa4d 	bl	8008da8 <memchr>
 800790e:	b108      	cbz	r0, 8007914 <_printf_i+0x1f4>
 8007910:	1b40      	subs	r0, r0, r5
 8007912:	6060      	str	r0, [r4, #4]
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	6123      	str	r3, [r4, #16]
 8007918:	2300      	movs	r3, #0
 800791a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791e:	e7a8      	b.n	8007872 <_printf_i+0x152>
 8007920:	462a      	mov	r2, r5
 8007922:	4649      	mov	r1, r9
 8007924:	4640      	mov	r0, r8
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	47d0      	blx	sl
 800792a:	3001      	adds	r0, #1
 800792c:	d0ab      	beq.n	8007886 <_printf_i+0x166>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	079b      	lsls	r3, r3, #30
 8007932:	d413      	bmi.n	800795c <_printf_i+0x23c>
 8007934:	68e0      	ldr	r0, [r4, #12]
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	4298      	cmp	r0, r3
 800793a:	bfb8      	it	lt
 800793c:	4618      	movlt	r0, r3
 800793e:	e7a4      	b.n	800788a <_printf_i+0x16a>
 8007940:	2301      	movs	r3, #1
 8007942:	4632      	mov	r2, r6
 8007944:	4649      	mov	r1, r9
 8007946:	4640      	mov	r0, r8
 8007948:	47d0      	blx	sl
 800794a:	3001      	adds	r0, #1
 800794c:	d09b      	beq.n	8007886 <_printf_i+0x166>
 800794e:	3501      	adds	r5, #1
 8007950:	68e3      	ldr	r3, [r4, #12]
 8007952:	9903      	ldr	r1, [sp, #12]
 8007954:	1a5b      	subs	r3, r3, r1
 8007956:	42ab      	cmp	r3, r5
 8007958:	dcf2      	bgt.n	8007940 <_printf_i+0x220>
 800795a:	e7eb      	b.n	8007934 <_printf_i+0x214>
 800795c:	2500      	movs	r5, #0
 800795e:	f104 0619 	add.w	r6, r4, #25
 8007962:	e7f5      	b.n	8007950 <_printf_i+0x230>
 8007964:	08009eee 	.word	0x08009eee
 8007968:	08009eff 	.word	0x08009eff

0800796c <iprintf>:
 800796c:	b40f      	push	{r0, r1, r2, r3}
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <iprintf+0x2c>)
 8007970:	b513      	push	{r0, r1, r4, lr}
 8007972:	681c      	ldr	r4, [r3, #0]
 8007974:	b124      	cbz	r4, 8007980 <iprintf+0x14>
 8007976:	69a3      	ldr	r3, [r4, #24]
 8007978:	b913      	cbnz	r3, 8007980 <iprintf+0x14>
 800797a:	4620      	mov	r0, r4
 800797c:	f7ff fa26 	bl	8006dcc <__sinit>
 8007980:	ab05      	add	r3, sp, #20
 8007982:	4620      	mov	r0, r4
 8007984:	9a04      	ldr	r2, [sp, #16]
 8007986:	68a1      	ldr	r1, [r4, #8]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	f001 ff89 	bl	80098a0 <_vfiprintf_r>
 800798e:	b002      	add	sp, #8
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	b004      	add	sp, #16
 8007996:	4770      	bx	lr
 8007998:	20000014 	.word	0x20000014

0800799c <_puts_r>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	460e      	mov	r6, r1
 80079a0:	4605      	mov	r5, r0
 80079a2:	b118      	cbz	r0, 80079ac <_puts_r+0x10>
 80079a4:	6983      	ldr	r3, [r0, #24]
 80079a6:	b90b      	cbnz	r3, 80079ac <_puts_r+0x10>
 80079a8:	f7ff fa10 	bl	8006dcc <__sinit>
 80079ac:	69ab      	ldr	r3, [r5, #24]
 80079ae:	68ac      	ldr	r4, [r5, #8]
 80079b0:	b913      	cbnz	r3, 80079b8 <_puts_r+0x1c>
 80079b2:	4628      	mov	r0, r5
 80079b4:	f7ff fa0a 	bl	8006dcc <__sinit>
 80079b8:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <_puts_r+0xd0>)
 80079ba:	429c      	cmp	r4, r3
 80079bc:	d120      	bne.n	8007a00 <_puts_r+0x64>
 80079be:	686c      	ldr	r4, [r5, #4]
 80079c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079c2:	07db      	lsls	r3, r3, #31
 80079c4:	d405      	bmi.n	80079d2 <_puts_r+0x36>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	0598      	lsls	r0, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_puts_r+0x36>
 80079cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ce:	f7ff fac0 	bl	8006f52 <__retarget_lock_acquire_recursive>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	0719      	lsls	r1, r3, #28
 80079d6:	d51d      	bpl.n	8007a14 <_puts_r+0x78>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	b1db      	cbz	r3, 8007a14 <_puts_r+0x78>
 80079dc:	3e01      	subs	r6, #1
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079e4:	3b01      	subs	r3, #1
 80079e6:	60a3      	str	r3, [r4, #8]
 80079e8:	bb39      	cbnz	r1, 8007a3a <_puts_r+0x9e>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	da38      	bge.n	8007a60 <_puts_r+0xc4>
 80079ee:	4622      	mov	r2, r4
 80079f0:	210a      	movs	r1, #10
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f93a 	bl	8007c6c <__swbuf_r>
 80079f8:	3001      	adds	r0, #1
 80079fa:	d011      	beq.n	8007a20 <_puts_r+0x84>
 80079fc:	250a      	movs	r5, #10
 80079fe:	e011      	b.n	8007a24 <_puts_r+0x88>
 8007a00:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <_puts_r+0xd4>)
 8007a02:	429c      	cmp	r4, r3
 8007a04:	d101      	bne.n	8007a0a <_puts_r+0x6e>
 8007a06:	68ac      	ldr	r4, [r5, #8]
 8007a08:	e7da      	b.n	80079c0 <_puts_r+0x24>
 8007a0a:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <_puts_r+0xd8>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	bf08      	it	eq
 8007a10:	68ec      	ldreq	r4, [r5, #12]
 8007a12:	e7d5      	b.n	80079c0 <_puts_r+0x24>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 f98c 	bl	8007d34 <__swsetup_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d0dd      	beq.n	80079dc <_puts_r+0x40>
 8007a20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a26:	07da      	lsls	r2, r3, #31
 8007a28:	d405      	bmi.n	8007a36 <_puts_r+0x9a>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	059b      	lsls	r3, r3, #22
 8007a2e:	d402      	bmi.n	8007a36 <_puts_r+0x9a>
 8007a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a32:	f7ff fa8f 	bl	8006f54 <__retarget_lock_release_recursive>
 8007a36:	4628      	mov	r0, r5
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da04      	bge.n	8007a48 <_puts_r+0xac>
 8007a3e:	69a2      	ldr	r2, [r4, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	dc06      	bgt.n	8007a52 <_puts_r+0xb6>
 8007a44:	290a      	cmp	r1, #10
 8007a46:	d004      	beq.n	8007a52 <_puts_r+0xb6>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	7019      	strb	r1, [r3, #0]
 8007a50:	e7c5      	b.n	80079de <_puts_r+0x42>
 8007a52:	4622      	mov	r2, r4
 8007a54:	4628      	mov	r0, r5
 8007a56:	f000 f909 	bl	8007c6c <__swbuf_r>
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d1bf      	bne.n	80079de <_puts_r+0x42>
 8007a5e:	e7df      	b.n	8007a20 <_puts_r+0x84>
 8007a60:	250a      	movs	r5, #10
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	701d      	strb	r5, [r3, #0]
 8007a6a:	e7db      	b.n	8007a24 <_puts_r+0x88>
 8007a6c:	08009e98 	.word	0x08009e98
 8007a70:	08009eb8 	.word	0x08009eb8
 8007a74:	08009e78 	.word	0x08009e78

08007a78 <puts>:
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <puts+0xc>)
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	f7ff bf8d 	b.w	800799c <_puts_r>
 8007a82:	bf00      	nop
 8007a84:	20000014 	.word	0x20000014

08007a88 <cleanup_glue>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	6809      	ldr	r1, [r1, #0]
 8007a8e:	4605      	mov	r5, r0
 8007a90:	b109      	cbz	r1, 8007a96 <cleanup_glue+0xe>
 8007a92:	f7ff fff9 	bl	8007a88 <cleanup_glue>
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a9e:	f001 bd33 	b.w	8009508 <_free_r>
	...

08007aa4 <_reclaim_reent>:
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <_reclaim_reent+0xb4>)
 8007aa6:	b570      	push	{r4, r5, r6, lr}
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4283      	cmp	r3, r0
 8007aae:	d051      	beq.n	8007b54 <_reclaim_reent+0xb0>
 8007ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ab2:	b143      	cbz	r3, 8007ac6 <_reclaim_reent+0x22>
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d14a      	bne.n	8007b50 <_reclaim_reent+0xac>
 8007aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	b111      	cbz	r1, 8007ac6 <_reclaim_reent+0x22>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 fd21 	bl	8009508 <_free_r>
 8007ac6:	6961      	ldr	r1, [r4, #20]
 8007ac8:	b111      	cbz	r1, 8007ad0 <_reclaim_reent+0x2c>
 8007aca:	4620      	mov	r0, r4
 8007acc:	f001 fd1c 	bl	8009508 <_free_r>
 8007ad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ad2:	b111      	cbz	r1, 8007ada <_reclaim_reent+0x36>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f001 fd17 	bl	8009508 <_free_r>
 8007ada:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007adc:	b111      	cbz	r1, 8007ae4 <_reclaim_reent+0x40>
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f001 fd12 	bl	8009508 <_free_r>
 8007ae4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ae6:	b111      	cbz	r1, 8007aee <_reclaim_reent+0x4a>
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f001 fd0d 	bl	8009508 <_free_r>
 8007aee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007af0:	b111      	cbz	r1, 8007af8 <_reclaim_reent+0x54>
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fd08 	bl	8009508 <_free_r>
 8007af8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007afa:	b111      	cbz	r1, 8007b02 <_reclaim_reent+0x5e>
 8007afc:	4620      	mov	r0, r4
 8007afe:	f001 fd03 	bl	8009508 <_free_r>
 8007b02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007b04:	b111      	cbz	r1, 8007b0c <_reclaim_reent+0x68>
 8007b06:	4620      	mov	r0, r4
 8007b08:	f001 fcfe 	bl	8009508 <_free_r>
 8007b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b0e:	b111      	cbz	r1, 8007b16 <_reclaim_reent+0x72>
 8007b10:	4620      	mov	r0, r4
 8007b12:	f001 fcf9 	bl	8009508 <_free_r>
 8007b16:	69a3      	ldr	r3, [r4, #24]
 8007b18:	b1e3      	cbz	r3, 8007b54 <_reclaim_reent+0xb0>
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b1e:	4798      	blx	r3
 8007b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b22:	b1b9      	cbz	r1, 8007b54 <_reclaim_reent+0xb0>
 8007b24:	4620      	mov	r0, r4
 8007b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b2a:	f7ff bfad 	b.w	8007a88 <cleanup_glue>
 8007b2e:	5949      	ldr	r1, [r1, r5]
 8007b30:	b941      	cbnz	r1, 8007b44 <_reclaim_reent+0xa0>
 8007b32:	3504      	adds	r5, #4
 8007b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b36:	2d80      	cmp	r5, #128	; 0x80
 8007b38:	68d9      	ldr	r1, [r3, #12]
 8007b3a:	d1f8      	bne.n	8007b2e <_reclaim_reent+0x8a>
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f001 fce3 	bl	8009508 <_free_r>
 8007b42:	e7ba      	b.n	8007aba <_reclaim_reent+0x16>
 8007b44:	680e      	ldr	r6, [r1, #0]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f001 fcde 	bl	8009508 <_free_r>
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	e7ef      	b.n	8007b30 <_reclaim_reent+0x8c>
 8007b50:	2500      	movs	r5, #0
 8007b52:	e7ef      	b.n	8007b34 <_reclaim_reent+0x90>
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	bf00      	nop
 8007b58:	20000014 	.word	0x20000014

08007b5c <_sbrk_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4d05      	ldr	r5, [pc, #20]	; (8007b78 <_sbrk_r+0x1c>)
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	602b      	str	r3, [r5, #0]
 8007b68:	f7fa f8f4 	bl	8001d54 <_sbrk>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_sbrk_r+0x1a>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_sbrk_r+0x1a>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	20002340 	.word	0x20002340

08007b7c <sniprintf>:
 8007b7c:	b40c      	push	{r2, r3}
 8007b7e:	b530      	push	{r4, r5, lr}
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <sniprintf+0x64>)
 8007b82:	1e0c      	subs	r4, r1, #0
 8007b84:	681d      	ldr	r5, [r3, #0]
 8007b86:	b09d      	sub	sp, #116	; 0x74
 8007b88:	da08      	bge.n	8007b9c <sniprintf+0x20>
 8007b8a:	238b      	movs	r3, #139	; 0x8b
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	b01d      	add	sp, #116	; 0x74
 8007b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b98:	b002      	add	sp, #8
 8007b9a:	4770      	bx	lr
 8007b9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ba0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ba4:	bf0c      	ite	eq
 8007ba6:	4623      	moveq	r3, r4
 8007ba8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007bac:	9304      	str	r3, [sp, #16]
 8007bae:	9307      	str	r3, [sp, #28]
 8007bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	9006      	str	r0, [sp, #24]
 8007bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	ab21      	add	r3, sp, #132	; 0x84
 8007bc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bc2:	a902      	add	r1, sp, #8
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	f001 fd43 	bl	8009650 <_svfiprintf_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	bfbc      	itt	lt
 8007bce:	238b      	movlt	r3, #139	; 0x8b
 8007bd0:	602b      	strlt	r3, [r5, #0]
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	d0dd      	beq.n	8007b92 <sniprintf+0x16>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e7d9      	b.n	8007b92 <sniprintf+0x16>
 8007bde:	bf00      	nop
 8007be0:	20000014 	.word	0x20000014

08007be4 <__sread>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	f001 ff88 	bl	8009b00 <_read_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	bfab      	itete	ge
 8007bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf8:	181b      	addge	r3, r3, r0
 8007bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bfe:	bfac      	ite	ge
 8007c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c02:	81a3      	strhlt	r3, [r4, #12]
 8007c04:	bd10      	pop	{r4, pc}

08007c06 <__swrite>:
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	461f      	mov	r7, r3
 8007c0c:	898b      	ldrh	r3, [r1, #12]
 8007c0e:	4605      	mov	r5, r0
 8007c10:	05db      	lsls	r3, r3, #23
 8007c12:	460c      	mov	r4, r1
 8007c14:	4616      	mov	r6, r2
 8007c16:	d505      	bpl.n	8007c24 <__swrite+0x1e>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c20:	f001 f842 	bl	8008ca8 <_lseek_r>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	4632      	mov	r2, r6
 8007c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	4628      	mov	r0, r5
 8007c30:	463b      	mov	r3, r7
 8007c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	f000 b869 	b.w	8007d10 <_write_r>

08007c3e <__sseek>:
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c46:	f001 f82f 	bl	8008ca8 <_lseek_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	bf15      	itete	ne
 8007c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c5a:	81a3      	strheq	r3, [r4, #12]
 8007c5c:	bf18      	it	ne
 8007c5e:	81a3      	strhne	r3, [r4, #12]
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <__sclose>:
 8007c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c66:	f000 b8d3 	b.w	8007e10 <_close_r>
	...

08007c6c <__swbuf_r>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	460e      	mov	r6, r1
 8007c70:	4614      	mov	r4, r2
 8007c72:	4605      	mov	r5, r0
 8007c74:	b118      	cbz	r0, 8007c7e <__swbuf_r+0x12>
 8007c76:	6983      	ldr	r3, [r0, #24]
 8007c78:	b90b      	cbnz	r3, 8007c7e <__swbuf_r+0x12>
 8007c7a:	f7ff f8a7 	bl	8006dcc <__sinit>
 8007c7e:	4b21      	ldr	r3, [pc, #132]	; (8007d04 <__swbuf_r+0x98>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	d12b      	bne.n	8007cdc <__swbuf_r+0x70>
 8007c84:	686c      	ldr	r4, [r5, #4]
 8007c86:	69a3      	ldr	r3, [r4, #24]
 8007c88:	60a3      	str	r3, [r4, #8]
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	071a      	lsls	r2, r3, #28
 8007c8e:	d52f      	bpl.n	8007cf0 <__swbuf_r+0x84>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	b36b      	cbz	r3, 8007cf0 <__swbuf_r+0x84>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	b2f6      	uxtb	r6, r6
 8007c9a:	1ac0      	subs	r0, r0, r3
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	4637      	mov	r7, r6
 8007ca0:	4283      	cmp	r3, r0
 8007ca2:	dc04      	bgt.n	8007cae <__swbuf_r+0x42>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 ffbe 	bl	8008c28 <_fflush_r>
 8007cac:	bb30      	cbnz	r0, 8007cfc <__swbuf_r+0x90>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	701e      	strb	r6, [r3, #0]
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	4283      	cmp	r3, r0
 8007cc2:	d004      	beq.n	8007cce <__swbuf_r+0x62>
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	07db      	lsls	r3, r3, #31
 8007cc8:	d506      	bpl.n	8007cd8 <__swbuf_r+0x6c>
 8007cca:	2e0a      	cmp	r6, #10
 8007ccc:	d104      	bne.n	8007cd8 <__swbuf_r+0x6c>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 ffa9 	bl	8008c28 <_fflush_r>
 8007cd6:	b988      	cbnz	r0, 8007cfc <__swbuf_r+0x90>
 8007cd8:	4638      	mov	r0, r7
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <__swbuf_r+0x9c>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d101      	bne.n	8007ce6 <__swbuf_r+0x7a>
 8007ce2:	68ac      	ldr	r4, [r5, #8]
 8007ce4:	e7cf      	b.n	8007c86 <__swbuf_r+0x1a>
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <__swbuf_r+0xa0>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	bf08      	it	eq
 8007cec:	68ec      	ldreq	r4, [r5, #12]
 8007cee:	e7ca      	b.n	8007c86 <__swbuf_r+0x1a>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f000 f81e 	bl	8007d34 <__swsetup_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0cb      	beq.n	8007c94 <__swbuf_r+0x28>
 8007cfc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d00:	e7ea      	b.n	8007cd8 <__swbuf_r+0x6c>
 8007d02:	bf00      	nop
 8007d04:	08009e98 	.word	0x08009e98
 8007d08:	08009eb8 	.word	0x08009eb8
 8007d0c:	08009e78 	.word	0x08009e78

08007d10 <_write_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4d05      	ldr	r5, [pc, #20]	; (8007d30 <_write_r+0x20>)
 8007d1c:	602a      	str	r2, [r5, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f7f8 ffb6 	bl	8000c90 <_write>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_write_r+0x1e>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_write_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20002340 	.word	0x20002340

08007d34 <__swsetup_r>:
 8007d34:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <__swsetup_r+0xcc>)
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	681d      	ldr	r5, [r3, #0]
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	b125      	cbz	r5, 8007d4a <__swsetup_r+0x16>
 8007d40:	69ab      	ldr	r3, [r5, #24]
 8007d42:	b913      	cbnz	r3, 8007d4a <__swsetup_r+0x16>
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff f841 	bl	8006dcc <__sinit>
 8007d4a:	4b2e      	ldr	r3, [pc, #184]	; (8007e04 <__swsetup_r+0xd0>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d10f      	bne.n	8007d70 <__swsetup_r+0x3c>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d58:	0719      	lsls	r1, r3, #28
 8007d5a:	d42c      	bmi.n	8007db6 <__swsetup_r+0x82>
 8007d5c:	06dd      	lsls	r5, r3, #27
 8007d5e:	d411      	bmi.n	8007d84 <__swsetup_r+0x50>
 8007d60:	2309      	movs	r3, #9
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	e03e      	b.n	8007dee <__swsetup_r+0xba>
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <__swsetup_r+0xd4>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <__swsetup_r+0x46>
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	e7eb      	b.n	8007d52 <__swsetup_r+0x1e>
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <__swsetup_r+0xd8>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	bf08      	it	eq
 8007d80:	68ec      	ldreq	r4, [r5, #12]
 8007d82:	e7e6      	b.n	8007d52 <__swsetup_r+0x1e>
 8007d84:	0758      	lsls	r0, r3, #29
 8007d86:	d512      	bpl.n	8007dae <__swsetup_r+0x7a>
 8007d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8a:	b141      	cbz	r1, 8007d9e <__swsetup_r+0x6a>
 8007d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d90:	4299      	cmp	r1, r3
 8007d92:	d002      	beq.n	8007d9a <__swsetup_r+0x66>
 8007d94:	4630      	mov	r0, r6
 8007d96:	f001 fbb7 	bl	8009508 <_free_r>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	2300      	movs	r3, #0
 8007da8:	6063      	str	r3, [r4, #4]
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f043 0308 	orr.w	r3, r3, #8
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	6923      	ldr	r3, [r4, #16]
 8007db8:	b94b      	cbnz	r3, 8007dce <__swsetup_r+0x9a>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc4:	d003      	beq.n	8007dce <__swsetup_r+0x9a>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 ffa5 	bl	8008d18 <__smakebuf_r>
 8007dce:	89a0      	ldrh	r0, [r4, #12]
 8007dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd4:	f010 0301 	ands.w	r3, r0, #1
 8007dd8:	d00a      	beq.n	8007df0 <__swsetup_r+0xbc>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60a3      	str	r3, [r4, #8]
 8007dde:	6963      	ldr	r3, [r4, #20]
 8007de0:	425b      	negs	r3, r3
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	b943      	cbnz	r3, 8007dfa <__swsetup_r+0xc6>
 8007de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dec:	d1ba      	bne.n	8007d64 <__swsetup_r+0x30>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	0781      	lsls	r1, r0, #30
 8007df2:	bf58      	it	pl
 8007df4:	6963      	ldrpl	r3, [r4, #20]
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	e7f4      	b.n	8007de4 <__swsetup_r+0xb0>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7f7      	b.n	8007dee <__swsetup_r+0xba>
 8007dfe:	bf00      	nop
 8007e00:	20000014 	.word	0x20000014
 8007e04:	08009e98 	.word	0x08009e98
 8007e08:	08009eb8 	.word	0x08009eb8
 8007e0c:	08009e78 	.word	0x08009e78

08007e10 <_close_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	2300      	movs	r3, #0
 8007e14:	4d05      	ldr	r5, [pc, #20]	; (8007e2c <_close_r+0x1c>)
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7f9 ff6a 	bl	8001cf4 <_close>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_close_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_close_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20002340 	.word	0x20002340

08007e30 <quorem>:
 8007e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	6903      	ldr	r3, [r0, #16]
 8007e36:	690c      	ldr	r4, [r1, #16]
 8007e38:	4607      	mov	r7, r0
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	f2c0 8082 	blt.w	8007f44 <quorem+0x114>
 8007e40:	3c01      	subs	r4, #1
 8007e42:	f100 0514 	add.w	r5, r0, #20
 8007e46:	f101 0814 	add.w	r8, r1, #20
 8007e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e68:	d331      	bcc.n	8007ece <quorem+0x9e>
 8007e6a:	f04f 0e00 	mov.w	lr, #0
 8007e6e:	4640      	mov	r0, r8
 8007e70:	46ac      	mov	ip, r5
 8007e72:	46f2      	mov	sl, lr
 8007e74:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e78:	b293      	uxth	r3, r2
 8007e7a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e7e:	0c12      	lsrs	r2, r2, #16
 8007e80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	fb06 e202 	mla	r2, r6, r2, lr
 8007e8a:	ebaa 0303 	sub.w	r3, sl, r3
 8007e8e:	f8dc a000 	ldr.w	sl, [ip]
 8007e92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e96:	fa1f fa8a 	uxth.w	sl, sl
 8007e9a:	4453      	add	r3, sl
 8007e9c:	f8dc a000 	ldr.w	sl, [ip]
 8007ea0:	b292      	uxth	r2, r2
 8007ea2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ea6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eb0:	4581      	cmp	r9, r0
 8007eb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eb6:	f84c 3b04 	str.w	r3, [ip], #4
 8007eba:	d2db      	bcs.n	8007e74 <quorem+0x44>
 8007ebc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ec0:	b92b      	cbnz	r3, 8007ece <quorem+0x9e>
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	d32f      	bcc.n	8007f2c <quorem+0xfc>
 8007ecc:	613c      	str	r4, [r7, #16]
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f001 fa02 	bl	80092d8 <__mcmp>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	db25      	blt.n	8007f24 <quorem+0xf4>
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f04f 0c00 	mov.w	ip, #0
 8007ede:	3601      	adds	r6, #1
 8007ee0:	f858 1b04 	ldr.w	r1, [r8], #4
 8007ee4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ee8:	b28b      	uxth	r3, r1
 8007eea:	ebac 0303 	sub.w	r3, ip, r3
 8007eee:	fa1f f28e 	uxth.w	r2, lr
 8007ef2:	4413      	add	r3, r2
 8007ef4:	0c0a      	lsrs	r2, r1, #16
 8007ef6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f04:	45c1      	cmp	r9, r8
 8007f06:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f0a:	f840 3b04 	str.w	r3, [r0], #4
 8007f0e:	d2e7      	bcs.n	8007ee0 <quorem+0xb0>
 8007f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f18:	b922      	cbnz	r2, 8007f24 <quorem+0xf4>
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	429d      	cmp	r5, r3
 8007f1e:	461a      	mov	r2, r3
 8007f20:	d30a      	bcc.n	8007f38 <quorem+0x108>
 8007f22:	613c      	str	r4, [r7, #16]
 8007f24:	4630      	mov	r0, r6
 8007f26:	b003      	add	sp, #12
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	3b04      	subs	r3, #4
 8007f30:	2a00      	cmp	r2, #0
 8007f32:	d1cb      	bne.n	8007ecc <quorem+0x9c>
 8007f34:	3c01      	subs	r4, #1
 8007f36:	e7c6      	b.n	8007ec6 <quorem+0x96>
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	3b04      	subs	r3, #4
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	d1f0      	bne.n	8007f22 <quorem+0xf2>
 8007f40:	3c01      	subs	r4, #1
 8007f42:	e7eb      	b.n	8007f1c <quorem+0xec>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e7ee      	b.n	8007f26 <quorem+0xf6>

08007f48 <_dtoa_r>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	461f      	mov	r7, r3
 8007f50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f52:	b099      	sub	sp, #100	; 0x64
 8007f54:	4605      	mov	r5, r0
 8007f56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007f5e:	b974      	cbnz	r4, 8007f7e <_dtoa_r+0x36>
 8007f60:	2010      	movs	r0, #16
 8007f62:	f000 ff19 	bl	8008d98 <malloc>
 8007f66:	4602      	mov	r2, r0
 8007f68:	6268      	str	r0, [r5, #36]	; 0x24
 8007f6a:	b920      	cbnz	r0, 8007f76 <_dtoa_r+0x2e>
 8007f6c:	21ea      	movs	r1, #234	; 0xea
 8007f6e:	4ba8      	ldr	r3, [pc, #672]	; (8008210 <_dtoa_r+0x2c8>)
 8007f70:	48a8      	ldr	r0, [pc, #672]	; (8008214 <_dtoa_r+0x2cc>)
 8007f72:	f001 fdd7 	bl	8009b24 <__assert_func>
 8007f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f7a:	6004      	str	r4, [r0, #0]
 8007f7c:	60c4      	str	r4, [r0, #12]
 8007f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f80:	6819      	ldr	r1, [r3, #0]
 8007f82:	b151      	cbz	r1, 8007f9a <_dtoa_r+0x52>
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	2301      	movs	r3, #1
 8007f88:	4093      	lsls	r3, r2
 8007f8a:	604a      	str	r2, [r1, #4]
 8007f8c:	608b      	str	r3, [r1, #8]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 ff64 	bl	8008e5c <_Bfree>
 8007f94:	2200      	movs	r2, #0
 8007f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	1e3b      	subs	r3, r7, #0
 8007f9c:	bfaf      	iteee	ge
 8007f9e:	2300      	movge	r3, #0
 8007fa0:	2201      	movlt	r2, #1
 8007fa2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fa6:	9305      	strlt	r3, [sp, #20]
 8007fa8:	bfa8      	it	ge
 8007faa:	f8c8 3000 	strge.w	r3, [r8]
 8007fae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007fb2:	4b99      	ldr	r3, [pc, #612]	; (8008218 <_dtoa_r+0x2d0>)
 8007fb4:	bfb8      	it	lt
 8007fb6:	f8c8 2000 	strlt.w	r2, [r8]
 8007fba:	ea33 0309 	bics.w	r3, r3, r9
 8007fbe:	d119      	bne.n	8007ff4 <_dtoa_r+0xac>
 8007fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fcc:	4333      	orrs	r3, r6
 8007fce:	f000 857f 	beq.w	8008ad0 <_dtoa_r+0xb88>
 8007fd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fd4:	b953      	cbnz	r3, 8007fec <_dtoa_r+0xa4>
 8007fd6:	4b91      	ldr	r3, [pc, #580]	; (800821c <_dtoa_r+0x2d4>)
 8007fd8:	e022      	b.n	8008020 <_dtoa_r+0xd8>
 8007fda:	4b91      	ldr	r3, [pc, #580]	; (8008220 <_dtoa_r+0x2d8>)
 8007fdc:	9303      	str	r3, [sp, #12]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	9803      	ldr	r0, [sp, #12]
 8007fe6:	b019      	add	sp, #100	; 0x64
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	4b8b      	ldr	r3, [pc, #556]	; (800821c <_dtoa_r+0x2d4>)
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	3303      	adds	r3, #3
 8007ff2:	e7f5      	b.n	8007fe0 <_dtoa_r+0x98>
 8007ff4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ff8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007ffc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008000:	2200      	movs	r2, #0
 8008002:	2300      	movs	r3, #0
 8008004:	f7f8 fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008008:	4680      	mov	r8, r0
 800800a:	b158      	cbz	r0, 8008024 <_dtoa_r+0xdc>
 800800c:	2301      	movs	r3, #1
 800800e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8558 	beq.w	8008aca <_dtoa_r+0xb82>
 800801a:	4882      	ldr	r0, [pc, #520]	; (8008224 <_dtoa_r+0x2dc>)
 800801c:	6018      	str	r0, [r3, #0]
 800801e:	1e43      	subs	r3, r0, #1
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	e7df      	b.n	8007fe4 <_dtoa_r+0x9c>
 8008024:	ab16      	add	r3, sp, #88	; 0x58
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	ab17      	add	r3, sp, #92	; 0x5c
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4628      	mov	r0, r5
 800802e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008032:	f001 f9f9 	bl	8009428 <__d2b>
 8008036:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800803a:	4683      	mov	fp, r0
 800803c:	2c00      	cmp	r4, #0
 800803e:	d07f      	beq.n	8008140 <_dtoa_r+0x1f8>
 8008040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008046:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800804a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800804e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008052:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008056:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800805a:	2200      	movs	r2, #0
 800805c:	4b72      	ldr	r3, [pc, #456]	; (8008228 <_dtoa_r+0x2e0>)
 800805e:	f7f8 f883 	bl	8000168 <__aeabi_dsub>
 8008062:	a365      	add	r3, pc, #404	; (adr r3, 80081f8 <_dtoa_r+0x2b0>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 fa36 	bl	80004d8 <__aeabi_dmul>
 800806c:	a364      	add	r3, pc, #400	; (adr r3, 8008200 <_dtoa_r+0x2b8>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f87b 	bl	800016c <__adddf3>
 8008076:	4606      	mov	r6, r0
 8008078:	4620      	mov	r0, r4
 800807a:	460f      	mov	r7, r1
 800807c:	f7f8 f9c2 	bl	8000404 <__aeabi_i2d>
 8008080:	a361      	add	r3, pc, #388	; (adr r3, 8008208 <_dtoa_r+0x2c0>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 fa27 	bl	80004d8 <__aeabi_dmul>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 f86b 	bl	800016c <__adddf3>
 8008096:	4606      	mov	r6, r0
 8008098:	460f      	mov	r7, r1
 800809a:	f7f8 fccd 	bl	8000a38 <__aeabi_d2iz>
 800809e:	2200      	movs	r2, #0
 80080a0:	4682      	mov	sl, r0
 80080a2:	2300      	movs	r3, #0
 80080a4:	4630      	mov	r0, r6
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fc88 	bl	80009bc <__aeabi_dcmplt>
 80080ac:	b148      	cbz	r0, 80080c2 <_dtoa_r+0x17a>
 80080ae:	4650      	mov	r0, sl
 80080b0:	f7f8 f9a8 	bl	8000404 <__aeabi_i2d>
 80080b4:	4632      	mov	r2, r6
 80080b6:	463b      	mov	r3, r7
 80080b8:	f7f8 fc76 	bl	80009a8 <__aeabi_dcmpeq>
 80080bc:	b908      	cbnz	r0, 80080c2 <_dtoa_r+0x17a>
 80080be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080c2:	f1ba 0f16 	cmp.w	sl, #22
 80080c6:	d858      	bhi.n	800817a <_dtoa_r+0x232>
 80080c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080cc:	4b57      	ldr	r3, [pc, #348]	; (800822c <_dtoa_r+0x2e4>)
 80080ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 fc71 	bl	80009bc <__aeabi_dcmplt>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d04f      	beq.n	800817e <_dtoa_r+0x236>
 80080de:	2300      	movs	r3, #0
 80080e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080e8:	1b1c      	subs	r4, r3, r4
 80080ea:	1e63      	subs	r3, r4, #1
 80080ec:	9309      	str	r3, [sp, #36]	; 0x24
 80080ee:	bf49      	itett	mi
 80080f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80080f4:	2300      	movpl	r3, #0
 80080f6:	9306      	strmi	r3, [sp, #24]
 80080f8:	2300      	movmi	r3, #0
 80080fa:	bf54      	ite	pl
 80080fc:	9306      	strpl	r3, [sp, #24]
 80080fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	db3d      	blt.n	8008182 <_dtoa_r+0x23a>
 8008106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008108:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800810c:	4453      	add	r3, sl
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	2300      	movs	r3, #0
 8008112:	930a      	str	r3, [sp, #40]	; 0x28
 8008114:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008116:	2b09      	cmp	r3, #9
 8008118:	f200 808c 	bhi.w	8008234 <_dtoa_r+0x2ec>
 800811c:	2b05      	cmp	r3, #5
 800811e:	bfc4      	itt	gt
 8008120:	3b04      	subgt	r3, #4
 8008122:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008126:	bfc8      	it	gt
 8008128:	2400      	movgt	r4, #0
 800812a:	f1a3 0302 	sub.w	r3, r3, #2
 800812e:	bfd8      	it	le
 8008130:	2401      	movle	r4, #1
 8008132:	2b03      	cmp	r3, #3
 8008134:	f200 808a 	bhi.w	800824c <_dtoa_r+0x304>
 8008138:	e8df f003 	tbb	[pc, r3]
 800813c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008140:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008144:	441c      	add	r4, r3
 8008146:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800814a:	2b20      	cmp	r3, #32
 800814c:	bfc3      	ittte	gt
 800814e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008152:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008156:	fa09 f303 	lslgt.w	r3, r9, r3
 800815a:	f1c3 0320 	rsble	r3, r3, #32
 800815e:	bfc6      	itte	gt
 8008160:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008164:	4318      	orrgt	r0, r3
 8008166:	fa06 f003 	lslle.w	r0, r6, r3
 800816a:	f7f8 f93b 	bl	80003e4 <__aeabi_ui2d>
 800816e:	2301      	movs	r3, #1
 8008170:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008174:	3c01      	subs	r4, #1
 8008176:	9313      	str	r3, [sp, #76]	; 0x4c
 8008178:	e76f      	b.n	800805a <_dtoa_r+0x112>
 800817a:	2301      	movs	r3, #1
 800817c:	e7b2      	b.n	80080e4 <_dtoa_r+0x19c>
 800817e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008180:	e7b1      	b.n	80080e6 <_dtoa_r+0x19e>
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	eba3 030a 	sub.w	r3, r3, sl
 8008188:	9306      	str	r3, [sp, #24]
 800818a:	f1ca 0300 	rsb	r3, sl, #0
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	2300      	movs	r3, #0
 8008192:	930e      	str	r3, [sp, #56]	; 0x38
 8008194:	e7be      	b.n	8008114 <_dtoa_r+0x1cc>
 8008196:	2300      	movs	r3, #0
 8008198:	930b      	str	r3, [sp, #44]	; 0x2c
 800819a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800819c:	2b00      	cmp	r3, #0
 800819e:	dc58      	bgt.n	8008252 <_dtoa_r+0x30a>
 80081a0:	f04f 0901 	mov.w	r9, #1
 80081a4:	464b      	mov	r3, r9
 80081a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80081aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80081ae:	2200      	movs	r2, #0
 80081b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80081b2:	6042      	str	r2, [r0, #4]
 80081b4:	2204      	movs	r2, #4
 80081b6:	f102 0614 	add.w	r6, r2, #20
 80081ba:	429e      	cmp	r6, r3
 80081bc:	6841      	ldr	r1, [r0, #4]
 80081be:	d94e      	bls.n	800825e <_dtoa_r+0x316>
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 fe0b 	bl	8008ddc <_Balloc>
 80081c6:	9003      	str	r0, [sp, #12]
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d14c      	bne.n	8008266 <_dtoa_r+0x31e>
 80081cc:	4602      	mov	r2, r0
 80081ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081d2:	4b17      	ldr	r3, [pc, #92]	; (8008230 <_dtoa_r+0x2e8>)
 80081d4:	e6cc      	b.n	8007f70 <_dtoa_r+0x28>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e7de      	b.n	8008198 <_dtoa_r+0x250>
 80081da:	2300      	movs	r3, #0
 80081dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081e0:	eb0a 0903 	add.w	r9, sl, r3
 80081e4:	f109 0301 	add.w	r3, r9, #1
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	bfb8      	it	lt
 80081ee:	2301      	movlt	r3, #1
 80081f0:	e7dd      	b.n	80081ae <_dtoa_r+0x266>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7f2      	b.n	80081dc <_dtoa_r+0x294>
 80081f6:	bf00      	nop
 80081f8:	636f4361 	.word	0x636f4361
 80081fc:	3fd287a7 	.word	0x3fd287a7
 8008200:	8b60c8b3 	.word	0x8b60c8b3
 8008204:	3fc68a28 	.word	0x3fc68a28
 8008208:	509f79fb 	.word	0x509f79fb
 800820c:	3fd34413 	.word	0x3fd34413
 8008210:	08009f1d 	.word	0x08009f1d
 8008214:	08009f34 	.word	0x08009f34
 8008218:	7ff00000 	.word	0x7ff00000
 800821c:	08009f19 	.word	0x08009f19
 8008220:	08009f10 	.word	0x08009f10
 8008224:	08009eed 	.word	0x08009eed
 8008228:	3ff80000 	.word	0x3ff80000
 800822c:	0800a028 	.word	0x0800a028
 8008230:	08009f8f 	.word	0x08009f8f
 8008234:	2401      	movs	r4, #1
 8008236:	2300      	movs	r3, #0
 8008238:	940b      	str	r4, [sp, #44]	; 0x2c
 800823a:	9322      	str	r3, [sp, #136]	; 0x88
 800823c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008240:	2200      	movs	r2, #0
 8008242:	2312      	movs	r3, #18
 8008244:	f8cd 9020 	str.w	r9, [sp, #32]
 8008248:	9223      	str	r2, [sp, #140]	; 0x8c
 800824a:	e7b0      	b.n	80081ae <_dtoa_r+0x266>
 800824c:	2301      	movs	r3, #1
 800824e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008250:	e7f4      	b.n	800823c <_dtoa_r+0x2f4>
 8008252:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008256:	464b      	mov	r3, r9
 8008258:	f8cd 9020 	str.w	r9, [sp, #32]
 800825c:	e7a7      	b.n	80081ae <_dtoa_r+0x266>
 800825e:	3101      	adds	r1, #1
 8008260:	6041      	str	r1, [r0, #4]
 8008262:	0052      	lsls	r2, r2, #1
 8008264:	e7a7      	b.n	80081b6 <_dtoa_r+0x26e>
 8008266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008268:	9a03      	ldr	r2, [sp, #12]
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	2b0e      	cmp	r3, #14
 8008270:	f200 80a8 	bhi.w	80083c4 <_dtoa_r+0x47c>
 8008274:	2c00      	cmp	r4, #0
 8008276:	f000 80a5 	beq.w	80083c4 <_dtoa_r+0x47c>
 800827a:	f1ba 0f00 	cmp.w	sl, #0
 800827e:	dd34      	ble.n	80082ea <_dtoa_r+0x3a2>
 8008280:	4a9a      	ldr	r2, [pc, #616]	; (80084ec <_dtoa_r+0x5a4>)
 8008282:	f00a 030f 	and.w	r3, sl, #15
 8008286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800828a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800828e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008296:	ea4f 142a 	mov.w	r4, sl, asr #4
 800829a:	d016      	beq.n	80082ca <_dtoa_r+0x382>
 800829c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082a0:	4b93      	ldr	r3, [pc, #588]	; (80084f0 <_dtoa_r+0x5a8>)
 80082a2:	2703      	movs	r7, #3
 80082a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082a8:	f7f8 fa40 	bl	800072c <__aeabi_ddiv>
 80082ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b0:	f004 040f 	and.w	r4, r4, #15
 80082b4:	4e8e      	ldr	r6, [pc, #568]	; (80084f0 <_dtoa_r+0x5a8>)
 80082b6:	b954      	cbnz	r4, 80082ce <_dtoa_r+0x386>
 80082b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c0:	f7f8 fa34 	bl	800072c <__aeabi_ddiv>
 80082c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082c8:	e029      	b.n	800831e <_dtoa_r+0x3d6>
 80082ca:	2702      	movs	r7, #2
 80082cc:	e7f2      	b.n	80082b4 <_dtoa_r+0x36c>
 80082ce:	07e1      	lsls	r1, r4, #31
 80082d0:	d508      	bpl.n	80082e4 <_dtoa_r+0x39c>
 80082d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082da:	f7f8 f8fd 	bl	80004d8 <__aeabi_dmul>
 80082de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082e2:	3701      	adds	r7, #1
 80082e4:	1064      	asrs	r4, r4, #1
 80082e6:	3608      	adds	r6, #8
 80082e8:	e7e5      	b.n	80082b6 <_dtoa_r+0x36e>
 80082ea:	f000 80a5 	beq.w	8008438 <_dtoa_r+0x4f0>
 80082ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082f2:	f1ca 0400 	rsb	r4, sl, #0
 80082f6:	4b7d      	ldr	r3, [pc, #500]	; (80084ec <_dtoa_r+0x5a4>)
 80082f8:	f004 020f 	and.w	r2, r4, #15
 80082fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	2702      	movs	r7, #2
 800830a:	2300      	movs	r3, #0
 800830c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008310:	4e77      	ldr	r6, [pc, #476]	; (80084f0 <_dtoa_r+0x5a8>)
 8008312:	1124      	asrs	r4, r4, #4
 8008314:	2c00      	cmp	r4, #0
 8008316:	f040 8084 	bne.w	8008422 <_dtoa_r+0x4da>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1d2      	bne.n	80082c4 <_dtoa_r+0x37c>
 800831e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 808b 	beq.w	800843c <_dtoa_r+0x4f4>
 8008326:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800832a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800832e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008332:	2200      	movs	r2, #0
 8008334:	4b6f      	ldr	r3, [pc, #444]	; (80084f4 <_dtoa_r+0x5ac>)
 8008336:	f7f8 fb41 	bl	80009bc <__aeabi_dcmplt>
 800833a:	2800      	cmp	r0, #0
 800833c:	d07e      	beq.n	800843c <_dtoa_r+0x4f4>
 800833e:	9b08      	ldr	r3, [sp, #32]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d07b      	beq.n	800843c <_dtoa_r+0x4f4>
 8008344:	f1b9 0f00 	cmp.w	r9, #0
 8008348:	dd38      	ble.n	80083bc <_dtoa_r+0x474>
 800834a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800834e:	2200      	movs	r2, #0
 8008350:	4b69      	ldr	r3, [pc, #420]	; (80084f8 <_dtoa_r+0x5b0>)
 8008352:	f7f8 f8c1 	bl	80004d8 <__aeabi_dmul>
 8008356:	464c      	mov	r4, r9
 8008358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800835c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008360:	3701      	adds	r7, #1
 8008362:	4638      	mov	r0, r7
 8008364:	f7f8 f84e 	bl	8000404 <__aeabi_i2d>
 8008368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800836c:	f7f8 f8b4 	bl	80004d8 <__aeabi_dmul>
 8008370:	2200      	movs	r2, #0
 8008372:	4b62      	ldr	r3, [pc, #392]	; (80084fc <_dtoa_r+0x5b4>)
 8008374:	f7f7 fefa 	bl	800016c <__adddf3>
 8008378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800837c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008380:	9611      	str	r6, [sp, #68]	; 0x44
 8008382:	2c00      	cmp	r4, #0
 8008384:	d15d      	bne.n	8008442 <_dtoa_r+0x4fa>
 8008386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800838a:	2200      	movs	r2, #0
 800838c:	4b5c      	ldr	r3, [pc, #368]	; (8008500 <_dtoa_r+0x5b8>)
 800838e:	f7f7 feeb 	bl	8000168 <__aeabi_dsub>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800839a:	4633      	mov	r3, r6
 800839c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800839e:	f7f8 fb2b 	bl	80009f8 <__aeabi_dcmpgt>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f040 829c 	bne.w	80088e0 <_dtoa_r+0x998>
 80083a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083b2:	f7f8 fb03 	bl	80009bc <__aeabi_dcmplt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f040 8290 	bne.w	80088dc <_dtoa_r+0x994>
 80083bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80083c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f2c0 8152 	blt.w	8008670 <_dtoa_r+0x728>
 80083cc:	f1ba 0f0e 	cmp.w	sl, #14
 80083d0:	f300 814e 	bgt.w	8008670 <_dtoa_r+0x728>
 80083d4:	4b45      	ldr	r3, [pc, #276]	; (80084ec <_dtoa_r+0x5a4>)
 80083d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80083e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f280 80db 	bge.w	80085a0 <_dtoa_r+0x658>
 80083ea:	9b08      	ldr	r3, [sp, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f300 80d7 	bgt.w	80085a0 <_dtoa_r+0x658>
 80083f2:	f040 8272 	bne.w	80088da <_dtoa_r+0x992>
 80083f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083fa:	2200      	movs	r2, #0
 80083fc:	4b40      	ldr	r3, [pc, #256]	; (8008500 <_dtoa_r+0x5b8>)
 80083fe:	f7f8 f86b 	bl	80004d8 <__aeabi_dmul>
 8008402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008406:	f7f8 faed 	bl	80009e4 <__aeabi_dcmpge>
 800840a:	9c08      	ldr	r4, [sp, #32]
 800840c:	4626      	mov	r6, r4
 800840e:	2800      	cmp	r0, #0
 8008410:	f040 8248 	bne.w	80088a4 <_dtoa_r+0x95c>
 8008414:	2331      	movs	r3, #49	; 0x31
 8008416:	9f03      	ldr	r7, [sp, #12]
 8008418:	f10a 0a01 	add.w	sl, sl, #1
 800841c:	f807 3b01 	strb.w	r3, [r7], #1
 8008420:	e244      	b.n	80088ac <_dtoa_r+0x964>
 8008422:	07e2      	lsls	r2, r4, #31
 8008424:	d505      	bpl.n	8008432 <_dtoa_r+0x4ea>
 8008426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800842a:	f7f8 f855 	bl	80004d8 <__aeabi_dmul>
 800842e:	2301      	movs	r3, #1
 8008430:	3701      	adds	r7, #1
 8008432:	1064      	asrs	r4, r4, #1
 8008434:	3608      	adds	r6, #8
 8008436:	e76d      	b.n	8008314 <_dtoa_r+0x3cc>
 8008438:	2702      	movs	r7, #2
 800843a:	e770      	b.n	800831e <_dtoa_r+0x3d6>
 800843c:	46d0      	mov	r8, sl
 800843e:	9c08      	ldr	r4, [sp, #32]
 8008440:	e78f      	b.n	8008362 <_dtoa_r+0x41a>
 8008442:	9903      	ldr	r1, [sp, #12]
 8008444:	4b29      	ldr	r3, [pc, #164]	; (80084ec <_dtoa_r+0x5a4>)
 8008446:	4421      	add	r1, r4
 8008448:	9112      	str	r1, [sp, #72]	; 0x48
 800844a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800844c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008450:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008454:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008458:	2900      	cmp	r1, #0
 800845a:	d055      	beq.n	8008508 <_dtoa_r+0x5c0>
 800845c:	2000      	movs	r0, #0
 800845e:	4929      	ldr	r1, [pc, #164]	; (8008504 <_dtoa_r+0x5bc>)
 8008460:	f7f8 f964 	bl	800072c <__aeabi_ddiv>
 8008464:	463b      	mov	r3, r7
 8008466:	4632      	mov	r2, r6
 8008468:	f7f7 fe7e 	bl	8000168 <__aeabi_dsub>
 800846c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008470:	9f03      	ldr	r7, [sp, #12]
 8008472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008476:	f7f8 fadf 	bl	8000a38 <__aeabi_d2iz>
 800847a:	4604      	mov	r4, r0
 800847c:	f7f7 ffc2 	bl	8000404 <__aeabi_i2d>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008488:	f7f7 fe6e 	bl	8000168 <__aeabi_dsub>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	3430      	adds	r4, #48	; 0x30
 8008492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800849a:	f807 4b01 	strb.w	r4, [r7], #1
 800849e:	f7f8 fa8d 	bl	80009bc <__aeabi_dcmplt>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d174      	bne.n	8008590 <_dtoa_r+0x648>
 80084a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084aa:	2000      	movs	r0, #0
 80084ac:	4911      	ldr	r1, [pc, #68]	; (80084f4 <_dtoa_r+0x5ac>)
 80084ae:	f7f7 fe5b 	bl	8000168 <__aeabi_dsub>
 80084b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084b6:	f7f8 fa81 	bl	80009bc <__aeabi_dcmplt>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f040 80b7 	bne.w	800862e <_dtoa_r+0x6e6>
 80084c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084c2:	429f      	cmp	r7, r3
 80084c4:	f43f af7a 	beq.w	80083bc <_dtoa_r+0x474>
 80084c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084cc:	2200      	movs	r2, #0
 80084ce:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <_dtoa_r+0x5b0>)
 80084d0:	f7f8 f802 	bl	80004d8 <__aeabi_dmul>
 80084d4:	2200      	movs	r2, #0
 80084d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <_dtoa_r+0x5b0>)
 80084e0:	f7f7 fffa 	bl	80004d8 <__aeabi_dmul>
 80084e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084e8:	e7c3      	b.n	8008472 <_dtoa_r+0x52a>
 80084ea:	bf00      	nop
 80084ec:	0800a028 	.word	0x0800a028
 80084f0:	0800a000 	.word	0x0800a000
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	40240000 	.word	0x40240000
 80084fc:	401c0000 	.word	0x401c0000
 8008500:	40140000 	.word	0x40140000
 8008504:	3fe00000 	.word	0x3fe00000
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f7 ffe4 	bl	80004d8 <__aeabi_dmul>
 8008510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008512:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008516:	9c03      	ldr	r4, [sp, #12]
 8008518:	9314      	str	r3, [sp, #80]	; 0x50
 800851a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800851e:	f7f8 fa8b 	bl	8000a38 <__aeabi_d2iz>
 8008522:	9015      	str	r0, [sp, #84]	; 0x54
 8008524:	f7f7 ff6e 	bl	8000404 <__aeabi_i2d>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008530:	f7f7 fe1a 	bl	8000168 <__aeabi_dsub>
 8008534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008536:	4606      	mov	r6, r0
 8008538:	3330      	adds	r3, #48	; 0x30
 800853a:	f804 3b01 	strb.w	r3, [r4], #1
 800853e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008540:	460f      	mov	r7, r1
 8008542:	429c      	cmp	r4, r3
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	d124      	bne.n	8008594 <_dtoa_r+0x64c>
 800854a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800854e:	4bb0      	ldr	r3, [pc, #704]	; (8008810 <_dtoa_r+0x8c8>)
 8008550:	f7f7 fe0c 	bl	800016c <__adddf3>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8008560:	2800      	cmp	r0, #0
 8008562:	d163      	bne.n	800862c <_dtoa_r+0x6e4>
 8008564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008568:	2000      	movs	r0, #0
 800856a:	49a9      	ldr	r1, [pc, #676]	; (8008810 <_dtoa_r+0x8c8>)
 800856c:	f7f7 fdfc 	bl	8000168 <__aeabi_dsub>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f7f8 fa20 	bl	80009bc <__aeabi_dcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	f43f af1d 	beq.w	80083bc <_dtoa_r+0x474>
 8008582:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008584:	1e7b      	subs	r3, r7, #1
 8008586:	9314      	str	r3, [sp, #80]	; 0x50
 8008588:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800858c:	2b30      	cmp	r3, #48	; 0x30
 800858e:	d0f8      	beq.n	8008582 <_dtoa_r+0x63a>
 8008590:	46c2      	mov	sl, r8
 8008592:	e03b      	b.n	800860c <_dtoa_r+0x6c4>
 8008594:	4b9f      	ldr	r3, [pc, #636]	; (8008814 <_dtoa_r+0x8cc>)
 8008596:	f7f7 ff9f 	bl	80004d8 <__aeabi_dmul>
 800859a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800859e:	e7bc      	b.n	800851a <_dtoa_r+0x5d2>
 80085a0:	9f03      	ldr	r7, [sp, #12]
 80085a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80085a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f8 f8bd 	bl	800072c <__aeabi_ddiv>
 80085b2:	f7f8 fa41 	bl	8000a38 <__aeabi_d2iz>
 80085b6:	4604      	mov	r4, r0
 80085b8:	f7f7 ff24 	bl	8000404 <__aeabi_i2d>
 80085bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085c0:	f7f7 ff8a 	bl	80004d8 <__aeabi_dmul>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4640      	mov	r0, r8
 80085ca:	4649      	mov	r1, r9
 80085cc:	f7f7 fdcc 	bl	8000168 <__aeabi_dsub>
 80085d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80085d4:	f807 6b01 	strb.w	r6, [r7], #1
 80085d8:	9e03      	ldr	r6, [sp, #12]
 80085da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80085de:	1bbe      	subs	r6, r7, r6
 80085e0:	45b4      	cmp	ip, r6
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	d136      	bne.n	8008656 <_dtoa_r+0x70e>
 80085e8:	f7f7 fdc0 	bl	800016c <__adddf3>
 80085ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085f0:	4680      	mov	r8, r0
 80085f2:	4689      	mov	r9, r1
 80085f4:	f7f8 fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80085f8:	bb58      	cbnz	r0, 8008652 <_dtoa_r+0x70a>
 80085fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	f7f8 f9d1 	bl	80009a8 <__aeabi_dcmpeq>
 8008606:	b108      	cbz	r0, 800860c <_dtoa_r+0x6c4>
 8008608:	07e1      	lsls	r1, r4, #31
 800860a:	d422      	bmi.n	8008652 <_dtoa_r+0x70a>
 800860c:	4628      	mov	r0, r5
 800860e:	4659      	mov	r1, fp
 8008610:	f000 fc24 	bl	8008e5c <_Bfree>
 8008614:	2300      	movs	r3, #0
 8008616:	703b      	strb	r3, [r7, #0]
 8008618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800861a:	f10a 0001 	add.w	r0, sl, #1
 800861e:	6018      	str	r0, [r3, #0]
 8008620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008622:	2b00      	cmp	r3, #0
 8008624:	f43f acde 	beq.w	8007fe4 <_dtoa_r+0x9c>
 8008628:	601f      	str	r7, [r3, #0]
 800862a:	e4db      	b.n	8007fe4 <_dtoa_r+0x9c>
 800862c:	4627      	mov	r7, r4
 800862e:	463b      	mov	r3, r7
 8008630:	461f      	mov	r7, r3
 8008632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008636:	2a39      	cmp	r2, #57	; 0x39
 8008638:	d107      	bne.n	800864a <_dtoa_r+0x702>
 800863a:	9a03      	ldr	r2, [sp, #12]
 800863c:	429a      	cmp	r2, r3
 800863e:	d1f7      	bne.n	8008630 <_dtoa_r+0x6e8>
 8008640:	2230      	movs	r2, #48	; 0x30
 8008642:	9903      	ldr	r1, [sp, #12]
 8008644:	f108 0801 	add.w	r8, r8, #1
 8008648:	700a      	strb	r2, [r1, #0]
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	3201      	adds	r2, #1
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	e79e      	b.n	8008590 <_dtoa_r+0x648>
 8008652:	46d0      	mov	r8, sl
 8008654:	e7eb      	b.n	800862e <_dtoa_r+0x6e6>
 8008656:	2200      	movs	r2, #0
 8008658:	4b6e      	ldr	r3, [pc, #440]	; (8008814 <_dtoa_r+0x8cc>)
 800865a:	f7f7 ff3d 	bl	80004d8 <__aeabi_dmul>
 800865e:	2200      	movs	r2, #0
 8008660:	2300      	movs	r3, #0
 8008662:	4680      	mov	r8, r0
 8008664:	4689      	mov	r9, r1
 8008666:	f7f8 f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800866a:	2800      	cmp	r0, #0
 800866c:	d09b      	beq.n	80085a6 <_dtoa_r+0x65e>
 800866e:	e7cd      	b.n	800860c <_dtoa_r+0x6c4>
 8008670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008672:	2a00      	cmp	r2, #0
 8008674:	f000 80d0 	beq.w	8008818 <_dtoa_r+0x8d0>
 8008678:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800867a:	2a01      	cmp	r2, #1
 800867c:	f300 80ae 	bgt.w	80087dc <_dtoa_r+0x894>
 8008680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008682:	2a00      	cmp	r2, #0
 8008684:	f000 80a6 	beq.w	80087d4 <_dtoa_r+0x88c>
 8008688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800868c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800868e:	9f06      	ldr	r7, [sp, #24]
 8008690:	9a06      	ldr	r2, [sp, #24]
 8008692:	2101      	movs	r1, #1
 8008694:	441a      	add	r2, r3
 8008696:	9206      	str	r2, [sp, #24]
 8008698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800869a:	4628      	mov	r0, r5
 800869c:	441a      	add	r2, r3
 800869e:	9209      	str	r2, [sp, #36]	; 0x24
 80086a0:	f000 fc92 	bl	8008fc8 <__i2b>
 80086a4:	4606      	mov	r6, r0
 80086a6:	2f00      	cmp	r7, #0
 80086a8:	dd0c      	ble.n	80086c4 <_dtoa_r+0x77c>
 80086aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dd09      	ble.n	80086c4 <_dtoa_r+0x77c>
 80086b0:	42bb      	cmp	r3, r7
 80086b2:	bfa8      	it	ge
 80086b4:	463b      	movge	r3, r7
 80086b6:	9a06      	ldr	r2, [sp, #24]
 80086b8:	1aff      	subs	r7, r7, r3
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	9206      	str	r2, [sp, #24]
 80086be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c6:	b1f3      	cbz	r3, 8008706 <_dtoa_r+0x7be>
 80086c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80a8 	beq.w	8008820 <_dtoa_r+0x8d8>
 80086d0:	2c00      	cmp	r4, #0
 80086d2:	dd10      	ble.n	80086f6 <_dtoa_r+0x7ae>
 80086d4:	4631      	mov	r1, r6
 80086d6:	4622      	mov	r2, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f000 fd33 	bl	8009144 <__pow5mult>
 80086de:	465a      	mov	r2, fp
 80086e0:	4601      	mov	r1, r0
 80086e2:	4606      	mov	r6, r0
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 fc85 	bl	8008ff4 <__multiply>
 80086ea:	4680      	mov	r8, r0
 80086ec:	4659      	mov	r1, fp
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 fbb4 	bl	8008e5c <_Bfree>
 80086f4:	46c3      	mov	fp, r8
 80086f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f8:	1b1a      	subs	r2, r3, r4
 80086fa:	d004      	beq.n	8008706 <_dtoa_r+0x7be>
 80086fc:	4659      	mov	r1, fp
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 fd20 	bl	8009144 <__pow5mult>
 8008704:	4683      	mov	fp, r0
 8008706:	2101      	movs	r1, #1
 8008708:	4628      	mov	r0, r5
 800870a:	f000 fc5d 	bl	8008fc8 <__i2b>
 800870e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008710:	4604      	mov	r4, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	f340 8086 	ble.w	8008824 <_dtoa_r+0x8dc>
 8008718:	461a      	mov	r2, r3
 800871a:	4601      	mov	r1, r0
 800871c:	4628      	mov	r0, r5
 800871e:	f000 fd11 	bl	8009144 <__pow5mult>
 8008722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008724:	4604      	mov	r4, r0
 8008726:	2b01      	cmp	r3, #1
 8008728:	dd7f      	ble.n	800882a <_dtoa_r+0x8e2>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008734:	6918      	ldr	r0, [r3, #16]
 8008736:	f000 fbf9 	bl	8008f2c <__hi0bits>
 800873a:	f1c0 0020 	rsb	r0, r0, #32
 800873e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008740:	4418      	add	r0, r3
 8008742:	f010 001f 	ands.w	r0, r0, #31
 8008746:	f000 8092 	beq.w	800886e <_dtoa_r+0x926>
 800874a:	f1c0 0320 	rsb	r3, r0, #32
 800874e:	2b04      	cmp	r3, #4
 8008750:	f340 808a 	ble.w	8008868 <_dtoa_r+0x920>
 8008754:	f1c0 001c 	rsb	r0, r0, #28
 8008758:	9b06      	ldr	r3, [sp, #24]
 800875a:	4407      	add	r7, r0
 800875c:	4403      	add	r3, r0
 800875e:	9306      	str	r3, [sp, #24]
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	4403      	add	r3, r0
 8008764:	9309      	str	r3, [sp, #36]	; 0x24
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	dd05      	ble.n	8008778 <_dtoa_r+0x830>
 800876c:	4659      	mov	r1, fp
 800876e:	461a      	mov	r2, r3
 8008770:	4628      	mov	r0, r5
 8008772:	f000 fd41 	bl	80091f8 <__lshift>
 8008776:	4683      	mov	fp, r0
 8008778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd05      	ble.n	800878a <_dtoa_r+0x842>
 800877e:	4621      	mov	r1, r4
 8008780:	461a      	mov	r2, r3
 8008782:	4628      	mov	r0, r5
 8008784:	f000 fd38 	bl	80091f8 <__lshift>
 8008788:	4604      	mov	r4, r0
 800878a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d070      	beq.n	8008872 <_dtoa_r+0x92a>
 8008790:	4621      	mov	r1, r4
 8008792:	4658      	mov	r0, fp
 8008794:	f000 fda0 	bl	80092d8 <__mcmp>
 8008798:	2800      	cmp	r0, #0
 800879a:	da6a      	bge.n	8008872 <_dtoa_r+0x92a>
 800879c:	2300      	movs	r3, #0
 800879e:	4659      	mov	r1, fp
 80087a0:	220a      	movs	r2, #10
 80087a2:	4628      	mov	r0, r5
 80087a4:	f000 fb7c 	bl	8008ea0 <__multadd>
 80087a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087aa:	4683      	mov	fp, r0
 80087ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8194 	beq.w	8008ade <_dtoa_r+0xb96>
 80087b6:	4631      	mov	r1, r6
 80087b8:	2300      	movs	r3, #0
 80087ba:	220a      	movs	r2, #10
 80087bc:	4628      	mov	r0, r5
 80087be:	f000 fb6f 	bl	8008ea0 <__multadd>
 80087c2:	f1b9 0f00 	cmp.w	r9, #0
 80087c6:	4606      	mov	r6, r0
 80087c8:	f300 8093 	bgt.w	80088f2 <_dtoa_r+0x9aa>
 80087cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	dc57      	bgt.n	8008882 <_dtoa_r+0x93a>
 80087d2:	e08e      	b.n	80088f2 <_dtoa_r+0x9aa>
 80087d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087da:	e757      	b.n	800868c <_dtoa_r+0x744>
 80087dc:	9b08      	ldr	r3, [sp, #32]
 80087de:	1e5c      	subs	r4, r3, #1
 80087e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	bfb7      	itett	lt
 80087e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087e8:	1b1c      	subge	r4, r3, r4
 80087ea:	1ae2      	sublt	r2, r4, r3
 80087ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80087ee:	bfbe      	ittt	lt
 80087f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80087f2:	189b      	addlt	r3, r3, r2
 80087f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80087f6:	9b08      	ldr	r3, [sp, #32]
 80087f8:	bfb8      	it	lt
 80087fa:	2400      	movlt	r4, #0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfbb      	ittet	lt
 8008800:	9b06      	ldrlt	r3, [sp, #24]
 8008802:	9a08      	ldrlt	r2, [sp, #32]
 8008804:	9f06      	ldrge	r7, [sp, #24]
 8008806:	1a9f      	sublt	r7, r3, r2
 8008808:	bfac      	ite	ge
 800880a:	9b08      	ldrge	r3, [sp, #32]
 800880c:	2300      	movlt	r3, #0
 800880e:	e73f      	b.n	8008690 <_dtoa_r+0x748>
 8008810:	3fe00000 	.word	0x3fe00000
 8008814:	40240000 	.word	0x40240000
 8008818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800881a:	9f06      	ldr	r7, [sp, #24]
 800881c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800881e:	e742      	b.n	80086a6 <_dtoa_r+0x75e>
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	e76b      	b.n	80086fc <_dtoa_r+0x7b4>
 8008824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008826:	2b01      	cmp	r3, #1
 8008828:	dc19      	bgt.n	800885e <_dtoa_r+0x916>
 800882a:	9b04      	ldr	r3, [sp, #16]
 800882c:	b9bb      	cbnz	r3, 800885e <_dtoa_r+0x916>
 800882e:	9b05      	ldr	r3, [sp, #20]
 8008830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008834:	b99b      	cbnz	r3, 800885e <_dtoa_r+0x916>
 8008836:	9b05      	ldr	r3, [sp, #20]
 8008838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800883c:	0d1b      	lsrs	r3, r3, #20
 800883e:	051b      	lsls	r3, r3, #20
 8008840:	b183      	cbz	r3, 8008864 <_dtoa_r+0x91c>
 8008842:	f04f 0801 	mov.w	r8, #1
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	3301      	adds	r3, #1
 800884a:	9306      	str	r3, [sp, #24]
 800884c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884e:	3301      	adds	r3, #1
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	f47f af6a 	bne.w	800872e <_dtoa_r+0x7e6>
 800885a:	2001      	movs	r0, #1
 800885c:	e76f      	b.n	800873e <_dtoa_r+0x7f6>
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	e7f6      	b.n	8008852 <_dtoa_r+0x90a>
 8008864:	4698      	mov	r8, r3
 8008866:	e7f4      	b.n	8008852 <_dtoa_r+0x90a>
 8008868:	f43f af7d 	beq.w	8008766 <_dtoa_r+0x81e>
 800886c:	4618      	mov	r0, r3
 800886e:	301c      	adds	r0, #28
 8008870:	e772      	b.n	8008758 <_dtoa_r+0x810>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dc36      	bgt.n	80088e6 <_dtoa_r+0x99e>
 8008878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800887a:	2b02      	cmp	r3, #2
 800887c:	dd33      	ble.n	80088e6 <_dtoa_r+0x99e>
 800887e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	d10d      	bne.n	80088a4 <_dtoa_r+0x95c>
 8008888:	4621      	mov	r1, r4
 800888a:	464b      	mov	r3, r9
 800888c:	2205      	movs	r2, #5
 800888e:	4628      	mov	r0, r5
 8008890:	f000 fb06 	bl	8008ea0 <__multadd>
 8008894:	4601      	mov	r1, r0
 8008896:	4604      	mov	r4, r0
 8008898:	4658      	mov	r0, fp
 800889a:	f000 fd1d 	bl	80092d8 <__mcmp>
 800889e:	2800      	cmp	r0, #0
 80088a0:	f73f adb8 	bgt.w	8008414 <_dtoa_r+0x4cc>
 80088a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088a6:	9f03      	ldr	r7, [sp, #12]
 80088a8:	ea6f 0a03 	mvn.w	sl, r3
 80088ac:	f04f 0800 	mov.w	r8, #0
 80088b0:	4621      	mov	r1, r4
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 fad2 	bl	8008e5c <_Bfree>
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	f43f aea7 	beq.w	800860c <_dtoa_r+0x6c4>
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	d005      	beq.n	80088d0 <_dtoa_r+0x988>
 80088c4:	45b0      	cmp	r8, r6
 80088c6:	d003      	beq.n	80088d0 <_dtoa_r+0x988>
 80088c8:	4641      	mov	r1, r8
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 fac6 	bl	8008e5c <_Bfree>
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 fac2 	bl	8008e5c <_Bfree>
 80088d8:	e698      	b.n	800860c <_dtoa_r+0x6c4>
 80088da:	2400      	movs	r4, #0
 80088dc:	4626      	mov	r6, r4
 80088de:	e7e1      	b.n	80088a4 <_dtoa_r+0x95c>
 80088e0:	46c2      	mov	sl, r8
 80088e2:	4626      	mov	r6, r4
 80088e4:	e596      	b.n	8008414 <_dtoa_r+0x4cc>
 80088e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80fd 	beq.w	8008aec <_dtoa_r+0xba4>
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	dd05      	ble.n	8008902 <_dtoa_r+0x9ba>
 80088f6:	4631      	mov	r1, r6
 80088f8:	463a      	mov	r2, r7
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 fc7c 	bl	80091f8 <__lshift>
 8008900:	4606      	mov	r6, r0
 8008902:	f1b8 0f00 	cmp.w	r8, #0
 8008906:	d05c      	beq.n	80089c2 <_dtoa_r+0xa7a>
 8008908:	4628      	mov	r0, r5
 800890a:	6871      	ldr	r1, [r6, #4]
 800890c:	f000 fa66 	bl	8008ddc <_Balloc>
 8008910:	4607      	mov	r7, r0
 8008912:	b928      	cbnz	r0, 8008920 <_dtoa_r+0x9d8>
 8008914:	4602      	mov	r2, r0
 8008916:	f240 21ea 	movw	r1, #746	; 0x2ea
 800891a:	4b7f      	ldr	r3, [pc, #508]	; (8008b18 <_dtoa_r+0xbd0>)
 800891c:	f7ff bb28 	b.w	8007f70 <_dtoa_r+0x28>
 8008920:	6932      	ldr	r2, [r6, #16]
 8008922:	f106 010c 	add.w	r1, r6, #12
 8008926:	3202      	adds	r2, #2
 8008928:	0092      	lsls	r2, r2, #2
 800892a:	300c      	adds	r0, #12
 800892c:	f7fe fb13 	bl	8006f56 <memcpy>
 8008930:	2201      	movs	r2, #1
 8008932:	4639      	mov	r1, r7
 8008934:	4628      	mov	r0, r5
 8008936:	f000 fc5f 	bl	80091f8 <__lshift>
 800893a:	46b0      	mov	r8, r6
 800893c:	4606      	mov	r6, r0
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	444b      	add	r3, r9
 8008948:	930a      	str	r3, [sp, #40]	; 0x28
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	4621      	mov	r1, r4
 8008956:	3b01      	subs	r3, #1
 8008958:	4658      	mov	r0, fp
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	f7ff fa68 	bl	8007e30 <quorem>
 8008960:	4603      	mov	r3, r0
 8008962:	4641      	mov	r1, r8
 8008964:	3330      	adds	r3, #48	; 0x30
 8008966:	9006      	str	r0, [sp, #24]
 8008968:	4658      	mov	r0, fp
 800896a:	930b      	str	r3, [sp, #44]	; 0x2c
 800896c:	f000 fcb4 	bl	80092d8 <__mcmp>
 8008970:	4632      	mov	r2, r6
 8008972:	4681      	mov	r9, r0
 8008974:	4621      	mov	r1, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 fcca 	bl	8009310 <__mdiff>
 800897c:	68c2      	ldr	r2, [r0, #12]
 800897e:	4607      	mov	r7, r0
 8008980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008982:	bb02      	cbnz	r2, 80089c6 <_dtoa_r+0xa7e>
 8008984:	4601      	mov	r1, r0
 8008986:	4658      	mov	r0, fp
 8008988:	f000 fca6 	bl	80092d8 <__mcmp>
 800898c:	4602      	mov	r2, r0
 800898e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008990:	4639      	mov	r1, r7
 8008992:	4628      	mov	r0, r5
 8008994:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008998:	f000 fa60 	bl	8008e5c <_Bfree>
 800899c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a0:	9f08      	ldr	r7, [sp, #32]
 80089a2:	ea43 0102 	orr.w	r1, r3, r2
 80089a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a8:	430b      	orrs	r3, r1
 80089aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ac:	d10d      	bne.n	80089ca <_dtoa_r+0xa82>
 80089ae:	2b39      	cmp	r3, #57	; 0x39
 80089b0:	d029      	beq.n	8008a06 <_dtoa_r+0xabe>
 80089b2:	f1b9 0f00 	cmp.w	r9, #0
 80089b6:	dd01      	ble.n	80089bc <_dtoa_r+0xa74>
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	3331      	adds	r3, #49	; 0x31
 80089bc:	9a04      	ldr	r2, [sp, #16]
 80089be:	7013      	strb	r3, [r2, #0]
 80089c0:	e776      	b.n	80088b0 <_dtoa_r+0x968>
 80089c2:	4630      	mov	r0, r6
 80089c4:	e7b9      	b.n	800893a <_dtoa_r+0x9f2>
 80089c6:	2201      	movs	r2, #1
 80089c8:	e7e2      	b.n	8008990 <_dtoa_r+0xa48>
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	db06      	blt.n	80089de <_dtoa_r+0xa96>
 80089d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80089d2:	ea41 0909 	orr.w	r9, r1, r9
 80089d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d8:	ea59 0101 	orrs.w	r1, r9, r1
 80089dc:	d120      	bne.n	8008a20 <_dtoa_r+0xad8>
 80089de:	2a00      	cmp	r2, #0
 80089e0:	ddec      	ble.n	80089bc <_dtoa_r+0xa74>
 80089e2:	4659      	mov	r1, fp
 80089e4:	2201      	movs	r2, #1
 80089e6:	4628      	mov	r0, r5
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	f000 fc05 	bl	80091f8 <__lshift>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4683      	mov	fp, r0
 80089f2:	f000 fc71 	bl	80092d8 <__mcmp>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	dc02      	bgt.n	8008a02 <_dtoa_r+0xaba>
 80089fc:	d1de      	bne.n	80089bc <_dtoa_r+0xa74>
 80089fe:	07da      	lsls	r2, r3, #31
 8008a00:	d5dc      	bpl.n	80089bc <_dtoa_r+0xa74>
 8008a02:	2b39      	cmp	r3, #57	; 0x39
 8008a04:	d1d8      	bne.n	80089b8 <_dtoa_r+0xa70>
 8008a06:	2339      	movs	r3, #57	; 0x39
 8008a08:	9a04      	ldr	r2, [sp, #16]
 8008a0a:	7013      	strb	r3, [r2, #0]
 8008a0c:	463b      	mov	r3, r7
 8008a0e:	461f      	mov	r7, r3
 8008a10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	2a39      	cmp	r2, #57	; 0x39
 8008a18:	d050      	beq.n	8008abc <_dtoa_r+0xb74>
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	e747      	b.n	80088b0 <_dtoa_r+0x968>
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	dd03      	ble.n	8008a2c <_dtoa_r+0xae4>
 8008a24:	2b39      	cmp	r3, #57	; 0x39
 8008a26:	d0ee      	beq.n	8008a06 <_dtoa_r+0xabe>
 8008a28:	3301      	adds	r3, #1
 8008a2a:	e7c7      	b.n	80089bc <_dtoa_r+0xa74>
 8008a2c:	9a08      	ldr	r2, [sp, #32]
 8008a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a34:	428a      	cmp	r2, r1
 8008a36:	d02a      	beq.n	8008a8e <_dtoa_r+0xb46>
 8008a38:	4659      	mov	r1, fp
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 fa2e 	bl	8008ea0 <__multadd>
 8008a44:	45b0      	cmp	r8, r6
 8008a46:	4683      	mov	fp, r0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	f04f 020a 	mov.w	r2, #10
 8008a50:	4641      	mov	r1, r8
 8008a52:	4628      	mov	r0, r5
 8008a54:	d107      	bne.n	8008a66 <_dtoa_r+0xb1e>
 8008a56:	f000 fa23 	bl	8008ea0 <__multadd>
 8008a5a:	4680      	mov	r8, r0
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	9b08      	ldr	r3, [sp, #32]
 8008a60:	3301      	adds	r3, #1
 8008a62:	9308      	str	r3, [sp, #32]
 8008a64:	e775      	b.n	8008952 <_dtoa_r+0xa0a>
 8008a66:	f000 fa1b 	bl	8008ea0 <__multadd>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	220a      	movs	r2, #10
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 fa14 	bl	8008ea0 <__multadd>
 8008a78:	4606      	mov	r6, r0
 8008a7a:	e7f0      	b.n	8008a5e <_dtoa_r+0xb16>
 8008a7c:	f1b9 0f00 	cmp.w	r9, #0
 8008a80:	bfcc      	ite	gt
 8008a82:	464f      	movgt	r7, r9
 8008a84:	2701      	movle	r7, #1
 8008a86:	f04f 0800 	mov.w	r8, #0
 8008a8a:	9a03      	ldr	r2, [sp, #12]
 8008a8c:	4417      	add	r7, r2
 8008a8e:	4659      	mov	r1, fp
 8008a90:	2201      	movs	r2, #1
 8008a92:	4628      	mov	r0, r5
 8008a94:	9308      	str	r3, [sp, #32]
 8008a96:	f000 fbaf 	bl	80091f8 <__lshift>
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4683      	mov	fp, r0
 8008a9e:	f000 fc1b 	bl	80092d8 <__mcmp>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	dcb2      	bgt.n	8008a0c <_dtoa_r+0xac4>
 8008aa6:	d102      	bne.n	8008aae <_dtoa_r+0xb66>
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	07db      	lsls	r3, r3, #31
 8008aac:	d4ae      	bmi.n	8008a0c <_dtoa_r+0xac4>
 8008aae:	463b      	mov	r3, r7
 8008ab0:	461f      	mov	r7, r3
 8008ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ab6:	2a30      	cmp	r2, #48	; 0x30
 8008ab8:	d0fa      	beq.n	8008ab0 <_dtoa_r+0xb68>
 8008aba:	e6f9      	b.n	80088b0 <_dtoa_r+0x968>
 8008abc:	9a03      	ldr	r2, [sp, #12]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d1a5      	bne.n	8008a0e <_dtoa_r+0xac6>
 8008ac2:	2331      	movs	r3, #49	; 0x31
 8008ac4:	f10a 0a01 	add.w	sl, sl, #1
 8008ac8:	e779      	b.n	80089be <_dtoa_r+0xa76>
 8008aca:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <_dtoa_r+0xbd4>)
 8008acc:	f7ff baa8 	b.w	8008020 <_dtoa_r+0xd8>
 8008ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f47f aa81 	bne.w	8007fda <_dtoa_r+0x92>
 8008ad8:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <_dtoa_r+0xbd8>)
 8008ada:	f7ff baa1 	b.w	8008020 <_dtoa_r+0xd8>
 8008ade:	f1b9 0f00 	cmp.w	r9, #0
 8008ae2:	dc03      	bgt.n	8008aec <_dtoa_r+0xba4>
 8008ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	f73f aecb 	bgt.w	8008882 <_dtoa_r+0x93a>
 8008aec:	9f03      	ldr	r7, [sp, #12]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4658      	mov	r0, fp
 8008af2:	f7ff f99d 	bl	8007e30 <quorem>
 8008af6:	9a03      	ldr	r2, [sp, #12]
 8008af8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008afc:	f807 3b01 	strb.w	r3, [r7], #1
 8008b00:	1aba      	subs	r2, r7, r2
 8008b02:	4591      	cmp	r9, r2
 8008b04:	ddba      	ble.n	8008a7c <_dtoa_r+0xb34>
 8008b06:	4659      	mov	r1, fp
 8008b08:	2300      	movs	r3, #0
 8008b0a:	220a      	movs	r2, #10
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 f9c7 	bl	8008ea0 <__multadd>
 8008b12:	4683      	mov	fp, r0
 8008b14:	e7eb      	b.n	8008aee <_dtoa_r+0xba6>
 8008b16:	bf00      	nop
 8008b18:	08009f8f 	.word	0x08009f8f
 8008b1c:	08009eec 	.word	0x08009eec
 8008b20:	08009f10 	.word	0x08009f10

08008b24 <__sflush_r>:
 8008b24:	898a      	ldrh	r2, [r1, #12]
 8008b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b28:	4605      	mov	r5, r0
 8008b2a:	0710      	lsls	r0, r2, #28
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	d457      	bmi.n	8008be0 <__sflush_r+0xbc>
 8008b30:	684b      	ldr	r3, [r1, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dc04      	bgt.n	8008b40 <__sflush_r+0x1c>
 8008b36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dc01      	bgt.n	8008b40 <__sflush_r+0x1c>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d0fa      	beq.n	8008b3c <__sflush_r+0x18>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b4c:	682f      	ldr	r7, [r5, #0]
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	d032      	beq.n	8008bb8 <__sflush_r+0x94>
 8008b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	075a      	lsls	r2, r3, #29
 8008b58:	d505      	bpl.n	8008b66 <__sflush_r+0x42>
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	1ac0      	subs	r0, r0, r3
 8008b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b60:	b10b      	cbz	r3, 8008b66 <__sflush_r+0x42>
 8008b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b64:	1ac0      	subs	r0, r0, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	6a21      	ldr	r1, [r4, #32]
 8008b70:	47b0      	blx	r6
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	d106      	bne.n	8008b86 <__sflush_r+0x62>
 8008b78:	6829      	ldr	r1, [r5, #0]
 8008b7a:	291d      	cmp	r1, #29
 8008b7c:	d82c      	bhi.n	8008bd8 <__sflush_r+0xb4>
 8008b7e:	4a29      	ldr	r2, [pc, #164]	; (8008c24 <__sflush_r+0x100>)
 8008b80:	40ca      	lsrs	r2, r1
 8008b82:	07d6      	lsls	r6, r2, #31
 8008b84:	d528      	bpl.n	8008bd8 <__sflush_r+0xb4>
 8008b86:	2200      	movs	r2, #0
 8008b88:	6062      	str	r2, [r4, #4]
 8008b8a:	6922      	ldr	r2, [r4, #16]
 8008b8c:	04d9      	lsls	r1, r3, #19
 8008b8e:	6022      	str	r2, [r4, #0]
 8008b90:	d504      	bpl.n	8008b9c <__sflush_r+0x78>
 8008b92:	1c42      	adds	r2, r0, #1
 8008b94:	d101      	bne.n	8008b9a <__sflush_r+0x76>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b903      	cbnz	r3, 8008b9c <__sflush_r+0x78>
 8008b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9e:	602f      	str	r7, [r5, #0]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	d0cb      	beq.n	8008b3c <__sflush_r+0x18>
 8008ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	d002      	beq.n	8008bb2 <__sflush_r+0x8e>
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 fcab 	bl	8009508 <_free_r>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bb6:	e7c2      	b.n	8008b3e <__sflush_r+0x1a>
 8008bb8:	6a21      	ldr	r1, [r4, #32]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b0      	blx	r6
 8008bc0:	1c41      	adds	r1, r0, #1
 8008bc2:	d1c7      	bne.n	8008b54 <__sflush_r+0x30>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0c4      	beq.n	8008b54 <__sflush_r+0x30>
 8008bca:	2b1d      	cmp	r3, #29
 8008bcc:	d001      	beq.n	8008bd2 <__sflush_r+0xae>
 8008bce:	2b16      	cmp	r3, #22
 8008bd0:	d101      	bne.n	8008bd6 <__sflush_r+0xb2>
 8008bd2:	602f      	str	r7, [r5, #0]
 8008bd4:	e7b2      	b.n	8008b3c <__sflush_r+0x18>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	e7ae      	b.n	8008b3e <__sflush_r+0x1a>
 8008be0:	690f      	ldr	r7, [r1, #16]
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	d0aa      	beq.n	8008b3c <__sflush_r+0x18>
 8008be6:	0793      	lsls	r3, r2, #30
 8008be8:	bf18      	it	ne
 8008bea:	2300      	movne	r3, #0
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	1bf6      	subs	r6, r6, r7
 8008bf4:	600f      	str	r7, [r1, #0]
 8008bf6:	608b      	str	r3, [r1, #8]
 8008bf8:	2e00      	cmp	r6, #0
 8008bfa:	dd9f      	ble.n	8008b3c <__sflush_r+0x18>
 8008bfc:	4633      	mov	r3, r6
 8008bfe:	463a      	mov	r2, r7
 8008c00:	4628      	mov	r0, r5
 8008c02:	6a21      	ldr	r1, [r4, #32]
 8008c04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c08:	47e0      	blx	ip
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	dc06      	bgt.n	8008c1c <__sflush_r+0xf8>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	e790      	b.n	8008b3e <__sflush_r+0x1a>
 8008c1c:	4407      	add	r7, r0
 8008c1e:	1a36      	subs	r6, r6, r0
 8008c20:	e7ea      	b.n	8008bf8 <__sflush_r+0xd4>
 8008c22:	bf00      	nop
 8008c24:	20400001 	.word	0x20400001

08008c28 <_fflush_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b913      	cbnz	r3, 8008c38 <_fflush_r+0x10>
 8008c32:	2500      	movs	r5, #0
 8008c34:	4628      	mov	r0, r5
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	b118      	cbz	r0, 8008c42 <_fflush_r+0x1a>
 8008c3a:	6983      	ldr	r3, [r0, #24]
 8008c3c:	b90b      	cbnz	r3, 8008c42 <_fflush_r+0x1a>
 8008c3e:	f7fe f8c5 	bl	8006dcc <__sinit>
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <_fflush_r+0x6c>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d11b      	bne.n	8008c80 <_fflush_r+0x58>
 8008c48:	686c      	ldr	r4, [r5, #4]
 8008c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ef      	beq.n	8008c32 <_fflush_r+0xa>
 8008c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c54:	07d0      	lsls	r0, r2, #31
 8008c56:	d404      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c58:	0599      	lsls	r1, r3, #22
 8008c5a:	d402      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5e:	f7fe f978 	bl	8006f52 <__retarget_lock_acquire_recursive>
 8008c62:	4628      	mov	r0, r5
 8008c64:	4621      	mov	r1, r4
 8008c66:	f7ff ff5d 	bl	8008b24 <__sflush_r>
 8008c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	07da      	lsls	r2, r3, #31
 8008c70:	d4e0      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	059b      	lsls	r3, r3, #22
 8008c76:	d4dd      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7a:	f7fe f96b 	bl	8006f54 <__retarget_lock_release_recursive>
 8008c7e:	e7d9      	b.n	8008c34 <_fflush_r+0xc>
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_fflush_r+0x70>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <_fflush_r+0x62>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7df      	b.n	8008c4a <_fflush_r+0x22>
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <_fflush_r+0x74>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7da      	b.n	8008c4a <_fflush_r+0x22>
 8008c94:	08009e98 	.word	0x08009e98
 8008c98:	08009eb8 	.word	0x08009eb8
 8008c9c:	08009e78 	.word	0x08009e78

08008ca0 <_localeconv_r>:
 8008ca0:	4800      	ldr	r0, [pc, #0]	; (8008ca4 <_localeconv_r+0x4>)
 8008ca2:	4770      	bx	lr
 8008ca4:	20000168 	.word	0x20000168

08008ca8 <_lseek_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	4611      	mov	r1, r2
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4d05      	ldr	r5, [pc, #20]	; (8008cc8 <_lseek_r+0x20>)
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f7f9 f840 	bl	8001d3c <_lseek>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_lseek_r+0x1e>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_lseek_r+0x1e>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20002340 	.word	0x20002340

08008ccc <__swhatbuf_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	460e      	mov	r6, r1
 8008cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	461d      	mov	r5, r3
 8008cda:	b096      	sub	sp, #88	; 0x58
 8008cdc:	da08      	bge.n	8008cf0 <__swhatbuf_r+0x24>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ce4:	602a      	str	r2, [r5, #0]
 8008ce6:	061a      	lsls	r2, r3, #24
 8008ce8:	d410      	bmi.n	8008d0c <__swhatbuf_r+0x40>
 8008cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cee:	e00e      	b.n	8008d0e <__swhatbuf_r+0x42>
 8008cf0:	466a      	mov	r2, sp
 8008cf2:	f000 ff47 	bl	8009b84 <_fstat_r>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	dbf1      	blt.n	8008cde <__swhatbuf_r+0x12>
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d04:	425a      	negs	r2, r3
 8008d06:	415a      	adcs	r2, r3
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	e7ee      	b.n	8008cea <__swhatbuf_r+0x1e>
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	2000      	movs	r0, #0
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	b016      	add	sp, #88	; 0x58
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d18 <__smakebuf_r>:
 8008d18:	898b      	ldrh	r3, [r1, #12]
 8008d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d1c:	079d      	lsls	r5, r3, #30
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	d507      	bpl.n	8008d34 <__smakebuf_r+0x1c>
 8008d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6163      	str	r3, [r4, #20]
 8008d30:	b002      	add	sp, #8
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	466a      	mov	r2, sp
 8008d36:	ab01      	add	r3, sp, #4
 8008d38:	f7ff ffc8 	bl	8008ccc <__swhatbuf_r>
 8008d3c:	9900      	ldr	r1, [sp, #0]
 8008d3e:	4605      	mov	r5, r0
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7fe f93f 	bl	8006fc4 <_malloc_r>
 8008d46:	b948      	cbnz	r0, 8008d5c <__smakebuf_r+0x44>
 8008d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d4ef      	bmi.n	8008d30 <__smakebuf_r+0x18>
 8008d50:	f023 0303 	bic.w	r3, r3, #3
 8008d54:	f043 0302 	orr.w	r3, r3, #2
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	e7e3      	b.n	8008d24 <__smakebuf_r+0xc>
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <__smakebuf_r+0x7c>)
 8008d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	9b00      	ldr	r3, [sp, #0]
 8008d6c:	6120      	str	r0, [r4, #16]
 8008d6e:	6163      	str	r3, [r4, #20]
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	b15b      	cbz	r3, 8008d8c <__smakebuf_r+0x74>
 8008d74:	4630      	mov	r0, r6
 8008d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7a:	f000 ff15 	bl	8009ba8 <_isatty_r>
 8008d7e:	b128      	cbz	r0, 8008d8c <__smakebuf_r+0x74>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	f043 0301 	orr.w	r3, r3, #1
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	89a0      	ldrh	r0, [r4, #12]
 8008d8e:	4305      	orrs	r5, r0
 8008d90:	81a5      	strh	r5, [r4, #12]
 8008d92:	e7cd      	b.n	8008d30 <__smakebuf_r+0x18>
 8008d94:	08006d65 	.word	0x08006d65

08008d98 <malloc>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <malloc+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f7fe b911 	b.w	8006fc4 <_malloc_r>
 8008da2:	bf00      	nop
 8008da4:	20000014 	.word	0x20000014

08008da8 <memchr>:
 8008da8:	4603      	mov	r3, r0
 8008daa:	b510      	push	{r4, lr}
 8008dac:	b2c9      	uxtb	r1, r1
 8008dae:	4402      	add	r2, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	d101      	bne.n	8008dba <memchr+0x12>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e003      	b.n	8008dc2 <memchr+0x1a>
 8008dba:	7804      	ldrb	r4, [r0, #0]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	428c      	cmp	r4, r1
 8008dc0:	d1f6      	bne.n	8008db0 <memchr+0x8>
 8008dc2:	bd10      	pop	{r4, pc}

08008dc4 <__malloc_lock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__malloc_lock+0x8>)
 8008dc6:	f7fe b8c4 	b.w	8006f52 <__retarget_lock_acquire_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20002334 	.word	0x20002334

08008dd0 <__malloc_unlock>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__malloc_unlock+0x8>)
 8008dd2:	f7fe b8bf 	b.w	8006f54 <__retarget_lock_release_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	20002334 	.word	0x20002334

08008ddc <_Balloc>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008de0:	4604      	mov	r4, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	b976      	cbnz	r6, 8008e04 <_Balloc+0x28>
 8008de6:	2010      	movs	r0, #16
 8008de8:	f7ff ffd6 	bl	8008d98 <malloc>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6260      	str	r0, [r4, #36]	; 0x24
 8008df0:	b920      	cbnz	r0, 8008dfc <_Balloc+0x20>
 8008df2:	2166      	movs	r1, #102	; 0x66
 8008df4:	4b17      	ldr	r3, [pc, #92]	; (8008e54 <_Balloc+0x78>)
 8008df6:	4818      	ldr	r0, [pc, #96]	; (8008e58 <_Balloc+0x7c>)
 8008df8:	f000 fe94 	bl	8009b24 <__assert_func>
 8008dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e00:	6006      	str	r6, [r0, #0]
 8008e02:	60c6      	str	r6, [r0, #12]
 8008e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e06:	68f3      	ldr	r3, [r6, #12]
 8008e08:	b183      	cbz	r3, 8008e2c <_Balloc+0x50>
 8008e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e12:	b9b8      	cbnz	r0, 8008e44 <_Balloc+0x68>
 8008e14:	2101      	movs	r1, #1
 8008e16:	fa01 f605 	lsl.w	r6, r1, r5
 8008e1a:	1d72      	adds	r2, r6, #5
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	f000 fb5e 	bl	80094e0 <_calloc_r>
 8008e24:	b160      	cbz	r0, 8008e40 <_Balloc+0x64>
 8008e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e2a:	e00e      	b.n	8008e4a <_Balloc+0x6e>
 8008e2c:	2221      	movs	r2, #33	; 0x21
 8008e2e:	2104      	movs	r1, #4
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 fb55 	bl	80094e0 <_calloc_r>
 8008e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e38:	60f0      	str	r0, [r6, #12]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e4      	bne.n	8008e0a <_Balloc+0x2e>
 8008e40:	2000      	movs	r0, #0
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	6802      	ldr	r2, [r0, #0]
 8008e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e50:	e7f7      	b.n	8008e42 <_Balloc+0x66>
 8008e52:	bf00      	nop
 8008e54:	08009f1d 	.word	0x08009f1d
 8008e58:	08009fa0 	.word	0x08009fa0

08008e5c <_Bfree>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e60:	4605      	mov	r5, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	b976      	cbnz	r6, 8008e84 <_Bfree+0x28>
 8008e66:	2010      	movs	r0, #16
 8008e68:	f7ff ff96 	bl	8008d98 <malloc>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	6268      	str	r0, [r5, #36]	; 0x24
 8008e70:	b920      	cbnz	r0, 8008e7c <_Bfree+0x20>
 8008e72:	218a      	movs	r1, #138	; 0x8a
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <_Bfree+0x3c>)
 8008e76:	4809      	ldr	r0, [pc, #36]	; (8008e9c <_Bfree+0x40>)
 8008e78:	f000 fe54 	bl	8009b24 <__assert_func>
 8008e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e80:	6006      	str	r6, [r0, #0]
 8008e82:	60c6      	str	r6, [r0, #12]
 8008e84:	b13c      	cbz	r4, 8008e96 <_Bfree+0x3a>
 8008e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e88:	6862      	ldr	r2, [r4, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e90:	6021      	str	r1, [r4, #0]
 8008e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	08009f1d 	.word	0x08009f1d
 8008e9c:	08009fa0 	.word	0x08009fa0

08008ea0 <__multadd>:
 8008ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	2000      	movs	r0, #0
 8008eac:	690d      	ldr	r5, [r1, #16]
 8008eae:	f101 0c14 	add.w	ip, r1, #20
 8008eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	b299      	uxth	r1, r3
 8008eba:	fb02 6101 	mla	r1, r2, r1, r6
 8008ebe:	0c1e      	lsrs	r6, r3, #16
 8008ec0:	0c0b      	lsrs	r3, r1, #16
 8008ec2:	fb02 3306 	mla	r3, r2, r6, r3
 8008ec6:	b289      	uxth	r1, r1
 8008ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ecc:	4285      	cmp	r5, r0
 8008ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ed6:	dcec      	bgt.n	8008eb2 <__multadd+0x12>
 8008ed8:	b30e      	cbz	r6, 8008f1e <__multadd+0x7e>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dc19      	bgt.n	8008f14 <__multadd+0x74>
 8008ee0:	6861      	ldr	r1, [r4, #4]
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	f7ff ff79 	bl	8008ddc <_Balloc>
 8008eea:	4680      	mov	r8, r0
 8008eec:	b928      	cbnz	r0, 8008efa <__multadd+0x5a>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	21b5      	movs	r1, #181	; 0xb5
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <__multadd+0x84>)
 8008ef4:	480c      	ldr	r0, [pc, #48]	; (8008f28 <__multadd+0x88>)
 8008ef6:	f000 fe15 	bl	8009b24 <__assert_func>
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	f104 010c 	add.w	r1, r4, #12
 8008f00:	3202      	adds	r2, #2
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	300c      	adds	r0, #12
 8008f06:	f7fe f826 	bl	8006f56 <memcpy>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ffa5 	bl	8008e5c <_Bfree>
 8008f12:	4644      	mov	r4, r8
 8008f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f18:	3501      	adds	r5, #1
 8008f1a:	615e      	str	r6, [r3, #20]
 8008f1c:	6125      	str	r5, [r4, #16]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	08009f8f 	.word	0x08009f8f
 8008f28:	08009fa0 	.word	0x08009fa0

08008f2c <__hi0bits>:
 8008f2c:	0c02      	lsrs	r2, r0, #16
 8008f2e:	0412      	lsls	r2, r2, #16
 8008f30:	4603      	mov	r3, r0
 8008f32:	b9ca      	cbnz	r2, 8008f68 <__hi0bits+0x3c>
 8008f34:	0403      	lsls	r3, r0, #16
 8008f36:	2010      	movs	r0, #16
 8008f38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f3c:	bf04      	itt	eq
 8008f3e:	021b      	lsleq	r3, r3, #8
 8008f40:	3008      	addeq	r0, #8
 8008f42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f46:	bf04      	itt	eq
 8008f48:	011b      	lsleq	r3, r3, #4
 8008f4a:	3004      	addeq	r0, #4
 8008f4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f50:	bf04      	itt	eq
 8008f52:	009b      	lsleq	r3, r3, #2
 8008f54:	3002      	addeq	r0, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	db05      	blt.n	8008f66 <__hi0bits+0x3a>
 8008f5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008f5e:	f100 0001 	add.w	r0, r0, #1
 8008f62:	bf08      	it	eq
 8008f64:	2020      	moveq	r0, #32
 8008f66:	4770      	bx	lr
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e7e5      	b.n	8008f38 <__hi0bits+0xc>

08008f6c <__lo0bits>:
 8008f6c:	6803      	ldr	r3, [r0, #0]
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f013 0007 	ands.w	r0, r3, #7
 8008f74:	d00b      	beq.n	8008f8e <__lo0bits+0x22>
 8008f76:	07d9      	lsls	r1, r3, #31
 8008f78:	d421      	bmi.n	8008fbe <__lo0bits+0x52>
 8008f7a:	0798      	lsls	r0, r3, #30
 8008f7c:	bf49      	itett	mi
 8008f7e:	085b      	lsrmi	r3, r3, #1
 8008f80:	089b      	lsrpl	r3, r3, #2
 8008f82:	2001      	movmi	r0, #1
 8008f84:	6013      	strmi	r3, [r2, #0]
 8008f86:	bf5c      	itt	pl
 8008f88:	2002      	movpl	r0, #2
 8008f8a:	6013      	strpl	r3, [r2, #0]
 8008f8c:	4770      	bx	lr
 8008f8e:	b299      	uxth	r1, r3
 8008f90:	b909      	cbnz	r1, 8008f96 <__lo0bits+0x2a>
 8008f92:	2010      	movs	r0, #16
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	b2d9      	uxtb	r1, r3
 8008f98:	b909      	cbnz	r1, 8008f9e <__lo0bits+0x32>
 8008f9a:	3008      	adds	r0, #8
 8008f9c:	0a1b      	lsrs	r3, r3, #8
 8008f9e:	0719      	lsls	r1, r3, #28
 8008fa0:	bf04      	itt	eq
 8008fa2:	091b      	lsreq	r3, r3, #4
 8008fa4:	3004      	addeq	r0, #4
 8008fa6:	0799      	lsls	r1, r3, #30
 8008fa8:	bf04      	itt	eq
 8008faa:	089b      	lsreq	r3, r3, #2
 8008fac:	3002      	addeq	r0, #2
 8008fae:	07d9      	lsls	r1, r3, #31
 8008fb0:	d403      	bmi.n	8008fba <__lo0bits+0x4e>
 8008fb2:	085b      	lsrs	r3, r3, #1
 8008fb4:	f100 0001 	add.w	r0, r0, #1
 8008fb8:	d003      	beq.n	8008fc2 <__lo0bits+0x56>
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4770      	bx	lr
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4770      	bx	lr
 8008fc2:	2020      	movs	r0, #32
 8008fc4:	4770      	bx	lr
	...

08008fc8 <__i2b>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	2101      	movs	r1, #1
 8008fce:	f7ff ff05 	bl	8008ddc <_Balloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	b928      	cbnz	r0, 8008fe2 <__i2b+0x1a>
 8008fd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fda:	4b04      	ldr	r3, [pc, #16]	; (8008fec <__i2b+0x24>)
 8008fdc:	4804      	ldr	r0, [pc, #16]	; (8008ff0 <__i2b+0x28>)
 8008fde:	f000 fda1 	bl	8009b24 <__assert_func>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	6144      	str	r4, [r0, #20]
 8008fe6:	6103      	str	r3, [r0, #16]
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	08009f8f 	.word	0x08009f8f
 8008ff0:	08009fa0 	.word	0x08009fa0

08008ff4 <__multiply>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	4691      	mov	r9, r2
 8008ffa:	690a      	ldr	r2, [r1, #16]
 8008ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009000:	460c      	mov	r4, r1
 8009002:	429a      	cmp	r2, r3
 8009004:	bfbe      	ittt	lt
 8009006:	460b      	movlt	r3, r1
 8009008:	464c      	movlt	r4, r9
 800900a:	4699      	movlt	r9, r3
 800900c:	6927      	ldr	r7, [r4, #16]
 800900e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	6861      	ldr	r1, [r4, #4]
 8009016:	eb07 060a 	add.w	r6, r7, sl
 800901a:	42b3      	cmp	r3, r6
 800901c:	b085      	sub	sp, #20
 800901e:	bfb8      	it	lt
 8009020:	3101      	addlt	r1, #1
 8009022:	f7ff fedb 	bl	8008ddc <_Balloc>
 8009026:	b930      	cbnz	r0, 8009036 <__multiply+0x42>
 8009028:	4602      	mov	r2, r0
 800902a:	f240 115d 	movw	r1, #349	; 0x15d
 800902e:	4b43      	ldr	r3, [pc, #268]	; (800913c <__multiply+0x148>)
 8009030:	4843      	ldr	r0, [pc, #268]	; (8009140 <__multiply+0x14c>)
 8009032:	f000 fd77 	bl	8009b24 <__assert_func>
 8009036:	f100 0514 	add.w	r5, r0, #20
 800903a:	462b      	mov	r3, r5
 800903c:	2200      	movs	r2, #0
 800903e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009042:	4543      	cmp	r3, r8
 8009044:	d321      	bcc.n	800908a <__multiply+0x96>
 8009046:	f104 0314 	add.w	r3, r4, #20
 800904a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800904e:	f109 0314 	add.w	r3, r9, #20
 8009052:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009056:	9202      	str	r2, [sp, #8]
 8009058:	1b3a      	subs	r2, r7, r4
 800905a:	3a15      	subs	r2, #21
 800905c:	f022 0203 	bic.w	r2, r2, #3
 8009060:	3204      	adds	r2, #4
 8009062:	f104 0115 	add.w	r1, r4, #21
 8009066:	428f      	cmp	r7, r1
 8009068:	bf38      	it	cc
 800906a:	2204      	movcc	r2, #4
 800906c:	9201      	str	r2, [sp, #4]
 800906e:	9a02      	ldr	r2, [sp, #8]
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	429a      	cmp	r2, r3
 8009074:	d80c      	bhi.n	8009090 <__multiply+0x9c>
 8009076:	2e00      	cmp	r6, #0
 8009078:	dd03      	ble.n	8009082 <__multiply+0x8e>
 800907a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800907e:	2b00      	cmp	r3, #0
 8009080:	d059      	beq.n	8009136 <__multiply+0x142>
 8009082:	6106      	str	r6, [r0, #16]
 8009084:	b005      	add	sp, #20
 8009086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908a:	f843 2b04 	str.w	r2, [r3], #4
 800908e:	e7d8      	b.n	8009042 <__multiply+0x4e>
 8009090:	f8b3 a000 	ldrh.w	sl, [r3]
 8009094:	f1ba 0f00 	cmp.w	sl, #0
 8009098:	d023      	beq.n	80090e2 <__multiply+0xee>
 800909a:	46a9      	mov	r9, r5
 800909c:	f04f 0c00 	mov.w	ip, #0
 80090a0:	f104 0e14 	add.w	lr, r4, #20
 80090a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090a8:	f8d9 1000 	ldr.w	r1, [r9]
 80090ac:	fa1f fb82 	uxth.w	fp, r2
 80090b0:	b289      	uxth	r1, r1
 80090b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80090b6:	4461      	add	r1, ip
 80090b8:	f8d9 c000 	ldr.w	ip, [r9]
 80090bc:	0c12      	lsrs	r2, r2, #16
 80090be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80090c2:	fb0a c202 	mla	r2, sl, r2, ip
 80090c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090ca:	b289      	uxth	r1, r1
 80090cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090d0:	4577      	cmp	r7, lr
 80090d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090d6:	f849 1b04 	str.w	r1, [r9], #4
 80090da:	d8e3      	bhi.n	80090a4 <__multiply+0xb0>
 80090dc:	9a01      	ldr	r2, [sp, #4]
 80090de:	f845 c002 	str.w	ip, [r5, r2]
 80090e2:	9a03      	ldr	r2, [sp, #12]
 80090e4:	3304      	adds	r3, #4
 80090e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090ea:	f1b9 0f00 	cmp.w	r9, #0
 80090ee:	d020      	beq.n	8009132 <__multiply+0x13e>
 80090f0:	46ae      	mov	lr, r5
 80090f2:	f04f 0a00 	mov.w	sl, #0
 80090f6:	6829      	ldr	r1, [r5, #0]
 80090f8:	f104 0c14 	add.w	ip, r4, #20
 80090fc:	f8bc b000 	ldrh.w	fp, [ip]
 8009100:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009104:	b289      	uxth	r1, r1
 8009106:	fb09 220b 	mla	r2, r9, fp, r2
 800910a:	4492      	add	sl, r2
 800910c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009110:	f84e 1b04 	str.w	r1, [lr], #4
 8009114:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009118:	f8be 1000 	ldrh.w	r1, [lr]
 800911c:	0c12      	lsrs	r2, r2, #16
 800911e:	fb09 1102 	mla	r1, r9, r2, r1
 8009122:	4567      	cmp	r7, ip
 8009124:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009128:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800912c:	d8e6      	bhi.n	80090fc <__multiply+0x108>
 800912e:	9a01      	ldr	r2, [sp, #4]
 8009130:	50a9      	str	r1, [r5, r2]
 8009132:	3504      	adds	r5, #4
 8009134:	e79b      	b.n	800906e <__multiply+0x7a>
 8009136:	3e01      	subs	r6, #1
 8009138:	e79d      	b.n	8009076 <__multiply+0x82>
 800913a:	bf00      	nop
 800913c:	08009f8f 	.word	0x08009f8f
 8009140:	08009fa0 	.word	0x08009fa0

08009144 <__pow5mult>:
 8009144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009148:	4615      	mov	r5, r2
 800914a:	f012 0203 	ands.w	r2, r2, #3
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	d007      	beq.n	8009164 <__pow5mult+0x20>
 8009154:	4c25      	ldr	r4, [pc, #148]	; (80091ec <__pow5mult+0xa8>)
 8009156:	3a01      	subs	r2, #1
 8009158:	2300      	movs	r3, #0
 800915a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800915e:	f7ff fe9f 	bl	8008ea0 <__multadd>
 8009162:	4607      	mov	r7, r0
 8009164:	10ad      	asrs	r5, r5, #2
 8009166:	d03d      	beq.n	80091e4 <__pow5mult+0xa0>
 8009168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800916a:	b97c      	cbnz	r4, 800918c <__pow5mult+0x48>
 800916c:	2010      	movs	r0, #16
 800916e:	f7ff fe13 	bl	8008d98 <malloc>
 8009172:	4602      	mov	r2, r0
 8009174:	6270      	str	r0, [r6, #36]	; 0x24
 8009176:	b928      	cbnz	r0, 8009184 <__pow5mult+0x40>
 8009178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800917c:	4b1c      	ldr	r3, [pc, #112]	; (80091f0 <__pow5mult+0xac>)
 800917e:	481d      	ldr	r0, [pc, #116]	; (80091f4 <__pow5mult+0xb0>)
 8009180:	f000 fcd0 	bl	8009b24 <__assert_func>
 8009184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009188:	6004      	str	r4, [r0, #0]
 800918a:	60c4      	str	r4, [r0, #12]
 800918c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009194:	b94c      	cbnz	r4, 80091aa <__pow5mult+0x66>
 8009196:	f240 2171 	movw	r1, #625	; 0x271
 800919a:	4630      	mov	r0, r6
 800919c:	f7ff ff14 	bl	8008fc8 <__i2b>
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	f04f 0900 	mov.w	r9, #0
 80091ae:	07eb      	lsls	r3, r5, #31
 80091b0:	d50a      	bpl.n	80091c8 <__pow5mult+0x84>
 80091b2:	4639      	mov	r1, r7
 80091b4:	4622      	mov	r2, r4
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7ff ff1c 	bl	8008ff4 <__multiply>
 80091bc:	4680      	mov	r8, r0
 80091be:	4639      	mov	r1, r7
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7ff fe4b 	bl	8008e5c <_Bfree>
 80091c6:	4647      	mov	r7, r8
 80091c8:	106d      	asrs	r5, r5, #1
 80091ca:	d00b      	beq.n	80091e4 <__pow5mult+0xa0>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	b938      	cbnz	r0, 80091e0 <__pow5mult+0x9c>
 80091d0:	4622      	mov	r2, r4
 80091d2:	4621      	mov	r1, r4
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff ff0d 	bl	8008ff4 <__multiply>
 80091da:	6020      	str	r0, [r4, #0]
 80091dc:	f8c0 9000 	str.w	r9, [r0]
 80091e0:	4604      	mov	r4, r0
 80091e2:	e7e4      	b.n	80091ae <__pow5mult+0x6a>
 80091e4:	4638      	mov	r0, r7
 80091e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ea:	bf00      	nop
 80091ec:	0800a0f0 	.word	0x0800a0f0
 80091f0:	08009f1d 	.word	0x08009f1d
 80091f4:	08009fa0 	.word	0x08009fa0

080091f8 <__lshift>:
 80091f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	460c      	mov	r4, r1
 80091fe:	4607      	mov	r7, r0
 8009200:	4691      	mov	r9, r2
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	6849      	ldr	r1, [r1, #4]
 8009206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009210:	f108 0601 	add.w	r6, r8, #1
 8009214:	42b3      	cmp	r3, r6
 8009216:	db0b      	blt.n	8009230 <__lshift+0x38>
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff fddf 	bl	8008ddc <_Balloc>
 800921e:	4605      	mov	r5, r0
 8009220:	b948      	cbnz	r0, 8009236 <__lshift+0x3e>
 8009222:	4602      	mov	r2, r0
 8009224:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009228:	4b29      	ldr	r3, [pc, #164]	; (80092d0 <__lshift+0xd8>)
 800922a:	482a      	ldr	r0, [pc, #168]	; (80092d4 <__lshift+0xdc>)
 800922c:	f000 fc7a 	bl	8009b24 <__assert_func>
 8009230:	3101      	adds	r1, #1
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	e7ee      	b.n	8009214 <__lshift+0x1c>
 8009236:	2300      	movs	r3, #0
 8009238:	f100 0114 	add.w	r1, r0, #20
 800923c:	f100 0210 	add.w	r2, r0, #16
 8009240:	4618      	mov	r0, r3
 8009242:	4553      	cmp	r3, sl
 8009244:	db37      	blt.n	80092b6 <__lshift+0xbe>
 8009246:	6920      	ldr	r0, [r4, #16]
 8009248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800924c:	f104 0314 	add.w	r3, r4, #20
 8009250:	f019 091f 	ands.w	r9, r9, #31
 8009254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009258:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800925c:	d02f      	beq.n	80092be <__lshift+0xc6>
 800925e:	468a      	mov	sl, r1
 8009260:	f04f 0c00 	mov.w	ip, #0
 8009264:	f1c9 0e20 	rsb	lr, r9, #32
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	fa02 f209 	lsl.w	r2, r2, r9
 800926e:	ea42 020c 	orr.w	r2, r2, ip
 8009272:	f84a 2b04 	str.w	r2, [sl], #4
 8009276:	f853 2b04 	ldr.w	r2, [r3], #4
 800927a:	4298      	cmp	r0, r3
 800927c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009280:	d8f2      	bhi.n	8009268 <__lshift+0x70>
 8009282:	1b03      	subs	r3, r0, r4
 8009284:	3b15      	subs	r3, #21
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	3304      	adds	r3, #4
 800928c:	f104 0215 	add.w	r2, r4, #21
 8009290:	4290      	cmp	r0, r2
 8009292:	bf38      	it	cc
 8009294:	2304      	movcc	r3, #4
 8009296:	f841 c003 	str.w	ip, [r1, r3]
 800929a:	f1bc 0f00 	cmp.w	ip, #0
 800929e:	d001      	beq.n	80092a4 <__lshift+0xac>
 80092a0:	f108 0602 	add.w	r6, r8, #2
 80092a4:	3e01      	subs	r6, #1
 80092a6:	4638      	mov	r0, r7
 80092a8:	4621      	mov	r1, r4
 80092aa:	612e      	str	r6, [r5, #16]
 80092ac:	f7ff fdd6 	bl	8008e5c <_Bfree>
 80092b0:	4628      	mov	r0, r5
 80092b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80092ba:	3301      	adds	r3, #1
 80092bc:	e7c1      	b.n	8009242 <__lshift+0x4a>
 80092be:	3904      	subs	r1, #4
 80092c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c4:	4298      	cmp	r0, r3
 80092c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80092ca:	d8f9      	bhi.n	80092c0 <__lshift+0xc8>
 80092cc:	e7ea      	b.n	80092a4 <__lshift+0xac>
 80092ce:	bf00      	nop
 80092d0:	08009f8f 	.word	0x08009f8f
 80092d4:	08009fa0 	.word	0x08009fa0

080092d8 <__mcmp>:
 80092d8:	4603      	mov	r3, r0
 80092da:	690a      	ldr	r2, [r1, #16]
 80092dc:	6900      	ldr	r0, [r0, #16]
 80092de:	b530      	push	{r4, r5, lr}
 80092e0:	1a80      	subs	r0, r0, r2
 80092e2:	d10d      	bne.n	8009300 <__mcmp+0x28>
 80092e4:	3314      	adds	r3, #20
 80092e6:	3114      	adds	r1, #20
 80092e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092f8:	4295      	cmp	r5, r2
 80092fa:	d002      	beq.n	8009302 <__mcmp+0x2a>
 80092fc:	d304      	bcc.n	8009308 <__mcmp+0x30>
 80092fe:	2001      	movs	r0, #1
 8009300:	bd30      	pop	{r4, r5, pc}
 8009302:	42a3      	cmp	r3, r4
 8009304:	d3f4      	bcc.n	80092f0 <__mcmp+0x18>
 8009306:	e7fb      	b.n	8009300 <__mcmp+0x28>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800930c:	e7f8      	b.n	8009300 <__mcmp+0x28>
	...

08009310 <__mdiff>:
 8009310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	460d      	mov	r5, r1
 8009316:	4607      	mov	r7, r0
 8009318:	4611      	mov	r1, r2
 800931a:	4628      	mov	r0, r5
 800931c:	4614      	mov	r4, r2
 800931e:	f7ff ffdb 	bl	80092d8 <__mcmp>
 8009322:	1e06      	subs	r6, r0, #0
 8009324:	d111      	bne.n	800934a <__mdiff+0x3a>
 8009326:	4631      	mov	r1, r6
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff fd57 	bl	8008ddc <_Balloc>
 800932e:	4602      	mov	r2, r0
 8009330:	b928      	cbnz	r0, 800933e <__mdiff+0x2e>
 8009332:	f240 2132 	movw	r1, #562	; 0x232
 8009336:	4b3a      	ldr	r3, [pc, #232]	; (8009420 <__mdiff+0x110>)
 8009338:	483a      	ldr	r0, [pc, #232]	; (8009424 <__mdiff+0x114>)
 800933a:	f000 fbf3 	bl	8009b24 <__assert_func>
 800933e:	2301      	movs	r3, #1
 8009340:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009344:	4610      	mov	r0, r2
 8009346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	bfa4      	itt	ge
 800934c:	4623      	movge	r3, r4
 800934e:	462c      	movge	r4, r5
 8009350:	4638      	mov	r0, r7
 8009352:	6861      	ldr	r1, [r4, #4]
 8009354:	bfa6      	itte	ge
 8009356:	461d      	movge	r5, r3
 8009358:	2600      	movge	r6, #0
 800935a:	2601      	movlt	r6, #1
 800935c:	f7ff fd3e 	bl	8008ddc <_Balloc>
 8009360:	4602      	mov	r2, r0
 8009362:	b918      	cbnz	r0, 800936c <__mdiff+0x5c>
 8009364:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009368:	4b2d      	ldr	r3, [pc, #180]	; (8009420 <__mdiff+0x110>)
 800936a:	e7e5      	b.n	8009338 <__mdiff+0x28>
 800936c:	f102 0814 	add.w	r8, r2, #20
 8009370:	46c2      	mov	sl, r8
 8009372:	f04f 0c00 	mov.w	ip, #0
 8009376:	6927      	ldr	r7, [r4, #16]
 8009378:	60c6      	str	r6, [r0, #12]
 800937a:	692e      	ldr	r6, [r5, #16]
 800937c:	f104 0014 	add.w	r0, r4, #20
 8009380:	f105 0914 	add.w	r9, r5, #20
 8009384:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800938c:	3410      	adds	r4, #16
 800938e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009392:	f859 3b04 	ldr.w	r3, [r9], #4
 8009396:	fa1f f18b 	uxth.w	r1, fp
 800939a:	448c      	add	ip, r1
 800939c:	b299      	uxth	r1, r3
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	ebac 0101 	sub.w	r1, ip, r1
 80093a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093ac:	b289      	uxth	r1, r1
 80093ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80093b2:	454e      	cmp	r6, r9
 80093b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093b8:	f84a 3b04 	str.w	r3, [sl], #4
 80093bc:	d8e7      	bhi.n	800938e <__mdiff+0x7e>
 80093be:	1b73      	subs	r3, r6, r5
 80093c0:	3b15      	subs	r3, #21
 80093c2:	f023 0303 	bic.w	r3, r3, #3
 80093c6:	3515      	adds	r5, #21
 80093c8:	3304      	adds	r3, #4
 80093ca:	42ae      	cmp	r6, r5
 80093cc:	bf38      	it	cc
 80093ce:	2304      	movcc	r3, #4
 80093d0:	4418      	add	r0, r3
 80093d2:	4443      	add	r3, r8
 80093d4:	461e      	mov	r6, r3
 80093d6:	4605      	mov	r5, r0
 80093d8:	4575      	cmp	r5, lr
 80093da:	d30e      	bcc.n	80093fa <__mdiff+0xea>
 80093dc:	f10e 0103 	add.w	r1, lr, #3
 80093e0:	1a09      	subs	r1, r1, r0
 80093e2:	f021 0103 	bic.w	r1, r1, #3
 80093e6:	3803      	subs	r0, #3
 80093e8:	4586      	cmp	lr, r0
 80093ea:	bf38      	it	cc
 80093ec:	2100      	movcc	r1, #0
 80093ee:	4419      	add	r1, r3
 80093f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80093f4:	b18b      	cbz	r3, 800941a <__mdiff+0x10a>
 80093f6:	6117      	str	r7, [r2, #16]
 80093f8:	e7a4      	b.n	8009344 <__mdiff+0x34>
 80093fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80093fe:	fa1f f188 	uxth.w	r1, r8
 8009402:	4461      	add	r1, ip
 8009404:	140c      	asrs	r4, r1, #16
 8009406:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800940a:	b289      	uxth	r1, r1
 800940c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009410:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009414:	f846 1b04 	str.w	r1, [r6], #4
 8009418:	e7de      	b.n	80093d8 <__mdiff+0xc8>
 800941a:	3f01      	subs	r7, #1
 800941c:	e7e8      	b.n	80093f0 <__mdiff+0xe0>
 800941e:	bf00      	nop
 8009420:	08009f8f 	.word	0x08009f8f
 8009424:	08009fa0 	.word	0x08009fa0

08009428 <__d2b>:
 8009428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800942c:	2101      	movs	r1, #1
 800942e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009432:	4690      	mov	r8, r2
 8009434:	461d      	mov	r5, r3
 8009436:	f7ff fcd1 	bl	8008ddc <_Balloc>
 800943a:	4604      	mov	r4, r0
 800943c:	b930      	cbnz	r0, 800944c <__d2b+0x24>
 800943e:	4602      	mov	r2, r0
 8009440:	f240 310a 	movw	r1, #778	; 0x30a
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <__d2b+0xb0>)
 8009446:	4825      	ldr	r0, [pc, #148]	; (80094dc <__d2b+0xb4>)
 8009448:	f000 fb6c 	bl	8009b24 <__assert_func>
 800944c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009450:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009454:	bb2d      	cbnz	r5, 80094a2 <__d2b+0x7a>
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	f1b8 0300 	subs.w	r3, r8, #0
 800945c:	d026      	beq.n	80094ac <__d2b+0x84>
 800945e:	4668      	mov	r0, sp
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	f7ff fd83 	bl	8008f6c <__lo0bits>
 8009466:	9900      	ldr	r1, [sp, #0]
 8009468:	b1f0      	cbz	r0, 80094a8 <__d2b+0x80>
 800946a:	9a01      	ldr	r2, [sp, #4]
 800946c:	f1c0 0320 	rsb	r3, r0, #32
 8009470:	fa02 f303 	lsl.w	r3, r2, r3
 8009474:	430b      	orrs	r3, r1
 8009476:	40c2      	lsrs	r2, r0
 8009478:	6163      	str	r3, [r4, #20]
 800947a:	9201      	str	r2, [sp, #4]
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	bf14      	ite	ne
 8009482:	2102      	movne	r1, #2
 8009484:	2101      	moveq	r1, #1
 8009486:	61a3      	str	r3, [r4, #24]
 8009488:	6121      	str	r1, [r4, #16]
 800948a:	b1c5      	cbz	r5, 80094be <__d2b+0x96>
 800948c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009490:	4405      	add	r5, r0
 8009492:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009496:	603d      	str	r5, [r7, #0]
 8009498:	6030      	str	r0, [r6, #0]
 800949a:	4620      	mov	r0, r4
 800949c:	b002      	add	sp, #8
 800949e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094a6:	e7d6      	b.n	8009456 <__d2b+0x2e>
 80094a8:	6161      	str	r1, [r4, #20]
 80094aa:	e7e7      	b.n	800947c <__d2b+0x54>
 80094ac:	a801      	add	r0, sp, #4
 80094ae:	f7ff fd5d 	bl	8008f6c <__lo0bits>
 80094b2:	2101      	movs	r1, #1
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	6121      	str	r1, [r4, #16]
 80094b8:	6163      	str	r3, [r4, #20]
 80094ba:	3020      	adds	r0, #32
 80094bc:	e7e5      	b.n	800948a <__d2b+0x62>
 80094be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80094c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094c6:	6038      	str	r0, [r7, #0]
 80094c8:	6918      	ldr	r0, [r3, #16]
 80094ca:	f7ff fd2f 	bl	8008f2c <__hi0bits>
 80094ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80094d2:	6031      	str	r1, [r6, #0]
 80094d4:	e7e1      	b.n	800949a <__d2b+0x72>
 80094d6:	bf00      	nop
 80094d8:	08009f8f 	.word	0x08009f8f
 80094dc:	08009fa0 	.word	0x08009fa0

080094e0 <_calloc_r>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	fba1 5402 	umull	r5, r4, r1, r2
 80094e6:	b934      	cbnz	r4, 80094f6 <_calloc_r+0x16>
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7fd fd6b 	bl	8006fc4 <_malloc_r>
 80094ee:	4606      	mov	r6, r0
 80094f0:	b928      	cbnz	r0, 80094fe <_calloc_r+0x1e>
 80094f2:	4630      	mov	r0, r6
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
 80094f6:	220c      	movs	r2, #12
 80094f8:	2600      	movs	r6, #0
 80094fa:	6002      	str	r2, [r0, #0]
 80094fc:	e7f9      	b.n	80094f2 <_calloc_r+0x12>
 80094fe:	462a      	mov	r2, r5
 8009500:	4621      	mov	r1, r4
 8009502:	f7fd fd36 	bl	8006f72 <memset>
 8009506:	e7f4      	b.n	80094f2 <_calloc_r+0x12>

08009508 <_free_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4605      	mov	r5, r0
 800950c:	2900      	cmp	r1, #0
 800950e:	d040      	beq.n	8009592 <_free_r+0x8a>
 8009510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009514:	1f0c      	subs	r4, r1, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfb8      	it	lt
 800951a:	18e4      	addlt	r4, r4, r3
 800951c:	f7ff fc52 	bl	8008dc4 <__malloc_lock>
 8009520:	4a1c      	ldr	r2, [pc, #112]	; (8009594 <_free_r+0x8c>)
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	b933      	cbnz	r3, 8009534 <_free_r+0x2c>
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	6014      	str	r4, [r2, #0]
 800952a:	4628      	mov	r0, r5
 800952c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009530:	f7ff bc4e 	b.w	8008dd0 <__malloc_unlock>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d908      	bls.n	800954a <_free_r+0x42>
 8009538:	6820      	ldr	r0, [r4, #0]
 800953a:	1821      	adds	r1, r4, r0
 800953c:	428b      	cmp	r3, r1
 800953e:	bf01      	itttt	eq
 8009540:	6819      	ldreq	r1, [r3, #0]
 8009542:	685b      	ldreq	r3, [r3, #4]
 8009544:	1809      	addeq	r1, r1, r0
 8009546:	6021      	streq	r1, [r4, #0]
 8009548:	e7ed      	b.n	8009526 <_free_r+0x1e>
 800954a:	461a      	mov	r2, r3
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	b10b      	cbz	r3, 8009554 <_free_r+0x4c>
 8009550:	42a3      	cmp	r3, r4
 8009552:	d9fa      	bls.n	800954a <_free_r+0x42>
 8009554:	6811      	ldr	r1, [r2, #0]
 8009556:	1850      	adds	r0, r2, r1
 8009558:	42a0      	cmp	r0, r4
 800955a:	d10b      	bne.n	8009574 <_free_r+0x6c>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	4401      	add	r1, r0
 8009560:	1850      	adds	r0, r2, r1
 8009562:	4283      	cmp	r3, r0
 8009564:	6011      	str	r1, [r2, #0]
 8009566:	d1e0      	bne.n	800952a <_free_r+0x22>
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	4401      	add	r1, r0
 800956e:	6011      	str	r1, [r2, #0]
 8009570:	6053      	str	r3, [r2, #4]
 8009572:	e7da      	b.n	800952a <_free_r+0x22>
 8009574:	d902      	bls.n	800957c <_free_r+0x74>
 8009576:	230c      	movs	r3, #12
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	e7d6      	b.n	800952a <_free_r+0x22>
 800957c:	6820      	ldr	r0, [r4, #0]
 800957e:	1821      	adds	r1, r4, r0
 8009580:	428b      	cmp	r3, r1
 8009582:	bf01      	itttt	eq
 8009584:	6819      	ldreq	r1, [r3, #0]
 8009586:	685b      	ldreq	r3, [r3, #4]
 8009588:	1809      	addeq	r1, r1, r0
 800958a:	6021      	streq	r1, [r4, #0]
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	6054      	str	r4, [r2, #4]
 8009590:	e7cb      	b.n	800952a <_free_r+0x22>
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20002338 	.word	0x20002338

08009598 <__ssputs_r>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	688e      	ldr	r6, [r1, #8]
 800959e:	4682      	mov	sl, r0
 80095a0:	429e      	cmp	r6, r3
 80095a2:	460c      	mov	r4, r1
 80095a4:	4690      	mov	r8, r2
 80095a6:	461f      	mov	r7, r3
 80095a8:	d838      	bhi.n	800961c <__ssputs_r+0x84>
 80095aa:	898a      	ldrh	r2, [r1, #12]
 80095ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095b0:	d032      	beq.n	8009618 <__ssputs_r+0x80>
 80095b2:	6825      	ldr	r5, [r4, #0]
 80095b4:	6909      	ldr	r1, [r1, #16]
 80095b6:	3301      	adds	r3, #1
 80095b8:	eba5 0901 	sub.w	r9, r5, r1
 80095bc:	6965      	ldr	r5, [r4, #20]
 80095be:	444b      	add	r3, r9
 80095c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095c8:	106d      	asrs	r5, r5, #1
 80095ca:	429d      	cmp	r5, r3
 80095cc:	bf38      	it	cc
 80095ce:	461d      	movcc	r5, r3
 80095d0:	0553      	lsls	r3, r2, #21
 80095d2:	d531      	bpl.n	8009638 <__ssputs_r+0xa0>
 80095d4:	4629      	mov	r1, r5
 80095d6:	f7fd fcf5 	bl	8006fc4 <_malloc_r>
 80095da:	4606      	mov	r6, r0
 80095dc:	b950      	cbnz	r0, 80095f4 <__ssputs_r+0x5c>
 80095de:	230c      	movs	r3, #12
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e4:	f8ca 3000 	str.w	r3, [sl]
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f4:	464a      	mov	r2, r9
 80095f6:	6921      	ldr	r1, [r4, #16]
 80095f8:	f7fd fcad 	bl	8006f56 <memcpy>
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	6126      	str	r6, [r4, #16]
 800960a:	444e      	add	r6, r9
 800960c:	6026      	str	r6, [r4, #0]
 800960e:	463e      	mov	r6, r7
 8009610:	6165      	str	r5, [r4, #20]
 8009612:	eba5 0509 	sub.w	r5, r5, r9
 8009616:	60a5      	str	r5, [r4, #8]
 8009618:	42be      	cmp	r6, r7
 800961a:	d900      	bls.n	800961e <__ssputs_r+0x86>
 800961c:	463e      	mov	r6, r7
 800961e:	4632      	mov	r2, r6
 8009620:	4641      	mov	r1, r8
 8009622:	6820      	ldr	r0, [r4, #0]
 8009624:	f000 fae2 	bl	8009bec <memmove>
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	2000      	movs	r0, #0
 800962c:	1b9b      	subs	r3, r3, r6
 800962e:	60a3      	str	r3, [r4, #8]
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	4433      	add	r3, r6
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	e7db      	b.n	80095f0 <__ssputs_r+0x58>
 8009638:	462a      	mov	r2, r5
 800963a:	f000 faf1 	bl	8009c20 <_realloc_r>
 800963e:	4606      	mov	r6, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	d1e1      	bne.n	8009608 <__ssputs_r+0x70>
 8009644:	4650      	mov	r0, sl
 8009646:	6921      	ldr	r1, [r4, #16]
 8009648:	f7ff ff5e 	bl	8009508 <_free_r>
 800964c:	e7c7      	b.n	80095de <__ssputs_r+0x46>
	...

08009650 <_svfiprintf_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	4698      	mov	r8, r3
 8009656:	898b      	ldrh	r3, [r1, #12]
 8009658:	4607      	mov	r7, r0
 800965a:	061b      	lsls	r3, r3, #24
 800965c:	460d      	mov	r5, r1
 800965e:	4614      	mov	r4, r2
 8009660:	b09d      	sub	sp, #116	; 0x74
 8009662:	d50e      	bpl.n	8009682 <_svfiprintf_r+0x32>
 8009664:	690b      	ldr	r3, [r1, #16]
 8009666:	b963      	cbnz	r3, 8009682 <_svfiprintf_r+0x32>
 8009668:	2140      	movs	r1, #64	; 0x40
 800966a:	f7fd fcab 	bl	8006fc4 <_malloc_r>
 800966e:	6028      	str	r0, [r5, #0]
 8009670:	6128      	str	r0, [r5, #16]
 8009672:	b920      	cbnz	r0, 800967e <_svfiprintf_r+0x2e>
 8009674:	230c      	movs	r3, #12
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800967c:	e0d1      	b.n	8009822 <_svfiprintf_r+0x1d2>
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	616b      	str	r3, [r5, #20]
 8009682:	2300      	movs	r3, #0
 8009684:	9309      	str	r3, [sp, #36]	; 0x24
 8009686:	2320      	movs	r3, #32
 8009688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800968c:	2330      	movs	r3, #48	; 0x30
 800968e:	f04f 0901 	mov.w	r9, #1
 8009692:	f8cd 800c 	str.w	r8, [sp, #12]
 8009696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800983c <_svfiprintf_r+0x1ec>
 800969a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800969e:	4623      	mov	r3, r4
 80096a0:	469a      	mov	sl, r3
 80096a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096a6:	b10a      	cbz	r2, 80096ac <_svfiprintf_r+0x5c>
 80096a8:	2a25      	cmp	r2, #37	; 0x25
 80096aa:	d1f9      	bne.n	80096a0 <_svfiprintf_r+0x50>
 80096ac:	ebba 0b04 	subs.w	fp, sl, r4
 80096b0:	d00b      	beq.n	80096ca <_svfiprintf_r+0x7a>
 80096b2:	465b      	mov	r3, fp
 80096b4:	4622      	mov	r2, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff ff6d 	bl	8009598 <__ssputs_r>
 80096be:	3001      	adds	r0, #1
 80096c0:	f000 80aa 	beq.w	8009818 <_svfiprintf_r+0x1c8>
 80096c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096c6:	445a      	add	r2, fp
 80096c8:	9209      	str	r2, [sp, #36]	; 0x24
 80096ca:	f89a 3000 	ldrb.w	r3, [sl]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 80a2 	beq.w	8009818 <_svfiprintf_r+0x1c8>
 80096d4:	2300      	movs	r3, #0
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096de:	f10a 0a01 	add.w	sl, sl, #1
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	9307      	str	r3, [sp, #28]
 80096e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ea:	931a      	str	r3, [sp, #104]	; 0x68
 80096ec:	4654      	mov	r4, sl
 80096ee:	2205      	movs	r2, #5
 80096f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f4:	4851      	ldr	r0, [pc, #324]	; (800983c <_svfiprintf_r+0x1ec>)
 80096f6:	f7ff fb57 	bl	8008da8 <memchr>
 80096fa:	9a04      	ldr	r2, [sp, #16]
 80096fc:	b9d8      	cbnz	r0, 8009736 <_svfiprintf_r+0xe6>
 80096fe:	06d0      	lsls	r0, r2, #27
 8009700:	bf44      	itt	mi
 8009702:	2320      	movmi	r3, #32
 8009704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009708:	0711      	lsls	r1, r2, #28
 800970a:	bf44      	itt	mi
 800970c:	232b      	movmi	r3, #43	; 0x2b
 800970e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009712:	f89a 3000 	ldrb.w	r3, [sl]
 8009716:	2b2a      	cmp	r3, #42	; 0x2a
 8009718:	d015      	beq.n	8009746 <_svfiprintf_r+0xf6>
 800971a:	4654      	mov	r4, sl
 800971c:	2000      	movs	r0, #0
 800971e:	f04f 0c0a 	mov.w	ip, #10
 8009722:	9a07      	ldr	r2, [sp, #28]
 8009724:	4621      	mov	r1, r4
 8009726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800972a:	3b30      	subs	r3, #48	; 0x30
 800972c:	2b09      	cmp	r3, #9
 800972e:	d94e      	bls.n	80097ce <_svfiprintf_r+0x17e>
 8009730:	b1b0      	cbz	r0, 8009760 <_svfiprintf_r+0x110>
 8009732:	9207      	str	r2, [sp, #28]
 8009734:	e014      	b.n	8009760 <_svfiprintf_r+0x110>
 8009736:	eba0 0308 	sub.w	r3, r0, r8
 800973a:	fa09 f303 	lsl.w	r3, r9, r3
 800973e:	4313      	orrs	r3, r2
 8009740:	46a2      	mov	sl, r4
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	e7d2      	b.n	80096ec <_svfiprintf_r+0x9c>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	1d19      	adds	r1, r3, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	9103      	str	r1, [sp, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfbb      	ittet	lt
 8009752:	425b      	neglt	r3, r3
 8009754:	f042 0202 	orrlt.w	r2, r2, #2
 8009758:	9307      	strge	r3, [sp, #28]
 800975a:	9307      	strlt	r3, [sp, #28]
 800975c:	bfb8      	it	lt
 800975e:	9204      	strlt	r2, [sp, #16]
 8009760:	7823      	ldrb	r3, [r4, #0]
 8009762:	2b2e      	cmp	r3, #46	; 0x2e
 8009764:	d10c      	bne.n	8009780 <_svfiprintf_r+0x130>
 8009766:	7863      	ldrb	r3, [r4, #1]
 8009768:	2b2a      	cmp	r3, #42	; 0x2a
 800976a:	d135      	bne.n	80097d8 <_svfiprintf_r+0x188>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	3402      	adds	r4, #2
 8009770:	1d1a      	adds	r2, r3, #4
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	9203      	str	r2, [sp, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfb8      	it	lt
 800977a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800977e:	9305      	str	r3, [sp, #20]
 8009780:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009840 <_svfiprintf_r+0x1f0>
 8009784:	2203      	movs	r2, #3
 8009786:	4650      	mov	r0, sl
 8009788:	7821      	ldrb	r1, [r4, #0]
 800978a:	f7ff fb0d 	bl	8008da8 <memchr>
 800978e:	b140      	cbz	r0, 80097a2 <_svfiprintf_r+0x152>
 8009790:	2340      	movs	r3, #64	; 0x40
 8009792:	eba0 000a 	sub.w	r0, r0, sl
 8009796:	fa03 f000 	lsl.w	r0, r3, r0
 800979a:	9b04      	ldr	r3, [sp, #16]
 800979c:	3401      	adds	r4, #1
 800979e:	4303      	orrs	r3, r0
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	2206      	movs	r2, #6
 80097a8:	4826      	ldr	r0, [pc, #152]	; (8009844 <_svfiprintf_r+0x1f4>)
 80097aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ae:	f7ff fafb 	bl	8008da8 <memchr>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d038      	beq.n	8009828 <_svfiprintf_r+0x1d8>
 80097b6:	4b24      	ldr	r3, [pc, #144]	; (8009848 <_svfiprintf_r+0x1f8>)
 80097b8:	bb1b      	cbnz	r3, 8009802 <_svfiprintf_r+0x1b2>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	3307      	adds	r3, #7
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	3308      	adds	r3, #8
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	4433      	add	r3, r6
 80097ca:	9309      	str	r3, [sp, #36]	; 0x24
 80097cc:	e767      	b.n	800969e <_svfiprintf_r+0x4e>
 80097ce:	460c      	mov	r4, r1
 80097d0:	2001      	movs	r0, #1
 80097d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d6:	e7a5      	b.n	8009724 <_svfiprintf_r+0xd4>
 80097d8:	2300      	movs	r3, #0
 80097da:	f04f 0c0a 	mov.w	ip, #10
 80097de:	4619      	mov	r1, r3
 80097e0:	3401      	adds	r4, #1
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	4620      	mov	r0, r4
 80097e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ea:	3a30      	subs	r2, #48	; 0x30
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d903      	bls.n	80097f8 <_svfiprintf_r+0x1a8>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0c5      	beq.n	8009780 <_svfiprintf_r+0x130>
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	e7c3      	b.n	8009780 <_svfiprintf_r+0x130>
 80097f8:	4604      	mov	r4, r0
 80097fa:	2301      	movs	r3, #1
 80097fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009800:	e7f0      	b.n	80097e4 <_svfiprintf_r+0x194>
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4638      	mov	r0, r7
 800980a:	4b10      	ldr	r3, [pc, #64]	; (800984c <_svfiprintf_r+0x1fc>)
 800980c:	a904      	add	r1, sp, #16
 800980e:	f7fd fceb 	bl	80071e8 <_printf_float>
 8009812:	1c42      	adds	r2, r0, #1
 8009814:	4606      	mov	r6, r0
 8009816:	d1d6      	bne.n	80097c6 <_svfiprintf_r+0x176>
 8009818:	89ab      	ldrh	r3, [r5, #12]
 800981a:	065b      	lsls	r3, r3, #25
 800981c:	f53f af2c 	bmi.w	8009678 <_svfiprintf_r+0x28>
 8009820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009822:	b01d      	add	sp, #116	; 0x74
 8009824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009828:	ab03      	add	r3, sp, #12
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	462a      	mov	r2, r5
 800982e:	4638      	mov	r0, r7
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <_svfiprintf_r+0x1fc>)
 8009832:	a904      	add	r1, sp, #16
 8009834:	f7fd ff74 	bl	8007720 <_printf_i>
 8009838:	e7eb      	b.n	8009812 <_svfiprintf_r+0x1c2>
 800983a:	bf00      	nop
 800983c:	0800a0fc 	.word	0x0800a0fc
 8009840:	0800a102 	.word	0x0800a102
 8009844:	0800a106 	.word	0x0800a106
 8009848:	080071e9 	.word	0x080071e9
 800984c:	08009599 	.word	0x08009599

08009850 <__sfputc_r>:
 8009850:	6893      	ldr	r3, [r2, #8]
 8009852:	b410      	push	{r4}
 8009854:	3b01      	subs	r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	6093      	str	r3, [r2, #8]
 800985a:	da07      	bge.n	800986c <__sfputc_r+0x1c>
 800985c:	6994      	ldr	r4, [r2, #24]
 800985e:	42a3      	cmp	r3, r4
 8009860:	db01      	blt.n	8009866 <__sfputc_r+0x16>
 8009862:	290a      	cmp	r1, #10
 8009864:	d102      	bne.n	800986c <__sfputc_r+0x1c>
 8009866:	bc10      	pop	{r4}
 8009868:	f7fe ba00 	b.w	8007c6c <__swbuf_r>
 800986c:	6813      	ldr	r3, [r2, #0]
 800986e:	1c58      	adds	r0, r3, #1
 8009870:	6010      	str	r0, [r2, #0]
 8009872:	7019      	strb	r1, [r3, #0]
 8009874:	4608      	mov	r0, r1
 8009876:	bc10      	pop	{r4}
 8009878:	4770      	bx	lr

0800987a <__sfputs_r>:
 800987a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	4614      	mov	r4, r2
 8009882:	18d5      	adds	r5, r2, r3
 8009884:	42ac      	cmp	r4, r5
 8009886:	d101      	bne.n	800988c <__sfputs_r+0x12>
 8009888:	2000      	movs	r0, #0
 800988a:	e007      	b.n	800989c <__sfputs_r+0x22>
 800988c:	463a      	mov	r2, r7
 800988e:	4630      	mov	r0, r6
 8009890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009894:	f7ff ffdc 	bl	8009850 <__sfputc_r>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d1f3      	bne.n	8009884 <__sfputs_r+0xa>
 800989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098a0 <_vfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	460d      	mov	r5, r1
 80098a6:	4614      	mov	r4, r2
 80098a8:	4698      	mov	r8, r3
 80098aa:	4606      	mov	r6, r0
 80098ac:	b09d      	sub	sp, #116	; 0x74
 80098ae:	b118      	cbz	r0, 80098b8 <_vfiprintf_r+0x18>
 80098b0:	6983      	ldr	r3, [r0, #24]
 80098b2:	b90b      	cbnz	r3, 80098b8 <_vfiprintf_r+0x18>
 80098b4:	f7fd fa8a 	bl	8006dcc <__sinit>
 80098b8:	4b89      	ldr	r3, [pc, #548]	; (8009ae0 <_vfiprintf_r+0x240>)
 80098ba:	429d      	cmp	r5, r3
 80098bc:	d11b      	bne.n	80098f6 <_vfiprintf_r+0x56>
 80098be:	6875      	ldr	r5, [r6, #4]
 80098c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c2:	07d9      	lsls	r1, r3, #31
 80098c4:	d405      	bmi.n	80098d2 <_vfiprintf_r+0x32>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	059a      	lsls	r2, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_vfiprintf_r+0x32>
 80098cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ce:	f7fd fb40 	bl	8006f52 <__retarget_lock_acquire_recursive>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	071b      	lsls	r3, r3, #28
 80098d6:	d501      	bpl.n	80098dc <_vfiprintf_r+0x3c>
 80098d8:	692b      	ldr	r3, [r5, #16]
 80098da:	b9eb      	cbnz	r3, 8009918 <_vfiprintf_r+0x78>
 80098dc:	4629      	mov	r1, r5
 80098de:	4630      	mov	r0, r6
 80098e0:	f7fe fa28 	bl	8007d34 <__swsetup_r>
 80098e4:	b1c0      	cbz	r0, 8009918 <_vfiprintf_r+0x78>
 80098e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e8:	07dc      	lsls	r4, r3, #31
 80098ea:	d50e      	bpl.n	800990a <_vfiprintf_r+0x6a>
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f0:	b01d      	add	sp, #116	; 0x74
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	4b7b      	ldr	r3, [pc, #492]	; (8009ae4 <_vfiprintf_r+0x244>)
 80098f8:	429d      	cmp	r5, r3
 80098fa:	d101      	bne.n	8009900 <_vfiprintf_r+0x60>
 80098fc:	68b5      	ldr	r5, [r6, #8]
 80098fe:	e7df      	b.n	80098c0 <_vfiprintf_r+0x20>
 8009900:	4b79      	ldr	r3, [pc, #484]	; (8009ae8 <_vfiprintf_r+0x248>)
 8009902:	429d      	cmp	r5, r3
 8009904:	bf08      	it	eq
 8009906:	68f5      	ldreq	r5, [r6, #12]
 8009908:	e7da      	b.n	80098c0 <_vfiprintf_r+0x20>
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	0598      	lsls	r0, r3, #22
 800990e:	d4ed      	bmi.n	80098ec <_vfiprintf_r+0x4c>
 8009910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009912:	f7fd fb1f 	bl	8006f54 <__retarget_lock_release_recursive>
 8009916:	e7e9      	b.n	80098ec <_vfiprintf_r+0x4c>
 8009918:	2300      	movs	r3, #0
 800991a:	9309      	str	r3, [sp, #36]	; 0x24
 800991c:	2320      	movs	r3, #32
 800991e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009922:	2330      	movs	r3, #48	; 0x30
 8009924:	f04f 0901 	mov.w	r9, #1
 8009928:	f8cd 800c 	str.w	r8, [sp, #12]
 800992c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009aec <_vfiprintf_r+0x24c>
 8009930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009934:	4623      	mov	r3, r4
 8009936:	469a      	mov	sl, r3
 8009938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800993c:	b10a      	cbz	r2, 8009942 <_vfiprintf_r+0xa2>
 800993e:	2a25      	cmp	r2, #37	; 0x25
 8009940:	d1f9      	bne.n	8009936 <_vfiprintf_r+0x96>
 8009942:	ebba 0b04 	subs.w	fp, sl, r4
 8009946:	d00b      	beq.n	8009960 <_vfiprintf_r+0xc0>
 8009948:	465b      	mov	r3, fp
 800994a:	4622      	mov	r2, r4
 800994c:	4629      	mov	r1, r5
 800994e:	4630      	mov	r0, r6
 8009950:	f7ff ff93 	bl	800987a <__sfputs_r>
 8009954:	3001      	adds	r0, #1
 8009956:	f000 80aa 	beq.w	8009aae <_vfiprintf_r+0x20e>
 800995a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800995c:	445a      	add	r2, fp
 800995e:	9209      	str	r2, [sp, #36]	; 0x24
 8009960:	f89a 3000 	ldrb.w	r3, [sl]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 80a2 	beq.w	8009aae <_vfiprintf_r+0x20e>
 800996a:	2300      	movs	r3, #0
 800996c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009974:	f10a 0a01 	add.w	sl, sl, #1
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	9307      	str	r3, [sp, #28]
 800997c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009980:	931a      	str	r3, [sp, #104]	; 0x68
 8009982:	4654      	mov	r4, sl
 8009984:	2205      	movs	r2, #5
 8009986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998a:	4858      	ldr	r0, [pc, #352]	; (8009aec <_vfiprintf_r+0x24c>)
 800998c:	f7ff fa0c 	bl	8008da8 <memchr>
 8009990:	9a04      	ldr	r2, [sp, #16]
 8009992:	b9d8      	cbnz	r0, 80099cc <_vfiprintf_r+0x12c>
 8009994:	06d1      	lsls	r1, r2, #27
 8009996:	bf44      	itt	mi
 8009998:	2320      	movmi	r3, #32
 800999a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999e:	0713      	lsls	r3, r2, #28
 80099a0:	bf44      	itt	mi
 80099a2:	232b      	movmi	r3, #43	; 0x2b
 80099a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ac:	2b2a      	cmp	r3, #42	; 0x2a
 80099ae:	d015      	beq.n	80099dc <_vfiprintf_r+0x13c>
 80099b0:	4654      	mov	r4, sl
 80099b2:	2000      	movs	r0, #0
 80099b4:	f04f 0c0a 	mov.w	ip, #10
 80099b8:	9a07      	ldr	r2, [sp, #28]
 80099ba:	4621      	mov	r1, r4
 80099bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c0:	3b30      	subs	r3, #48	; 0x30
 80099c2:	2b09      	cmp	r3, #9
 80099c4:	d94e      	bls.n	8009a64 <_vfiprintf_r+0x1c4>
 80099c6:	b1b0      	cbz	r0, 80099f6 <_vfiprintf_r+0x156>
 80099c8:	9207      	str	r2, [sp, #28]
 80099ca:	e014      	b.n	80099f6 <_vfiprintf_r+0x156>
 80099cc:	eba0 0308 	sub.w	r3, r0, r8
 80099d0:	fa09 f303 	lsl.w	r3, r9, r3
 80099d4:	4313      	orrs	r3, r2
 80099d6:	46a2      	mov	sl, r4
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	e7d2      	b.n	8009982 <_vfiprintf_r+0xe2>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	1d19      	adds	r1, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	9103      	str	r1, [sp, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	bfbb      	ittet	lt
 80099e8:	425b      	neglt	r3, r3
 80099ea:	f042 0202 	orrlt.w	r2, r2, #2
 80099ee:	9307      	strge	r3, [sp, #28]
 80099f0:	9307      	strlt	r3, [sp, #28]
 80099f2:	bfb8      	it	lt
 80099f4:	9204      	strlt	r2, [sp, #16]
 80099f6:	7823      	ldrb	r3, [r4, #0]
 80099f8:	2b2e      	cmp	r3, #46	; 0x2e
 80099fa:	d10c      	bne.n	8009a16 <_vfiprintf_r+0x176>
 80099fc:	7863      	ldrb	r3, [r4, #1]
 80099fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009a00:	d135      	bne.n	8009a6e <_vfiprintf_r+0x1ce>
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	3402      	adds	r4, #2
 8009a06:	1d1a      	adds	r2, r3, #4
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	9203      	str	r2, [sp, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfb8      	it	lt
 8009a10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a14:	9305      	str	r3, [sp, #20]
 8009a16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009af0 <_vfiprintf_r+0x250>
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	4650      	mov	r0, sl
 8009a1e:	7821      	ldrb	r1, [r4, #0]
 8009a20:	f7ff f9c2 	bl	8008da8 <memchr>
 8009a24:	b140      	cbz	r0, 8009a38 <_vfiprintf_r+0x198>
 8009a26:	2340      	movs	r3, #64	; 0x40
 8009a28:	eba0 000a 	sub.w	r0, r0, sl
 8009a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	3401      	adds	r4, #1
 8009a34:	4303      	orrs	r3, r0
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3c:	2206      	movs	r2, #6
 8009a3e:	482d      	ldr	r0, [pc, #180]	; (8009af4 <_vfiprintf_r+0x254>)
 8009a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a44:	f7ff f9b0 	bl	8008da8 <memchr>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d03f      	beq.n	8009acc <_vfiprintf_r+0x22c>
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <_vfiprintf_r+0x258>)
 8009a4e:	bb1b      	cbnz	r3, 8009a98 <_vfiprintf_r+0x1f8>
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	3307      	adds	r3, #7
 8009a54:	f023 0307 	bic.w	r3, r3, #7
 8009a58:	3308      	adds	r3, #8
 8009a5a:	9303      	str	r3, [sp, #12]
 8009a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5e:	443b      	add	r3, r7
 8009a60:	9309      	str	r3, [sp, #36]	; 0x24
 8009a62:	e767      	b.n	8009934 <_vfiprintf_r+0x94>
 8009a64:	460c      	mov	r4, r1
 8009a66:	2001      	movs	r0, #1
 8009a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a6c:	e7a5      	b.n	80099ba <_vfiprintf_r+0x11a>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f04f 0c0a 	mov.w	ip, #10
 8009a74:	4619      	mov	r1, r3
 8009a76:	3401      	adds	r4, #1
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a80:	3a30      	subs	r2, #48	; 0x30
 8009a82:	2a09      	cmp	r2, #9
 8009a84:	d903      	bls.n	8009a8e <_vfiprintf_r+0x1ee>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0c5      	beq.n	8009a16 <_vfiprintf_r+0x176>
 8009a8a:	9105      	str	r1, [sp, #20]
 8009a8c:	e7c3      	b.n	8009a16 <_vfiprintf_r+0x176>
 8009a8e:	4604      	mov	r4, r0
 8009a90:	2301      	movs	r3, #1
 8009a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a96:	e7f0      	b.n	8009a7a <_vfiprintf_r+0x1da>
 8009a98:	ab03      	add	r3, sp, #12
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	462a      	mov	r2, r5
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	4b16      	ldr	r3, [pc, #88]	; (8009afc <_vfiprintf_r+0x25c>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	f7fd fba0 	bl	80071e8 <_printf_float>
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	1c78      	adds	r0, r7, #1
 8009aac:	d1d6      	bne.n	8009a5c <_vfiprintf_r+0x1bc>
 8009aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ab0:	07d9      	lsls	r1, r3, #31
 8009ab2:	d405      	bmi.n	8009ac0 <_vfiprintf_r+0x220>
 8009ab4:	89ab      	ldrh	r3, [r5, #12]
 8009ab6:	059a      	lsls	r2, r3, #22
 8009ab8:	d402      	bmi.n	8009ac0 <_vfiprintf_r+0x220>
 8009aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009abc:	f7fd fa4a 	bl	8006f54 <__retarget_lock_release_recursive>
 8009ac0:	89ab      	ldrh	r3, [r5, #12]
 8009ac2:	065b      	lsls	r3, r3, #25
 8009ac4:	f53f af12 	bmi.w	80098ec <_vfiprintf_r+0x4c>
 8009ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aca:	e711      	b.n	80098f0 <_vfiprintf_r+0x50>
 8009acc:	ab03      	add	r3, sp, #12
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <_vfiprintf_r+0x25c>)
 8009ad6:	a904      	add	r1, sp, #16
 8009ad8:	f7fd fe22 	bl	8007720 <_printf_i>
 8009adc:	e7e4      	b.n	8009aa8 <_vfiprintf_r+0x208>
 8009ade:	bf00      	nop
 8009ae0:	08009e98 	.word	0x08009e98
 8009ae4:	08009eb8 	.word	0x08009eb8
 8009ae8:	08009e78 	.word	0x08009e78
 8009aec:	0800a0fc 	.word	0x0800a0fc
 8009af0:	0800a102 	.word	0x0800a102
 8009af4:	0800a106 	.word	0x0800a106
 8009af8:	080071e9 	.word	0x080071e9
 8009afc:	0800987b 	.word	0x0800987b

08009b00 <_read_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	4611      	mov	r1, r2
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4d05      	ldr	r5, [pc, #20]	; (8009b20 <_read_r+0x20>)
 8009b0c:	602a      	str	r2, [r5, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f7f8 f8d3 	bl	8001cba <_read>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_read_r+0x1e>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_read_r+0x1e>
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	20002340 	.word	0x20002340

08009b24 <__assert_func>:
 8009b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b26:	4614      	mov	r4, r2
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <__assert_func+0x2c>)
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68d8      	ldr	r0, [r3, #12]
 8009b32:	b14c      	cbz	r4, 8009b48 <__assert_func+0x24>
 8009b34:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <__assert_func+0x30>)
 8009b36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b3a:	9100      	str	r1, [sp, #0]
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	4906      	ldr	r1, [pc, #24]	; (8009b58 <__assert_func+0x34>)
 8009b40:	f000 f80e 	bl	8009b60 <fiprintf>
 8009b44:	f000 f8a8 	bl	8009c98 <abort>
 8009b48:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <__assert_func+0x38>)
 8009b4a:	461c      	mov	r4, r3
 8009b4c:	e7f3      	b.n	8009b36 <__assert_func+0x12>
 8009b4e:	bf00      	nop
 8009b50:	20000014 	.word	0x20000014
 8009b54:	0800a10d 	.word	0x0800a10d
 8009b58:	0800a11a 	.word	0x0800a11a
 8009b5c:	0800a148 	.word	0x0800a148

08009b60 <fiprintf>:
 8009b60:	b40e      	push	{r1, r2, r3}
 8009b62:	b503      	push	{r0, r1, lr}
 8009b64:	4601      	mov	r1, r0
 8009b66:	ab03      	add	r3, sp, #12
 8009b68:	4805      	ldr	r0, [pc, #20]	; (8009b80 <fiprintf+0x20>)
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	f7ff fe95 	bl	80098a0 <_vfiprintf_r>
 8009b76:	b002      	add	sp, #8
 8009b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b7c:	b003      	add	sp, #12
 8009b7e:	4770      	bx	lr
 8009b80:	20000014 	.word	0x20000014

08009b84 <_fstat_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	2300      	movs	r3, #0
 8009b88:	4d06      	ldr	r5, [pc, #24]	; (8009ba4 <_fstat_r+0x20>)
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	4611      	mov	r1, r2
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	f7f8 f8ba 	bl	8001d0a <_fstat>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	d102      	bne.n	8009ba0 <_fstat_r+0x1c>
 8009b9a:	682b      	ldr	r3, [r5, #0]
 8009b9c:	b103      	cbz	r3, 8009ba0 <_fstat_r+0x1c>
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	bd38      	pop	{r3, r4, r5, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20002340 	.word	0x20002340

08009ba8 <_isatty_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	2300      	movs	r3, #0
 8009bac:	4d05      	ldr	r5, [pc, #20]	; (8009bc4 <_isatty_r+0x1c>)
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	602b      	str	r3, [r5, #0]
 8009bb4:	f7f8 f8b8 	bl	8001d28 <_isatty>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_isatty_r+0x1a>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_isatty_r+0x1a>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20002340 	.word	0x20002340

08009bc8 <__ascii_mbtowc>:
 8009bc8:	b082      	sub	sp, #8
 8009bca:	b901      	cbnz	r1, 8009bce <__ascii_mbtowc+0x6>
 8009bcc:	a901      	add	r1, sp, #4
 8009bce:	b142      	cbz	r2, 8009be2 <__ascii_mbtowc+0x1a>
 8009bd0:	b14b      	cbz	r3, 8009be6 <__ascii_mbtowc+0x1e>
 8009bd2:	7813      	ldrb	r3, [r2, #0]
 8009bd4:	600b      	str	r3, [r1, #0]
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	1e10      	subs	r0, r2, #0
 8009bda:	bf18      	it	ne
 8009bdc:	2001      	movne	r0, #1
 8009bde:	b002      	add	sp, #8
 8009be0:	4770      	bx	lr
 8009be2:	4610      	mov	r0, r2
 8009be4:	e7fb      	b.n	8009bde <__ascii_mbtowc+0x16>
 8009be6:	f06f 0001 	mvn.w	r0, #1
 8009bea:	e7f8      	b.n	8009bde <__ascii_mbtowc+0x16>

08009bec <memmove>:
 8009bec:	4288      	cmp	r0, r1
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	eb01 0402 	add.w	r4, r1, r2
 8009bf4:	d902      	bls.n	8009bfc <memmove+0x10>
 8009bf6:	4284      	cmp	r4, r0
 8009bf8:	4623      	mov	r3, r4
 8009bfa:	d807      	bhi.n	8009c0c <memmove+0x20>
 8009bfc:	1e43      	subs	r3, r0, #1
 8009bfe:	42a1      	cmp	r1, r4
 8009c00:	d008      	beq.n	8009c14 <memmove+0x28>
 8009c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c0a:	e7f8      	b.n	8009bfe <memmove+0x12>
 8009c0c:	4601      	mov	r1, r0
 8009c0e:	4402      	add	r2, r0
 8009c10:	428a      	cmp	r2, r1
 8009c12:	d100      	bne.n	8009c16 <memmove+0x2a>
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c1e:	e7f7      	b.n	8009c10 <memmove+0x24>

08009c20 <_realloc_r>:
 8009c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c24:	4680      	mov	r8, r0
 8009c26:	4614      	mov	r4, r2
 8009c28:	460e      	mov	r6, r1
 8009c2a:	b921      	cbnz	r1, 8009c36 <_realloc_r+0x16>
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c32:	f7fd b9c7 	b.w	8006fc4 <_malloc_r>
 8009c36:	b92a      	cbnz	r2, 8009c44 <_realloc_r+0x24>
 8009c38:	f7ff fc66 	bl	8009508 <_free_r>
 8009c3c:	4625      	mov	r5, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c44:	f000 f82f 	bl	8009ca6 <_malloc_usable_size_r>
 8009c48:	4284      	cmp	r4, r0
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	d802      	bhi.n	8009c54 <_realloc_r+0x34>
 8009c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c52:	d812      	bhi.n	8009c7a <_realloc_r+0x5a>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4640      	mov	r0, r8
 8009c58:	f7fd f9b4 	bl	8006fc4 <_malloc_r>
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d0ed      	beq.n	8009c3e <_realloc_r+0x1e>
 8009c62:	42bc      	cmp	r4, r7
 8009c64:	4622      	mov	r2, r4
 8009c66:	4631      	mov	r1, r6
 8009c68:	bf28      	it	cs
 8009c6a:	463a      	movcs	r2, r7
 8009c6c:	f7fd f973 	bl	8006f56 <memcpy>
 8009c70:	4631      	mov	r1, r6
 8009c72:	4640      	mov	r0, r8
 8009c74:	f7ff fc48 	bl	8009508 <_free_r>
 8009c78:	e7e1      	b.n	8009c3e <_realloc_r+0x1e>
 8009c7a:	4635      	mov	r5, r6
 8009c7c:	e7df      	b.n	8009c3e <_realloc_r+0x1e>

08009c7e <__ascii_wctomb>:
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	b141      	cbz	r1, 8009c96 <__ascii_wctomb+0x18>
 8009c84:	2aff      	cmp	r2, #255	; 0xff
 8009c86:	d904      	bls.n	8009c92 <__ascii_wctomb+0x14>
 8009c88:	228a      	movs	r2, #138	; 0x8a
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	4770      	bx	lr
 8009c92:	2001      	movs	r0, #1
 8009c94:	700a      	strb	r2, [r1, #0]
 8009c96:	4770      	bx	lr

08009c98 <abort>:
 8009c98:	2006      	movs	r0, #6
 8009c9a:	b508      	push	{r3, lr}
 8009c9c:	f000 f834 	bl	8009d08 <raise>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f7f8 f800 	bl	8001ca6 <_exit>

08009ca6 <_malloc_usable_size_r>:
 8009ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009caa:	1f18      	subs	r0, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfbc      	itt	lt
 8009cb0:	580b      	ldrlt	r3, [r1, r0]
 8009cb2:	18c0      	addlt	r0, r0, r3
 8009cb4:	4770      	bx	lr

08009cb6 <_raise_r>:
 8009cb6:	291f      	cmp	r1, #31
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	d904      	bls.n	8009cca <_raise_r+0x14>
 8009cc0:	2316      	movs	r3, #22
 8009cc2:	6003      	str	r3, [r0, #0]
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc8:	bd38      	pop	{r3, r4, r5, pc}
 8009cca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ccc:	b112      	cbz	r2, 8009cd4 <_raise_r+0x1e>
 8009cce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cd2:	b94b      	cbnz	r3, 8009ce8 <_raise_r+0x32>
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 f831 	bl	8009d3c <_getpid_r>
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4601      	mov	r1, r0
 8009cde:	4620      	mov	r0, r4
 8009ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce4:	f000 b818 	b.w	8009d18 <_kill_r>
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d00a      	beq.n	8009d02 <_raise_r+0x4c>
 8009cec:	1c59      	adds	r1, r3, #1
 8009cee:	d103      	bne.n	8009cf8 <_raise_r+0x42>
 8009cf0:	2316      	movs	r3, #22
 8009cf2:	6003      	str	r3, [r0, #0]
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	e7e7      	b.n	8009cc8 <_raise_r+0x12>
 8009cf8:	2400      	movs	r4, #0
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d00:	4798      	blx	r3
 8009d02:	2000      	movs	r0, #0
 8009d04:	e7e0      	b.n	8009cc8 <_raise_r+0x12>
	...

08009d08 <raise>:
 8009d08:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <raise+0xc>)
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f7ff bfd2 	b.w	8009cb6 <_raise_r>
 8009d12:	bf00      	nop
 8009d14:	20000014 	.word	0x20000014

08009d18 <_kill_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4d06      	ldr	r5, [pc, #24]	; (8009d38 <_kill_r+0x20>)
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	4611      	mov	r1, r2
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	f7f7 ffae 	bl	8001c86 <_kill>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d102      	bne.n	8009d34 <_kill_r+0x1c>
 8009d2e:	682b      	ldr	r3, [r5, #0]
 8009d30:	b103      	cbz	r3, 8009d34 <_kill_r+0x1c>
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
 8009d36:	bf00      	nop
 8009d38:	20002340 	.word	0x20002340

08009d3c <_getpid_r>:
 8009d3c:	f7f7 bf9c 	b.w	8001c78 <_getpid>

08009d40 <_init>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr

08009d4c <_fini>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr
