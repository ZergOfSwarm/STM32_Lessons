
Domofon_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e64  08003e64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e64  08003e64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e64  08003e64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08003edc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003edc  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e945  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024eb  00000000  00000000  0002e9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00030ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00031cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019512  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebf4  00000000  00000000  0004bf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d8d  00000000  00000000  0005aafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb88b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  000eb8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d2c 	.word	0x08003d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003d2c 	.word	0x08003d2c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2332      	movs	r3, #50	; 0x32
 80001aa:	68b9      	ldr	r1, [r7, #8]
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <_write+0x48>)
 80001ae:	f002 fc4a 	bl	8002a46 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	617b      	str	r3, [r7, #20]
 80001b6:	e009      	b.n	80001cc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	60ba      	str	r2, [r7, #8]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf1      	blt.n	80001b8 <_write+0x20>
	}
	return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000120 	.word	0x20000120

080001e4 <BTN_result.7510>:
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, VR, 4); // Стартуем АЦП a 4 -это количество каналов.
	printf("Hello world! \r\n");

	uint8_t BTN_result(uint8_t x) // в функцию передаю
	{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
 80001ee:	f8c7 c000 	str.w	ip, [r7]
		if (VR[0] > 150 || VR[1] > 150 || VR[2] > 150 || VR[3] > 150) {
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <BTN_result.7510+0x50>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b96      	cmp	r3, #150	; 0x96
 80001f8:	d80b      	bhi.n	8000212 <BTN_result.7510+0x2e>
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <BTN_result.7510+0x50>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	2b96      	cmp	r3, #150	; 0x96
 8000200:	d807      	bhi.n	8000212 <BTN_result.7510+0x2e>
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <BTN_result.7510+0x50>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	2b96      	cmp	r3, #150	; 0x96
 8000208:	d803      	bhi.n	8000212 <BTN_result.7510+0x2e>
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <BTN_result.7510+0x50>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	2b96      	cmp	r3, #150	; 0x96
 8000210:	d905      	bls.n	800021e <BTN_result.7510+0x3a>
			BTN_state = 1;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <BTN_result.7510+0x54>)
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
			x = 1;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e004      	b.n	8000228 <BTN_result.7510+0x44>
		} else {
			BTN_state = 0;
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <BTN_result.7510+0x54>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
			x = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	71fb      	strb	r3, [r7, #7]
		}
		return x; // возвращаем значение x
 8000228:	79fb      	ldrb	r3, [r7, #7]
	}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	2000009c 	.word	0x2000009c
 8000238:	2000008c 	.word	0x2000008c

0800023c <main>:
int main(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	603b      	str	r3, [r7, #0]
	HAL_Init();
 8000248:	f000 fc16 	bl	8000a78 <HAL_Init>
	SystemClock_Config();
 800024c:	f000 f8a4 	bl	8000398 <SystemClock_Config>
	MX_GPIO_Init();
 8000250:	f000 f9b0 	bl	80005b4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000254:	f000 f990 	bl	8000578 <MX_DMA_Init>
	MX_ADC1_Init();
 8000258:	f000 f8fa 	bl	8000450 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800025c:	f000 f962 	bl	8000524 <MX_USART2_UART_Init>
	HAL_ADC_Start_DMA(&hadc1, VR, 4); // Стартуем АЦП a 4 -это количество каналов.
 8000260:	2204      	movs	r2, #4
 8000262:	4944      	ldr	r1, [pc, #272]	; (8000374 <main+0x138>)
 8000264:	4844      	ldr	r0, [pc, #272]	; (8000378 <main+0x13c>)
 8000266:	f000 fd11 	bl	8000c8c <HAL_ADC_Start_DMA>
	printf("Hello world! \r\n");
 800026a:	4844      	ldr	r0, [pc, #272]	; (800037c <main+0x140>)
 800026c:	f002 fe0e 	bl	8002e8c <puts>
//	uint32_t millis = 0;
//	uint32_t btn_cur = 0;
//	uint32_t time_BTN = 0;
	uint32_t pause = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	61fb      	str	r3, [r7, #28]
	uint32_t clicks = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	61bb      	str	r3, [r7, #24]
	uint32_t flag = 1;
 8000278:	2301      	movs	r3, #1
 800027a:	617b      	str	r3, [r7, #20]

	uint8_t short_state = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	74fb      	strb	r3, [r7, #19]
	uint8_t long_state = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	74bb      	strb	r3, [r7, #18]
	uint32_t time_key1 = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		BTN_result(VR[0]);
 8000288:	4b3a      	ldr	r3, [pc, #232]	; (8000374 <main+0x138>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	463a      	mov	r2, r7
 8000290:	4694      	mov	ip, r2
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffa6 	bl	80001e4 <BTN_result.7510>
		uint32_t millis = HAL_GetTick();
 8000298:	f000 fc16 	bl	8000ac8 <HAL_GetTick>
 800029c:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = BTN_state;
 800029e:	4b38      	ldr	r3, [pc, #224]	; (8000380 <main+0x144>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 1 && !short_state && (millis - time_key1) > 150) {
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d10e      	bne.n	80002c8 <main+0x8c>
 80002aa:	7cfb      	ldrb	r3, [r7, #19]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d10b      	bne.n	80002c8 <main+0x8c>
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	2b96      	cmp	r3, #150	; 0x96
 80002b8:	d906      	bls.n	80002c8 <main+0x8c>
			short_state = 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	74fb      	strb	r3, [r7, #19]
			long_state = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	74bb      	strb	r3, [r7, #18]
			time_key1 = millis;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	e037      	b.n	8000338 <main+0xfc>
		} else if (key1_state == 1 && !long_state && (millis - time_key1) > 500) //1000
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d10e      	bne.n	80002ec <main+0xb0>
 80002ce:	7cbb      	ldrb	r3, [r7, #18]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d10b      	bne.n	80002ec <main+0xb0>
 80002d4:	68ba      	ldr	r2, [r7, #8]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002de:	d905      	bls.n	80002ec <main+0xb0>
				{
			long_state = 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	74bb      	strb	r3, [r7, #18]
			// действие на длинное нажатие
			printf(" clicks  LONG \r\n");
 80002e4:	4827      	ldr	r0, [pc, #156]	; (8000384 <main+0x148>)
 80002e6:	f002 fdd1 	bl	8002e8c <puts>
 80002ea:	e025      	b.n	8000338 <main+0xfc>
		} else if (key1_state == 0 && short_state
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d122      	bne.n	8000338 <main+0xfc>
 80002f2:	7cfb      	ldrb	r3, [r7, #19]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d01f      	beq.n	8000338 <main+0xfc>
				&& (millis - time_key1) > 150) {
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	1ad3      	subs	r3, r2, r3
 80002fe:	2b96      	cmp	r3, #150	; 0x96
 8000300:	d91a      	bls.n	8000338 <main+0xfc>
			short_state = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	74fb      	strb	r3, [r7, #19]
			time_key1 = millis;
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	60fb      	str	r3, [r7, #12]

			if (!long_state) {
 800030a:	7cbb      	ldrb	r3, [r7, #18]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d113      	bne.n	8000338 <main+0xfc>
				// действие на короткое нажатие
				if (flag == 1) {
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d101      	bne.n	800031a <main+0xde>
					pause = millis;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	61fb      	str	r3, [r7, #28]
				}
				if ((millis - pause) <= 500) { //700
 800031a:	68ba      	ldr	r2, [r7, #8]
 800031c:	69fb      	ldr	r3, [r7, #28]
 800031e:	1ad3      	subs	r3, r2, r3
 8000320:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000324:	d808      	bhi.n	8000338 <main+0xfc>
					clicks++;
 8000326:	69bb      	ldr	r3, [r7, #24]
 8000328:	3301      	adds	r3, #1
 800032a:	61bb      	str	r3, [r7, #24]
					flag = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
					printf("pause start clicks = %ld \r\n", clicks);
 8000330:	69b9      	ldr	r1, [r7, #24]
 8000332:	4815      	ldr	r0, [pc, #84]	; (8000388 <main+0x14c>)
 8000334:	f002 fd24 	bl	8002d80 <iprintf>
				}
			}
		}

		if ((millis - pause) > 501) { //1000
 8000338:	68ba      	ldr	r2, [r7, #8]
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8000342:	d3a1      	bcc.n	8000288 <main+0x4c>

			// действие на 1 короткое нажатие
			if (clicks == 1) {
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d102      	bne.n	8000350 <main+0x114>
				printf(" clicks 1 \r\n");
 800034a:	4810      	ldr	r0, [pc, #64]	; (800038c <main+0x150>)
 800034c:	f002 fd9e 	bl	8002e8c <puts>
			}
			// действие на 2 коротких нажатие
			if (clicks == 2) {
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	2b02      	cmp	r3, #2
 8000354:	d102      	bne.n	800035c <main+0x120>
				printf(" clicks 2 \r\n");
 8000356:	480e      	ldr	r0, [pc, #56]	; (8000390 <main+0x154>)
 8000358:	f002 fd98 	bl	8002e8c <puts>
			}
			// действие на 3 коротких нажатие
			if (clicks == 3) {
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	2b03      	cmp	r3, #3
 8000360:	d102      	bne.n	8000368 <main+0x12c>
				printf(" clicks 3 \r\n");
 8000362:	480c      	ldr	r0, [pc, #48]	; (8000394 <main+0x158>)
 8000364:	f002 fd92 	bl	8002e8c <puts>
			}

			clicks = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
			flag = 1;
 800036c:	2301      	movs	r3, #1
 800036e:	617b      	str	r3, [r7, #20]
	while (1) {
 8000370:	e78a      	b.n	8000288 <main+0x4c>
 8000372:	bf00      	nop
 8000374:	2000009c 	.word	0x2000009c
 8000378:	200000ac 	.word	0x200000ac
 800037c:	08003d44 	.word	0x08003d44
 8000380:	2000008c 	.word	0x2000008c
 8000384:	08003d54 	.word	0x08003d54
 8000388:	08003d64 	.word	0x08003d64
 800038c:	08003d80 	.word	0x08003d80
 8000390:	08003d8c 	.word	0x08003d8c
 8000394:	08003d98 	.word	0x08003d98

08000398 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b094      	sub	sp, #80	; 0x50
 800039c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800039e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a2:	2228      	movs	r2, #40	; 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fce2 	bl	8002d70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003ac:	f107 0314 	add.w	r3, r7, #20
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c8:	2301      	movs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d6:	2301      	movs	r3, #1
 80003d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80003e4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80003e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fb92 	bl	8001b18 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x66>
		Error_Handler();
 80003fa:	f000 f90f 	bl	800061c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2302      	movs	r3, #2
 8000404:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fdfc 	bl	8002018 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x92>
		Error_Handler();
 8000426:	f000 f8f9 	bl	800061c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800042a:	2302      	movs	r3, #2
 800042c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800042e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000432:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4618      	mov	r0, r3
 8000438:	f001 ffb8 	bl	80023ac <HAL_RCCEx_PeriphCLKConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0xae>
		Error_Handler();
 8000442:	f000 f8eb 	bl	800061c <Error_Handler>
	}
}
 8000446:	bf00      	nop
 8000448:	3750      	adds	r7, #80	; 0x50
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000460:	4b2e      	ldr	r3, [pc, #184]	; (800051c <MX_ADC1_Init+0xcc>)
 8000462:	4a2f      	ldr	r2, [pc, #188]	; (8000520 <MX_ADC1_Init+0xd0>)
 8000464:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000466:	4b2d      	ldr	r3, [pc, #180]	; (800051c <MX_ADC1_Init+0xcc>)
 8000468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800046c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_ADC1_Init+0xcc>)
 8000470:	2201      	movs	r2, #1
 8000472:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_ADC1_Init+0xcc>)
 800047c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000480:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_ADC1_Init+0xcc>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <MX_ADC1_Init+0xcc>)
 800048a:	2204      	movs	r2, #4
 800048c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800048e:	4823      	ldr	r0, [pc, #140]	; (800051c <MX_ADC1_Init+0xcc>)
 8000490:	f000 fb24 	bl	8000adc <HAL_ADC_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ADC1_Init+0x4e>
		Error_Handler();
 800049a:	f000 f8bf 	bl	800061c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800049e:	2304      	movs	r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80004a6:	2307      	movs	r3, #7
 80004a8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	481b      	ldr	r0, [pc, #108]	; (800051c <MX_ADC1_Init+0xcc>)
 80004b0:	f000 fce6 	bl	8000e80 <HAL_ADC_ConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0x6e>
		Error_Handler();
 80004ba:	f000 f8af 	bl	800061c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80004be:	2305      	movs	r3, #5
 80004c0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4814      	ldr	r0, [pc, #80]	; (800051c <MX_ADC1_Init+0xcc>)
 80004cc:	f000 fcd8 	bl	8000e80 <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0x8a>
		Error_Handler();
 80004d6:	f000 f8a1 	bl	800061c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80004da:	2306      	movs	r3, #6
 80004dc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80004de:	2303      	movs	r3, #3
 80004e0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4619      	mov	r1, r3
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <MX_ADC1_Init+0xcc>)
 80004e8:	f000 fcca 	bl	8000e80 <HAL_ADC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0xa6>
		Error_Handler();
 80004f2:	f000 f893 	bl	800061c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 80004f6:	2307      	movs	r3, #7
 80004f8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80004fa:	2304      	movs	r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <MX_ADC1_Init+0xcc>)
 8000504:	f000 fcbc 	bl	8000e80 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0xc2>
		Error_Handler();
 800050e:	f000 f885 	bl	800061c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000ac 	.word	0x200000ac
 8000520:	40012400 	.word	0x40012400

08000524 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <MX_USART2_UART_Init+0x50>)
 800052c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800055c:	f002 fa26 	bl	80029ac <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000566:	f000 f859 	bl	800061c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000120 	.word	0x20000120
 8000574:	40004400 	.word	0x40004400

08000578 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_DMA_Init+0x38>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <MX_DMA_Init+0x38>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_DMA_Init+0x38>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	200b      	movs	r0, #11
 800059c:	f000 ff1f 	bl	80013de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a0:	200b      	movs	r0, #11
 80005a2:	f000 ff38 	bl	8001416 <HAL_NVIC_EnableIRQ>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_GPIO_Init+0x40>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <MX_GPIO_Init+0x40>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_GPIO_Init+0x40>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_GPIO_Init+0x40>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <MX_GPIO_Init+0x40>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_GPIO_Init+0x40>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d101      	bne.n	800060e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800060a:	f000 fa4b 	bl	8000aa4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40000800 	.word	0x40000800

0800061c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <HAL_MspInit+0x5c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x5c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_MspInit+0x60>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_MspInit+0x60>)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000
 8000688:	40010000 	.word	0x40010000

0800068c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a28      	ldr	r2, [pc, #160]	; (8000748 <HAL_ADC_MspInit+0xbc>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d149      	bne.n	8000740 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <HAL_ADC_MspInit+0xc0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a26      	ldr	r2, [pc, #152]	; (800074c <HAL_ADC_MspInit+0xc0>)
 80006b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <HAL_ADC_MspInit+0xc0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <HAL_ADC_MspInit+0xc0>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <HAL_ADC_MspInit+0xc0>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <HAL_ADC_MspInit+0xc0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006dc:	23f0      	movs	r3, #240	; 0xf0
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4819      	ldr	r0, [pc, #100]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006ec:	f001 f890 	bl	8001810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 80006f2:	4a19      	ldr	r2, [pc, #100]	; (8000758 <HAL_ADC_MspInit+0xcc>)
 80006f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 800070a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000716:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 800071a:	2220      	movs	r2, #32
 800071c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000726:	f000 fe85 	bl	8001434 <HAL_DMA_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000730:	f7ff ff74 	bl	800061c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000738:	621a      	str	r2, [r3, #32]
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40012400 	.word	0x40012400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800
 8000754:	200000dc 	.word	0x200000dc
 8000758:	40020008 	.word	0x40020008

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <HAL_UART_MspInit+0x88>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d12f      	bne.n	80007dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	61d3      	str	r3, [r2, #28]
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ac:	2304      	movs	r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <HAL_UART_MspInit+0x90>)
 80007c0:	f001 f826 	bl	8001810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <HAL_UART_MspInit+0x90>)
 80007d8:	f001 f81a 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010800 	.word	0x40010800

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	201e      	movs	r0, #30
 8000806:	f000 fdea 	bl	80013de <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800080a:	201e      	movs	r0, #30
 800080c:	f000 fe03 	bl	8001416 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_InitTick+0xa0>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <HAL_InitTick+0xa0>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	61d3      	str	r3, [r2, #28]
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_InitTick+0xa0>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000828:	f107 0210 	add.w	r2, r7, #16
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fd6c 	bl	8002310 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000838:	f001 fd42 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 800083c:	4603      	mov	r3, r0
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_InitTick+0xa4>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	3b01      	subs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_InitTick+0xa8>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <HAL_InitTick+0xac>)
 8000854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_InitTick+0xa8>)
 8000858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800085c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_InitTick+0xa8>)
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_InitTick+0xa8>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_InitTick+0xa8>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_InitTick+0xa8>)
 8000872:	f001 fe51 	bl	8002518 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <HAL_InitTick+0xa8>)
 800087e:	f001 fea3 	bl	80025c8 <HAL_TIM_Base_Start_IT>
 8000882:	4603      	mov	r3, r0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3730      	adds	r7, #48	; 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	431bde83 	.word	0x431bde83
 8000898:	20000164 	.word	0x20000164
 800089c:	40000800 	.word	0x40000800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <DMA1_Channel1_IRQHandler+0x10>)
 80008f6:	f000 fe57 	bl	80015a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000dc 	.word	0x200000dc

08000904 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM4_IRQHandler+0x10>)
 800090a:	f001 feaf 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000164 	.word	0x20000164

08000918 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00a      	b.n	8000940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092a:	f3af 8000 	nop.w
 800092e:	4601      	mov	r1, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	b2ca      	uxtb	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf0      	blt.n	800092a <_read+0x12>
	}

return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	return -1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000978:	605a      	str	r2, [r3, #4]
	return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <_isatty>:

int _isatty(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return 1;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	return 0;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f002 f99a 	bl	8002d1c <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20005000 	.word	0x20005000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000090 	.word	0x20000090
 8000a1c:	200001c0 	.word	0x200001c0

08000a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a52:	f7ff ffe5 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f002 f967 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff fbef 	bl	800023c <main>
  bx lr
 8000a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a68:	08003e6c 	.word	0x08003e6c
  ldr r2, =_sbss
 8000a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a70:	200001c0 	.word	0x200001c0

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 fc9d 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f7ff feae 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fdc8 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	200001ac 	.word	0x200001ac

08000ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_GetTick+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	200001ac 	.word	0x200001ac

08000adc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e0be      	b.n	8000c7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d109      	bne.n	8000b20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fdb6 	bl	800068c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 faff 	bl	8001124 <ADC_ConversionStop_Disable>
 8000b26:	4603      	mov	r3, r0
 8000b28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 8099 	bne.w	8000c6a <HAL_ADC_Init+0x18e>
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f040 8095 	bne.w	8000c6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b48:	f023 0302 	bic.w	r3, r3, #2
 8000b4c:	f043 0202 	orr.w	r2, r3, #2
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7b1b      	ldrb	r3, [r3, #12]
 8000b62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b74:	d003      	beq.n	8000b7e <HAL_ADC_Init+0xa2>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d102      	bne.n	8000b84 <HAL_ADC_Init+0xa8>
 8000b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b82:	e000      	b.n	8000b86 <HAL_ADC_Init+0xaa>
 8000b84:	2300      	movs	r3, #0
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7d1b      	ldrb	r3, [r3, #20]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d119      	bne.n	8000bc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7b1b      	ldrb	r3, [r3, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	035a      	lsls	r2, r3, #13
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	e00b      	b.n	8000bc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	f043 0220 	orr.w	r2, r3, #32
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	f043 0201 	orr.w	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <HAL_ADC_Init+0x1a8>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	430b      	orrs	r3, r1
 8000bee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf8:	d003      	beq.n	8000c02 <HAL_ADC_Init+0x126>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d104      	bne.n	8000c0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	051b      	lsls	r3, r3, #20
 8000c0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_ADC_Init+0x1ac>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d10b      	bne.n	8000c48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c46:	e018      	b.n	8000c7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	f023 0312 	bic.w	r3, r3, #18
 8000c50:	f043 0210 	orr.w	r2, r3, #16
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	f043 0201 	orr.w	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c68:	e007      	b.n	8000c7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f043 0210 	orr.w	r2, r3, #16
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	ffe1f7fd 	.word	0xffe1f7fd
 8000c88:	ff1f0efe 	.word	0xff1f0efe

08000c8c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a64      	ldr	r2, [pc, #400]	; (8000e34 <HAL_ADC_Start_DMA+0x1a8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d004      	beq.n	8000cb0 <HAL_ADC_Start_DMA+0x24>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <HAL_ADC_Start_DMA+0x1ac>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d106      	bne.n	8000cbe <HAL_ADC_Start_DMA+0x32>
 8000cb0:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <HAL_ADC_Start_DMA+0x1a8>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 80b3 	bne.w	8000e24 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_Start_DMA+0x40>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e0ae      	b.n	8000e2a <HAL_ADC_Start_DMA+0x19e>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 f9cb 	bl	8001070 <ADC_Enable>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 809a 	bne.w	8000e1a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cee:	f023 0301 	bic.w	r3, r3, #1
 8000cf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a4e      	ldr	r2, [pc, #312]	; (8000e38 <HAL_ADC_Start_DMA+0x1ac>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d105      	bne.n	8000d10 <HAL_ADC_Start_DMA+0x84>
 8000d04:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <HAL_ADC_Start_DMA+0x1a8>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d115      	bne.n	8000d3c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d026      	beq.n	8000d78 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3a:	e01d      	b.n	8000d78 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a39      	ldr	r2, [pc, #228]	; (8000e34 <HAL_ADC_Start_DMA+0x1a8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d004      	beq.n	8000d5c <HAL_ADC_Start_DMA+0xd0>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a38      	ldr	r2, [pc, #224]	; (8000e38 <HAL_ADC_Start_DMA+0x1ac>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d10d      	bne.n	8000d78 <HAL_ADC_Start_DMA+0xec>
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <HAL_ADC_Start_DMA+0x1a8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	f023 0206 	bic.w	r2, r3, #6
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <HAL_ADC_Start_DMA+0x1b0>)
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <HAL_ADC_Start_DMA+0x1b4>)
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <HAL_ADC_Start_DMA+0x1b8>)
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f06f 0202 	mvn.w	r2, #2
 8000dc0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dd0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6a18      	ldr	r0, [r3, #32]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	334c      	adds	r3, #76	; 0x4c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f000 fb81 	bl	80014e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000df0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000df4:	d108      	bne.n	8000e08 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e04:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e06:	e00f      	b.n	8000e28 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e16:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e18:	e006      	b.n	8000e28 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e22:	e001      	b.n	8000e28 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012400 	.word	0x40012400
 8000e38:	40012800 	.word	0x40012800
 8000e3c:	080011a7 	.word	0x080011a7
 8000e40:	08001223 	.word	0x08001223
 8000e44:	0800123f 	.word	0x0800123f

08000e48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x20>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e0dc      	b.n	800105a <HAL_ADC_ConfigChannel+0x1da>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d81c      	bhi.n	8000eea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b05      	subs	r3, #5
 8000ec2:	221f      	movs	r2, #31
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b05      	subs	r3, #5
 8000edc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee8:	e03c      	b.n	8000f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d81c      	bhi.n	8000f2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	3b23      	subs	r3, #35	; 0x23
 8000f04:	221f      	movs	r2, #31
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4019      	ands	r1, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b23      	subs	r3, #35	; 0x23
 8000f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2a:	e01b      	b.n	8000f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b41      	subs	r3, #65	; 0x41
 8000f3e:	221f      	movs	r2, #31
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4019      	ands	r1, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b41      	subs	r3, #65	; 0x41
 8000f58:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d91c      	bls.n	8000fa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68d9      	ldr	r1, [r3, #12]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3b1e      	subs	r3, #30
 8000f7e:	2207      	movs	r2, #7
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4019      	ands	r1, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6898      	ldr	r0, [r3, #8]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	3b1e      	subs	r3, #30
 8000f98:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	e019      	b.n	8000fda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4019      	ands	r1, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6898      	ldr	r0, [r3, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fe6:	2b11      	cmp	r3, #17
 8000fe8:	d132      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d125      	bne.n	8001040 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d126      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001010:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b10      	cmp	r3, #16
 8001018:	d11a      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_ADC_ConfigChannel+0x1e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_ADC_ConfigChannel+0x1ec>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9a      	lsrs	r2, r3, #18
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	e002      	b.n	8001038 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x1b2>
 800103e:	e007      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	f043 0220 	orr.w	r2, r3, #32
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40012400 	.word	0x40012400
 8001068:	20000000 	.word	0x20000000
 800106c:	431bde83 	.word	0x431bde83

08001070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b01      	cmp	r3, #1
 800108c:	d040      	beq.n	8001110 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <ADC_Enable+0xac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <ADC_Enable+0xb0>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	0c9b      	lsrs	r3, r3, #18
 80010aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ac:	e002      	b.n	80010b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f9      	bne.n	80010ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010ba:	f7ff fd05 	bl	8000ac8 <HAL_GetTick>
 80010be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010c0:	e01f      	b.n	8001102 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010c2:	f7ff fd01 	bl	8000ac8 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d918      	bls.n	8001102 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d011      	beq.n	8001102 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f043 0210 	orr.w	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1d8      	bne.n	80010c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000
 8001120:	431bde83 	.word	0x431bde83

08001124 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12e      	bne.n	800119c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800114e:	f7ff fcbb 	bl	8000ac8 <HAL_GetTick>
 8001152:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001154:	e01b      	b.n	800118e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001156:	f7ff fcb7 	bl	8000ac8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d914      	bls.n	800118e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10d      	bne.n	800118e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e007      	b.n	800119e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d0dc      	beq.n	8001156 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d127      	bne.n	8001210 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011da:	d115      	bne.n	8001208 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d111      	bne.n	8001208 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d105      	bne.n	8001208 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff fe1d 	bl	8000e48 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800120e:	e004      	b.n	800121a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff fe12 	bl	8000e5a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff fe01 	bl	8000e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <__NVIC_SetPriorityGrouping>:
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4906      	ldr	r1, [pc, #24]	; (800130c <__NVIC_EnableIRQ+0x34>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff4f 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff64 	bl	80012bc <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ffb2 	bl	8001364 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff81 	bl	8001310 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff57 	bl	80012d8 <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e043      	b.n	80014d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_DMA_Init+0xa8>)
 8001452:	4413      	add	r3, r2
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_DMA_Init+0xac>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	009a      	lsls	r2, r3, #2
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_DMA_Init+0xb0>)
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800147e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800148c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	bffdfff8 	.word	0xbffdfff8
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	40020000 	.word	0x40020000

080014e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_DMA_Start_IT+0x20>
 8001504:	2302      	movs	r3, #2
 8001506:	e04a      	b.n	800159e <HAL_DMA_Start_IT+0xb6>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001516:	2b01      	cmp	r3, #1
 8001518:	d13a      	bne.n	8001590 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f938 	bl	80017b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 020e 	orr.w	r2, r2, #14
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e00f      	b.n	800157e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0204 	bic.w	r2, r2, #4
 800156c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 020a 	orr.w	r2, r2, #10
 800157c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e005      	b.n	800159c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001598:	2302      	movs	r3, #2
 800159a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800159c:	7dfb      	ldrb	r3, [r7, #23]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2204      	movs	r2, #4
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d04f      	beq.n	8001670 <HAL_DMA_IRQHandler+0xc8>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d04a      	beq.n	8001670 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d107      	bne.n	80015f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0204 	bic.w	r2, r2, #4
 80015f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <HAL_DMA_IRQHandler+0x1f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d029      	beq.n	8001656 <HAL_DMA_IRQHandler+0xae>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a65      	ldr	r2, [pc, #404]	; (800179c <HAL_DMA_IRQHandler+0x1f4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_DMA_IRQHandler+0xaa>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a63      	ldr	r2, [pc, #396]	; (80017a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01a      	beq.n	800164c <HAL_DMA_IRQHandler+0xa4>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a62      	ldr	r2, [pc, #392]	; (80017a4 <HAL_DMA_IRQHandler+0x1fc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d012      	beq.n	8001646 <HAL_DMA_IRQHandler+0x9e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a60      	ldr	r2, [pc, #384]	; (80017a8 <HAL_DMA_IRQHandler+0x200>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00a      	beq.n	8001640 <HAL_DMA_IRQHandler+0x98>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5f      	ldr	r2, [pc, #380]	; (80017ac <HAL_DMA_IRQHandler+0x204>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d102      	bne.n	800163a <HAL_DMA_IRQHandler+0x92>
 8001634:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001638:	e00e      	b.n	8001658 <HAL_DMA_IRQHandler+0xb0>
 800163a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800163e:	e00b      	b.n	8001658 <HAL_DMA_IRQHandler+0xb0>
 8001640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001644:	e008      	b.n	8001658 <HAL_DMA_IRQHandler+0xb0>
 8001646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800164a:	e005      	b.n	8001658 <HAL_DMA_IRQHandler+0xb0>
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	e002      	b.n	8001658 <HAL_DMA_IRQHandler+0xb0>
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	e000      	b.n	8001658 <HAL_DMA_IRQHandler+0xb0>
 8001656:	2304      	movs	r3, #4
 8001658:	4a55      	ldr	r2, [pc, #340]	; (80017b0 <HAL_DMA_IRQHandler+0x208>)
 800165a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8094 	beq.w	800178e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800166e:	e08e      	b.n	800178e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2202      	movs	r2, #2
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d056      	beq.n	800172e <HAL_DMA_IRQHandler+0x186>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d051      	beq.n	800172e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10b      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 020a 	bic.w	r2, r2, #10
 80016a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_DMA_IRQHandler+0x1f0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d029      	beq.n	800170e <HAL_DMA_IRQHandler+0x166>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a37      	ldr	r2, [pc, #220]	; (800179c <HAL_DMA_IRQHandler+0x1f4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d022      	beq.n	800170a <HAL_DMA_IRQHandler+0x162>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a35      	ldr	r2, [pc, #212]	; (80017a0 <HAL_DMA_IRQHandler+0x1f8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x15c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_DMA_IRQHandler+0x1fc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d012      	beq.n	80016fe <HAL_DMA_IRQHandler+0x156>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <HAL_DMA_IRQHandler+0x200>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00a      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x150>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a31      	ldr	r2, [pc, #196]	; (80017ac <HAL_DMA_IRQHandler+0x204>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d102      	bne.n	80016f2 <HAL_DMA_IRQHandler+0x14a>
 80016ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016f0:	e00e      	b.n	8001710 <HAL_DMA_IRQHandler+0x168>
 80016f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f6:	e00b      	b.n	8001710 <HAL_DMA_IRQHandler+0x168>
 80016f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fc:	e008      	b.n	8001710 <HAL_DMA_IRQHandler+0x168>
 80016fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001702:	e005      	b.n	8001710 <HAL_DMA_IRQHandler+0x168>
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	e002      	b.n	8001710 <HAL_DMA_IRQHandler+0x168>
 800170a:	2320      	movs	r3, #32
 800170c:	e000      	b.n	8001710 <HAL_DMA_IRQHandler+0x168>
 800170e:	2302      	movs	r3, #2
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_DMA_IRQHandler+0x208>)
 8001712:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d034      	beq.n	800178e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800172c:	e02f      	b.n	800178e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2208      	movs	r2, #8
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d028      	beq.n	8001790 <HAL_DMA_IRQHandler+0x1e8>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020e 	bic.w	r2, r2, #14
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
    }
  }
  return;
 800178e:	bf00      	nop
 8001790:	bf00      	nop
}
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020008 	.word	0x40020008
 800179c:	4002001c 	.word	0x4002001c
 80017a0:	40020030 	.word	0x40020030
 80017a4:	40020044 	.word	0x40020044
 80017a8:	40020058 	.word	0x40020058
 80017ac:	4002006c 	.word	0x4002006c
 80017b0:	40020000 	.word	0x40020000

080017b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d108      	bne.n	80017f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017f2:	e007      	b.n	8001804 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b08b      	sub	sp, #44	; 0x2c
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	e169      	b.n	8001af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001824:	2201      	movs	r2, #1
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8158 	bne.w	8001af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a9a      	ldr	r2, [pc, #616]	; (8001ab0 <HAL_GPIO_Init+0x2a0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d05e      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 800184c:	4a98      	ldr	r2, [pc, #608]	; (8001ab0 <HAL_GPIO_Init+0x2a0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d875      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 8001852:	4a98      	ldr	r2, [pc, #608]	; (8001ab4 <HAL_GPIO_Init+0x2a4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d058      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 8001858:	4a96      	ldr	r2, [pc, #600]	; (8001ab4 <HAL_GPIO_Init+0x2a4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d86f      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 800185e:	4a96      	ldr	r2, [pc, #600]	; (8001ab8 <HAL_GPIO_Init+0x2a8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d052      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 8001864:	4a94      	ldr	r2, [pc, #592]	; (8001ab8 <HAL_GPIO_Init+0x2a8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d869      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 800186a:	4a94      	ldr	r2, [pc, #592]	; (8001abc <HAL_GPIO_Init+0x2ac>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d04c      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 8001870:	4a92      	ldr	r2, [pc, #584]	; (8001abc <HAL_GPIO_Init+0x2ac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d863      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 8001876:	4a92      	ldr	r2, [pc, #584]	; (8001ac0 <HAL_GPIO_Init+0x2b0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d046      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 800187c:	4a90      	ldr	r2, [pc, #576]	; (8001ac0 <HAL_GPIO_Init+0x2b0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d85d      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d82a      	bhi.n	80018dc <HAL_GPIO_Init+0xcc>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d859      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <HAL_GPIO_Init+0x80>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	0800190b 	.word	0x0800190b
 8001894:	080018e5 	.word	0x080018e5
 8001898:	080018f7 	.word	0x080018f7
 800189c:	08001939 	.word	0x08001939
 80018a0:	0800193f 	.word	0x0800193f
 80018a4:	0800193f 	.word	0x0800193f
 80018a8:	0800193f 	.word	0x0800193f
 80018ac:	0800193f 	.word	0x0800193f
 80018b0:	0800193f 	.word	0x0800193f
 80018b4:	0800193f 	.word	0x0800193f
 80018b8:	0800193f 	.word	0x0800193f
 80018bc:	0800193f 	.word	0x0800193f
 80018c0:	0800193f 	.word	0x0800193f
 80018c4:	0800193f 	.word	0x0800193f
 80018c8:	0800193f 	.word	0x0800193f
 80018cc:	0800193f 	.word	0x0800193f
 80018d0:	0800193f 	.word	0x0800193f
 80018d4:	080018ed 	.word	0x080018ed
 80018d8:	08001901 	.word	0x08001901
 80018dc:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <HAL_GPIO_Init+0x2b4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e2:	e02c      	b.n	800193e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e029      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	3304      	adds	r3, #4
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e024      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	3308      	adds	r3, #8
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e01f      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	330c      	adds	r3, #12
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e01a      	b.n	8001940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001912:	2304      	movs	r3, #4
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e013      	b.n	8001940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	611a      	str	r2, [r3, #16]
          break;
 800192a:	e009      	b.n	8001940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800192c:	2308      	movs	r3, #8
 800192e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	615a      	str	r2, [r3, #20]
          break;
 8001936:	e003      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x130>
          break;
 800193e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d801      	bhi.n	800194a <HAL_GPIO_Init+0x13a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	e001      	b.n	800194e <HAL_GPIO_Init+0x13e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3304      	adds	r3, #4
 800194e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	d802      	bhi.n	800195c <HAL_GPIO_Init+0x14c>
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x152>
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3b08      	subs	r3, #8
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	210f      	movs	r1, #15
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	401a      	ands	r2, r3
 8001974:	6a39      	ldr	r1, [r7, #32]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80b1 	beq.w	8001af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001990:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <HAL_GPIO_Init+0x2b8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2b8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a8:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <HAL_GPIO_Init+0x2c0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x1ec>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <HAL_GPIO_Init+0x2c4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1e8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <HAL_GPIO_Init+0x2c8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1e4>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1e0>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e006      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e004      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019fc:	2300      	movs	r3, #0
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0e:	492f      	ldr	r1, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	492c      	ldr	r1, [pc, #176]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4928      	ldr	r1, [pc, #160]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4922      	ldr	r1, [pc, #136]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	491e      	ldr	r1, [pc, #120]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	4918      	ldr	r1, [pc, #96]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4914      	ldr	r1, [pc, #80]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d021      	beq.n	8001ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e021      	b.n	8001af2 <HAL_GPIO_Init+0x2e2>
 8001aae:	bf00      	nop
 8001ab0:	10320000 	.word	0x10320000
 8001ab4:	10310000 	.word	0x10310000
 8001ab8:	10220000 	.word	0x10220000
 8001abc:	10210000 	.word	0x10210000
 8001ac0:	10120000 	.word	0x10120000
 8001ac4:	10110000 	.word	0x10110000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	40011400 	.word	0x40011400
 8001ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4909      	ldr	r1, [pc, #36]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f ae8e 	bne.w	8001824 <HAL_GPIO_Init+0x14>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	372c      	adds	r7, #44	; 0x2c
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e26c      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8087 	beq.w	8001c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b38:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b44:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b89      	ldr	r3, [pc, #548]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d06c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x12c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d168      	bne.n	8001c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e246      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76>
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e02e      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7a      	ldr	r2, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b78      	ldr	r3, [pc, #480]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a77      	ldr	r2, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xbc>
 8001bba:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bd4:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a67      	ldr	r2, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff68 	bl	8000ac8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7fe ff64 	bl	8000ac8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1fa      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe4>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe ff54 	bl	8000ac8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7fe ff50 	bl	8000ac8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1e6      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x10c>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c52:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1ba      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4939      	ldr	r1, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe ff09 	bl	8000ac8 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7fe ff05 	bl	8000ac8 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e19b      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4927      	ldr	r1, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fee8 	bl	8000ac8 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7fe fee4 	bl	8000ac8 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e17a      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03a      	beq.n	8001d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d019      	beq.n	8001d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7fe fec8 	bl	8000ac8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fec4 	bl	8000ac8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e15a      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fb08 	bl	8002370 <RCC_Delay>
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7fe feae 	bl	8000ac8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7fe feaa 	bl	8000ac8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e140      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	42420000 	.word	0x42420000
 8001d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a6 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b97      	ldr	r3, [pc, #604]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a93      	ldr	r2, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b91      	ldr	r3, [pc, #580]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a8a      	ldr	r2, [pc, #552]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7fe fe6b 	bl	8000ac8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7fe fe67 	bl	8000ac8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0fd      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x312>
 8001e1c:	4b7b      	ldr	r3, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a7a      	ldr	r2, [pc, #488]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e02d      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x334>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	e01c      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x356>
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a69      	ldr	r2, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a66      	ldr	r2, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fe1b 	bl	8000ac8 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe fe17 	bl	8000ac8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0ab      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCC_OscConfig+0x37e>
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7fe fe05 	bl	8000ac8 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe fe01 	bl	8000ac8 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e095      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a47      	ldr	r2, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8081 	beq.w	8002002 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b42      	ldr	r3, [pc, #264]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d061      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d146      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fdd5 	bl	8000ac8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe fdd1 	bl	8000ac8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e067      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	492d      	ldr	r1, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a19      	ldr	r1, [r3, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	4927      	ldr	r1, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fda5 	bl	8000ac8 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7fe fda1 	bl	8000ac8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e037      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46a>
 8001fa0:	e02f      	b.n	8002002 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fd8e 	bl	8000ac8 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fd8a 	bl	8000ac8 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e020      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x498>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e013      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	42420060 	.word	0x42420060

08002018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d0      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4965      	ldr	r1, [pc, #404]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e073      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4936      	ldr	r1, [pc, #216]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fcde 	bl	8000ac8 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fcda 	bl	8000ac8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e053      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d210      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1cc>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x1d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fb12 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08003db4 	.word	0x08003db4
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b490      	push	{r4, r7}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f4:	1d3c      	adds	r4, r7, #4
 80021f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021fc:	f240 2301 	movw	r3, #513	; 0x201
 8002200:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b04      	cmp	r3, #4
 8002224:	d002      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x40>
 8002226:	2b08      	cmp	r3, #8
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x46>
 800222a:	e02d      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800222e:	623b      	str	r3, [r7, #32]
      break;
 8002230:	e02d      	b.n	800228e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800223e:	4413      	add	r3, r2
 8002240:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002244:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0c5b      	lsrs	r3, r3, #17
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800225e:	4413      	add	r3, r2
 8002260:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002264:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226a:	fb02 f203 	mul.w	r2, r2, r3
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	e004      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	623b      	str	r3, [r7, #32]
      break;
 8002286:	e002      	b.n	800228e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228e:	6a3b      	ldr	r3, [r7, #32]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bc90      	pop	{r4, r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	08003da4 	.word	0x08003da4
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	003d0900 	.word	0x003d0900

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b02      	ldr	r3, [pc, #8]	; (80022bc <HAL_RCC_GetHCLKFreq+0x10>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000000 	.word	0x20000000

080022c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022c4:	f7ff fff2 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08003dc4 	.word	0x08003dc4

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022ec:	f7ff ffde 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0adb      	lsrs	r3, r3, #11
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK2Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	08003dc4 	.word	0x08003dc4

08002310 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	220f      	movs	r2, #15
 800231e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_GetClockConfig+0x58>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_RCC_GetClockConfig+0x58>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_GetClockConfig+0x58>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_GetClockConfig+0x58>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetClockConfig+0x5c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0207 	and.w	r2, r3, #7
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	40022000 	.word	0x40022000

08002370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <RCC_Delay+0x34>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <RCC_Delay+0x38>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a5b      	lsrs	r3, r3, #9
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800238c:	bf00      	nop
  }
  while (Delay --);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	60fa      	str	r2, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <RCC_Delay+0x1c>
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000000 	.word	0x20000000
 80023a8:	10624dd3 	.word	0x10624dd3

080023ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d07d      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023cc:	4b4f      	ldr	r3, [pc, #316]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	4a4b      	ldr	r2, [pc, #300]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e2:	61d3      	str	r3, [r2, #28]
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a42      	ldr	r2, [pc, #264]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240c:	f7fe fb5c 	bl	8000ac8 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	e008      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7fe fb58 	bl	8000ac8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e06d      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02e      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d027      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002460:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002466:	4a29      	ldr	r2, [pc, #164]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d014      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fb27 	bl	8000ac8 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fb23 	bl	8000ac8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e036      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4917      	ldr	r1, [pc, #92]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	490b      	ldr	r1, [pc, #44]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
 8002514:	42420440 	.word	0x42420440

08002518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e041      	b.n	80025ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f839 	bl	80025b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 f9b4 	bl	80028c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e03a      	b.n	8002656 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_TIM_Base_Start_IT+0x98>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x58>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260a:	d009      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x58>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a14      	ldr	r2, [pc, #80]	; (8002664 <HAL_TIM_Base_Start_IT+0x9c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x58>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_TIM_Base_Start_IT+0xa0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d111      	bne.n	8002644 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b06      	cmp	r3, #6
 8002630:	d010      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	e007      	b.n	8002654 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8ed 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8e0 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f8ef 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0204 	mvn.w	r2, #4
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8c3 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8b6 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8c5 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b08      	cmp	r3, #8
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b08      	cmp	r3, #8
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0208 	mvn.w	r2, #8
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f899 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f88c 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f89b 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0210 	mvn.w	r2, #16
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2208      	movs	r2, #8
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f86f 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f862 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f871 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0201 	mvn.w	r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fd ff04 	bl	80005f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8bf 	bl	800299a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f835 	bl	80028b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0220 	mvn.w	r2, #32
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f88a 	bl	8002988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a29      	ldr	r2, [pc, #164]	; (800297c <TIM_Base_SetConfig+0xb8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00b      	beq.n	80028f4 <TIM_Base_SetConfig+0x30>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x30>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <TIM_Base_SetConfig+0xbc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x30>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0xc0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <TIM_Base_SetConfig+0xb8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00b      	beq.n	8002926 <TIM_Base_SetConfig+0x62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d007      	beq.n	8002926 <TIM_Base_SetConfig+0x62>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <TIM_Base_SetConfig+0xbc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x62>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <TIM_Base_SetConfig+0xc0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <TIM_Base_SetConfig+0xb8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d103      	bne.n	800296c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	615a      	str	r2, [r3, #20]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800

08002988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e03f      	b.n	8002a3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fec2 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f905 	bl	8002c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b08a      	sub	sp, #40	; 0x28
 8002a4a:	af02      	add	r7, sp, #8
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d17c      	bne.n	8002b60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_UART_Transmit+0x2c>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e075      	b.n	8002b62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Transmit+0x3e>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e06e      	b.n	8002b62 <HAL_UART_Transmit+0x11c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2221      	movs	r2, #33	; 0x21
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a9a:	f7fe f815 	bl	8000ac8 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d108      	bne.n	8002ac8 <HAL_UART_Transmit+0x82>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d104      	bne.n	8002ac8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e003      	b.n	8002ad0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ad8:	e02a      	b.n	8002b30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f840 	bl	8002b6a <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e036      	b.n	8002b62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e007      	b.n	8002b22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1cf      	bne.n	8002ada <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f810 	bl	8002b6a <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e006      	b.n	8002b62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e000      	b.n	8002b62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7a:	e02c      	b.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b82:	d028      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b8a:	f7fd ff9d 	bl	8000ac8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d21d      	bcs.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ba8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e00f      	b.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d0c3      	beq.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c3a:	f023 030c 	bic.w	r3, r3, #12
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <UART_SetConfig+0x114>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d103      	bne.n	8002c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff fb3e 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	e002      	b.n	8002c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7ff fb26 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 8002c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <UART_SetConfig+0x118>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	0119      	lsls	r1, r3, #4
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <UART_SetConfig+0x118>)
 8002cae:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <UART_SetConfig+0x118>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	4419      	add	r1, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <UART_SetConfig+0x118>)
 8002ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	fb00 f303 	mul.w	r3, r0, r3
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	3332      	adds	r3, #50	; 0x32
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <UART_SetConfig+0x118>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	440a      	add	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013800 	.word	0x40013800
 8002d18:	51eb851f 	.word	0x51eb851f

08002d1c <__errno>:
 8002d1c:	4b01      	ldr	r3, [pc, #4]	; (8002d24 <__errno+0x8>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4d0c      	ldr	r5, [pc, #48]	; (8002d60 <__libc_init_array+0x38>)
 8002d2e:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	f000 fff8 	bl	8003d2c <_init>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	4d0a      	ldr	r5, [pc, #40]	; (8002d68 <__libc_init_array+0x40>)
 8002d40:	4c0a      	ldr	r4, [pc, #40]	; (8002d6c <__libc_init_array+0x44>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08003e64 	.word	0x08003e64
 8002d64:	08003e64 	.word	0x08003e64
 8002d68:	08003e64 	.word	0x08003e64
 8002d6c:	08003e68 	.word	0x08003e68

08002d70 <memset>:
 8002d70:	4603      	mov	r3, r0
 8002d72:	4402      	add	r2, r0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d100      	bne.n	8002d7a <memset+0xa>
 8002d78:	4770      	bx	lr
 8002d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7e:	e7f9      	b.n	8002d74 <memset+0x4>

08002d80 <iprintf>:
 8002d80:	b40f      	push	{r0, r1, r2, r3}
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <iprintf+0x2c>)
 8002d84:	b513      	push	{r0, r1, r4, lr}
 8002d86:	681c      	ldr	r4, [r3, #0]
 8002d88:	b124      	cbz	r4, 8002d94 <iprintf+0x14>
 8002d8a:	69a3      	ldr	r3, [r4, #24]
 8002d8c:	b913      	cbnz	r3, 8002d94 <iprintf+0x14>
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f000 fa5e 	bl	8003250 <__sinit>
 8002d94:	ab05      	add	r3, sp, #20
 8002d96:	4620      	mov	r0, r4
 8002d98:	9a04      	ldr	r2, [sp, #16]
 8002d9a:	68a1      	ldr	r1, [r4, #8]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	f000 fc29 	bl	80035f4 <_vfiprintf_r>
 8002da2:	b002      	add	sp, #8
 8002da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da8:	b004      	add	sp, #16
 8002daa:	4770      	bx	lr
 8002dac:	2000000c 	.word	0x2000000c

08002db0 <_puts_r>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	460e      	mov	r6, r1
 8002db4:	4605      	mov	r5, r0
 8002db6:	b118      	cbz	r0, 8002dc0 <_puts_r+0x10>
 8002db8:	6983      	ldr	r3, [r0, #24]
 8002dba:	b90b      	cbnz	r3, 8002dc0 <_puts_r+0x10>
 8002dbc:	f000 fa48 	bl	8003250 <__sinit>
 8002dc0:	69ab      	ldr	r3, [r5, #24]
 8002dc2:	68ac      	ldr	r4, [r5, #8]
 8002dc4:	b913      	cbnz	r3, 8002dcc <_puts_r+0x1c>
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 fa42 	bl	8003250 <__sinit>
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <_puts_r+0xd0>)
 8002dce:	429c      	cmp	r4, r3
 8002dd0:	d120      	bne.n	8002e14 <_puts_r+0x64>
 8002dd2:	686c      	ldr	r4, [r5, #4]
 8002dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d405      	bmi.n	8002de6 <_puts_r+0x36>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	0598      	lsls	r0, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_puts_r+0x36>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f000 fad3 	bl	800338c <__retarget_lock_acquire_recursive>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0719      	lsls	r1, r3, #28
 8002dea:	d51d      	bpl.n	8002e28 <_puts_r+0x78>
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	b1db      	cbz	r3, 8002e28 <_puts_r+0x78>
 8002df0:	3e01      	subs	r6, #1
 8002df2:	68a3      	ldr	r3, [r4, #8]
 8002df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60a3      	str	r3, [r4, #8]
 8002dfc:	bb39      	cbnz	r1, 8002e4e <_puts_r+0x9e>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da38      	bge.n	8002e74 <_puts_r+0xc4>
 8002e02:	4622      	mov	r2, r4
 8002e04:	210a      	movs	r1, #10
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f848 	bl	8002e9c <__swbuf_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d011      	beq.n	8002e34 <_puts_r+0x84>
 8002e10:	250a      	movs	r5, #10
 8002e12:	e011      	b.n	8002e38 <_puts_r+0x88>
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <_puts_r+0xd4>)
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d101      	bne.n	8002e1e <_puts_r+0x6e>
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	e7da      	b.n	8002dd4 <_puts_r+0x24>
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <_puts_r+0xd8>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	bf08      	it	eq
 8002e24:	68ec      	ldreq	r4, [r5, #12]
 8002e26:	e7d5      	b.n	8002dd4 <_puts_r+0x24>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f000 f888 	bl	8002f40 <__swsetup_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d0dd      	beq.n	8002df0 <_puts_r+0x40>
 8002e34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e3a:	07da      	lsls	r2, r3, #31
 8002e3c:	d405      	bmi.n	8002e4a <_puts_r+0x9a>
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	059b      	lsls	r3, r3, #22
 8002e42:	d402      	bmi.n	8002e4a <_puts_r+0x9a>
 8002e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e46:	f000 faa2 	bl	800338e <__retarget_lock_release_recursive>
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da04      	bge.n	8002e5c <_puts_r+0xac>
 8002e52:	69a2      	ldr	r2, [r4, #24]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dc06      	bgt.n	8002e66 <_puts_r+0xb6>
 8002e58:	290a      	cmp	r1, #10
 8002e5a:	d004      	beq.n	8002e66 <_puts_r+0xb6>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	6022      	str	r2, [r4, #0]
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	e7c5      	b.n	8002df2 <_puts_r+0x42>
 8002e66:	4622      	mov	r2, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 f817 	bl	8002e9c <__swbuf_r>
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d1bf      	bne.n	8002df2 <_puts_r+0x42>
 8002e72:	e7df      	b.n	8002e34 <_puts_r+0x84>
 8002e74:	250a      	movs	r5, #10
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	6022      	str	r2, [r4, #0]
 8002e7c:	701d      	strb	r5, [r3, #0]
 8002e7e:	e7db      	b.n	8002e38 <_puts_r+0x88>
 8002e80:	08003df0 	.word	0x08003df0
 8002e84:	08003e10 	.word	0x08003e10
 8002e88:	08003dd0 	.word	0x08003dd0

08002e8c <puts>:
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <puts+0xc>)
 8002e8e:	4601      	mov	r1, r0
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	f7ff bf8d 	b.w	8002db0 <_puts_r>
 8002e96:	bf00      	nop
 8002e98:	2000000c 	.word	0x2000000c

08002e9c <__swbuf_r>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	460e      	mov	r6, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	b118      	cbz	r0, 8002eae <__swbuf_r+0x12>
 8002ea6:	6983      	ldr	r3, [r0, #24]
 8002ea8:	b90b      	cbnz	r3, 8002eae <__swbuf_r+0x12>
 8002eaa:	f000 f9d1 	bl	8003250 <__sinit>
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <__swbuf_r+0x98>)
 8002eb0:	429c      	cmp	r4, r3
 8002eb2:	d12b      	bne.n	8002f0c <__swbuf_r+0x70>
 8002eb4:	686c      	ldr	r4, [r5, #4]
 8002eb6:	69a3      	ldr	r3, [r4, #24]
 8002eb8:	60a3      	str	r3, [r4, #8]
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	071a      	lsls	r2, r3, #28
 8002ebe:	d52f      	bpl.n	8002f20 <__swbuf_r+0x84>
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	b36b      	cbz	r3, 8002f20 <__swbuf_r+0x84>
 8002ec4:	6923      	ldr	r3, [r4, #16]
 8002ec6:	6820      	ldr	r0, [r4, #0]
 8002ec8:	b2f6      	uxtb	r6, r6
 8002eca:	1ac0      	subs	r0, r0, r3
 8002ecc:	6963      	ldr	r3, [r4, #20]
 8002ece:	4637      	mov	r7, r6
 8002ed0:	4283      	cmp	r3, r0
 8002ed2:	dc04      	bgt.n	8002ede <__swbuf_r+0x42>
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f926 	bl	8003128 <_fflush_r>
 8002edc:	bb30      	cbnz	r0, 8002f2c <__swbuf_r+0x90>
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60a3      	str	r3, [r4, #8]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	6022      	str	r2, [r4, #0]
 8002eec:	701e      	strb	r6, [r3, #0]
 8002eee:	6963      	ldr	r3, [r4, #20]
 8002ef0:	4283      	cmp	r3, r0
 8002ef2:	d004      	beq.n	8002efe <__swbuf_r+0x62>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	07db      	lsls	r3, r3, #31
 8002ef8:	d506      	bpl.n	8002f08 <__swbuf_r+0x6c>
 8002efa:	2e0a      	cmp	r6, #10
 8002efc:	d104      	bne.n	8002f08 <__swbuf_r+0x6c>
 8002efe:	4621      	mov	r1, r4
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 f911 	bl	8003128 <_fflush_r>
 8002f06:	b988      	cbnz	r0, 8002f2c <__swbuf_r+0x90>
 8002f08:	4638      	mov	r0, r7
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <__swbuf_r+0x9c>)
 8002f0e:	429c      	cmp	r4, r3
 8002f10:	d101      	bne.n	8002f16 <__swbuf_r+0x7a>
 8002f12:	68ac      	ldr	r4, [r5, #8]
 8002f14:	e7cf      	b.n	8002eb6 <__swbuf_r+0x1a>
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__swbuf_r+0xa0>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	bf08      	it	eq
 8002f1c:	68ec      	ldreq	r4, [r5, #12]
 8002f1e:	e7ca      	b.n	8002eb6 <__swbuf_r+0x1a>
 8002f20:	4621      	mov	r1, r4
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 f80c 	bl	8002f40 <__swsetup_r>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d0cb      	beq.n	8002ec4 <__swbuf_r+0x28>
 8002f2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f30:	e7ea      	b.n	8002f08 <__swbuf_r+0x6c>
 8002f32:	bf00      	nop
 8002f34:	08003df0 	.word	0x08003df0
 8002f38:	08003e10 	.word	0x08003e10
 8002f3c:	08003dd0 	.word	0x08003dd0

08002f40 <__swsetup_r>:
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <__swsetup_r+0xcc>)
 8002f42:	b570      	push	{r4, r5, r6, lr}
 8002f44:	681d      	ldr	r5, [r3, #0]
 8002f46:	4606      	mov	r6, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	b125      	cbz	r5, 8002f56 <__swsetup_r+0x16>
 8002f4c:	69ab      	ldr	r3, [r5, #24]
 8002f4e:	b913      	cbnz	r3, 8002f56 <__swsetup_r+0x16>
 8002f50:	4628      	mov	r0, r5
 8002f52:	f000 f97d 	bl	8003250 <__sinit>
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <__swsetup_r+0xd0>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d10f      	bne.n	8002f7c <__swsetup_r+0x3c>
 8002f5c:	686c      	ldr	r4, [r5, #4]
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f64:	0719      	lsls	r1, r3, #28
 8002f66:	d42c      	bmi.n	8002fc2 <__swsetup_r+0x82>
 8002f68:	06dd      	lsls	r5, r3, #27
 8002f6a:	d411      	bmi.n	8002f90 <__swsetup_r+0x50>
 8002f6c:	2309      	movs	r3, #9
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	e03e      	b.n	8002ffa <__swsetup_r+0xba>
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <__swsetup_r+0xd4>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d101      	bne.n	8002f86 <__swsetup_r+0x46>
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	e7eb      	b.n	8002f5e <__swsetup_r+0x1e>
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <__swsetup_r+0xd8>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	bf08      	it	eq
 8002f8c:	68ec      	ldreq	r4, [r5, #12]
 8002f8e:	e7e6      	b.n	8002f5e <__swsetup_r+0x1e>
 8002f90:	0758      	lsls	r0, r3, #29
 8002f92:	d512      	bpl.n	8002fba <__swsetup_r+0x7a>
 8002f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f96:	b141      	cbz	r1, 8002faa <__swsetup_r+0x6a>
 8002f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d002      	beq.n	8002fa6 <__swsetup_r+0x66>
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f000 fa59 	bl	8003458 <_free_r>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	b94b      	cbnz	r3, 8002fda <__swsetup_r+0x9a>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d003      	beq.n	8002fda <__swsetup_r+0x9a>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f000 f9ff 	bl	80033d8 <__smakebuf_r>
 8002fda:	89a0      	ldrh	r0, [r4, #12]
 8002fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fe0:	f010 0301 	ands.w	r3, r0, #1
 8002fe4:	d00a      	beq.n	8002ffc <__swsetup_r+0xbc>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60a3      	str	r3, [r4, #8]
 8002fea:	6963      	ldr	r3, [r4, #20]
 8002fec:	425b      	negs	r3, r3
 8002fee:	61a3      	str	r3, [r4, #24]
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	b943      	cbnz	r3, 8003006 <__swsetup_r+0xc6>
 8002ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ff8:	d1ba      	bne.n	8002f70 <__swsetup_r+0x30>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	0781      	lsls	r1, r0, #30
 8002ffe:	bf58      	it	pl
 8003000:	6963      	ldrpl	r3, [r4, #20]
 8003002:	60a3      	str	r3, [r4, #8]
 8003004:	e7f4      	b.n	8002ff0 <__swsetup_r+0xb0>
 8003006:	2000      	movs	r0, #0
 8003008:	e7f7      	b.n	8002ffa <__swsetup_r+0xba>
 800300a:	bf00      	nop
 800300c:	2000000c 	.word	0x2000000c
 8003010:	08003df0 	.word	0x08003df0
 8003014:	08003e10 	.word	0x08003e10
 8003018:	08003dd0 	.word	0x08003dd0

0800301c <__sflush_r>:
 800301c:	898a      	ldrh	r2, [r1, #12]
 800301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003022:	4605      	mov	r5, r0
 8003024:	0710      	lsls	r0, r2, #28
 8003026:	460c      	mov	r4, r1
 8003028:	d458      	bmi.n	80030dc <__sflush_r+0xc0>
 800302a:	684b      	ldr	r3, [r1, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	dc05      	bgt.n	800303c <__sflush_r+0x20>
 8003030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	dc02      	bgt.n	800303c <__sflush_r+0x20>
 8003036:	2000      	movs	r0, #0
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800303c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800303e:	2e00      	cmp	r6, #0
 8003040:	d0f9      	beq.n	8003036 <__sflush_r+0x1a>
 8003042:	2300      	movs	r3, #0
 8003044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003048:	682f      	ldr	r7, [r5, #0]
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	d032      	beq.n	80030b4 <__sflush_r+0x98>
 800304e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	075a      	lsls	r2, r3, #29
 8003054:	d505      	bpl.n	8003062 <__sflush_r+0x46>
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	1ac0      	subs	r0, r0, r3
 800305a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800305c:	b10b      	cbz	r3, 8003062 <__sflush_r+0x46>
 800305e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003060:	1ac0      	subs	r0, r0, r3
 8003062:	2300      	movs	r3, #0
 8003064:	4602      	mov	r2, r0
 8003066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003068:	4628      	mov	r0, r5
 800306a:	6a21      	ldr	r1, [r4, #32]
 800306c:	47b0      	blx	r6
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	d106      	bne.n	8003082 <__sflush_r+0x66>
 8003074:	6829      	ldr	r1, [r5, #0]
 8003076:	291d      	cmp	r1, #29
 8003078:	d82c      	bhi.n	80030d4 <__sflush_r+0xb8>
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <__sflush_r+0x108>)
 800307c:	40ca      	lsrs	r2, r1
 800307e:	07d6      	lsls	r6, r2, #31
 8003080:	d528      	bpl.n	80030d4 <__sflush_r+0xb8>
 8003082:	2200      	movs	r2, #0
 8003084:	6062      	str	r2, [r4, #4]
 8003086:	6922      	ldr	r2, [r4, #16]
 8003088:	04d9      	lsls	r1, r3, #19
 800308a:	6022      	str	r2, [r4, #0]
 800308c:	d504      	bpl.n	8003098 <__sflush_r+0x7c>
 800308e:	1c42      	adds	r2, r0, #1
 8003090:	d101      	bne.n	8003096 <__sflush_r+0x7a>
 8003092:	682b      	ldr	r3, [r5, #0]
 8003094:	b903      	cbnz	r3, 8003098 <__sflush_r+0x7c>
 8003096:	6560      	str	r0, [r4, #84]	; 0x54
 8003098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800309a:	602f      	str	r7, [r5, #0]
 800309c:	2900      	cmp	r1, #0
 800309e:	d0ca      	beq.n	8003036 <__sflush_r+0x1a>
 80030a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <__sflush_r+0x92>
 80030a8:	4628      	mov	r0, r5
 80030aa:	f000 f9d5 	bl	8003458 <_free_r>
 80030ae:	2000      	movs	r0, #0
 80030b0:	6360      	str	r0, [r4, #52]	; 0x34
 80030b2:	e7c1      	b.n	8003038 <__sflush_r+0x1c>
 80030b4:	6a21      	ldr	r1, [r4, #32]
 80030b6:	2301      	movs	r3, #1
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b0      	blx	r6
 80030bc:	1c41      	adds	r1, r0, #1
 80030be:	d1c7      	bne.n	8003050 <__sflush_r+0x34>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0c4      	beq.n	8003050 <__sflush_r+0x34>
 80030c6:	2b1d      	cmp	r3, #29
 80030c8:	d001      	beq.n	80030ce <__sflush_r+0xb2>
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d101      	bne.n	80030d2 <__sflush_r+0xb6>
 80030ce:	602f      	str	r7, [r5, #0]
 80030d0:	e7b1      	b.n	8003036 <__sflush_r+0x1a>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	e7ad      	b.n	8003038 <__sflush_r+0x1c>
 80030dc:	690f      	ldr	r7, [r1, #16]
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d0a9      	beq.n	8003036 <__sflush_r+0x1a>
 80030e2:	0793      	lsls	r3, r2, #30
 80030e4:	bf18      	it	ne
 80030e6:	2300      	movne	r3, #0
 80030e8:	680e      	ldr	r6, [r1, #0]
 80030ea:	bf08      	it	eq
 80030ec:	694b      	ldreq	r3, [r1, #20]
 80030ee:	eba6 0807 	sub.w	r8, r6, r7
 80030f2:	600f      	str	r7, [r1, #0]
 80030f4:	608b      	str	r3, [r1, #8]
 80030f6:	f1b8 0f00 	cmp.w	r8, #0
 80030fa:	dd9c      	ble.n	8003036 <__sflush_r+0x1a>
 80030fc:	4643      	mov	r3, r8
 80030fe:	463a      	mov	r2, r7
 8003100:	4628      	mov	r0, r5
 8003102:	6a21      	ldr	r1, [r4, #32]
 8003104:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003106:	47b0      	blx	r6
 8003108:	2800      	cmp	r0, #0
 800310a:	dc06      	bgt.n	800311a <__sflush_r+0xfe>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	e78e      	b.n	8003038 <__sflush_r+0x1c>
 800311a:	4407      	add	r7, r0
 800311c:	eba8 0800 	sub.w	r8, r8, r0
 8003120:	e7e9      	b.n	80030f6 <__sflush_r+0xda>
 8003122:	bf00      	nop
 8003124:	20400001 	.word	0x20400001

08003128 <_fflush_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	690b      	ldr	r3, [r1, #16]
 800312c:	4605      	mov	r5, r0
 800312e:	460c      	mov	r4, r1
 8003130:	b913      	cbnz	r3, 8003138 <_fflush_r+0x10>
 8003132:	2500      	movs	r5, #0
 8003134:	4628      	mov	r0, r5
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	b118      	cbz	r0, 8003142 <_fflush_r+0x1a>
 800313a:	6983      	ldr	r3, [r0, #24]
 800313c:	b90b      	cbnz	r3, 8003142 <_fflush_r+0x1a>
 800313e:	f000 f887 	bl	8003250 <__sinit>
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <_fflush_r+0x6c>)
 8003144:	429c      	cmp	r4, r3
 8003146:	d11b      	bne.n	8003180 <_fflush_r+0x58>
 8003148:	686c      	ldr	r4, [r5, #4]
 800314a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <_fflush_r+0xa>
 8003152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003154:	07d0      	lsls	r0, r2, #31
 8003156:	d404      	bmi.n	8003162 <_fflush_r+0x3a>
 8003158:	0599      	lsls	r1, r3, #22
 800315a:	d402      	bmi.n	8003162 <_fflush_r+0x3a>
 800315c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315e:	f000 f915 	bl	800338c <__retarget_lock_acquire_recursive>
 8003162:	4628      	mov	r0, r5
 8003164:	4621      	mov	r1, r4
 8003166:	f7ff ff59 	bl	800301c <__sflush_r>
 800316a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316c:	4605      	mov	r5, r0
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d4e0      	bmi.n	8003134 <_fflush_r+0xc>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	059b      	lsls	r3, r3, #22
 8003176:	d4dd      	bmi.n	8003134 <_fflush_r+0xc>
 8003178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317a:	f000 f908 	bl	800338e <__retarget_lock_release_recursive>
 800317e:	e7d9      	b.n	8003134 <_fflush_r+0xc>
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <_fflush_r+0x70>)
 8003182:	429c      	cmp	r4, r3
 8003184:	d101      	bne.n	800318a <_fflush_r+0x62>
 8003186:	68ac      	ldr	r4, [r5, #8]
 8003188:	e7df      	b.n	800314a <_fflush_r+0x22>
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <_fflush_r+0x74>)
 800318c:	429c      	cmp	r4, r3
 800318e:	bf08      	it	eq
 8003190:	68ec      	ldreq	r4, [r5, #12]
 8003192:	e7da      	b.n	800314a <_fflush_r+0x22>
 8003194:	08003df0 	.word	0x08003df0
 8003198:	08003e10 	.word	0x08003e10
 800319c:	08003dd0 	.word	0x08003dd0

080031a0 <std>:
 80031a0:	2300      	movs	r3, #0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	4604      	mov	r4, r0
 80031a6:	e9c0 3300 	strd	r3, r3, [r0]
 80031aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ae:	6083      	str	r3, [r0, #8]
 80031b0:	8181      	strh	r1, [r0, #12]
 80031b2:	6643      	str	r3, [r0, #100]	; 0x64
 80031b4:	81c2      	strh	r2, [r0, #14]
 80031b6:	6183      	str	r3, [r0, #24]
 80031b8:	4619      	mov	r1, r3
 80031ba:	2208      	movs	r2, #8
 80031bc:	305c      	adds	r0, #92	; 0x5c
 80031be:	f7ff fdd7 	bl	8002d70 <memset>
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <std+0x38>)
 80031c4:	6224      	str	r4, [r4, #32]
 80031c6:	6263      	str	r3, [r4, #36]	; 0x24
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <std+0x3c>)
 80031ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <std+0x40>)
 80031ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <std+0x44>)
 80031d2:	6323      	str	r3, [r4, #48]	; 0x30
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	bf00      	nop
 80031d8:	08003ba1 	.word	0x08003ba1
 80031dc:	08003bc3 	.word	0x08003bc3
 80031e0:	08003bfb 	.word	0x08003bfb
 80031e4:	08003c1f 	.word	0x08003c1f

080031e8 <_cleanup_r>:
 80031e8:	4901      	ldr	r1, [pc, #4]	; (80031f0 <_cleanup_r+0x8>)
 80031ea:	f000 b8af 	b.w	800334c <_fwalk_reent>
 80031ee:	bf00      	nop
 80031f0:	08003129 	.word	0x08003129

080031f4 <__sfmoreglue>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2568      	movs	r5, #104	; 0x68
 80031f8:	1e4a      	subs	r2, r1, #1
 80031fa:	4355      	muls	r5, r2
 80031fc:	460e      	mov	r6, r1
 80031fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003202:	f000 f975 	bl	80034f0 <_malloc_r>
 8003206:	4604      	mov	r4, r0
 8003208:	b140      	cbz	r0, 800321c <__sfmoreglue+0x28>
 800320a:	2100      	movs	r1, #0
 800320c:	e9c0 1600 	strd	r1, r6, [r0]
 8003210:	300c      	adds	r0, #12
 8003212:	60a0      	str	r0, [r4, #8]
 8003214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003218:	f7ff fdaa 	bl	8002d70 <memset>
 800321c:	4620      	mov	r0, r4
 800321e:	bd70      	pop	{r4, r5, r6, pc}

08003220 <__sfp_lock_acquire>:
 8003220:	4801      	ldr	r0, [pc, #4]	; (8003228 <__sfp_lock_acquire+0x8>)
 8003222:	f000 b8b3 	b.w	800338c <__retarget_lock_acquire_recursive>
 8003226:	bf00      	nop
 8003228:	200001b8 	.word	0x200001b8

0800322c <__sfp_lock_release>:
 800322c:	4801      	ldr	r0, [pc, #4]	; (8003234 <__sfp_lock_release+0x8>)
 800322e:	f000 b8ae 	b.w	800338e <__retarget_lock_release_recursive>
 8003232:	bf00      	nop
 8003234:	200001b8 	.word	0x200001b8

08003238 <__sinit_lock_acquire>:
 8003238:	4801      	ldr	r0, [pc, #4]	; (8003240 <__sinit_lock_acquire+0x8>)
 800323a:	f000 b8a7 	b.w	800338c <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	200001b3 	.word	0x200001b3

08003244 <__sinit_lock_release>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__sinit_lock_release+0x8>)
 8003246:	f000 b8a2 	b.w	800338e <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	200001b3 	.word	0x200001b3

08003250 <__sinit>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4604      	mov	r4, r0
 8003254:	f7ff fff0 	bl	8003238 <__sinit_lock_acquire>
 8003258:	69a3      	ldr	r3, [r4, #24]
 800325a:	b11b      	cbz	r3, 8003264 <__sinit+0x14>
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003260:	f7ff bff0 	b.w	8003244 <__sinit_lock_release>
 8003264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003268:	6523      	str	r3, [r4, #80]	; 0x50
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <__sinit+0x68>)
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <__sinit+0x6c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	62a2      	str	r2, [r4, #40]	; 0x28
 8003272:	42a3      	cmp	r3, r4
 8003274:	bf08      	it	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	4620      	mov	r0, r4
 800327a:	bf08      	it	eq
 800327c:	61a3      	streq	r3, [r4, #24]
 800327e:	f000 f81f 	bl	80032c0 <__sfp>
 8003282:	6060      	str	r0, [r4, #4]
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f81b 	bl	80032c0 <__sfp>
 800328a:	60a0      	str	r0, [r4, #8]
 800328c:	4620      	mov	r0, r4
 800328e:	f000 f817 	bl	80032c0 <__sfp>
 8003292:	2200      	movs	r2, #0
 8003294:	2104      	movs	r1, #4
 8003296:	60e0      	str	r0, [r4, #12]
 8003298:	6860      	ldr	r0, [r4, #4]
 800329a:	f7ff ff81 	bl	80031a0 <std>
 800329e:	2201      	movs	r2, #1
 80032a0:	2109      	movs	r1, #9
 80032a2:	68a0      	ldr	r0, [r4, #8]
 80032a4:	f7ff ff7c 	bl	80031a0 <std>
 80032a8:	2202      	movs	r2, #2
 80032aa:	2112      	movs	r1, #18
 80032ac:	68e0      	ldr	r0, [r4, #12]
 80032ae:	f7ff ff77 	bl	80031a0 <std>
 80032b2:	2301      	movs	r3, #1
 80032b4:	61a3      	str	r3, [r4, #24]
 80032b6:	e7d1      	b.n	800325c <__sinit+0xc>
 80032b8:	08003dcc 	.word	0x08003dcc
 80032bc:	080031e9 	.word	0x080031e9

080032c0 <__sfp>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	4607      	mov	r7, r0
 80032c4:	f7ff ffac 	bl	8003220 <__sfp_lock_acquire>
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <__sfp+0x84>)
 80032ca:	681e      	ldr	r6, [r3, #0]
 80032cc:	69b3      	ldr	r3, [r6, #24]
 80032ce:	b913      	cbnz	r3, 80032d6 <__sfp+0x16>
 80032d0:	4630      	mov	r0, r6
 80032d2:	f7ff ffbd 	bl	8003250 <__sinit>
 80032d6:	3648      	adds	r6, #72	; 0x48
 80032d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032dc:	3b01      	subs	r3, #1
 80032de:	d503      	bpl.n	80032e8 <__sfp+0x28>
 80032e0:	6833      	ldr	r3, [r6, #0]
 80032e2:	b30b      	cbz	r3, 8003328 <__sfp+0x68>
 80032e4:	6836      	ldr	r6, [r6, #0]
 80032e6:	e7f7      	b.n	80032d8 <__sfp+0x18>
 80032e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032ec:	b9d5      	cbnz	r5, 8003324 <__sfp+0x64>
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <__sfp+0x88>)
 80032f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032f4:	60e3      	str	r3, [r4, #12]
 80032f6:	6665      	str	r5, [r4, #100]	; 0x64
 80032f8:	f000 f847 	bl	800338a <__retarget_lock_init_recursive>
 80032fc:	f7ff ff96 	bl	800322c <__sfp_lock_release>
 8003300:	2208      	movs	r2, #8
 8003302:	4629      	mov	r1, r5
 8003304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800330c:	6025      	str	r5, [r4, #0]
 800330e:	61a5      	str	r5, [r4, #24]
 8003310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003314:	f7ff fd2c 	bl	8002d70 <memset>
 8003318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800331c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003320:	4620      	mov	r0, r4
 8003322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003324:	3468      	adds	r4, #104	; 0x68
 8003326:	e7d9      	b.n	80032dc <__sfp+0x1c>
 8003328:	2104      	movs	r1, #4
 800332a:	4638      	mov	r0, r7
 800332c:	f7ff ff62 	bl	80031f4 <__sfmoreglue>
 8003330:	4604      	mov	r4, r0
 8003332:	6030      	str	r0, [r6, #0]
 8003334:	2800      	cmp	r0, #0
 8003336:	d1d5      	bne.n	80032e4 <__sfp+0x24>
 8003338:	f7ff ff78 	bl	800322c <__sfp_lock_release>
 800333c:	230c      	movs	r3, #12
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	e7ee      	b.n	8003320 <__sfp+0x60>
 8003342:	bf00      	nop
 8003344:	08003dcc 	.word	0x08003dcc
 8003348:	ffff0001 	.word	0xffff0001

0800334c <_fwalk_reent>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	4606      	mov	r6, r0
 8003352:	4688      	mov	r8, r1
 8003354:	2700      	movs	r7, #0
 8003356:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800335a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800335e:	f1b9 0901 	subs.w	r9, r9, #1
 8003362:	d505      	bpl.n	8003370 <_fwalk_reent+0x24>
 8003364:	6824      	ldr	r4, [r4, #0]
 8003366:	2c00      	cmp	r4, #0
 8003368:	d1f7      	bne.n	800335a <_fwalk_reent+0xe>
 800336a:	4638      	mov	r0, r7
 800336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003370:	89ab      	ldrh	r3, [r5, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d907      	bls.n	8003386 <_fwalk_reent+0x3a>
 8003376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800337a:	3301      	adds	r3, #1
 800337c:	d003      	beq.n	8003386 <_fwalk_reent+0x3a>
 800337e:	4629      	mov	r1, r5
 8003380:	4630      	mov	r0, r6
 8003382:	47c0      	blx	r8
 8003384:	4307      	orrs	r7, r0
 8003386:	3568      	adds	r5, #104	; 0x68
 8003388:	e7e9      	b.n	800335e <_fwalk_reent+0x12>

0800338a <__retarget_lock_init_recursive>:
 800338a:	4770      	bx	lr

0800338c <__retarget_lock_acquire_recursive>:
 800338c:	4770      	bx	lr

0800338e <__retarget_lock_release_recursive>:
 800338e:	4770      	bx	lr

08003390 <__swhatbuf_r>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	460e      	mov	r6, r1
 8003394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003398:	4614      	mov	r4, r2
 800339a:	2900      	cmp	r1, #0
 800339c:	461d      	mov	r5, r3
 800339e:	b096      	sub	sp, #88	; 0x58
 80033a0:	da07      	bge.n	80033b2 <__swhatbuf_r+0x22>
 80033a2:	2300      	movs	r3, #0
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	89b3      	ldrh	r3, [r6, #12]
 80033a8:	061a      	lsls	r2, r3, #24
 80033aa:	d410      	bmi.n	80033ce <__swhatbuf_r+0x3e>
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	e00e      	b.n	80033d0 <__swhatbuf_r+0x40>
 80033b2:	466a      	mov	r2, sp
 80033b4:	f000 fc5a 	bl	8003c6c <_fstat_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	dbf2      	blt.n	80033a2 <__swhatbuf_r+0x12>
 80033bc:	9a01      	ldr	r2, [sp, #4]
 80033be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033c6:	425a      	negs	r2, r3
 80033c8:	415a      	adcs	r2, r3
 80033ca:	602a      	str	r2, [r5, #0]
 80033cc:	e7ee      	b.n	80033ac <__swhatbuf_r+0x1c>
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	2000      	movs	r0, #0
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	b016      	add	sp, #88	; 0x58
 80033d6:	bd70      	pop	{r4, r5, r6, pc}

080033d8 <__smakebuf_r>:
 80033d8:	898b      	ldrh	r3, [r1, #12]
 80033da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033dc:	079d      	lsls	r5, r3, #30
 80033de:	4606      	mov	r6, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	d507      	bpl.n	80033f4 <__smakebuf_r+0x1c>
 80033e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	6123      	str	r3, [r4, #16]
 80033ec:	2301      	movs	r3, #1
 80033ee:	6163      	str	r3, [r4, #20]
 80033f0:	b002      	add	sp, #8
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	466a      	mov	r2, sp
 80033f6:	ab01      	add	r3, sp, #4
 80033f8:	f7ff ffca 	bl	8003390 <__swhatbuf_r>
 80033fc:	9900      	ldr	r1, [sp, #0]
 80033fe:	4605      	mov	r5, r0
 8003400:	4630      	mov	r0, r6
 8003402:	f000 f875 	bl	80034f0 <_malloc_r>
 8003406:	b948      	cbnz	r0, 800341c <__smakebuf_r+0x44>
 8003408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340c:	059a      	lsls	r2, r3, #22
 800340e:	d4ef      	bmi.n	80033f0 <__smakebuf_r+0x18>
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	e7e3      	b.n	80033e4 <__smakebuf_r+0xc>
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <__smakebuf_r+0x7c>)
 800341e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	6020      	str	r0, [r4, #0]
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	9b00      	ldr	r3, [sp, #0]
 800342c:	6120      	str	r0, [r4, #16]
 800342e:	6163      	str	r3, [r4, #20]
 8003430:	9b01      	ldr	r3, [sp, #4]
 8003432:	b15b      	cbz	r3, 800344c <__smakebuf_r+0x74>
 8003434:	4630      	mov	r0, r6
 8003436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800343a:	f000 fc29 	bl	8003c90 <_isatty_r>
 800343e:	b128      	cbz	r0, 800344c <__smakebuf_r+0x74>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	89a0      	ldrh	r0, [r4, #12]
 800344e:	4305      	orrs	r5, r0
 8003450:	81a5      	strh	r5, [r4, #12]
 8003452:	e7cd      	b.n	80033f0 <__smakebuf_r+0x18>
 8003454:	080031e9 	.word	0x080031e9

08003458 <_free_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4605      	mov	r5, r0
 800345c:	2900      	cmp	r1, #0
 800345e:	d043      	beq.n	80034e8 <_free_r+0x90>
 8003460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003464:	1f0c      	subs	r4, r1, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfb8      	it	lt
 800346a:	18e4      	addlt	r4, r4, r3
 800346c:	f000 fc40 	bl	8003cf0 <__malloc_lock>
 8003470:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <_free_r+0x94>)
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	4610      	mov	r0, r2
 8003476:	b933      	cbnz	r3, 8003486 <_free_r+0x2e>
 8003478:	6063      	str	r3, [r4, #4]
 800347a:	6014      	str	r4, [r2, #0]
 800347c:	4628      	mov	r0, r5
 800347e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003482:	f000 bc3b 	b.w	8003cfc <__malloc_unlock>
 8003486:	42a3      	cmp	r3, r4
 8003488:	d90a      	bls.n	80034a0 <_free_r+0x48>
 800348a:	6821      	ldr	r1, [r4, #0]
 800348c:	1862      	adds	r2, r4, r1
 800348e:	4293      	cmp	r3, r2
 8003490:	bf01      	itttt	eq
 8003492:	681a      	ldreq	r2, [r3, #0]
 8003494:	685b      	ldreq	r3, [r3, #4]
 8003496:	1852      	addeq	r2, r2, r1
 8003498:	6022      	streq	r2, [r4, #0]
 800349a:	6063      	str	r3, [r4, #4]
 800349c:	6004      	str	r4, [r0, #0]
 800349e:	e7ed      	b.n	800347c <_free_r+0x24>
 80034a0:	461a      	mov	r2, r3
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b10b      	cbz	r3, 80034aa <_free_r+0x52>
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	d9fa      	bls.n	80034a0 <_free_r+0x48>
 80034aa:	6811      	ldr	r1, [r2, #0]
 80034ac:	1850      	adds	r0, r2, r1
 80034ae:	42a0      	cmp	r0, r4
 80034b0:	d10b      	bne.n	80034ca <_free_r+0x72>
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	4401      	add	r1, r0
 80034b6:	1850      	adds	r0, r2, r1
 80034b8:	4283      	cmp	r3, r0
 80034ba:	6011      	str	r1, [r2, #0]
 80034bc:	d1de      	bne.n	800347c <_free_r+0x24>
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4401      	add	r1, r0
 80034c4:	6011      	str	r1, [r2, #0]
 80034c6:	6053      	str	r3, [r2, #4]
 80034c8:	e7d8      	b.n	800347c <_free_r+0x24>
 80034ca:	d902      	bls.n	80034d2 <_free_r+0x7a>
 80034cc:	230c      	movs	r3, #12
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	e7d4      	b.n	800347c <_free_r+0x24>
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	1821      	adds	r1, r4, r0
 80034d6:	428b      	cmp	r3, r1
 80034d8:	bf01      	itttt	eq
 80034da:	6819      	ldreq	r1, [r3, #0]
 80034dc:	685b      	ldreq	r3, [r3, #4]
 80034de:	1809      	addeq	r1, r1, r0
 80034e0:	6021      	streq	r1, [r4, #0]
 80034e2:	6063      	str	r3, [r4, #4]
 80034e4:	6054      	str	r4, [r2, #4]
 80034e6:	e7c9      	b.n	800347c <_free_r+0x24>
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
 80034ea:	bf00      	nop
 80034ec:	20000094 	.word	0x20000094

080034f0 <_malloc_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	1ccd      	adds	r5, r1, #3
 80034f4:	f025 0503 	bic.w	r5, r5, #3
 80034f8:	3508      	adds	r5, #8
 80034fa:	2d0c      	cmp	r5, #12
 80034fc:	bf38      	it	cc
 80034fe:	250c      	movcc	r5, #12
 8003500:	2d00      	cmp	r5, #0
 8003502:	4606      	mov	r6, r0
 8003504:	db01      	blt.n	800350a <_malloc_r+0x1a>
 8003506:	42a9      	cmp	r1, r5
 8003508:	d903      	bls.n	8003512 <_malloc_r+0x22>
 800350a:	230c      	movs	r3, #12
 800350c:	6033      	str	r3, [r6, #0]
 800350e:	2000      	movs	r0, #0
 8003510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003512:	f000 fbed 	bl	8003cf0 <__malloc_lock>
 8003516:	4921      	ldr	r1, [pc, #132]	; (800359c <_malloc_r+0xac>)
 8003518:	680a      	ldr	r2, [r1, #0]
 800351a:	4614      	mov	r4, r2
 800351c:	b99c      	cbnz	r4, 8003546 <_malloc_r+0x56>
 800351e:	4f20      	ldr	r7, [pc, #128]	; (80035a0 <_malloc_r+0xb0>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b923      	cbnz	r3, 800352e <_malloc_r+0x3e>
 8003524:	4621      	mov	r1, r4
 8003526:	4630      	mov	r0, r6
 8003528:	f000 fb2a 	bl	8003b80 <_sbrk_r>
 800352c:	6038      	str	r0, [r7, #0]
 800352e:	4629      	mov	r1, r5
 8003530:	4630      	mov	r0, r6
 8003532:	f000 fb25 	bl	8003b80 <_sbrk_r>
 8003536:	1c43      	adds	r3, r0, #1
 8003538:	d123      	bne.n	8003582 <_malloc_r+0x92>
 800353a:	230c      	movs	r3, #12
 800353c:	4630      	mov	r0, r6
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f000 fbdc 	bl	8003cfc <__malloc_unlock>
 8003544:	e7e3      	b.n	800350e <_malloc_r+0x1e>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	1b5b      	subs	r3, r3, r5
 800354a:	d417      	bmi.n	800357c <_malloc_r+0x8c>
 800354c:	2b0b      	cmp	r3, #11
 800354e:	d903      	bls.n	8003558 <_malloc_r+0x68>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	441c      	add	r4, r3
 8003554:	6025      	str	r5, [r4, #0]
 8003556:	e004      	b.n	8003562 <_malloc_r+0x72>
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	42a2      	cmp	r2, r4
 800355c:	bf0c      	ite	eq
 800355e:	600b      	streq	r3, [r1, #0]
 8003560:	6053      	strne	r3, [r2, #4]
 8003562:	4630      	mov	r0, r6
 8003564:	f000 fbca 	bl	8003cfc <__malloc_unlock>
 8003568:	f104 000b 	add.w	r0, r4, #11
 800356c:	1d23      	adds	r3, r4, #4
 800356e:	f020 0007 	bic.w	r0, r0, #7
 8003572:	1ac2      	subs	r2, r0, r3
 8003574:	d0cc      	beq.n	8003510 <_malloc_r+0x20>
 8003576:	1a1b      	subs	r3, r3, r0
 8003578:	50a3      	str	r3, [r4, r2]
 800357a:	e7c9      	b.n	8003510 <_malloc_r+0x20>
 800357c:	4622      	mov	r2, r4
 800357e:	6864      	ldr	r4, [r4, #4]
 8003580:	e7cc      	b.n	800351c <_malloc_r+0x2c>
 8003582:	1cc4      	adds	r4, r0, #3
 8003584:	f024 0403 	bic.w	r4, r4, #3
 8003588:	42a0      	cmp	r0, r4
 800358a:	d0e3      	beq.n	8003554 <_malloc_r+0x64>
 800358c:	1a21      	subs	r1, r4, r0
 800358e:	4630      	mov	r0, r6
 8003590:	f000 faf6 	bl	8003b80 <_sbrk_r>
 8003594:	3001      	adds	r0, #1
 8003596:	d1dd      	bne.n	8003554 <_malloc_r+0x64>
 8003598:	e7cf      	b.n	800353a <_malloc_r+0x4a>
 800359a:	bf00      	nop
 800359c:	20000094 	.word	0x20000094
 80035a0:	20000098 	.word	0x20000098

080035a4 <__sfputc_r>:
 80035a4:	6893      	ldr	r3, [r2, #8]
 80035a6:	b410      	push	{r4}
 80035a8:	3b01      	subs	r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	6093      	str	r3, [r2, #8]
 80035ae:	da07      	bge.n	80035c0 <__sfputc_r+0x1c>
 80035b0:	6994      	ldr	r4, [r2, #24]
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	db01      	blt.n	80035ba <__sfputc_r+0x16>
 80035b6:	290a      	cmp	r1, #10
 80035b8:	d102      	bne.n	80035c0 <__sfputc_r+0x1c>
 80035ba:	bc10      	pop	{r4}
 80035bc:	f7ff bc6e 	b.w	8002e9c <__swbuf_r>
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	1c58      	adds	r0, r3, #1
 80035c4:	6010      	str	r0, [r2, #0]
 80035c6:	7019      	strb	r1, [r3, #0]
 80035c8:	4608      	mov	r0, r1
 80035ca:	bc10      	pop	{r4}
 80035cc:	4770      	bx	lr

080035ce <__sfputs_r>:
 80035ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d0:	4606      	mov	r6, r0
 80035d2:	460f      	mov	r7, r1
 80035d4:	4614      	mov	r4, r2
 80035d6:	18d5      	adds	r5, r2, r3
 80035d8:	42ac      	cmp	r4, r5
 80035da:	d101      	bne.n	80035e0 <__sfputs_r+0x12>
 80035dc:	2000      	movs	r0, #0
 80035de:	e007      	b.n	80035f0 <__sfputs_r+0x22>
 80035e0:	463a      	mov	r2, r7
 80035e2:	4630      	mov	r0, r6
 80035e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e8:	f7ff ffdc 	bl	80035a4 <__sfputc_r>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d1f3      	bne.n	80035d8 <__sfputs_r+0xa>
 80035f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035f4 <_vfiprintf_r>:
 80035f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f8:	460d      	mov	r5, r1
 80035fa:	4614      	mov	r4, r2
 80035fc:	4698      	mov	r8, r3
 80035fe:	4606      	mov	r6, r0
 8003600:	b09d      	sub	sp, #116	; 0x74
 8003602:	b118      	cbz	r0, 800360c <_vfiprintf_r+0x18>
 8003604:	6983      	ldr	r3, [r0, #24]
 8003606:	b90b      	cbnz	r3, 800360c <_vfiprintf_r+0x18>
 8003608:	f7ff fe22 	bl	8003250 <__sinit>
 800360c:	4b89      	ldr	r3, [pc, #548]	; (8003834 <_vfiprintf_r+0x240>)
 800360e:	429d      	cmp	r5, r3
 8003610:	d11b      	bne.n	800364a <_vfiprintf_r+0x56>
 8003612:	6875      	ldr	r5, [r6, #4]
 8003614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003616:	07d9      	lsls	r1, r3, #31
 8003618:	d405      	bmi.n	8003626 <_vfiprintf_r+0x32>
 800361a:	89ab      	ldrh	r3, [r5, #12]
 800361c:	059a      	lsls	r2, r3, #22
 800361e:	d402      	bmi.n	8003626 <_vfiprintf_r+0x32>
 8003620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003622:	f7ff feb3 	bl	800338c <__retarget_lock_acquire_recursive>
 8003626:	89ab      	ldrh	r3, [r5, #12]
 8003628:	071b      	lsls	r3, r3, #28
 800362a:	d501      	bpl.n	8003630 <_vfiprintf_r+0x3c>
 800362c:	692b      	ldr	r3, [r5, #16]
 800362e:	b9eb      	cbnz	r3, 800366c <_vfiprintf_r+0x78>
 8003630:	4629      	mov	r1, r5
 8003632:	4630      	mov	r0, r6
 8003634:	f7ff fc84 	bl	8002f40 <__swsetup_r>
 8003638:	b1c0      	cbz	r0, 800366c <_vfiprintf_r+0x78>
 800363a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800363c:	07dc      	lsls	r4, r3, #31
 800363e:	d50e      	bpl.n	800365e <_vfiprintf_r+0x6a>
 8003640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003644:	b01d      	add	sp, #116	; 0x74
 8003646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800364a:	4b7b      	ldr	r3, [pc, #492]	; (8003838 <_vfiprintf_r+0x244>)
 800364c:	429d      	cmp	r5, r3
 800364e:	d101      	bne.n	8003654 <_vfiprintf_r+0x60>
 8003650:	68b5      	ldr	r5, [r6, #8]
 8003652:	e7df      	b.n	8003614 <_vfiprintf_r+0x20>
 8003654:	4b79      	ldr	r3, [pc, #484]	; (800383c <_vfiprintf_r+0x248>)
 8003656:	429d      	cmp	r5, r3
 8003658:	bf08      	it	eq
 800365a:	68f5      	ldreq	r5, [r6, #12]
 800365c:	e7da      	b.n	8003614 <_vfiprintf_r+0x20>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	0598      	lsls	r0, r3, #22
 8003662:	d4ed      	bmi.n	8003640 <_vfiprintf_r+0x4c>
 8003664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003666:	f7ff fe92 	bl	800338e <__retarget_lock_release_recursive>
 800366a:	e7e9      	b.n	8003640 <_vfiprintf_r+0x4c>
 800366c:	2300      	movs	r3, #0
 800366e:	9309      	str	r3, [sp, #36]	; 0x24
 8003670:	2320      	movs	r3, #32
 8003672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003676:	2330      	movs	r3, #48	; 0x30
 8003678:	f04f 0901 	mov.w	r9, #1
 800367c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003680:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003840 <_vfiprintf_r+0x24c>
 8003684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003688:	4623      	mov	r3, r4
 800368a:	469a      	mov	sl, r3
 800368c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003690:	b10a      	cbz	r2, 8003696 <_vfiprintf_r+0xa2>
 8003692:	2a25      	cmp	r2, #37	; 0x25
 8003694:	d1f9      	bne.n	800368a <_vfiprintf_r+0x96>
 8003696:	ebba 0b04 	subs.w	fp, sl, r4
 800369a:	d00b      	beq.n	80036b4 <_vfiprintf_r+0xc0>
 800369c:	465b      	mov	r3, fp
 800369e:	4622      	mov	r2, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7ff ff93 	bl	80035ce <__sfputs_r>
 80036a8:	3001      	adds	r0, #1
 80036aa:	f000 80aa 	beq.w	8003802 <_vfiprintf_r+0x20e>
 80036ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036b0:	445a      	add	r2, fp
 80036b2:	9209      	str	r2, [sp, #36]	; 0x24
 80036b4:	f89a 3000 	ldrb.w	r3, [sl]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a2 	beq.w	8003802 <_vfiprintf_r+0x20e>
 80036be:	2300      	movs	r3, #0
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c8:	f10a 0a01 	add.w	sl, sl, #1
 80036cc:	9304      	str	r3, [sp, #16]
 80036ce:	9307      	str	r3, [sp, #28]
 80036d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036d4:	931a      	str	r3, [sp, #104]	; 0x68
 80036d6:	4654      	mov	r4, sl
 80036d8:	2205      	movs	r2, #5
 80036da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036de:	4858      	ldr	r0, [pc, #352]	; (8003840 <_vfiprintf_r+0x24c>)
 80036e0:	f000 faf8 	bl	8003cd4 <memchr>
 80036e4:	9a04      	ldr	r2, [sp, #16]
 80036e6:	b9d8      	cbnz	r0, 8003720 <_vfiprintf_r+0x12c>
 80036e8:	06d1      	lsls	r1, r2, #27
 80036ea:	bf44      	itt	mi
 80036ec:	2320      	movmi	r3, #32
 80036ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f2:	0713      	lsls	r3, r2, #28
 80036f4:	bf44      	itt	mi
 80036f6:	232b      	movmi	r3, #43	; 0x2b
 80036f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003700:	2b2a      	cmp	r3, #42	; 0x2a
 8003702:	d015      	beq.n	8003730 <_vfiprintf_r+0x13c>
 8003704:	4654      	mov	r4, sl
 8003706:	2000      	movs	r0, #0
 8003708:	f04f 0c0a 	mov.w	ip, #10
 800370c:	9a07      	ldr	r2, [sp, #28]
 800370e:	4621      	mov	r1, r4
 8003710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003714:	3b30      	subs	r3, #48	; 0x30
 8003716:	2b09      	cmp	r3, #9
 8003718:	d94e      	bls.n	80037b8 <_vfiprintf_r+0x1c4>
 800371a:	b1b0      	cbz	r0, 800374a <_vfiprintf_r+0x156>
 800371c:	9207      	str	r2, [sp, #28]
 800371e:	e014      	b.n	800374a <_vfiprintf_r+0x156>
 8003720:	eba0 0308 	sub.w	r3, r0, r8
 8003724:	fa09 f303 	lsl.w	r3, r9, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	46a2      	mov	sl, r4
 800372c:	9304      	str	r3, [sp, #16]
 800372e:	e7d2      	b.n	80036d6 <_vfiprintf_r+0xe2>
 8003730:	9b03      	ldr	r3, [sp, #12]
 8003732:	1d19      	adds	r1, r3, #4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	9103      	str	r1, [sp, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	bfbb      	ittet	lt
 800373c:	425b      	neglt	r3, r3
 800373e:	f042 0202 	orrlt.w	r2, r2, #2
 8003742:	9307      	strge	r3, [sp, #28]
 8003744:	9307      	strlt	r3, [sp, #28]
 8003746:	bfb8      	it	lt
 8003748:	9204      	strlt	r2, [sp, #16]
 800374a:	7823      	ldrb	r3, [r4, #0]
 800374c:	2b2e      	cmp	r3, #46	; 0x2e
 800374e:	d10c      	bne.n	800376a <_vfiprintf_r+0x176>
 8003750:	7863      	ldrb	r3, [r4, #1]
 8003752:	2b2a      	cmp	r3, #42	; 0x2a
 8003754:	d135      	bne.n	80037c2 <_vfiprintf_r+0x1ce>
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	3402      	adds	r4, #2
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfb8      	it	lt
 8003764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003768:	9305      	str	r3, [sp, #20]
 800376a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003850 <_vfiprintf_r+0x25c>
 800376e:	2203      	movs	r2, #3
 8003770:	4650      	mov	r0, sl
 8003772:	7821      	ldrb	r1, [r4, #0]
 8003774:	f000 faae 	bl	8003cd4 <memchr>
 8003778:	b140      	cbz	r0, 800378c <_vfiprintf_r+0x198>
 800377a:	2340      	movs	r3, #64	; 0x40
 800377c:	eba0 000a 	sub.w	r0, r0, sl
 8003780:	fa03 f000 	lsl.w	r0, r3, r0
 8003784:	9b04      	ldr	r3, [sp, #16]
 8003786:	3401      	adds	r4, #1
 8003788:	4303      	orrs	r3, r0
 800378a:	9304      	str	r3, [sp, #16]
 800378c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003790:	2206      	movs	r2, #6
 8003792:	482c      	ldr	r0, [pc, #176]	; (8003844 <_vfiprintf_r+0x250>)
 8003794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003798:	f000 fa9c 	bl	8003cd4 <memchr>
 800379c:	2800      	cmp	r0, #0
 800379e:	d03f      	beq.n	8003820 <_vfiprintf_r+0x22c>
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <_vfiprintf_r+0x254>)
 80037a2:	bb1b      	cbnz	r3, 80037ec <_vfiprintf_r+0x1f8>
 80037a4:	9b03      	ldr	r3, [sp, #12]
 80037a6:	3307      	adds	r3, #7
 80037a8:	f023 0307 	bic.w	r3, r3, #7
 80037ac:	3308      	adds	r3, #8
 80037ae:	9303      	str	r3, [sp, #12]
 80037b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b2:	443b      	add	r3, r7
 80037b4:	9309      	str	r3, [sp, #36]	; 0x24
 80037b6:	e767      	b.n	8003688 <_vfiprintf_r+0x94>
 80037b8:	460c      	mov	r4, r1
 80037ba:	2001      	movs	r0, #1
 80037bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80037c0:	e7a5      	b.n	800370e <_vfiprintf_r+0x11a>
 80037c2:	2300      	movs	r3, #0
 80037c4:	f04f 0c0a 	mov.w	ip, #10
 80037c8:	4619      	mov	r1, r3
 80037ca:	3401      	adds	r4, #1
 80037cc:	9305      	str	r3, [sp, #20]
 80037ce:	4620      	mov	r0, r4
 80037d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037d4:	3a30      	subs	r2, #48	; 0x30
 80037d6:	2a09      	cmp	r2, #9
 80037d8:	d903      	bls.n	80037e2 <_vfiprintf_r+0x1ee>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0c5      	beq.n	800376a <_vfiprintf_r+0x176>
 80037de:	9105      	str	r1, [sp, #20]
 80037e0:	e7c3      	b.n	800376a <_vfiprintf_r+0x176>
 80037e2:	4604      	mov	r4, r0
 80037e4:	2301      	movs	r3, #1
 80037e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80037ea:	e7f0      	b.n	80037ce <_vfiprintf_r+0x1da>
 80037ec:	ab03      	add	r3, sp, #12
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	462a      	mov	r2, r5
 80037f2:	4630      	mov	r0, r6
 80037f4:	4b15      	ldr	r3, [pc, #84]	; (800384c <_vfiprintf_r+0x258>)
 80037f6:	a904      	add	r1, sp, #16
 80037f8:	f3af 8000 	nop.w
 80037fc:	4607      	mov	r7, r0
 80037fe:	1c78      	adds	r0, r7, #1
 8003800:	d1d6      	bne.n	80037b0 <_vfiprintf_r+0x1bc>
 8003802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003804:	07d9      	lsls	r1, r3, #31
 8003806:	d405      	bmi.n	8003814 <_vfiprintf_r+0x220>
 8003808:	89ab      	ldrh	r3, [r5, #12]
 800380a:	059a      	lsls	r2, r3, #22
 800380c:	d402      	bmi.n	8003814 <_vfiprintf_r+0x220>
 800380e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003810:	f7ff fdbd 	bl	800338e <__retarget_lock_release_recursive>
 8003814:	89ab      	ldrh	r3, [r5, #12]
 8003816:	065b      	lsls	r3, r3, #25
 8003818:	f53f af12 	bmi.w	8003640 <_vfiprintf_r+0x4c>
 800381c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800381e:	e711      	b.n	8003644 <_vfiprintf_r+0x50>
 8003820:	ab03      	add	r3, sp, #12
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	462a      	mov	r2, r5
 8003826:	4630      	mov	r0, r6
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <_vfiprintf_r+0x258>)
 800382a:	a904      	add	r1, sp, #16
 800382c:	f000 f882 	bl	8003934 <_printf_i>
 8003830:	e7e4      	b.n	80037fc <_vfiprintf_r+0x208>
 8003832:	bf00      	nop
 8003834:	08003df0 	.word	0x08003df0
 8003838:	08003e10 	.word	0x08003e10
 800383c:	08003dd0 	.word	0x08003dd0
 8003840:	08003e30 	.word	0x08003e30
 8003844:	08003e3a 	.word	0x08003e3a
 8003848:	00000000 	.word	0x00000000
 800384c:	080035cf 	.word	0x080035cf
 8003850:	08003e36 	.word	0x08003e36

08003854 <_printf_common>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	4616      	mov	r6, r2
 800385a:	4699      	mov	r9, r3
 800385c:	688a      	ldr	r2, [r1, #8]
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4607      	mov	r7, r0
 8003862:	4293      	cmp	r3, r2
 8003864:	bfb8      	it	lt
 8003866:	4613      	movlt	r3, r2
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800386e:	460c      	mov	r4, r1
 8003870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003874:	b10a      	cbz	r2, 800387a <_printf_common+0x26>
 8003876:	3301      	adds	r3, #1
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	0699      	lsls	r1, r3, #26
 800387e:	bf42      	ittt	mi
 8003880:	6833      	ldrmi	r3, [r6, #0]
 8003882:	3302      	addmi	r3, #2
 8003884:	6033      	strmi	r3, [r6, #0]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	f015 0506 	ands.w	r5, r5, #6
 800388c:	d106      	bne.n	800389c <_printf_common+0x48>
 800388e:	f104 0a19 	add.w	sl, r4, #25
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	6832      	ldr	r2, [r6, #0]
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	42ab      	cmp	r3, r5
 800389a:	dc28      	bgt.n	80038ee <_printf_common+0x9a>
 800389c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038a0:	1e13      	subs	r3, r2, #0
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	bf18      	it	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	0692      	lsls	r2, r2, #26
 80038aa:	d42d      	bmi.n	8003908 <_printf_common+0xb4>
 80038ac:	4649      	mov	r1, r9
 80038ae:	4638      	mov	r0, r7
 80038b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b4:	47c0      	blx	r8
 80038b6:	3001      	adds	r0, #1
 80038b8:	d020      	beq.n	80038fc <_printf_common+0xa8>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	68e5      	ldr	r5, [r4, #12]
 80038be:	f003 0306 	and.w	r3, r3, #6
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf18      	it	ne
 80038c6:	2500      	movne	r5, #0
 80038c8:	6832      	ldr	r2, [r6, #0]
 80038ca:	f04f 0600 	mov.w	r6, #0
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	bf08      	it	eq
 80038d2:	1aad      	subeq	r5, r5, r2
 80038d4:	6922      	ldr	r2, [r4, #16]
 80038d6:	bf08      	it	eq
 80038d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038dc:	4293      	cmp	r3, r2
 80038de:	bfc4      	itt	gt
 80038e0:	1a9b      	subgt	r3, r3, r2
 80038e2:	18ed      	addgt	r5, r5, r3
 80038e4:	341a      	adds	r4, #26
 80038e6:	42b5      	cmp	r5, r6
 80038e8:	d11a      	bne.n	8003920 <_printf_common+0xcc>
 80038ea:	2000      	movs	r0, #0
 80038ec:	e008      	b.n	8003900 <_printf_common+0xac>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4652      	mov	r2, sl
 80038f2:	4649      	mov	r1, r9
 80038f4:	4638      	mov	r0, r7
 80038f6:	47c0      	blx	r8
 80038f8:	3001      	adds	r0, #1
 80038fa:	d103      	bne.n	8003904 <_printf_common+0xb0>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	3501      	adds	r5, #1
 8003906:	e7c4      	b.n	8003892 <_printf_common+0x3e>
 8003908:	2030      	movs	r0, #48	; 0x30
 800390a:	18e1      	adds	r1, r4, r3
 800390c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003916:	4422      	add	r2, r4
 8003918:	3302      	adds	r3, #2
 800391a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800391e:	e7c5      	b.n	80038ac <_printf_common+0x58>
 8003920:	2301      	movs	r3, #1
 8003922:	4622      	mov	r2, r4
 8003924:	4649      	mov	r1, r9
 8003926:	4638      	mov	r0, r7
 8003928:	47c0      	blx	r8
 800392a:	3001      	adds	r0, #1
 800392c:	d0e6      	beq.n	80038fc <_printf_common+0xa8>
 800392e:	3601      	adds	r6, #1
 8003930:	e7d9      	b.n	80038e6 <_printf_common+0x92>
	...

08003934 <_printf_i>:
 8003934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	460c      	mov	r4, r1
 800393a:	7e27      	ldrb	r7, [r4, #24]
 800393c:	4691      	mov	r9, r2
 800393e:	2f78      	cmp	r7, #120	; 0x78
 8003940:	4680      	mov	r8, r0
 8003942:	469a      	mov	sl, r3
 8003944:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800394a:	d807      	bhi.n	800395c <_printf_i+0x28>
 800394c:	2f62      	cmp	r7, #98	; 0x62
 800394e:	d80a      	bhi.n	8003966 <_printf_i+0x32>
 8003950:	2f00      	cmp	r7, #0
 8003952:	f000 80d9 	beq.w	8003b08 <_printf_i+0x1d4>
 8003956:	2f58      	cmp	r7, #88	; 0x58
 8003958:	f000 80a4 	beq.w	8003aa4 <_printf_i+0x170>
 800395c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003964:	e03a      	b.n	80039dc <_printf_i+0xa8>
 8003966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800396a:	2b15      	cmp	r3, #21
 800396c:	d8f6      	bhi.n	800395c <_printf_i+0x28>
 800396e:	a001      	add	r0, pc, #4	; (adr r0, 8003974 <_printf_i+0x40>)
 8003970:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039e1 	.word	0x080039e1
 800397c:	0800395d 	.word	0x0800395d
 8003980:	0800395d 	.word	0x0800395d
 8003984:	0800395d 	.word	0x0800395d
 8003988:	0800395d 	.word	0x0800395d
 800398c:	080039e1 	.word	0x080039e1
 8003990:	0800395d 	.word	0x0800395d
 8003994:	0800395d 	.word	0x0800395d
 8003998:	0800395d 	.word	0x0800395d
 800399c:	0800395d 	.word	0x0800395d
 80039a0:	08003aef 	.word	0x08003aef
 80039a4:	08003a11 	.word	0x08003a11
 80039a8:	08003ad1 	.word	0x08003ad1
 80039ac:	0800395d 	.word	0x0800395d
 80039b0:	0800395d 	.word	0x0800395d
 80039b4:	08003b11 	.word	0x08003b11
 80039b8:	0800395d 	.word	0x0800395d
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	0800395d 	.word	0x0800395d
 80039c4:	0800395d 	.word	0x0800395d
 80039c8:	08003ad9 	.word	0x08003ad9
 80039cc:	680b      	ldr	r3, [r1, #0]
 80039ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	600a      	str	r2, [r1, #0]
 80039d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039dc:	2301      	movs	r3, #1
 80039de:	e0a4      	b.n	8003b2a <_printf_i+0x1f6>
 80039e0:	6825      	ldr	r5, [r4, #0]
 80039e2:	6808      	ldr	r0, [r1, #0]
 80039e4:	062e      	lsls	r6, r5, #24
 80039e6:	f100 0304 	add.w	r3, r0, #4
 80039ea:	d50a      	bpl.n	8003a02 <_printf_i+0xce>
 80039ec:	6805      	ldr	r5, [r0, #0]
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	2d00      	cmp	r5, #0
 80039f2:	da03      	bge.n	80039fc <_printf_i+0xc8>
 80039f4:	232d      	movs	r3, #45	; 0x2d
 80039f6:	426d      	negs	r5, r5
 80039f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fc:	230a      	movs	r3, #10
 80039fe:	485e      	ldr	r0, [pc, #376]	; (8003b78 <_printf_i+0x244>)
 8003a00:	e019      	b.n	8003a36 <_printf_i+0x102>
 8003a02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a06:	6805      	ldr	r5, [r0, #0]
 8003a08:	600b      	str	r3, [r1, #0]
 8003a0a:	bf18      	it	ne
 8003a0c:	b22d      	sxthne	r5, r5
 8003a0e:	e7ef      	b.n	80039f0 <_printf_i+0xbc>
 8003a10:	680b      	ldr	r3, [r1, #0]
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	1d18      	adds	r0, r3, #4
 8003a16:	6008      	str	r0, [r1, #0]
 8003a18:	0628      	lsls	r0, r5, #24
 8003a1a:	d501      	bpl.n	8003a20 <_printf_i+0xec>
 8003a1c:	681d      	ldr	r5, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <_printf_i+0xf2>
 8003a20:	0669      	lsls	r1, r5, #25
 8003a22:	d5fb      	bpl.n	8003a1c <_printf_i+0xe8>
 8003a24:	881d      	ldrh	r5, [r3, #0]
 8003a26:	2f6f      	cmp	r7, #111	; 0x6f
 8003a28:	bf0c      	ite	eq
 8003a2a:	2308      	moveq	r3, #8
 8003a2c:	230a      	movne	r3, #10
 8003a2e:	4852      	ldr	r0, [pc, #328]	; (8003b78 <_printf_i+0x244>)
 8003a30:	2100      	movs	r1, #0
 8003a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a36:	6866      	ldr	r6, [r4, #4]
 8003a38:	2e00      	cmp	r6, #0
 8003a3a:	bfa8      	it	ge
 8003a3c:	6821      	ldrge	r1, [r4, #0]
 8003a3e:	60a6      	str	r6, [r4, #8]
 8003a40:	bfa4      	itt	ge
 8003a42:	f021 0104 	bicge.w	r1, r1, #4
 8003a46:	6021      	strge	r1, [r4, #0]
 8003a48:	b90d      	cbnz	r5, 8003a4e <_printf_i+0x11a>
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	d04d      	beq.n	8003aea <_printf_i+0x1b6>
 8003a4e:	4616      	mov	r6, r2
 8003a50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a54:	fb03 5711 	mls	r7, r3, r1, r5
 8003a58:	5dc7      	ldrb	r7, [r0, r7]
 8003a5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a5e:	462f      	mov	r7, r5
 8003a60:	42bb      	cmp	r3, r7
 8003a62:	460d      	mov	r5, r1
 8003a64:	d9f4      	bls.n	8003a50 <_printf_i+0x11c>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d10b      	bne.n	8003a82 <_printf_i+0x14e>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	07df      	lsls	r7, r3, #31
 8003a6e:	d508      	bpl.n	8003a82 <_printf_i+0x14e>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	6861      	ldr	r1, [r4, #4]
 8003a74:	4299      	cmp	r1, r3
 8003a76:	bfde      	ittt	le
 8003a78:	2330      	movle	r3, #48	; 0x30
 8003a7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a7e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003a82:	1b92      	subs	r2, r2, r6
 8003a84:	6122      	str	r2, [r4, #16]
 8003a86:	464b      	mov	r3, r9
 8003a88:	4621      	mov	r1, r4
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	f8cd a000 	str.w	sl, [sp]
 8003a90:	aa03      	add	r2, sp, #12
 8003a92:	f7ff fedf 	bl	8003854 <_printf_common>
 8003a96:	3001      	adds	r0, #1
 8003a98:	d14c      	bne.n	8003b34 <_printf_i+0x200>
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9e:	b004      	add	sp, #16
 8003aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa4:	4834      	ldr	r0, [pc, #208]	; (8003b78 <_printf_i+0x244>)
 8003aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003aaa:	680e      	ldr	r6, [r1, #0]
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ab2:	061f      	lsls	r7, r3, #24
 8003ab4:	600e      	str	r6, [r1, #0]
 8003ab6:	d514      	bpl.n	8003ae2 <_printf_i+0x1ae>
 8003ab8:	07d9      	lsls	r1, r3, #31
 8003aba:	bf44      	itt	mi
 8003abc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ac0:	6023      	strmi	r3, [r4, #0]
 8003ac2:	b91d      	cbnz	r5, 8003acc <_printf_i+0x198>
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	f023 0320 	bic.w	r3, r3, #32
 8003aca:	6023      	str	r3, [r4, #0]
 8003acc:	2310      	movs	r3, #16
 8003ace:	e7af      	b.n	8003a30 <_printf_i+0xfc>
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	f043 0320 	orr.w	r3, r3, #32
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	2378      	movs	r3, #120	; 0x78
 8003ada:	4828      	ldr	r0, [pc, #160]	; (8003b7c <_printf_i+0x248>)
 8003adc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ae0:	e7e3      	b.n	8003aaa <_printf_i+0x176>
 8003ae2:	065e      	lsls	r6, r3, #25
 8003ae4:	bf48      	it	mi
 8003ae6:	b2ad      	uxthmi	r5, r5
 8003ae8:	e7e6      	b.n	8003ab8 <_printf_i+0x184>
 8003aea:	4616      	mov	r6, r2
 8003aec:	e7bb      	b.n	8003a66 <_printf_i+0x132>
 8003aee:	680b      	ldr	r3, [r1, #0]
 8003af0:	6826      	ldr	r6, [r4, #0]
 8003af2:	1d1d      	adds	r5, r3, #4
 8003af4:	6960      	ldr	r0, [r4, #20]
 8003af6:	600d      	str	r5, [r1, #0]
 8003af8:	0635      	lsls	r5, r6, #24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	d501      	bpl.n	8003b02 <_printf_i+0x1ce>
 8003afe:	6018      	str	r0, [r3, #0]
 8003b00:	e002      	b.n	8003b08 <_printf_i+0x1d4>
 8003b02:	0671      	lsls	r1, r6, #25
 8003b04:	d5fb      	bpl.n	8003afe <_printf_i+0x1ca>
 8003b06:	8018      	strh	r0, [r3, #0]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4616      	mov	r6, r2
 8003b0c:	6123      	str	r3, [r4, #16]
 8003b0e:	e7ba      	b.n	8003a86 <_printf_i+0x152>
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	600a      	str	r2, [r1, #0]
 8003b16:	681e      	ldr	r6, [r3, #0]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	6862      	ldr	r2, [r4, #4]
 8003b1e:	f000 f8d9 	bl	8003cd4 <memchr>
 8003b22:	b108      	cbz	r0, 8003b28 <_printf_i+0x1f4>
 8003b24:	1b80      	subs	r0, r0, r6
 8003b26:	6060      	str	r0, [r4, #4]
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	6123      	str	r3, [r4, #16]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b32:	e7a8      	b.n	8003a86 <_printf_i+0x152>
 8003b34:	4632      	mov	r2, r6
 8003b36:	4649      	mov	r1, r9
 8003b38:	4640      	mov	r0, r8
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	47d0      	blx	sl
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0ab      	beq.n	8003a9a <_printf_i+0x166>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	079b      	lsls	r3, r3, #30
 8003b46:	d413      	bmi.n	8003b70 <_printf_i+0x23c>
 8003b48:	68e0      	ldr	r0, [r4, #12]
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	bfb8      	it	lt
 8003b50:	4618      	movlt	r0, r3
 8003b52:	e7a4      	b.n	8003a9e <_printf_i+0x16a>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4632      	mov	r2, r6
 8003b58:	4649      	mov	r1, r9
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	47d0      	blx	sl
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d09b      	beq.n	8003a9a <_printf_i+0x166>
 8003b62:	3501      	adds	r5, #1
 8003b64:	68e3      	ldr	r3, [r4, #12]
 8003b66:	9903      	ldr	r1, [sp, #12]
 8003b68:	1a5b      	subs	r3, r3, r1
 8003b6a:	42ab      	cmp	r3, r5
 8003b6c:	dcf2      	bgt.n	8003b54 <_printf_i+0x220>
 8003b6e:	e7eb      	b.n	8003b48 <_printf_i+0x214>
 8003b70:	2500      	movs	r5, #0
 8003b72:	f104 0619 	add.w	r6, r4, #25
 8003b76:	e7f5      	b.n	8003b64 <_printf_i+0x230>
 8003b78:	08003e41 	.word	0x08003e41
 8003b7c:	08003e52 	.word	0x08003e52

08003b80 <_sbrk_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	2300      	movs	r3, #0
 8003b84:	4d05      	ldr	r5, [pc, #20]	; (8003b9c <_sbrk_r+0x1c>)
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fc ff12 	bl	80009b4 <_sbrk>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_sbrk_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_sbrk_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	200001bc 	.word	0x200001bc

08003ba0 <__sread>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba8:	f000 f8ae 	bl	8003d08 <_read_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	bfab      	itete	ge
 8003bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003bb4:	181b      	addge	r3, r3, r0
 8003bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bba:	bfac      	ite	ge
 8003bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bbe:	81a3      	strhlt	r3, [r4, #12]
 8003bc0:	bd10      	pop	{r4, pc}

08003bc2 <__swrite>:
 8003bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	898b      	ldrh	r3, [r1, #12]
 8003bca:	4605      	mov	r5, r0
 8003bcc:	05db      	lsls	r3, r3, #23
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	d505      	bpl.n	8003be0 <__swrite+0x1e>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bdc:	f000 f868 	bl	8003cb0 <_lseek_r>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	4632      	mov	r2, r6
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	4628      	mov	r0, r5
 8003bec:	463b      	mov	r3, r7
 8003bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf6:	f000 b817 	b.w	8003c28 <_write_r>

08003bfa <__sseek>:
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c02:	f000 f855 	bl	8003cb0 <_lseek_r>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	bf15      	itete	ne
 8003c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c16:	81a3      	strheq	r3, [r4, #12]
 8003c18:	bf18      	it	ne
 8003c1a:	81a3      	strhne	r3, [r4, #12]
 8003c1c:	bd10      	pop	{r4, pc}

08003c1e <__sclose>:
 8003c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c22:	f000 b813 	b.w	8003c4c <_close_r>
	...

08003c28 <_write_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	2200      	movs	r2, #0
 8003c32:	4d05      	ldr	r5, [pc, #20]	; (8003c48 <_write_r+0x20>)
 8003c34:	602a      	str	r2, [r5, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f7fc faae 	bl	8000198 <_write>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_write_r+0x1e>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_write_r+0x1e>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	200001bc 	.word	0x200001bc

08003c4c <_close_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	2300      	movs	r3, #0
 8003c50:	4d05      	ldr	r5, [pc, #20]	; (8003c68 <_close_r+0x1c>)
 8003c52:	4604      	mov	r4, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	f7fc fe7b 	bl	8000952 <_close>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_close_r+0x1a>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_close_r+0x1a>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	200001bc 	.word	0x200001bc

08003c6c <_fstat_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4d06      	ldr	r5, [pc, #24]	; (8003c8c <_fstat_r+0x20>)
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	f7fc fe75 	bl	8000968 <_fstat>
 8003c7e:	1c43      	adds	r3, r0, #1
 8003c80:	d102      	bne.n	8003c88 <_fstat_r+0x1c>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	b103      	cbz	r3, 8003c88 <_fstat_r+0x1c>
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	bd38      	pop	{r3, r4, r5, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200001bc 	.word	0x200001bc

08003c90 <_isatty_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	2300      	movs	r3, #0
 8003c94:	4d05      	ldr	r5, [pc, #20]	; (8003cac <_isatty_r+0x1c>)
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	f7fc fe73 	bl	8000986 <_isatty>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_isatty_r+0x1a>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_isatty_r+0x1a>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	200001bc 	.word	0x200001bc

08003cb0 <_lseek_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4d05      	ldr	r5, [pc, #20]	; (8003cd0 <_lseek_r+0x20>)
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fc fe6b 	bl	800099a <_lseek>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_lseek_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_lseek_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200001bc 	.word	0x200001bc

08003cd4 <memchr>:
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	b2c9      	uxtb	r1, r1
 8003cda:	4402      	add	r2, r0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	d101      	bne.n	8003ce6 <memchr+0x12>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e003      	b.n	8003cee <memchr+0x1a>
 8003ce6:	7804      	ldrb	r4, [r0, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	428c      	cmp	r4, r1
 8003cec:	d1f6      	bne.n	8003cdc <memchr+0x8>
 8003cee:	bd10      	pop	{r4, pc}

08003cf0 <__malloc_lock>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__malloc_lock+0x8>)
 8003cf2:	f7ff bb4b 	b.w	800338c <__retarget_lock_acquire_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	200001b4 	.word	0x200001b4

08003cfc <__malloc_unlock>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__malloc_unlock+0x8>)
 8003cfe:	f7ff bb46 	b.w	800338e <__retarget_lock_release_recursive>
 8003d02:	bf00      	nop
 8003d04:	200001b4 	.word	0x200001b4

08003d08 <_read_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	2200      	movs	r2, #0
 8003d12:	4d05      	ldr	r5, [pc, #20]	; (8003d28 <_read_r+0x20>)
 8003d14:	602a      	str	r2, [r5, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7fc fdfe 	bl	8000918 <_read>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_read_r+0x1e>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_read_r+0x1e>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	200001bc 	.word	0x200001bc

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
