
HTTP_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c3c  0800f8c8  0800f8c8  0001f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013504  08013504  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013504  08013504  00023504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801350c  0801350c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801350c  0801350c  0002350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013510  08013510  00023510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013514  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00008e40  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008eb8  20008eb8  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ab1a  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005547  00000000  00000000  0005abc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00060110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  000611b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca46  00000000  00000000  000621c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc9c  00000000  00000000  0008ec06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9dd3  00000000  00000000  000ae8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00188675  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a68  00000000  00000000  001886c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8b0 	.word	0x0800f8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f8b0 	.word	0x0800f8b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa1c 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f80e 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f876 	bl	8000694 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005a8:	f002 faa0 	bl	8002aec <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init(); // Инициализируем httpd демон.
 80005ac:	f003 fd4c 	bl	8004048 <httpd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <main+0x24>)
 80005b2:	f002 fe73 	bl	800329c <ethernetif_input>
	  sys_check_timeouts();
 80005b6:	f00b fc3d 	bl	800be34 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005ba:	e7f9      	b.n	80005b0 <main+0x18>
 80005bc:	20000658 	.word	0x20000658

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f00e f92c 	bl	800e82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000634:	23a8      	movs	r3, #168	; 0xa8
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fe05 	bl	8002254 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f864 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f866 	bl	8002744 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f84d 	bl	800071c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_GPIO_Init+0x84>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <MX_GPIO_Init+0x84>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_GPIO_Init+0x84>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_GPIO_Init+0x84>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a16      	ldr	r2, [pc, #88]	; (8000718 <MX_GPIO_Init+0x84>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_GPIO_Init+0x84>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x84>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x84>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x84>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x84>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x84>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x84>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f95a 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	return 1;
 80007d0:	2301      	movs	r3, #1
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_kill>:

int _kill(int pid, int sig)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <_kill+0x20>)
 80007e8:	2216      	movs	r2, #22
 80007ea:	601a      	str	r2, [r3, #0]
	return -1;
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20008ea8 	.word	0x20008ea8

08000800 <_exit>:

void _exit (int status)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffe5 	bl	80007dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000812:	e7fe      	b.n	8000812 <_exit+0x12>

08000814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e00a      	b.n	800083c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000826:	f3af 8000 	nop.w
 800082a:	4601      	mov	r1, r0
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf0      	blt.n	8000826 <_read+0x12>
	}

return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e009      	b.n	8000874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf1      	blt.n	8000860 <_write+0x12>
	}
	return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:

int _close(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	return -1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ae:	605a      	str	r2, [r3, #4]
	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_isatty>:

int _isatty(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
	return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d205      	bcs.n	800092c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <_sbrk+0x6c>)
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092a:	e009      	b.n	8000940 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	371c      	adds	r7, #28
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20020000 	.word	0x20020000
 8000950:	00000400 	.word	0x00000400
 8000954:	20000094 	.word	0x20000094
 8000958:	20008eb8 	.word	0x20008eb8
 800095c:	20008ea8 	.word	0x20008ea8

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f00d fefb 	bl	800e7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fdef 	bl	8000598 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009c8:	08013514 	.word	0x08013514
  ldr r2, =_sbss
 80009cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009d0:	20008eb8 	.word	0x20008eb8

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f931 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fe8c 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f93b 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a58:	f000 f911 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000650 	.word	0x20000650

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000650 	.word	0x20000650

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff47 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff5c 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffb0 	bl	8000c24 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ce0:	4baa      	ldr	r3, [pc, #680]	; (8000f8c <HAL_ETH_Init+0x2bc>)
 8000ce2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e183      	b.n	8000ffe <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d106      	bne.n	8000d10 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f002 f820 	bl	8002d50 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <HAL_ETH_Init+0x2c0>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	4a9d      	ldr	r2, [pc, #628]	; (8000f90 <HAL_ETH_Init+0x2c0>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d20:	4b9b      	ldr	r3, [pc, #620]	; (8000f90 <HAL_ETH_Init+0x2c0>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d2c:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a98      	ldr	r2, [pc, #608]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d38:	4b96      	ldr	r3, [pc, #600]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4994      	ldr	r1, [pc, #592]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f042 0201 	orr.w	r2, r2, #1
 8000d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d5c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d5e:	f7ff fea1 	bl	8000aa4 <HAL_GetTick>
 8000d62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d64:	e011      	b.n	8000d8a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d66:	f7ff fe9d 	bl	8000aa4 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d74:	d909      	bls.n	8000d8a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e139      	b.n	8000ffe <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1e4      	bne.n	8000d66 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f023 031c 	bic.w	r3, r3, #28
 8000daa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000dac:	f001 fe92 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8000db0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4a78      	ldr	r2, [pc, #480]	; (8000f98 <HAL_ETH_Init+0x2c8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d908      	bls.n	8000dcc <HAL_ETH_Init+0xfc>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_ETH_Init+0x2cc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d804      	bhi.n	8000dcc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e027      	b.n	8000e1c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4a73      	ldr	r2, [pc, #460]	; (8000f9c <HAL_ETH_Init+0x2cc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d908      	bls.n	8000de6 <HAL_ETH_Init+0x116>
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4a6d      	ldr	r2, [pc, #436]	; (8000f8c <HAL_ETH_Init+0x2bc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d204      	bcs.n	8000de6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f043 030c 	orr.w	r3, r3, #12
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e01a      	b.n	8000e1c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4a68      	ldr	r2, [pc, #416]	; (8000f8c <HAL_ETH_Init+0x2bc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d303      	bcc.n	8000df6 <HAL_ETH_Init+0x126>
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4a6b      	ldr	r2, [pc, #428]	; (8000fa0 <HAL_ETH_Init+0x2d0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d911      	bls.n	8000e1a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_ETH_Init+0x2d0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d908      	bls.n	8000e10 <HAL_ETH_Init+0x140>
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4a68      	ldr	r2, [pc, #416]	; (8000fa4 <HAL_ETH_Init+0x2d4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d804      	bhi.n	8000e10 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e005      	b.n	8000e1c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	e000      	b.n	8000e1c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e1a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 fb98 	bl	8001560 <HAL_ETH_WritePHYRegister>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00b      	beq.n	8000e4e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000e3a:	6939      	ldr	r1, [r7, #16]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 fd4d 	bl	80018dc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0d7      	b.n	8000ffe <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000e4e:	20ff      	movs	r0, #255	; 0xff
 8000e50:	f7ff fe34 	bl	8000abc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80a5 	beq.w	8000fa8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e5e:	f7ff fe21 	bl	8000aa4 <HAL_GetTick>
 8000e62:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fb0f 	bl	8001490 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e72:	f7ff fe17 	bl	8000aa4 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d90f      	bls.n	8000ea4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fd26 	bl	80018dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e0ac      	b.n	8000ffe <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0da      	beq.n	8000e64 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fb53 	bl	8001560 <HAL_ETH_WritePHYRegister>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ec4:	6939      	ldr	r1, [r7, #16]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fd08 	bl	80018dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e092      	b.n	8000ffe <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fde4 	bl	8000aa4 <HAL_GetTick>
 8000edc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fad2 	bl	8001490 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000eec:	f7ff fdda 	bl	8000aa4 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d90f      	bls.n	8000f1e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fce9 	bl	80018dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e06f      	b.n	8000ffe <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0da      	beq.n	8000ede <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2110      	movs	r1, #16
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 faad 	bl	8001490 <HAL_ETH_ReadPHYRegister>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fcca 	bl	80018dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f50:	2301      	movs	r3, #1
 8000f52:	e054      	b.n	8000ffe <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	e002      	b.n	8000f6e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	e035      	b.n	8000fec <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	e030      	b.n	8000fec <HAL_ETH_Init+0x31c>
 8000f8a:	bf00      	nop
 8000f8c:	03938700 	.word	0x03938700
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	01312cff 	.word	0x01312cff
 8000f9c:	02160ebf 	.word	0x02160ebf
 8000fa0:	05f5e0ff 	.word	0x05f5e0ff
 8000fa4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 facd 	bl	8001560 <HAL_ETH_WritePHYRegister>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fd0:	6939      	ldr	r1, [r7, #16]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fc82 	bl	80018dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e00c      	b.n	8000ffe <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000fe4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000fe8:	f7ff fd68 	bl	8000abc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fc74 	bl	80018dc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_ETH_DMATxDescListInit+0x20>
 8001024:	2302      	movs	r3, #2
 8001026:	e052      	b.n	80010ce <HAL_ETH_DMATxDescListInit+0xc6>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e030      	b.n	80010a6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	015b      	lsls	r3, r3, #5
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001054:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	461a      	mov	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	d208      	bcs.n	800109a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	461a      	mov	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	e002      	b.n	80010a0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3ca      	bcc.n	8001044 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b8:	3310      	adds	r3, #16
 80010ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80010da:	b480      	push	{r7}
 80010dc:	b087      	sub	sp, #28
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ETH_DMARxDescListInit+0x20>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e056      	b.n	80011a8 <HAL_ETH_DMARxDescListInit+0xce>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2202      	movs	r2, #2
 8001106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e034      	b.n	8001180 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	015b      	lsls	r3, r3, #5
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001126:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800112e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	461a      	mov	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	429a      	cmp	r2, r3
 8001160:	d208      	bcs.n	8001174 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	461a      	mov	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	e002      	b.n	800117a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3c6      	bcc.n	8001116 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001192:	330c      	adds	r3, #12
 8001194:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_ETH_TransmitFrame+0x24>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e0cd      	b.n	8001374 <HAL_ETH_TransmitFrame+0x1c0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80011fe:	2301      	movs	r3, #1
 8001200:	e0b8      	b.n	8001374 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da09      	bge.n	8001220 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2212      	movs	r2, #18
 8001210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0a9      	b.n	8001374 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001226:	4293      	cmp	r3, r2
 8001228:	d915      	bls.n	8001256 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_ETH_TransmitFrame+0x1cc>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0a9b      	lsrs	r3, r3, #10
 8001234:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	4b51      	ldr	r3, [pc, #324]	; (8001380 <HAL_ETH_TransmitFrame+0x1cc>)
 800123a:	fba3 1302 	umull	r1, r3, r3, r2
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e001      	b.n	800125a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11c      	bne.n	800129a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800126e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800127a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800128a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
 8001298:	e04b      	b.n	8001332 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	e044      	b.n	800132a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ae:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012c4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ce:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d116      	bne.n	8001308 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012e8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <HAL_ETH_TransmitFrame+0x1d0>)
 80012ee:	fb02 f203 	mul.w	r2, r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80012fa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001306:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001316:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3b6      	bcc.n	80012a0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133a:	3314      	adds	r3, #20
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00d      	beq.n	8001362 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134e:	3314      	adds	r3, #20
 8001350:	2204      	movs	r2, #4
 8001352:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135c:	3304      	adds	r3, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	ac02b00b 	.word	0xac02b00b
 8001384:	fffffa0c 	.word	0xfffffa0c

08001388 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ETH_GetReceivedFrame+0x1a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e070      	b.n	8001484 <HAL_ETH_GetReceivedFrame+0xfc>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db5a      	blt.n	8001472 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d030      	beq.n	800142c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d103      	bne.n	80013e4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0c1b      	lsrs	r3, r3, #16
 80013f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80013f8:	3b04      	subs	r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e02b      	b.n	8001484 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
 800145a:	e00a      	b.n	8001472 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	460b      	mov	r3, r1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b82      	cmp	r3, #130	; 0x82
 80014b0:	d101      	bne.n	80014b6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	e050      	b.n	8001558 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2282      	movs	r2, #130	; 0x82
 80014ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8a1b      	ldrh	r3, [r3, #16]
 80014d2:	02db      	lsls	r3, r3, #11
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	019b      	lsls	r3, r3, #6
 80014e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f023 0302 	bic.w	r3, r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001502:	f7ff facf 	bl	8000aa4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001508:	e015      	b.n	8001536 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800150a:	f7ff facb 	bl	8000aa4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d309      	bcc.n	800152e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e014      	b.n	8001558 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e4      	bne.n	800150a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	460b      	mov	r3, r1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b42      	cmp	r3, #66	; 0x42
 8001580:	d101      	bne.n	8001586 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	e04e      	b.n	8001624 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2242      	movs	r2, #66	; 0x42
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 031c 	and.w	r3, r3, #28
 800159c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8a1b      	ldrh	r3, [r3, #16]
 80015a2:	02db      	lsls	r3, r3, #11
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015ac:	897b      	ldrh	r3, [r7, #10]
 80015ae:	019b      	lsls	r3, r3, #6
 80015b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015dc:	f7ff fa62 	bl	8000aa4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e2:	e015      	b.n	8001610 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015e4:	f7ff fa5e 	bl	8000aa4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d309      	bcc.n	8001608 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e00d      	b.n	8001624 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e4      	bne.n	80015e4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ETH_Start+0x16>
 800163e:	2302      	movs	r3, #2
 8001640:	e01f      	b.n	8001682 <HAL_ETH_Start+0x56>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fb44 	bl	8001ce0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fb7b 	bl	8001d54 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fc12 	bl	8001e88 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fbaf 	bl	8001dc8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fbdc 	bl	8001e28 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ETH_Stop+0x16>
 800169c:	2302      	movs	r3, #2
 800169e:	e01f      	b.n	80016e0 <HAL_ETH_Stop+0x56>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fba1 	bl	8001df8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fbce 	bl	8001e58 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fb66 	bl	8001d8e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fbe0 	bl	8001e88 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fb26 	bl	8001d1a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_ETH_ConfigMAC+0x1c>
 8001700:	2302      	movs	r3, #2
 8001702:	e0e4      	b.n	80018ce <HAL_ETH_ConfigMAC+0x1e6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2202      	movs	r2, #2
 8001710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80b1 	beq.w	800187e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001734:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800173a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001740:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001746:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800174c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001752:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001758:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800175e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001764:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800176a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001770:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001776:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff f994 	bl	8000abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017a4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80017aa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80017b0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80017b6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80017bc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80017c2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80017ce:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017d0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff f96e 	bl	8000abc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017f0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017fa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	f64f 7341 	movw	r3, #65345	; 0xff41
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001818:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800181e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001824:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800182a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001830:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff f937 	bl	8000abc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff f924 	bl	8000abc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	61da      	str	r2, [r3, #28]
 800187c:	e01e      	b.n	80018bc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800188c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff f904 	bl	8000abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	ff20810f 	.word	0xff20810f

080018dc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0b0      	sub	sp, #192	; 0xc0
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001900:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800190a:	2300      	movs	r3, #0
 800190c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	663b      	str	r3, [r7, #96]	; 0x60
 8001928:	e001      	b.n	800192e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800192e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001932:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001938:	2300      	movs	r3, #0
 800193a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b4:	4bac      	ldr	r3, [pc, #688]	; (8001c68 <ETH_MACDMAConfig+0x38c>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019c0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80019c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80019c4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80019c8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80019ce:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80019d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80019d2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80019d6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80019dc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80019de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80019e0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80019e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80019e4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80019e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80019e8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80019ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80019ec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80019f0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff f853 	bl	8000abc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a1e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a24:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a28:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a2e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a34:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a3a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a40:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a4c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a4e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff f82e 	bl	8000abc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a68:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a72:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a7c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a8c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a90:	4013      	ands	r3, r2
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aa0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001aa6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001aa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001aac:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ab2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ab4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ab8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001acc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7fe ffef 	bl	8000abc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ae8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7fe ffda 	bl	8000abc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b10:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b24:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b36:	2304      	movs	r3, #4
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b66:	3318      	adds	r3, #24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <ETH_MACDMAConfig+0x390>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b7a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b7e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b80:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b82:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b84:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b86:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b88:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b8a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b8c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b8e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b90:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b92:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b96:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b9a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	3318      	adds	r3, #24
 8001bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f7fe ff78 	bl	8000abc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bda:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001be0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001be4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001be8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001bec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001bf2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bf6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c04:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7fe ff51 	bl	8000abc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c26:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10f      	bne.n	8001c50 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c38:	331c      	adds	r3, #28
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	331c      	adds	r3, #28
 8001c4e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	461a      	mov	r2, r3
 8001c56:	2100      	movs	r1, #0
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f809 	bl	8001c70 <ETH_MACAddressConfig>
}
 8001c5e:	bf00      	nop
 8001c60:	37c0      	adds	r7, #192	; 0xc0
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	ff20810f 	.word	0xff20810f
 8001c6c:	f8de3f23 	.word	0xf8de3f23

08001c70 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3305      	adds	r3, #5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <ETH_MACAddressConfig+0x68>)
 8001c92:	4413      	add	r3, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3303      	adds	r3, #3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	061a      	lsls	r2, r3, #24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <ETH_MACAddressConfig+0x6c>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40028040 	.word	0x40028040
 8001cdc:	40028044 	.word	0x40028044

08001ce0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0208 	orr.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f000 f8e9 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0208 	bic.w	r2, r2, #8
 8001d34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 f8cc 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0204 	orr.w	r2, r2, #4
 8001d6e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 f8af 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0204 	bic.w	r2, r2, #4
 8001da8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 f892 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	3318      	adds	r3, #24
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	3318      	adds	r3, #24
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	3318      	adds	r3, #24
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	3318      	adds	r3, #24
 8001e1a:	601a      	str	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e38:	3318      	adds	r3, #24
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0202 	orr.w	r2, r2, #2
 8001e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e48:	3318      	adds	r3, #24
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e68:	3318      	adds	r3, #24
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0202 	bic.w	r2, r2, #2
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	3318      	adds	r3, #24
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	3318      	adds	r3, #24
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	3318      	adds	r3, #24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 f80c 	bl	8001edc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ece:	3318      	adds	r3, #24
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <ETH_Delay+0x38>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <ETH_Delay+0x3c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a5b      	lsrs	r3, r3, #9
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001ef8:	bf00      	nop
  } 
  while (Delay --);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	60fa      	str	r2, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f9      	bne.n	8001ef8 <ETH_Delay+0x1c>
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e16b      	b.n	8002210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 815a 	bne.w	800220a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80b4 	beq.w	800220a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a5f      	ldr	r2, [pc, #380]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a5b      	ldr	r2, [pc, #364]	; (800222c <HAL_GPIO_Init+0x310>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_GPIO_Init+0x314>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <HAL_GPIO_Init+0x226>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_GPIO_Init+0x318>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d025      	beq.n	800213e <HAL_GPIO_Init+0x222>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_GPIO_Init+0x31c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <HAL_GPIO_Init+0x21e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_GPIO_Init+0x320>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0x21a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_GPIO_Init+0x324>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x216>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x328>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x212>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x32c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_GPIO_Init+0x330>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x20a>
 8002122:	2307      	movs	r3, #7
 8002124:	e00e      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002126:	2308      	movs	r3, #8
 8002128:	e00c      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800212a:	2306      	movs	r3, #6
 800212c:	e00a      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800212e:	2305      	movs	r3, #5
 8002130:	e008      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002132:	2304      	movs	r3, #4
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002136:	2303      	movs	r3, #3
 8002138:	e004      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800213a:	2302      	movs	r3, #2
 800213c:	e002      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002142:	2300      	movs	r3, #0
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	f002 0203 	and.w	r2, r2, #3
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	4093      	lsls	r3, r2
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002154:	4935      	ldr	r1, [pc, #212]	; (800222c <HAL_GPIO_Init+0x310>)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002186:	4a32      	ldr	r2, [pc, #200]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_GPIO_Init+0x334>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3301      	adds	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	f67f ae90 	bls.w	8001f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40013800 	.word	0x40013800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400
 8002238:	40020800 	.word	0x40020800
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021000 	.word	0x40021000
 8002244:	40021400 	.word	0x40021400
 8002248:	40021800 	.word	0x40021800
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40013c00 	.word	0x40013c00

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e264      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e23f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fbca 	bl	8000aa4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe fbc6 	bl	8000aa4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e204      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fbb6 	bl	8000aa4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe fbb2 	bl	8000aa4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1f0      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c4      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fb6b 	bl	8000aa4 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fb67 	bl	8000aa4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fb4a 	bl	8000aa4 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe fb46 	bl	8000aa4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e184      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe fb2a 	bl	8000aa4 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fb26 	bl	8000aa4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e164      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fb13 	bl	8000aa4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fb0f 	bl	8000aa4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14d      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a0 	beq.w	80025ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fad5 	bl	8000aa4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x2ce>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
 800250c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7fe fac8 	bl	8000aa4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e106      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fa8d 	bl	8000aa4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fa89 	bl	8000aa4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x33a>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fa77 	bl	8000aa4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fa73 	bl	8000aa4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0af      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 809b 	beq.w	800272e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d05c      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d141      	bne.n	8002690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fa47 	bl	8000aa4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fa43 	bl	8000aa4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e081      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fa1c 	bl	8000aa4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fa18 	bl	8000aa4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e056      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x41c>
 800268e:	e04e      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fa05 	bl	8000aa4 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fa01 	bl	8000aa4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x44a>
 80026bc:	e037      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e032      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d028      	beq.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11a      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002700:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002702:	4293      	cmp	r3, r2
 8002704:	d111      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d107      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe f936 	bl	8000aa4 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe f932 	bl	8000aa4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f896 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	080124c8 	.word	0x080124c8
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	2300      	movs	r3, #0
 8002922:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002928:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d00d      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x40>
 8002934:	2b08      	cmp	r3, #8
 8002936:	f200 80bd 	bhi.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x34>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x3a>
 8002942:	e0b7      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002946:	60bb      	str	r3, [r7, #8]
       break;
 8002948:	e0b7      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800294c:	60bb      	str	r3, [r7, #8]
      break;
 800294e:	e0b4      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002958:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04d      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	461a      	mov	r2, r3
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	ea02 0800 	and.w	r8, r2, r0
 800297e:	ea03 0901 	and.w	r9, r3, r1
 8002982:	4640      	mov	r0, r8
 8002984:	4649      	mov	r1, r9
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	014b      	lsls	r3, r1, #5
 8002990:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002994:	0142      	lsls	r2, r0, #5
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	ebb0 0008 	subs.w	r0, r0, r8
 800299e:	eb61 0109 	sbc.w	r1, r1, r9
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	018b      	lsls	r3, r1, #6
 80029ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029b0:	0182      	lsls	r2, r0, #6
 80029b2:	1a12      	subs	r2, r2, r0
 80029b4:	eb63 0301 	sbc.w	r3, r3, r1
 80029b8:	f04f 0000 	mov.w	r0, #0
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	00d9      	lsls	r1, r3, #3
 80029c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c6:	00d0      	lsls	r0, r2, #3
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	eb12 0208 	adds.w	r2, r2, r8
 80029d0:	eb43 0309 	adc.w	r3, r3, r9
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0259      	lsls	r1, r3, #9
 80029de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029e2:	0250      	lsls	r0, r2, #9
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f7fd fc54 	bl	80002a0 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e04a      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	ea02 0400 	and.w	r4, r2, r0
 8002a1a:	ea03 0501 	and.w	r5, r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	014b      	lsls	r3, r1, #5
 8002a2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a30:	0142      	lsls	r2, r0, #5
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	1b00      	subs	r0, r0, r4
 8002a38:	eb61 0105 	sbc.w	r1, r1, r5
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	018b      	lsls	r3, r1, #6
 8002a46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a4a:	0182      	lsls	r2, r0, #6
 8002a4c:	1a12      	subs	r2, r2, r0
 8002a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a52:	f04f 0000 	mov.w	r0, #0
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	00d9      	lsls	r1, r3, #3
 8002a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a60:	00d0      	lsls	r0, r2, #3
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	1912      	adds	r2, r2, r4
 8002a68:	eb45 0303 	adc.w	r3, r5, r3
 8002a6c:	f04f 0000 	mov.w	r0, #0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	0299      	lsls	r1, r3, #10
 8002a76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a7a:	0290      	lsls	r0, r2, #10
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	f7fd fc08 	bl	80002a0 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ab6:	60bb      	str	r3, [r7, #8]
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	68bb      	ldr	r3, [r7, #8]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000

08002aec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002af2:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002af4:	22c0      	movs	r2, #192	; 0xc0
 8002af6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002af8:	4b8b      	ldr	r3, [pc, #556]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002afa:	22a8      	movs	r2, #168	; 0xa8
 8002afc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8002afe:	4b8a      	ldr	r3, [pc, #552]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b00:	2212      	movs	r2, #18
 8002b02:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8002b04:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b06:	226f      	movs	r2, #111	; 0x6f
 8002b08:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002b0a:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002b10:	4b86      	ldr	r3, [pc, #536]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002b1c:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002b22:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002b24:	22c0      	movs	r2, #192	; 0xc0
 8002b26:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002b28:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002b2a:	22a8      	movs	r2, #168	; 0xa8
 8002b2c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8002b2e:	4b80      	ldr	r3, [pc, #512]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002b30:	2212      	movs	r2, #18
 8002b32:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002b34:	4b7e      	ldr	r3, [pc, #504]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002b3a:	f001 fb09 	bl	8004150 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002b3e:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	061a      	lsls	r2, r3, #24
 8002b44:	4b78      	ldr	r3, [pc, #480]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b4e:	789b      	ldrb	r3, [r3, #2]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	4313      	orrs	r3, r2
 8002b54:	4a74      	ldr	r2, [pc, #464]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b56:	78d2      	ldrb	r2, [r2, #3]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	061a      	lsls	r2, r3, #24
 8002b5c:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	0619      	lsls	r1, r3, #24
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	4319      	orrs	r1, r3
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b6c:	789b      	ldrb	r3, [r3, #2]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	430b      	orrs	r3, r1
 8002b72:	496d      	ldr	r1, [pc, #436]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b74:	78c9      	ldrb	r1, [r1, #3]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	0619      	lsls	r1, r3, #24
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	4319      	orrs	r1, r3
 8002b8e:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b90:	789b      	ldrb	r3, [r3, #2]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	430b      	orrs	r3, r1
 8002b96:	4964      	ldr	r1, [pc, #400]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002b98:	78c9      	ldrb	r1, [r1, #3]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	0619      	lsls	r1, r3, #24
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	4319      	orrs	r1, r3
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002bb4:	789b      	ldrb	r3, [r3, #2]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	495b      	ldr	r1, [pc, #364]	; (8002d28 <MX_LWIP_Init+0x23c>)
 8002bbc:	78c9      	ldrb	r1, [r1, #3]
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	0e1b      	lsrs	r3, r3, #24
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <MX_LWIP_Init+0x248>)
 8002bc6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002bc8:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	061a      	lsls	r2, r3, #24
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002bd0:	785b      	ldrb	r3, [r3, #1]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002bd8:	789b      	ldrb	r3, [r3, #2]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	4a53      	ldr	r2, [pc, #332]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002be0:	78d2      	ldrb	r2, [r2, #3]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	061a      	lsls	r2, r3, #24
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	0619      	lsls	r1, r3, #24
 8002bec:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	4319      	orrs	r1, r3
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002bf6:	789b      	ldrb	r3, [r3, #2]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	494b      	ldr	r1, [pc, #300]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002bfe:	78c9      	ldrb	r1, [r1, #3]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0619      	lsls	r1, r3, #24
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	4319      	orrs	r1, r3
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	4942      	ldr	r1, [pc, #264]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c22:	78c9      	ldrb	r1, [r1, #3]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0619      	lsls	r1, r3, #24
 8002c34:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	4319      	orrs	r1, r3
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c3e:	789b      	ldrb	r3, [r3, #2]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	430b      	orrs	r3, r1
 8002c44:	4939      	ldr	r1, [pc, #228]	; (8002d2c <MX_LWIP_Init+0x240>)
 8002c46:	78c9      	ldrb	r1, [r1, #3]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	0e1b      	lsrs	r3, r3, #24
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	4a3a      	ldr	r2, [pc, #232]	; (8002d38 <MX_LWIP_Init+0x24c>)
 8002c50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	061a      	lsls	r2, r3, #24
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c5a:	785b      	ldrb	r3, [r3, #1]
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c62:	789b      	ldrb	r3, [r3, #2]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c6a:	78d2      	ldrb	r2, [r2, #3]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	061a      	lsls	r2, r3, #24
 8002c70:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	0619      	lsls	r1, r3, #24
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	4319      	orrs	r1, r3
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	430b      	orrs	r3, r1
 8002c86:	492a      	ldr	r1, [pc, #168]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c88:	78c9      	ldrb	r1, [r1, #3]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c92:	431a      	orrs	r2, r3
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	0619      	lsls	r1, r3, #24
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	4319      	orrs	r1, r3
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	4921      	ldr	r1, [pc, #132]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002cac:	78c9      	ldrb	r1, [r1, #3]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	0619      	lsls	r1, r3, #24
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	4319      	orrs	r1, r3
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002cc8:	789b      	ldrb	r3, [r3, #2]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4918      	ldr	r1, [pc, #96]	; (8002d30 <MX_LWIP_Init+0x244>)
 8002cd0:	78c9      	ldrb	r1, [r1, #3]
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	0e1b      	lsrs	r3, r3, #24
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <MX_LWIP_Init+0x250>)
 8002cda:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_LWIP_Init+0x254>)
 8002cde:	9302      	str	r3, [sp, #8]
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <MX_LWIP_Init+0x258>)
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_LWIP_Init+0x250>)
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <MX_LWIP_Init+0x24c>)
 8002cec:	4911      	ldr	r1, [pc, #68]	; (8002d34 <MX_LWIP_Init+0x248>)
 8002cee:	4816      	ldr	r0, [pc, #88]	; (8002d48 <MX_LWIP_Init+0x25c>)
 8002cf0:	f001 fed4 	bl	8004a9c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002cf4:	4814      	ldr	r0, [pc, #80]	; (8002d48 <MX_LWIP_Init+0x25c>)
 8002cf6:	f002 f883 	bl	8004e00 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <MX_LWIP_Init+0x25c>)
 8002cfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <MX_LWIP_Init+0x25c>)
 8002d0e:	f002 f887 	bl	8004e20 <netif_set_up>
 8002d12:	e002      	b.n	8002d1a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002d14:	480c      	ldr	r0, [pc, #48]	; (8002d48 <MX_LWIP_Init+0x25c>)
 8002d16:	f002 f8ef 	bl	8004ef8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002d1a:	490c      	ldr	r1, [pc, #48]	; (8002d4c <MX_LWIP_Init+0x260>)
 8002d1c:	480a      	ldr	r0, [pc, #40]	; (8002d48 <MX_LWIP_Init+0x25c>)
 8002d1e:	f002 f91d 	bl	8004f5c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000694 	.word	0x20000694
 8002d2c:	20000690 	.word	0x20000690
 8002d30:	20000654 	.word	0x20000654
 8002d34:	2000068c 	.word	0x2000068c
 8002d38:	20000698 	.word	0x20000698
 8002d3c:	2000069c 	.word	0x2000069c
 8002d40:	0800e601 	.word	0x0800e601
 8002d44:	080032dd 	.word	0x080032dd
 8002d48:	20000658 	.word	0x20000658
 8002d4c:	08003349 	.word	0x08003349

08002d50 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	; 0x38
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <HAL_ETH_MspInit+0x138>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f040 8085 	bne.w	8002e7e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	4b44      	ldr	r3, [pc, #272]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d82:	6313      	str	r3, [r2, #48]	; 0x30
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	4a35      	ldr	r2, [pc, #212]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002db6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dba:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_ETH_MspInit+0x13c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002e1c:	2332      	movs	r3, #50	; 0x32
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e2c:	230b      	movs	r3, #11
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	4619      	mov	r1, r3
 8002e36:	4816      	ldr	r0, [pc, #88]	; (8002e90 <HAL_ETH_MspInit+0x140>)
 8002e38:	f7ff f870 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002e3c:	2386      	movs	r3, #134	; 0x86
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e4c:	230b      	movs	r3, #11
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	480f      	ldr	r0, [pc, #60]	; (8002e94 <HAL_ETH_MspInit+0x144>)
 8002e58:	f7ff f860 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002e5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e6e:	230b      	movs	r3, #11
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	4807      	ldr	r0, [pc, #28]	; (8002e98 <HAL_ETH_MspInit+0x148>)
 8002e7a:	f7ff f84f 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3738      	adds	r7, #56	; 0x38
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40028000 	.word	0x40028000
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400

08002e9c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <low_level_init+0x144>)
 8002eaa:	4a4e      	ldr	r2, [pc, #312]	; (8002fe4 <low_level_init+0x148>)
 8002eac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <low_level_init+0x144>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <low_level_init+0x144>)
 8002eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eba:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ebc:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <low_level_init+0x144>)
 8002ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002ec4:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <low_level_init+0x144>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002ed2:	23e1      	movs	r3, #225	; 0xe1
 8002ed4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002eda:	2300      	movs	r3, #0
 8002edc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <low_level_init+0x144>)
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <low_level_init+0x144>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <low_level_init+0x144>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <low_level_init+0x144>)
 8002ef8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002efc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002efe:	4838      	ldr	r0, [pc, #224]	; (8002fe0 <low_level_init+0x144>)
 8002f00:	f7fd fee6 	bl	8000cd0 <HAL_ETH_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002f20:	2304      	movs	r3, #4
 8002f22:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <low_level_init+0x14c>)
 8002f24:	4931      	ldr	r1, [pc, #196]	; (8002fec <low_level_init+0x150>)
 8002f26:	482e      	ldr	r0, [pc, #184]	; (8002fe0 <low_level_init+0x144>)
 8002f28:	f7fe f86e 	bl	8001008 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <low_level_init+0x154>)
 8002f30:	4930      	ldr	r1, [pc, #192]	; (8002ff4 <low_level_init+0x158>)
 8002f32:	482b      	ldr	r0, [pc, #172]	; (8002fe0 <low_level_init+0x144>)
 8002f34:	f7fe f8d1 	bl	80010da <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <low_level_init+0x144>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <low_level_init+0x144>)
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	785a      	ldrb	r2, [r3, #1]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <low_level_init+0x144>)
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	789a      	ldrb	r2, [r3, #2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002f64:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <low_level_init+0x144>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	78da      	ldrb	r2, [r3, #3]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <low_level_init+0x144>)
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	791a      	ldrb	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <low_level_init+0x144>)
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	795a      	ldrb	r2, [r3, #5]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f8e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002f96:	f043 030a 	orr.w	r3, r3, #10
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002fa2:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <low_level_init+0x144>)
 8002fa4:	f7fe fb42 	bl	800162c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	461a      	mov	r2, r3
 8002fae:	211d      	movs	r1, #29
 8002fb0:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <low_level_init+0x144>)
 8002fb2:	f7fe fa6d 	bl	8001490 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f043 030b 	orr.w	r3, r3, #11
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	211d      	movs	r1, #29
 8002fc4:	4806      	ldr	r0, [pc, #24]	; (8002fe0 <low_level_init+0x144>)
 8002fc6:	f7fe facb 	bl	8001560 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002fca:	f107 0310 	add.w	r3, r7, #16
 8002fce:	461a      	mov	r2, r3
 8002fd0:	211d      	movs	r1, #29
 8002fd2:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <low_level_init+0x144>)
 8002fd4:	f7fe fa5c 	bl	8001490 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002fd8:	bf00      	nop
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20001f70 	.word	0x20001f70
 8002fe4:	40028000 	.word	0x40028000
 8002fe8:	20001fb8 	.word	0x20001fb8
 8002fec:	200006a0 	.word	0x200006a0
 8002ff0:	20000720 	.word	0x20000720
 8002ff4:	20001ef0 	.word	0x20001ef0

08002ff8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <low_level_output+0x138>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800301a:	4b45      	ldr	r3, [pc, #276]	; (8003130 <low_level_output+0x138>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	e05a      	b.n	80030e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da03      	bge.n	800303a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003032:	23f8      	movs	r3, #248	; 0xf8
 8003034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003038:	e05c      	b.n	80030f4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	895b      	ldrh	r3, [r3, #10]
 800303e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003044:	e02f      	b.n	80030a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	18d0      	adds	r0, r2, r3
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	18d1      	adds	r1, r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800305a:	3304      	adds	r3, #4
 800305c:	461a      	mov	r2, r3
 800305e:	f00b fbd7 	bl	800e810 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da03      	bge.n	8003078 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003070:	23f8      	movs	r3, #248	; 0xf8
 8003072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003076:	e03d      	b.n	80030f4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003088:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003094:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80030a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d8c8      	bhi.n	8003046 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	18d0      	adds	r0, r2, r3
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4619      	mov	r1, r3
 80030c6:	f00b fba3 	bl	800e810 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1a1      	bne.n	800302a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	4811      	ldr	r0, [pc, #68]	; (8003130 <low_level_output+0x138>)
 80030ea:	f7fe f863 	bl	80011b4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <low_level_output+0x138>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fc:	3314      	adds	r3, #20
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <low_level_output+0x138>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003110:	3314      	adds	r3, #20
 8003112:	2220      	movs	r2, #32
 8003114:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <low_level_output+0x138>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311e:	3304      	adds	r3, #4
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003124:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20001f70 	.word	0x20001f70

08003134 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003158:	484f      	ldr	r0, [pc, #316]	; (8003298 <low_level_input+0x164>)
 800315a:	f7fe f915 	bl	8001388 <HAL_ETH_GetReceivedFrame>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <low_level_input+0x34>

    return NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	e092      	b.n	800328e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003168:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <low_level_input+0x164>)
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <low_level_input+0x164>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003174:	89fb      	ldrh	r3, [r7, #14]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003180:	4619      	mov	r1, r3
 8003182:	2000      	movs	r0, #0
 8003184:	f001 ff86 	bl	8005094 <pbuf_alloc>
 8003188:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04b      	beq.n	8003228 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003190:	4b41      	ldr	r3, [pc, #260]	; (8003298 <low_level_input+0x164>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
 800319e:	e040      	b.n	8003222 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	895b      	ldrh	r3, [r3, #10]
 80031a4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80031aa:	e021      	b.n	80031f0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	18d0      	adds	r0, r2, r3
 80031b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	18d1      	adds	r1, r2, r3
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80031c0:	3304      	adds	r3, #4
 80031c2:	461a      	mov	r2, r3
 80031c4:	f00b fb24 	bl	800e810 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	4413      	add	r3, r2
 80031da:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80031de:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80031ea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d8d6      	bhi.n	80031ac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	18d0      	adds	r0, r2, r3
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4619      	mov	r1, r3
 8003210:	f00b fafe 	bl	800e810 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1bb      	bne.n	80031a0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <low_level_input+0x164>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e00b      	b.n	800324c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3301      	adds	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <low_level_input+0x164>)
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	d3ee      	bcc.n	8003234 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <low_level_input+0x164>)
 8003258:	2200      	movs	r2, #0
 800325a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <low_level_input+0x164>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003264:	3314      	adds	r3, #20
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <low_level_input+0x164>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003278:	3314      	adds	r3, #20
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <low_level_input+0x164>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003286:	3308      	adds	r3, #8
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800328e:	4618      	mov	r0, r3
 8003290:	3730      	adds	r7, #48	; 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20001f70 	.word	0x20001f70

0800329c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff45 	bl	8003134 <low_level_input>
 80032aa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	4798      	blx	r3
 80032bc:	4603      	mov	r3, r0
 80032be:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80032c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f002 f9c7 	bl	800565c <pbuf_free>
    p = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e000      	b.n	80032d6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80032d4:	bf00      	nop
  }
}
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <ethernetif_init+0x1c>
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <ethernetif_init+0x48>)
 80032ec:	f240 2207 	movw	r2, #519	; 0x207
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <ethernetif_init+0x4c>)
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <ethernetif_init+0x50>)
 80032f4:	f00b faa2 	bl	800e83c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2273      	movs	r2, #115	; 0x73
 80032fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2274      	movs	r2, #116	; 0x74
 8003304:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <ethernetif_init+0x54>)
 800330c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a08      	ldr	r2, [pc, #32]	; (8003334 <ethernetif_init+0x58>)
 8003312:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fdc1 	bl	8002e9c <low_level_init>

  return ERR_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0800f8c8 	.word	0x0800f8c8
 8003328:	0800f8e4 	.word	0x0800f8e4
 800332c:	0800f8f4 	.word	0x0800f8f4
 8003330:	0800cac5 	.word	0x0800cac5
 8003334:	08002ff9 	.word	0x08002ff9

08003338 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800333c:	f7fd fbb2 	bl	8000aa4 <HAL_GetTick>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d05d      	beq.n	8003426 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <ethernetif_update_config+0xf4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d03f      	beq.n	80033f2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003376:	2100      	movs	r1, #0
 8003378:	4830      	ldr	r0, [pc, #192]	; (800343c <ethernetif_update_config+0xf4>)
 800337a:	f7fe f8f1 	bl	8001560 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800337e:	f7fd fb91 	bl	8000aa4 <HAL_GetTick>
 8003382:	4603      	mov	r3, r0
 8003384:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	461a      	mov	r2, r3
 800338c:	2101      	movs	r1, #1
 800338e:	482b      	ldr	r0, [pc, #172]	; (800343c <ethernetif_update_config+0xf4>)
 8003390:	f7fe f87e 	bl	8001490 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003394:	f7fd fb86 	bl	8000aa4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a2:	d828      	bhi.n	80033f6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0eb      	beq.n	8003386 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	461a      	mov	r2, r3
 80033b4:	2110      	movs	r1, #16
 80033b6:	4821      	ldr	r0, [pc, #132]	; (800343c <ethernetif_update_config+0xf4>)
 80033b8:	f7fe f86a 	bl	8001490 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80033c6:	4b1d      	ldr	r3, [pc, #116]	; (800343c <ethernetif_update_config+0xf4>)
 80033c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e002      	b.n	80033d6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <ethernetif_update_config+0xf4>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <ethernetif_update_config+0xf4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	e016      	b.n	8003416 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <ethernetif_update_config+0xf4>)
 80033ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e011      	b.n	8003416 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <ethernetif_update_config+0xb0>
          goto error;
 80033f6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <ethernetif_update_config+0xf4>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	08db      	lsrs	r3, r3, #3
 80033fe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <ethernetif_update_config+0xf4>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003408:	4313      	orrs	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	2100      	movs	r1, #0
 8003410:	480a      	ldr	r0, [pc, #40]	; (800343c <ethernetif_update_config+0xf4>)
 8003412:	f7fe f8a5 	bl	8001560 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003416:	2100      	movs	r1, #0
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <ethernetif_update_config+0xf4>)
 800341a:	f7fe f965 	bl	80016e8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800341e:	4807      	ldr	r0, [pc, #28]	; (800343c <ethernetif_update_config+0xf4>)
 8003420:	f7fe f904 	bl	800162c <HAL_ETH_Start>
 8003424:	e002      	b.n	800342c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <ethernetif_update_config+0xf4>)
 8003428:	f7fe f92f 	bl	800168a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f807 	bl	8003440 <ethernetif_notify_conn_changed>
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20001f70 	.word	0x20001f70

08003440 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <fs_open+0x16>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <fs_open+0x1c>
    return ERR_ARG;
 800346a:	f06f 030f 	mvn.w	r3, #15
 800346e:	e028      	b.n	80034c2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <fs_open+0x78>)
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e020      	b.n	80034b8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	6838      	ldr	r0, [r7, #0]
 800347e:	f7fc fea7 	bl	80001d0 <strcmp>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	7c1a      	ldrb	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e007      	b.n	80034c2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1db      	bne.n	8003476 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80034be:	f06f 0305 	mvn.w	r3, #5
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	08013298 	.word	0x08013298

080034d0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	1ad3      	subs	r3, r2, r3
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800350a:	222c      	movs	r2, #44	; 0x2c
 800350c:	2100      	movs	r1, #0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f00b f98c 	bl	800e82c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003522:	202c      	movs	r0, #44	; 0x2c
 8003524:	f001 f8ce 	bl	80046c4 <mem_malloc>
 8003528:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ffe6 	bl	8003502 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003536:	687b      	ldr	r3, [r7, #4]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ffbb 	bl	80034d0 <fs_close>
    hs->handle = NULL;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4618      	mov	r0, r3
 800356e:	f002 f875 	bl	800565c <pbuf_free>
    hs->req = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <http_state_free+0x1a>
    http_state_eof(hs);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ffd6 	bl	8003540 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 ff2f 	bl	80043f8 <mem_free>
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <http_write+0x22>
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <http_write+0xc8>)
 80035ba:	f240 2219 	movw	r2, #537	; 0x219
 80035be:	492c      	ldr	r1, [pc, #176]	; (8003670 <http_write+0xcc>)
 80035c0:	482c      	ldr	r0, [pc, #176]	; (8003674 <http_write+0xd0>)
 80035c2:	f00b f93b 	bl	800e83c <iprintf>
  len = *length;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80035cc:	8afb      	ldrh	r3, [r7, #22]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <http_write+0x32>
    return ERR_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e045      	b.n	8003662 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80035dc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80035de:	8aba      	ldrh	r2, [r7, #20]
 80035e0:	8afb      	ldrh	r3, [r7, #22]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d201      	bcs.n	80035ea <http_write+0x46>
    len = max_len;
 80035e6:	8abb      	ldrh	r3, [r7, #20]
 80035e8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80035f2:	8afa      	ldrh	r2, [r7, #22]
 80035f4:	8abb      	ldrh	r3, [r7, #20]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d901      	bls.n	80035fe <http_write+0x5a>
    len = max_len;
 80035fa:	8abb      	ldrh	r3, [r7, #20]
 80035fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	8afa      	ldrh	r2, [r7, #22]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f006 fdad 	bl	800a164 <tcp_write>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800360e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003616:	d10f      	bne.n	8003638 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003628:	2b08      	cmp	r3, #8
 800362a:	d902      	bls.n	8003632 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800362c:	2301      	movs	r3, #1
 800362e:	82fb      	strh	r3, [r7, #22]
 8003630:	e002      	b.n	8003638 <http_write+0x94>
      } else {
        len /= 2;
 8003632:	8afb      	ldrh	r3, [r7, #22]
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003640:	d102      	bne.n	8003648 <http_write+0xa4>
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d8da      	bhi.n	80035fe <http_write+0x5a>

  if (err == ERR_OK) {
 8003648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8afa      	ldrh	r2, [r7, #22]
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	e002      	b.n	800365e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800365e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	0800f95c 	.word	0x0800f95c
 8003670:	0800f994 	.word	0x0800f994
 8003674:	0800f9a4 	.word	0x0800f9a4

08003678 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003686:	2100      	movs	r1, #0
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f003 fe2d 	bl	80072e8 <tcp_arg>
  altcp_recv(pcb, NULL);
 800368e:	2100      	movs	r1, #0
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f003 fe3b 	bl	800730c <tcp_recv>
  altcp_err(pcb, NULL);
 8003696:	2100      	movs	r1, #0
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f003 fe7b 	bl	8007394 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f003 feb0 	bl	8007408 <tcp_poll>
  altcp_sent(pcb, NULL);
 80036a8:	2100      	movs	r1, #0
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f003 fe50 	bl	8007350 <tcp_sent>
  if (hs != NULL) {
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80036b6:	68b8      	ldr	r0, [r7, #8]
 80036b8:	f7ff ff62 	bl	8003580 <http_state_free>
  }

  if (abort_conn) {
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f002 fd52 	bl	800616c <tcp_abort>
    return ERR_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e00f      	b.n	80036ec <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f002 fc63 	bl	8005f98 <tcp_close>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80036d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80036de:	2204      	movs	r2, #4
 80036e0:	4904      	ldr	r1, [pc, #16]	; (80036f4 <http_close_or_abort_conn+0x7c>)
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f003 fe90 	bl	8007408 <tcp_poll>
  }
  return err;
 80036e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	08003dbb 	.word	0x08003dbb

080036f8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffb6 	bl	8003678 <http_close_or_abort_conn>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffe8 	bl	80036f8 <http_close_conn>
  }
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d105      	bne.n	800374e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe6 	bl	8003716 <http_eof>
    return 0;
 800374a:	2300      	movs	r3, #0
 800374c:	e016      	b.n	800377c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fec6 	bl	80034e4 <fs_bytes_left>
 8003758:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	dc05      	bgt.n	800376c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffd7 	bl	8003716 <http_eof>
    return 0;
 8003768:	2300      	movs	r3, #0
 800376a:	e007      	b.n	800377c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <http_check_eof+0x54>)
 800376e:	f240 429d 	movw	r2, #1181	; 0x49d
 8003772:	4905      	ldr	r1, [pc, #20]	; (8003788 <http_check_eof+0x58>)
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <http_check_eof+0x5c>)
 8003776:	f00b f861 	bl	800e83c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	0800f95c 	.word	0x0800f95c
 8003788:	0800f9cc 	.word	0x0800f9cc
 800378c:	0800f9a4 	.word	0x0800f9a4

08003790 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d803      	bhi.n	80037b2 <http_send_data_nonssi+0x22>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	e001      	b.n	80037b6 <http_send_data_nonssi+0x26>
 80037b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037b6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6999      	ldr	r1, [r3, #24]
 80037bc:	f107 020c 	add.w	r2, r7, #12
 80037c0:	2300      	movs	r3, #0
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff feee 	bl	80035a4 <http_write>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80037cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	89ba      	ldrh	r2, [r7, #12]
 80037de:	441a      	add	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	89ba      	ldrh	r2, [r7, #12]
 80037ea:	1a9a      	subs	r2, r3, r2
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <http_send+0x18>
    return 0;
 800380e:	2300      	movs	r3, #0
 8003810:	e025      	b.n	800385e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff87 	bl	8003730 <http_check_eof>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <http_send+0x32>
      return 0;
 8003828:	2300      	movs	r3, #0
 800382a:	e018      	b.n	800385e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ffae 	bl	8003790 <http_send_data_nonssi>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <http_send+0x62>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fe4d 	bl	80034e4 <fs_bytes_left>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	dc05      	bgt.n	800385c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff5f 	bl	8003716 <http_eof>
    return 0;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <http_get_404_file+0x80>)
 8003876:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff fde7 	bl	8003454 <fs_open>
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d024      	beq.n	80038dc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	4a15      	ldr	r2, [pc, #84]	; (80038ec <http_get_404_file+0x84>)
 8003896:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7ff fdd7 	bl	8003454 <fs_open>
 80038a6:	4603      	mov	r3, r0
 80038a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80038aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <http_get_404_file+0x88>)
 80038b6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7ff fdc7 	bl	8003454 <fs_open>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
        return NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80038dc:	687b      	ldr	r3, [r7, #4]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	0800fa04 	.word	0x0800fa04
 80038ec:	0800fa10 	.word	0x0800fa10
 80038f0:	0800fa1c 	.word	0x0800fa1c

080038f4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	; 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <http_parse_request+0x24>
 800390a:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <http_parse_request+0x1ac>)
 800390c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8003910:	4964      	ldr	r1, [pc, #400]	; (8003aa4 <http_parse_request+0x1b0>)
 8003912:	4865      	ldr	r0, [pc, #404]	; (8003aa8 <http_parse_request+0x1b4>)
 8003914:	f00a ff92 	bl	800e83c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <http_parse_request+0x38>
 800391e:	4b60      	ldr	r3, [pc, #384]	; (8003aa0 <http_parse_request+0x1ac>)
 8003920:	f240 72af 	movw	r2, #1967	; 0x7af
 8003924:	4961      	ldr	r1, [pc, #388]	; (8003aac <http_parse_request+0x1b8>)
 8003926:	4860      	ldr	r0, [pc, #384]	; (8003aa8 <http_parse_request+0x1b4>)
 8003928:	f00a ff88 	bl	800e83c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <http_parse_request+0x48>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800393c:	f06f 0307 	mvn.w	r3, #7
 8003940:	e0a9      	b.n	8003a96 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	621a      	str	r2, [r3, #32]
 8003950:	e005      	b.n	800395e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f001 ff41 	bl	80057e0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800395e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003960:	f001 ff1c 	bl	800579c <pbuf_ref>

  if (hs->req->next != NULL) {
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	891b      	ldrh	r3, [r3, #8]
 8003974:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003978:	4293      	cmp	r3, r2
 800397a:	bf28      	it	cs
 800397c:	4613      	movcs	r3, r2
 800397e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6a18      	ldr	r0, [r3, #32]
 8003984:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003986:	2300      	movs	r3, #0
 8003988:	4949      	ldr	r1, [pc, #292]	; (8003ab0 <http_parse_request+0x1bc>)
 800398a:	f002 f851 	bl	8005a30 <pbuf_copy_partial>
    data = httpd_req_buf;
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <http_parse_request+0x1bc>)
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	e005      	b.n	80039a0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	895b      	ldrh	r3, [r3, #10]
 800399e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80039a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d962      	bls.n	8003a6c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80039a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80039a8:	461a      	mov	r2, r3
 80039aa:	4942      	ldr	r1, [pc, #264]	; (8003ab4 <http_parse_request+0x1c0>)
 80039ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ae:	f000 fb99 	bl	80040e4 <lwip_strnstr>
 80039b2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d058      	beq.n	8003a6c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80039be:	2204      	movs	r2, #4
 80039c0:	493d      	ldr	r1, [pc, #244]	; (8003ab8 <http_parse_request+0x1c4>)
 80039c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039c4:	f00a ff9f 	bl	800e906 <strncmp>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <http_parse_request+0x108>
        sp1 = data + 3;
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	3303      	adds	r3, #3
 80039d2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	8b7a      	ldrh	r2, [r7, #26]
 80039ea:	4934      	ldr	r1, [pc, #208]	; (8003abc <http_parse_request+0x1c8>)
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fb79 	bl	80040e4 <lwip_strnstr>
 80039f2:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d111      	bne.n	8003a1e <http_parse_request+0x12a>
 80039fa:	e006      	b.n	8003a0a <http_parse_request+0x116>
        data[4] = 0;
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	3304      	adds	r3, #4
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8003a04:	f06f 030f 	mvn.w	r3, #15
 8003a08:	e045      	b.n	8003a96 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	8b7a      	ldrh	r2, [r7, #26]
 8003a10:	4928      	ldr	r1, [pc, #160]	; (8003ab4 <http_parse_request+0x1c0>)
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fb66 	bl	80040e4 <lwip_strnstr>
 8003a18:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3301      	adds	r3, #1
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01e      	beq.n	8003a6c <http_parse_request+0x178>
 8003a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d91a      	bls.n	8003a6c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003a36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4921      	ldr	r1, [pc, #132]	; (8003ac0 <http_parse_request+0x1cc>)
 8003a3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a3e:	f000 fb51 	bl	80040e4 <lwip_strnstr>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d011      	beq.n	8003a6c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8003a54:	8b3b      	ldrh	r3, [r7, #24]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8003a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a60:	6979      	ldr	r1, [r7, #20]
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	f000 f82e 	bl	8003ac4 <http_find_file>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	e014      	b.n	8003a96 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fe7b 	bl	800576c <pbuf_clen>
 8003a76:	4603      	mov	r3, r0
 8003a78:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	891b      	ldrh	r3, [r3, #8]
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d205      	bcs.n	8003a92 <http_parse_request+0x19e>
 8003a86:	8a7b      	ldrh	r3, [r7, #18]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d802      	bhi.n	8003a92 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8003a8c:	f06f 0304 	mvn.w	r3, #4
 8003a90:	e001      	b.n	8003a96 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8003a92:	f06f 030f 	mvn.w	r3, #15
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3738      	adds	r7, #56	; 0x38
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800f95c 	.word	0x0800f95c
 8003aa4:	0800fa28 	.word	0x0800fa28
 8003aa8:	0800f9a4 	.word	0x0800f9a4
 8003aac:	0800fa34 	.word	0x0800fa34
 8003ab0:	20000098 	.word	0x20000098
 8003ab4:	0800fa40 	.word	0x0800fa40
 8003ab8:	0800fa44 	.word	0x0800fa44
 8003abc:	0800fa4c 	.word	0x0800fa4c
 8003ac0:	0800fa50 	.word	0x0800fa50

08003ac4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b092      	sub	sp, #72	; 0x48
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fb7f 	bl	80001e4 <strlen>
 8003ae6:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d06b      	beq.n	8003bc6 <http_find_file+0x102>
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b2f      	cmp	r3, #47	; 0x2f
 8003afa:	d164      	bne.n	8003bc6 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003afc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8003afe:	4a53      	ldr	r2, [pc, #332]	; (8003c4c <http_find_file+0x188>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d15d      	bne.n	8003bc6 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	2b3f      	cmp	r3, #63	; 0x3f
 8003b10:	bf28      	it	cs
 8003b12:	233f      	movcs	r3, #63	; 0x3f
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	4619      	mov	r1, r3
 8003b22:	484a      	ldr	r0, [pc, #296]	; (8003c4c <http_find_file+0x188>)
 8003b24:	f00a fe74 	bl	800e810 <memcpy>
      http_uri_buf[copy_len] = 0;
 8003b28:	4a48      	ldr	r2, [pc, #288]	; (8003c4c <http_find_file+0x188>)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	4413      	add	r3, r2
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003b32:	2300      	movs	r3, #0
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b36:	e043      	b.n	8003bc0 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d028      	beq.n	8003b90 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003b44:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01e      	beq.n	8003b8a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8003b4c:	4a40      	ldr	r2, [pc, #256]	; (8003c50 <http_find_file+0x18c>)
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fb45 	bl	80001e4 <strlen>
 8003b5a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bf28      	it	cs
 8003b64:	4613      	movcs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <http_find_file+0x188>)
 8003b6c:	1898      	adds	r0, r3, r2
 8003b6e:	4a38      	ldr	r2, [pc, #224]	; (8003c50 <http_find_file+0x18c>)
 8003b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b72:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f00a fe49 	bl	800e810 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	4413      	add	r3, r2
 8003b84:	4a31      	ldr	r2, [pc, #196]	; (8003c4c <http_find_file+0x188>)
 8003b86:	2100      	movs	r1, #0
 8003b88:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8003b8a:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <http_find_file+0x188>)
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8e:	e004      	b.n	8003b9a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8003b90:	4a2f      	ldr	r2, [pc, #188]	; (8003c50 <http_find_file+0x18c>)
 8003b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fc58 	bl	8003454 <fs_open>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <http_find_file+0xf6>
        uri = file_name;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8003bb8:	e005      	b.n	8003bc6 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d9b8      	bls.n	8003b38 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d124      	bne.n	8003c16 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	213f      	movs	r1, #63	; 0x3f
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f00a fe8b 	bl	800e8ec <strchr>
 8003bd6:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
      params++;
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	3301      	adds	r3, #1
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fc2f 	bl	8003454 <fs_open>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8003bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <http_find_file+0x144>
      file = &hs->file_handle;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c06:	e006      	b.n	8003c16 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff fe2a 	bl	8003868 <http_get_404_file>
 8003c14:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8003c1c:	f107 0308 	add.w	r3, r7, #8
 8003c20:	4619      	mov	r1, r3
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff fe20 	bl	8003868 <http_get_404_file>
 8003c28:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f809 	bl	8003c54 <http_init_file>
 8003c42:	4603      	mov	r3, r0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3740      	adds	r7, #64	; 0x40
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000498 	.word	0x20000498
 8003c50:	080132ac 	.word	0x080132ac

08003c54 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d05c      	beq.n	8003d22 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <http_init_file+0x2a>
 8003c70:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <http_init_file+0xf4>)
 8003c72:	f640 120b 	movw	r2, #2315	; 0x90b
 8003c76:	4935      	ldr	r1, [pc, #212]	; (8003d4c <http_init_file+0xf8>)
 8003c78:	4835      	ldr	r0, [pc, #212]	; (8003d50 <http_init_file+0xfc>)
 8003c7a:	f00a fddf 	bl	800e83c <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da06      	bge.n	8003ca2 <http_init_file+0x4e>
 8003c94:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <http_init_file+0xf4>)
 8003c96:	f640 1234 	movw	r2, #2356	; 0x934
 8003c9a:	492e      	ldr	r1, [pc, #184]	; (8003d54 <http_init_file+0x100>)
 8003c9c:	482c      	ldr	r0, [pc, #176]	; (8003d50 <http_init_file+0xfc>)
 8003c9e:	f00a fdcd 	bl	800e83c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	7c1b      	ldrb	r3, [r3, #16]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <http_init_file+0x7c>
 8003cc2:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <http_init_file+0xf4>)
 8003cc4:	f640 1243 	movw	r2, #2371	; 0x943
 8003cc8:	4923      	ldr	r1, [pc, #140]	; (8003d58 <http_init_file+0x104>)
 8003cca:	4821      	ldr	r0, [pc, #132]	; (8003d50 <http_init_file+0xfc>)
 8003ccc:	f00a fdb6 	bl	800e83c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d032      	beq.n	8003d3c <http_init_file+0xe8>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	7c1b      	ldrb	r3, [r3, #16]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02b      	beq.n	8003d3c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6998      	ldr	r0, [r3, #24]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	461a      	mov	r2, r3
 8003cee:	491b      	ldr	r1, [pc, #108]	; (8003d5c <http_init_file+0x108>)
 8003cf0:	f000 f9f8 	bl	80040e4 <lwip_strnstr>
 8003cf4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01f      	beq.n	8003d3c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	441a      	add	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d20:	e00c      	b.n	8003d3c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	0800f95c 	.word	0x0800f95c
 8003d4c:	0800fa58 	.word	0x0800fa58
 8003d50:	0800f9a4 	.word	0x0800f9a4
 8003d54:	0800fa6c 	.word	0x0800fa6c
 8003d58:	0800fa8c 	.word	0x0800fa8c
 8003d5c:	0800fa50 	.word	0x0800fa50

08003d60 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <http_err+0x1c>
    http_state_free(hs);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fc02 	bl	8003580 <http_state_free>
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <http_sent+0x1c>
    return ERR_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e008      	b.n	8003db2 <http_sent+0x2e>
  }

  hs->retries = 0;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	68b8      	ldr	r0, [r7, #8]
 8003dac:	f7ff fd25 	bl	80037fa <http_send>

  return ERR_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	6838      	ldr	r0, [r7, #0]
 8003dd2:	f7ff fc91 	bl	80036f8 <http_close_conn>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e021      	b.n	8003e22 <http_poll+0x68>
  } else {
    hs->retries++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d105      	bne.n	8003e04 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	6838      	ldr	r0, [r7, #0]
 8003dfc:	f7ff fc7c 	bl	80036f8 <http_close_conn>
      return ERR_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e00e      	b.n	8003e22 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	f7ff fcf3 	bl	80037fa <http_send>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f006 ff8c 	bl	800ad38 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <http_recv+0x26>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <http_recv+0x26>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d111      	bne.n	8003e76 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	891b      	ldrh	r3, [r3, #8]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68b8      	ldr	r0, [r7, #8]
 8003e60:	f002 fb5e 	bl	8006520 <tcp_recved>
      pbuf_free(p);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f001 fbf9 	bl	800565c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8003e6a:	6979      	ldr	r1, [r7, #20]
 8003e6c:	68b8      	ldr	r0, [r7, #8]
 8003e6e:	f7ff fc43 	bl	80036f8 <http_close_conn>
    return ERR_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e055      	b.n	8003f22 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	891b      	ldrh	r3, [r3, #8]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f002 fb4f 	bl	8006520 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d147      	bne.n	8003f1a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fd30 	bl	80038f4 <http_parse_request>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8003e98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <http_recv+0xa0>
 8003ea0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ea4:	f113 0f05 	cmn.w	r3, #5
 8003ea8:	d010      	beq.n	8003ecc <http_recv+0xa0>
 8003eaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003eae:	f113 0f10 	cmn.w	r3, #16
 8003eb2:	d00b      	beq.n	8003ecc <http_recv+0xa0>
 8003eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003eb8:	f113 0f08 	cmn.w	r3, #8
 8003ebc:	d006      	beq.n	8003ecc <http_recv+0xa0>
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <http_recv+0x100>)
 8003ec0:	f640 2204 	movw	r2, #2564	; 0xa04
 8003ec4:	491a      	ldr	r1, [pc, #104]	; (8003f30 <http_recv+0x104>)
 8003ec6:	481b      	ldr	r0, [pc, #108]	; (8003f34 <http_recv+0x108>)
 8003ec8:	f00a fcb8 	bl	800e83c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8003ecc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ed0:	f113 0f05 	cmn.w	r3, #5
 8003ed4:	d00b      	beq.n	8003eee <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <http_recv+0xc2>
          pbuf_free(hs->req);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 fbba 	bl	800565c <pbuf_free>
          hs->req = NULL;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f001 fbb4 	bl	800565c <pbuf_free>
      if (parsed == ERR_OK) {
 8003ef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f7ff fc7b 	bl	80037fa <http_send>
 8003f04:	e00c      	b.n	8003f20 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8003f06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003f0a:	f113 0f10 	cmn.w	r3, #16
 8003f0e:	d107      	bne.n	8003f20 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	68b8      	ldr	r0, [r7, #8]
 8003f14:	f7ff fbf0 	bl	80036f8 <http_close_conn>
 8003f18:	e002      	b.n	8003f20 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f001 fb9e 	bl	800565c <pbuf_free>
    }
  }
  return ERR_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0800f95c 	.word	0x0800f95c
 8003f30:	0800fab8 	.word	0x0800fab8
 8003f34:	0800f9a4 	.word	0x0800f9a4

08003f38 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <http_accept+0x1c>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <http_accept+0x22>
    return ERR_VAL;
 8003f54:	f06f 0305 	mvn.w	r3, #5
 8003f58:	e025      	b.n	8003fa6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f002 ffc3 	bl	8006ee8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8003f62:	f7ff fadb 	bl	800351c <http_state_alloc>
 8003f66:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f72:	e018      	b.n	8003fa6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	f003 f9b3 	bl	80072e8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8003f82:	490b      	ldr	r1, [pc, #44]	; (8003fb0 <http_accept+0x78>)
 8003f84:	68b8      	ldr	r0, [r7, #8]
 8003f86:	f003 f9c1 	bl	800730c <tcp_recv>
  altcp_err(pcb, http_err);
 8003f8a:	490a      	ldr	r1, [pc, #40]	; (8003fb4 <http_accept+0x7c>)
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f003 fa01 	bl	8007394 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003f92:	2204      	movs	r2, #4
 8003f94:	4908      	ldr	r1, [pc, #32]	; (8003fb8 <http_accept+0x80>)
 8003f96:	68b8      	ldr	r0, [r7, #8]
 8003f98:	f003 fa36 	bl	8007408 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8003f9c:	4907      	ldr	r1, [pc, #28]	; (8003fbc <http_accept+0x84>)
 8003f9e:	68b8      	ldr	r0, [r7, #8]
 8003fa0:	f003 f9d6 	bl	8007350 <tcp_sent>

  return ERR_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	08003e2d 	.word	0x08003e2d
 8003fb4:	08003d61 	.word	0x08003d61
 8003fb8:	08003dbb 	.word	0x08003dbb
 8003fbc:	08003d85 	.word	0x08003d85

08003fc0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d029      	beq.n	8004026 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f002 ff87 	bl	8006ee8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4914      	ldr	r1, [pc, #80]	; (8004030 <httpd_init_pcb+0x70>)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f002 f8cf 	bl	8006184 <tcp_bind>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8003fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <httpd_init_pcb+0x40>
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <httpd_init_pcb+0x74>)
 8003ff4:	f640 2257 	movw	r2, #2647	; 0xa57
 8003ff8:	490f      	ldr	r1, [pc, #60]	; (8004038 <httpd_init_pcb+0x78>)
 8003ffa:	4810      	ldr	r0, [pc, #64]	; (800403c <httpd_init_pcb+0x7c>)
 8003ffc:	f00a fc1e 	bl	800e83c <iprintf>
    pcb = altcp_listen(pcb);
 8004000:	21ff      	movs	r1, #255	; 0xff
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f002 f976 	bl	80062f4 <tcp_listen_with_backlog>
 8004008:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <httpd_init_pcb+0x5e>
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <httpd_init_pcb+0x74>)
 8004012:	f640 2259 	movw	r2, #2649	; 0xa59
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <httpd_init_pcb+0x80>)
 8004018:	4808      	ldr	r0, [pc, #32]	; (800403c <httpd_init_pcb+0x7c>)
 800401a:	f00a fc0f 	bl	800e83c <iprintf>
    altcp_accept(pcb, http_accept);
 800401e:	4909      	ldr	r1, [pc, #36]	; (8004044 <httpd_init_pcb+0x84>)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f003 f9d9 	bl	80073d8 <tcp_accept>
  }
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	080133a4 	.word	0x080133a4
 8004034:	0800f95c 	.word	0x0800f95c
 8004038:	0800fae4 	.word	0x0800fae4
 800403c:	0800f9a4 	.word	0x0800f9a4
 8004040:	0800fb00 	.word	0x0800fb00
 8004044:	08003f39 	.word	0x08003f39

08004048 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800404e:	202e      	movs	r0, #46	; 0x2e
 8004050:	f003 f93c 	bl	80072cc <tcp_new_ip_type>
 8004054:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <httpd_init+0x22>
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <httpd_init+0x34>)
 800405e:	f640 2272 	movw	r2, #2674	; 0xa72
 8004062:	4907      	ldr	r1, [pc, #28]	; (8004080 <httpd_init+0x38>)
 8004064:	4807      	ldr	r0, [pc, #28]	; (8004084 <httpd_init+0x3c>)
 8004066:	f00a fbe9 	bl	800e83c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800406a:	2150      	movs	r1, #80	; 0x50
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ffa7 	bl	8003fc0 <httpd_init_pcb>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	0800f95c 	.word	0x0800f95c
 8004080:	0800fb20 	.word	0x0800fb20
 8004084:	0800f9a4 	.word	0x0800f9a4

08004088 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	b21a      	sxth	r2, r3
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	b29b      	uxth	r3, r3
 800409e:	b21b      	sxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b21b      	sxth	r3, r3
 80040a4:	b29b      	uxth	r3, r3
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	061a      	lsls	r2, r3, #24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	4313      	orrs	r3, r2
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80040f0:	68b8      	ldr	r0, [r7, #8]
 80040f2:	f7fc f877 	bl	80001e4 <strlen>
 80040f6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	e022      	b.n	8004148 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e012      	b.n	800412e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d109      	bne.n	8004128 <lwip_strnstr+0x44>
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f00a fbf4 	bl	800e906 <strncmp>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	e00f      	b.n	8004148 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <lwip_strnstr+0x62>
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	441a      	add	r2, r3
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	440b      	add	r3, r1
 8004142:	429a      	cmp	r2, r3
 8004144:	d9e0      	bls.n	8004108 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800415a:	f000 f8d5 	bl	8004308 <mem_init>
  memp_init();
 800415e:	f000 fbdb 	bl	8004918 <memp_init>
  pbuf_init();
  netif_init();
 8004162:	f000 fc93 	bl	8004a8c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004166:	f007 fea7 	bl	800beb8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800416a:	f001 fd05 	bl	8005b78 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800416e:	f007 fe19 	bl	800bda4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <ptr_to_mem+0x20>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	4413      	add	r3, r2
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	200004d8 	.word	0x200004d8

080041a0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <mem_to_ptr+0x20>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	b29b      	uxth	r3, r3
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200004d8 	.word	0x200004d8

080041c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80041cc:	4b45      	ldr	r3, [pc, #276]	; (80042e4 <plug_holes+0x120>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d206      	bcs.n	80041e4 <plug_holes+0x20>
 80041d6:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <plug_holes+0x124>)
 80041d8:	f240 12df 	movw	r2, #479	; 0x1df
 80041dc:	4943      	ldr	r1, [pc, #268]	; (80042ec <plug_holes+0x128>)
 80041de:	4844      	ldr	r0, [pc, #272]	; (80042f0 <plug_holes+0x12c>)
 80041e0:	f00a fb2c 	bl	800e83c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80041e4:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <plug_holes+0x130>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d306      	bcc.n	80041fc <plug_holes+0x38>
 80041ee:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <plug_holes+0x124>)
 80041f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041f4:	4940      	ldr	r1, [pc, #256]	; (80042f8 <plug_holes+0x134>)
 80041f6:	483e      	ldr	r0, [pc, #248]	; (80042f0 <plug_holes+0x12c>)
 80041f8:	f00a fb20 	bl	800e83c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <plug_holes+0x4e>
 8004204:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <plug_holes+0x124>)
 8004206:	f240 12e1 	movw	r2, #481	; 0x1e1
 800420a:	493c      	ldr	r1, [pc, #240]	; (80042fc <plug_holes+0x138>)
 800420c:	4838      	ldr	r0, [pc, #224]	; (80042f0 <plug_holes+0x12c>)
 800420e:	f00a fb15 	bl	800e83c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800421a:	d906      	bls.n	800422a <plug_holes+0x66>
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <plug_holes+0x124>)
 800421e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004222:	4937      	ldr	r1, [pc, #220]	; (8004300 <plug_holes+0x13c>)
 8004224:	4832      	ldr	r0, [pc, #200]	; (80042f0 <plug_holes+0x12c>)
 8004226:	f00a fb09 	bl	800e83c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ffa4 	bl	800417c <ptr_to_mem>
 8004234:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	d024      	beq.n	8004288 <plug_holes+0xc4>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	791b      	ldrb	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d120      	bne.n	8004288 <plug_holes+0xc4>
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <plug_holes+0x130>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	429a      	cmp	r2, r3
 800424e:	d01b      	beq.n	8004288 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <plug_holes+0x140>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	429a      	cmp	r2, r3
 8004258:	d102      	bne.n	8004260 <plug_holes+0x9c>
      lfree = mem;
 800425a:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <plug_holes+0x140>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004270:	d00a      	beq.n	8004288 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff80 	bl	800417c <ptr_to_mem>
 800427c:	4604      	mov	r4, r0
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff ff8e 	bl	80041a0 <mem_to_ptr>
 8004284:	4603      	mov	r3, r0
 8004286:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	885b      	ldrh	r3, [r3, #2]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff75 	bl	800417c <ptr_to_mem>
 8004292:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d01f      	beq.n	80042dc <plug_holes+0x118>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	791b      	ldrb	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11b      	bne.n	80042dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <plug_holes+0x140>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d102      	bne.n	80042b4 <plug_holes+0xf0>
      lfree = pmem;
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <plug_holes+0x140>)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042c4:	d00a      	beq.n	80042dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ff56 	bl	800417c <ptr_to_mem>
 80042d0:	4604      	mov	r4, r0
 80042d2:	68b8      	ldr	r0, [r7, #8]
 80042d4:	f7ff ff64 	bl	80041a0 <mem_to_ptr>
 80042d8:	4603      	mov	r3, r0
 80042da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	200004d8 	.word	0x200004d8
 80042e8:	0800fb3c 	.word	0x0800fb3c
 80042ec:	0800fb6c 	.word	0x0800fb6c
 80042f0:	0800fb84 	.word	0x0800fb84
 80042f4:	200004dc 	.word	0x200004dc
 80042f8:	0800fbac 	.word	0x0800fbac
 80042fc:	0800fbc8 	.word	0x0800fbc8
 8004300:	0800fbe4 	.word	0x0800fbe4
 8004304:	200004e0 	.word	0x200004e0

08004308 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800430e:	4b18      	ldr	r3, [pc, #96]	; (8004370 <mem_init+0x68>)
 8004310:	3303      	adds	r3, #3
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	461a      	mov	r2, r3
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <mem_init+0x6c>)
 800431a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <mem_init+0x6c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004328:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004336:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800433a:	f7ff ff1f 	bl	800417c <ptr_to_mem>
 800433e:	4603      	mov	r3, r0
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <mem_init+0x70>)
 8004342:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <mem_init+0x70>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <mem_init+0x70>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004354:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <mem_init+0x70>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800435e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <mem_init+0x6c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a05      	ldr	r2, [pc, #20]	; (800437c <mem_init+0x74>)
 8004366:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200037a0 	.word	0x200037a0
 8004374:	200004d8 	.word	0x200004d8
 8004378:	200004dc 	.word	0x200004dc
 800437c:	200004e0 	.word	0x200004e0

08004380 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff09 	bl	80041a0 <mem_to_ptr>
 800438e:	4603      	mov	r3, r0
 8004390:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fef0 	bl	800417c <ptr_to_mem>
 800439c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	885b      	ldrh	r3, [r3, #2]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff feea 	bl	800417c <ptr_to_mem>
 80043a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043b2:	d818      	bhi.n	80043e6 <mem_link_valid+0x66>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	885b      	ldrh	r3, [r3, #2]
 80043b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043bc:	d813      	bhi.n	80043e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043c2:	8afa      	ldrh	r2, [r7, #22]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d004      	beq.n	80043d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	8afa      	ldrh	r2, [r7, #22]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d109      	bne.n	80043e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <mem_link_valid+0x74>)
 80043d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d006      	beq.n	80043ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	885b      	ldrh	r3, [r3, #2]
 80043e0:	8afa      	ldrh	r2, [r7, #22]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d001      	beq.n	80043ea <mem_link_valid+0x6a>
    return 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <mem_link_valid+0x6c>
  }
  return 1;
 80043ea:	2301      	movs	r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	200004dc 	.word	0x200004dc

080043f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04c      	beq.n	80044a0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <mem_free+0xb0>)
 8004412:	f240 2273 	movw	r2, #627	; 0x273
 8004416:	4925      	ldr	r1, [pc, #148]	; (80044ac <mem_free+0xb4>)
 8004418:	4825      	ldr	r0, [pc, #148]	; (80044b0 <mem_free+0xb8>)
 800441a:	f00a fa0f 	bl	800e83c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800441e:	e040      	b.n	80044a2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b08      	subs	r3, #8
 8004424:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <mem_free+0xbc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d306      	bcc.n	800443e <mem_free+0x46>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f103 020c 	add.w	r2, r3, #12
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <mem_free+0xc0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d907      	bls.n	800444e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <mem_free+0xb0>)
 8004440:	f240 227f 	movw	r2, #639	; 0x27f
 8004444:	491d      	ldr	r1, [pc, #116]	; (80044bc <mem_free+0xc4>)
 8004446:	481a      	ldr	r0, [pc, #104]	; (80044b0 <mem_free+0xb8>)
 8004448:	f00a f9f8 	bl	800e83c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800444c:	e029      	b.n	80044a2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d107      	bne.n	8004466 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <mem_free+0xb0>)
 8004458:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800445c:	4918      	ldr	r1, [pc, #96]	; (80044c0 <mem_free+0xc8>)
 800445e:	4814      	ldr	r0, [pc, #80]	; (80044b0 <mem_free+0xb8>)
 8004460:	f00a f9ec 	bl	800e83c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004464:	e01d      	b.n	80044a2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff ff8a 	bl	8004380 <mem_link_valid>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <mem_free+0xb0>)
 8004474:	f240 2295 	movw	r2, #661	; 0x295
 8004478:	4912      	ldr	r1, [pc, #72]	; (80044c4 <mem_free+0xcc>)
 800447a:	480d      	ldr	r0, [pc, #52]	; (80044b0 <mem_free+0xb8>)
 800447c:	f00a f9de 	bl	800e83c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004480:	e00f      	b.n	80044a2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <mem_free+0xd0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	429a      	cmp	r2, r3
 8004490:	d202      	bcs.n	8004498 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004492:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <mem_free+0xd0>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fe93 	bl	80041c4 <plug_holes>
 800449e:	e000      	b.n	80044a2 <mem_free+0xaa>
    return;
 80044a0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	0800fb3c 	.word	0x0800fb3c
 80044ac:	0800fc10 	.word	0x0800fc10
 80044b0:	0800fb84 	.word	0x0800fb84
 80044b4:	200004d8 	.word	0x200004d8
 80044b8:	200004dc 	.word	0x200004dc
 80044bc:	0800fc34 	.word	0x0800fc34
 80044c0:	0800fc50 	.word	0x0800fc50
 80044c4:	0800fc78 	.word	0x0800fc78
 80044c8:	200004e0 	.word	0x200004e0

080044cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	3303      	adds	r3, #3
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80044e4:	8bfb      	ldrh	r3, [r7, #30]
 80044e6:	2b0b      	cmp	r3, #11
 80044e8:	d801      	bhi.n	80044ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80044ea:	230c      	movs	r3, #12
 80044ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80044ee:	8bfb      	ldrh	r3, [r7, #30]
 80044f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80044f4:	d803      	bhi.n	80044fe <mem_trim+0x32>
 80044f6:	8bfa      	ldrh	r2, [r7, #30]
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d201      	bcs.n	8004502 <mem_trim+0x36>
    return NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	e0cc      	b.n	800469c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004502:	4b68      	ldr	r3, [pc, #416]	; (80046a4 <mem_trim+0x1d8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d304      	bcc.n	8004516 <mem_trim+0x4a>
 800450c:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <mem_trim+0x1dc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	d306      	bcc.n	8004524 <mem_trim+0x58>
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <mem_trim+0x1e0>)
 8004518:	f240 22d1 	movw	r2, #721	; 0x2d1
 800451c:	4964      	ldr	r1, [pc, #400]	; (80046b0 <mem_trim+0x1e4>)
 800451e:	4865      	ldr	r0, [pc, #404]	; (80046b4 <mem_trim+0x1e8>)
 8004520:	f00a f98c 	bl	800e83c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004524:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <mem_trim+0x1d8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d304      	bcc.n	8004538 <mem_trim+0x6c>
 800452e:	4b5e      	ldr	r3, [pc, #376]	; (80046a8 <mem_trim+0x1dc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d301      	bcc.n	800453c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	e0af      	b.n	800469c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3b08      	subs	r3, #8
 8004540:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f7ff fe2c 	bl	80041a0 <mem_to_ptr>
 8004548:	4603      	mov	r3, r0
 800454a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	8afb      	ldrh	r3, [r7, #22]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b08      	subs	r3, #8
 8004558:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800455a:	8bfa      	ldrh	r2, [r7, #30]
 800455c:	8abb      	ldrh	r3, [r7, #20]
 800455e:	429a      	cmp	r2, r3
 8004560:	d906      	bls.n	8004570 <mem_trim+0xa4>
 8004562:	4b52      	ldr	r3, [pc, #328]	; (80046ac <mem_trim+0x1e0>)
 8004564:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004568:	4953      	ldr	r1, [pc, #332]	; (80046b8 <mem_trim+0x1ec>)
 800456a:	4852      	ldr	r0, [pc, #328]	; (80046b4 <mem_trim+0x1e8>)
 800456c:	f00a f966 	bl	800e83c <iprintf>
  if (newsize > size) {
 8004570:	8bfa      	ldrh	r2, [r7, #30]
 8004572:	8abb      	ldrh	r3, [r7, #20]
 8004574:	429a      	cmp	r2, r3
 8004576:	d901      	bls.n	800457c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	e08f      	b.n	800469c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800457c:	8bfa      	ldrh	r2, [r7, #30]
 800457e:	8abb      	ldrh	r3, [r7, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	d101      	bne.n	8004588 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	e089      	b.n	800469c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fdf5 	bl	800417c <ptr_to_mem>
 8004592:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	791b      	ldrb	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d13f      	bne.n	800461c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80045a4:	d106      	bne.n	80045b4 <mem_trim+0xe8>
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <mem_trim+0x1e0>)
 80045a8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80045ac:	4943      	ldr	r1, [pc, #268]	; (80046bc <mem_trim+0x1f0>)
 80045ae:	4841      	ldr	r0, [pc, #260]	; (80046b4 <mem_trim+0x1e8>)
 80045b0:	f00a f944 	bl	800e83c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80045ba:	8afa      	ldrh	r2, [r7, #22]
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	4413      	add	r3, r2
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3308      	adds	r3, #8
 80045c4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <mem_trim+0x1f4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d106      	bne.n	80045de <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80045d0:	89fb      	ldrh	r3, [r7, #14]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fdd2 	bl	800417c <ptr_to_mem>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <mem_trim+0x1f4>)
 80045dc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fdcb 	bl	800417c <ptr_to_mem>
 80045e6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2200      	movs	r2, #0
 80045ec:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	89ba      	ldrh	r2, [r7, #12]
 80045f2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	8afa      	ldrh	r2, [r7, #22]
 80045f8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	89fa      	ldrh	r2, [r7, #14]
 80045fe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004608:	d047      	beq.n	800469a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fdb4 	bl	800417c <ptr_to_mem>
 8004614:	4602      	mov	r2, r0
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	8053      	strh	r3, [r2, #2]
 800461a:	e03e      	b.n	800469a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800461c:	8bfb      	ldrh	r3, [r7, #30]
 800461e:	f103 0214 	add.w	r2, r3, #20
 8004622:	8abb      	ldrh	r3, [r7, #20]
 8004624:	429a      	cmp	r2, r3
 8004626:	d838      	bhi.n	800469a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004628:	8afa      	ldrh	r2, [r7, #22]
 800462a:	8bfb      	ldrh	r3, [r7, #30]
 800462c:	4413      	add	r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	3308      	adds	r3, #8
 8004632:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800463c:	d106      	bne.n	800464c <mem_trim+0x180>
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <mem_trim+0x1e0>)
 8004640:	f240 3216 	movw	r2, #790	; 0x316
 8004644:	491d      	ldr	r1, [pc, #116]	; (80046bc <mem_trim+0x1f0>)
 8004646:	481b      	ldr	r0, [pc, #108]	; (80046b4 <mem_trim+0x1e8>)
 8004648:	f00a f8f8 	bl	800e83c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fd94 	bl	800417c <ptr_to_mem>
 8004654:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <mem_trim+0x1f4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	429a      	cmp	r2, r3
 800465e:	d202      	bcs.n	8004666 <mem_trim+0x19a>
      lfree = mem2;
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <mem_trim+0x1f4>)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2200      	movs	r2, #0
 800466a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	8afa      	ldrh	r2, [r7, #22]
 8004678:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	89fa      	ldrh	r2, [r7, #14]
 800467e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004688:	d007      	beq.n	800469a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fd74 	bl	800417c <ptr_to_mem>
 8004694:	4602      	mov	r2, r0
 8004696:	89fb      	ldrh	r3, [r7, #14]
 8004698:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800469a:	687b      	ldr	r3, [r7, #4]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200004d8 	.word	0x200004d8
 80046a8:	200004dc 	.word	0x200004dc
 80046ac:	0800fb3c 	.word	0x0800fb3c
 80046b0:	0800fcac 	.word	0x0800fcac
 80046b4:	0800fb84 	.word	0x0800fb84
 80046b8:	0800fcc4 	.word	0x0800fcc4
 80046bc:	0800fce4 	.word	0x0800fce4
 80046c0:	200004e0 	.word	0x200004e0

080046c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <mem_malloc+0x14>
    return NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e0d9      	b.n	800488c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	3303      	adds	r3, #3
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80046e4:	8bbb      	ldrh	r3, [r7, #28]
 80046e6:	2b0b      	cmp	r3, #11
 80046e8:	d801      	bhi.n	80046ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80046ea:	230c      	movs	r3, #12
 80046ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80046ee:	8bbb      	ldrh	r3, [r7, #28]
 80046f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80046f4:	d803      	bhi.n	80046fe <mem_malloc+0x3a>
 80046f6:	8bba      	ldrh	r2, [r7, #28]
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d201      	bcs.n	8004702 <mem_malloc+0x3e>
    return NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	e0c4      	b.n	800488c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004702:	4b64      	ldr	r3, [pc, #400]	; (8004894 <mem_malloc+0x1d0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fd4a 	bl	80041a0 <mem_to_ptr>
 800470c:	4603      	mov	r3, r0
 800470e:	83fb      	strh	r3, [r7, #30]
 8004710:	e0b4      	b.n	800487c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004712:	8bfb      	ldrh	r3, [r7, #30]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fd31 	bl	800417c <ptr_to_mem>
 800471a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	791b      	ldrb	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 80a4 	bne.w	800486e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	8bfb      	ldrh	r3, [r7, #30]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f1a3 0208 	sub.w	r2, r3, #8
 8004734:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004736:	429a      	cmp	r2, r3
 8004738:	f0c0 8099 	bcc.w	800486e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	8bfb      	ldrh	r3, [r7, #30]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f1a3 0208 	sub.w	r2, r3, #8
 800474a:	8bbb      	ldrh	r3, [r7, #28]
 800474c:	3314      	adds	r3, #20
 800474e:	429a      	cmp	r2, r3
 8004750:	d333      	bcc.n	80047ba <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004752:	8bfa      	ldrh	r2, [r7, #30]
 8004754:	8bbb      	ldrh	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	3308      	adds	r3, #8
 800475c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800475e:	8a7b      	ldrh	r3, [r7, #18]
 8004760:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004764:	d106      	bne.n	8004774 <mem_malloc+0xb0>
 8004766:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <mem_malloc+0x1d4>)
 8004768:	f240 3287 	movw	r2, #903	; 0x387
 800476c:	494b      	ldr	r1, [pc, #300]	; (800489c <mem_malloc+0x1d8>)
 800476e:	484c      	ldr	r0, [pc, #304]	; (80048a0 <mem_malloc+0x1dc>)
 8004770:	f00a f864 	bl	800e83c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004774:	8a7b      	ldrh	r3, [r7, #18]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fd00 	bl	800417c <ptr_to_mem>
 800477c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	881a      	ldrh	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8bfa      	ldrh	r2, [r7, #30]
 8004790:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	8a7a      	ldrh	r2, [r7, #18]
 8004796:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2201      	movs	r2, #1
 800479c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80047a6:	d00b      	beq.n	80047c0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fce5 	bl	800417c <ptr_to_mem>
 80047b2:	4602      	mov	r2, r0
 80047b4:	8a7b      	ldrh	r3, [r7, #18]
 80047b6:	8053      	strh	r3, [r2, #2]
 80047b8:	e002      	b.n	80047c0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2201      	movs	r2, #1
 80047be:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80047c0:	4b34      	ldr	r3, [pc, #208]	; (8004894 <mem_malloc+0x1d0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d127      	bne.n	800481a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80047ca:	4b32      	ldr	r3, [pc, #200]	; (8004894 <mem_malloc+0x1d0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80047d0:	e005      	b.n	80047de <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fcd0 	bl	800417c <ptr_to_mem>
 80047dc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <mem_malloc+0x12c>
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <mem_malloc+0x1e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1f0      	bne.n	80047d2 <mem_malloc+0x10e>
          }
          lfree = cur;
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <mem_malloc+0x1d0>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80047f6:	4b27      	ldr	r3, [pc, #156]	; (8004894 <mem_malloc+0x1d0>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <mem_malloc+0x1e0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d00b      	beq.n	800481a <mem_malloc+0x156>
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <mem_malloc+0x1d0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	791b      	ldrb	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <mem_malloc+0x156>
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <mem_malloc+0x1d4>)
 800480e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004812:	4925      	ldr	r1, [pc, #148]	; (80048a8 <mem_malloc+0x1e4>)
 8004814:	4822      	ldr	r0, [pc, #136]	; (80048a0 <mem_malloc+0x1dc>)
 8004816:	f00a f811 	bl	800e83c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800481a:	8bba      	ldrh	r2, [r7, #28]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	3308      	adds	r3, #8
 8004822:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <mem_malloc+0x1e0>)
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	4293      	cmp	r3, r2
 8004828:	d906      	bls.n	8004838 <mem_malloc+0x174>
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <mem_malloc+0x1d4>)
 800482c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004830:	491e      	ldr	r1, [pc, #120]	; (80048ac <mem_malloc+0x1e8>)
 8004832:	481b      	ldr	r0, [pc, #108]	; (80048a0 <mem_malloc+0x1dc>)
 8004834:	f00a f802 	bl	800e83c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <mem_malloc+0x18c>
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <mem_malloc+0x1d4>)
 8004844:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004848:	4919      	ldr	r1, [pc, #100]	; (80048b0 <mem_malloc+0x1ec>)
 800484a:	4815      	ldr	r0, [pc, #84]	; (80048a0 <mem_malloc+0x1dc>)
 800484c:	f009 fff6 	bl	800e83c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <mem_malloc+0x1a4>
 800485a:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <mem_malloc+0x1d4>)
 800485c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004860:	4914      	ldr	r1, [pc, #80]	; (80048b4 <mem_malloc+0x1f0>)
 8004862:	480f      	ldr	r0, [pc, #60]	; (80048a0 <mem_malloc+0x1dc>)
 8004864:	f009 ffea 	bl	800e83c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3308      	adds	r3, #8
 800486c:	e00e      	b.n	800488c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800486e:	8bfb      	ldrh	r3, [r7, #30]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fc83 	bl	800417c <ptr_to_mem>
 8004876:	4603      	mov	r3, r0
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800487c:	8bfa      	ldrh	r2, [r7, #30]
 800487e:	8bbb      	ldrh	r3, [r7, #28]
 8004880:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004884:	429a      	cmp	r2, r3
 8004886:	f4ff af44 	bcc.w	8004712 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200004e0 	.word	0x200004e0
 8004898:	0800fb3c 	.word	0x0800fb3c
 800489c:	0800fce4 	.word	0x0800fce4
 80048a0:	0800fb84 	.word	0x0800fb84
 80048a4:	200004dc 	.word	0x200004dc
 80048a8:	0800fcf8 	.word	0x0800fcf8
 80048ac:	0800fd14 	.word	0x0800fd14
 80048b0:	0800fd44 	.word	0x0800fd44
 80048b4:	0800fd74 	.word	0x0800fd74

080048b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	3303      	adds	r3, #3
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e011      	b.n	80048fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	885b      	ldrh	r3, [r3, #2]
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4293      	cmp	r3, r2
 8004908:	dbe7      	blt.n	80048da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800491e:	2300      	movs	r3, #0
 8004920:	80fb      	strh	r3, [r7, #6]
 8004922:	e009      	b.n	8004938 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <memp_init+0x30>)
 8004928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ffc3 	bl	80048b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	3301      	adds	r3, #1
 8004936:	80fb      	strh	r3, [r7, #6]
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b08      	cmp	r3, #8
 800493c:	d9f2      	bls.n	8004924 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	08013340 	.word	0x08013340

0800494c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d012      	beq.n	8004988 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d006      	beq.n	8004984 <do_memp_malloc_pool+0x38>
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <do_memp_malloc_pool+0x48>)
 8004978:	f44f 728c 	mov.w	r2, #280	; 0x118
 800497c:	4906      	ldr	r1, [pc, #24]	; (8004998 <do_memp_malloc_pool+0x4c>)
 800497e:	4807      	ldr	r0, [pc, #28]	; (800499c <do_memp_malloc_pool+0x50>)
 8004980:	f009 ff5c 	bl	800e83c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	e000      	b.n	800498a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	0800fd98 	.word	0x0800fd98
 8004998:	0800fdc8 	.word	0x0800fdc8
 800499c:	0800fdec 	.word	0x0800fdec

080049a0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d908      	bls.n	80049c2 <memp_malloc+0x22>
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <memp_malloc+0x3c>)
 80049b2:	f240 1257 	movw	r2, #343	; 0x157
 80049b6:	490a      	ldr	r1, [pc, #40]	; (80049e0 <memp_malloc+0x40>)
 80049b8:	480a      	ldr	r0, [pc, #40]	; (80049e4 <memp_malloc+0x44>)
 80049ba:	f009 ff3f 	bl	800e83c <iprintf>
 80049be:	2300      	movs	r3, #0
 80049c0:	e008      	b.n	80049d4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <memp_malloc+0x48>)
 80049c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ffbe 	bl	800494c <do_memp_malloc_pool>
 80049d0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80049d2:	68fb      	ldr	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	0800fd98 	.word	0x0800fd98
 80049e0:	0800fe28 	.word	0x0800fe28
 80049e4:	0800fdec 	.word	0x0800fdec
 80049e8:	08013340 	.word	0x08013340

080049ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <do_memp_free_pool+0x22>
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <do_memp_free_pool+0x40>)
 8004a02:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004a06:	490a      	ldr	r1, [pc, #40]	; (8004a30 <do_memp_free_pool+0x44>)
 8004a08:	480a      	ldr	r0, [pc, #40]	; (8004a34 <do_memp_free_pool+0x48>)
 8004a0a:	f009 ff17 	bl	800e83c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	0800fd98 	.word	0x0800fd98
 8004a30:	0800fe48 	.word	0x0800fe48
 8004a34:	0800fdec 	.word	0x0800fdec

08004a38 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d907      	bls.n	8004a5a <memp_free+0x22>
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <memp_free+0x44>)
 8004a4c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004a50:	490b      	ldr	r1, [pc, #44]	; (8004a80 <memp_free+0x48>)
 8004a52:	480c      	ldr	r0, [pc, #48]	; (8004a84 <memp_free+0x4c>)
 8004a54:	f009 fef2 	bl	800e83c <iprintf>
 8004a58:	e00c      	b.n	8004a74 <memp_free+0x3c>

  if (mem == NULL) {
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <memp_free+0x50>)
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ffbe 	bl	80049ec <do_memp_free_pool>
 8004a70:	e000      	b.n	8004a74 <memp_free+0x3c>
    return;
 8004a72:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	0800fd98 	.word	0x0800fd98
 8004a80:	0800fe68 	.word	0x0800fe68
 8004a84:	0800fdec 	.word	0x0800fdec
 8004a88:	08013340 	.word	0x08013340

08004a8c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d108      	bne.n	8004ac2 <netif_add+0x26>
 8004ab0:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <netif_add+0x174>)
 8004ab2:	f240 1227 	movw	r2, #295	; 0x127
 8004ab6:	4957      	ldr	r1, [pc, #348]	; (8004c14 <netif_add+0x178>)
 8004ab8:	4857      	ldr	r0, [pc, #348]	; (8004c18 <netif_add+0x17c>)
 8004aba:	f009 febf 	bl	800e83c <iprintf>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e0a2      	b.n	8004c08 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <netif_add+0x3e>
 8004ac8:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <netif_add+0x174>)
 8004aca:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004ace:	4953      	ldr	r1, [pc, #332]	; (8004c1c <netif_add+0x180>)
 8004ad0:	4851      	ldr	r0, [pc, #324]	; (8004c18 <netif_add+0x17c>)
 8004ad2:	f009 feb3 	bl	800e83c <iprintf>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e096      	b.n	8004c08 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004ae0:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <netif_add+0x184>)
 8004ae2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004aea:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <netif_add+0x184>)
 8004aec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004af4:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <netif_add+0x184>)
 8004af6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a45      	ldr	r2, [pc, #276]	; (8004c24 <netif_add+0x188>)
 8004b0e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a3a      	ldr	r2, [r7, #32]
 8004b28:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004b2a:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <netif_add+0x18c>)
 8004b2c:	781a      	ldrb	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b38:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f913 	bl	8004d6c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	4798      	blx	r3
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <netif_add+0xba>
    return NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e058      	b.n	8004c08 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b5c:	2bff      	cmp	r3, #255	; 0xff
 8004b5e:	d103      	bne.n	8004b68 <netif_add+0xcc>
        netif->num = 0;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b6c:	4b2f      	ldr	r3, [pc, #188]	; (8004c2c <netif_add+0x190>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e02b      	b.n	8004bcc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d106      	bne.n	8004b8a <netif_add+0xee>
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <netif_add+0x174>)
 8004b7e:	f240 128b 	movw	r2, #395	; 0x18b
 8004b82:	492b      	ldr	r1, [pc, #172]	; (8004c30 <netif_add+0x194>)
 8004b84:	4824      	ldr	r0, [pc, #144]	; (8004c18 <netif_add+0x17c>)
 8004b86:	f009 fe59 	bl	800e83c <iprintf>
        num_netifs++;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2bff      	cmp	r3, #255	; 0xff
 8004b94:	dd06      	ble.n	8004ba4 <netif_add+0x108>
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <netif_add+0x174>)
 8004b98:	f240 128d 	movw	r2, #397	; 0x18d
 8004b9c:	4925      	ldr	r1, [pc, #148]	; (8004c34 <netif_add+0x198>)
 8004b9e:	481e      	ldr	r0, [pc, #120]	; (8004c18 <netif_add+0x17c>)
 8004ba0:	f009 fe4c 	bl	800e83c <iprintf>
        if (netif2->num == netif->num) {
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d108      	bne.n	8004bc6 <netif_add+0x12a>
          netif->num++;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004bc4:	e005      	b.n	8004bd2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1d0      	bne.n	8004b74 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1be      	bne.n	8004b56 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bde:	2bfe      	cmp	r3, #254	; 0xfe
 8004be0:	d103      	bne.n	8004bea <netif_add+0x14e>
    netif_num = 0;
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <netif_add+0x18c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e006      	b.n	8004bf8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <netif_add+0x18c>)
 8004bf6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <netif_add+0x190>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <netif_add+0x190>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	0800fe84 	.word	0x0800fe84
 8004c14:	0800ff18 	.word	0x0800ff18
 8004c18:	0800fed4 	.word	0x0800fed4
 8004c1c:	0800ff34 	.word	0x0800ff34
 8004c20:	080133a4 	.word	0x080133a4
 8004c24:	08004f7f 	.word	0x08004f7f
 8004c28:	20000508 	.word	0x20000508
 8004c2c:	20008e7c 	.word	0x20008e7c
 8004c30:	0800ff58 	.word	0x0800ff58
 8004c34:	0800ff6c 	.word	0x0800ff6c

08004c38 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f002 fd85 	bl	8007754 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f007 fabd 	bl	800c1cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <netif_do_set_ipaddr+0x20>
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <netif_do_set_ipaddr+0x88>)
 8004c70:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004c74:	491c      	ldr	r1, [pc, #112]	; (8004ce8 <netif_do_set_ipaddr+0x8c>)
 8004c76:	481d      	ldr	r0, [pc, #116]	; (8004cec <netif_do_set_ipaddr+0x90>)
 8004c78:	f009 fde0 	bl	800e83c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <netif_do_set_ipaddr+0x34>
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <netif_do_set_ipaddr+0x88>)
 8004c84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004c88:	4917      	ldr	r1, [pc, #92]	; (8004ce8 <netif_do_set_ipaddr+0x8c>)
 8004c8a:	4818      	ldr	r0, [pc, #96]	; (8004cec <netif_do_set_ipaddr+0x90>)
 8004c8c:	f009 fdd6 	bl	800e83c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3304      	adds	r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d01c      	beq.n	8004cd8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004cae:	f107 0314 	add.w	r3, r7, #20
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ffbf 	bl	8004c38 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <netif_do_set_ipaddr+0x6a>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	e000      	b.n	8004cc8 <netif_do_set_ipaddr+0x6c>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004ccc:	2101      	movs	r1, #1
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f8d2 	bl	8004e78 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	0800fe84 	.word	0x0800fe84
 8004ce8:	0800ff9c 	.word	0x0800ff9c
 8004cec:	0800fed4 	.word	0x0800fed4

08004cf0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3308      	adds	r3, #8
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d00a      	beq.n	8004d20 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <netif_do_set_netmask+0x26>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	e000      	b.n	8004d18 <netif_do_set_netmask+0x28>
 8004d16:	2300      	movs	r3, #0
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	330c      	adds	r3, #12
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d00a      	beq.n	8004d5e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <netif_do_set_gw+0x26>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	e000      	b.n	8004d56 <netif_do_set_gw+0x28>
 8004d54:	2300      	movs	r3, #0
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004d88:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <netif_set_addr+0x90>)
 8004d8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004d92:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <netif_set_addr+0x90>)
 8004d94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004d9c:	4b17      	ldr	r3, [pc, #92]	; (8004dfc <netif_set_addr+0x90>)
 8004d9e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <netif_set_addr+0x42>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <netif_set_addr+0x46>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <netif_set_addr+0x48>
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004dbc:	f107 0310 	add.w	r3, r7, #16
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff ff49 	bl	8004c5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ff8e 	bl	8004cf0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff ffa8 	bl	8004d2e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	461a      	mov	r2, r3
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff ff35 	bl	8004c5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004df2:	bf00      	nop
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	080133a4 	.word	0x080133a4

08004e00 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <netif_set_default+0x1c>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20008e80 	.word	0x20008e80

08004e20 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <netif_set_up+0x1e>
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <netif_set_up+0x4c>)
 8004e30:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004e34:	490e      	ldr	r1, [pc, #56]	; (8004e70 <netif_set_up+0x50>)
 8004e36:	480f      	ldr	r0, [pc, #60]	; (8004e74 <netif_set_up+0x54>)
 8004e38:	f009 fd00 	bl	800e83c <iprintf>
 8004e3c:	e013      	b.n	8004e66 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10c      	bne.n	8004e66 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004e5e:	2103      	movs	r1, #3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f809 	bl	8004e78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	0800fe84 	.word	0x0800fe84
 8004e70:	0801000c 	.word	0x0801000c
 8004e74:	0800fed4 	.word	0x0800fed4

08004e78 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <netif_issue_reports+0x20>
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <netif_issue_reports+0x74>)
 8004e8c:	f240 326d 	movw	r2, #877	; 0x36d
 8004e90:	4917      	ldr	r1, [pc, #92]	; (8004ef0 <netif_issue_reports+0x78>)
 8004e92:	4818      	ldr	r0, [pc, #96]	; (8004ef4 <netif_issue_reports+0x7c>)
 8004e94:	f009 fcd2 	bl	800e83c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01e      	beq.n	8004ee4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d017      	beq.n	8004ee4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d013      	beq.n	8004ee6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f008 f8df 	bl	800d0a0 <etharp_request>
 8004ee2:	e000      	b.n	8004ee6 <netif_issue_reports+0x6e>
    return;
 8004ee4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	0800fe84 	.word	0x0800fe84
 8004ef0:	08010028 	.word	0x08010028
 8004ef4:	0800fed4 	.word	0x0800fed4

08004ef8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <netif_set_down+0x1e>
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <netif_set_down+0x58>)
 8004f08:	f240 329b 	movw	r2, #923	; 0x39b
 8004f0c:	4911      	ldr	r1, [pc, #68]	; (8004f54 <netif_set_down+0x5c>)
 8004f0e:	4812      	ldr	r0, [pc, #72]	; (8004f58 <netif_set_down+0x60>)
 8004f10:	f009 fc94 	bl	800e83c <iprintf>
 8004f14:	e019      	b.n	8004f4a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f007 fc69 	bl	800c81c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	0800fe84 	.word	0x0800fe84
 8004f54:	0801004c 	.word	0x0801004c
 8004f58:	0800fed4 	.word	0x0800fed4

08004f5c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	61da      	str	r2, [r3, #28]
  }
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004f8a:	f06f 030b 	mvn.w	r3, #11
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <netif_get_by_index+0x48>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e00c      	b.n	8004fce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fba:	3301      	adds	r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	79fa      	ldrb	r2, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d101      	bne.n	8004fc8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e006      	b.n	8004fd6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ef      	bne.n	8004fb4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20008e7c 	.word	0x20008e7c

08004fe8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <pbuf_free_ooseq+0x38>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <pbuf_free_ooseq+0x3c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	e00a      	b.n	8005012 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f002 fbe3 	bl	80077d0 <tcp_free_ooseq>
      return;
 800500a:	e005      	b.n	8005018 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f1      	bne.n	8004ffc <pbuf_free_ooseq+0x14>
    }
  }
}
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20008e84 	.word	0x20008e84
 8005024:	20008e8c 	.word	0x20008e8c

08005028 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <pbuf_pool_is_empty+0x14>)
 800502e:	2201      	movs	r2, #1
 8005030:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20008e84 	.word	0x20008e84

08005040 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	460b      	mov	r3, r1
 8005050:	80fb      	strh	r3, [r7, #6]
 8005052:	4613      	mov	r3, r2
 8005054:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88ba      	ldrh	r2, [r7, #4]
 800506c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800506e:	8b3b      	ldrh	r3, [r7, #24]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	7f3a      	ldrb	r2, [r7, #28]
 800507a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	73da      	strb	r2, [r3, #15]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af02      	add	r7, sp, #8
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
 800509e:	460b      	mov	r3, r1
 80050a0:	80bb      	strh	r3, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80050aa:	887b      	ldrh	r3, [r7, #2]
 80050ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80050b0:	d07f      	beq.n	80051b2 <pbuf_alloc+0x11e>
 80050b2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80050b6:	f300 80c8 	bgt.w	800524a <pbuf_alloc+0x1b6>
 80050ba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80050be:	d010      	beq.n	80050e2 <pbuf_alloc+0x4e>
 80050c0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80050c4:	f300 80c1 	bgt.w	800524a <pbuf_alloc+0x1b6>
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d002      	beq.n	80050d2 <pbuf_alloc+0x3e>
 80050cc:	2b41      	cmp	r3, #65	; 0x41
 80050ce:	f040 80bc 	bne.w	800524a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	88bb      	ldrh	r3, [r7, #4]
 80050d6:	4619      	mov	r1, r3
 80050d8:	2000      	movs	r0, #0
 80050da:	f000 f8d1 	bl	8005280 <pbuf_alloc_reference>
 80050de:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80050e0:	e0bd      	b.n	800525e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80050ea:	88bb      	ldrh	r3, [r7, #4]
 80050ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80050ee:	2008      	movs	r0, #8
 80050f0:	f7ff fc56 	bl	80049a0 <memp_malloc>
 80050f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80050fc:	f7ff ff94 	bl	8005028 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005108:	f000 faa8 	bl	800565c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	e0a7      	b.n	8005260 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005112:	3303      	adds	r3, #3
 8005114:	b29b      	uxth	r3, r3
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	b29b      	uxth	r3, r3
 800511c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005120:	b29b      	uxth	r3, r3
 8005122:	8b7a      	ldrh	r2, [r7, #26]
 8005124:	4293      	cmp	r3, r2
 8005126:	bf28      	it	cs
 8005128:	4613      	movcs	r3, r2
 800512a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800512c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800512e:	3310      	adds	r3, #16
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	3303      	adds	r3, #3
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	4618      	mov	r0, r3
 800513c:	89f9      	ldrh	r1, [r7, #14]
 800513e:	8b7a      	ldrh	r2, [r7, #26]
 8005140:	2300      	movs	r3, #0
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	460b      	mov	r3, r1
 800514a:	4601      	mov	r1, r0
 800514c:	6938      	ldr	r0, [r7, #16]
 800514e:	f7ff ff77 	bl	8005040 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <pbuf_alloc+0xd8>
 800515e:	4b42      	ldr	r3, [pc, #264]	; (8005268 <pbuf_alloc+0x1d4>)
 8005160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005164:	4941      	ldr	r1, [pc, #260]	; (800526c <pbuf_alloc+0x1d8>)
 8005166:	4842      	ldr	r0, [pc, #264]	; (8005270 <pbuf_alloc+0x1dc>)
 8005168:	f009 fb68 	bl	800e83c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800516c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800516e:	3303      	adds	r3, #3
 8005170:	f023 0303 	bic.w	r3, r3, #3
 8005174:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005178:	d106      	bne.n	8005188 <pbuf_alloc+0xf4>
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <pbuf_alloc+0x1d4>)
 800517c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005180:	493c      	ldr	r1, [pc, #240]	; (8005274 <pbuf_alloc+0x1e0>)
 8005182:	483b      	ldr	r0, [pc, #236]	; (8005270 <pbuf_alloc+0x1dc>)
 8005184:	f009 fb5a 	bl	800e83c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	e002      	b.n	800519a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800519e:	8b7a      	ldrh	r2, [r7, #26]
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80051aa:	8b7b      	ldrh	r3, [r7, #26]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d19e      	bne.n	80050ee <pbuf_alloc+0x5a>
      break;
 80051b0:	e055      	b.n	800525e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80051b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051b4:	3303      	adds	r3, #3
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f023 0303 	bic.w	r3, r3, #3
 80051bc:	b29a      	uxth	r2, r3
 80051be:	88bb      	ldrh	r3, [r7, #4]
 80051c0:	3303      	adds	r3, #3
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80051ce:	8b3b      	ldrh	r3, [r7, #24]
 80051d0:	3310      	adds	r3, #16
 80051d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80051d4:	8b3a      	ldrh	r2, [r7, #24]
 80051d6:	88bb      	ldrh	r3, [r7, #4]
 80051d8:	3303      	adds	r3, #3
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	429a      	cmp	r2, r3
 80051e0:	d306      	bcc.n	80051f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80051e2:	8afa      	ldrh	r2, [r7, #22]
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	3303      	adds	r3, #3
 80051e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d201      	bcs.n	80051f4 <pbuf_alloc+0x160>
        return NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e035      	b.n	8005260 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fa64 	bl	80046c4 <mem_malloc>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <pbuf_alloc+0x174>
        return NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	e02b      	b.n	8005260 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800520a:	3310      	adds	r3, #16
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	4413      	add	r3, r2
 8005210:	3303      	adds	r3, #3
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	4618      	mov	r0, r3
 8005218:	88b9      	ldrh	r1, [r7, #4]
 800521a:	88ba      	ldrh	r2, [r7, #4]
 800521c:	2300      	movs	r3, #0
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	460b      	mov	r3, r1
 8005226:	4601      	mov	r1, r0
 8005228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800522a:	f7ff ff09 	bl	8005040 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <pbuf_alloc+0x1c8>
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <pbuf_alloc+0x1d4>)
 800523c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005240:	490d      	ldr	r1, [pc, #52]	; (8005278 <pbuf_alloc+0x1e4>)
 8005242:	480b      	ldr	r0, [pc, #44]	; (8005270 <pbuf_alloc+0x1dc>)
 8005244:	f009 fafa 	bl	800e83c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005248:	e008      	b.n	800525c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <pbuf_alloc+0x1d4>)
 800524c:	f240 1227 	movw	r2, #295	; 0x127
 8005250:	490a      	ldr	r1, [pc, #40]	; (800527c <pbuf_alloc+0x1e8>)
 8005252:	4807      	ldr	r0, [pc, #28]	; (8005270 <pbuf_alloc+0x1dc>)
 8005254:	f009 faf2 	bl	800e83c <iprintf>
      return NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	e001      	b.n	8005260 <pbuf_alloc+0x1cc>
      break;
 800525c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	080100b4 	.word	0x080100b4
 800526c:	080100e4 	.word	0x080100e4
 8005270:	08010114 	.word	0x08010114
 8005274:	0801013c 	.word	0x0801013c
 8005278:	08010170 	.word	0x08010170
 800527c:	0801019c 	.word	0x0801019c

08005280 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
 800528c:	4613      	mov	r3, r2
 800528e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005290:	883b      	ldrh	r3, [r7, #0]
 8005292:	2b41      	cmp	r3, #65	; 0x41
 8005294:	d009      	beq.n	80052aa <pbuf_alloc_reference+0x2a>
 8005296:	883b      	ldrh	r3, [r7, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d006      	beq.n	80052aa <pbuf_alloc_reference+0x2a>
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <pbuf_alloc_reference+0x5c>)
 800529e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80052a2:	490f      	ldr	r1, [pc, #60]	; (80052e0 <pbuf_alloc_reference+0x60>)
 80052a4:	480f      	ldr	r0, [pc, #60]	; (80052e4 <pbuf_alloc_reference+0x64>)
 80052a6:	f009 fac9 	bl	800e83c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80052aa:	2007      	movs	r0, #7
 80052ac:	f7ff fb78 	bl	80049a0 <memp_malloc>
 80052b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e00b      	b.n	80052d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80052bc:	8879      	ldrh	r1, [r7, #2]
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	2300      	movs	r3, #0
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	883b      	ldrh	r3, [r7, #0]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	460b      	mov	r3, r1
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff feb7 	bl	8005040 <pbuf_init_alloced_pbuf>
  return p;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	080100b4 	.word	0x080100b4
 80052e0:	080101b8 	.word	0x080101b8
 80052e4:	08010114 	.word	0x08010114

080052e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	460b      	mov	r3, r1
 80052f6:	81bb      	strh	r3, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005300:	8a7b      	ldrh	r3, [r7, #18]
 8005302:	3303      	adds	r3, #3
 8005304:	f023 0203 	bic.w	r2, r3, #3
 8005308:	89bb      	ldrh	r3, [r7, #12]
 800530a:	441a      	add	r2, r3
 800530c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800530e:	429a      	cmp	r2, r3
 8005310:	d901      	bls.n	8005316 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	e018      	b.n	8005348 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800531c:	8a7b      	ldrh	r3, [r7, #18]
 800531e:	3303      	adds	r3, #3
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	4413      	add	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e001      	b.n	8005330 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	89b9      	ldrh	r1, [r7, #12]
 8005334:	89ba      	ldrh	r2, [r7, #12]
 8005336:	2302      	movs	r3, #2
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	897b      	ldrh	r3, [r7, #10]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	460b      	mov	r3, r1
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	f7ff fe7d 	bl	8005040 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005346:	687b      	ldr	r3, [r7, #4]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <pbuf_realloc+0x20>
 8005362:	4b3a      	ldr	r3, [pc, #232]	; (800544c <pbuf_realloc+0xfc>)
 8005364:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005368:	4939      	ldr	r1, [pc, #228]	; (8005450 <pbuf_realloc+0x100>)
 800536a:	483a      	ldr	r0, [pc, #232]	; (8005454 <pbuf_realloc+0x104>)
 800536c:	f009 fa66 	bl	800e83c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	891b      	ldrh	r3, [r3, #8]
 8005374:	887a      	ldrh	r2, [r7, #2]
 8005376:	429a      	cmp	r2, r3
 8005378:	d263      	bcs.n	8005442 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	891a      	ldrh	r2, [r3, #8]
 800537e:	887b      	ldrh	r3, [r7, #2]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005384:	887b      	ldrh	r3, [r7, #2]
 8005386:	817b      	strh	r3, [r7, #10]
  q = p;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800538c:	e018      	b.n	80053c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	895b      	ldrh	r3, [r3, #10]
 8005392:	897a      	ldrh	r2, [r7, #10]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	891a      	ldrh	r2, [r3, #8]
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <pbuf_realloc+0x70>
 80053b2:	4b26      	ldr	r3, [pc, #152]	; (800544c <pbuf_realloc+0xfc>)
 80053b4:	f240 12af 	movw	r2, #431	; 0x1af
 80053b8:	4927      	ldr	r1, [pc, #156]	; (8005458 <pbuf_realloc+0x108>)
 80053ba:	4826      	ldr	r0, [pc, #152]	; (8005454 <pbuf_realloc+0x104>)
 80053bc:	f009 fa3e 	bl	800e83c <iprintf>
  while (rem_len > q->len) {
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	895b      	ldrh	r3, [r3, #10]
 80053c4:	897a      	ldrh	r2, [r7, #10]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d8e1      	bhi.n	800538e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	7b1b      	ldrb	r3, [r3, #12]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d121      	bne.n	800541a <pbuf_realloc+0xca>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	895b      	ldrh	r3, [r3, #10]
 80053da:	897a      	ldrh	r2, [r7, #10]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d01c      	beq.n	800541a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	7b5b      	ldrb	r3, [r3, #13]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d116      	bne.n	800541a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	4413      	add	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4619      	mov	r1, r3
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff f864 	bl	80044cc <mem_trim>
 8005404:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <pbuf_realloc+0xca>
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <pbuf_realloc+0xfc>)
 800540e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005412:	4912      	ldr	r1, [pc, #72]	; (800545c <pbuf_realloc+0x10c>)
 8005414:	480f      	ldr	r0, [pc, #60]	; (8005454 <pbuf_realloc+0x104>)
 8005416:	f009 fa11 	bl	800e83c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	897a      	ldrh	r2, [r7, #10]
 800541e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	895a      	ldrh	r2, [r3, #10]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f911 	bl	800565c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e000      	b.n	8005444 <pbuf_realloc+0xf4>
    return;
 8005442:	bf00      	nop

}
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	080100b4 	.word	0x080100b4
 8005450:	080101cc 	.word	0x080101cc
 8005454:	08010114 	.word	0x08010114
 8005458:	080101e4 	.word	0x080101e4
 800545c:	080101fc 	.word	0x080101fc

08005460 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <pbuf_add_header_impl+0x22>
 8005474:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <pbuf_add_header_impl+0xc4>)
 8005476:	f240 12df 	movw	r2, #479	; 0x1df
 800547a:	492b      	ldr	r1, [pc, #172]	; (8005528 <pbuf_add_header_impl+0xc8>)
 800547c:	482b      	ldr	r0, [pc, #172]	; (800552c <pbuf_add_header_impl+0xcc>)
 800547e:	f009 f9dd 	bl	800e83c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <pbuf_add_header_impl+0x30>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548e:	d301      	bcc.n	8005494 <pbuf_add_header_impl+0x34>
    return 1;
 8005490:	2301      	movs	r3, #1
 8005492:	e043      	b.n	800551c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <pbuf_add_header_impl+0x3e>
    return 0;
 800549a:	2300      	movs	r3, #0
 800549c:	e03e      	b.n	800551c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	891a      	ldrh	r2, [r3, #8]
 80054a6:	8a7b      	ldrh	r3, [r7, #18]
 80054a8:	4413      	add	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8a7a      	ldrh	r2, [r7, #18]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d901      	bls.n	80054b6 <pbuf_add_header_impl+0x56>
    return 1;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e032      	b.n	800551c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	7b1b      	ldrb	r3, [r3, #12]
 80054ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80054bc:	8a3b      	ldrh	r3, [r7, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	425b      	negs	r3, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3310      	adds	r3, #16
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d20d      	bcs.n	80054f8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	e01d      	b.n	800551c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d006      	beq.n	80054f4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	425b      	negs	r3, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e001      	b.n	80054f8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e011      	b.n	800551c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	895a      	ldrh	r2, [r3, #10]
 8005502:	8a7b      	ldrh	r3, [r7, #18]
 8005504:	4413      	add	r3, r2
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	891a      	ldrh	r2, [r3, #8]
 8005510:	8a7b      	ldrh	r3, [r7, #18]
 8005512:	4413      	add	r3, r2
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	811a      	strh	r2, [r3, #8]


  return 0;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	080100b4 	.word	0x080100b4
 8005528:	08010218 	.word	0x08010218
 800552c:	08010114 	.word	0x08010114

08005530 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800553a:	2200      	movs	r2, #0
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ff8e 	bl	8005460 <pbuf_add_header_impl>
 8005544:	4603      	mov	r3, r0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <pbuf_remove_header+0x1e>
 8005560:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <pbuf_remove_header+0x94>)
 8005562:	f240 224b 	movw	r2, #587	; 0x24b
 8005566:	4920      	ldr	r1, [pc, #128]	; (80055e8 <pbuf_remove_header+0x98>)
 8005568:	4820      	ldr	r0, [pc, #128]	; (80055ec <pbuf_remove_header+0x9c>)
 800556a:	f009 f967 	bl	800e83c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <pbuf_remove_header+0x2c>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557a:	d301      	bcc.n	8005580 <pbuf_remove_header+0x30>
    return 1;
 800557c:	2301      	movs	r3, #1
 800557e:	e02c      	b.n	80055da <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <pbuf_remove_header+0x3a>
    return 0;
 8005586:	2300      	movs	r3, #0
 8005588:	e027      	b.n	80055da <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	895b      	ldrh	r3, [r3, #10]
 8005592:	89fa      	ldrh	r2, [r7, #14]
 8005594:	429a      	cmp	r2, r3
 8005596:	d908      	bls.n	80055aa <pbuf_remove_header+0x5a>
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <pbuf_remove_header+0x94>)
 800559a:	f240 2255 	movw	r2, #597	; 0x255
 800559e:	4914      	ldr	r1, [pc, #80]	; (80055f0 <pbuf_remove_header+0xa0>)
 80055a0:	4812      	ldr	r0, [pc, #72]	; (80055ec <pbuf_remove_header+0x9c>)
 80055a2:	f009 f94b 	bl	800e83c <iprintf>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e017      	b.n	80055da <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	441a      	add	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	895a      	ldrh	r2, [r3, #10]
 80055c0:	89fb      	ldrh	r3, [r7, #14]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	891a      	ldrh	r2, [r3, #8]
 80055ce:	89fb      	ldrh	r3, [r7, #14]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	080100b4 	.word	0x080100b4
 80055e8:	08010218 	.word	0x08010218
 80055ec:	08010114 	.word	0x08010114
 80055f0:	08010224 	.word	0x08010224

080055f4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
 8005600:	4613      	mov	r3, r2
 8005602:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005608:	2b00      	cmp	r3, #0
 800560a:	da08      	bge.n	800561e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800560c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005610:	425b      	negs	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff9b 	bl	8005550 <pbuf_remove_header>
 800561a:	4603      	mov	r3, r0
 800561c:	e007      	b.n	800562e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800561e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005622:	787a      	ldrb	r2, [r7, #1]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff1a 	bl	8005460 <pbuf_add_header_impl>
 800562c:	4603      	mov	r3, r0
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005646:	2201      	movs	r2, #1
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff ffd2 	bl	80055f4 <pbuf_header_impl>
 8005650:	4603      	mov	r3, r0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <pbuf_free+0x22>
 8005670:	4b38      	ldr	r3, [pc, #224]	; (8005754 <pbuf_free+0xf8>)
 8005672:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005676:	4938      	ldr	r1, [pc, #224]	; (8005758 <pbuf_free+0xfc>)
 8005678:	4838      	ldr	r0, [pc, #224]	; (800575c <pbuf_free+0x100>)
 800567a:	f009 f8df 	bl	800e83c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800567e:	2300      	movs	r3, #0
 8005680:	e063      	b.n	800574a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005686:	e05c      	b.n	8005742 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7b9b      	ldrb	r3, [r3, #14]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <pbuf_free+0x42>
 8005690:	4b30      	ldr	r3, [pc, #192]	; (8005754 <pbuf_free+0xf8>)
 8005692:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005696:	4932      	ldr	r1, [pc, #200]	; (8005760 <pbuf_free+0x104>)
 8005698:	4830      	ldr	r0, [pc, #192]	; (800575c <pbuf_free+0x100>)
 800569a:	f009 f8cf 	bl	800e83c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	7b9b      	ldrb	r3, [r3, #14]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	739a      	strb	r2, [r3, #14]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7b9b      	ldrb	r3, [r3, #14]
 80056ae:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80056b0:	7dbb      	ldrb	r3, [r7, #22]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d143      	bne.n	800573e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7b1b      	ldrb	r3, [r3, #12]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	7b5b      	ldrb	r3, [r3, #13]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d011      	beq.n	80056f6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <pbuf_free+0x90>
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <pbuf_free+0xf8>)
 80056e0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80056e4:	491f      	ldr	r1, [pc, #124]	; (8005764 <pbuf_free+0x108>)
 80056e6:	481d      	ldr	r0, [pc, #116]	; (800575c <pbuf_free+0x100>)
 80056e8:	f009 f8a8 	bl	800e83c <iprintf>
        pc->custom_free_function(p);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
 80056f4:	e01d      	b.n	8005732 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d104      	bne.n	8005706 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	2008      	movs	r0, #8
 8005700:	f7ff f99a 	bl	8004a38 <memp_free>
 8005704:	e015      	b.n	8005732 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d104      	bne.n	8005716 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	2007      	movs	r0, #7
 8005710:	f7ff f992 	bl	8004a38 <memp_free>
 8005714:	e00d      	b.n	8005732 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <pbuf_free+0xc8>
          mem_free(p);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fe fe6b 	bl	80043f8 <mem_free>
 8005722:	e006      	b.n	8005732 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <pbuf_free+0xf8>)
 8005726:	f240 320f 	movw	r2, #783	; 0x30f
 800572a:	490f      	ldr	r1, [pc, #60]	; (8005768 <pbuf_free+0x10c>)
 800572c:	480b      	ldr	r0, [pc, #44]	; (800575c <pbuf_free+0x100>)
 800572e:	f009 f885 	bl	800e83c <iprintf>
        }
      }
      count++;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	3301      	adds	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	607b      	str	r3, [r7, #4]
 800573c:	e001      	b.n	8005742 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d19f      	bne.n	8005688 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	080100b4 	.word	0x080100b4
 8005758:	08010218 	.word	0x08010218
 800575c:	08010114 	.word	0x08010114
 8005760:	08010244 	.word	0x08010244
 8005764:	0801025c 	.word	0x0801025c
 8005768:	08010280 	.word	0x08010280

0800576c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005778:	e005      	b.n	8005786 <pbuf_clen+0x1a>
    ++len;
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	3301      	adds	r3, #1
 800577e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f6      	bne.n	800577a <pbuf_clen+0xe>
  }
  return len;
 800578c:	89fb      	ldrh	r3, [r7, #14]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7b9b      	ldrb	r3, [r3, #14]
 80057ae:	3301      	adds	r3, #1
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7b9b      	ldrb	r3, [r3, #14]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <pbuf_ref+0x30>
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <pbuf_ref+0x38>)
 80057c0:	f240 3242 	movw	r2, #834	; 0x342
 80057c4:	4904      	ldr	r1, [pc, #16]	; (80057d8 <pbuf_ref+0x3c>)
 80057c6:	4805      	ldr	r0, [pc, #20]	; (80057dc <pbuf_ref+0x40>)
 80057c8:	f009 f838 	bl	800e83c <iprintf>
  }
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	080100b4 	.word	0x080100b4
 80057d8:	08010294 	.word	0x08010294
 80057dc:	08010114 	.word	0x08010114

080057e0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <pbuf_cat+0x16>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <pbuf_cat+0x26>
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <pbuf_cat+0x98>)
 80057f8:	f240 3259 	movw	r2, #857	; 0x359
 80057fc:	491f      	ldr	r1, [pc, #124]	; (800587c <pbuf_cat+0x9c>)
 80057fe:	4820      	ldr	r0, [pc, #128]	; (8005880 <pbuf_cat+0xa0>)
 8005800:	f009 f81c 	bl	800e83c <iprintf>
 8005804:	e034      	b.n	8005870 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e00a      	b.n	8005822 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	891a      	ldrh	r2, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	891b      	ldrh	r3, [r3, #8]
 8005814:	4413      	add	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	891a      	ldrh	r2, [r3, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	429a      	cmp	r2, r3
 8005834:	d006      	beq.n	8005844 <pbuf_cat+0x64>
 8005836:	4b10      	ldr	r3, [pc, #64]	; (8005878 <pbuf_cat+0x98>)
 8005838:	f240 3262 	movw	r2, #866	; 0x362
 800583c:	4911      	ldr	r1, [pc, #68]	; (8005884 <pbuf_cat+0xa4>)
 800583e:	4810      	ldr	r0, [pc, #64]	; (8005880 <pbuf_cat+0xa0>)
 8005840:	f008 fffc 	bl	800e83c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <pbuf_cat+0x7a>
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <pbuf_cat+0x98>)
 800584e:	f240 3263 	movw	r2, #867	; 0x363
 8005852:	490d      	ldr	r1, [pc, #52]	; (8005888 <pbuf_cat+0xa8>)
 8005854:	480a      	ldr	r0, [pc, #40]	; (8005880 <pbuf_cat+0xa0>)
 8005856:	f008 fff1 	bl	800e83c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	891a      	ldrh	r2, [r3, #8]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	891b      	ldrh	r3, [r3, #8]
 8005862:	4413      	add	r3, r2
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	080100b4 	.word	0x080100b4
 800587c:	080102a8 	.word	0x080102a8
 8005880:	08010114 	.word	0x08010114
 8005884:	080102e0 	.word	0x080102e0
 8005888:	08010310 	.word	0x08010310

0800588c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <pbuf_copy+0x2a>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <pbuf_copy+0x2a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	891a      	ldrh	r2, [r3, #8]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	891b      	ldrh	r3, [r3, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d209      	bcs.n	80058ca <pbuf_copy+0x3e>
 80058b6:	4b57      	ldr	r3, [pc, #348]	; (8005a14 <pbuf_copy+0x188>)
 80058b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80058bc:	4956      	ldr	r1, [pc, #344]	; (8005a18 <pbuf_copy+0x18c>)
 80058be:	4857      	ldr	r0, [pc, #348]	; (8005a1c <pbuf_copy+0x190>)
 80058c0:	f008 ffbc 	bl	800e83c <iprintf>
 80058c4:	f06f 030f 	mvn.w	r3, #15
 80058c8:	e09f      	b.n	8005a0a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	895b      	ldrh	r3, [r3, #10]
 80058ce:	461a      	mov	r2, r3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	895b      	ldrh	r3, [r3, #10]
 80058d8:	4619      	mov	r1, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1acb      	subs	r3, r1, r3
 80058de:	429a      	cmp	r2, r3
 80058e0:	d306      	bcc.n	80058f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	895b      	ldrh	r3, [r3, #10]
 80058e6:	461a      	mov	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e005      	b.n	80058fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	461a      	mov	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	18d0      	adds	r0, r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4413      	add	r3, r2
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4619      	mov	r1, r3
 8005910:	f008 ff7e 	bl	800e810 <memcpy>
    offset_to += len;
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	895b      	ldrh	r3, [r3, #10]
 8005928:	461a      	mov	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4293      	cmp	r3, r2
 800592e:	d906      	bls.n	800593e <pbuf_copy+0xb2>
 8005930:	4b38      	ldr	r3, [pc, #224]	; (8005a14 <pbuf_copy+0x188>)
 8005932:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005936:	493a      	ldr	r1, [pc, #232]	; (8005a20 <pbuf_copy+0x194>)
 8005938:	4838      	ldr	r0, [pc, #224]	; (8005a1c <pbuf_copy+0x190>)
 800593a:	f008 ff7f 	bl	800e83c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	895b      	ldrh	r3, [r3, #10]
 8005942:	461a      	mov	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4293      	cmp	r3, r2
 8005948:	d906      	bls.n	8005958 <pbuf_copy+0xcc>
 800594a:	4b32      	ldr	r3, [pc, #200]	; (8005a14 <pbuf_copy+0x188>)
 800594c:	f240 32da 	movw	r2, #986	; 0x3da
 8005950:	4934      	ldr	r1, [pc, #208]	; (8005a24 <pbuf_copy+0x198>)
 8005952:	4832      	ldr	r0, [pc, #200]	; (8005a1c <pbuf_copy+0x190>)
 8005954:	f008 ff72 	bl	800e83c <iprintf>
    if (offset_from >= p_from->len) {
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	895b      	ldrh	r3, [r3, #10]
 800595c:	461a      	mov	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4293      	cmp	r3, r2
 8005962:	d304      	bcc.n	800596e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	895b      	ldrh	r3, [r3, #10]
 8005972:	461a      	mov	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4293      	cmp	r3, r2
 8005978:	d114      	bne.n	80059a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <pbuf_copy+0x118>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <pbuf_copy+0x118>
 8005990:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <pbuf_copy+0x188>)
 8005992:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005996:	4924      	ldr	r1, [pc, #144]	; (8005a28 <pbuf_copy+0x19c>)
 8005998:	4820      	ldr	r0, [pc, #128]	; (8005a1c <pbuf_copy+0x190>)
 800599a:	f008 ff4f 	bl	800e83c <iprintf>
 800599e:	f06f 030f 	mvn.w	r3, #15
 80059a2:	e032      	b.n	8005a0a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d013      	beq.n	80059d2 <pbuf_copy+0x146>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	895a      	ldrh	r2, [r3, #10]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	891b      	ldrh	r3, [r3, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d10d      	bne.n	80059d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <pbuf_copy+0x146>
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <pbuf_copy+0x188>)
 80059c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80059c4:	4919      	ldr	r1, [pc, #100]	; (8005a2c <pbuf_copy+0x1a0>)
 80059c6:	4815      	ldr	r0, [pc, #84]	; (8005a1c <pbuf_copy+0x190>)
 80059c8:	f008 ff38 	bl	800e83c <iprintf>
 80059cc:	f06f 0305 	mvn.w	r3, #5
 80059d0:	e01b      	b.n	8005a0a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <pbuf_copy+0x174>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	895a      	ldrh	r2, [r3, #10]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	891b      	ldrh	r3, [r3, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d10d      	bne.n	8005a00 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <pbuf_copy+0x174>
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <pbuf_copy+0x188>)
 80059ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80059f2:	490e      	ldr	r1, [pc, #56]	; (8005a2c <pbuf_copy+0x1a0>)
 80059f4:	4809      	ldr	r0, [pc, #36]	; (8005a1c <pbuf_copy+0x190>)
 80059f6:	f008 ff21 	bl	800e83c <iprintf>
 80059fa:	f06f 0305 	mvn.w	r3, #5
 80059fe:	e004      	b.n	8005a0a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f47f af61 	bne.w	80058ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	080100b4 	.word	0x080100b4
 8005a18:	0801035c 	.word	0x0801035c
 8005a1c:	08010114 	.word	0x08010114
 8005a20:	0801038c 	.word	0x0801038c
 8005a24:	080103a4 	.word	0x080103a4
 8005a28:	080103c0 	.word	0x080103c0
 8005a2c:	080103d0 	.word	0x080103d0

08005a30 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	80fb      	strh	r3, [r7, #6]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <pbuf_copy_partial+0x36>
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <pbuf_copy_partial+0xd4>)
 8005a56:	f240 420a 	movw	r2, #1034	; 0x40a
 8005a5a:	492b      	ldr	r1, [pc, #172]	; (8005b08 <pbuf_copy_partial+0xd8>)
 8005a5c:	482b      	ldr	r0, [pc, #172]	; (8005b0c <pbuf_copy_partial+0xdc>)
 8005a5e:	f008 feed 	bl	800e83c <iprintf>
 8005a62:	2300      	movs	r3, #0
 8005a64:	e04a      	b.n	8005afc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d108      	bne.n	8005a7e <pbuf_copy_partial+0x4e>
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <pbuf_copy_partial+0xd4>)
 8005a6e:	f240 420b 	movw	r2, #1035	; 0x40b
 8005a72:	4927      	ldr	r1, [pc, #156]	; (8005b10 <pbuf_copy_partial+0xe0>)
 8005a74:	4825      	ldr	r0, [pc, #148]	; (8005b0c <pbuf_copy_partial+0xdc>)
 8005a76:	f008 fee1 	bl	800e83c <iprintf>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e03e      	b.n	8005afc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e034      	b.n	8005aee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005a84:	88bb      	ldrh	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <pbuf_copy_partial+0x70>
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	895b      	ldrh	r3, [r3, #10]
 8005a8e:	88ba      	ldrh	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d305      	bcc.n	8005aa0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	895b      	ldrh	r3, [r3, #10]
 8005a98:	88ba      	ldrh	r2, [r7, #4]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	80bb      	strh	r3, [r7, #4]
 8005a9e:	e023      	b.n	8005ae8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	895a      	ldrh	r2, [r3, #10]
 8005aa4:	88bb      	ldrh	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005aaa:	8b3a      	ldrh	r2, [r7, #24]
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d901      	bls.n	8005ab6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005ab6:	8b7b      	ldrh	r3, [r7, #26]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	18d0      	adds	r0, r2, r3
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	88bb      	ldrh	r3, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	8b3a      	ldrh	r2, [r7, #24]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f008 fea2 	bl	800e810 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005acc:	8afa      	ldrh	r2, [r7, #22]
 8005ace:	8b3b      	ldrh	r3, [r7, #24]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005ad4:	8b7a      	ldrh	r2, [r7, #26]
 8005ad6:	8b3b      	ldrh	r3, [r7, #24]
 8005ad8:	4413      	add	r3, r2
 8005ada:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	8b3b      	ldrh	r3, [r7, #24]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <pbuf_copy_partial+0xca>
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1c4      	bne.n	8005a84 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005afa:	8afb      	ldrh	r3, [r7, #22]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	080100b4 	.word	0x080100b4
 8005b08:	080103fc 	.word	0x080103fc
 8005b0c:	08010114 	.word	0x08010114
 8005b10:	0801041c 	.word	0x0801041c

08005b14 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	603a      	str	r2, [r7, #0]
 8005b1e:	71fb      	strb	r3, [r7, #7]
 8005b20:	460b      	mov	r3, r1
 8005b22:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	8919      	ldrh	r1, [r3, #8]
 8005b28:	88ba      	ldrh	r2, [r7, #4]
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fab1 	bl	8005094 <pbuf_alloc>
 8005b32:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <pbuf_clone+0x2a>
    return NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e011      	b.n	8005b62 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff fea3 	bl	800588c <pbuf_copy>
 8005b46:	4603      	mov	r3, r0
 8005b48:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005b4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d006      	beq.n	8005b60 <pbuf_clone+0x4c>
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <pbuf_clone+0x58>)
 8005b54:	f240 5224 	movw	r2, #1316	; 0x524
 8005b58:	4905      	ldr	r1, [pc, #20]	; (8005b70 <pbuf_clone+0x5c>)
 8005b5a:	4806      	ldr	r0, [pc, #24]	; (8005b74 <pbuf_clone+0x60>)
 8005b5c:	f008 fe6e 	bl	800e83c <iprintf>
  return q;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	080100b4 	.word	0x080100b4
 8005b70:	08010528 	.word	0x08010528
 8005b74:	08010114 	.word	0x08010114

08005b78 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005b7c:	f008 fe76 	bl	800e86c <rand>
 8005b80:	4603      	mov	r3, r0
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	4b01      	ldr	r3, [pc, #4]	; (8005b98 <tcp_init+0x20>)
 8005b92:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005b94:	bf00      	nop
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000000a 	.word	0x2000000a

08005b9c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7d1b      	ldrb	r3, [r3, #20]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d105      	bne.n	8005bb8 <tcp_free+0x1c>
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <tcp_free+0x2c>)
 8005bae:	22d4      	movs	r2, #212	; 0xd4
 8005bb0:	4906      	ldr	r1, [pc, #24]	; (8005bcc <tcp_free+0x30>)
 8005bb2:	4807      	ldr	r0, [pc, #28]	; (8005bd0 <tcp_free+0x34>)
 8005bb4:	f008 fe42 	bl	800e83c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	2001      	movs	r0, #1
 8005bbc:	f7fe ff3c 	bl	8004a38 <memp_free>
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	080105b4 	.word	0x080105b4
 8005bcc:	080105e4 	.word	0x080105e4
 8005bd0:	080105f8 	.word	0x080105f8

08005bd4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	7d1b      	ldrb	r3, [r3, #20]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <tcp_free_listen+0x1c>
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <tcp_free_listen+0x2c>)
 8005be6:	22df      	movs	r2, #223	; 0xdf
 8005be8:	4906      	ldr	r1, [pc, #24]	; (8005c04 <tcp_free_listen+0x30>)
 8005bea:	4807      	ldr	r0, [pc, #28]	; (8005c08 <tcp_free_listen+0x34>)
 8005bec:	f008 fe26 	bl	800e83c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	2002      	movs	r0, #2
 8005bf4:	f7fe ff20 	bl	8004a38 <memp_free>
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	080105b4 	.word	0x080105b4
 8005c04:	08010620 	.word	0x08010620
 8005c08:	080105f8 	.word	0x080105f8

08005c0c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005c10:	f001 f85c 	bl	8006ccc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <tcp_tmr+0x28>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <tcp_tmr+0x28>)
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <tcp_tmr+0x28>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005c2c:	f000 fd0e 	bl	800664c <tcp_slowtmr>
  }
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000509 	.word	0x20000509

08005c38 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <tcp_remove_listener+0x1c>
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <tcp_remove_listener+0x48>)
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	490d      	ldr	r1, [pc, #52]	; (8005c84 <tcp_remove_listener+0x4c>)
 8005c4e:	480e      	ldr	r0, [pc, #56]	; (8005c88 <tcp_remove_listener+0x50>)
 8005c50:	f008 fdf4 	bl	800e83c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e00a      	b.n	8005c70 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d102      	bne.n	8005c6a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f1      	bne.n	8005c5a <tcp_remove_listener+0x22>
    }
  }
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	080105b4 	.word	0x080105b4
 8005c84:	0801063c 	.word	0x0801063c
 8005c88:	080105f8 	.word	0x080105f8

08005c8c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <tcp_listen_closed+0x1c>
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <tcp_listen_closed+0x60>)
 8005c9c:	f240 1211 	movw	r2, #273	; 0x111
 8005ca0:	4913      	ldr	r1, [pc, #76]	; (8005cf0 <tcp_listen_closed+0x64>)
 8005ca2:	4814      	ldr	r0, [pc, #80]	; (8005cf4 <tcp_listen_closed+0x68>)
 8005ca4:	f008 fdca 	bl	800e83c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	7d1b      	ldrb	r3, [r3, #20]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d006      	beq.n	8005cbe <tcp_listen_closed+0x32>
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <tcp_listen_closed+0x60>)
 8005cb2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005cb6:	4910      	ldr	r1, [pc, #64]	; (8005cf8 <tcp_listen_closed+0x6c>)
 8005cb8:	480e      	ldr	r0, [pc, #56]	; (8005cf4 <tcp_listen_closed+0x68>)
 8005cba:	f008 fdbf 	bl	800e83c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e00b      	b.n	8005cdc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005cc4:	4a0d      	ldr	r2, [pc, #52]	; (8005cfc <tcp_listen_closed+0x70>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ffb1 	bl	8005c38 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d9f0      	bls.n	8005cc4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	080105b4 	.word	0x080105b4
 8005cf0:	08010664 	.word	0x08010664
 8005cf4:	080105f8 	.word	0x080105f8
 8005cf8:	08010670 	.word	0x08010670
 8005cfc:	0801337c 	.word	0x0801337c

08005d00 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af04      	add	r7, sp, #16
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <tcp_close_shutdown+0x20>
 8005d12:	4b63      	ldr	r3, [pc, #396]	; (8005ea0 <tcp_close_shutdown+0x1a0>)
 8005d14:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005d18:	4962      	ldr	r1, [pc, #392]	; (8005ea4 <tcp_close_shutdown+0x1a4>)
 8005d1a:	4863      	ldr	r0, [pc, #396]	; (8005ea8 <tcp_close_shutdown+0x1a8>)
 8005d1c:	f008 fd8e 	bl	800e83c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d066      	beq.n	8005df4 <tcp_close_shutdown+0xf4>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7d1b      	ldrb	r3, [r3, #20]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d003      	beq.n	8005d36 <tcp_close_shutdown+0x36>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7d1b      	ldrb	r3, [r3, #20]
 8005d32:	2b07      	cmp	r3, #7
 8005d34:	d15e      	bne.n	8005df4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <tcp_close_shutdown+0x48>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005d46:	d055      	beq.n	8005df4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8b5b      	ldrh	r3, [r3, #26]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <tcp_close_shutdown+0x62>
 8005d54:	4b52      	ldr	r3, [pc, #328]	; (8005ea0 <tcp_close_shutdown+0x1a0>)
 8005d56:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005d5a:	4954      	ldr	r1, [pc, #336]	; (8005eac <tcp_close_shutdown+0x1ac>)
 8005d5c:	4852      	ldr	r0, [pc, #328]	; (8005ea8 <tcp_close_shutdown+0x1a8>)
 8005d5e:	f008 fd6d 	bl	800e83c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005d6a:	687d      	ldr	r5, [r7, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	8ad2      	ldrh	r2, [r2, #22]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	8b09      	ldrh	r1, [r1, #24]
 8005d78:	9102      	str	r1, [sp, #8]
 8005d7a:	9201      	str	r2, [sp, #4]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	462b      	mov	r3, r5
 8005d80:	4622      	mov	r2, r4
 8005d82:	4601      	mov	r1, r0
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f005 fd8b 	bl	800b8a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fb6c 	bl	8007468 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005d90:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <tcp_close_shutdown+0x1b0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d105      	bne.n	8005da6 <tcp_close_shutdown+0xa6>
 8005d9a:	4b45      	ldr	r3, [pc, #276]	; (8005eb0 <tcp_close_shutdown+0x1b0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a43      	ldr	r2, [pc, #268]	; (8005eb0 <tcp_close_shutdown+0x1b0>)
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e013      	b.n	8005dce <tcp_close_shutdown+0xce>
 8005da6:	4b42      	ldr	r3, [pc, #264]	; (8005eb0 <tcp_close_shutdown+0x1b0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e00c      	b.n	8005dc8 <tcp_close_shutdown+0xc8>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d104      	bne.n	8005dc2 <tcp_close_shutdown+0xc2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e005      	b.n	8005dce <tcp_close_shutdown+0xce>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1ef      	bne.n	8005dae <tcp_close_shutdown+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	60da      	str	r2, [r3, #12]
 8005dd4:	4b37      	ldr	r3, [pc, #220]	; (8005eb4 <tcp_close_shutdown+0x1b4>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005dda:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <tcp_close_shutdown+0x1b8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d102      	bne.n	8005dea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005de4:	f004 f800 	bl	8009de8 <tcp_trigger_input_pcb_close>
 8005de8:	e002      	b.n	8005df0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fed6 	bl	8005b9c <tcp_free>
      }
      return ERR_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e050      	b.n	8005e96 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7d1b      	ldrb	r3, [r3, #20]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d03b      	beq.n	8005e74 <tcp_close_shutdown+0x174>
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	dc44      	bgt.n	8005e8a <tcp_close_shutdown+0x18a>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <tcp_close_shutdown+0x10a>
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d02a      	beq.n	8005e5e <tcp_close_shutdown+0x15e>
 8005e08:	e03f      	b.n	8005e8a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8adb      	ldrh	r3, [r3, #22]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d021      	beq.n	8005e56 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e12:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <tcp_close_shutdown+0x1bc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d105      	bne.n	8005e28 <tcp_close_shutdown+0x128>
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <tcp_close_shutdown+0x1bc>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <tcp_close_shutdown+0x1bc>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e013      	b.n	8005e50 <tcp_close_shutdown+0x150>
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <tcp_close_shutdown+0x1bc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	e00c      	b.n	8005e4a <tcp_close_shutdown+0x14a>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d104      	bne.n	8005e44 <tcp_close_shutdown+0x144>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	e005      	b.n	8005e50 <tcp_close_shutdown+0x150>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ef      	bne.n	8005e30 <tcp_close_shutdown+0x130>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fea0 	bl	8005b9c <tcp_free>
      break;
 8005e5c:	e01a      	b.n	8005e94 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff ff14 	bl	8005c8c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4816      	ldr	r0, [pc, #88]	; (8005ec0 <tcp_close_shutdown+0x1c0>)
 8005e68:	f001 fb4e 	bl	8007508 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff feb1 	bl	8005bd4 <tcp_free_listen>
      break;
 8005e72:	e00f      	b.n	8005e94 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	480e      	ldr	r0, [pc, #56]	; (8005eb0 <tcp_close_shutdown+0x1b0>)
 8005e78:	f001 fb46 	bl	8007508 <tcp_pcb_remove>
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <tcp_close_shutdown+0x1b4>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fe8a 	bl	8005b9c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005e88:	e004      	b.n	8005e94 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f81a 	bl	8005ec4 <tcp_close_shutdown_fin>
 8005e90:	4603      	mov	r3, r0
 8005e92:	e000      	b.n	8005e96 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	080105b4 	.word	0x080105b4
 8005ea4:	08010688 	.word	0x08010688
 8005ea8:	080105f8 	.word	0x080105f8
 8005eac:	080106a8 	.word	0x080106a8
 8005eb0:	20008e8c 	.word	0x20008e8c
 8005eb4:	20008e88 	.word	0x20008e88
 8005eb8:	20008ea0 	.word	0x20008ea0
 8005ebc:	20008e98 	.word	0x20008e98
 8005ec0:	20008e94 	.word	0x20008e94

08005ec4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <tcp_close_shutdown_fin+0x1c>
 8005ed2:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <tcp_close_shutdown_fin+0xc8>)
 8005ed4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005ed8:	492d      	ldr	r1, [pc, #180]	; (8005f90 <tcp_close_shutdown_fin+0xcc>)
 8005eda:	482e      	ldr	r0, [pc, #184]	; (8005f94 <tcp_close_shutdown_fin+0xd0>)
 8005edc:	f008 fcae 	bl	800e83c <iprintf>

  switch (pcb->state) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7d1b      	ldrb	r3, [r3, #20]
 8005ee4:	2b07      	cmp	r3, #7
 8005ee6:	d020      	beq.n	8005f2a <tcp_close_shutdown_fin+0x66>
 8005ee8:	2b07      	cmp	r3, #7
 8005eea:	dc2b      	bgt.n	8005f44 <tcp_close_shutdown_fin+0x80>
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d002      	beq.n	8005ef6 <tcp_close_shutdown_fin+0x32>
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d00d      	beq.n	8005f10 <tcp_close_shutdown_fin+0x4c>
 8005ef4:	e026      	b.n	8005f44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f004 fde0 	bl	800aabc <tcp_send_fin>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11f      	bne.n	8005f48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f0e:	e01b      	b.n	8005f48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f004 fdd3 	bl	800aabc <tcp_send_fin>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d114      	bne.n	8005f4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2205      	movs	r2, #5
 8005f26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f28:	e010      	b.n	8005f4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f004 fdc6 	bl	800aabc <tcp_send_fin>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d109      	bne.n	8005f50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2209      	movs	r2, #9
 8005f40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f42:	e005      	b.n	8005f50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e01c      	b.n	8005f82 <tcp_close_shutdown_fin+0xbe>
      break;
 8005f48:	bf00      	nop
 8005f4a:	e002      	b.n	8005f52 <tcp_close_shutdown_fin+0x8e>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <tcp_close_shutdown_fin+0x8e>
      break;
 8005f50:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f004 feec 	bl	800ad38 <tcp_output>
 8005f60:	e00d      	b.n	8005f7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6a:	d108      	bne.n	8005f7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8b5b      	ldrh	r3, [r3, #26]
 8005f70:	f043 0308 	orr.w	r3, r3, #8
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e001      	b.n	8005f82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	080105b4 	.word	0x080105b4
 8005f90:	08010664 	.word	0x08010664
 8005f94:	080105f8 	.word	0x080105f8

08005f98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <tcp_close+0x22>
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <tcp_close+0x4c>)
 8005fa8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005fac:	490e      	ldr	r1, [pc, #56]	; (8005fe8 <tcp_close+0x50>)
 8005fae:	480f      	ldr	r0, [pc, #60]	; (8005fec <tcp_close+0x54>)
 8005fb0:	f008 fc44 	bl	800e83c <iprintf>
 8005fb4:	f06f 030f 	mvn.w	r3, #15
 8005fb8:	e00f      	b.n	8005fda <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7d1b      	ldrb	r3, [r3, #20]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d006      	beq.n	8005fd0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8b5b      	ldrh	r3, [r3, #26]
 8005fc6:	f043 0310 	orr.w	r3, r3, #16
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fe94 	bl	8005d00 <tcp_close_shutdown>
 8005fd8:	4603      	mov	r3, r0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	080105b4 	.word	0x080105b4
 8005fe8:	080106c4 	.word	0x080106c4
 8005fec:	080105f8 	.word	0x080105f8

08005ff0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08e      	sub	sp, #56	; 0x38
 8005ff4:	af04      	add	r7, sp, #16
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <tcp_abandon+0x20>
 8006000:	4b52      	ldr	r3, [pc, #328]	; (800614c <tcp_abandon+0x15c>)
 8006002:	f240 223d 	movw	r2, #573	; 0x23d
 8006006:	4952      	ldr	r1, [pc, #328]	; (8006150 <tcp_abandon+0x160>)
 8006008:	4852      	ldr	r0, [pc, #328]	; (8006154 <tcp_abandon+0x164>)
 800600a:	f008 fc17 	bl	800e83c <iprintf>
 800600e:	e099      	b.n	8006144 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7d1b      	ldrb	r3, [r3, #20]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d106      	bne.n	8006026 <tcp_abandon+0x36>
 8006018:	4b4c      	ldr	r3, [pc, #304]	; (800614c <tcp_abandon+0x15c>)
 800601a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800601e:	494e      	ldr	r1, [pc, #312]	; (8006158 <tcp_abandon+0x168>)
 8006020:	484c      	ldr	r0, [pc, #304]	; (8006154 <tcp_abandon+0x164>)
 8006022:	f008 fc0b 	bl	800e83c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7d1b      	ldrb	r3, [r3, #20]
 800602a:	2b0a      	cmp	r3, #10
 800602c:	d107      	bne.n	800603e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	484a      	ldr	r0, [pc, #296]	; (800615c <tcp_abandon+0x16c>)
 8006032:	f001 fa69 	bl	8007508 <tcp_pcb_remove>
    tcp_free(pcb);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fdb0 	bl	8005b9c <tcp_free>
 800603c:	e082      	b.n	8006144 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7d1b      	ldrb	r3, [r3, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d126      	bne.n	80060b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8adb      	ldrh	r3, [r3, #22]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02e      	beq.n	80060ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006070:	4b3b      	ldr	r3, [pc, #236]	; (8006160 <tcp_abandon+0x170>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d105      	bne.n	8006086 <tcp_abandon+0x96>
 800607a:	4b39      	ldr	r3, [pc, #228]	; (8006160 <tcp_abandon+0x170>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a37      	ldr	r2, [pc, #220]	; (8006160 <tcp_abandon+0x170>)
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e013      	b.n	80060ae <tcp_abandon+0xbe>
 8006086:	4b36      	ldr	r3, [pc, #216]	; (8006160 <tcp_abandon+0x170>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e00c      	b.n	80060a8 <tcp_abandon+0xb8>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d104      	bne.n	80060a2 <tcp_abandon+0xb2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	60da      	str	r2, [r3, #12]
 80060a0:	e005      	b.n	80060ae <tcp_abandon+0xbe>
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1ef      	bne.n	800608e <tcp_abandon+0x9e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	60da      	str	r2, [r3, #12]
 80060b4:	e00b      	b.n	80060ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8adb      	ldrh	r3, [r3, #22]
 80060be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4828      	ldr	r0, [pc, #160]	; (8006164 <tcp_abandon+0x174>)
 80060c4:	f001 fa20 	bl	8007508 <tcp_pcb_remove>
 80060c8:	4b27      	ldr	r3, [pc, #156]	; (8006168 <tcp_abandon+0x178>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fed6 	bl	8006e8c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fecd 	bl	8006e8c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fec4 	bl	8006e8c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	8b12      	ldrh	r2, [r2, #24]
 8006114:	9202      	str	r2, [sp, #8]
 8006116:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006118:	9201      	str	r2, [sp, #4]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	460b      	mov	r3, r1
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f005 fbbc 	bl	800b8a0 <tcp_rst>
    }
    last_state = pcb->state;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7d1b      	ldrb	r3, [r3, #20]
 800612c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff fd34 	bl	8005b9c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <tcp_abandon+0x154>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f06f 010c 	mvn.w	r1, #12
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	4798      	blx	r3
  }
}
 8006144:	3728      	adds	r7, #40	; 0x28
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	080105b4 	.word	0x080105b4
 8006150:	080106f8 	.word	0x080106f8
 8006154:	080105f8 	.word	0x080105f8
 8006158:	08010714 	.word	0x08010714
 800615c:	20008e9c 	.word	0x20008e9c
 8006160:	20008e98 	.word	0x20008e98
 8006164:	20008e8c 	.word	0x20008e8c
 8006168:	20008e88 	.word	0x20008e88

0800616c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006174:	2101      	movs	r1, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ff3a 	bl	8005ff0 <tcp_abandon>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006192:	2304      	movs	r3, #4
 8006194:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800619c:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <tcp_bind+0x114>)
 800619e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <tcp_bind+0x36>
 80061a6:	4b3d      	ldr	r3, [pc, #244]	; (800629c <tcp_bind+0x118>)
 80061a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80061ac:	493c      	ldr	r1, [pc, #240]	; (80062a0 <tcp_bind+0x11c>)
 80061ae:	483d      	ldr	r0, [pc, #244]	; (80062a4 <tcp_bind+0x120>)
 80061b0:	f008 fb44 	bl	800e83c <iprintf>
 80061b4:	f06f 030f 	mvn.w	r3, #15
 80061b8:	e06a      	b.n	8006290 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	7d1b      	ldrb	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <tcp_bind+0x52>
 80061c2:	4b36      	ldr	r3, [pc, #216]	; (800629c <tcp_bind+0x118>)
 80061c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80061c8:	4937      	ldr	r1, [pc, #220]	; (80062a8 <tcp_bind+0x124>)
 80061ca:	4836      	ldr	r0, [pc, #216]	; (80062a4 <tcp_bind+0x120>)
 80061cc:	f008 fb36 	bl	800e83c <iprintf>
 80061d0:	f06f 0305 	mvn.w	r3, #5
 80061d4:	e05c      	b.n	8006290 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80061dc:	f000 f9f0 	bl	80065c0 <tcp_new_port>
 80061e0:	4603      	mov	r3, r0
 80061e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d135      	bne.n	8006256 <tcp_bind+0xd2>
      return ERR_BUF;
 80061ea:	f06f 0301 	mvn.w	r3, #1
 80061ee:	e04f      	b.n	8006290 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e02b      	b.n	800624e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80061f6:	4a2d      	ldr	r2, [pc, #180]	; (80062ac <tcp_bind+0x128>)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e01e      	b.n	8006242 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	8adb      	ldrh	r3, [r3, #22]
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	429a      	cmp	r2, r3
 800620c:	d116      	bne.n	800623c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800620e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006210:	2b00      	cmp	r3, #0
 8006212:	d010      	beq.n	8006236 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <tcp_bind+0xb2>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006232:	429a      	cmp	r2, r3
 8006234:	d102      	bne.n	800623c <tcp_bind+0xb8>
              return ERR_USE;
 8006236:	f06f 0307 	mvn.w	r3, #7
 800623a:	e029      	b.n	8006290 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1dd      	bne.n	8006204 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	3301      	adds	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	429a      	cmp	r2, r3
 8006254:	dbcf      	blt.n	80061f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <tcp_bind+0xf2>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <tcp_bind+0xec>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	e000      	b.n	8006272 <tcp_bind+0xee>
 8006270:	2300      	movs	r3, #0
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <tcp_bind+0x12c>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	60da      	str	r2, [r3, #12]
 8006284:	4a0a      	ldr	r2, [pc, #40]	; (80062b0 <tcp_bind+0x12c>)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	f005 fccb 	bl	800bc24 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	080133a4 	.word	0x080133a4
 800629c:	080105b4 	.word	0x080105b4
 80062a0:	08010748 	.word	0x08010748
 80062a4:	080105f8 	.word	0x080105f8
 80062a8:	08010760 	.word	0x08010760
 80062ac:	0801337c 	.word	0x0801337c
 80062b0:	20008e98 	.word	0x20008e98

080062b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <tcp_accept_null+0x22>
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <tcp_accept_null+0x34>)
 80062ca:	f240 320f 	movw	r2, #783	; 0x30f
 80062ce:	4907      	ldr	r1, [pc, #28]	; (80062ec <tcp_accept_null+0x38>)
 80062d0:	4807      	ldr	r0, [pc, #28]	; (80062f0 <tcp_accept_null+0x3c>)
 80062d2:	f008 fab3 	bl	800e83c <iprintf>

  tcp_abort(pcb);
 80062d6:	68b8      	ldr	r0, [r7, #8]
 80062d8:	f7ff ff48 	bl	800616c <tcp_abort>

  return ERR_ABRT;
 80062dc:	f06f 030c 	mvn.w	r3, #12
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	080105b4 	.word	0x080105b4
 80062ec:	08010788 	.word	0x08010788
 80062f0:	080105f8 	.word	0x080105f8

080062f4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	2200      	movs	r2, #0
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f806 	bl	8006318 <tcp_listen_with_backlog_and_err>
 800630c:	4603      	mov	r3, r0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	460b      	mov	r3, r1
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <tcp_listen_with_backlog_and_err+0x2c>
 8006330:	4b47      	ldr	r3, [pc, #284]	; (8006450 <tcp_listen_with_backlog_and_err+0x138>)
 8006332:	f240 3259 	movw	r2, #857	; 0x359
 8006336:	4947      	ldr	r1, [pc, #284]	; (8006454 <tcp_listen_with_backlog_and_err+0x13c>)
 8006338:	4847      	ldr	r0, [pc, #284]	; (8006458 <tcp_listen_with_backlog_and_err+0x140>)
 800633a:	f008 fa7f 	bl	800e83c <iprintf>
 800633e:	23f0      	movs	r3, #240	; 0xf0
 8006340:	76fb      	strb	r3, [r7, #27]
 8006342:	e079      	b.n	8006438 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	7d1b      	ldrb	r3, [r3, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <tcp_listen_with_backlog_and_err+0x48>
 800634c:	4b40      	ldr	r3, [pc, #256]	; (8006450 <tcp_listen_with_backlog_and_err+0x138>)
 800634e:	f240 325a 	movw	r2, #858	; 0x35a
 8006352:	4942      	ldr	r1, [pc, #264]	; (800645c <tcp_listen_with_backlog_and_err+0x144>)
 8006354:	4840      	ldr	r0, [pc, #256]	; (8006458 <tcp_listen_with_backlog_and_err+0x140>)
 8006356:	f008 fa71 	bl	800e83c <iprintf>
 800635a:	23f1      	movs	r3, #241	; 0xf1
 800635c:	76fb      	strb	r3, [r7, #27]
 800635e:	e06b      	b.n	8006438 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	7d1b      	ldrb	r3, [r3, #20]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d104      	bne.n	8006372 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800636c:	23f7      	movs	r3, #247	; 0xf7
 800636e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006370:	e062      	b.n	8006438 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006372:	2002      	movs	r0, #2
 8006374:	f7fe fb14 	bl	80049a0 <memp_malloc>
 8006378:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006380:	23ff      	movs	r3, #255	; 0xff
 8006382:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006384:	e058      	b.n	8006438 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8ada      	ldrh	r2, [r3, #22]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2201      	movs	r2, #1
 800639a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	7d5a      	ldrb	r2, [r3, #21]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	7a5a      	ldrb	r2, [r3, #9]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2200      	movs	r2, #0
 80063b0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	7ada      	ldrb	r2, [r3, #11]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	7a9a      	ldrb	r2, [r3, #10]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8adb      	ldrh	r3, [r3, #22]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d021      	beq.n	8006416 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80063d2:	4b23      	ldr	r3, [pc, #140]	; (8006460 <tcp_listen_with_backlog_and_err+0x148>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d105      	bne.n	80063e8 <tcp_listen_with_backlog_and_err+0xd0>
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <tcp_listen_with_backlog_and_err+0x148>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <tcp_listen_with_backlog_and_err+0x148>)
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e013      	b.n	8006410 <tcp_listen_with_backlog_and_err+0xf8>
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <tcp_listen_with_backlog_and_err+0x148>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e00c      	b.n	800640a <tcp_listen_with_backlog_and_err+0xf2>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d104      	bne.n	8006404 <tcp_listen_with_backlog_and_err+0xec>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	e005      	b.n	8006410 <tcp_listen_with_backlog_and_err+0xf8>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ef      	bne.n	80063f0 <tcp_listen_with_backlog_and_err+0xd8>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fbc0 	bl	8005b9c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4a11      	ldr	r2, [pc, #68]	; (8006464 <tcp_listen_with_backlog_and_err+0x14c>)
 8006420:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006422:	4b11      	ldr	r3, [pc, #68]	; (8006468 <tcp_listen_with_backlog_and_err+0x150>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	60da      	str	r2, [r3, #12]
 800642a:	4a0f      	ldr	r2, [pc, #60]	; (8006468 <tcp_listen_with_backlog_and_err+0x150>)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	f005 fbf8 	bl	800bc24 <tcp_timer_needed>
  res = ERR_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7efa      	ldrb	r2, [r7, #27]
 8006442:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006444:	69fb      	ldr	r3, [r7, #28]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	080105b4 	.word	0x080105b4
 8006454:	080107a8 	.word	0x080107a8
 8006458:	080105f8 	.word	0x080105f8
 800645c:	080107d8 	.word	0x080107d8
 8006460:	20008e98 	.word	0x20008e98
 8006464:	080062b5 	.word	0x080062b5
 8006468:	20008e94 	.word	0x20008e94

0800646c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <tcp_update_rcv_ann_wnd+0x1c>
 800647a:	4b25      	ldr	r3, [pc, #148]	; (8006510 <tcp_update_rcv_ann_wnd+0xa4>)
 800647c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006480:	4924      	ldr	r1, [pc, #144]	; (8006514 <tcp_update_rcv_ann_wnd+0xa8>)
 8006482:	4825      	ldr	r0, [pc, #148]	; (8006518 <tcp_update_rcv_ann_wnd+0xac>)
 8006484:	f008 f9da 	bl	800e83c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006490:	4413      	add	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800649c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80064a0:	bf28      	it	cs
 80064a2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80064a6:	b292      	uxth	r2, r2
 80064a8:	4413      	add	r3, r2
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db08      	blt.n	80064c4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	e020      	b.n	8006506 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dd03      	ble.n	80064da <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d8:	e014      	b.n	8006504 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ec:	d306      	bcc.n	80064fc <tcp_update_rcv_ann_wnd+0x90>
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <tcp_update_rcv_ann_wnd+0xa4>)
 80064f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80064f4:	4909      	ldr	r1, [pc, #36]	; (800651c <tcp_update_rcv_ann_wnd+0xb0>)
 80064f6:	4808      	ldr	r0, [pc, #32]	; (8006518 <tcp_update_rcv_ann_wnd+0xac>)
 80064f8:	f008 f9a0 	bl	800e83c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006504:	2300      	movs	r3, #0
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	080105b4 	.word	0x080105b4
 8006514:	08010810 	.word	0x08010810
 8006518:	080105f8 	.word	0x080105f8
 800651c:	08010834 	.word	0x08010834

08006520 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <tcp_recved+0x22>
 8006532:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <tcp_recved+0x90>)
 8006534:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006538:	491e      	ldr	r1, [pc, #120]	; (80065b4 <tcp_recved+0x94>)
 800653a:	481f      	ldr	r0, [pc, #124]	; (80065b8 <tcp_recved+0x98>)
 800653c:	f008 f97e 	bl	800e83c <iprintf>
 8006540:	e032      	b.n	80065a8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	7d1b      	ldrb	r3, [r3, #20]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d106      	bne.n	8006558 <tcp_recved+0x38>
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <tcp_recved+0x90>)
 800654c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006550:	491a      	ldr	r1, [pc, #104]	; (80065bc <tcp_recved+0x9c>)
 8006552:	4819      	ldr	r0, [pc, #100]	; (80065b8 <tcp_recved+0x98>)
 8006554:	f008 f972 	bl	800e83c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800655c:	887b      	ldrh	r3, [r7, #2]
 800655e:	4413      	add	r3, r2
 8006560:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006562:	89fb      	ldrh	r3, [r7, #14]
 8006564:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006568:	d804      	bhi.n	8006574 <tcp_recved+0x54>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656e:	89fa      	ldrh	r2, [r7, #14]
 8006570:	429a      	cmp	r2, r3
 8006572:	d204      	bcs.n	800657e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800657a:	851a      	strh	r2, [r3, #40]	; 0x28
 800657c:	e002      	b.n	8006584 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	89fa      	ldrh	r2, [r7, #14]
 8006582:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff ff71 	bl	800646c <tcp_update_rcv_ann_wnd>
 800658a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006592:	d309      	bcc.n	80065a8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8b5b      	ldrh	r3, [r3, #26]
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	b29a      	uxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f004 fbc8 	bl	800ad38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	080105b4 	.word	0x080105b4
 80065b4:	08010850 	.word	0x08010850
 80065b8:	080105f8 	.word	0x080105f8
 80065bc:	08010868 	.word	0x08010868

080065c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80065ca:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <tcp_new_port+0x84>)
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <tcp_new_port+0x84>)
 80065d4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80065d6:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <tcp_new_port+0x84>)
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065de:	4293      	cmp	r3, r2
 80065e0:	d103      	bne.n	80065ea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80065e2:	4b18      	ldr	r3, [pc, #96]	; (8006644 <tcp_new_port+0x84>)
 80065e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80065e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80065ea:	2300      	movs	r3, #0
 80065ec:	71fb      	strb	r3, [r7, #7]
 80065ee:	e01e      	b.n	800662e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <tcp_new_port+0x88>)
 80065f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	e011      	b.n	8006622 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	8ada      	ldrh	r2, [r3, #22]
 8006602:	4b10      	ldr	r3, [pc, #64]	; (8006644 <tcp_new_port+0x84>)
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d108      	bne.n	800661c <tcp_new_port+0x5c>
        n++;
 800660a:	88bb      	ldrh	r3, [r7, #4]
 800660c:	3301      	adds	r3, #1
 800660e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006610:	88bb      	ldrh	r3, [r7, #4]
 8006612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006616:	d3d8      	bcc.n	80065ca <tcp_new_port+0xa>
          return 0;
 8006618:	2300      	movs	r3, #0
 800661a:	e00d      	b.n	8006638 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1ea      	bne.n	80065fe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	3301      	adds	r3, #1
 800662c:	71fb      	strb	r3, [r7, #7]
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d9dd      	bls.n	80065f0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <tcp_new_port+0x84>)
 8006636:	881b      	ldrh	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	2000000a 	.word	0x2000000a
 8006648:	0801337c 	.word	0x0801337c

0800664c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800664c:	b5b0      	push	{r4, r5, r7, lr}
 800664e:	b090      	sub	sp, #64	; 0x40
 8006650:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006658:	4b94      	ldr	r3, [pc, #592]	; (80068ac <tcp_slowtmr+0x260>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	4a93      	ldr	r2, [pc, #588]	; (80068ac <tcp_slowtmr+0x260>)
 8006660:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006662:	4b93      	ldr	r3, [pc, #588]	; (80068b0 <tcp_slowtmr+0x264>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	3301      	adds	r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	4b91      	ldr	r3, [pc, #580]	; (80068b0 <tcp_slowtmr+0x264>)
 800666c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006672:	4b90      	ldr	r3, [pc, #576]	; (80068b4 <tcp_slowtmr+0x268>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006678:	e29f      	b.n	8006bba <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	7d1b      	ldrb	r3, [r3, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <tcp_slowtmr+0x44>
 8006682:	4b8d      	ldr	r3, [pc, #564]	; (80068b8 <tcp_slowtmr+0x26c>)
 8006684:	f240 42be 	movw	r2, #1214	; 0x4be
 8006688:	498c      	ldr	r1, [pc, #560]	; (80068bc <tcp_slowtmr+0x270>)
 800668a:	488d      	ldr	r0, [pc, #564]	; (80068c0 <tcp_slowtmr+0x274>)
 800668c:	f008 f8d6 	bl	800e83c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	7d1b      	ldrb	r3, [r3, #20]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <tcp_slowtmr+0x5a>
 8006698:	4b87      	ldr	r3, [pc, #540]	; (80068b8 <tcp_slowtmr+0x26c>)
 800669a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800669e:	4989      	ldr	r1, [pc, #548]	; (80068c4 <tcp_slowtmr+0x278>)
 80066a0:	4887      	ldr	r0, [pc, #540]	; (80068c0 <tcp_slowtmr+0x274>)
 80066a2:	f008 f8cb 	bl	800e83c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	7d1b      	ldrb	r3, [r3, #20]
 80066aa:	2b0a      	cmp	r3, #10
 80066ac:	d106      	bne.n	80066bc <tcp_slowtmr+0x70>
 80066ae:	4b82      	ldr	r3, [pc, #520]	; (80068b8 <tcp_slowtmr+0x26c>)
 80066b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80066b4:	4984      	ldr	r1, [pc, #528]	; (80068c8 <tcp_slowtmr+0x27c>)
 80066b6:	4882      	ldr	r0, [pc, #520]	; (80068c0 <tcp_slowtmr+0x274>)
 80066b8:	f008 f8c0 	bl	800e83c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	7f9a      	ldrb	r2, [r3, #30]
 80066c0:	4b7b      	ldr	r3, [pc, #492]	; (80068b0 <tcp_slowtmr+0x264>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d105      	bne.n	80066d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80066d2:	e272      	b.n	8006bba <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80066d4:	4b76      	ldr	r3, [pc, #472]	; (80068b0 <tcp_slowtmr+0x264>)
 80066d6:	781a      	ldrb	r2, [r3, #0]
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	7d1b      	ldrb	r3, [r3, #20]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d10a      	bne.n	8006706 <tcp_slowtmr+0xba>
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d905      	bls.n	8006706 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80066fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066fe:	3301      	adds	r3, #1
 8006700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006704:	e11e      	b.n	8006944 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800670c:	2b0b      	cmp	r3, #11
 800670e:	d905      	bls.n	800671c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006714:	3301      	adds	r3, #1
 8006716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800671a:	e113      	b.n	8006944 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006722:	2b00      	cmp	r3, #0
 8006724:	d075      	beq.n	8006812 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <tcp_slowtmr+0xf0>
 800672e:	4b62      	ldr	r3, [pc, #392]	; (80068b8 <tcp_slowtmr+0x26c>)
 8006730:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006734:	4965      	ldr	r1, [pc, #404]	; (80068cc <tcp_slowtmr+0x280>)
 8006736:	4862      	ldr	r0, [pc, #392]	; (80068c0 <tcp_slowtmr+0x274>)
 8006738:	f008 f880 	bl	800e83c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d106      	bne.n	8006752 <tcp_slowtmr+0x106>
 8006744:	4b5c      	ldr	r3, [pc, #368]	; (80068b8 <tcp_slowtmr+0x26c>)
 8006746:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800674a:	4961      	ldr	r1, [pc, #388]	; (80068d0 <tcp_slowtmr+0x284>)
 800674c:	485c      	ldr	r0, [pc, #368]	; (80068c0 <tcp_slowtmr+0x274>)
 800674e:	f008 f875 	bl	800e83c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006758:	2b0b      	cmp	r3, #11
 800675a:	d905      	bls.n	8006768 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006760:	3301      	adds	r3, #1
 8006762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006766:	e0ed      	b.n	8006944 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800676e:	3b01      	subs	r3, #1
 8006770:	4a58      	ldr	r2, [pc, #352]	; (80068d4 <tcp_slowtmr+0x288>)
 8006772:	5cd3      	ldrb	r3, [r2, r3]
 8006774:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800677c:	7c7a      	ldrb	r2, [r7, #17]
 800677e:	429a      	cmp	r2, r3
 8006780:	d907      	bls.n	8006792 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006788:	3301      	adds	r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006798:	7c7a      	ldrb	r2, [r7, #17]
 800679a:	429a      	cmp	r2, r3
 800679c:	f200 80d2 	bhi.w	8006944 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80067a0:	2301      	movs	r3, #1
 80067a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d108      	bne.n	80067c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80067ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067b0:	f005 f96a 	bl	800ba88 <tcp_zero_window_probe>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80067ba:	2300      	movs	r3, #0
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	e011      	b.n	80067e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067c6:	4619      	mov	r1, r3
 80067c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ca:	f004 f82f 	bl	800a82c <tcp_split_unsent_seg>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d107      	bne.n	80067e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80067d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067d6:	f004 faaf 	bl	800ad38 <tcp_output>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80ac 	beq.w	8006944 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	f200 80a2 	bhi.w	8006944 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006806:	3301      	adds	r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006810:	e098      	b.n	8006944 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006818:	2b00      	cmp	r3, #0
 800681a:	db0f      	blt.n	800683c <tcp_slowtmr+0x1f0>
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006822:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006826:	4293      	cmp	r3, r2
 8006828:	d008      	beq.n	800683c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006830:	b29b      	uxth	r3, r3
 8006832:	3301      	adds	r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	b21a      	sxth	r2, r3
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006848:	429a      	cmp	r2, r3
 800684a:	db7b      	blt.n	8006944 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800684c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800684e:	f004 fd65 	bl	800b31c <tcp_rexmit_rto_prepare>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <tcp_slowtmr+0x21c>
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	2b00      	cmp	r3, #0
 800685e:	d171      	bne.n	8006944 <tcp_slowtmr+0x2f8>
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d06d      	beq.n	8006944 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	7d1b      	ldrb	r3, [r3, #20]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d03a      	beq.n	80068e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006876:	2b0c      	cmp	r3, #12
 8006878:	bf28      	it	cs
 800687a:	230c      	movcs	r3, #12
 800687c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006884:	10db      	asrs	r3, r3, #3
 8006886:	b21b      	sxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006890:	4413      	add	r3, r2
 8006892:	7efa      	ldrb	r2, [r7, #27]
 8006894:	4910      	ldr	r1, [pc, #64]	; (80068d8 <tcp_slowtmr+0x28c>)
 8006896:	5c8a      	ldrb	r2, [r1, r2]
 8006898:	4093      	lsls	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80068a2:	4293      	cmp	r3, r2
 80068a4:	dc1a      	bgt.n	80068dc <tcp_slowtmr+0x290>
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	b21a      	sxth	r2, r3
 80068aa:	e019      	b.n	80068e0 <tcp_slowtmr+0x294>
 80068ac:	20008e90 	.word	0x20008e90
 80068b0:	2000050a 	.word	0x2000050a
 80068b4:	20008e8c 	.word	0x20008e8c
 80068b8:	080105b4 	.word	0x080105b4
 80068bc:	080108f8 	.word	0x080108f8
 80068c0:	080105f8 	.word	0x080105f8
 80068c4:	08010924 	.word	0x08010924
 80068c8:	08010950 	.word	0x08010950
 80068cc:	08010980 	.word	0x08010980
 80068d0:	080109b4 	.word	0x080109b4
 80068d4:	08013374 	.word	0x08013374
 80068d8:	08013364 	.word	0x08013364
 80068dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	2200      	movs	r2, #0
 80068ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80068f8:	4293      	cmp	r3, r2
 80068fa:	bf28      	it	cs
 80068fc:	4613      	movcs	r3, r2
 80068fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006900:	8a7b      	ldrh	r3, [r7, #18]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	b29b      	uxth	r3, r3
 800691a:	429a      	cmp	r2, r3
 800691c:	d206      	bcs.n	800692c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	2200      	movs	r2, #0
 800693a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800693e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006940:	f004 fd5c 	bl	800b3fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	7d1b      	ldrb	r3, [r3, #20]
 8006948:	2b06      	cmp	r3, #6
 800694a:	d111      	bne.n	8006970 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	8b5b      	ldrh	r3, [r3, #26]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006958:	4b9d      	ldr	r3, [pc, #628]	; (8006bd0 <tcp_slowtmr+0x584>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b28      	cmp	r3, #40	; 0x28
 8006964:	d904      	bls.n	8006970 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696a:	3301      	adds	r3, #1
 800696c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	7a5b      	ldrb	r3, [r3, #9]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d04c      	beq.n	8006a16 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006980:	2b04      	cmp	r3, #4
 8006982:	d003      	beq.n	800698c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006988:	2b07      	cmp	r3, #7
 800698a:	d144      	bne.n	8006a16 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800698c:	4b90      	ldr	r3, [pc, #576]	; (8006bd0 <tcp_slowtmr+0x584>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800699c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80069a0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80069a4:	498b      	ldr	r1, [pc, #556]	; (8006bd4 <tcp_slowtmr+0x588>)
 80069a6:	fba1 1303 	umull	r1, r3, r1, r3
 80069aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d90a      	bls.n	80069c6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80069b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069b4:	3301      	adds	r3, #1
 80069b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80069ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069be:	3301      	adds	r3, #1
 80069c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069c4:	e027      	b.n	8006a16 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069c6:	4b82      	ldr	r3, [pc, #520]	; (8006bd0 <tcp_slowtmr+0x584>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80069dc:	4618      	mov	r0, r3
 80069de:	4b7e      	ldr	r3, [pc, #504]	; (8006bd8 <tcp_slowtmr+0x58c>)
 80069e0:	fb03 f300 	mul.w	r3, r3, r0
 80069e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80069e6:	497b      	ldr	r1, [pc, #492]	; (8006bd4 <tcp_slowtmr+0x588>)
 80069e8:	fba1 1303 	umull	r1, r3, r1, r3
 80069ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d911      	bls.n	8006a16 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80069f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069f4:	f005 f808 	bl	800ba08 <tcp_keepalive>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80069fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d107      	bne.n	8006a16 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d011      	beq.n	8006a42 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006a1e:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <tcp_slowtmr+0x584>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006a2e:	4619      	mov	r1, r3
 8006a30:	460b      	mov	r3, r1
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	440b      	add	r3, r1
 8006a36:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a3e:	f000 fec7 	bl	80077d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	7d1b      	ldrb	r3, [r3, #20]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d10b      	bne.n	8006a62 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a4a:	4b61      	ldr	r3, [pc, #388]	; (8006bd0 <tcp_slowtmr+0x584>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b28      	cmp	r3, #40	; 0x28
 8006a56:	d904      	bls.n	8006a62 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	7d1b      	ldrb	r3, [r3, #20]
 8006a66:	2b09      	cmp	r3, #9
 8006a68:	d10b      	bne.n	8006a82 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006a6a:	4b59      	ldr	r3, [pc, #356]	; (8006bd0 <tcp_slowtmr+0x584>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2bf0      	cmp	r3, #240	; 0xf0
 8006a76:	d904      	bls.n	8006a82 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d060      	beq.n	8006b4c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a90:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a94:	f000 fce8 	bl	8007468 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d010      	beq.n	8006ac0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006a9e:	4b4f      	ldr	r3, [pc, #316]	; (8006bdc <tcp_slowtmr+0x590>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d106      	bne.n	8006ab6 <tcp_slowtmr+0x46a>
 8006aa8:	4b4d      	ldr	r3, [pc, #308]	; (8006be0 <tcp_slowtmr+0x594>)
 8006aaa:	f240 526d 	movw	r2, #1389	; 0x56d
 8006aae:	494d      	ldr	r1, [pc, #308]	; (8006be4 <tcp_slowtmr+0x598>)
 8006ab0:	484d      	ldr	r0, [pc, #308]	; (8006be8 <tcp_slowtmr+0x59c>)
 8006ab2:	f007 fec3 	bl	800e83c <iprintf>
        prev->next = pcb->next;
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	60da      	str	r2, [r3, #12]
 8006abe:	e00f      	b.n	8006ae0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006ac0:	4b46      	ldr	r3, [pc, #280]	; (8006bdc <tcp_slowtmr+0x590>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d006      	beq.n	8006ad8 <tcp_slowtmr+0x48c>
 8006aca:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <tcp_slowtmr+0x594>)
 8006acc:	f240 5271 	movw	r2, #1393	; 0x571
 8006ad0:	4946      	ldr	r1, [pc, #280]	; (8006bec <tcp_slowtmr+0x5a0>)
 8006ad2:	4845      	ldr	r0, [pc, #276]	; (8006be8 <tcp_slowtmr+0x59c>)
 8006ad4:	f007 feb2 	bl	800e83c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4a3f      	ldr	r2, [pc, #252]	; (8006bdc <tcp_slowtmr+0x590>)
 8006ade:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d013      	beq.n	8006b10 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006af0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	3304      	adds	r3, #4
 8006af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af8:	8ad2      	ldrh	r2, [r2, #22]
 8006afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afc:	8b09      	ldrh	r1, [r1, #24]
 8006afe:	9102      	str	r1, [sp, #8]
 8006b00:	9201      	str	r2, [sp, #4]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	462b      	mov	r3, r5
 8006b06:	4622      	mov	r2, r4
 8006b08:	4601      	mov	r1, r0
 8006b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b0c:	f004 fec8 	bl	800b8a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	7d1b      	ldrb	r3, [r3, #20]
 8006b1a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006b26:	6838      	ldr	r0, [r7, #0]
 8006b28:	f7ff f838 	bl	8005b9c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006b2c:	4b30      	ldr	r3, [pc, #192]	; (8006bf0 <tcp_slowtmr+0x5a4>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <tcp_slowtmr+0x4f6>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f06f 010c 	mvn.w	r1, #12
 8006b3e:	68b8      	ldr	r0, [r7, #8]
 8006b40:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006b42:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <tcp_slowtmr+0x5a4>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d037      	beq.n	8006bba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006b4a:	e590      	b.n	800666e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	7f1b      	ldrb	r3, [r3, #28]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	7f1a      	ldrb	r2, [r3, #28]
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	7f5b      	ldrb	r3, [r3, #29]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d325      	bcc.n	8006bba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	2200      	movs	r2, #0
 8006b72:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <tcp_slowtmr+0x5a4>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <tcp_slowtmr+0x550>
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b8c:	6912      	ldr	r2, [r2, #16]
 8006b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006b9a:	e002      	b.n	8006ba2 <tcp_slowtmr+0x556>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <tcp_slowtmr+0x5a4>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d000      	beq.n	8006bac <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006baa:	e560      	b.n	800666e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006bac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb6:	f004 f8bf 	bl	800ad38 <tcp_output>
  while (pcb != NULL) {
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f ad5c 	bne.w	800667a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <tcp_slowtmr+0x5a8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006bcc:	e067      	b.n	8006c9e <tcp_slowtmr+0x652>
 8006bce:	bf00      	nop
 8006bd0:	20008e90 	.word	0x20008e90
 8006bd4:	10624dd3 	.word	0x10624dd3
 8006bd8:	000124f8 	.word	0x000124f8
 8006bdc:	20008e8c 	.word	0x20008e8c
 8006be0:	080105b4 	.word	0x080105b4
 8006be4:	080109ec 	.word	0x080109ec
 8006be8:	080105f8 	.word	0x080105f8
 8006bec:	08010a18 	.word	0x08010a18
 8006bf0:	20008e88 	.word	0x20008e88
 8006bf4:	20008e9c 	.word	0x20008e9c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	7d1b      	ldrb	r3, [r3, #20]
 8006bfc:	2b0a      	cmp	r3, #10
 8006bfe:	d006      	beq.n	8006c0e <tcp_slowtmr+0x5c2>
 8006c00:	4b2b      	ldr	r3, [pc, #172]	; (8006cb0 <tcp_slowtmr+0x664>)
 8006c02:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006c06:	492b      	ldr	r1, [pc, #172]	; (8006cb4 <tcp_slowtmr+0x668>)
 8006c08:	482b      	ldr	r0, [pc, #172]	; (8006cb8 <tcp_slowtmr+0x66c>)
 8006c0a:	f007 fe17 	bl	800e83c <iprintf>
    pcb_remove = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006c14:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <tcp_slowtmr+0x670>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2bf0      	cmp	r3, #240	; 0xf0
 8006c20:	d904      	bls.n	8006c2c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c26:	3301      	adds	r3, #1
 8006c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02f      	beq.n	8006c94 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c36:	f000 fc17 	bl	8007468 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006c40:	4b1f      	ldr	r3, [pc, #124]	; (8006cc0 <tcp_slowtmr+0x674>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d106      	bne.n	8006c58 <tcp_slowtmr+0x60c>
 8006c4a:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <tcp_slowtmr+0x664>)
 8006c4c:	f240 52af 	movw	r2, #1455	; 0x5af
 8006c50:	491c      	ldr	r1, [pc, #112]	; (8006cc4 <tcp_slowtmr+0x678>)
 8006c52:	4819      	ldr	r0, [pc, #100]	; (8006cb8 <tcp_slowtmr+0x66c>)
 8006c54:	f007 fdf2 	bl	800e83c <iprintf>
        prev->next = pcb->next;
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	60da      	str	r2, [r3, #12]
 8006c60:	e00f      	b.n	8006c82 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <tcp_slowtmr+0x674>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d006      	beq.n	8006c7a <tcp_slowtmr+0x62e>
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <tcp_slowtmr+0x664>)
 8006c6e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006c72:	4915      	ldr	r1, [pc, #84]	; (8006cc8 <tcp_slowtmr+0x67c>)
 8006c74:	4810      	ldr	r0, [pc, #64]	; (8006cb8 <tcp_slowtmr+0x66c>)
 8006c76:	f007 fde1 	bl	800e83c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <tcp_slowtmr+0x674>)
 8006c80:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006c8c:	69f8      	ldr	r0, [r7, #28]
 8006c8e:	f7fe ff85 	bl	8005b9c <tcp_free>
 8006c92:	e004      	b.n	8006c9e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1a9      	bne.n	8006bf8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	3730      	adds	r7, #48	; 0x30
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bdb0      	pop	{r4, r5, r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	080105b4 	.word	0x080105b4
 8006cb4:	08010a44 	.word	0x08010a44
 8006cb8:	080105f8 	.word	0x080105f8
 8006cbc:	20008e90 	.word	0x20008e90
 8006cc0:	20008e9c 	.word	0x20008e9c
 8006cc4:	08010a74 	.word	0x08010a74
 8006cc8:	08010a9c 	.word	0x08010a9c

08006ccc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006cd2:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <tcp_fasttmr+0xbc>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <tcp_fasttmr+0xbc>)
 8006cdc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006cde:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <tcp_fasttmr+0xc0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006ce4:	e048      	b.n	8006d78 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7f9a      	ldrb	r2, [r3, #30]
 8006cea:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <tcp_fasttmr+0xbc>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d03f      	beq.n	8006d72 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006cf2:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <tcp_fasttmr+0xbc>)
 8006cf4:	781a      	ldrb	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8b5b      	ldrh	r3, [r3, #26]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8b5b      	ldrh	r3, [r3, #26]
 8006d0a:	f043 0302 	orr.w	r3, r3, #2
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f004 f80f 	bl	800ad38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8b5b      	ldrh	r3, [r3, #26]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8b5b      	ldrh	r3, [r3, #26]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8b5b      	ldrh	r3, [r3, #26]
 8006d38:	f023 0308 	bic.w	r3, r3, #8
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff f8be 	bl	8005ec4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006d56:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <tcp_fasttmr+0xc4>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f819 	bl	8006d94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006d62:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <tcp_fasttmr+0xc4>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d000      	beq.n	8006d6c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006d6a:	e7b8      	b.n	8006cde <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e002      	b.n	8006d78 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1b3      	bne.n	8006ce6 <tcp_fasttmr+0x1a>
    }
  }
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000050a 	.word	0x2000050a
 8006d8c:	20008e8c 	.word	0x20008e8c
 8006d90:	20008e88 	.word	0x20008e88

08006d94 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006d94:	b590      	push	{r4, r7, lr}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <tcp_process_refused_data+0x22>
 8006da2:	4b37      	ldr	r3, [pc, #220]	; (8006e80 <tcp_process_refused_data+0xec>)
 8006da4:	f240 6209 	movw	r2, #1545	; 0x609
 8006da8:	4936      	ldr	r1, [pc, #216]	; (8006e84 <tcp_process_refused_data+0xf0>)
 8006daa:	4837      	ldr	r0, [pc, #220]	; (8006e88 <tcp_process_refused_data+0xf4>)
 8006dac:	f007 fd46 	bl	800e83c <iprintf>
 8006db0:	f06f 030f 	mvn.w	r3, #15
 8006db4:	e060      	b.n	8006e78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dba:	7b5b      	ldrb	r3, [r3, #13]
 8006dbc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <tcp_process_refused_data+0x58>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6918      	ldr	r0, [r3, #16]
 8006dde:	2300      	movs	r3, #0
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	47a0      	blx	r4
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
 8006dea:	e007      	b.n	8006dfc <tcp_process_refused_data+0x68>
 8006dec:	2300      	movs	r3, #0
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	2000      	movs	r0, #0
 8006df4:	f000 f8c2 	bl	8006f7c <tcp_recv_null>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d12a      	bne.n	8006e5a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d033      	beq.n	8006e76 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e16:	d005      	beq.n	8006e24 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <tcp_process_refused_data+0xb2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6918      	ldr	r0, [r3, #16]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	47a0      	blx	r4
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e001      	b.n	8006e4a <tcp_process_refused_data+0xb6>
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e4e:	f113 0f0d 	cmn.w	r3, #13
 8006e52:	d110      	bne.n	8006e76 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006e54:	f06f 030c 	mvn.w	r3, #12
 8006e58:	e00e      	b.n	8006e78 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5e:	f113 0f0d 	cmn.w	r3, #13
 8006e62:	d102      	bne.n	8006e6a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006e64:	f06f 030c 	mvn.w	r3, #12
 8006e68:	e006      	b.n	8006e78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006e70:	f06f 0304 	mvn.w	r3, #4
 8006e74:	e000      	b.n	8006e78 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd90      	pop	{r4, r7, pc}
 8006e80:	080105b4 	.word	0x080105b4
 8006e84:	08010ac4 	.word	0x08010ac4
 8006e88:	080105f8 	.word	0x080105f8

08006e8c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006e94:	e007      	b.n	8006ea6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f80a 	bl	8006eb6 <tcp_seg_free>
    seg = next;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f4      	bne.n	8006e96 <tcp_segs_free+0xa>
  }
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00c      	beq.n	8006ede <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fbc3 	bl	800565c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	2003      	movs	r0, #3
 8006eda:	f7fd fdad 	bl	8004a38 <memp_free>
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d107      	bne.n	8006f0a <tcp_setprio+0x22>
 8006efa:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <tcp_setprio+0x30>)
 8006efc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006f00:	4906      	ldr	r1, [pc, #24]	; (8006f1c <tcp_setprio+0x34>)
 8006f02:	4807      	ldr	r0, [pc, #28]	; (8006f20 <tcp_setprio+0x38>)
 8006f04:	f007 fc9a 	bl	800e83c <iprintf>
 8006f08:	e002      	b.n	8006f10 <tcp_setprio+0x28>

  pcb->prio = prio;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	755a      	strb	r2, [r3, #21]
}
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	080105b4 	.word	0x080105b4
 8006f1c:	08010aec 	.word	0x08010aec
 8006f20:	080105f8 	.word	0x080105f8

08006f24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <tcp_seg_copy+0x1c>
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <tcp_seg_copy+0x4c>)
 8006f34:	f240 6282 	movw	r2, #1666	; 0x682
 8006f38:	490e      	ldr	r1, [pc, #56]	; (8006f74 <tcp_seg_copy+0x50>)
 8006f3a:	480f      	ldr	r0, [pc, #60]	; (8006f78 <tcp_seg_copy+0x54>)
 8006f3c:	f007 fc7e 	bl	800e83c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006f40:	2003      	movs	r0, #3
 8006f42:	f7fd fd2d 	bl	80049a0 <memp_malloc>
 8006f46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <tcp_seg_copy+0x2e>
    return NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e00a      	b.n	8006f68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006f52:	2210      	movs	r2, #16
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f007 fc5a 	bl	800e810 <memcpy>
  pbuf_ref(cseg->p);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fc1b 	bl	800579c <pbuf_ref>
  return cseg;
 8006f66:	68fb      	ldr	r3, [r7, #12]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	080105b4 	.word	0x080105b4
 8006f74:	08010b08 	.word	0x08010b08
 8006f78:	080105f8 	.word	0x080105f8

08006f7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <tcp_recv_null+0x28>
 8006f90:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <tcp_recv_null+0x60>)
 8006f92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006f96:	4912      	ldr	r1, [pc, #72]	; (8006fe0 <tcp_recv_null+0x64>)
 8006f98:	4812      	ldr	r0, [pc, #72]	; (8006fe4 <tcp_recv_null+0x68>)
 8006f9a:	f007 fc4f 	bl	800e83c <iprintf>
 8006f9e:	f06f 030f 	mvn.w	r3, #15
 8006fa2:	e016      	b.n	8006fd2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	891b      	ldrh	r3, [r3, #8]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68b8      	ldr	r0, [r7, #8]
 8006fb2:	f7ff fab5 	bl	8006520 <tcp_recved>
    pbuf_free(p);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fe fb50 	bl	800565c <pbuf_free>
 8006fbc:	e008      	b.n	8006fd0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006fc6:	68b8      	ldr	r0, [r7, #8]
 8006fc8:	f7fe ffe6 	bl	8005f98 <tcp_close>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	e000      	b.n	8006fd2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	080105b4 	.word	0x080105b4
 8006fe0:	08010b24 	.word	0x08010b24
 8006fe4:	080105f8 	.word	0x080105f8

08006fe8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	db01      	blt.n	8006ffe <tcp_kill_prio+0x16>
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	e000      	b.n	8007000 <tcp_kill_prio+0x18>
 8006ffe:	237f      	movs	r3, #127	; 0x7f
 8007000:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d034      	beq.n	8007072 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3b01      	subs	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007016:	4b19      	ldr	r3, [pc, #100]	; (800707c <tcp_kill_prio+0x94>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e01f      	b.n	800705e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	7d5b      	ldrb	r3, [r3, #21]
 8007022:	7afa      	ldrb	r2, [r7, #11]
 8007024:	429a      	cmp	r2, r3
 8007026:	d80c      	bhi.n	8007042 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800702c:	7afa      	ldrb	r2, [r7, #11]
 800702e:	429a      	cmp	r2, r3
 8007030:	d112      	bne.n	8007058 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007032:	4b13      	ldr	r3, [pc, #76]	; (8007080 <tcp_kill_prio+0x98>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	429a      	cmp	r2, r3
 8007040:	d80a      	bhi.n	8007058 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007042:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <tcp_kill_prio+0x98>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	7d5b      	ldrb	r3, [r3, #21]
 8007056:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1dc      	bne.n	800701e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f7ff f87e 	bl	800616c <tcp_abort>
 8007070:	e000      	b.n	8007074 <tcp_kill_prio+0x8c>
    return;
 8007072:	bf00      	nop
  }
}
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20008e8c 	.word	0x20008e8c
 8007080:	20008e90 	.word	0x20008e90

08007084 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	2b08      	cmp	r3, #8
 8007092:	d009      	beq.n	80070a8 <tcp_kill_state+0x24>
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	2b09      	cmp	r3, #9
 8007098:	d006      	beq.n	80070a8 <tcp_kill_state+0x24>
 800709a:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <tcp_kill_state+0x80>)
 800709c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80070a0:	4919      	ldr	r1, [pc, #100]	; (8007108 <tcp_kill_state+0x84>)
 80070a2:	481a      	ldr	r0, [pc, #104]	; (800710c <tcp_kill_state+0x88>)
 80070a4:	f007 fbca 	bl	800e83c <iprintf>

  inactivity = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <tcp_kill_state+0x8c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e017      	b.n	80070e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	7d1b      	ldrb	r3, [r3, #20]
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d10f      	bne.n	80070e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070c2:	4b14      	ldr	r3, [pc, #80]	; (8007114 <tcp_kill_state+0x90>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d807      	bhi.n	80070e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <tcp_kill_state+0x90>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e4      	bne.n	80070b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80070f4:	2100      	movs	r1, #0
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f7fe ff7a 	bl	8005ff0 <tcp_abandon>
  }
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	080105b4 	.word	0x080105b4
 8007108:	08010b40 	.word	0x08010b40
 800710c:	080105f8 	.word	0x080105f8
 8007110:	20008e8c 	.word	0x20008e8c
 8007114:	20008e90 	.word	0x20008e90

08007118 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007126:	4b12      	ldr	r3, [pc, #72]	; (8007170 <tcp_kill_timewait+0x58>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e012      	b.n	8007154 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <tcp_kill_timewait+0x5c>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	429a      	cmp	r2, r3
 800713c:	d807      	bhi.n	800714e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <tcp_kill_timewait+0x5c>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e9      	bne.n	800712e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f7ff f803 	bl	800616c <tcp_abort>
  }
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20008e9c 	.word	0x20008e9c
 8007174:	20008e90 	.word	0x20008e90

08007178 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <tcp_handle_closepend+0x48>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007184:	e014      	b.n	80071b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	8b5b      	ldrh	r3, [r3, #26]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8b5b      	ldrh	r3, [r3, #26]
 800719c:	f023 0308 	bic.w	r3, r3, #8
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe fe8c 	bl	8005ec4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e7      	bne.n	8007186 <tcp_handle_closepend+0xe>
  }
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20008e8c 	.word	0x20008e8c

080071c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071ce:	2001      	movs	r0, #1
 80071d0:	f7fd fbe6 	bl	80049a0 <memp_malloc>
 80071d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d126      	bne.n	800722a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80071dc:	f7ff ffcc 	bl	8007178 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80071e0:	f7ff ff9a 	bl	8007118 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f7fd fbdb 	bl	80049a0 <memp_malloc>
 80071ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d11b      	bne.n	800722a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80071f2:	2009      	movs	r0, #9
 80071f4:	f7ff ff46 	bl	8007084 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071f8:	2001      	movs	r0, #1
 80071fa:	f7fd fbd1 	bl	80049a0 <memp_malloc>
 80071fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d111      	bne.n	800722a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007206:	2008      	movs	r0, #8
 8007208:	f7ff ff3c 	bl	8007084 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800720c:	2001      	movs	r0, #1
 800720e:	f7fd fbc7 	bl	80049a0 <memp_malloc>
 8007212:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d107      	bne.n	800722a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fee3 	bl	8006fe8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007222:	2001      	movs	r0, #1
 8007224:	f7fd fbbc 	bl	80049a0 <memp_malloc>
 8007228:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d03f      	beq.n	80072b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007230:	229c      	movs	r2, #156	; 0x9c
 8007232:	2100      	movs	r1, #0
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f007 faf9 	bl	800e82c <memset>
    pcb->prio = prio;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	79fa      	ldrb	r2, [r7, #7]
 800723e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007246:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007250:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007266:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2206      	movs	r2, #6
 800726c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2206      	movs	r2, #6
 8007274:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800727c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <tcp_alloc+0xf8>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <tcp_alloc+0xfc>)
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800729c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4a08      	ldr	r2, [pc, #32]	; (80072c4 <tcp_alloc+0x100>)
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4a07      	ldr	r2, [pc, #28]	; (80072c8 <tcp_alloc+0x104>)
 80072ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80072b0:	68fb      	ldr	r3, [r7, #12]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20008e90 	.word	0x20008e90
 80072c0:	2000050a 	.word	0x2000050a
 80072c4:	08006f7d 	.word	0x08006f7d
 80072c8:	006ddd00 	.word	0x006ddd00

080072cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80072d6:	2040      	movs	r0, #64	; 0x40
 80072d8:	f7ff ff74 	bl	80071c4 <tcp_alloc>
 80072dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	611a      	str	r2, [r3, #16]
  }
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00e      	beq.n	800733a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7d1b      	ldrb	r3, [r3, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d106      	bne.n	8007332 <tcp_recv+0x26>
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <tcp_recv+0x38>)
 8007326:	f240 72df 	movw	r2, #2015	; 0x7df
 800732a:	4907      	ldr	r1, [pc, #28]	; (8007348 <tcp_recv+0x3c>)
 800732c:	4807      	ldr	r0, [pc, #28]	; (800734c <tcp_recv+0x40>)
 800732e:	f007 fa85 	bl	800e83c <iprintf>
    pcb->recv = recv;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	080105b4 	.word	0x080105b4
 8007348:	08010b50 	.word	0x08010b50
 800734c:	080105f8 	.word	0x080105f8

08007350 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7d1b      	ldrb	r3, [r3, #20]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d106      	bne.n	8007376 <tcp_sent+0x26>
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <tcp_sent+0x38>)
 800736a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800736e:	4907      	ldr	r1, [pc, #28]	; (800738c <tcp_sent+0x3c>)
 8007370:	4807      	ldr	r0, [pc, #28]	; (8007390 <tcp_sent+0x40>)
 8007372:	f007 fa63 	bl	800e83c <iprintf>
    pcb->sent = sent;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	080105b4 	.word	0x080105b4
 800738c:	08010b78 	.word	0x08010b78
 8007390:	080105f8 	.word	0x080105f8

08007394 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00e      	beq.n	80073c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7d1b      	ldrb	r3, [r3, #20]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d106      	bne.n	80073ba <tcp_err+0x26>
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <tcp_err+0x38>)
 80073ae:	f640 020d 	movw	r2, #2061	; 0x80d
 80073b2:	4907      	ldr	r1, [pc, #28]	; (80073d0 <tcp_err+0x3c>)
 80073b4:	4807      	ldr	r0, [pc, #28]	; (80073d4 <tcp_err+0x40>)
 80073b6:	f007 fa41 	bl	800e83c <iprintf>
    pcb->errf = err;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	080105b4 	.word	0x080105b4
 80073d0:	08010ba0 	.word	0x08010ba0
 80073d4:	080105f8 	.word	0x080105f8

080073d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <tcp_accept+0x22>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7d1b      	ldrb	r3, [r3, #20]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d104      	bne.n	80073fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	619a      	str	r2, [r3, #24]
  }
}
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <tcp_poll+0x24>
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <tcp_poll+0x50>)
 800741e:	f640 023d 	movw	r2, #2109	; 0x83d
 8007422:	490e      	ldr	r1, [pc, #56]	; (800745c <tcp_poll+0x54>)
 8007424:	480e      	ldr	r0, [pc, #56]	; (8007460 <tcp_poll+0x58>)
 8007426:	f007 fa09 	bl	800e83c <iprintf>
 800742a:	e011      	b.n	8007450 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d106      	bne.n	8007442 <tcp_poll+0x3a>
 8007434:	4b08      	ldr	r3, [pc, #32]	; (8007458 <tcp_poll+0x50>)
 8007436:	f640 023e 	movw	r2, #2110	; 0x83e
 800743a:	490a      	ldr	r1, [pc, #40]	; (8007464 <tcp_poll+0x5c>)
 800743c:	4808      	ldr	r0, [pc, #32]	; (8007460 <tcp_poll+0x58>)
 800743e:	f007 f9fd 	bl	800e83c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	79fa      	ldrb	r2, [r7, #7]
 800744e:	775a      	strb	r2, [r3, #29]
}
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	080105b4 	.word	0x080105b4
 800745c:	08010bc8 	.word	0x08010bc8
 8007460:	080105f8 	.word	0x080105f8
 8007464:	08010be0 	.word	0x08010be0

08007468 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <tcp_pcb_purge+0x1e>
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <tcp_pcb_purge+0x94>)
 8007478:	f640 0251 	movw	r2, #2129	; 0x851
 800747c:	4920      	ldr	r1, [pc, #128]	; (8007500 <tcp_pcb_purge+0x98>)
 800747e:	4821      	ldr	r0, [pc, #132]	; (8007504 <tcp_pcb_purge+0x9c>)
 8007480:	f007 f9dc 	bl	800e83c <iprintf>
 8007484:	e037      	b.n	80074f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7d1b      	ldrb	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d033      	beq.n	80074f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007492:	2b0a      	cmp	r3, #10
 8007494:	d02f      	beq.n	80074f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800749a:	2b01      	cmp	r3, #1
 800749c:	d02b      	beq.n	80074f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe f8d6 	bl	800565c <pbuf_free>
      pcb->refused_data = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f986 	bl	80077d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fcdb 	bl	8006e8c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fcd6 	bl	8006e8c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	080105b4 	.word	0x080105b4
 8007500:	08010c00 	.word	0x08010c00
 8007504:	080105f8 	.word	0x080105f8

08007508 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <tcp_pcb_remove+0x1e>
 8007518:	4b3e      	ldr	r3, [pc, #248]	; (8007614 <tcp_pcb_remove+0x10c>)
 800751a:	f640 0283 	movw	r2, #2179	; 0x883
 800751e:	493e      	ldr	r1, [pc, #248]	; (8007618 <tcp_pcb_remove+0x110>)
 8007520:	483e      	ldr	r0, [pc, #248]	; (800761c <tcp_pcb_remove+0x114>)
 8007522:	f007 f98b 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <tcp_pcb_remove+0x32>
 800752c:	4b39      	ldr	r3, [pc, #228]	; (8007614 <tcp_pcb_remove+0x10c>)
 800752e:	f640 0284 	movw	r2, #2180	; 0x884
 8007532:	493b      	ldr	r1, [pc, #236]	; (8007620 <tcp_pcb_remove+0x118>)
 8007534:	4839      	ldr	r0, [pc, #228]	; (800761c <tcp_pcb_remove+0x114>)
 8007536:	f007 f981 	bl	800e83c <iprintf>

  TCP_RMV(pcblist, pcb);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d105      	bne.n	8007550 <tcp_pcb_remove+0x48>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e013      	b.n	8007578 <tcp_pcb_remove+0x70>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e00c      	b.n	8007572 <tcp_pcb_remove+0x6a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d104      	bne.n	800756c <tcp_pcb_remove+0x64>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	e005      	b.n	8007578 <tcp_pcb_remove+0x70>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1ef      	bne.n	8007558 <tcp_pcb_remove+0x50>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800757e:	6838      	ldr	r0, [r7, #0]
 8007580:	f7ff ff72 	bl	8007468 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	7d1b      	ldrb	r3, [r3, #20]
 8007588:	2b0a      	cmp	r3, #10
 800758a:	d013      	beq.n	80075b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00f      	beq.n	80075b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	8b5b      	ldrh	r3, [r3, #26]
 8007598:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	8b5b      	ldrh	r3, [r3, #26]
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80075ae:	6838      	ldr	r0, [r7, #0]
 80075b0:	f003 fbc2 	bl	800ad38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	7d1b      	ldrb	r3, [r3, #20]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d020      	beq.n	80075fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d006      	beq.n	80075d2 <tcp_pcb_remove+0xca>
 80075c4:	4b13      	ldr	r3, [pc, #76]	; (8007614 <tcp_pcb_remove+0x10c>)
 80075c6:	f640 0293 	movw	r2, #2195	; 0x893
 80075ca:	4916      	ldr	r1, [pc, #88]	; (8007624 <tcp_pcb_remove+0x11c>)
 80075cc:	4813      	ldr	r0, [pc, #76]	; (800761c <tcp_pcb_remove+0x114>)
 80075ce:	f007 f935 	bl	800e83c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <tcp_pcb_remove+0xe0>
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <tcp_pcb_remove+0x10c>)
 80075dc:	f640 0294 	movw	r2, #2196	; 0x894
 80075e0:	4911      	ldr	r1, [pc, #68]	; (8007628 <tcp_pcb_remove+0x120>)
 80075e2:	480e      	ldr	r0, [pc, #56]	; (800761c <tcp_pcb_remove+0x114>)
 80075e4:	f007 f92a 	bl	800e83c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <tcp_pcb_remove+0xf6>
 80075f0:	4b08      	ldr	r3, [pc, #32]	; (8007614 <tcp_pcb_remove+0x10c>)
 80075f2:	f640 0296 	movw	r2, #2198	; 0x896
 80075f6:	490d      	ldr	r1, [pc, #52]	; (800762c <tcp_pcb_remove+0x124>)
 80075f8:	4808      	ldr	r0, [pc, #32]	; (800761c <tcp_pcb_remove+0x114>)
 80075fa:	f007 f91f 	bl	800e83c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	080105b4 	.word	0x080105b4
 8007618:	08010c1c 	.word	0x08010c1c
 800761c:	080105f8 	.word	0x080105f8
 8007620:	08010c38 	.word	0x08010c38
 8007624:	08010c58 	.word	0x08010c58
 8007628:	08010c70 	.word	0x08010c70
 800762c:	08010c8c 	.word	0x08010c8c

08007630 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <tcp_next_iss+0x1c>
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <tcp_next_iss+0x38>)
 8007640:	f640 02af 	movw	r2, #2223	; 0x8af
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <tcp_next_iss+0x3c>)
 8007646:	480a      	ldr	r0, [pc, #40]	; (8007670 <tcp_next_iss+0x40>)
 8007648:	f007 f8f8 	bl	800e83c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <tcp_next_iss+0x44>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <tcp_next_iss+0x48>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4413      	add	r3, r2
 8007656:	4a07      	ldr	r2, [pc, #28]	; (8007674 <tcp_next_iss+0x44>)
 8007658:	6013      	str	r3, [r2, #0]
  return iss;
 800765a:	4b06      	ldr	r3, [pc, #24]	; (8007674 <tcp_next_iss+0x44>)
 800765c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	080105b4 	.word	0x080105b4
 800766c:	08010ca4 	.word	0x08010ca4
 8007670:	080105f8 	.word	0x080105f8
 8007674:	2000000c 	.word	0x2000000c
 8007678:	20008e90 	.word	0x20008e90

0800767c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <tcp_eff_send_mss_netif+0x22>
 8007690:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <tcp_eff_send_mss_netif+0x68>)
 8007692:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007696:	4914      	ldr	r1, [pc, #80]	; (80076e8 <tcp_eff_send_mss_netif+0x6c>)
 8007698:	4814      	ldr	r0, [pc, #80]	; (80076ec <tcp_eff_send_mss_netif+0x70>)
 800769a:	f007 f8cf 	bl	800e83c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	e019      	b.n	80076dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80076ae:	8afb      	ldrh	r3, [r7, #22]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d012      	beq.n	80076da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80076b4:	2328      	movs	r3, #40	; 0x28
 80076b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80076b8:	8afa      	ldrh	r2, [r7, #22]
 80076ba:	8abb      	ldrh	r3, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d904      	bls.n	80076ca <tcp_eff_send_mss_netif+0x4e>
 80076c0:	8afa      	ldrh	r2, [r7, #22]
 80076c2:	8abb      	ldrh	r3, [r7, #20]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	e000      	b.n	80076cc <tcp_eff_send_mss_netif+0x50>
 80076ca:	2300      	movs	r3, #0
 80076cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80076ce:	8a7a      	ldrh	r2, [r7, #18]
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bf28      	it	cs
 80076d6:	4613      	movcs	r3, r2
 80076d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80076da:	89fb      	ldrh	r3, [r7, #14]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	080105b4 	.word	0x080105b4
 80076e8:	08010cc0 	.word	0x08010cc0
 80076ec:	080105f8 	.word	0x080105f8

080076f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d119      	bne.n	8007738 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007706:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800770a:	4910      	ldr	r1, [pc, #64]	; (800774c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800770c:	4810      	ldr	r0, [pc, #64]	; (8007750 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800770e:	f007 f895 	bl	800e83c <iprintf>

  while (pcb != NULL) {
 8007712:	e011      	b.n	8007738 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d108      	bne.n	8007732 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7fe fd20 	bl	800616c <tcp_abort>
      pcb = next;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e002      	b.n	8007738 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1ea      	bne.n	8007714 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	080105b4 	.word	0x080105b4
 800774c:	08010ce8 	.word	0x08010ce8
 8007750:	080105f8 	.word	0x080105f8

08007754 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d02a      	beq.n	80077ba <tcp_netif_ip_addr_changed+0x66>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d026      	beq.n	80077ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800776c:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <tcp_netif_ip_addr_changed+0x70>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff ffbc 	bl	80076f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007778:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <tcp_netif_ip_addr_changed+0x74>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ffb6 	bl	80076f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d017      	beq.n	80077ba <tcp_netif_ip_addr_changed+0x66>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d013      	beq.n	80077ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007792:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <tcp_netif_ip_addr_changed+0x78>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e00c      	b.n	80077b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d103      	bne.n	80077ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1ef      	bne.n	800779a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20008e8c 	.word	0x20008e8c
 80077c8:	20008e98 	.word	0x20008e98
 80077cc:	20008e94 	.word	0x20008e94

080077d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff fb51 	bl	8006e8c <tcp_segs_free>
    pcb->ooseq = NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b08d      	sub	sp, #52	; 0x34
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <tcp_input+0x1c>
 8007808:	4b9b      	ldr	r3, [pc, #620]	; (8007a78 <tcp_input+0x280>)
 800780a:	2283      	movs	r2, #131	; 0x83
 800780c:	499b      	ldr	r1, [pc, #620]	; (8007a7c <tcp_input+0x284>)
 800780e:	489c      	ldr	r0, [pc, #624]	; (8007a80 <tcp_input+0x288>)
 8007810:	f007 f814 	bl	800e83c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	4a9a      	ldr	r2, [pc, #616]	; (8007a84 <tcp_input+0x28c>)
 800781a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	895b      	ldrh	r3, [r3, #10]
 8007820:	2b13      	cmp	r3, #19
 8007822:	f240 83c4 	bls.w	8007fae <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007826:	4b98      	ldr	r3, [pc, #608]	; (8007a88 <tcp_input+0x290>)
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	4a97      	ldr	r2, [pc, #604]	; (8007a88 <tcp_input+0x290>)
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f006 f86b 	bl	800d90c <ip4_addr_isbroadcast_u32>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 83ba 	bne.w	8007fb2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800783e:	4b92      	ldr	r3, [pc, #584]	; (8007a88 <tcp_input+0x290>)
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007846:	2be0      	cmp	r3, #224	; 0xe0
 8007848:	f000 83b3 	beq.w	8007fb2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800784c:	4b8d      	ldr	r3, [pc, #564]	; (8007a84 <tcp_input+0x28c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	899b      	ldrh	r3, [r3, #12]
 8007852:	b29b      	uxth	r3, r3
 8007854:	4618      	mov	r0, r3
 8007856:	f7fc fc17 	bl	8004088 <lwip_htons>
 800785a:	4603      	mov	r3, r0
 800785c:	0b1b      	lsrs	r3, r3, #12
 800785e:	b29b      	uxth	r3, r3
 8007860:	b2db      	uxtb	r3, r3
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007866:	7cbb      	ldrb	r3, [r7, #18]
 8007868:	2b13      	cmp	r3, #19
 800786a:	f240 83a4 	bls.w	8007fb6 <tcp_input+0x7be>
 800786e:	7cbb      	ldrb	r3, [r7, #18]
 8007870:	b29a      	uxth	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	891b      	ldrh	r3, [r3, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	f200 839d 	bhi.w	8007fb6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800787c:	7cbb      	ldrb	r3, [r7, #18]
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b14      	subs	r3, #20
 8007882:	b29a      	uxth	r2, r3
 8007884:	4b81      	ldr	r3, [pc, #516]	; (8007a8c <tcp_input+0x294>)
 8007886:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007888:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <tcp_input+0x298>)
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	895a      	ldrh	r2, [r3, #10]
 8007892:	7cbb      	ldrb	r3, [r7, #18]
 8007894:	b29b      	uxth	r3, r3
 8007896:	429a      	cmp	r2, r3
 8007898:	d309      	bcc.n	80078ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800789a:	4b7c      	ldr	r3, [pc, #496]	; (8007a8c <tcp_input+0x294>)
 800789c:	881a      	ldrh	r2, [r3, #0]
 800789e:	4b7d      	ldr	r3, [pc, #500]	; (8007a94 <tcp_input+0x29c>)
 80078a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80078a2:	7cbb      	ldrb	r3, [r7, #18]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fd fe52 	bl	8005550 <pbuf_remove_header>
 80078ac:	e04e      	b.n	800794c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d105      	bne.n	80078c2 <tcp_input+0xca>
 80078b6:	4b70      	ldr	r3, [pc, #448]	; (8007a78 <tcp_input+0x280>)
 80078b8:	22c2      	movs	r2, #194	; 0xc2
 80078ba:	4977      	ldr	r1, [pc, #476]	; (8007a98 <tcp_input+0x2a0>)
 80078bc:	4870      	ldr	r0, [pc, #448]	; (8007a80 <tcp_input+0x288>)
 80078be:	f006 ffbd 	bl	800e83c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80078c2:	2114      	movs	r1, #20
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fd fe43 	bl	8005550 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	895a      	ldrh	r2, [r3, #10]
 80078ce:	4b71      	ldr	r3, [pc, #452]	; (8007a94 <tcp_input+0x29c>)
 80078d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80078d2:	4b6e      	ldr	r3, [pc, #440]	; (8007a8c <tcp_input+0x294>)
 80078d4:	881a      	ldrh	r2, [r3, #0]
 80078d6:	4b6f      	ldr	r3, [pc, #444]	; (8007a94 <tcp_input+0x29c>)
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80078de:	4b6d      	ldr	r3, [pc, #436]	; (8007a94 <tcp_input+0x29c>)
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fd fe33 	bl	8005550 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	895b      	ldrh	r3, [r3, #10]
 80078f0:	8a3a      	ldrh	r2, [r7, #16]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f200 8361 	bhi.w	8007fba <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4a64      	ldr	r2, [pc, #400]	; (8007a90 <tcp_input+0x298>)
 8007900:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	8a3a      	ldrh	r2, [r7, #16]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd fe20 	bl	8005550 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	891a      	ldrh	r2, [r3, #8]
 8007914:	8a3b      	ldrh	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	b29a      	uxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	895b      	ldrh	r3, [r3, #10]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <tcp_input+0x13a>
 8007926:	4b54      	ldr	r3, [pc, #336]	; (8007a78 <tcp_input+0x280>)
 8007928:	22df      	movs	r2, #223	; 0xdf
 800792a:	495c      	ldr	r1, [pc, #368]	; (8007a9c <tcp_input+0x2a4>)
 800792c:	4854      	ldr	r0, [pc, #336]	; (8007a80 <tcp_input+0x288>)
 800792e:	f006 ff85 	bl	800e83c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	891a      	ldrh	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	891b      	ldrh	r3, [r3, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	d005      	beq.n	800794c <tcp_input+0x154>
 8007940:	4b4d      	ldr	r3, [pc, #308]	; (8007a78 <tcp_input+0x280>)
 8007942:	22e0      	movs	r2, #224	; 0xe0
 8007944:	4956      	ldr	r1, [pc, #344]	; (8007aa0 <tcp_input+0x2a8>)
 8007946:	484e      	ldr	r0, [pc, #312]	; (8007a80 <tcp_input+0x288>)
 8007948:	f006 ff78 	bl	800e83c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800794c:	4b4d      	ldr	r3, [pc, #308]	; (8007a84 <tcp_input+0x28c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	4a4b      	ldr	r2, [pc, #300]	; (8007a84 <tcp_input+0x28c>)
 8007956:	6814      	ldr	r4, [r2, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f7fc fb95 	bl	8004088 <lwip_htons>
 800795e:	4603      	mov	r3, r0
 8007960:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007962:	4b48      	ldr	r3, [pc, #288]	; (8007a84 <tcp_input+0x28c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	885b      	ldrh	r3, [r3, #2]
 8007968:	b29b      	uxth	r3, r3
 800796a:	4a46      	ldr	r2, [pc, #280]	; (8007a84 <tcp_input+0x28c>)
 800796c:	6814      	ldr	r4, [r2, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7fc fb8a 	bl	8004088 <lwip_htons>
 8007974:	4603      	mov	r3, r0
 8007976:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007978:	4b42      	ldr	r3, [pc, #264]	; (8007a84 <tcp_input+0x28c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	4a41      	ldr	r2, [pc, #260]	; (8007a84 <tcp_input+0x28c>)
 8007980:	6814      	ldr	r4, [r2, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fc fb95 	bl	80040b2 <lwip_htonl>
 8007988:	4603      	mov	r3, r0
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	4a45      	ldr	r2, [pc, #276]	; (8007aa4 <tcp_input+0x2ac>)
 8007990:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007992:	4b3c      	ldr	r3, [pc, #240]	; (8007a84 <tcp_input+0x28c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	4a3a      	ldr	r2, [pc, #232]	; (8007a84 <tcp_input+0x28c>)
 800799a:	6814      	ldr	r4, [r2, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f7fc fb88 	bl	80040b2 <lwip_htonl>
 80079a2:	4603      	mov	r3, r0
 80079a4:	60a3      	str	r3, [r4, #8]
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <tcp_input+0x2b0>)
 80079aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80079ac:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <tcp_input+0x28c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	89db      	ldrh	r3, [r3, #14]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4a33      	ldr	r2, [pc, #204]	; (8007a84 <tcp_input+0x28c>)
 80079b6:	6814      	ldr	r4, [r2, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fc fb65 	bl	8004088 <lwip_htons>
 80079be:	4603      	mov	r3, r0
 80079c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80079c2:	4b30      	ldr	r3, [pc, #192]	; (8007a84 <tcp_input+0x28c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	899b      	ldrh	r3, [r3, #12]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fc fb5c 	bl	8004088 <lwip_htons>
 80079d0:	4603      	mov	r3, r0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	4b34      	ldr	r3, [pc, #208]	; (8007aac <tcp_input+0x2b4>)
 80079dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	891a      	ldrh	r2, [r3, #8]
 80079e2:	4b33      	ldr	r3, [pc, #204]	; (8007ab0 <tcp_input+0x2b8>)
 80079e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80079e6:	4b31      	ldr	r3, [pc, #196]	; (8007aac <tcp_input+0x2b4>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00c      	beq.n	8007a0c <tcp_input+0x214>
    tcplen++;
 80079f2:	4b2f      	ldr	r3, [pc, #188]	; (8007ab0 <tcp_input+0x2b8>)
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <tcp_input+0x2b8>)
 80079fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	4b2b      	ldr	r3, [pc, #172]	; (8007ab0 <tcp_input+0x2b8>)
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	f200 82d9 	bhi.w	8007fbe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a10:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <tcp_input+0x2bc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e09d      	b.n	8007b54 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	7d1b      	ldrb	r3, [r3, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d105      	bne.n	8007a2c <tcp_input+0x234>
 8007a20:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <tcp_input+0x280>)
 8007a22:	22fb      	movs	r2, #251	; 0xfb
 8007a24:	4924      	ldr	r1, [pc, #144]	; (8007ab8 <tcp_input+0x2c0>)
 8007a26:	4816      	ldr	r0, [pc, #88]	; (8007a80 <tcp_input+0x288>)
 8007a28:	f006 ff08 	bl	800e83c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	7d1b      	ldrb	r3, [r3, #20]
 8007a30:	2b0a      	cmp	r3, #10
 8007a32:	d105      	bne.n	8007a40 <tcp_input+0x248>
 8007a34:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <tcp_input+0x280>)
 8007a36:	22fc      	movs	r2, #252	; 0xfc
 8007a38:	4920      	ldr	r1, [pc, #128]	; (8007abc <tcp_input+0x2c4>)
 8007a3a:	4811      	ldr	r0, [pc, #68]	; (8007a80 <tcp_input+0x288>)
 8007a3c:	f006 fefe 	bl	800e83c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	7d1b      	ldrb	r3, [r3, #20]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <tcp_input+0x25c>
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <tcp_input+0x280>)
 8007a4a:	22fd      	movs	r2, #253	; 0xfd
 8007a4c:	491c      	ldr	r1, [pc, #112]	; (8007ac0 <tcp_input+0x2c8>)
 8007a4e:	480c      	ldr	r0, [pc, #48]	; (8007a80 <tcp_input+0x288>)
 8007a50:	f006 fef4 	bl	800e83c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	7a1b      	ldrb	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d033      	beq.n	8007ac4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	7a1a      	ldrb	r2, [r3, #8]
 8007a60:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <tcp_input+0x290>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a68:	3301      	adds	r3, #1
 8007a6a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d029      	beq.n	8007ac4 <tcp_input+0x2cc>
      prev = pcb;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	61bb      	str	r3, [r7, #24]
      continue;
 8007a74:	e06b      	b.n	8007b4e <tcp_input+0x356>
 8007a76:	bf00      	nop
 8007a78:	08010d1c 	.word	0x08010d1c
 8007a7c:	08010d50 	.word	0x08010d50
 8007a80:	08010d68 	.word	0x08010d68
 8007a84:	2000051c 	.word	0x2000051c
 8007a88:	20003788 	.word	0x20003788
 8007a8c:	20000520 	.word	0x20000520
 8007a90:	20000524 	.word	0x20000524
 8007a94:	20000522 	.word	0x20000522
 8007a98:	08010d90 	.word	0x08010d90
 8007a9c:	08010da0 	.word	0x08010da0
 8007aa0:	08010dac 	.word	0x08010dac
 8007aa4:	2000052c 	.word	0x2000052c
 8007aa8:	20000530 	.word	0x20000530
 8007aac:	20000538 	.word	0x20000538
 8007ab0:	20000536 	.word	0x20000536
 8007ab4:	20008e8c 	.word	0x20008e8c
 8007ab8:	08010dcc 	.word	0x08010dcc
 8007abc:	08010df4 	.word	0x08010df4
 8007ac0:	08010e20 	.word	0x08010e20
    }

    if (pcb->remote_port == tcphdr->src &&
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	8b1a      	ldrh	r2, [r3, #24]
 8007ac8:	4b94      	ldr	r3, [pc, #592]	; (8007d1c <tcp_input+0x524>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d13a      	bne.n	8007b4a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	8ada      	ldrh	r2, [r3, #22]
 8007ad8:	4b90      	ldr	r3, [pc, #576]	; (8007d1c <tcp_input+0x524>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	885b      	ldrh	r3, [r3, #2]
 8007ade:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d132      	bne.n	8007b4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	4b8d      	ldr	r3, [pc, #564]	; (8007d20 <tcp_input+0x528>)
 8007aea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d12c      	bne.n	8007b4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	4b8a      	ldr	r3, [pc, #552]	; (8007d20 <tcp_input+0x528>)
 8007af6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d126      	bne.n	8007b4a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d106      	bne.n	8007b14 <tcp_input+0x31c>
 8007b06:	4b87      	ldr	r3, [pc, #540]	; (8007d24 <tcp_input+0x52c>)
 8007b08:	f240 120d 	movw	r2, #269	; 0x10d
 8007b0c:	4986      	ldr	r1, [pc, #536]	; (8007d28 <tcp_input+0x530>)
 8007b0e:	4887      	ldr	r0, [pc, #540]	; (8007d2c <tcp_input+0x534>)
 8007b10:	f006 fe94 	bl	800e83c <iprintf>
      if (prev != NULL) {
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <tcp_input+0x338>
        prev->next = pcb->next;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007b22:	4b83      	ldr	r3, [pc, #524]	; (8007d30 <tcp_input+0x538>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007b2a:	4a81      	ldr	r2, [pc, #516]	; (8007d30 <tcp_input+0x538>)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d111      	bne.n	8007b5e <tcp_input+0x366>
 8007b3a:	4b7a      	ldr	r3, [pc, #488]	; (8007d24 <tcp_input+0x52c>)
 8007b3c:	f240 1215 	movw	r2, #277	; 0x115
 8007b40:	497c      	ldr	r1, [pc, #496]	; (8007d34 <tcp_input+0x53c>)
 8007b42:	487a      	ldr	r0, [pc, #488]	; (8007d2c <tcp_input+0x534>)
 8007b44:	f006 fe7a 	bl	800e83c <iprintf>
      break;
 8007b48:	e009      	b.n	8007b5e <tcp_input+0x366>
    }
    prev = pcb;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f47f af5e 	bne.w	8007a18 <tcp_input+0x220>
 8007b5c:	e000      	b.n	8007b60 <tcp_input+0x368>
      break;
 8007b5e:	bf00      	nop
  }

  if (pcb == NULL) {
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f040 8095 	bne.w	8007c92 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b68:	4b73      	ldr	r3, [pc, #460]	; (8007d38 <tcp_input+0x540>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	e03f      	b.n	8007bf0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	7d1b      	ldrb	r3, [r3, #20]
 8007b74:	2b0a      	cmp	r3, #10
 8007b76:	d006      	beq.n	8007b86 <tcp_input+0x38e>
 8007b78:	4b6a      	ldr	r3, [pc, #424]	; (8007d24 <tcp_input+0x52c>)
 8007b7a:	f240 121f 	movw	r2, #287	; 0x11f
 8007b7e:	496f      	ldr	r1, [pc, #444]	; (8007d3c <tcp_input+0x544>)
 8007b80:	486a      	ldr	r0, [pc, #424]	; (8007d2c <tcp_input+0x534>)
 8007b82:	f006 fe5b 	bl	800e83c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	7a1b      	ldrb	r3, [r3, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	7a1a      	ldrb	r2, [r3, #8]
 8007b92:	4b63      	ldr	r3, [pc, #396]	; (8007d20 <tcp_input+0x528>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d122      	bne.n	8007be8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	8b1a      	ldrh	r2, [r3, #24]
 8007ba6:	4b5d      	ldr	r3, [pc, #372]	; (8007d1c <tcp_input+0x524>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d11b      	bne.n	8007bea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	8ada      	ldrh	r2, [r3, #22]
 8007bb6:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <tcp_input+0x524>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	885b      	ldrh	r3, [r3, #2]
 8007bbc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d113      	bne.n	8007bea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	4b56      	ldr	r3, [pc, #344]	; (8007d20 <tcp_input+0x528>)
 8007bc8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d10d      	bne.n	8007bea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b53      	ldr	r3, [pc, #332]	; (8007d20 <tcp_input+0x528>)
 8007bd4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d107      	bne.n	8007bea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007bda:	69f8      	ldr	r0, [r7, #28]
 8007bdc:	f000 fb54 	bl	8008288 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7fd fd3b 	bl	800565c <pbuf_free>
        return;
 8007be6:	e1f0      	b.n	8007fca <tcp_input+0x7d2>
        continue;
 8007be8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1bc      	bne.n	8007b70 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bfa:	4b51      	ldr	r3, [pc, #324]	; (8007d40 <tcp_input+0x548>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	e02a      	b.n	8007c58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	7a1b      	ldrb	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00c      	beq.n	8007c24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	7a1a      	ldrb	r2, [r3, #8]
 8007c0e:	4b44      	ldr	r3, [pc, #272]	; (8007d20 <tcp_input+0x528>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c16:	3301      	adds	r3, #1
 8007c18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d002      	beq.n	8007c24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	61bb      	str	r3, [r7, #24]
        continue;
 8007c22:	e016      	b.n	8007c52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	8ada      	ldrh	r2, [r3, #22]
 8007c28:	4b3c      	ldr	r3, [pc, #240]	; (8007d1c <tcp_input+0x524>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	885b      	ldrh	r3, [r3, #2]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d10c      	bne.n	8007c4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <tcp_input+0x528>)
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d00f      	beq.n	8007c60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00d      	beq.n	8007c62 <tcp_input+0x46a>
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1d1      	bne.n	8007c02 <tcp_input+0x40a>
 8007c5e:	e000      	b.n	8007c62 <tcp_input+0x46a>
            break;
 8007c60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d014      	beq.n	8007c92 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007c76:	4b32      	ldr	r3, [pc, #200]	; (8007d40 <tcp_input+0x548>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c7e:	4a30      	ldr	r2, [pc, #192]	; (8007d40 <tcp_input+0x548>)
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007c84:	6978      	ldr	r0, [r7, #20]
 8007c86:	f000 fa01 	bl	800808c <tcp_listen_input>
      }
      pbuf_free(p);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fd fce6 	bl	800565c <pbuf_free>
      return;
 8007c90:	e19b      	b.n	8007fca <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8160 	beq.w	8007f5a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007c9a:	4b2a      	ldr	r3, [pc, #168]	; (8007d44 <tcp_input+0x54c>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	891a      	ldrh	r2, [r3, #8]
 8007ca4:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <tcp_input+0x54c>)
 8007ca6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007ca8:	4a26      	ldr	r2, [pc, #152]	; (8007d44 <tcp_input+0x54c>)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007cae:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <tcp_input+0x524>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a24      	ldr	r2, [pc, #144]	; (8007d44 <tcp_input+0x54c>)
 8007cb4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <tcp_input+0x550>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007cbc:	4b23      	ldr	r3, [pc, #140]	; (8007d4c <tcp_input+0x554>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007cc2:	4b23      	ldr	r3, [pc, #140]	; (8007d50 <tcp_input+0x558>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007cc8:	4b22      	ldr	r3, [pc, #136]	; (8007d54 <tcp_input+0x55c>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7b5b      	ldrb	r3, [r3, #13]
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d038      	beq.n	8007d5c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007cea:	69f8      	ldr	r0, [r7, #28]
 8007cec:	f7ff f852 	bl	8006d94 <tcp_process_refused_data>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f113 0f0d 	cmn.w	r3, #13
 8007cf6:	d007      	beq.n	8007d08 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d02d      	beq.n	8007d5c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007d00:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <tcp_input+0x560>)
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d029      	beq.n	8007d5c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8104 	bne.w	8007f1a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007d12:	69f8      	ldr	r0, [r7, #28]
 8007d14:	f003 fe16 	bl	800b944 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007d18:	e0ff      	b.n	8007f1a <tcp_input+0x722>
 8007d1a:	bf00      	nop
 8007d1c:	2000051c 	.word	0x2000051c
 8007d20:	20003788 	.word	0x20003788
 8007d24:	08010d1c 	.word	0x08010d1c
 8007d28:	08010e48 	.word	0x08010e48
 8007d2c:	08010d68 	.word	0x08010d68
 8007d30:	20008e8c 	.word	0x20008e8c
 8007d34:	08010e74 	.word	0x08010e74
 8007d38:	20008e9c 	.word	0x20008e9c
 8007d3c:	08010ea0 	.word	0x08010ea0
 8007d40:	20008e94 	.word	0x20008e94
 8007d44:	2000050c 	.word	0x2000050c
 8007d48:	2000053c 	.word	0x2000053c
 8007d4c:	20000539 	.word	0x20000539
 8007d50:	20000534 	.word	0x20000534
 8007d54:	20000538 	.word	0x20000538
 8007d58:	20000536 	.word	0x20000536
      }
    }
    tcp_input_pcb = pcb;
 8007d5c:	4a9c      	ldr	r2, [pc, #624]	; (8007fd0 <tcp_input+0x7d8>)
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007d62:	69f8      	ldr	r0, [r7, #28]
 8007d64:	f000 fb0a 	bl	800837c <tcp_process>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007d6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d70:	f113 0f0d 	cmn.w	r3, #13
 8007d74:	f000 80d3 	beq.w	8007f1e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007d78:	4b96      	ldr	r3, [pc, #600]	; (8007fd4 <tcp_input+0x7dc>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d015      	beq.n	8007db0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <tcp_input+0x5a8>
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d94:	69fa      	ldr	r2, [r7, #28]
 8007d96:	6912      	ldr	r2, [r2, #16]
 8007d98:	f06f 010d 	mvn.w	r1, #13
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	488d      	ldr	r0, [pc, #564]	; (8007fd8 <tcp_input+0x7e0>)
 8007da4:	f7ff fbb0 	bl	8007508 <tcp_pcb_remove>
        tcp_free(pcb);
 8007da8:	69f8      	ldr	r0, [r7, #28]
 8007daa:	f7fd fef7 	bl	8005b9c <tcp_free>
 8007dae:	e0c1      	b.n	8007f34 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007db4:	4b89      	ldr	r3, [pc, #548]	; (8007fdc <tcp_input+0x7e4>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01d      	beq.n	8007df8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007dbc:	4b87      	ldr	r3, [pc, #540]	; (8007fdc <tcp_input+0x7e4>)
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <tcp_input+0x5ea>
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	6910      	ldr	r0, [r2, #16]
 8007dd6:	89fa      	ldrh	r2, [r7, #14]
 8007dd8:	69f9      	ldr	r1, [r7, #28]
 8007dda:	4798      	blx	r3
 8007ddc:	4603      	mov	r3, r0
 8007dde:	74fb      	strb	r3, [r7, #19]
 8007de0:	e001      	b.n	8007de6 <tcp_input+0x5ee>
 8007de2:	2300      	movs	r3, #0
 8007de4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007de6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007dea:	f113 0f0d 	cmn.w	r3, #13
 8007dee:	f000 8098 	beq.w	8007f22 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007df2:	4b7a      	ldr	r3, [pc, #488]	; (8007fdc <tcp_input+0x7e4>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007df8:	69f8      	ldr	r0, [r7, #28]
 8007dfa:	f000 f907 	bl	800800c <tcp_input_delayed_close>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f040 8090 	bne.w	8007f26 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007e06:	4b76      	ldr	r3, [pc, #472]	; (8007fe0 <tcp_input+0x7e8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d041      	beq.n	8007e92 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d006      	beq.n	8007e24 <tcp_input+0x62c>
 8007e16:	4b73      	ldr	r3, [pc, #460]	; (8007fe4 <tcp_input+0x7ec>)
 8007e18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007e1c:	4972      	ldr	r1, [pc, #456]	; (8007fe8 <tcp_input+0x7f0>)
 8007e1e:	4873      	ldr	r0, [pc, #460]	; (8007fec <tcp_input+0x7f4>)
 8007e20:	f006 fd0c 	bl	800e83c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	8b5b      	ldrh	r3, [r3, #26]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d008      	beq.n	8007e42 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007e30:	4b6b      	ldr	r3, [pc, #428]	; (8007fe0 <tcp_input+0x7e8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd fc11 	bl	800565c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007e3a:	69f8      	ldr	r0, [r7, #28]
 8007e3c:	f7fe f996 	bl	800616c <tcp_abort>
            goto aborted;
 8007e40:	e078      	b.n	8007f34 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00c      	beq.n	8007e66 <tcp_input+0x66e>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	6918      	ldr	r0, [r3, #16]
 8007e56:	4b62      	ldr	r3, [pc, #392]	; (8007fe0 <tcp_input+0x7e8>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	69f9      	ldr	r1, [r7, #28]
 8007e5e:	47a0      	blx	r4
 8007e60:	4603      	mov	r3, r0
 8007e62:	74fb      	strb	r3, [r7, #19]
 8007e64:	e008      	b.n	8007e78 <tcp_input+0x680>
 8007e66:	4b5e      	ldr	r3, [pc, #376]	; (8007fe0 <tcp_input+0x7e8>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	f7ff f884 	bl	8006f7c <tcp_recv_null>
 8007e74:	4603      	mov	r3, r0
 8007e76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007e78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e7c:	f113 0f0d 	cmn.w	r3, #13
 8007e80:	d053      	beq.n	8007f2a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007e82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007e8a:	4b55      	ldr	r3, [pc, #340]	; (8007fe0 <tcp_input+0x7e8>)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007e92:	4b50      	ldr	r3, [pc, #320]	; (8007fd4 <tcp_input+0x7dc>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d030      	beq.n	8007f00 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eaa:	7b5a      	ldrb	r2, [r3, #13]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb0:	f042 0220 	orr.w	r2, r2, #32
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	735a      	strb	r2, [r3, #13]
 8007eb8:	e022      	b.n	8007f00 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ec2:	d005      	beq.n	8007ed0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <tcp_input+0x6fa>
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	6918      	ldr	r0, [r3, #16]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	69f9      	ldr	r1, [r7, #28]
 8007eea:	47a0      	blx	r4
 8007eec:	4603      	mov	r3, r0
 8007eee:	74fb      	strb	r3, [r7, #19]
 8007ef0:	e001      	b.n	8007ef6 <tcp_input+0x6fe>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007ef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007efa:	f113 0f0d 	cmn.w	r3, #13
 8007efe:	d016      	beq.n	8007f2e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007f00:	4b33      	ldr	r3, [pc, #204]	; (8007fd0 <tcp_input+0x7d8>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007f06:	69f8      	ldr	r0, [r7, #28]
 8007f08:	f000 f880 	bl	800800c <tcp_input_delayed_close>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007f12:	69f8      	ldr	r0, [r7, #28]
 8007f14:	f002 ff10 	bl	800ad38 <tcp_output>
 8007f18:	e00c      	b.n	8007f34 <tcp_input+0x73c>
        goto aborted;
 8007f1a:	bf00      	nop
 8007f1c:	e00a      	b.n	8007f34 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007f1e:	bf00      	nop
 8007f20:	e008      	b.n	8007f34 <tcp_input+0x73c>
              goto aborted;
 8007f22:	bf00      	nop
 8007f24:	e006      	b.n	8007f34 <tcp_input+0x73c>
          goto aborted;
 8007f26:	bf00      	nop
 8007f28:	e004      	b.n	8007f34 <tcp_input+0x73c>
            goto aborted;
 8007f2a:	bf00      	nop
 8007f2c:	e002      	b.n	8007f34 <tcp_input+0x73c>
              goto aborted;
 8007f2e:	bf00      	nop
 8007f30:	e000      	b.n	8007f34 <tcp_input+0x73c>
          goto aborted;
 8007f32:	bf00      	nop
    tcp_input_pcb = NULL;
 8007f34:	4b26      	ldr	r3, [pc, #152]	; (8007fd0 <tcp_input+0x7d8>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007f3a:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <tcp_input+0x7e8>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007f40:	4b2b      	ldr	r3, [pc, #172]	; (8007ff0 <tcp_input+0x7f8>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d03f      	beq.n	8007fc8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007f48:	4b29      	ldr	r3, [pc, #164]	; (8007ff0 <tcp_input+0x7f8>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fd fb85 	bl	800565c <pbuf_free>
      inseg.p = NULL;
 8007f52:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <tcp_input+0x7f8>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007f58:	e036      	b.n	8007fc8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007f5a:	4b26      	ldr	r3, [pc, #152]	; (8007ff4 <tcp_input+0x7fc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	899b      	ldrh	r3, [r3, #12]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fc f890 	bl	8004088 <lwip_htons>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d118      	bne.n	8007fa6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f74:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <tcp_input+0x800>)
 8007f76:	6819      	ldr	r1, [r3, #0]
 8007f78:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <tcp_input+0x804>)
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4b20      	ldr	r3, [pc, #128]	; (8008000 <tcp_input+0x808>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <tcp_input+0x7fc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f88:	885b      	ldrh	r3, [r3, #2]
 8007f8a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f8c:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <tcp_input+0x7fc>)
 8007f8e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f90:	8812      	ldrh	r2, [r2, #0]
 8007f92:	b292      	uxth	r2, r2
 8007f94:	9202      	str	r2, [sp, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <tcp_input+0x80c>)
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <tcp_input+0x810>)
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	f003 fc7d 	bl	800b8a0 <tcp_rst>
    pbuf_free(p);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fd fb58 	bl	800565c <pbuf_free>
  return;
 8007fac:	e00c      	b.n	8007fc8 <tcp_input+0x7d0>
    goto dropped;
 8007fae:	bf00      	nop
 8007fb0:	e006      	b.n	8007fc0 <tcp_input+0x7c8>
    goto dropped;
 8007fb2:	bf00      	nop
 8007fb4:	e004      	b.n	8007fc0 <tcp_input+0x7c8>
    goto dropped;
 8007fb6:	bf00      	nop
 8007fb8:	e002      	b.n	8007fc0 <tcp_input+0x7c8>
      goto dropped;
 8007fba:	bf00      	nop
 8007fbc:	e000      	b.n	8007fc0 <tcp_input+0x7c8>
      goto dropped;
 8007fbe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fd fb4b 	bl	800565c <pbuf_free>
 8007fc6:	e000      	b.n	8007fca <tcp_input+0x7d2>
  return;
 8007fc8:	bf00      	nop
}
 8007fca:	3724      	adds	r7, #36	; 0x24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}
 8007fd0:	20008ea0 	.word	0x20008ea0
 8007fd4:	20000539 	.word	0x20000539
 8007fd8:	20008e8c 	.word	0x20008e8c
 8007fdc:	20000534 	.word	0x20000534
 8007fe0:	2000053c 	.word	0x2000053c
 8007fe4:	08010d1c 	.word	0x08010d1c
 8007fe8:	08010ed0 	.word	0x08010ed0
 8007fec:	08010d68 	.word	0x08010d68
 8007ff0:	2000050c 	.word	0x2000050c
 8007ff4:	2000051c 	.word	0x2000051c
 8007ff8:	20000530 	.word	0x20000530
 8007ffc:	20000536 	.word	0x20000536
 8008000:	2000052c 	.word	0x2000052c
 8008004:	20003798 	.word	0x20003798
 8008008:	2000379c 	.word	0x2000379c

0800800c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <tcp_input_delayed_close+0x1c>
 800801a:	4b17      	ldr	r3, [pc, #92]	; (8008078 <tcp_input_delayed_close+0x6c>)
 800801c:	f240 225a 	movw	r2, #602	; 0x25a
 8008020:	4916      	ldr	r1, [pc, #88]	; (800807c <tcp_input_delayed_close+0x70>)
 8008022:	4817      	ldr	r0, [pc, #92]	; (8008080 <tcp_input_delayed_close+0x74>)
 8008024:	f006 fc0a 	bl	800e83c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008028:	4b16      	ldr	r3, [pc, #88]	; (8008084 <tcp_input_delayed_close+0x78>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01c      	beq.n	800806e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8b5b      	ldrh	r3, [r3, #26]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10d      	bne.n	800805c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <tcp_input_delayed_close+0x50>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6912      	ldr	r2, [r2, #16]
 8008054:	f06f 010e 	mvn.w	r1, #14
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	480a      	ldr	r0, [pc, #40]	; (8008088 <tcp_input_delayed_close+0x7c>)
 8008060:	f7ff fa52 	bl	8007508 <tcp_pcb_remove>
    tcp_free(pcb);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fd fd99 	bl	8005b9c <tcp_free>
    return 1;
 800806a:	2301      	movs	r3, #1
 800806c:	e000      	b.n	8008070 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	08010d1c 	.word	0x08010d1c
 800807c:	08010eec 	.word	0x08010eec
 8008080:	08010d68 	.word	0x08010d68
 8008084:	20000539 	.word	0x20000539
 8008088:	20008e8c 	.word	0x20008e8c

0800808c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b08b      	sub	sp, #44	; 0x2c
 8008090:	af04      	add	r7, sp, #16
 8008092:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008094:	4b6f      	ldr	r3, [pc, #444]	; (8008254 <tcp_listen_input+0x1c8>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 80d2 	bne.w	8008246 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <tcp_listen_input+0x2a>
 80080a8:	4b6b      	ldr	r3, [pc, #428]	; (8008258 <tcp_listen_input+0x1cc>)
 80080aa:	f240 2281 	movw	r2, #641	; 0x281
 80080ae:	496b      	ldr	r1, [pc, #428]	; (800825c <tcp_listen_input+0x1d0>)
 80080b0:	486b      	ldr	r0, [pc, #428]	; (8008260 <tcp_listen_input+0x1d4>)
 80080b2:	f006 fbc3 	bl	800e83c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80080b6:	4b67      	ldr	r3, [pc, #412]	; (8008254 <tcp_listen_input+0x1c8>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d019      	beq.n	80080f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080c2:	4b68      	ldr	r3, [pc, #416]	; (8008264 <tcp_listen_input+0x1d8>)
 80080c4:	6819      	ldr	r1, [r3, #0]
 80080c6:	4b68      	ldr	r3, [pc, #416]	; (8008268 <tcp_listen_input+0x1dc>)
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	4b67      	ldr	r3, [pc, #412]	; (800826c <tcp_listen_input+0x1e0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080d2:	4b67      	ldr	r3, [pc, #412]	; (8008270 <tcp_listen_input+0x1e4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080d6:	885b      	ldrh	r3, [r3, #2]
 80080d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080da:	4a65      	ldr	r2, [pc, #404]	; (8008270 <tcp_listen_input+0x1e4>)
 80080dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080de:	8812      	ldrh	r2, [r2, #0]
 80080e0:	b292      	uxth	r2, r2
 80080e2:	9202      	str	r2, [sp, #8]
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	4b63      	ldr	r3, [pc, #396]	; (8008274 <tcp_listen_input+0x1e8>)
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	4b63      	ldr	r3, [pc, #396]	; (8008278 <tcp_listen_input+0x1ec>)
 80080ec:	4602      	mov	r2, r0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f003 fbd6 	bl	800b8a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80080f4:	e0a9      	b.n	800824a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80080f6:	4b57      	ldr	r3, [pc, #348]	; (8008254 <tcp_listen_input+0x1c8>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80a3 	beq.w	800824a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7d5b      	ldrb	r3, [r3, #21]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff f85b 	bl	80071c4 <tcp_alloc>
 800810e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d111      	bne.n	800813a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <tcp_listen_input+0xa8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6910      	ldr	r0, [r2, #16]
 8008126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812a:	2100      	movs	r1, #0
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	73bb      	strb	r3, [r7, #14]
      return;
 8008132:	e08b      	b.n	800824c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008134:	23f0      	movs	r3, #240	; 0xf0
 8008136:	73bb      	strb	r3, [r7, #14]
      return;
 8008138:	e088      	b.n	800824c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800813a:	4b50      	ldr	r3, [pc, #320]	; (800827c <tcp_listen_input+0x1f0>)
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008142:	4b4e      	ldr	r3, [pc, #312]	; (800827c <tcp_listen_input+0x1f0>)
 8008144:	691a      	ldr	r2, [r3, #16]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8ada      	ldrh	r2, [r3, #22]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008152:	4b47      	ldr	r3, [pc, #284]	; (8008270 <tcp_listen_input+0x1e4>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29a      	uxth	r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2203      	movs	r2, #3
 8008162:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008164:	4b41      	ldr	r3, [pc, #260]	; (800826c <tcp_listen_input+0x1e0>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008176:	6978      	ldr	r0, [r7, #20]
 8008178:	f7ff fa5a 	bl	8007630 <tcp_next_iss>
 800817c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008196:	4b35      	ldr	r3, [pc, #212]	; (800826c <tcp_listen_input+0x1e0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	1e5a      	subs	r2, r3, #1
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7a5b      	ldrb	r3, [r3, #9]
 80081b2:	f003 030c 	and.w	r3, r3, #12
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7a1a      	ldrb	r2, [r3, #8]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80081c4:	4b2e      	ldr	r3, [pc, #184]	; (8008280 <tcp_listen_input+0x1f4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	60da      	str	r2, [r3, #12]
 80081cc:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <tcp_listen_input+0x1f4>)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	f003 fd27 	bl	800bc24 <tcp_timer_needed>
 80081d6:	4b2b      	ldr	r3, [pc, #172]	; (8008284 <tcp_listen_input+0x1f8>)
 80081d8:	2201      	movs	r2, #1
 80081da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80081dc:	6978      	ldr	r0, [r7, #20]
 80081de:	f001 fd8d 	bl	8009cfc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80081e2:	4b23      	ldr	r3, [pc, #140]	; (8008270 <tcp_listen_input+0x1e4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	89db      	ldrh	r3, [r3, #14]
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	3304      	adds	r3, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f005 f8eb 	bl	800d3e0 <ip4_route>
 800820a:	4601      	mov	r1, r0
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	3304      	adds	r3, #4
 8008210:	461a      	mov	r2, r3
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff fa32 	bl	800767c <tcp_eff_send_mss_netif>
 8008218:	4603      	mov	r3, r0
 800821a:	461a      	mov	r2, r3
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008220:	2112      	movs	r1, #18
 8008222:	6978      	ldr	r0, [r7, #20]
 8008224:	f002 fc9a 	bl	800ab5c <tcp_enqueue_flags>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800822c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d004      	beq.n	800823e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008234:	2100      	movs	r1, #0
 8008236:	6978      	ldr	r0, [r7, #20]
 8008238:	f7fd feda 	bl	8005ff0 <tcp_abandon>
      return;
 800823c:	e006      	b.n	800824c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800823e:	6978      	ldr	r0, [r7, #20]
 8008240:	f002 fd7a 	bl	800ad38 <tcp_output>
  return;
 8008244:	e001      	b.n	800824a <tcp_listen_input+0x1be>
    return;
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <tcp_listen_input+0x1c0>
  return;
 800824a:	bf00      	nop
}
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	bd90      	pop	{r4, r7, pc}
 8008252:	bf00      	nop
 8008254:	20000538 	.word	0x20000538
 8008258:	08010d1c 	.word	0x08010d1c
 800825c:	08010f14 	.word	0x08010f14
 8008260:	08010d68 	.word	0x08010d68
 8008264:	20000530 	.word	0x20000530
 8008268:	20000536 	.word	0x20000536
 800826c:	2000052c 	.word	0x2000052c
 8008270:	2000051c 	.word	0x2000051c
 8008274:	20003798 	.word	0x20003798
 8008278:	2000379c 	.word	0x2000379c
 800827c:	20003788 	.word	0x20003788
 8008280:	20008e8c 	.word	0x20008e8c
 8008284:	20008e88 	.word	0x20008e88

08008288 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af04      	add	r7, sp, #16
 800828e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008290:	4b2f      	ldr	r3, [pc, #188]	; (8008350 <tcp_timewait_input+0xc8>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d153      	bne.n	8008344 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <tcp_timewait_input+0x28>
 80082a2:	4b2c      	ldr	r3, [pc, #176]	; (8008354 <tcp_timewait_input+0xcc>)
 80082a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80082a8:	492b      	ldr	r1, [pc, #172]	; (8008358 <tcp_timewait_input+0xd0>)
 80082aa:	482c      	ldr	r0, [pc, #176]	; (800835c <tcp_timewait_input+0xd4>)
 80082ac:	f006 fac6 	bl	800e83c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80082b0:	4b27      	ldr	r3, [pc, #156]	; (8008350 <tcp_timewait_input+0xc8>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02a      	beq.n	8008312 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80082bc:	4b28      	ldr	r3, [pc, #160]	; (8008360 <tcp_timewait_input+0xd8>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	db2d      	blt.n	8008326 <tcp_timewait_input+0x9e>
 80082ca:	4b25      	ldr	r3, [pc, #148]	; (8008360 <tcp_timewait_input+0xd8>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80082d6:	440b      	add	r3, r1
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	dc23      	bgt.n	8008326 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082de:	4b21      	ldr	r3, [pc, #132]	; (8008364 <tcp_timewait_input+0xdc>)
 80082e0:	6819      	ldr	r1, [r3, #0]
 80082e2:	4b21      	ldr	r3, [pc, #132]	; (8008368 <tcp_timewait_input+0xe0>)
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <tcp_timewait_input+0xd8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082ee:	4b1f      	ldr	r3, [pc, #124]	; (800836c <tcp_timewait_input+0xe4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082f2:	885b      	ldrh	r3, [r3, #2]
 80082f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082f6:	4a1d      	ldr	r2, [pc, #116]	; (800836c <tcp_timewait_input+0xe4>)
 80082f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082fa:	8812      	ldrh	r2, [r2, #0]
 80082fc:	b292      	uxth	r2, r2
 80082fe:	9202      	str	r2, [sp, #8]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	4b1b      	ldr	r3, [pc, #108]	; (8008370 <tcp_timewait_input+0xe8>)
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <tcp_timewait_input+0xec>)
 8008308:	4602      	mov	r2, r0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f003 fac8 	bl	800b8a0 <tcp_rst>
      return;
 8008310:	e01b      	b.n	800834a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008312:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <tcp_timewait_input+0xc8>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800831e:	4b16      	ldr	r3, [pc, #88]	; (8008378 <tcp_timewait_input+0xf0>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008326:	4b10      	ldr	r3, [pc, #64]	; (8008368 <tcp_timewait_input+0xe0>)
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8b5b      	ldrh	r3, [r3, #26]
 8008332:	f043 0302 	orr.w	r3, r3, #2
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f002 fcfb 	bl	800ad38 <tcp_output>
  }
  return;
 8008342:	e001      	b.n	8008348 <tcp_timewait_input+0xc0>
    return;
 8008344:	bf00      	nop
 8008346:	e000      	b.n	800834a <tcp_timewait_input+0xc2>
  return;
 8008348:	bf00      	nop
}
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000538 	.word	0x20000538
 8008354:	08010d1c 	.word	0x08010d1c
 8008358:	08010f34 	.word	0x08010f34
 800835c:	08010d68 	.word	0x08010d68
 8008360:	2000052c 	.word	0x2000052c
 8008364:	20000530 	.word	0x20000530
 8008368:	20000536 	.word	0x20000536
 800836c:	2000051c 	.word	0x2000051c
 8008370:	20003798 	.word	0x20003798
 8008374:	2000379c 	.word	0x2000379c
 8008378:	20008e90 	.word	0x20008e90

0800837c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b08d      	sub	sp, #52	; 0x34
 8008380:	af04      	add	r7, sp, #16
 8008382:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <tcp_process+0x24>
 8008392:	4ba5      	ldr	r3, [pc, #660]	; (8008628 <tcp_process+0x2ac>)
 8008394:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008398:	49a4      	ldr	r1, [pc, #656]	; (800862c <tcp_process+0x2b0>)
 800839a:	48a5      	ldr	r0, [pc, #660]	; (8008630 <tcp_process+0x2b4>)
 800839c:	f006 fa4e 	bl	800e83c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80083a0:	4ba4      	ldr	r3, [pc, #656]	; (8008634 <tcp_process+0x2b8>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d04e      	beq.n	800844a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7d1b      	ldrb	r3, [r3, #20]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d108      	bne.n	80083c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083b8:	4b9f      	ldr	r3, [pc, #636]	; (8008638 <tcp_process+0x2bc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d123      	bne.n	8008408 <tcp_process+0x8c>
        acceptable = 1;
 80083c0:	2301      	movs	r3, #1
 80083c2:	76fb      	strb	r3, [r7, #27]
 80083c4:	e020      	b.n	8008408 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ca:	4b9c      	ldr	r3, [pc, #624]	; (800863c <tcp_process+0x2c0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d102      	bne.n	80083d8 <tcp_process+0x5c>
        acceptable = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	76fb      	strb	r3, [r7, #27]
 80083d6:	e017      	b.n	8008408 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80083d8:	4b98      	ldr	r3, [pc, #608]	; (800863c <tcp_process+0x2c0>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	db10      	blt.n	8008408 <tcp_process+0x8c>
 80083e6:	4b95      	ldr	r3, [pc, #596]	; (800863c <tcp_process+0x2c0>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80083f2:	440b      	add	r3, r1
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dc06      	bgt.n	8008408 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8b5b      	ldrh	r3, [r3, #26]
 80083fe:	f043 0302 	orr.w	r3, r3, #2
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008408:	7efb      	ldrb	r3, [r7, #27]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01b      	beq.n	8008446 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7d1b      	ldrb	r3, [r3, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <tcp_process+0xa8>
 8008416:	4b84      	ldr	r3, [pc, #528]	; (8008628 <tcp_process+0x2ac>)
 8008418:	f44f 724e 	mov.w	r2, #824	; 0x338
 800841c:	4988      	ldr	r1, [pc, #544]	; (8008640 <tcp_process+0x2c4>)
 800841e:	4884      	ldr	r0, [pc, #528]	; (8008630 <tcp_process+0x2b4>)
 8008420:	f006 fa0c 	bl	800e83c <iprintf>
      recv_flags |= TF_RESET;
 8008424:	4b87      	ldr	r3, [pc, #540]	; (8008644 <tcp_process+0x2c8>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f043 0308 	orr.w	r3, r3, #8
 800842c:	b2da      	uxtb	r2, r3
 800842e:	4b85      	ldr	r3, [pc, #532]	; (8008644 <tcp_process+0x2c8>)
 8008430:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8b5b      	ldrh	r3, [r3, #26]
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008440:	f06f 030d 	mvn.w	r3, #13
 8008444:	e37a      	b.n	8008b3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	e378      	b.n	8008b3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800844a:	4b7a      	ldr	r3, [pc, #488]	; (8008634 <tcp_process+0x2b8>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d010      	beq.n	8008478 <tcp_process+0xfc>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7d1b      	ldrb	r3, [r3, #20]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d00c      	beq.n	8008478 <tcp_process+0xfc>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	7d1b      	ldrb	r3, [r3, #20]
 8008462:	2b03      	cmp	r3, #3
 8008464:	d008      	beq.n	8008478 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8b5b      	ldrh	r3, [r3, #26]
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	e361      	b.n	8008b3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	8b5b      	ldrh	r3, [r3, #26]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d103      	bne.n	800848c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008484:	4b70      	ldr	r3, [pc, #448]	; (8008648 <tcp_process+0x2cc>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 fc2d 	bl	8009cfc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	7d1b      	ldrb	r3, [r3, #20]
 80084a6:	3b02      	subs	r3, #2
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	f200 8337 	bhi.w	8008b1c <tcp_process+0x7a0>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <tcp_process+0x138>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084d5 	.word	0x080084d5
 80084b8:	08008705 	.word	0x08008705
 80084bc:	0800887d 	.word	0x0800887d
 80084c0:	080088a7 	.word	0x080088a7
 80084c4:	080089cb 	.word	0x080089cb
 80084c8:	0800887d 	.word	0x0800887d
 80084cc:	08008a57 	.word	0x08008a57
 80084d0:	08008ae7 	.word	0x08008ae7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80084d4:	4b57      	ldr	r3, [pc, #348]	; (8008634 <tcp_process+0x2b8>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 0310 	and.w	r3, r3, #16
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80e4 	beq.w	80086aa <tcp_process+0x32e>
 80084e2:	4b54      	ldr	r3, [pc, #336]	; (8008634 <tcp_process+0x2b8>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80dd 	beq.w	80086aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	4b50      	ldr	r3, [pc, #320]	; (8008638 <tcp_process+0x2bc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	f040 80d5 	bne.w	80086aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008500:	4b4e      	ldr	r3, [pc, #312]	; (800863c <tcp_process+0x2c0>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008512:	4b49      	ldr	r3, [pc, #292]	; (8008638 <tcp_process+0x2bc>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800851a:	4b4c      	ldr	r3, [pc, #304]	; (800864c <tcp_process+0x2d0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	89db      	ldrh	r3, [r3, #14]
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008534:	4b41      	ldr	r3, [pc, #260]	; (800863c <tcp_process+0x2c0>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2204      	movs	r2, #4
 8008542:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	4618      	mov	r0, r3
 800854e:	f004 ff47 	bl	800d3e0 <ip4_route>
 8008552:	4601      	mov	r1, r0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3304      	adds	r3, #4
 8008558:	461a      	mov	r2, r3
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff f88e 	bl	800767c <tcp_eff_send_mss_netif>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800856c:	009a      	lsls	r2, r3, #2
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	f241 111c 	movw	r1, #4380	; 0x111c
 8008578:	428b      	cmp	r3, r1
 800857a:	bf38      	it	cc
 800857c:	460b      	movcc	r3, r1
 800857e:	429a      	cmp	r2, r3
 8008580:	d204      	bcs.n	800858c <tcp_process+0x210>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	b29b      	uxth	r3, r3
 800858a:	e00d      	b.n	80085a8 <tcp_process+0x22c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	f241 121c 	movw	r2, #4380	; 0x111c
 8008596:	4293      	cmp	r3, r2
 8008598:	d904      	bls.n	80085a4 <tcp_process+0x228>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	e001      	b.n	80085a8 <tcp_process+0x22c>
 80085a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <tcp_process+0x24a>
 80085b8:	4b1b      	ldr	r3, [pc, #108]	; (8008628 <tcp_process+0x2ac>)
 80085ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80085be:	4924      	ldr	r1, [pc, #144]	; (8008650 <tcp_process+0x2d4>)
 80085c0:	481b      	ldr	r0, [pc, #108]	; (8008630 <tcp_process+0x2b4>)
 80085c2:	f006 f93b 	bl	800e83c <iprintf>
        --pcb->snd_queuelen;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d111      	bne.n	8008606 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <tcp_process+0x280>
 80085ee:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <tcp_process+0x2ac>)
 80085f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80085f4:	4917      	ldr	r1, [pc, #92]	; (8008654 <tcp_process+0x2d8>)
 80085f6:	480e      	ldr	r0, [pc, #56]	; (8008630 <tcp_process+0x2b4>)
 80085f8:	f006 f920 	bl	800e83c <iprintf>
          pcb->unsent = rseg->next;
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	66da      	str	r2, [r3, #108]	; 0x6c
 8008604:	e003      	b.n	800860e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800860e:	69f8      	ldr	r0, [r7, #28]
 8008610:	f7fe fc51 	bl	8006eb6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11d      	bne.n	8008658 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008622:	861a      	strh	r2, [r3, #48]	; 0x30
 8008624:	e01f      	b.n	8008666 <tcp_process+0x2ea>
 8008626:	bf00      	nop
 8008628:	08010d1c 	.word	0x08010d1c
 800862c:	08010f54 	.word	0x08010f54
 8008630:	08010d68 	.word	0x08010d68
 8008634:	20000538 	.word	0x20000538
 8008638:	20000530 	.word	0x20000530
 800863c:	2000052c 	.word	0x2000052c
 8008640:	08010f70 	.word	0x08010f70
 8008644:	20000539 	.word	0x20000539
 8008648:	20008e90 	.word	0x20008e90
 800864c:	2000051c 	.word	0x2000051c
 8008650:	08010f90 	.word	0x08010f90
 8008654:	08010fa8 	.word	0x08010fa8
        } else {
          pcb->rtime = 0;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <tcp_process+0x30a>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6910      	ldr	r0, [r2, #16]
 800867a:	2200      	movs	r2, #0
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	4798      	blx	r3
 8008680:	4603      	mov	r3, r0
 8008682:	76bb      	strb	r3, [r7, #26]
 8008684:	e001      	b.n	800868a <tcp_process+0x30e>
 8008686:	2300      	movs	r3, #0
 8008688:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800868a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800868e:	f113 0f0d 	cmn.w	r3, #13
 8008692:	d102      	bne.n	800869a <tcp_process+0x31e>
          return ERR_ABRT;
 8008694:	f06f 030c 	mvn.w	r3, #12
 8008698:	e250      	b.n	8008b3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8b5b      	ldrh	r3, [r3, #26]
 800869e:	f043 0302 	orr.w	r3, r3, #2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80086a8:	e23a      	b.n	8008b20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80086aa:	4b9d      	ldr	r3, [pc, #628]	; (8008920 <tcp_process+0x5a4>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 0310 	and.w	r3, r3, #16
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8234 	beq.w	8008b20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086b8:	4b9a      	ldr	r3, [pc, #616]	; (8008924 <tcp_process+0x5a8>)
 80086ba:	6819      	ldr	r1, [r3, #0]
 80086bc:	4b9a      	ldr	r3, [pc, #616]	; (8008928 <tcp_process+0x5ac>)
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b9a      	ldr	r3, [pc, #616]	; (800892c <tcp_process+0x5b0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086c8:	4b99      	ldr	r3, [pc, #612]	; (8008930 <tcp_process+0x5b4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086d0:	4a97      	ldr	r2, [pc, #604]	; (8008930 <tcp_process+0x5b4>)
 80086d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086d4:	8812      	ldrh	r2, [r2, #0]
 80086d6:	b292      	uxth	r2, r2
 80086d8:	9202      	str	r2, [sp, #8]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	4b95      	ldr	r3, [pc, #596]	; (8008934 <tcp_process+0x5b8>)
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4b95      	ldr	r3, [pc, #596]	; (8008938 <tcp_process+0x5bc>)
 80086e2:	4602      	mov	r2, r0
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f003 f8db 	bl	800b8a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086f0:	2b05      	cmp	r3, #5
 80086f2:	f200 8215 	bhi.w	8008b20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f002 fea5 	bl	800b44c <tcp_rexmit_rto>
      break;
 8008702:	e20d      	b.n	8008b20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008704:	4b86      	ldr	r3, [pc, #536]	; (8008920 <tcp_process+0x5a4>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80a1 	beq.w	8008854 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008712:	4b84      	ldr	r3, [pc, #528]	; (8008924 <tcp_process+0x5a8>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	db7e      	blt.n	8008820 <tcp_process+0x4a4>
 8008722:	4b80      	ldr	r3, [pc, #512]	; (8008924 <tcp_process+0x5a8>)
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	dc77      	bgt.n	8008820 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2204      	movs	r2, #4
 8008734:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800873e:	23fa      	movs	r3, #250	; 0xfa
 8008740:	76bb      	strb	r3, [r7, #26]
 8008742:	e01d      	b.n	8008780 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <tcp_process+0x3e0>
 800874e:	4b7b      	ldr	r3, [pc, #492]	; (800893c <tcp_process+0x5c0>)
 8008750:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008754:	497a      	ldr	r1, [pc, #488]	; (8008940 <tcp_process+0x5c4>)
 8008756:	487b      	ldr	r0, [pc, #492]	; (8008944 <tcp_process+0x5c8>)
 8008758:	f006 f870 	bl	800e83c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <tcp_process+0x400>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6910      	ldr	r0, [r2, #16]
 8008770:	2200      	movs	r2, #0
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4798      	blx	r3
 8008776:	4603      	mov	r3, r0
 8008778:	76bb      	strb	r3, [r7, #26]
 800877a:	e001      	b.n	8008780 <tcp_process+0x404>
 800877c:	23f0      	movs	r3, #240	; 0xf0
 800877e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008780:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008788:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800878c:	f113 0f0d 	cmn.w	r3, #13
 8008790:	d002      	beq.n	8008798 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fd fcea 	bl	800616c <tcp_abort>
            }
            return ERR_ABRT;
 8008798:	f06f 030c 	mvn.w	r3, #12
 800879c:	e1ce      	b.n	8008b3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fae0 	bl	8008d64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80087a4:	4b68      	ldr	r3, [pc, #416]	; (8008948 <tcp_process+0x5cc>)
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <tcp_process+0x43c>
            recv_acked--;
 80087ac:	4b66      	ldr	r3, [pc, #408]	; (8008948 <tcp_process+0x5cc>)
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	4b64      	ldr	r3, [pc, #400]	; (8008948 <tcp_process+0x5cc>)
 80087b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087bc:	009a      	lsls	r2, r3, #2
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80087c8:	428b      	cmp	r3, r1
 80087ca:	bf38      	it	cc
 80087cc:	460b      	movcc	r3, r1
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d204      	bcs.n	80087dc <tcp_process+0x460>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	b29b      	uxth	r3, r3
 80087da:	e00d      	b.n	80087f8 <tcp_process+0x47c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d904      	bls.n	80087f4 <tcp_process+0x478>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	e001      	b.n	80087f8 <tcp_process+0x47c>
 80087f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80087fe:	4b53      	ldr	r3, [pc, #332]	; (800894c <tcp_process+0x5d0>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d037      	beq.n	800887a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8b5b      	ldrh	r3, [r3, #26]
 800880e:	f043 0302 	orr.w	r3, r3, #2
 8008812:	b29a      	uxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2207      	movs	r2, #7
 800881c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800881e:	e02c      	b.n	800887a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008820:	4b40      	ldr	r3, [pc, #256]	; (8008924 <tcp_process+0x5a8>)
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	4b40      	ldr	r3, [pc, #256]	; (8008928 <tcp_process+0x5ac>)
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	4b40      	ldr	r3, [pc, #256]	; (800892c <tcp_process+0x5b0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008830:	4b3f      	ldr	r3, [pc, #252]	; (8008930 <tcp_process+0x5b4>)
 8008832:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008838:	4a3d      	ldr	r2, [pc, #244]	; (8008930 <tcp_process+0x5b4>)
 800883a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800883c:	8812      	ldrh	r2, [r2, #0]
 800883e:	b292      	uxth	r2, r2
 8008840:	9202      	str	r2, [sp, #8]
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	4b3b      	ldr	r3, [pc, #236]	; (8008934 <tcp_process+0x5b8>)
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4b3b      	ldr	r3, [pc, #236]	; (8008938 <tcp_process+0x5bc>)
 800884a:	4602      	mov	r2, r0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f003 f827 	bl	800b8a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008852:	e167      	b.n	8008b24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008854:	4b32      	ldr	r3, [pc, #200]	; (8008920 <tcp_process+0x5a4>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8161 	beq.w	8008b24 <tcp_process+0x7a8>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	1e5a      	subs	r2, r3, #1
 8008868:	4b30      	ldr	r3, [pc, #192]	; (800892c <tcp_process+0x5b0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	f040 8159 	bne.w	8008b24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f002 fe0c 	bl	800b490 <tcp_rexmit>
      break;
 8008878:	e154      	b.n	8008b24 <tcp_process+0x7a8>
 800887a:	e153      	b.n	8008b24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fa71 	bl	8008d64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008882:	4b32      	ldr	r3, [pc, #200]	; (800894c <tcp_process+0x5d0>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 814c 	beq.w	8008b28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8b5b      	ldrh	r3, [r3, #26]
 8008894:	f043 0302 	orr.w	r3, r3, #2
 8008898:	b29a      	uxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2207      	movs	r2, #7
 80088a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80088a4:	e140      	b.n	8008b28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fa5c 	bl	8008d64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80088ac:	4b27      	ldr	r3, [pc, #156]	; (800894c <tcp_process+0x5d0>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d071      	beq.n	800899c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80088b8:	4b19      	ldr	r3, [pc, #100]	; (8008920 <tcp_process+0x5a4>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d060      	beq.n	8008986 <tcp_process+0x60a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088c8:	4b16      	ldr	r3, [pc, #88]	; (8008924 <tcp_process+0x5a8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d15a      	bne.n	8008986 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d156      	bne.n	8008986 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	8b5b      	ldrh	r3, [r3, #26]
 80088dc:	f043 0302 	orr.w	r3, r3, #2
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fe fdbe 	bl	8007468 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80088ec:	4b18      	ldr	r3, [pc, #96]	; (8008950 <tcp_process+0x5d4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d105      	bne.n	8008902 <tcp_process+0x586>
 80088f6:	4b16      	ldr	r3, [pc, #88]	; (8008950 <tcp_process+0x5d4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	4a14      	ldr	r2, [pc, #80]	; (8008950 <tcp_process+0x5d4>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	e02e      	b.n	8008960 <tcp_process+0x5e4>
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <tcp_process+0x5d4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e027      	b.n	800895a <tcp_process+0x5de>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d11f      	bne.n	8008954 <tcp_process+0x5d8>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	60da      	str	r2, [r3, #12]
 800891c:	e020      	b.n	8008960 <tcp_process+0x5e4>
 800891e:	bf00      	nop
 8008920:	20000538 	.word	0x20000538
 8008924:	20000530 	.word	0x20000530
 8008928:	20000536 	.word	0x20000536
 800892c:	2000052c 	.word	0x2000052c
 8008930:	2000051c 	.word	0x2000051c
 8008934:	20003798 	.word	0x20003798
 8008938:	2000379c 	.word	0x2000379c
 800893c:	08010d1c 	.word	0x08010d1c
 8008940:	08010fbc 	.word	0x08010fbc
 8008944:	08010d68 	.word	0x08010d68
 8008948:	20000534 	.word	0x20000534
 800894c:	20000539 	.word	0x20000539
 8008950:	20008e8c 	.word	0x20008e8c
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1d4      	bne.n	800890a <tcp_process+0x58e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	4b77      	ldr	r3, [pc, #476]	; (8008b44 <tcp_process+0x7c8>)
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	220a      	movs	r2, #10
 8008970:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008972:	4b75      	ldr	r3, [pc, #468]	; (8008b48 <tcp_process+0x7cc>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60da      	str	r2, [r3, #12]
 800897a:	4a73      	ldr	r2, [pc, #460]	; (8008b48 <tcp_process+0x7cc>)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	f003 f950 	bl	800bc24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008984:	e0d2      	b.n	8008b2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8b5b      	ldrh	r3, [r3, #26]
 800898a:	f043 0302 	orr.w	r3, r3, #2
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2208      	movs	r2, #8
 8008998:	751a      	strb	r2, [r3, #20]
      break;
 800899a:	e0c7      	b.n	8008b2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800899c:	4b6b      	ldr	r3, [pc, #428]	; (8008b4c <tcp_process+0x7d0>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80c1 	beq.w	8008b2c <tcp_process+0x7b0>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089ae:	4b68      	ldr	r3, [pc, #416]	; (8008b50 <tcp_process+0x7d4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	f040 80ba 	bne.w	8008b2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 80b5 	bne.w	8008b2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2206      	movs	r2, #6
 80089c6:	751a      	strb	r2, [r3, #20]
      break;
 80089c8:	e0b0      	b.n	8008b2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f9ca 	bl	8008d64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80089d0:	4b60      	ldr	r3, [pc, #384]	; (8008b54 <tcp_process+0x7d8>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80a9 	beq.w	8008b30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8b5b      	ldrh	r3, [r3, #26]
 80089e2:	f043 0302 	orr.w	r3, r3, #2
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fe fd3b 	bl	8007468 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80089f2:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <tcp_process+0x7dc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d105      	bne.n	8008a08 <tcp_process+0x68c>
 80089fc:	4b56      	ldr	r3, [pc, #344]	; (8008b58 <tcp_process+0x7dc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	4a55      	ldr	r2, [pc, #340]	; (8008b58 <tcp_process+0x7dc>)
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	e013      	b.n	8008a30 <tcp_process+0x6b4>
 8008a08:	4b53      	ldr	r3, [pc, #332]	; (8008b58 <tcp_process+0x7dc>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	e00c      	b.n	8008a2a <tcp_process+0x6ae>
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d104      	bne.n	8008a24 <tcp_process+0x6a8>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	60da      	str	r2, [r3, #12]
 8008a22:	e005      	b.n	8008a30 <tcp_process+0x6b4>
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1ef      	bne.n	8008a10 <tcp_process+0x694>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	4b43      	ldr	r3, [pc, #268]	; (8008b44 <tcp_process+0x7c8>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	220a      	movs	r2, #10
 8008a40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008a42:	4b41      	ldr	r3, [pc, #260]	; (8008b48 <tcp_process+0x7cc>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	4a3f      	ldr	r2, [pc, #252]	; (8008b48 <tcp_process+0x7cc>)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	f003 f8e8 	bl	800bc24 <tcp_timer_needed>
      }
      break;
 8008a54:	e06c      	b.n	8008b30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f984 	bl	8008d64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008a5c:	4b3b      	ldr	r3, [pc, #236]	; (8008b4c <tcp_process+0x7d0>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d065      	beq.n	8008b34 <tcp_process+0x7b8>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a6c:	4b38      	ldr	r3, [pc, #224]	; (8008b50 <tcp_process+0x7d4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d15f      	bne.n	8008b34 <tcp_process+0x7b8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d15b      	bne.n	8008b34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7fe fcf3 	bl	8007468 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008a82:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <tcp_process+0x7dc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d105      	bne.n	8008a98 <tcp_process+0x71c>
 8008a8c:	4b32      	ldr	r3, [pc, #200]	; (8008b58 <tcp_process+0x7dc>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	4a31      	ldr	r2, [pc, #196]	; (8008b58 <tcp_process+0x7dc>)
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	e013      	b.n	8008ac0 <tcp_process+0x744>
 8008a98:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <tcp_process+0x7dc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e00c      	b.n	8008aba <tcp_process+0x73e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d104      	bne.n	8008ab4 <tcp_process+0x738>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	e005      	b.n	8008ac0 <tcp_process+0x744>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1ef      	bne.n	8008aa0 <tcp_process+0x724>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	60da      	str	r2, [r3, #12]
 8008ac6:	4b1f      	ldr	r3, [pc, #124]	; (8008b44 <tcp_process+0x7c8>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	220a      	movs	r2, #10
 8008ad0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <tcp_process+0x7cc>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60da      	str	r2, [r3, #12]
 8008ada:	4a1b      	ldr	r2, [pc, #108]	; (8008b48 <tcp_process+0x7cc>)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	f003 f8a0 	bl	800bc24 <tcp_timer_needed>
      }
      break;
 8008ae4:	e026      	b.n	8008b34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f93c 	bl	8008d64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008aec:	4b17      	ldr	r3, [pc, #92]	; (8008b4c <tcp_process+0x7d0>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 0310 	and.w	r3, r3, #16
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01f      	beq.n	8008b38 <tcp_process+0x7bc>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <tcp_process+0x7d4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d119      	bne.n	8008b38 <tcp_process+0x7bc>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d115      	bne.n	8008b38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <tcp_process+0x7d8>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f043 0310 	orr.w	r3, r3, #16
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <tcp_process+0x7d8>)
 8008b18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008b1a:	e00d      	b.n	8008b38 <tcp_process+0x7bc>
    default:
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e00c      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b20:	bf00      	nop
 8008b22:	e00a      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b24:	bf00      	nop
 8008b26:	e008      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b28:	bf00      	nop
 8008b2a:	e006      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b2c:	bf00      	nop
 8008b2e:	e004      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b30:	bf00      	nop
 8008b32:	e002      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <tcp_process+0x7be>
      break;
 8008b38:	bf00      	nop
  }
  return ERR_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3724      	adds	r7, #36	; 0x24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd90      	pop	{r4, r7, pc}
 8008b44:	20008e88 	.word	0x20008e88
 8008b48:	20008e9c 	.word	0x20008e9c
 8008b4c:	20000538 	.word	0x20000538
 8008b50:	20000530 	.word	0x20000530
 8008b54:	20000539 	.word	0x20000539
 8008b58:	20008e8c 	.word	0x20008e8c

08008b5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008b5c:	b590      	push	{r4, r7, lr}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <tcp_oos_insert_segment+0x1e>
 8008b6c:	4b3b      	ldr	r3, [pc, #236]	; (8008c5c <tcp_oos_insert_segment+0x100>)
 8008b6e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008b72:	493b      	ldr	r1, [pc, #236]	; (8008c60 <tcp_oos_insert_segment+0x104>)
 8008b74:	483b      	ldr	r0, [pc, #236]	; (8008c64 <tcp_oos_insert_segment+0x108>)
 8008b76:	f005 fe61 	bl	800e83c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	899b      	ldrh	r3, [r3, #12]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fb fa80 	bl	8004088 <lwip_htons>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d028      	beq.n	8008be6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008b94:	6838      	ldr	r0, [r7, #0]
 8008b96:	f7fe f979 	bl	8006e8c <tcp_segs_free>
    next = NULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	603b      	str	r3, [r7, #0]
 8008b9e:	e056      	b.n	8008c4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	899b      	ldrh	r3, [r3, #12]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fb fa6d 	bl	8004088 <lwip_htons>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	899b      	ldrh	r3, [r3, #12]
 8008bc0:	b29c      	uxth	r4, r3
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	f7fb fa60 	bl	8004088 <lwip_htons>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	4322      	orrs	r2, r4
 8008bd2:	b292      	uxth	r2, r2
 8008bd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f7fe f968 	bl	8006eb6 <tcp_seg_free>
    while (next &&
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00e      	beq.n	8008c0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	891b      	ldrh	r3, [r3, #8]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <tcp_oos_insert_segment+0x10c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	441a      	add	r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	8909      	ldrh	r1, [r1, #8]
 8008c02:	440b      	add	r3, r1
 8008c04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	daca      	bge.n	8008ba0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01e      	beq.n	8008c4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	891b      	ldrh	r3, [r3, #8]
 8008c14:	461a      	mov	r2, r3
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <tcp_oos_insert_segment+0x10c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	441a      	add	r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dd12      	ble.n	8008c4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <tcp_oos_insert_segment+0x10c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	891b      	ldrh	r3, [r3, #8]
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fc fb81 	bl	8005350 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}
 8008c5c:	08010d1c 	.word	0x08010d1c
 8008c60:	08010fdc 	.word	0x08010fdc
 8008c64:	08010d68 	.word	0x08010d68
 8008c68:	2000052c 	.word	0x2000052c

08008c6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008c6c:	b5b0      	push	{r4, r5, r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008c7a:	e03e      	b.n	8008cfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fc fd6e 	bl	800576c <pbuf_clen>
 8008c90:	4603      	mov	r3, r0
 8008c92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c9a:	8a7a      	ldrh	r2, [r7, #18]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d906      	bls.n	8008cae <tcp_free_acked_segments+0x42>
 8008ca0:	4b2a      	ldr	r3, [pc, #168]	; (8008d4c <tcp_free_acked_segments+0xe0>)
 8008ca2:	f240 4257 	movw	r2, #1111	; 0x457
 8008ca6:	492a      	ldr	r1, [pc, #168]	; (8008d50 <tcp_free_acked_segments+0xe4>)
 8008ca8:	482a      	ldr	r0, [pc, #168]	; (8008d54 <tcp_free_acked_segments+0xe8>)
 8008caa:	f005 fdc7 	bl	800e83c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008cb4:	8a7b      	ldrh	r3, [r7, #18]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	891a      	ldrh	r2, [r3, #8]
 8008cc4:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <tcp_free_acked_segments+0xec>)
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	4413      	add	r3, r2
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	4b22      	ldr	r3, [pc, #136]	; (8008d58 <tcp_free_acked_segments+0xec>)
 8008cce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008cd0:	6978      	ldr	r0, [r7, #20]
 8008cd2:	f7fe f8f0 	bl	8006eb6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00c      	beq.n	8008cfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <tcp_free_acked_segments+0x8e>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <tcp_free_acked_segments+0x8e>
 8008cec:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <tcp_free_acked_segments+0xe0>)
 8008cee:	f240 4261 	movw	r2, #1121	; 0x461
 8008cf2:	491a      	ldr	r1, [pc, #104]	; (8008d5c <tcp_free_acked_segments+0xf0>)
 8008cf4:	4817      	ldr	r0, [pc, #92]	; (8008d54 <tcp_free_acked_segments+0xe8>)
 8008cf6:	f005 fda1 	bl	800e83c <iprintf>
  while (seg_list != NULL &&
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d020      	beq.n	8008d42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fb f9d3 	bl	80040b2 <lwip_htonl>
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	891b      	ldrh	r3, [r3, #8]
 8008d12:	461d      	mov	r5, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	899b      	ldrh	r3, [r3, #12]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fb f9b3 	bl	8004088 <lwip_htons>
 8008d22:	4603      	mov	r3, r0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <tcp_free_acked_segments+0xc6>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e000      	b.n	8008d34 <tcp_free_acked_segments+0xc8>
 8008d32:	2300      	movs	r3, #0
 8008d34:	442b      	add	r3, r5
 8008d36:	18e2      	adds	r2, r4, r3
 8008d38:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <tcp_free_acked_segments+0xf4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd9c      	ble.n	8008c7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008d42:	68bb      	ldr	r3, [r7, #8]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d4c:	08010d1c 	.word	0x08010d1c
 8008d50:	08011004 	.word	0x08011004
 8008d54:	08010d68 	.word	0x08010d68
 8008d58:	20000534 	.word	0x20000534
 8008d5c:	0801102c 	.word	0x0801102c
 8008d60:	20000530 	.word	0x20000530

08008d64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008d64:	b5b0      	push	{r4, r5, r7, lr}
 8008d66:	b094      	sub	sp, #80	; 0x50
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <tcp_receive+0x20>
 8008d76:	4ba6      	ldr	r3, [pc, #664]	; (8009010 <tcp_receive+0x2ac>)
 8008d78:	f240 427b 	movw	r2, #1147	; 0x47b
 8008d7c:	49a5      	ldr	r1, [pc, #660]	; (8009014 <tcp_receive+0x2b0>)
 8008d7e:	48a6      	ldr	r0, [pc, #664]	; (8009018 <tcp_receive+0x2b4>)
 8008d80:	f005 fd5c 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7d1b      	ldrb	r3, [r3, #20]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d806      	bhi.n	8008d9a <tcp_receive+0x36>
 8008d8c:	4ba0      	ldr	r3, [pc, #640]	; (8009010 <tcp_receive+0x2ac>)
 8008d8e:	f240 427c 	movw	r2, #1148	; 0x47c
 8008d92:	49a2      	ldr	r1, [pc, #648]	; (800901c <tcp_receive+0x2b8>)
 8008d94:	48a0      	ldr	r0, [pc, #640]	; (8009018 <tcp_receive+0x2b4>)
 8008d96:	f005 fd51 	bl	800e83c <iprintf>

  if (flags & TCP_ACK) {
 8008d9a:	4ba1      	ldr	r3, [pc, #644]	; (8009020 <tcp_receive+0x2bc>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	f003 0310 	and.w	r3, r3, #16
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 8263 	beq.w	800926e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db4:	4413      	add	r3, r2
 8008db6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dbc:	4b99      	ldr	r3, [pc, #612]	; (8009024 <tcp_receive+0x2c0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	db1b      	blt.n	8008dfe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dca:	4b96      	ldr	r3, [pc, #600]	; (8009024 <tcp_receive+0x2c0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d106      	bne.n	8008de0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008dd6:	4b94      	ldr	r3, [pc, #592]	; (8009028 <tcp_receive+0x2c4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db0e      	blt.n	8008dfe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008de4:	4b90      	ldr	r3, [pc, #576]	; (8009028 <tcp_receive+0x2c4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d125      	bne.n	8008e38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008dec:	4b8f      	ldr	r3, [pc, #572]	; (800902c <tcp_receive+0x2c8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	89db      	ldrh	r3, [r3, #14]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d91c      	bls.n	8008e38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008dfe:	4b8b      	ldr	r3, [pc, #556]	; (800902c <tcp_receive+0x2c8>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	89db      	ldrh	r3, [r3, #14]
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d205      	bcs.n	8008e28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008e28:	4b7e      	ldr	r3, [pc, #504]	; (8009024 <tcp_receive+0x2c0>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008e30:	4b7d      	ldr	r3, [pc, #500]	; (8009028 <tcp_receive+0x2c4>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008e38:	4b7b      	ldr	r3, [pc, #492]	; (8009028 <tcp_receive+0x2c4>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	dc58      	bgt.n	8008ef8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008e46:	4b7a      	ldr	r3, [pc, #488]	; (8009030 <tcp_receive+0x2cc>)
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d14b      	bne.n	8008ee6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008e58:	4413      	add	r3, r2
 8008e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d142      	bne.n	8008ee6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	db3d      	blt.n	8008ee6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e6e:	4b6e      	ldr	r3, [pc, #440]	; (8009028 <tcp_receive+0x2c4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d137      	bne.n	8008ee6 <tcp_receive+0x182>
              found_dupack = 1;
 8008e76:	2301      	movs	r3, #1
 8008e78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e80:	2bff      	cmp	r3, #255	; 0xff
 8008e82:	d007      	beq.n	8008e94 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d91b      	bls.n	8008ed6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ea8:	4413      	add	r3, r2
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d30a      	bcc.n	8008ecc <tcp_receive+0x168>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ec0:	4413      	add	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008eca:	e004      	b.n	8008ed6 <tcp_receive+0x172>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ed2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d902      	bls.n	8008ee6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f002 fb41 	bl	800b568 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 8160 	bne.w	80091ae <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ef6:	e15a      	b.n	80091ae <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ef8:	4b4b      	ldr	r3, [pc, #300]	; (8009028 <tcp_receive+0x2c4>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f2c0 814d 	blt.w	80091a4 <tcp_receive+0x440>
 8008f0a:	4b47      	ldr	r3, [pc, #284]	; (8009028 <tcp_receive+0x2c4>)
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f300 8145 	bgt.w	80091a4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	8b5b      	ldrh	r3, [r3, #26]
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d010      	beq.n	8008f48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	8b5b      	ldrh	r3, [r3, #26]
 8008f2a:	f023 0304 	bic.w	r3, r3, #4
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f56:	10db      	asrs	r3, r3, #3
 8008f58:	b21b      	sxth	r3, r3
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	b21a      	sxth	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008f70:	4b2d      	ldr	r3, [pc, #180]	; (8009028 <tcp_receive+0x2c4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008f88:	4b27      	ldr	r3, [pc, #156]	; (8009028 <tcp_receive+0x2c4>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7d1b      	ldrb	r3, [r3, #20]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	f240 8096 	bls.w	80090c6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d244      	bcs.n	8009034 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	8b5b      	ldrh	r3, [r3, #26]
 8008fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <tcp_receive+0x256>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <tcp_receive+0x258>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008fc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fca:	fb12 f303 	smulbb	r3, r2, r3
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	bf28      	it	cs
 8008fd6:	4613      	movcs	r3, r2
 8008fd8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fe0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008fe2:	4413      	add	r3, r2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d309      	bcc.n	8009004 <tcp_receive+0x2a0>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ff8:	4413      	add	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009002:	e060      	b.n	80090c6 <tcp_receive+0x362>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800900a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800900e:	e05a      	b.n	80090c6 <tcp_receive+0x362>
 8009010:	08010d1c 	.word	0x08010d1c
 8009014:	0801104c 	.word	0x0801104c
 8009018:	08010d68 	.word	0x08010d68
 800901c:	08011068 	.word	0x08011068
 8009020:	20000538 	.word	0x20000538
 8009024:	2000052c 	.word	0x2000052c
 8009028:	20000530 	.word	0x20000530
 800902c:	2000051c 	.word	0x2000051c
 8009030:	20000536 	.word	0x20000536
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800903a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800903c:	4413      	add	r3, r2
 800903e:	b29a      	uxth	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009046:	429a      	cmp	r2, r3
 8009048:	d309      	bcc.n	800905e <tcp_receive+0x2fa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009052:	4413      	add	r3, r2
 8009054:	b29a      	uxth	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800905c:	e004      	b.n	8009068 <tcp_receive+0x304>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009074:	429a      	cmp	r2, r3
 8009076:	d326      	bcc.n	80090c6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009098:	4413      	add	r3, r2
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d30a      	bcc.n	80090bc <tcp_receive+0x358>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090b0:	4413      	add	r3, r2
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80090ba:	e004      	b.n	80090c6 <tcp_receive+0x362>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	4a98      	ldr	r2, [pc, #608]	; (8009330 <tcp_receive+0x5cc>)
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fdcb 	bl	8008c6c <tcp_free_acked_segments>
 80090d6:	4602      	mov	r2, r0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	4a93      	ldr	r2, [pc, #588]	; (8009334 <tcp_receive+0x5d0>)
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fdc0 	bl	8008c6c <tcp_free_acked_segments>
 80090ec:	4602      	mov	r2, r0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009100:	861a      	strh	r2, [r3, #48]	; 0x30
 8009102:	e002      	b.n	800910a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009126:	4b84      	ldr	r3, [pc, #528]	; (8009338 <tcp_receive+0x5d4>)
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	4413      	add	r3, r2
 800912c:	b29a      	uxth	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8b5b      	ldrh	r3, [r3, #26]
 8009138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800913c:	2b00      	cmp	r3, #0
 800913e:	d035      	beq.n	80091ac <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009144:	2b00      	cmp	r3, #0
 8009146:	d118      	bne.n	800917a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00c      	beq.n	800916a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4618      	mov	r0, r3
 800915e:	f7fa ffa8 	bl	80040b2 <lwip_htonl>
 8009162:	4603      	mov	r3, r0
 8009164:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009166:	2b00      	cmp	r3, #0
 8009168:	dc20      	bgt.n	80091ac <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	8b5b      	ldrh	r3, [r3, #26]
 800916e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009172:	b29a      	uxth	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009178:	e018      	b.n	80091ac <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	4618      	mov	r0, r3
 8009188:	f7fa ff93 	bl	80040b2 <lwip_htonl>
 800918c:	4603      	mov	r3, r0
 800918e:	1ae3      	subs	r3, r4, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	dc0b      	bgt.n	80091ac <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8b5b      	ldrh	r3, [r3, #26]
 8009198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800919c:	b29a      	uxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80091a2:	e003      	b.n	80091ac <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 fbcd 	bl	800b944 <tcp_send_empty_ack>
 80091aa:	e000      	b.n	80091ae <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80091ac:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d05b      	beq.n	800926e <tcp_receive+0x50a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ba:	4b60      	ldr	r3, [pc, #384]	; (800933c <tcp_receive+0x5d8>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	da54      	bge.n	800926e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80091c4:	4b5e      	ldr	r3, [pc, #376]	; (8009340 <tcp_receive+0x5dc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80091d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091e2:	10db      	asrs	r3, r3, #3
 80091e4:	b21b      	sxth	r3, r3
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091fc:	4413      	add	r3, r2
 80091fe:	b29b      	uxth	r3, r3
 8009200:	b21a      	sxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009206:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800920a:	2b00      	cmp	r3, #0
 800920c:	da05      	bge.n	800921a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800920e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009212:	425b      	negs	r3, r3
 8009214:	b29b      	uxth	r3, r3
 8009216:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800921a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009224:	109b      	asrs	r3, r3, #2
 8009226:	b21b      	sxth	r3, r3
 8009228:	b29b      	uxth	r3, r3
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	b29b      	uxth	r3, r3
 800922e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009238:	b29a      	uxth	r2, r3
 800923a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800923e:	4413      	add	r3, r2
 8009240:	b29b      	uxth	r3, r3
 8009242:	b21a      	sxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800924e:	10db      	asrs	r3, r3, #3
 8009250:	b21b      	sxth	r3, r3
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800925a:	b29b      	uxth	r3, r3
 800925c:	4413      	add	r3, r2
 800925e:	b29b      	uxth	r3, r3
 8009260:	b21a      	sxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800926e:	4b35      	ldr	r3, [pc, #212]	; (8009344 <tcp_receive+0x5e0>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 84e1 	beq.w	8009c3a <tcp_receive+0xed6>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7d1b      	ldrb	r3, [r3, #20]
 800927c:	2b06      	cmp	r3, #6
 800927e:	f200 84dc 	bhi.w	8009c3a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009286:	4b30      	ldr	r3, [pc, #192]	; (8009348 <tcp_receive+0x5e4>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	f2c0 808e 	blt.w	80093b0 <tcp_receive+0x64c>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009298:	4b2a      	ldr	r3, [pc, #168]	; (8009344 <tcp_receive+0x5e0>)
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	4619      	mov	r1, r3
 800929e:	4b2a      	ldr	r3, [pc, #168]	; (8009348 <tcp_receive+0x5e4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	440b      	add	r3, r1
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	3301      	adds	r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f300 8081 	bgt.w	80093b0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80092ae:	4b27      	ldr	r3, [pc, #156]	; (800934c <tcp_receive+0x5e8>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092b8:	4b23      	ldr	r3, [pc, #140]	; (8009348 <tcp_receive+0x5e4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80092c0:	4b22      	ldr	r3, [pc, #136]	; (800934c <tcp_receive+0x5e8>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <tcp_receive+0x572>
 80092c8:	4b21      	ldr	r3, [pc, #132]	; (8009350 <tcp_receive+0x5ec>)
 80092ca:	f240 5294 	movw	r2, #1428	; 0x594
 80092ce:	4921      	ldr	r1, [pc, #132]	; (8009354 <tcp_receive+0x5f0>)
 80092d0:	4821      	ldr	r0, [pc, #132]	; (8009358 <tcp_receive+0x5f4>)
 80092d2:	f005 fab3 	bl	800e83c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092dc:	4293      	cmp	r3, r2
 80092de:	d906      	bls.n	80092ee <tcp_receive+0x58a>
 80092e0:	4b1b      	ldr	r3, [pc, #108]	; (8009350 <tcp_receive+0x5ec>)
 80092e2:	f240 5295 	movw	r2, #1429	; 0x595
 80092e6:	491d      	ldr	r1, [pc, #116]	; (800935c <tcp_receive+0x5f8>)
 80092e8:	481b      	ldr	r0, [pc, #108]	; (8009358 <tcp_receive+0x5f4>)
 80092ea:	f005 faa7 	bl	800e83c <iprintf>
      off = (u16_t)off32;
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80092f4:	4b15      	ldr	r3, [pc, #84]	; (800934c <tcp_receive+0x5e8>)
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	891b      	ldrh	r3, [r3, #8]
 80092fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80092fe:	429a      	cmp	r2, r3
 8009300:	d906      	bls.n	8009310 <tcp_receive+0x5ac>
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <tcp_receive+0x5ec>)
 8009304:	f240 5297 	movw	r2, #1431	; 0x597
 8009308:	4915      	ldr	r1, [pc, #84]	; (8009360 <tcp_receive+0x5fc>)
 800930a:	4813      	ldr	r0, [pc, #76]	; (8009358 <tcp_receive+0x5f4>)
 800930c:	f005 fa96 	bl	800e83c <iprintf>
      inseg.len -= off;
 8009310:	4b0e      	ldr	r3, [pc, #56]	; (800934c <tcp_receive+0x5e8>)
 8009312:	891a      	ldrh	r2, [r3, #8]
 8009314:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	b29a      	uxth	r2, r3
 800931c:	4b0b      	ldr	r3, [pc, #44]	; (800934c <tcp_receive+0x5e8>)
 800931e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <tcp_receive+0x5e8>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	891a      	ldrh	r2, [r3, #8]
 8009326:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800932e:	e029      	b.n	8009384 <tcp_receive+0x620>
 8009330:	08011084 	.word	0x08011084
 8009334:	0801108c 	.word	0x0801108c
 8009338:	20000534 	.word	0x20000534
 800933c:	20000530 	.word	0x20000530
 8009340:	20008e90 	.word	0x20008e90
 8009344:	20000536 	.word	0x20000536
 8009348:	2000052c 	.word	0x2000052c
 800934c:	2000050c 	.word	0x2000050c
 8009350:	08010d1c 	.word	0x08010d1c
 8009354:	08011094 	.word	0x08011094
 8009358:	08010d68 	.word	0x08010d68
 800935c:	080110a4 	.word	0x080110a4
 8009360:	080110b4 	.word	0x080110b4
        off -= p->len;
 8009364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009366:	895b      	ldrh	r3, [r3, #10]
 8009368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009374:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009376:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937a:	2200      	movs	r2, #0
 800937c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800937e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009386:	895b      	ldrh	r3, [r3, #10]
 8009388:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800938c:	429a      	cmp	r2, r3
 800938e:	d8e9      	bhi.n	8009364 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009390:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009394:	4619      	mov	r1, r3
 8009396:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009398:	f7fc f8da 	bl	8005550 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	4a91      	ldr	r2, [pc, #580]	; (80095e8 <tcp_receive+0x884>)
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	4b91      	ldr	r3, [pc, #580]	; (80095ec <tcp_receive+0x888>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4a8f      	ldr	r2, [pc, #572]	; (80095e8 <tcp_receive+0x884>)
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80093ae:	e00d      	b.n	80093cc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80093b0:	4b8d      	ldr	r3, [pc, #564]	; (80095e8 <tcp_receive+0x884>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da06      	bge.n	80093cc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8b5b      	ldrh	r3, [r3, #26]
 80093c2:	f043 0302 	orr.w	r3, r3, #2
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80093cc:	4b86      	ldr	r3, [pc, #536]	; (80095e8 <tcp_receive+0x884>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f2c0 842a 	blt.w	8009c30 <tcp_receive+0xecc>
 80093dc:	4b82      	ldr	r3, [pc, #520]	; (80095e8 <tcp_receive+0x884>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80093e8:	440b      	add	r3, r1
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	3301      	adds	r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f300 841e 	bgt.w	8009c30 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f8:	4b7b      	ldr	r3, [pc, #492]	; (80095e8 <tcp_receive+0x884>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	f040 829a 	bne.w	8009936 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009402:	4b7a      	ldr	r3, [pc, #488]	; (80095ec <tcp_receive+0x888>)
 8009404:	891c      	ldrh	r4, [r3, #8]
 8009406:	4b79      	ldr	r3, [pc, #484]	; (80095ec <tcp_receive+0x888>)
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	899b      	ldrh	r3, [r3, #12]
 800940c:	b29b      	uxth	r3, r3
 800940e:	4618      	mov	r0, r3
 8009410:	f7fa fe3a 	bl	8004088 <lwip_htons>
 8009414:	4603      	mov	r3, r0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 0303 	and.w	r3, r3, #3
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <tcp_receive+0x6c0>
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <tcp_receive+0x6c2>
 8009424:	2300      	movs	r3, #0
 8009426:	4423      	add	r3, r4
 8009428:	b29a      	uxth	r2, r3
 800942a:	4b71      	ldr	r3, [pc, #452]	; (80095f0 <tcp_receive+0x88c>)
 800942c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009432:	4b6f      	ldr	r3, [pc, #444]	; (80095f0 <tcp_receive+0x88c>)
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d275      	bcs.n	8009526 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800943a:	4b6c      	ldr	r3, [pc, #432]	; (80095ec <tcp_receive+0x888>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	899b      	ldrh	r3, [r3, #12]
 8009440:	b29b      	uxth	r3, r3
 8009442:	4618      	mov	r0, r3
 8009444:	f7fa fe20 	bl	8004088 <lwip_htons>
 8009448:	4603      	mov	r3, r0
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01f      	beq.n	8009494 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009454:	4b65      	ldr	r3, [pc, #404]	; (80095ec <tcp_receive+0x888>)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	899b      	ldrh	r3, [r3, #12]
 800945a:	b29b      	uxth	r3, r3
 800945c:	b21b      	sxth	r3, r3
 800945e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009462:	b21c      	sxth	r4, r3
 8009464:	4b61      	ldr	r3, [pc, #388]	; (80095ec <tcp_receive+0x888>)
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	899b      	ldrh	r3, [r3, #12]
 800946a:	b29b      	uxth	r3, r3
 800946c:	4618      	mov	r0, r3
 800946e:	f7fa fe0b 	bl	8004088 <lwip_htons>
 8009472:	4603      	mov	r3, r0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	b29b      	uxth	r3, r3
 8009478:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800947c:	b29b      	uxth	r3, r3
 800947e:	4618      	mov	r0, r3
 8009480:	f7fa fe02 	bl	8004088 <lwip_htons>
 8009484:	4603      	mov	r3, r0
 8009486:	b21b      	sxth	r3, r3
 8009488:	4323      	orrs	r3, r4
 800948a:	b21a      	sxth	r2, r3
 800948c:	4b57      	ldr	r3, [pc, #348]	; (80095ec <tcp_receive+0x888>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	b292      	uxth	r2, r2
 8009492:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009498:	4b54      	ldr	r3, [pc, #336]	; (80095ec <tcp_receive+0x888>)
 800949a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800949c:	4b53      	ldr	r3, [pc, #332]	; (80095ec <tcp_receive+0x888>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	899b      	ldrh	r3, [r3, #12]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fa fdef 	bl	8004088 <lwip_htons>
 80094aa:	4603      	mov	r3, r0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d005      	beq.n	80094c2 <tcp_receive+0x75e>
            inseg.len -= 1;
 80094b6:	4b4d      	ldr	r3, [pc, #308]	; (80095ec <tcp_receive+0x888>)
 80094b8:	891b      	ldrh	r3, [r3, #8]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	4b4b      	ldr	r3, [pc, #300]	; (80095ec <tcp_receive+0x888>)
 80094c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80094c2:	4b4a      	ldr	r3, [pc, #296]	; (80095ec <tcp_receive+0x888>)
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	4a49      	ldr	r2, [pc, #292]	; (80095ec <tcp_receive+0x888>)
 80094c8:	8912      	ldrh	r2, [r2, #8]
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fb ff3f 	bl	8005350 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80094d2:	4b46      	ldr	r3, [pc, #280]	; (80095ec <tcp_receive+0x888>)
 80094d4:	891c      	ldrh	r4, [r3, #8]
 80094d6:	4b45      	ldr	r3, [pc, #276]	; (80095ec <tcp_receive+0x888>)
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	899b      	ldrh	r3, [r3, #12]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fa fdd2 	bl	8004088 <lwip_htons>
 80094e4:	4603      	mov	r3, r0
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0303 	and.w	r3, r3, #3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <tcp_receive+0x790>
 80094f0:	2301      	movs	r3, #1
 80094f2:	e000      	b.n	80094f6 <tcp_receive+0x792>
 80094f4:	2300      	movs	r3, #0
 80094f6:	4423      	add	r3, r4
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	4b3d      	ldr	r3, [pc, #244]	; (80095f0 <tcp_receive+0x88c>)
 80094fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80094fe:	4b3c      	ldr	r3, [pc, #240]	; (80095f0 <tcp_receive+0x88c>)
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	4b38      	ldr	r3, [pc, #224]	; (80095e8 <tcp_receive+0x884>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	441a      	add	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009512:	440b      	add	r3, r1
 8009514:	429a      	cmp	r2, r3
 8009516:	d006      	beq.n	8009526 <tcp_receive+0x7c2>
 8009518:	4b36      	ldr	r3, [pc, #216]	; (80095f4 <tcp_receive+0x890>)
 800951a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800951e:	4936      	ldr	r1, [pc, #216]	; (80095f8 <tcp_receive+0x894>)
 8009520:	4836      	ldr	r0, [pc, #216]	; (80095fc <tcp_receive+0x898>)
 8009522:	f005 f98b 	bl	800e83c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 80e7 	beq.w	80096fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009530:	4b2e      	ldr	r3, [pc, #184]	; (80095ec <tcp_receive+0x888>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	899b      	ldrh	r3, [r3, #12]
 8009536:	b29b      	uxth	r3, r3
 8009538:	4618      	mov	r0, r3
 800953a:	f7fa fda5 	bl	8004088 <lwip_htons>
 800953e:	4603      	mov	r3, r0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d010      	beq.n	800956c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800954a:	e00a      	b.n	8009562 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009550:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7fd fcaa 	bl	8006eb6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f0      	bne.n	800954c <tcp_receive+0x7e8>
 800956a:	e0c8      	b.n	80096fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009572:	e052      	b.n	800961a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	899b      	ldrh	r3, [r3, #12]
 800957a:	b29b      	uxth	r3, r3
 800957c:	4618      	mov	r0, r3
 800957e:	f7fa fd83 	bl	8004088 <lwip_htons>
 8009582:	4603      	mov	r3, r0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d03d      	beq.n	800960a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800958e:	4b17      	ldr	r3, [pc, #92]	; (80095ec <tcp_receive+0x888>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	899b      	ldrh	r3, [r3, #12]
 8009594:	b29b      	uxth	r3, r3
 8009596:	4618      	mov	r0, r3
 8009598:	f7fa fd76 	bl	8004088 <lwip_htons>
 800959c:	4603      	mov	r3, r0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d130      	bne.n	800960a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <tcp_receive+0x888>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	899b      	ldrh	r3, [r3, #12]
 80095ae:	b29c      	uxth	r4, r3
 80095b0:	2001      	movs	r0, #1
 80095b2:	f7fa fd69 	bl	8004088 <lwip_htons>
 80095b6:	4603      	mov	r3, r0
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <tcp_receive+0x888>)
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	4322      	orrs	r2, r4
 80095c0:	b292      	uxth	r2, r2
 80095c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80095c4:	4b09      	ldr	r3, [pc, #36]	; (80095ec <tcp_receive+0x888>)
 80095c6:	891c      	ldrh	r4, [r3, #8]
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <tcp_receive+0x888>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	899b      	ldrh	r3, [r3, #12]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fa fd59 	bl	8004088 <lwip_htons>
 80095d6:	4603      	mov	r3, r0
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00e      	beq.n	8009600 <tcp_receive+0x89c>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e00d      	b.n	8009602 <tcp_receive+0x89e>
 80095e6:	bf00      	nop
 80095e8:	2000052c 	.word	0x2000052c
 80095ec:	2000050c 	.word	0x2000050c
 80095f0:	20000536 	.word	0x20000536
 80095f4:	08010d1c 	.word	0x08010d1c
 80095f8:	080110c4 	.word	0x080110c4
 80095fc:	08010d68 	.word	0x08010d68
 8009600:	2300      	movs	r3, #0
 8009602:	4423      	add	r3, r4
 8009604:	b29a      	uxth	r2, r3
 8009606:	4b98      	ldr	r3, [pc, #608]	; (8009868 <tcp_receive+0xb04>)
 8009608:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800960e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009614:	6938      	ldr	r0, [r7, #16]
 8009616:	f7fd fc4e 	bl	8006eb6 <tcp_seg_free>
            while (next &&
 800961a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00e      	beq.n	800963e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009620:	4b91      	ldr	r3, [pc, #580]	; (8009868 <tcp_receive+0xb04>)
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	4b91      	ldr	r3, [pc, #580]	; (800986c <tcp_receive+0xb08>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	441a      	add	r2, r3
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009634:	8909      	ldrh	r1, [r1, #8]
 8009636:	440b      	add	r3, r1
 8009638:	1ad3      	subs	r3, r2, r3
            while (next &&
 800963a:	2b00      	cmp	r3, #0
 800963c:	da9a      	bge.n	8009574 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800963e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d059      	beq.n	80096f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009644:	4b88      	ldr	r3, [pc, #544]	; (8009868 <tcp_receive+0xb04>)
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	4b88      	ldr	r3, [pc, #544]	; (800986c <tcp_receive+0xb08>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	441a      	add	r2, r3
 8009650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009658:	2b00      	cmp	r3, #0
 800965a:	dd4d      	ble.n	80096f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800965c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	b29a      	uxth	r2, r3
 8009664:	4b81      	ldr	r3, [pc, #516]	; (800986c <tcp_receive+0xb08>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29a      	uxth	r2, r3
 800966e:	4b80      	ldr	r3, [pc, #512]	; (8009870 <tcp_receive+0xb0c>)
 8009670:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009672:	4b7f      	ldr	r3, [pc, #508]	; (8009870 <tcp_receive+0xb0c>)
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	899b      	ldrh	r3, [r3, #12]
 8009678:	b29b      	uxth	r3, r3
 800967a:	4618      	mov	r0, r3
 800967c:	f7fa fd04 	bl	8004088 <lwip_htons>
 8009680:	4603      	mov	r3, r0
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <tcp_receive+0x934>
                inseg.len -= 1;
 800968c:	4b78      	ldr	r3, [pc, #480]	; (8009870 <tcp_receive+0xb0c>)
 800968e:	891b      	ldrh	r3, [r3, #8]
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	4b76      	ldr	r3, [pc, #472]	; (8009870 <tcp_receive+0xb0c>)
 8009696:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009698:	4b75      	ldr	r3, [pc, #468]	; (8009870 <tcp_receive+0xb0c>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	4a74      	ldr	r2, [pc, #464]	; (8009870 <tcp_receive+0xb0c>)
 800969e:	8912      	ldrh	r2, [r2, #8]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fb fe54 	bl	8005350 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80096a8:	4b71      	ldr	r3, [pc, #452]	; (8009870 <tcp_receive+0xb0c>)
 80096aa:	891c      	ldrh	r4, [r3, #8]
 80096ac:	4b70      	ldr	r3, [pc, #448]	; (8009870 <tcp_receive+0xb0c>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	899b      	ldrh	r3, [r3, #12]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fa fce7 	bl	8004088 <lwip_htons>
 80096ba:	4603      	mov	r3, r0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <tcp_receive+0x966>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <tcp_receive+0x968>
 80096ca:	2300      	movs	r3, #0
 80096cc:	4423      	add	r3, r4
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	4b65      	ldr	r3, [pc, #404]	; (8009868 <tcp_receive+0xb04>)
 80096d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80096d4:	4b64      	ldr	r3, [pc, #400]	; (8009868 <tcp_receive+0xb04>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	4b64      	ldr	r3, [pc, #400]	; (800986c <tcp_receive+0xb08>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	441a      	add	r2, r3
 80096e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d006      	beq.n	80096f8 <tcp_receive+0x994>
 80096ea:	4b62      	ldr	r3, [pc, #392]	; (8009874 <tcp_receive+0xb10>)
 80096ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80096f0:	4961      	ldr	r1, [pc, #388]	; (8009878 <tcp_receive+0xb14>)
 80096f2:	4862      	ldr	r0, [pc, #392]	; (800987c <tcp_receive+0xb18>)
 80096f4:	f005 f8a2 	bl	800e83c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80096fe:	4b5a      	ldr	r3, [pc, #360]	; (8009868 <tcp_receive+0xb04>)
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	4b59      	ldr	r3, [pc, #356]	; (800986c <tcp_receive+0xb08>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	441a      	add	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009712:	4b55      	ldr	r3, [pc, #340]	; (8009868 <tcp_receive+0xb04>)
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d206      	bcs.n	8009728 <tcp_receive+0x9c4>
 800971a:	4b56      	ldr	r3, [pc, #344]	; (8009874 <tcp_receive+0xb10>)
 800971c:	f240 6207 	movw	r2, #1543	; 0x607
 8009720:	4957      	ldr	r1, [pc, #348]	; (8009880 <tcp_receive+0xb1c>)
 8009722:	4856      	ldr	r0, [pc, #344]	; (800987c <tcp_receive+0xb18>)
 8009724:	f005 f88a 	bl	800e83c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800972c:	4b4e      	ldr	r3, [pc, #312]	; (8009868 <tcp_receive+0xb04>)
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	b29a      	uxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7fc fe97 	bl	800646c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800973e:	4b4c      	ldr	r3, [pc, #304]	; (8009870 <tcp_receive+0xb0c>)
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	891b      	ldrh	r3, [r3, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d006      	beq.n	8009756 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009748:	4b49      	ldr	r3, [pc, #292]	; (8009870 <tcp_receive+0xb0c>)
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4a4d      	ldr	r2, [pc, #308]	; (8009884 <tcp_receive+0xb20>)
 800974e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009750:	4b47      	ldr	r3, [pc, #284]	; (8009870 <tcp_receive+0xb0c>)
 8009752:	2200      	movs	r2, #0
 8009754:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009756:	4b46      	ldr	r3, [pc, #280]	; (8009870 <tcp_receive+0xb0c>)
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	899b      	ldrh	r3, [r3, #12]
 800975c:	b29b      	uxth	r3, r3
 800975e:	4618      	mov	r0, r3
 8009760:	f7fa fc92 	bl	8004088 <lwip_htons>
 8009764:	4603      	mov	r3, r0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80b8 	beq.w	80098e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009772:	4b45      	ldr	r3, [pc, #276]	; (8009888 <tcp_receive+0xb24>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f043 0320 	orr.w	r3, r3, #32
 800977a:	b2da      	uxtb	r2, r3
 800977c:	4b42      	ldr	r3, [pc, #264]	; (8009888 <tcp_receive+0xb24>)
 800977e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009780:	e0af      	b.n	80098e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009786:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	4a36      	ldr	r2, [pc, #216]	; (800986c <tcp_receive+0xb08>)
 8009792:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	891b      	ldrh	r3, [r3, #8]
 8009798:	461c      	mov	r4, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	899b      	ldrh	r3, [r3, #12]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fa fc70 	bl	8004088 <lwip_htons>
 80097a8:	4603      	mov	r3, r0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <tcp_receive+0xa54>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e000      	b.n	80097ba <tcp_receive+0xa56>
 80097b8:	2300      	movs	r3, #0
 80097ba:	191a      	adds	r2, r3, r4
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	441a      	add	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ca:	461c      	mov	r4, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	891b      	ldrh	r3, [r3, #8]
 80097d0:	461d      	mov	r5, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	899b      	ldrh	r3, [r3, #12]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fa fc54 	bl	8004088 <lwip_htons>
 80097e0:	4603      	mov	r3, r0
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 0303 	and.w	r3, r3, #3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <tcp_receive+0xa8c>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <tcp_receive+0xa8e>
 80097f0:	2300      	movs	r3, #0
 80097f2:	442b      	add	r3, r5
 80097f4:	429c      	cmp	r4, r3
 80097f6:	d206      	bcs.n	8009806 <tcp_receive+0xaa2>
 80097f8:	4b1e      	ldr	r3, [pc, #120]	; (8009874 <tcp_receive+0xb10>)
 80097fa:	f240 622b 	movw	r2, #1579	; 0x62b
 80097fe:	4923      	ldr	r1, [pc, #140]	; (800988c <tcp_receive+0xb28>)
 8009800:	481e      	ldr	r0, [pc, #120]	; (800987c <tcp_receive+0xb18>)
 8009802:	f005 f81b 	bl	800e83c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	891b      	ldrh	r3, [r3, #8]
 800980a:	461c      	mov	r4, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	899b      	ldrh	r3, [r3, #12]
 8009812:	b29b      	uxth	r3, r3
 8009814:	4618      	mov	r0, r3
 8009816:	f7fa fc37 	bl	8004088 <lwip_htons>
 800981a:	4603      	mov	r3, r0
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <tcp_receive+0xac6>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <tcp_receive+0xac8>
 800982a:	2300      	movs	r3, #0
 800982c:	1919      	adds	r1, r3, r4
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009832:	b28b      	uxth	r3, r1
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fc fe15 	bl	800646c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d028      	beq.n	800989e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800984c:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <tcp_receive+0xb20>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01d      	beq.n	8009890 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <tcp_receive+0xb20>)
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f7fb ffbe 	bl	80057e0 <pbuf_cat>
 8009864:	e018      	b.n	8009898 <tcp_receive+0xb34>
 8009866:	bf00      	nop
 8009868:	20000536 	.word	0x20000536
 800986c:	2000052c 	.word	0x2000052c
 8009870:	2000050c 	.word	0x2000050c
 8009874:	08010d1c 	.word	0x08010d1c
 8009878:	080110fc 	.word	0x080110fc
 800987c:	08010d68 	.word	0x08010d68
 8009880:	08011138 	.word	0x08011138
 8009884:	2000053c 	.word	0x2000053c
 8009888:	20000539 	.word	0x20000539
 800988c:	08011158 	.word	0x08011158
            } else {
              recv_data = cseg->p;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4a70      	ldr	r2, [pc, #448]	; (8009a58 <tcp_receive+0xcf4>)
 8009896:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	899b      	ldrh	r3, [r3, #12]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fbee 	bl	8004088 <lwip_htons>
 80098ac:	4603      	mov	r3, r0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00d      	beq.n	80098d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80098b8:	4b68      	ldr	r3, [pc, #416]	; (8009a5c <tcp_receive+0xcf8>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	4b66      	ldr	r3, [pc, #408]	; (8009a5c <tcp_receive+0xcf8>)
 80098c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	2b04      	cmp	r3, #4
 80098cc:	d102      	bne.n	80098d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2207      	movs	r2, #7
 80098d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80098dc:	68b8      	ldr	r0, [r7, #8]
 80098de:	f7fd faea 	bl	8006eb6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d008      	beq.n	80098fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80098f6:	429a      	cmp	r2, r3
 80098f8:	f43f af43 	beq.w	8009782 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	8b5b      	ldrh	r3, [r3, #26]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00e      	beq.n	8009926 <tcp_receive+0xbc2>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	8b5b      	ldrh	r3, [r3, #26]
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	835a      	strh	r2, [r3, #26]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8b5b      	ldrh	r3, [r3, #26]
 800991a:	f043 0302 	orr.w	r3, r3, #2
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009924:	e188      	b.n	8009c38 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	8b5b      	ldrh	r3, [r3, #26]
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009934:	e180      	b.n	8009c38 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800993e:	4848      	ldr	r0, [pc, #288]	; (8009a60 <tcp_receive+0xcfc>)
 8009940:	f7fd faf0 	bl	8006f24 <tcp_seg_copy>
 8009944:	4602      	mov	r2, r0
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	675a      	str	r2, [r3, #116]	; 0x74
 800994a:	e16d      	b.n	8009c28 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800994c:	2300      	movs	r3, #0
 800994e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009954:	63bb      	str	r3, [r7, #56]	; 0x38
 8009956:	e157      	b.n	8009c08 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	4b41      	ldr	r3, [pc, #260]	; (8009a64 <tcp_receive+0xd00>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d11d      	bne.n	80099a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009966:	4b3e      	ldr	r3, [pc, #248]	; (8009a60 <tcp_receive+0xcfc>)
 8009968:	891a      	ldrh	r2, [r3, #8]
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	891b      	ldrh	r3, [r3, #8]
 800996e:	429a      	cmp	r2, r3
 8009970:	f240 814f 	bls.w	8009c12 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009974:	483a      	ldr	r0, [pc, #232]	; (8009a60 <tcp_receive+0xcfc>)
 8009976:	f7fd fad5 	bl	8006f24 <tcp_seg_copy>
 800997a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8149 	beq.w	8009c16 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800998a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e002      	b.n	8009998 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800999a:	6978      	ldr	r0, [r7, #20]
 800999c:	f7ff f8de 	bl	8008b5c <tcp_oos_insert_segment>
                }
                break;
 80099a0:	e139      	b.n	8009c16 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d117      	bne.n	80099d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80099a8:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <tcp_receive+0xd00>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da57      	bge.n	8009a68 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80099b8:	4829      	ldr	r0, [pc, #164]	; (8009a60 <tcp_receive+0xcfc>)
 80099ba:	f7fd fab3 	bl	8006f24 <tcp_seg_copy>
 80099be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8129 	beq.w	8009c1a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80099ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099d0:	69b8      	ldr	r0, [r7, #24]
 80099d2:	f7ff f8c3 	bl	8008b5c <tcp_oos_insert_segment>
                  }
                  break;
 80099d6:	e120      	b.n	8009c1a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80099d8:	4b22      	ldr	r3, [pc, #136]	; (8009a64 <tcp_receive+0xd00>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	db3e      	blt.n	8009a68 <tcp_receive+0xd04>
 80099ea:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <tcp_receive+0xd00>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	3301      	adds	r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dc35      	bgt.n	8009a68 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80099fc:	4818      	ldr	r0, [pc, #96]	; (8009a60 <tcp_receive+0xcfc>)
 80099fe:	f7fd fa91 	bl	8006f24 <tcp_seg_copy>
 8009a02:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 8109 	beq.w	8009c1e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a14:	8912      	ldrh	r2, [r2, #8]
 8009a16:	441a      	add	r2, r3
 8009a18:	4b12      	ldr	r3, [pc, #72]	; (8009a64 <tcp_receive+0xd00>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd12      	ble.n	8009a48 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009a22:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <tcp_receive+0xd00>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3e:	891b      	ldrh	r3, [r3, #8]
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f7fb fc84 	bl	8005350 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4a:	69fa      	ldr	r2, [r7, #28]
 8009a4c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a50:	69f8      	ldr	r0, [r7, #28]
 8009a52:	f7ff f883 	bl	8008b5c <tcp_oos_insert_segment>
                  }
                  break;
 8009a56:	e0e2      	b.n	8009c1e <tcp_receive+0xeba>
 8009a58:	2000053c 	.word	0x2000053c
 8009a5c:	20000539 	.word	0x20000539
 8009a60:	2000050c 	.word	0x2000050c
 8009a64:	2000052c 	.word	0x2000052c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f040 80c6 	bne.w	8009c02 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009a76:	4b80      	ldr	r3, [pc, #512]	; (8009c78 <tcp_receive+0xf14>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f340 80bd 	ble.w	8009c02 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	899b      	ldrh	r3, [r3, #12]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fa faf9 	bl	8004088 <lwip_htons>
 8009a96:	4603      	mov	r3, r0
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f040 80bf 	bne.w	8009c22 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009aa4:	4875      	ldr	r0, [pc, #468]	; (8009c7c <tcp_receive+0xf18>)
 8009aa6:	f7fd fa3d 	bl	8006f24 <tcp_seg_copy>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80b6 	beq.w	8009c26 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ac2:	8912      	ldrh	r2, [r2, #8]
 8009ac4:	441a      	add	r2, r3
 8009ac6:	4b6c      	ldr	r3, [pc, #432]	; (8009c78 <tcp_receive+0xf14>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dd12      	ble.n	8009af6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009ad0:	4b69      	ldr	r3, [pc, #420]	; (8009c78 <tcp_receive+0xf14>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	891b      	ldrh	r3, [r3, #8]
 8009aee:	4619      	mov	r1, r3
 8009af0:	4610      	mov	r0, r2
 8009af2:	f7fb fc2d 	bl	8005350 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009af6:	4b62      	ldr	r3, [pc, #392]	; (8009c80 <tcp_receive+0xf1c>)
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	4b5e      	ldr	r3, [pc, #376]	; (8009c78 <tcp_receive+0xf14>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	441a      	add	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b0a:	440b      	add	r3, r1
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f340 8089 	ble.w	8009c26 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	899b      	ldrh	r3, [r3, #12]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fa fab2 	bl	8004088 <lwip_htons>
 8009b24:	4603      	mov	r3, r0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d022      	beq.n	8009b76 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	899b      	ldrh	r3, [r3, #12]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	b21b      	sxth	r3, r3
 8009b3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b40:	b21c      	sxth	r4, r3
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	899b      	ldrh	r3, [r3, #12]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fa fa9b 	bl	8004088 <lwip_htons>
 8009b52:	4603      	mov	r3, r0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fa fa92 	bl	8004088 <lwip_htons>
 8009b64:	4603      	mov	r3, r0
 8009b66:	b21b      	sxth	r3, r3
 8009b68:	4323      	orrs	r3, r4
 8009b6a:	b21a      	sxth	r2, r3
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	b292      	uxth	r2, r2
 8009b74:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b80:	4413      	add	r3, r2
 8009b82:	b299      	uxth	r1, r3
 8009b84:	4b3c      	ldr	r3, [pc, #240]	; (8009c78 <tcp_receive+0xf14>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	1a8a      	subs	r2, r1, r2
 8009b90:	b292      	uxth	r2, r2
 8009b92:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	891b      	ldrh	r3, [r3, #8]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f7fb fbd4 	bl	8005350 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	891c      	ldrh	r4, [r3, #8]
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	899b      	ldrh	r3, [r3, #12]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fa fa65 	bl	8004088 <lwip_htons>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <tcp_receive+0xe6a>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <tcp_receive+0xe6c>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4423      	add	r3, r4
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	4b2a      	ldr	r3, [pc, #168]	; (8009c80 <tcp_receive+0xf1c>)
 8009bd6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009bd8:	4b29      	ldr	r3, [pc, #164]	; (8009c80 <tcp_receive+0xf1c>)
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	4b26      	ldr	r3, [pc, #152]	; (8009c78 <tcp_receive+0xf14>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	441a      	add	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bec:	440b      	add	r3, r1
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d019      	beq.n	8009c26 <tcp_receive+0xec2>
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <tcp_receive+0xf20>)
 8009bf4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009bf8:	4923      	ldr	r1, [pc, #140]	; (8009c88 <tcp_receive+0xf24>)
 8009bfa:	4824      	ldr	r0, [pc, #144]	; (8009c8c <tcp_receive+0xf28>)
 8009bfc:	f004 fe1e 	bl	800e83c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009c00:	e011      	b.n	8009c26 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f aea4 	bne.w	8009958 <tcp_receive+0xbf4>
 8009c10:	e00a      	b.n	8009c28 <tcp_receive+0xec4>
                break;
 8009c12:	bf00      	nop
 8009c14:	e008      	b.n	8009c28 <tcp_receive+0xec4>
                break;
 8009c16:	bf00      	nop
 8009c18:	e006      	b.n	8009c28 <tcp_receive+0xec4>
                  break;
 8009c1a:	bf00      	nop
 8009c1c:	e004      	b.n	8009c28 <tcp_receive+0xec4>
                  break;
 8009c1e:	bf00      	nop
 8009c20:	e002      	b.n	8009c28 <tcp_receive+0xec4>
                  break;
 8009c22:	bf00      	nop
 8009c24:	e000      	b.n	8009c28 <tcp_receive+0xec4>
                break;
 8009c26:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 fe8b 	bl	800b944 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009c2e:	e003      	b.n	8009c38 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 fe87 	bl	800b944 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009c36:	e01a      	b.n	8009c6e <tcp_receive+0xf0a>
 8009c38:	e019      	b.n	8009c6e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <tcp_receive+0xf14>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	db0a      	blt.n	8009c5e <tcp_receive+0xefa>
 8009c48:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <tcp_receive+0xf14>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c54:	440b      	add	r3, r1
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	3301      	adds	r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	dd07      	ble.n	8009c6e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	8b5b      	ldrh	r3, [r3, #26]
 8009c62:	f043 0302 	orr.w	r3, r3, #2
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009c6c:	e7ff      	b.n	8009c6e <tcp_receive+0xf0a>
 8009c6e:	bf00      	nop
 8009c70:	3750      	adds	r7, #80	; 0x50
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bdb0      	pop	{r4, r5, r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000052c 	.word	0x2000052c
 8009c7c:	2000050c 	.word	0x2000050c
 8009c80:	20000536 	.word	0x20000536
 8009c84:	08010d1c 	.word	0x08010d1c
 8009c88:	080110c4 	.word	0x080110c4
 8009c8c:	08010d68 	.word	0x08010d68

08009c90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009c96:	4b15      	ldr	r3, [pc, #84]	; (8009cec <tcp_get_next_optbyte+0x5c>)
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	b291      	uxth	r1, r2
 8009c9e:	4a13      	ldr	r2, [pc, #76]	; (8009cec <tcp_get_next_optbyte+0x5c>)
 8009ca0:	8011      	strh	r1, [r2, #0]
 8009ca2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009ca4:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <tcp_get_next_optbyte+0x60>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d004      	beq.n	8009cb6 <tcp_get_next_optbyte+0x26>
 8009cac:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <tcp_get_next_optbyte+0x64>)
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	88fa      	ldrh	r2, [r7, #6]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d208      	bcs.n	8009cc8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009cb6:	4b10      	ldr	r3, [pc, #64]	; (8009cf8 <tcp_get_next_optbyte+0x68>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3314      	adds	r3, #20
 8009cbc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	e00b      	b.n	8009ce0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009cc8:	88fb      	ldrh	r3, [r7, #6]
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <tcp_get_next_optbyte+0x64>)
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009cd6:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <tcp_get_next_optbyte+0x60>)
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	797b      	ldrb	r3, [r7, #5]
 8009cdc:	4413      	add	r3, r2
 8009cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000528 	.word	0x20000528
 8009cf0:	20000524 	.word	0x20000524
 8009cf4:	20000522 	.word	0x20000522
 8009cf8:	2000051c 	.word	0x2000051c

08009cfc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <tcp_parseopt+0x1c>
 8009d0a:	4b32      	ldr	r3, [pc, #200]	; (8009dd4 <tcp_parseopt+0xd8>)
 8009d0c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009d10:	4931      	ldr	r1, [pc, #196]	; (8009dd8 <tcp_parseopt+0xdc>)
 8009d12:	4832      	ldr	r0, [pc, #200]	; (8009ddc <tcp_parseopt+0xe0>)
 8009d14:	f004 fd92 	bl	800e83c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009d18:	4b31      	ldr	r3, [pc, #196]	; (8009de0 <tcp_parseopt+0xe4>)
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d055      	beq.n	8009dcc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009d20:	4b30      	ldr	r3, [pc, #192]	; (8009de4 <tcp_parseopt+0xe8>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	e045      	b.n	8009db4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009d28:	f7ff ffb2 	bl	8009c90 <tcp_get_next_optbyte>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d006      	beq.n	8009d44 <tcp_parseopt+0x48>
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	dc2b      	bgt.n	8009d92 <tcp_parseopt+0x96>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d041      	beq.n	8009dc2 <tcp_parseopt+0xc6>
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d127      	bne.n	8009d92 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009d42:	e037      	b.n	8009db4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009d44:	f7ff ffa4 	bl	8009c90 <tcp_get_next_optbyte>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d13b      	bne.n	8009dc6 <tcp_parseopt+0xca>
 8009d4e:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <tcp_parseopt+0xe8>)
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	3301      	adds	r3, #1
 8009d54:	4a22      	ldr	r2, [pc, #136]	; (8009de0 <tcp_parseopt+0xe4>)
 8009d56:	8812      	ldrh	r2, [r2, #0]
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	da34      	bge.n	8009dc6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009d5c:	f7ff ff98 	bl	8009c90 <tcp_get_next_optbyte>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009d68:	f7ff ff92 	bl	8009c90 <tcp_get_next_optbyte>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	89bb      	ldrh	r3, [r7, #12]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009d76:	89bb      	ldrh	r3, [r7, #12]
 8009d78:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009d7c:	d804      	bhi.n	8009d88 <tcp_parseopt+0x8c>
 8009d7e:	89bb      	ldrh	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <tcp_parseopt+0x8c>
 8009d84:	89ba      	ldrh	r2, [r7, #12]
 8009d86:	e001      	b.n	8009d8c <tcp_parseopt+0x90>
 8009d88:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009d90:	e010      	b.n	8009db4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009d92:	f7ff ff7d 	bl	8009c90 <tcp_get_next_optbyte>
 8009d96:	4603      	mov	r3, r0
 8009d98:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d914      	bls.n	8009dca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <tcp_parseopt+0xe8>)
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	4413      	add	r3, r2
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	3b02      	subs	r3, #2
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <tcp_parseopt+0xe8>)
 8009db2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009db4:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <tcp_parseopt+0xe8>)
 8009db6:	881a      	ldrh	r2, [r3, #0]
 8009db8:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <tcp_parseopt+0xe4>)
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d3b3      	bcc.n	8009d28 <tcp_parseopt+0x2c>
 8009dc0:	e004      	b.n	8009dcc <tcp_parseopt+0xd0>
          return;
 8009dc2:	bf00      	nop
 8009dc4:	e002      	b.n	8009dcc <tcp_parseopt+0xd0>
            return;
 8009dc6:	bf00      	nop
 8009dc8:	e000      	b.n	8009dcc <tcp_parseopt+0xd0>
            return;
 8009dca:	bf00      	nop
      }
    }
  }
}
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	08010d1c 	.word	0x08010d1c
 8009dd8:	08011180 	.word	0x08011180
 8009ddc:	08010d68 	.word	0x08010d68
 8009de0:	20000520 	.word	0x20000520
 8009de4:	20000528 	.word	0x20000528

08009de8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <tcp_trigger_input_pcb_close+0x1c>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f043 0310 	orr.w	r3, r3, #16
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4b03      	ldr	r3, [pc, #12]	; (8009e04 <tcp_trigger_input_pcb_close+0x1c>)
 8009df8:	701a      	strb	r2, [r3, #0]
}
 8009dfa:	bf00      	nop
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	20000539 	.word	0x20000539

08009e08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <tcp_route+0x28>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	7a1b      	ldrb	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d006      	beq.n	8009e30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	7a1b      	ldrb	r3, [r3, #8]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fb f8b8 	bl	8004f9c <netif_get_by_index>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	e003      	b.n	8009e38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f003 fad5 	bl	800d3e0 <ip4_route>
 8009e36:	4603      	mov	r3, r0
  }
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <tcp_create_segment+0x22>
 8009e56:	4b44      	ldr	r3, [pc, #272]	; (8009f68 <tcp_create_segment+0x128>)
 8009e58:	22a3      	movs	r2, #163	; 0xa3
 8009e5a:	4944      	ldr	r1, [pc, #272]	; (8009f6c <tcp_create_segment+0x12c>)
 8009e5c:	4844      	ldr	r0, [pc, #272]	; (8009f70 <tcp_create_segment+0x130>)
 8009e5e:	f004 fced 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d105      	bne.n	8009e74 <tcp_create_segment+0x34>
 8009e68:	4b3f      	ldr	r3, [pc, #252]	; (8009f68 <tcp_create_segment+0x128>)
 8009e6a:	22a4      	movs	r2, #164	; 0xa4
 8009e6c:	4941      	ldr	r1, [pc, #260]	; (8009f74 <tcp_create_segment+0x134>)
 8009e6e:	4840      	ldr	r0, [pc, #256]	; (8009f70 <tcp_create_segment+0x130>)
 8009e70:	f004 fce4 	bl	800e83c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009e82:	2003      	movs	r0, #3
 8009e84:	f7fa fd8c 	bl	80049a0 <memp_malloc>
 8009e88:	6138      	str	r0, [r7, #16]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009e90:	68b8      	ldr	r0, [r7, #8]
 8009e92:	f7fb fbe3 	bl	800565c <pbuf_free>
    return NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e061      	b.n	8009f5e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009ea0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	891a      	ldrh	r2, [r3, #8]
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d205      	bcs.n	8009ec6 <tcp_create_segment+0x86>
 8009eba:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <tcp_create_segment+0x128>)
 8009ebc:	22b0      	movs	r2, #176	; 0xb0
 8009ebe:	492e      	ldr	r1, [pc, #184]	; (8009f78 <tcp_create_segment+0x138>)
 8009ec0:	482b      	ldr	r0, [pc, #172]	; (8009f70 <tcp_create_segment+0x130>)
 8009ec2:	f004 fcbb 	bl	800e83c <iprintf>
  seg->len = p->tot_len - optlen;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	891a      	ldrh	r2, [r3, #8]
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009ed6:	2114      	movs	r1, #20
 8009ed8:	68b8      	ldr	r0, [r7, #8]
 8009eda:	f7fb fb29 	bl	8005530 <pbuf_add_header>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009ee4:	6938      	ldr	r0, [r7, #16]
 8009ee6:	f7fc ffe6 	bl	8006eb6 <tcp_seg_free>
    return NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	e037      	b.n	8009f5e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8ada      	ldrh	r2, [r3, #22]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	68dc      	ldr	r4, [r3, #12]
 8009f00:	4610      	mov	r0, r2
 8009f02:	f7fa f8c1 	bl	8004088 <lwip_htons>
 8009f06:	4603      	mov	r3, r0
 8009f08:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8b1a      	ldrh	r2, [r3, #24]
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	68dc      	ldr	r4, [r3, #12]
 8009f12:	4610      	mov	r0, r2
 8009f14:	f7fa f8b8 	bl	8004088 <lwip_htons>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	68dc      	ldr	r4, [r3, #12]
 8009f20:	6838      	ldr	r0, [r7, #0]
 8009f22:	f7fa f8c6 	bl	80040b2 <lwip_htonl>
 8009f26:	4603      	mov	r3, r0
 8009f28:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	089b      	lsrs	r3, r3, #2
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3305      	adds	r3, #5
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	031b      	lsls	r3, r3, #12
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	68dc      	ldr	r4, [r3, #12]
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fa f89e 	bl	8004088 <lwip_htons>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	749a      	strb	r2, [r3, #18]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	74da      	strb	r2, [r3, #19]
  return seg;
 8009f5c:	693b      	ldr	r3, [r7, #16]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd90      	pop	{r4, r7, pc}
 8009f66:	bf00      	nop
 8009f68:	0801119c 	.word	0x0801119c
 8009f6c:	080111d0 	.word	0x080111d0
 8009f70:	080111f0 	.word	0x080111f0
 8009f74:	08011218 	.word	0x08011218
 8009f78:	0801123c 	.word	0x0801123c

08009f7c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	607b      	str	r3, [r7, #4]
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	81bb      	strh	r3, [r7, #12]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009f90:	89bb      	ldrh	r3, [r7, #12]
 8009f92:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <tcp_pbuf_prealloc+0x2a>
 8009f9a:	4b30      	ldr	r3, [pc, #192]	; (800a05c <tcp_pbuf_prealloc+0xe0>)
 8009f9c:	22e8      	movs	r2, #232	; 0xe8
 8009f9e:	4930      	ldr	r1, [pc, #192]	; (800a060 <tcp_pbuf_prealloc+0xe4>)
 8009fa0:	4830      	ldr	r0, [pc, #192]	; (800a064 <tcp_pbuf_prealloc+0xe8>)
 8009fa2:	f004 fc4b 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d105      	bne.n	8009fb8 <tcp_pbuf_prealloc+0x3c>
 8009fac:	4b2b      	ldr	r3, [pc, #172]	; (800a05c <tcp_pbuf_prealloc+0xe0>)
 8009fae:	22e9      	movs	r2, #233	; 0xe9
 8009fb0:	492d      	ldr	r1, [pc, #180]	; (800a068 <tcp_pbuf_prealloc+0xec>)
 8009fb2:	482c      	ldr	r0, [pc, #176]	; (800a064 <tcp_pbuf_prealloc+0xe8>)
 8009fb4:	f004 fc42 	bl	800e83c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009fb8:	89ba      	ldrh	r2, [r7, #12]
 8009fba:	897b      	ldrh	r3, [r7, #10]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d221      	bcs.n	800a004 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d111      	bne.n	8009ff0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	8b5b      	ldrh	r3, [r3, #26]
 8009fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d115      	bne.n	800a004 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009fd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d007      	beq.n	8009ff0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009ff0:	89bb      	ldrh	r3, [r7, #12]
 8009ff2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009ff6:	f023 0203 	bic.w	r2, r3, #3
 8009ffa:	897b      	ldrh	r3, [r7, #10]
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	bf28      	it	cs
 800a000:	4613      	movcs	r3, r2
 800a002:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a004:	8af9      	ldrh	r1, [r7, #22]
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fb f841 	bl	8005094 <pbuf_alloc>
 800a012:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e019      	b.n	800a052 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d006      	beq.n	800a034 <tcp_pbuf_prealloc+0xb8>
 800a026:	4b0d      	ldr	r3, [pc, #52]	; (800a05c <tcp_pbuf_prealloc+0xe0>)
 800a028:	f240 120b 	movw	r2, #267	; 0x10b
 800a02c:	490f      	ldr	r1, [pc, #60]	; (800a06c <tcp_pbuf_prealloc+0xf0>)
 800a02e:	480d      	ldr	r0, [pc, #52]	; (800a064 <tcp_pbuf_prealloc+0xe8>)
 800a030:	f004 fc04 	bl	800e83c <iprintf>
  *oversize = p->len - length;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	895a      	ldrh	r2, [r3, #10]
 800a038:	89bb      	ldrh	r3, [r7, #12]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	89ba      	ldrh	r2, [r7, #12]
 800a046:	811a      	strh	r2, [r3, #8]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	891a      	ldrh	r2, [r3, #8]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	815a      	strh	r2, [r3, #10]
  return p;
 800a050:	693b      	ldr	r3, [r7, #16]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	0801119c 	.word	0x0801119c
 800a060:	08011254 	.word	0x08011254
 800a064:	080111f0 	.word	0x080111f0
 800a068:	08011278 	.word	0x08011278
 800a06c:	08011298 	.word	0x08011298

0800a070 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <tcp_write_checks+0x20>
 800a082:	4b33      	ldr	r3, [pc, #204]	; (800a150 <tcp_write_checks+0xe0>)
 800a084:	f240 1233 	movw	r2, #307	; 0x133
 800a088:	4932      	ldr	r1, [pc, #200]	; (800a154 <tcp_write_checks+0xe4>)
 800a08a:	4833      	ldr	r0, [pc, #204]	; (800a158 <tcp_write_checks+0xe8>)
 800a08c:	f004 fbd6 	bl	800e83c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	7d1b      	ldrb	r3, [r3, #20]
 800a094:	2b04      	cmp	r3, #4
 800a096:	d00e      	beq.n	800a0b6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a09c:	2b07      	cmp	r3, #7
 800a09e:	d00a      	beq.n	800a0b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d006      	beq.n	800a0b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d002      	beq.n	800a0b6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a0b0:	f06f 030a 	mvn.w	r3, #10
 800a0b4:	e048      	b.n	800a148 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a0b6:	887b      	ldrh	r3, [r7, #2]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <tcp_write_checks+0x50>
    return ERR_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e043      	b.n	800a148 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0c6:	887a      	ldrh	r2, [r7, #2]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d909      	bls.n	800a0e0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8b5b      	ldrh	r3, [r3, #26]
 800a0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0de:	e033      	b.n	800a148 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d909      	bls.n	800a0fe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	8b5b      	ldrh	r3, [r3, #26]
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0fc:	e024      	b.n	800a148 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00f      	beq.n	800a128 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d11a      	bne.n	800a146 <tcp_write_checks+0xd6>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d116      	bne.n	800a146 <tcp_write_checks+0xd6>
 800a118:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <tcp_write_checks+0xe0>)
 800a11a:	f240 1255 	movw	r2, #341	; 0x155
 800a11e:	490f      	ldr	r1, [pc, #60]	; (800a15c <tcp_write_checks+0xec>)
 800a120:	480d      	ldr	r0, [pc, #52]	; (800a158 <tcp_write_checks+0xe8>)
 800a122:	f004 fb8b 	bl	800e83c <iprintf>
 800a126:	e00e      	b.n	800a146 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d103      	bne.n	800a138 <tcp_write_checks+0xc8>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <tcp_write_checks+0xd6>
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <tcp_write_checks+0xe0>)
 800a13a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a13e:	4908      	ldr	r1, [pc, #32]	; (800a160 <tcp_write_checks+0xf0>)
 800a140:	4805      	ldr	r0, [pc, #20]	; (800a158 <tcp_write_checks+0xe8>)
 800a142:	f004 fb7b 	bl	800e83c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	0801119c 	.word	0x0801119c
 800a154:	080112ac 	.word	0x080112ac
 800a158:	080111f0 	.word	0x080111f0
 800a15c:	080112cc 	.word	0x080112cc
 800a160:	08011308 	.word	0x08011308

0800a164 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a164:	b590      	push	{r4, r7, lr}
 800a166:	b09b      	sub	sp, #108	; 0x6c
 800a168:	af04      	add	r7, sp, #16
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	4611      	mov	r1, r2
 800a170:	461a      	mov	r2, r3
 800a172:	460b      	mov	r3, r1
 800a174:	80fb      	strh	r3, [r7, #6]
 800a176:	4613      	mov	r3, r2
 800a178:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	653b      	str	r3, [r7, #80]	; 0x50
 800a182:	2300      	movs	r3, #0
 800a184:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a186:	2300      	movs	r3, #0
 800a188:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18a:	2300      	movs	r3, #0
 800a18c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a18e:	2300      	movs	r3, #0
 800a190:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d109      	bne.n	800a1c0 <tcp_write+0x5c>
 800a1ac:	4ba4      	ldr	r3, [pc, #656]	; (800a440 <tcp_write+0x2dc>)
 800a1ae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a1b2:	49a4      	ldr	r1, [pc, #656]	; (800a444 <tcp_write+0x2e0>)
 800a1b4:	48a4      	ldr	r0, [pc, #656]	; (800a448 <tcp_write+0x2e4>)
 800a1b6:	f004 fb41 	bl	800e83c <iprintf>
 800a1ba:	f06f 030f 	mvn.w	r3, #15
 800a1be:	e32a      	b.n	800a816 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	bf28      	it	cs
 800a1d2:	4613      	movcs	r3, r2
 800a1d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a1d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d102      	bne.n	800a1e2 <tcp_write+0x7e>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1e0:	e000      	b.n	800a1e4 <tcp_write+0x80>
 800a1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d109      	bne.n	800a200 <tcp_write+0x9c>
 800a1ec:	4b94      	ldr	r3, [pc, #592]	; (800a440 <tcp_write+0x2dc>)
 800a1ee:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a1f2:	4996      	ldr	r1, [pc, #600]	; (800a44c <tcp_write+0x2e8>)
 800a1f4:	4894      	ldr	r0, [pc, #592]	; (800a448 <tcp_write+0x2e4>)
 800a1f6:	f004 fb21 	bl	800e83c <iprintf>
 800a1fa:	f06f 030f 	mvn.w	r3, #15
 800a1fe:	e30a      	b.n	800a816 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	4619      	mov	r1, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff ff33 	bl	800a070 <tcp_write_checks>
 800a20a:	4603      	mov	r3, r0
 800a20c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a210:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <tcp_write+0xba>
    return err;
 800a218:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a21c:	e2fb      	b.n	800a816 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a224:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80f6 	beq.w	800a424 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a23c:	653b      	str	r3, [r7, #80]	; 0x50
 800a23e:	e002      	b.n	800a246 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1f8      	bne.n	800a240 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a250:	7a9b      	ldrb	r3, [r3, #10]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	b29b      	uxth	r3, r3
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a25c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a260:	891b      	ldrh	r3, [r3, #8]
 800a262:	4619      	mov	r1, r3
 800a264:	8c3b      	ldrh	r3, [r7, #32]
 800a266:	440b      	add	r3, r1
 800a268:	429a      	cmp	r2, r3
 800a26a:	da06      	bge.n	800a27a <tcp_write+0x116>
 800a26c:	4b74      	ldr	r3, [pc, #464]	; (800a440 <tcp_write+0x2dc>)
 800a26e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a272:	4977      	ldr	r1, [pc, #476]	; (800a450 <tcp_write+0x2ec>)
 800a274:	4874      	ldr	r0, [pc, #464]	; (800a448 <tcp_write+0x2e4>)
 800a276:	f004 fae1 	bl	800e83c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27c:	891a      	ldrh	r2, [r3, #8]
 800a27e:	8c3b      	ldrh	r3, [r7, #32]
 800a280:	4413      	add	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a290:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a292:	8a7b      	ldrh	r3, [r7, #18]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d026      	beq.n	800a2e6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a298:	8a7b      	ldrh	r3, [r7, #18]
 800a29a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d206      	bcs.n	800a2ae <tcp_write+0x14a>
 800a2a0:	4b67      	ldr	r3, [pc, #412]	; (800a440 <tcp_write+0x2dc>)
 800a2a2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a2a6:	496b      	ldr	r1, [pc, #428]	; (800a454 <tcp_write+0x2f0>)
 800a2a8:	4867      	ldr	r0, [pc, #412]	; (800a448 <tcp_write+0x2e4>)
 800a2aa:	f004 fac7 	bl	800e83c <iprintf>
      seg = last_unsent;
 800a2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a2b2:	8a7b      	ldrh	r3, [r7, #18]
 800a2b4:	88fa      	ldrh	r2, [r7, #6]
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	bf28      	it	cs
 800a2ba:	4613      	movcs	r3, r2
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	bf28      	it	cs
 800a2c4:	4613      	movcs	r3, r2
 800a2c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a2c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a2cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a2d4:	8a7a      	ldrh	r2, [r7, #18]
 800a2d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a2de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a2e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a2e6:	8a7b      	ldrh	r3, [r7, #18]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <tcp_write+0x1a0>
 800a2ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a2f0:	88fb      	ldrh	r3, [r7, #6]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d006      	beq.n	800a304 <tcp_write+0x1a0>
 800a2f6:	4b52      	ldr	r3, [pc, #328]	; (800a440 <tcp_write+0x2dc>)
 800a2f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2fc:	4956      	ldr	r1, [pc, #344]	; (800a458 <tcp_write+0x2f4>)
 800a2fe:	4852      	ldr	r0, [pc, #328]	; (800a448 <tcp_write+0x2e4>)
 800a300:	f004 fa9c 	bl	800e83c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a308:	88fb      	ldrh	r3, [r7, #6]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	f080 8167 	bcs.w	800a5de <tcp_write+0x47a>
 800a310:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 8163 	beq.w	800a5de <tcp_write+0x47a>
 800a318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a31a:	891b      	ldrh	r3, [r3, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 815e 	beq.w	800a5de <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a322:	88fa      	ldrh	r2, [r7, #6]
 800a324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a328:	1ad2      	subs	r2, r2, r3
 800a32a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a32c:	4293      	cmp	r3, r2
 800a32e:	bfa8      	it	ge
 800a330:	4613      	movge	r3, r2
 800a332:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a336:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a338:	797b      	ldrb	r3, [r7, #5]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d027      	beq.n	800a392 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a342:	f107 0012 	add.w	r0, r7, #18
 800a346:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a348:	8bf9      	ldrh	r1, [r7, #30]
 800a34a:	2301      	movs	r3, #1
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	797b      	ldrb	r3, [r7, #5]
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	4603      	mov	r3, r0
 800a358:	2000      	movs	r0, #0
 800a35a:	f7ff fe0f 	bl	8009f7c <tcp_pbuf_prealloc>
 800a35e:	6578      	str	r0, [r7, #84]	; 0x54
 800a360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8225 	beq.w	800a7b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a36a:	6858      	ldr	r0, [r3, #4]
 800a36c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	4413      	add	r3, r2
 800a374:	8bfa      	ldrh	r2, [r7, #30]
 800a376:	4619      	mov	r1, r3
 800a378:	f004 fa4a 	bl	800e810 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a37c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a37e:	f7fb f9f5 	bl	800576c <pbuf_clen>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a38a:	4413      	add	r3, r2
 800a38c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a390:	e041      	b.n	800a416 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	637b      	str	r3, [r7, #52]	; 0x34
 800a398:	e002      	b.n	800a3a0 <tcp_write+0x23c>
 800a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f8      	bne.n	800a39a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3aa:	7b1b      	ldrb	r3, [r3, #12]
 800a3ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d115      	bne.n	800a3e0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ba:	8952      	ldrh	r2, [r2, #10]
 800a3bc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d10d      	bne.n	800a3e0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a3c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <tcp_write+0x276>
 800a3cc:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <tcp_write+0x2dc>)
 800a3ce:	f240 2231 	movw	r2, #561	; 0x231
 800a3d2:	4922      	ldr	r1, [pc, #136]	; (800a45c <tcp_write+0x2f8>)
 800a3d4:	481c      	ldr	r0, [pc, #112]	; (800a448 <tcp_write+0x2e4>)
 800a3d6:	f004 fa31 	bl	800e83c <iprintf>
          extendlen = seglen;
 800a3da:	8bfb      	ldrh	r3, [r7, #30]
 800a3dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a3de:	e01a      	b.n	800a416 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a3e0:	8bfb      	ldrh	r3, [r7, #30]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7fa fe54 	bl	8005094 <pbuf_alloc>
 800a3ec:	6578      	str	r0, [r7, #84]	; 0x54
 800a3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 81e0 	beq.w	800a7b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a3f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	441a      	add	r2, r3
 800a3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a400:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a402:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a404:	f7fb f9b2 	bl	800576c <pbuf_clen>
 800a408:	4603      	mov	r3, r0
 800a40a:	461a      	mov	r2, r3
 800a40c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a410:	4413      	add	r3, r2
 800a412:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a416:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a41a:	8bfb      	ldrh	r3, [r7, #30]
 800a41c:	4413      	add	r3, r2
 800a41e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a422:	e0dc      	b.n	800a5de <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 80d7 	beq.w	800a5de <tcp_write+0x47a>
 800a430:	4b03      	ldr	r3, [pc, #12]	; (800a440 <tcp_write+0x2dc>)
 800a432:	f240 224a 	movw	r2, #586	; 0x24a
 800a436:	490a      	ldr	r1, [pc, #40]	; (800a460 <tcp_write+0x2fc>)
 800a438:	4803      	ldr	r0, [pc, #12]	; (800a448 <tcp_write+0x2e4>)
 800a43a:	f004 f9ff 	bl	800e83c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a43e:	e0ce      	b.n	800a5de <tcp_write+0x47a>
 800a440:	0801119c 	.word	0x0801119c
 800a444:	0801133c 	.word	0x0801133c
 800a448:	080111f0 	.word	0x080111f0
 800a44c:	08011354 	.word	0x08011354
 800a450:	08011388 	.word	0x08011388
 800a454:	080113a0 	.word	0x080113a0
 800a458:	080113c0 	.word	0x080113c0
 800a45c:	080113e0 	.word	0x080113e0
 800a460:	0801140c 	.word	0x0801140c
    struct pbuf *p;
    u16_t left = len - pos;
 800a464:	88fa      	ldrh	r2, [r7, #6]
 800a466:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a46e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a472:	b29b      	uxth	r3, r3
 800a474:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a47a:	8b7a      	ldrh	r2, [r7, #26]
 800a47c:	8bbb      	ldrh	r3, [r7, #28]
 800a47e:	4293      	cmp	r3, r2
 800a480:	bf28      	it	cs
 800a482:	4613      	movcs	r3, r2
 800a484:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a486:	797b      	ldrb	r3, [r7, #5]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d036      	beq.n	800a4fe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a490:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a494:	b29a      	uxth	r2, r3
 800a496:	8b3b      	ldrh	r3, [r7, #24]
 800a498:	4413      	add	r3, r2
 800a49a:	b299      	uxth	r1, r3
 800a49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bf0c      	ite	eq
 800a4a2:	2301      	moveq	r3, #1
 800a4a4:	2300      	movne	r3, #0
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f107 0012 	add.w	r0, r7, #18
 800a4ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4ae:	9302      	str	r3, [sp, #8]
 800a4b0:	797b      	ldrb	r3, [r7, #5]
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2036      	movs	r0, #54	; 0x36
 800a4bc:	f7ff fd5e 	bl	8009f7c <tcp_pbuf_prealloc>
 800a4c0:	6338      	str	r0, [r7, #48]	; 0x30
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 8178 	beq.w	800a7ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	895b      	ldrh	r3, [r3, #10]
 800a4ce:	8b3a      	ldrh	r2, [r7, #24]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d906      	bls.n	800a4e2 <tcp_write+0x37e>
 800a4d4:	4b8c      	ldr	r3, [pc, #560]	; (800a708 <tcp_write+0x5a4>)
 800a4d6:	f240 2266 	movw	r2, #614	; 0x266
 800a4da:	498c      	ldr	r1, [pc, #560]	; (800a70c <tcp_write+0x5a8>)
 800a4dc:	488c      	ldr	r0, [pc, #560]	; (800a710 <tcp_write+0x5ac>)
 800a4de:	f004 f9ad 	bl	800e83c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a4ea:	18d0      	adds	r0, r2, r3
 800a4ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	8b3a      	ldrh	r2, [r7, #24]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	f004 f98a 	bl	800e810 <memcpy>
 800a4fc:	e02f      	b.n	800a55e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a4fe:	8a7b      	ldrh	r3, [r7, #18]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d006      	beq.n	800a512 <tcp_write+0x3ae>
 800a504:	4b80      	ldr	r3, [pc, #512]	; (800a708 <tcp_write+0x5a4>)
 800a506:	f240 2271 	movw	r2, #625	; 0x271
 800a50a:	4982      	ldr	r1, [pc, #520]	; (800a714 <tcp_write+0x5b0>)
 800a50c:	4880      	ldr	r0, [pc, #512]	; (800a710 <tcp_write+0x5ac>)
 800a50e:	f004 f995 	bl	800e83c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a512:	8b3b      	ldrh	r3, [r7, #24]
 800a514:	2201      	movs	r2, #1
 800a516:	4619      	mov	r1, r3
 800a518:	2036      	movs	r0, #54	; 0x36
 800a51a:	f7fa fdbb 	bl	8005094 <pbuf_alloc>
 800a51e:	6178      	str	r0, [r7, #20]
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 814b 	beq.w	800a7be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a528:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	441a      	add	r2, r3
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a534:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a53e:	4619      	mov	r1, r3
 800a540:	2036      	movs	r0, #54	; 0x36
 800a542:	f7fa fda7 	bl	8005094 <pbuf_alloc>
 800a546:	6338      	str	r0, [r7, #48]	; 0x30
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a54e:	6978      	ldr	r0, [r7, #20]
 800a550:	f7fb f884 	bl	800565c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a554:	e136      	b.n	800a7c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a556:	6979      	ldr	r1, [r7, #20]
 800a558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a55a:	f7fb f941 	bl	80057e0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a55e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a560:	f7fb f904 	bl	800576c <pbuf_clen>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a56c:	4413      	add	r3, r2
 800a56e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a576:	2b09      	cmp	r3, #9
 800a578:	d903      	bls.n	800a582 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a57a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a57c:	f7fb f86e 	bl	800565c <pbuf_free>
      goto memerr;
 800a580:	e120      	b.n	800a7c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a586:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a58a:	441a      	add	r2, r3
 800a58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	4613      	mov	r3, r2
 800a594:	2200      	movs	r2, #0
 800a596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff fc51 	bl	8009e40 <tcp_create_segment>
 800a59e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a5a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 810d 	beq.w	800a7c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <tcp_write+0x450>
      queue = seg;
 800a5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a5b2:	e00c      	b.n	800a5ce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <tcp_write+0x464>
 800a5ba:	4b53      	ldr	r3, [pc, #332]	; (800a708 <tcp_write+0x5a4>)
 800a5bc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a5c0:	4955      	ldr	r1, [pc, #340]	; (800a718 <tcp_write+0x5b4>)
 800a5c2:	4853      	ldr	r0, [pc, #332]	; (800a710 <tcp_write+0x5ac>)
 800a5c4:	f004 f93a 	bl	800e83c <iprintf>
      prev_seg->next = seg;
 800a5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5cc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a5d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5d6:	8b3b      	ldrh	r3, [r7, #24]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a5de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5e2:	88fb      	ldrh	r3, [r7, #6]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	f4ff af3d 	bcc.w	800a464 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a5ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d02c      	beq.n	800a64a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a5f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5f6:	e01e      	b.n	800a636 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	891a      	ldrh	r2, [r3, #8]
 800a5fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5fe:	4413      	add	r3, r2
 800a600:	b29a      	uxth	r2, r3
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d110      	bne.n	800a630 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a614:	8952      	ldrh	r2, [r2, #10]
 800a616:	4413      	add	r3, r2
 800a618:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f004 f8f7 	bl	800e810 <memcpy>
        p->len += oversize_used;
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	895a      	ldrh	r2, [r3, #10]
 800a626:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a628:	4413      	add	r3, r2
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1dd      	bne.n	800a5f8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800a63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a63e:	891a      	ldrh	r2, [r3, #8]
 800a640:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a642:	4413      	add	r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a648:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a64a:	8a7a      	ldrh	r2, [r7, #18]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a654:	2b00      	cmp	r3, #0
 800a656:	d018      	beq.n	800a68a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <tcp_write+0x508>
 800a65e:	4b2a      	ldr	r3, [pc, #168]	; (800a708 <tcp_write+0x5a4>)
 800a660:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a664:	492d      	ldr	r1, [pc, #180]	; (800a71c <tcp_write+0x5b8>)
 800a666:	482a      	ldr	r0, [pc, #168]	; (800a710 <tcp_write+0x5ac>)
 800a668:	f004 f8e8 	bl	800e83c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a672:	4618      	mov	r0, r3
 800a674:	f7fb f8b4 	bl	80057e0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a67a:	891a      	ldrh	r2, [r3, #8]
 800a67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a67e:	891b      	ldrh	r3, [r3, #8]
 800a680:	4413      	add	r3, r2
 800a682:	b29a      	uxth	r2, r3
 800a684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a686:	811a      	strh	r2, [r3, #8]
 800a688:	e037      	b.n	800a6fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 800a68a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d034      	beq.n	800a6fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <tcp_write+0x53a>
 800a696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <tcp_write+0x548>
 800a69e:	4b1a      	ldr	r3, [pc, #104]	; (800a708 <tcp_write+0x5a4>)
 800a6a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a6a4:	491e      	ldr	r1, [pc, #120]	; (800a720 <tcp_write+0x5bc>)
 800a6a6:	481a      	ldr	r0, [pc, #104]	; (800a710 <tcp_write+0x5ac>)
 800a6a8:	f004 f8c8 	bl	800e83c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6b2:	e009      	b.n	800a6c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b6:	891a      	ldrh	r2, [r3, #8]
 800a6b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a6ba:	4413      	add	r3, r2
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1f1      	bne.n	800a6b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	891a      	ldrh	r2, [r3, #8]
 800a6d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a6d6:	4413      	add	r3, r2
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	895a      	ldrh	r2, [r3, #10]
 800a6e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a6e4:	4413      	add	r3, r2
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a6ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ee:	891a      	ldrh	r2, [r3, #8]
 800a6f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a6f2:	4413      	add	r3, r2
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d111      	bne.n	800a724 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a704:	66da      	str	r2, [r3, #108]	; 0x6c
 800a706:	e010      	b.n	800a72a <tcp_write+0x5c6>
 800a708:	0801119c 	.word	0x0801119c
 800a70c:	0801143c 	.word	0x0801143c
 800a710:	080111f0 	.word	0x080111f0
 800a714:	0801147c 	.word	0x0801147c
 800a718:	0801148c 	.word	0x0801148c
 800a71c:	080114a0 	.word	0x080114a0
 800a720:	080114d8 	.word	0x080114d8
  } else {
    last_unsent->next = queue;
 800a724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a728:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	441a      	add	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a73c:	88fb      	ldrh	r3, [r7, #6]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a74e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00e      	beq.n	800a77a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <tcp_write+0x616>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <tcp_write+0x616>
 800a76c:	4b2c      	ldr	r3, [pc, #176]	; (800a820 <tcp_write+0x6bc>)
 800a76e:	f240 3212 	movw	r2, #786	; 0x312
 800a772:	492c      	ldr	r1, [pc, #176]	; (800a824 <tcp_write+0x6c0>)
 800a774:	482c      	ldr	r0, [pc, #176]	; (800a828 <tcp_write+0x6c4>)
 800a776:	f004 f861 	bl	800e83c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d016      	beq.n	800a7ae <tcp_write+0x64a>
 800a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d012      	beq.n	800a7ae <tcp_write+0x64a>
 800a788:	797b      	ldrb	r3, [r7, #5]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10d      	bne.n	800a7ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	899b      	ldrh	r3, [r3, #12]
 800a798:	b29c      	uxth	r4, r3
 800a79a:	2008      	movs	r0, #8
 800a79c:	f7f9 fc74 	bl	8004088 <lwip_htons>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	4322      	orrs	r2, r4
 800a7aa:	b292      	uxth	r2, r2
 800a7ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e031      	b.n	800a816 <tcp_write+0x6b2>
          goto memerr;
 800a7b2:	bf00      	nop
 800a7b4:	e006      	b.n	800a7c4 <tcp_write+0x660>
            goto memerr;
 800a7b6:	bf00      	nop
 800a7b8:	e004      	b.n	800a7c4 <tcp_write+0x660>
        goto memerr;
 800a7ba:	bf00      	nop
 800a7bc:	e002      	b.n	800a7c4 <tcp_write+0x660>
        goto memerr;
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <tcp_write+0x660>
      goto memerr;
 800a7c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8b5b      	ldrh	r3, [r3, #26]
 800a7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <tcp_write+0x67a>
    pbuf_free(concat_p);
 800a7d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a7da:	f7fa ff3f 	bl	800565c <pbuf_free>
  }
  if (queue != NULL) {
 800a7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <tcp_write+0x686>
    tcp_segs_free(queue);
 800a7e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7e6:	f7fc fb51 	bl	8006e8c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00e      	beq.n	800a812 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <tcp_write+0x6ae>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d106      	bne.n	800a812 <tcp_write+0x6ae>
 800a804:	4b06      	ldr	r3, [pc, #24]	; (800a820 <tcp_write+0x6bc>)
 800a806:	f240 3227 	movw	r2, #807	; 0x327
 800a80a:	4906      	ldr	r1, [pc, #24]	; (800a824 <tcp_write+0x6c0>)
 800a80c:	4806      	ldr	r0, [pc, #24]	; (800a828 <tcp_write+0x6c4>)
 800a80e:	f004 f815 	bl	800e83c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a816:	4618      	mov	r0, r3
 800a818:	375c      	adds	r7, #92	; 0x5c
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd90      	pop	{r4, r7, pc}
 800a81e:	bf00      	nop
 800a820:	0801119c 	.word	0x0801119c
 800a824:	08011510 	.word	0x08011510
 800a828:	080111f0 	.word	0x080111f0

0800a82c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b08b      	sub	sp, #44	; 0x2c
 800a830:	af02      	add	r7, sp, #8
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a838:	2300      	movs	r3, #0
 800a83a:	61fb      	str	r3, [r7, #28]
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <tcp_split_unsent_seg+0x2c>
 800a84a:	4b95      	ldr	r3, [pc, #596]	; (800aaa0 <tcp_split_unsent_seg+0x274>)
 800a84c:	f240 324b 	movw	r2, #843	; 0x34b
 800a850:	4994      	ldr	r1, [pc, #592]	; (800aaa4 <tcp_split_unsent_seg+0x278>)
 800a852:	4895      	ldr	r0, [pc, #596]	; (800aaa8 <tcp_split_unsent_seg+0x27c>)
 800a854:	f003 fff2 	bl	800e83c <iprintf>

  useg = pcb->unsent;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d102      	bne.n	800a86a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a868:	e116      	b.n	800aa98 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a86a:	887b      	ldrh	r3, [r7, #2]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d109      	bne.n	800a884 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a870:	4b8b      	ldr	r3, [pc, #556]	; (800aaa0 <tcp_split_unsent_seg+0x274>)
 800a872:	f240 3253 	movw	r2, #851	; 0x353
 800a876:	498d      	ldr	r1, [pc, #564]	; (800aaac <tcp_split_unsent_seg+0x280>)
 800a878:	488b      	ldr	r0, [pc, #556]	; (800aaa8 <tcp_split_unsent_seg+0x27c>)
 800a87a:	f003 ffdf 	bl	800e83c <iprintf>
    return ERR_VAL;
 800a87e:	f06f 0305 	mvn.w	r3, #5
 800a882:	e109      	b.n	800aa98 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	891b      	ldrh	r3, [r3, #8]
 800a888:	887a      	ldrh	r2, [r7, #2]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d301      	bcc.n	800a892 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	e102      	b.n	800aa98 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a896:	887a      	ldrh	r2, [r7, #2]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d906      	bls.n	800a8aa <tcp_split_unsent_seg+0x7e>
 800a89c:	4b80      	ldr	r3, [pc, #512]	; (800aaa0 <tcp_split_unsent_seg+0x274>)
 800a89e:	f240 325b 	movw	r2, #859	; 0x35b
 800a8a2:	4983      	ldr	r1, [pc, #524]	; (800aab0 <tcp_split_unsent_seg+0x284>)
 800a8a4:	4880      	ldr	r0, [pc, #512]	; (800aaa8 <tcp_split_unsent_seg+0x27c>)
 800a8a6:	f003 ffc9 	bl	800e83c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	891b      	ldrh	r3, [r3, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <tcp_split_unsent_seg+0x94>
 800a8b2:	4b7b      	ldr	r3, [pc, #492]	; (800aaa0 <tcp_split_unsent_seg+0x274>)
 800a8b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a8b8:	497e      	ldr	r1, [pc, #504]	; (800aab4 <tcp_split_unsent_seg+0x288>)
 800a8ba:	487b      	ldr	r0, [pc, #492]	; (800aaa8 <tcp_split_unsent_seg+0x27c>)
 800a8bc:	f003 ffbe 	bl	800e83c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	7a9b      	ldrb	r3, [r3, #10]
 800a8c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 0304 	and.w	r3, r3, #4
 800a8d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	891a      	ldrh	r2, [r3, #8]
 800a8d6:	887b      	ldrh	r3, [r7, #2]
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	89bb      	ldrh	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	2036      	movs	r0, #54	; 0x36
 800a8ee:	f7fa fbd1 	bl	8005094 <pbuf_alloc>
 800a8f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 80b7 	beq.w	800aa6a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	891a      	ldrh	r2, [r3, #8]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	891b      	ldrh	r3, [r3, #8]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	b29a      	uxth	r2, r3
 800a90a:	887b      	ldrh	r3, [r7, #2]
 800a90c:	4413      	add	r3, r2
 800a90e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6858      	ldr	r0, [r3, #4]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	685a      	ldr	r2, [r3, #4]
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	18d1      	adds	r1, r2, r3
 800a91c:	897b      	ldrh	r3, [r7, #10]
 800a91e:	89ba      	ldrh	r2, [r7, #12]
 800a920:	f7fb f886 	bl	8005a30 <pbuf_copy_partial>
 800a924:	4603      	mov	r3, r0
 800a926:	461a      	mov	r2, r3
 800a928:	89bb      	ldrh	r3, [r7, #12]
 800a92a:	4293      	cmp	r3, r2
 800a92c:	f040 809f 	bne.w	800aa6e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	899b      	ldrh	r3, [r3, #12]
 800a936:	b29b      	uxth	r3, r3
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f9 fba5 	bl	8004088 <lwip_htons>
 800a93e:	4603      	mov	r3, r0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a946:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a948:	2300      	movs	r3, #0
 800a94a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a94c:	7efb      	ldrb	r3, [r7, #27]
 800a94e:	f003 0308 	and.w	r3, r3, #8
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a956:	7efb      	ldrb	r3, [r7, #27]
 800a958:	f023 0308 	bic.w	r3, r3, #8
 800a95c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a95e:	7ebb      	ldrb	r3, [r7, #26]
 800a960:	f043 0308 	orr.w	r3, r3, #8
 800a964:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a966:	7efb      	ldrb	r3, [r7, #27]
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a970:	7efb      	ldrb	r3, [r7, #27]
 800a972:	f023 0301 	bic.w	r3, r3, #1
 800a976:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a978:	7ebb      	ldrb	r3, [r7, #26]
 800a97a:	f043 0301 	orr.w	r3, r3, #1
 800a97e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	4618      	mov	r0, r3
 800a988:	f7f9 fb93 	bl	80040b2 <lwip_htonl>
 800a98c:	4602      	mov	r2, r0
 800a98e:	887b      	ldrh	r3, [r7, #2]
 800a990:	18d1      	adds	r1, r2, r3
 800a992:	7eba      	ldrb	r2, [r7, #26]
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	460b      	mov	r3, r1
 800a99a:	6939      	ldr	r1, [r7, #16]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff fa4f 	bl	8009e40 <tcp_create_segment>
 800a9a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d063      	beq.n	800aa72 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fa fedc 	bl	800576c <pbuf_clen>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9be:	1a9b      	subs	r3, r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	6858      	ldr	r0, [r3, #4]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	891a      	ldrh	r2, [r3, #8]
 800a9d2:	89bb      	ldrh	r3, [r7, #12]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	4619      	mov	r1, r3
 800a9da:	f7fa fcb9 	bl	8005350 <pbuf_realloc>
  useg->len -= remainder;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	891a      	ldrh	r2, [r3, #8]
 800a9e2:	89bb      	ldrh	r3, [r7, #12]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	899b      	ldrh	r3, [r3, #12]
 800a9f2:	b29c      	uxth	r4, r3
 800a9f4:	7efb      	ldrb	r3, [r7, #27]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7f9 fb45 	bl	8004088 <lwip_htons>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	461a      	mov	r2, r3
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	4322      	orrs	r2, r4
 800aa08:	b292      	uxth	r2, r2
 800aa0a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fa feab 	bl	800576c <pbuf_clen>
 800aa16:	4603      	mov	r3, r0
 800aa18:	461a      	mov	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa20:	4413      	add	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fa fe9c 	bl	800576c <pbuf_clen>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa3e:	4413      	add	r3, r2
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e016      	b.n	800aa98 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800aa6a:	bf00      	nop
 800aa6c:	e002      	b.n	800aa74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aa6e:	bf00      	nop
 800aa70:	e000      	b.n	800aa74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aa72:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d006      	beq.n	800aa88 <tcp_split_unsent_seg+0x25c>
 800aa7a:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <tcp_split_unsent_seg+0x274>)
 800aa7c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800aa80:	490d      	ldr	r1, [pc, #52]	; (800aab8 <tcp_split_unsent_seg+0x28c>)
 800aa82:	4809      	ldr	r0, [pc, #36]	; (800aaa8 <tcp_split_unsent_seg+0x27c>)
 800aa84:	f003 feda 	bl	800e83c <iprintf>
  if (p != NULL) {
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800aa8e:	6938      	ldr	r0, [r7, #16]
 800aa90:	f7fa fde4 	bl	800565c <pbuf_free>
  }

  return ERR_MEM;
 800aa94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3724      	adds	r7, #36	; 0x24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd90      	pop	{r4, r7, pc}
 800aaa0:	0801119c 	.word	0x0801119c
 800aaa4:	08011530 	.word	0x08011530
 800aaa8:	080111f0 	.word	0x080111f0
 800aaac:	08011554 	.word	0x08011554
 800aab0:	08011578 	.word	0x08011578
 800aab4:	08011588 	.word	0x08011588
 800aab8:	08011598 	.word	0x08011598

0800aabc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <tcp_send_fin+0x1c>
 800aaca:	4b21      	ldr	r3, [pc, #132]	; (800ab50 <tcp_send_fin+0x94>)
 800aacc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aad0:	4920      	ldr	r1, [pc, #128]	; (800ab54 <tcp_send_fin+0x98>)
 800aad2:	4821      	ldr	r0, [pc, #132]	; (800ab58 <tcp_send_fin+0x9c>)
 800aad4:	f003 feb2 	bl	800e83c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d02e      	beq.n	800ab3e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	e002      	b.n	800aaee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f8      	bne.n	800aae8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	899b      	ldrh	r3, [r3, #12]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f9 fac2 	bl	8004088 <lwip_htons>
 800ab04:	4603      	mov	r3, r0
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d116      	bne.n	800ab3e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	899b      	ldrh	r3, [r3, #12]
 800ab16:	b29c      	uxth	r4, r3
 800ab18:	2001      	movs	r0, #1
 800ab1a:	f7f9 fab5 	bl	8004088 <lwip_htons>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	461a      	mov	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	4322      	orrs	r2, r4
 800ab28:	b292      	uxth	r2, r2
 800ab2a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8b5b      	ldrh	r3, [r3, #26]
 800ab30:	f043 0320 	orr.w	r3, r3, #32
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e004      	b.n	800ab48 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ab3e:	2101      	movs	r1, #1
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f80b 	bl	800ab5c <tcp_enqueue_flags>
 800ab46:	4603      	mov	r3, r0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd90      	pop	{r4, r7, pc}
 800ab50:	0801119c 	.word	0x0801119c
 800ab54:	080115a4 	.word	0x080115a4
 800ab58:	080111f0 	.word	0x080111f0

0800ab5c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08a      	sub	sp, #40	; 0x28
 800ab60:	af02      	add	r7, sp, #8
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <tcp_enqueue_flags+0x2c>
 800ab7a:	4b67      	ldr	r3, [pc, #412]	; (800ad18 <tcp_enqueue_flags+0x1bc>)
 800ab7c:	f240 4211 	movw	r2, #1041	; 0x411
 800ab80:	4966      	ldr	r1, [pc, #408]	; (800ad1c <tcp_enqueue_flags+0x1c0>)
 800ab82:	4867      	ldr	r0, [pc, #412]	; (800ad20 <tcp_enqueue_flags+0x1c4>)
 800ab84:	f003 fe5a 	bl	800e83c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <tcp_enqueue_flags+0x40>
 800ab8e:	4b62      	ldr	r3, [pc, #392]	; (800ad18 <tcp_enqueue_flags+0x1bc>)
 800ab90:	f240 4213 	movw	r2, #1043	; 0x413
 800ab94:	4963      	ldr	r1, [pc, #396]	; (800ad24 <tcp_enqueue_flags+0x1c8>)
 800ab96:	4862      	ldr	r0, [pc, #392]	; (800ad20 <tcp_enqueue_flags+0x1c4>)
 800ab98:	f003 fe50 	bl	800e83c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aba6:	2301      	movs	r3, #1
 800aba8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800abbe:	4619      	mov	r1, r3
 800abc0:	2036      	movs	r0, #54	; 0x36
 800abc2:	f7fa fa67 	bl	8005094 <pbuf_alloc>
 800abc6:	6138      	str	r0, [r7, #16]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d109      	bne.n	800abe2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	8b5b      	ldrh	r3, [r3, #26]
 800abd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abe0:	e095      	b.n	800ad0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	895a      	ldrh	r2, [r3, #10]
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	429a      	cmp	r2, r3
 800abec:	d206      	bcs.n	800abfc <tcp_enqueue_flags+0xa0>
 800abee:	4b4a      	ldr	r3, [pc, #296]	; (800ad18 <tcp_enqueue_flags+0x1bc>)
 800abf0:	f240 4239 	movw	r2, #1081	; 0x439
 800abf4:	494c      	ldr	r1, [pc, #304]	; (800ad28 <tcp_enqueue_flags+0x1cc>)
 800abf6:	484a      	ldr	r0, [pc, #296]	; (800ad20 <tcp_enqueue_flags+0x1c4>)
 800abf8:	f003 fe20 	bl	800e83c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ac00:	78fa      	ldrb	r2, [r7, #3]
 800ac02:	7ffb      	ldrb	r3, [r7, #31]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	460b      	mov	r3, r1
 800ac08:	6939      	ldr	r1, [r7, #16]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff f918 	bl	8009e40 <tcp_create_segment>
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	8b5b      	ldrh	r3, [r3, #26]
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac2a:	e070      	b.n	800ad0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d006      	beq.n	800ac46 <tcp_enqueue_flags+0xea>
 800ac38:	4b37      	ldr	r3, [pc, #220]	; (800ad18 <tcp_enqueue_flags+0x1bc>)
 800ac3a:	f240 4242 	movw	r2, #1090	; 0x442
 800ac3e:	493b      	ldr	r1, [pc, #236]	; (800ad2c <tcp_enqueue_flags+0x1d0>)
 800ac40:	4837      	ldr	r0, [pc, #220]	; (800ad20 <tcp_enqueue_flags+0x1c4>)
 800ac42:	f003 fdfb 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	891b      	ldrh	r3, [r3, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d006      	beq.n	800ac5c <tcp_enqueue_flags+0x100>
 800ac4e:	4b32      	ldr	r3, [pc, #200]	; (800ad18 <tcp_enqueue_flags+0x1bc>)
 800ac50:	f240 4243 	movw	r2, #1091	; 0x443
 800ac54:	4936      	ldr	r1, [pc, #216]	; (800ad30 <tcp_enqueue_flags+0x1d4>)
 800ac56:	4832      	ldr	r0, [pc, #200]	; (800ad20 <tcp_enqueue_flags+0x1c4>)
 800ac58:	f003 fdf0 	bl	800e83c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	66da      	str	r2, [r3, #108]	; 0x6c
 800ac6a:	e00d      	b.n	800ac88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac70:	61bb      	str	r3, [r7, #24]
 800ac72:	e002      	b.n	800ac7a <tcp_enqueue_flags+0x11e>
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	61bb      	str	r3, [r7, #24]
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f8      	bne.n	800ac74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d104      	bne.n	800aca4 <tcp_enqueue_flags+0x148>
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800acae:	78fb      	ldrb	r3, [r7, #3]
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d006      	beq.n	800acc6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	8b5b      	ldrh	r3, [r3, #26]
 800acbc:	f043 0320 	orr.w	r3, r3, #32
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	4618      	mov	r0, r3
 800accc:	f7fa fd4e 	bl	800576c <pbuf_clen>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acda:	4413      	add	r3, r2
 800acdc:	b29a      	uxth	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00e      	beq.n	800ad0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10a      	bne.n	800ad0c <tcp_enqueue_flags+0x1b0>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d106      	bne.n	800ad0c <tcp_enqueue_flags+0x1b0>
 800acfe:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <tcp_enqueue_flags+0x1bc>)
 800ad00:	f240 4265 	movw	r2, #1125	; 0x465
 800ad04:	490b      	ldr	r1, [pc, #44]	; (800ad34 <tcp_enqueue_flags+0x1d8>)
 800ad06:	4806      	ldr	r0, [pc, #24]	; (800ad20 <tcp_enqueue_flags+0x1c4>)
 800ad08:	f003 fd98 	bl	800e83c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	0801119c 	.word	0x0801119c
 800ad1c:	080115c0 	.word	0x080115c0
 800ad20:	080111f0 	.word	0x080111f0
 800ad24:	08011618 	.word	0x08011618
 800ad28:	08011638 	.word	0x08011638
 800ad2c:	08011674 	.word	0x08011674
 800ad30:	0801168c 	.word	0x0801168c
 800ad34:	080116b8 	.word	0x080116b8

0800ad38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ad38:	b5b0      	push	{r4, r5, r7, lr}
 800ad3a:	b08a      	sub	sp, #40	; 0x28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <tcp_output+0x1c>
 800ad46:	4b9e      	ldr	r3, [pc, #632]	; (800afc0 <tcp_output+0x288>)
 800ad48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ad4c:	499d      	ldr	r1, [pc, #628]	; (800afc4 <tcp_output+0x28c>)
 800ad4e:	489e      	ldr	r0, [pc, #632]	; (800afc8 <tcp_output+0x290>)
 800ad50:	f003 fd74 	bl	800e83c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	7d1b      	ldrb	r3, [r3, #20]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d106      	bne.n	800ad6a <tcp_output+0x32>
 800ad5c:	4b98      	ldr	r3, [pc, #608]	; (800afc0 <tcp_output+0x288>)
 800ad5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ad62:	499a      	ldr	r1, [pc, #616]	; (800afcc <tcp_output+0x294>)
 800ad64:	4898      	ldr	r0, [pc, #608]	; (800afc8 <tcp_output+0x290>)
 800ad66:	f003 fd69 	bl	800e83c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ad6a:	4b99      	ldr	r3, [pc, #612]	; (800afd0 <tcp_output+0x298>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d101      	bne.n	800ad78 <tcp_output+0x40>
    return ERR_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	e1ce      	b.n	800b116 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad84:	4293      	cmp	r3, r2
 800ad86:	bf28      	it	cs
 800ad88:	4613      	movcs	r3, r2
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	8b5b      	ldrh	r3, [r3, #26]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 81aa 	beq.w	800b0fc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fdcb 	bl	800b944 <tcp_send_empty_ack>
 800adae:	4603      	mov	r3, r0
 800adb0:	e1b1      	b.n	800b116 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3304      	adds	r3, #4
 800adb8:	461a      	mov	r2, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff f824 	bl	8009e08 <tcp_route>
 800adc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <tcp_output+0x96>
    return ERR_RTE;
 800adc8:	f06f 0303 	mvn.w	r3, #3
 800adcc:	e1a3      	b.n	800b116 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <tcp_output+0xa4>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d111      	bne.n	800ae00 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d002      	beq.n	800ade8 <tcp_output+0xb0>
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	3304      	adds	r3, #4
 800ade6:	e000      	b.n	800adea <tcp_output+0xb2>
 800ade8:	2300      	movs	r3, #0
 800adea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <tcp_output+0xc0>
      return ERR_RTE;
 800adf2:	f06f 0303 	mvn.w	r3, #3
 800adf6:	e18e      	b.n	800b116 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f9 f953 	bl	80040b2 <lwip_htonl>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae16:	8912      	ldrh	r2, [r2, #8]
 800ae18:	4413      	add	r3, r2
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d227      	bcs.n	800ae70 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae26:	461a      	mov	r2, r3
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d114      	bne.n	800ae58 <tcp_output+0x120>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d110      	bne.n	800ae58 <tcp_output+0x120>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	8b5b      	ldrh	r3, [r3, #26]
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 814d 	beq.w	800b100 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fd6c 	bl	800b944 <tcp_send_empty_ack>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	e152      	b.n	800b116 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 811c 	beq.w	800b0be <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ae86:	e002      	b.n	800ae8e <tcp_output+0x156>
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	623b      	str	r3, [r7, #32]
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1f8      	bne.n	800ae88 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ae96:	e112      	b.n	800b0be <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	899b      	ldrh	r3, [r3, #12]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7f9 f8f1 	bl	8004088 <lwip_htons>
 800aea6:	4603      	mov	r3, r0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	f003 0304 	and.w	r3, r3, #4
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <tcp_output+0x188>
 800aeb2:	4b43      	ldr	r3, [pc, #268]	; (800afc0 <tcp_output+0x288>)
 800aeb4:	f240 5236 	movw	r2, #1334	; 0x536
 800aeb8:	4946      	ldr	r1, [pc, #280]	; (800afd4 <tcp_output+0x29c>)
 800aeba:	4843      	ldr	r0, [pc, #268]	; (800afc8 <tcp_output+0x290>)
 800aebc:	f003 fcbe 	bl	800e83c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d01f      	beq.n	800af08 <tcp_output+0x1d0>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	8b5b      	ldrh	r3, [r3, #26]
 800aecc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d119      	bne.n	800af08 <tcp_output+0x1d0>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00b      	beq.n	800aef4 <tcp_output+0x1bc>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d110      	bne.n	800af08 <tcp_output+0x1d0>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeea:	891a      	ldrh	r2, [r3, #8]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d209      	bcs.n	800af08 <tcp_output+0x1d0>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <tcp_output+0x1d0>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af04:	2b08      	cmp	r3, #8
 800af06:	d901      	bls.n	800af0c <tcp_output+0x1d4>
 800af08:	2301      	movs	r3, #1
 800af0a:	e000      	b.n	800af0e <tcp_output+0x1d6>
 800af0c:	2300      	movs	r3, #0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	8b5b      	ldrh	r3, [r3, #26]
 800af16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 80e4 	beq.w	800b0e8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	7d1b      	ldrb	r3, [r3, #20]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d00d      	beq.n	800af44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	b29c      	uxth	r4, r3
 800af30:	2010      	movs	r0, #16
 800af32:	f7f9 f8a9 	bl	8004088 <lwip_htons>
 800af36:	4603      	mov	r3, r0
 800af38:	461a      	mov	r2, r3
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	4322      	orrs	r2, r4
 800af40:	b292      	uxth	r2, r2
 800af42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af4a:	f000 f909 	bl	800b160 <tcp_output_segment>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800af52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d009      	beq.n	800af6e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	8b5b      	ldrh	r3, [r3, #26]
 800af5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af62:	b29a      	uxth	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	835a      	strh	r2, [r3, #26]
      return err;
 800af68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af6c:	e0d3      	b.n	800b116 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7d1b      	ldrb	r3, [r3, #20]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d006      	beq.n	800af8c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	8b5b      	ldrh	r3, [r3, #26]
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	b29a      	uxth	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	f7f9 f88d 	bl	80040b2 <lwip_htonl>
 800af98:	4604      	mov	r4, r0
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	891b      	ldrh	r3, [r3, #8]
 800af9e:	461d      	mov	r5, r3
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	899b      	ldrh	r3, [r3, #12]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f9 f86d 	bl	8004088 <lwip_htons>
 800afae:	4603      	mov	r3, r0
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00e      	beq.n	800afd8 <tcp_output+0x2a0>
 800afba:	2301      	movs	r3, #1
 800afbc:	e00d      	b.n	800afda <tcp_output+0x2a2>
 800afbe:	bf00      	nop
 800afc0:	0801119c 	.word	0x0801119c
 800afc4:	080116e0 	.word	0x080116e0
 800afc8:	080111f0 	.word	0x080111f0
 800afcc:	080116f8 	.word	0x080116f8
 800afd0:	20008ea0 	.word	0x20008ea0
 800afd4:	08011720 	.word	0x08011720
 800afd8:	2300      	movs	r3, #0
 800afda:	442b      	add	r3, r5
 800afdc:	4423      	add	r3, r4
 800afde:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	da02      	bge.n	800aff2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	891b      	ldrh	r3, [r3, #8]
 800aff6:	461c      	mov	r4, r3
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	899b      	ldrh	r3, [r3, #12]
 800affe:	b29b      	uxth	r3, r3
 800b000:	4618      	mov	r0, r3
 800b002:	f7f9 f841 	bl	8004088 <lwip_htons>
 800b006:	4603      	mov	r3, r0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	f003 0303 	and.w	r3, r3, #3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <tcp_output+0x2de>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <tcp_output+0x2e0>
 800b016:	2300      	movs	r3, #0
 800b018:	4423      	add	r3, r4
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d049      	beq.n	800b0b2 <tcp_output+0x37a>
      seg->next = NULL;
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d105      	bne.n	800b038 <tcp_output+0x300>
        pcb->unacked = seg;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b030:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	623b      	str	r3, [r7, #32]
 800b036:	e03f      	b.n	800b0b8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f9 f837 	bl	80040b2 <lwip_htonl>
 800b044:	4604      	mov	r4, r0
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f9 f830 	bl	80040b2 <lwip_htonl>
 800b052:	4603      	mov	r3, r0
 800b054:	1ae3      	subs	r3, r4, r3
 800b056:	2b00      	cmp	r3, #0
 800b058:	da24      	bge.n	800b0a4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3370      	adds	r3, #112	; 0x70
 800b05e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b060:	e002      	b.n	800b068 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d011      	beq.n	800b094 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f9 f81a 	bl	80040b2 <lwip_htonl>
 800b07e:	4604      	mov	r4, r0
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	4618      	mov	r0, r3
 800b088:	f7f9 f813 	bl	80040b2 <lwip_htonl>
 800b08c:	4603      	mov	r3, r0
 800b08e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b090:	2b00      	cmp	r3, #0
 800b092:	dbe6      	blt.n	800b062 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	e009      	b.n	800b0b8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	623b      	str	r3, [r7, #32]
 800b0b0:	e002      	b.n	800b0b8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b0b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0b4:	f7fb feff 	bl	8006eb6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d012      	beq.n	800b0ea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f8 fff1 	bl	80040b2 <lwip_htonl>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0da:	8912      	ldrh	r2, [r2, #8]
 800b0dc:	4413      	add	r3, r2
  while (seg != NULL &&
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	f4bf aed9 	bcs.w	800ae98 <tcp_output+0x160>
 800b0e6:	e000      	b.n	800b0ea <tcp_output+0x3b2>
      break;
 800b0e8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d108      	bne.n	800b104 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b0fa:	e004      	b.n	800b106 <tcp_output+0x3ce>
    goto output_done;
 800b0fc:	bf00      	nop
 800b0fe:	e002      	b.n	800b106 <tcp_output+0x3ce>
    goto output_done;
 800b100:	bf00      	nop
 800b102:	e000      	b.n	800b106 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b104:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	8b5b      	ldrh	r3, [r3, #26]
 800b10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3728      	adds	r7, #40	; 0x28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bdb0      	pop	{r4, r5, r7, pc}
 800b11e:	bf00      	nop

0800b120 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <tcp_output_segment_busy+0x1c>
 800b12e:	4b09      	ldr	r3, [pc, #36]	; (800b154 <tcp_output_segment_busy+0x34>)
 800b130:	f240 529a 	movw	r2, #1434	; 0x59a
 800b134:	4908      	ldr	r1, [pc, #32]	; (800b158 <tcp_output_segment_busy+0x38>)
 800b136:	4809      	ldr	r0, [pc, #36]	; (800b15c <tcp_output_segment_busy+0x3c>)
 800b138:	f003 fb80 	bl	800e83c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	7b9b      	ldrb	r3, [r3, #14]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d001      	beq.n	800b14a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b146:	2301      	movs	r3, #1
 800b148:	e000      	b.n	800b14c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	0801119c 	.word	0x0801119c
 800b158:	08011738 	.word	0x08011738
 800b15c:	080111f0 	.word	0x080111f0

0800b160 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b160:	b5b0      	push	{r4, r5, r7, lr}
 800b162:	b08c      	sub	sp, #48	; 0x30
 800b164:	af04      	add	r7, sp, #16
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <tcp_output_segment+0x20>
 800b172:	4b63      	ldr	r3, [pc, #396]	; (800b300 <tcp_output_segment+0x1a0>)
 800b174:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b178:	4962      	ldr	r1, [pc, #392]	; (800b304 <tcp_output_segment+0x1a4>)
 800b17a:	4863      	ldr	r0, [pc, #396]	; (800b308 <tcp_output_segment+0x1a8>)
 800b17c:	f003 fb5e 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d106      	bne.n	800b194 <tcp_output_segment+0x34>
 800b186:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <tcp_output_segment+0x1a0>)
 800b188:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b18c:	495f      	ldr	r1, [pc, #380]	; (800b30c <tcp_output_segment+0x1ac>)
 800b18e:	485e      	ldr	r0, [pc, #376]	; (800b308 <tcp_output_segment+0x1a8>)
 800b190:	f003 fb54 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d106      	bne.n	800b1a8 <tcp_output_segment+0x48>
 800b19a:	4b59      	ldr	r3, [pc, #356]	; (800b300 <tcp_output_segment+0x1a0>)
 800b19c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b1a0:	495b      	ldr	r1, [pc, #364]	; (800b310 <tcp_output_segment+0x1b0>)
 800b1a2:	4859      	ldr	r0, [pc, #356]	; (800b308 <tcp_output_segment+0x1a8>)
 800b1a4:	f003 fb4a 	bl	800e83c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff ffb9 	bl	800b120 <tcp_output_segment_busy>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e09f      	b.n	800b2f8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	68dc      	ldr	r4, [r3, #12]
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	f7f8 ff76 	bl	80040b2 <lwip_htonl>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	68dc      	ldr	r4, [r3, #12]
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	f7f8 ff58 	bl	8004088 <lwip_htons>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b1e4:	441a      	add	r2, r3
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	3314      	adds	r3, #20
 800b1f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	7a9b      	ldrb	r3, [r3, #10]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d015      	beq.n	800b22a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	3304      	adds	r3, #4
 800b202:	461a      	mov	r2, r3
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b20a:	f7fc fa37 	bl	800767c <tcp_eff_send_mss_netif>
 800b20e:	4603      	mov	r3, r0
 800b210:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b212:	8b7b      	ldrh	r3, [r7, #26]
 800b214:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f8 ff4a 	bl	80040b2 <lwip_htonl>
 800b21e:	4602      	mov	r2, r0
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	3304      	adds	r3, #4
 800b228:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b230:	2b00      	cmp	r3, #0
 800b232:	da02      	bge.n	800b23a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2200      	movs	r2, #0
 800b238:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10c      	bne.n	800b25c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b242:	4b34      	ldr	r3, [pc, #208]	; (800b314 <tcp_output_segment+0x1b4>)
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4618      	mov	r0, r3
 800b252:	f7f8 ff2e 	bl	80040b2 <lwip_htonl>
 800b256:	4602      	mov	r2, r0
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	8959      	ldrh	r1, [r3, #10]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	8b3a      	ldrh	r2, [r7, #24]
 800b276:	1a8a      	subs	r2, r1, r2
 800b278:	b292      	uxth	r2, r2
 800b27a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	8919      	ldrh	r1, [r3, #8]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	8b3a      	ldrh	r2, [r7, #24]
 800b288:	1a8a      	subs	r2, r1, r2
 800b28a:	b292      	uxth	r2, r2
 800b28c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	68d2      	ldr	r2, [r2, #12]
 800b296:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	741a      	strb	r2, [r3, #16]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	f103 0214 	add.w	r2, r3, #20
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	7a9b      	ldrb	r3, [r3, #10]
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	4413      	add	r3, r2
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d006      	beq.n	800b2cc <tcp_output_segment+0x16c>
 800b2be:	4b10      	ldr	r3, [pc, #64]	; (800b300 <tcp_output_segment+0x1a0>)
 800b2c0:	f240 621c 	movw	r2, #1564	; 0x61c
 800b2c4:	4914      	ldr	r1, [pc, #80]	; (800b318 <tcp_output_segment+0x1b8>)
 800b2c6:	4810      	ldr	r0, [pc, #64]	; (800b308 <tcp_output_segment+0x1a8>)
 800b2c8:	f003 fab8 	bl	800e83c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6858      	ldr	r0, [r3, #4]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	1d1c      	adds	r4, r3, #4
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	7add      	ldrb	r5, [r3, #11]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	7a9b      	ldrb	r3, [r3, #10]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	9202      	str	r2, [sp, #8]
 800b2e2:	2206      	movs	r2, #6
 800b2e4:	9201      	str	r2, [sp, #4]
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	f002 fa36 	bl	800d75c <ip4_output_if>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3720      	adds	r7, #32
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bdb0      	pop	{r4, r5, r7, pc}
 800b300:	0801119c 	.word	0x0801119c
 800b304:	08011760 	.word	0x08011760
 800b308:	080111f0 	.word	0x080111f0
 800b30c:	08011780 	.word	0x08011780
 800b310:	080117a0 	.word	0x080117a0
 800b314:	20008e90 	.word	0x20008e90
 800b318:	080117c4 	.word	0x080117c4

0800b31c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b31c:	b5b0      	push	{r4, r5, r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <tcp_rexmit_rto_prepare+0x1c>
 800b32a:	4b31      	ldr	r3, [pc, #196]	; (800b3f0 <tcp_rexmit_rto_prepare+0xd4>)
 800b32c:	f240 6263 	movw	r2, #1635	; 0x663
 800b330:	4930      	ldr	r1, [pc, #192]	; (800b3f4 <tcp_rexmit_rto_prepare+0xd8>)
 800b332:	4831      	ldr	r0, [pc, #196]	; (800b3f8 <tcp_rexmit_rto_prepare+0xdc>)
 800b334:	f003 fa82 	bl	800e83c <iprintf>

  if (pcb->unacked == NULL) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b340:	f06f 0305 	mvn.w	r3, #5
 800b344:	e050      	b.n	800b3e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e00b      	b.n	800b366 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f7ff fee6 	bl	800b120 <tcp_output_segment_busy>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b35a:	f06f 0305 	mvn.w	r3, #5
 800b35e:	e043      	b.n	800b3e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1ef      	bne.n	800b34e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff fed6 	bl	800b120 <tcp_output_segment_busy>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b37a:	f06f 0305 	mvn.w	r3, #5
 800b37e:	e033      	b.n	800b3e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	8b5b      	ldrh	r3, [r3, #26]
 800b39a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f8 fe81 	bl	80040b2 <lwip_htonl>
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	891b      	ldrh	r3, [r3, #8]
 800b3b6:	461d      	mov	r5, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	899b      	ldrh	r3, [r3, #12]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7f8 fe61 	bl	8004088 <lwip_htons>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <tcp_rexmit_rto_prepare+0xba>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <tcp_rexmit_rto_prepare+0xbc>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	442b      	add	r3, r5
 800b3da:	18e2      	adds	r2, r4, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bdb0      	pop	{r4, r5, r7, pc}
 800b3f0:	0801119c 	.word	0x0801119c
 800b3f4:	080117d8 	.word	0x080117d8
 800b3f8:	080111f0 	.word	0x080111f0

0800b3fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <tcp_rexmit_rto_commit+0x1c>
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <tcp_rexmit_rto_commit+0x44>)
 800b40c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b410:	490c      	ldr	r1, [pc, #48]	; (800b444 <tcp_rexmit_rto_commit+0x48>)
 800b412:	480d      	ldr	r0, [pc, #52]	; (800b448 <tcp_rexmit_rto_commit+0x4c>)
 800b414:	f003 fa12 	bl	800e83c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b41e:	2bff      	cmp	r3, #255	; 0xff
 800b420:	d007      	beq.n	800b432 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b428:	3301      	adds	r3, #1
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff fc80 	bl	800ad38 <tcp_output>
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	0801119c 	.word	0x0801119c
 800b444:	080117fc 	.word	0x080117fc
 800b448:	080111f0 	.word	0x080111f0

0800b44c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <tcp_rexmit_rto+0x1c>
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <tcp_rexmit_rto+0x38>)
 800b45c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b460:	4909      	ldr	r1, [pc, #36]	; (800b488 <tcp_rexmit_rto+0x3c>)
 800b462:	480a      	ldr	r0, [pc, #40]	; (800b48c <tcp_rexmit_rto+0x40>)
 800b464:	f003 f9ea 	bl	800e83c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff57 	bl	800b31c <tcp_rexmit_rto_prepare>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff ffc1 	bl	800b3fc <tcp_rexmit_rto_commit>
  }
}
 800b47a:	bf00      	nop
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	0801119c 	.word	0x0801119c
 800b488:	08011820 	.word	0x08011820
 800b48c:	080111f0 	.word	0x080111f0

0800b490 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b490:	b590      	push	{r4, r7, lr}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <tcp_rexmit+0x1c>
 800b49e:	4b2f      	ldr	r3, [pc, #188]	; (800b55c <tcp_rexmit+0xcc>)
 800b4a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b4a4:	492e      	ldr	r1, [pc, #184]	; (800b560 <tcp_rexmit+0xd0>)
 800b4a6:	482f      	ldr	r0, [pc, #188]	; (800b564 <tcp_rexmit+0xd4>)
 800b4a8:	f003 f9c8 	bl	800e83c <iprintf>

  if (pcb->unacked == NULL) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b4b4:	f06f 0305 	mvn.w	r3, #5
 800b4b8:	e04c      	b.n	800b554 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b4c0:	68b8      	ldr	r0, [r7, #8]
 800b4c2:	f7ff fe2d 	bl	800b120 <tcp_output_segment_busy>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b4cc:	f06f 0305 	mvn.w	r3, #5
 800b4d0:	e040      	b.n	800b554 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	336c      	adds	r3, #108	; 0x6c
 800b4de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b4e0:	e002      	b.n	800b4e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d011      	beq.n	800b514 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f8 fdda 	bl	80040b2 <lwip_htonl>
 800b4fe:	4604      	mov	r4, r0
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	f7f8 fdd3 	bl	80040b2 <lwip_htonl>
 800b50c:	4603      	mov	r3, r0
 800b50e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b510:	2b00      	cmp	r3, #0
 800b512:	dbe6      	blt.n	800b4e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d103      	bne.n	800b532 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b538:	2bff      	cmp	r3, #255	; 0xff
 800b53a:	d007      	beq.n	800b54c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b542:	3301      	adds	r3, #1
 800b544:	b2da      	uxtb	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd90      	pop	{r4, r7, pc}
 800b55c:	0801119c 	.word	0x0801119c
 800b560:	0801183c 	.word	0x0801183c
 800b564:	080111f0 	.word	0x080111f0

0800b568 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <tcp_rexmit_fast+0x1c>
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <tcp_rexmit_fast+0xb8>)
 800b578:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b57c:	4929      	ldr	r1, [pc, #164]	; (800b624 <tcp_rexmit_fast+0xbc>)
 800b57e:	482a      	ldr	r0, [pc, #168]	; (800b628 <tcp_rexmit_fast+0xc0>)
 800b580:	f003 f95c 	bl	800e83c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d044      	beq.n	800b616 <tcp_rexmit_fast+0xae>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8b5b      	ldrh	r3, [r3, #26]
 800b590:	f003 0304 	and.w	r3, r3, #4
 800b594:	2b00      	cmp	r3, #0
 800b596:	d13e      	bne.n	800b616 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff ff79 	bl	800b490 <tcp_rexmit>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d138      	bne.n	800b616 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	bf28      	it	cs
 800b5b4:	4613      	movcs	r3, r2
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	0fda      	lsrs	r2, r3, #31
 800b5ba:	4413      	add	r3, r2
 800b5bc:	105b      	asrs	r3, r3, #1
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d206      	bcs.n	800b5e6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	0049      	lsls	r1, r1, #1
 800b5f4:	440b      	add	r3, r1
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	4413      	add	r3, r2
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	8b5b      	ldrh	r3, [r3, #26]
 800b606:	f043 0304 	orr.w	r3, r3, #4
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	0801119c 	.word	0x0801119c
 800b624:	08011854 	.word	0x08011854
 800b628:	080111f0 	.word	0x080111f0

0800b62c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607b      	str	r3, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	817b      	strh	r3, [r7, #10]
 800b63a:	4613      	mov	r3, r2
 800b63c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b63e:	897a      	ldrh	r2, [r7, #10]
 800b640:	893b      	ldrh	r3, [r7, #8]
 800b642:	4413      	add	r3, r2
 800b644:	b29b      	uxth	r3, r3
 800b646:	3314      	adds	r3, #20
 800b648:	b29b      	uxth	r3, r3
 800b64a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b64e:	4619      	mov	r1, r3
 800b650:	2022      	movs	r0, #34	; 0x22
 800b652:	f7f9 fd1f 	bl	8005094 <pbuf_alloc>
 800b656:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d04d      	beq.n	800b6fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b65e:	897b      	ldrh	r3, [r7, #10]
 800b660:	3313      	adds	r3, #19
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	8952      	ldrh	r2, [r2, #10]
 800b666:	4293      	cmp	r3, r2
 800b668:	db06      	blt.n	800b678 <tcp_output_alloc_header_common+0x4c>
 800b66a:	4b26      	ldr	r3, [pc, #152]	; (800b704 <tcp_output_alloc_header_common+0xd8>)
 800b66c:	f240 7223 	movw	r2, #1827	; 0x723
 800b670:	4925      	ldr	r1, [pc, #148]	; (800b708 <tcp_output_alloc_header_common+0xdc>)
 800b672:	4826      	ldr	r0, [pc, #152]	; (800b70c <tcp_output_alloc_header_common+0xe0>)
 800b674:	f003 f8e2 	bl	800e83c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b67e:	8c3b      	ldrh	r3, [r7, #32]
 800b680:	4618      	mov	r0, r3
 800b682:	f7f8 fd01 	bl	8004088 <lwip_htons>
 800b686:	4603      	mov	r3, r0
 800b688:	461a      	mov	r2, r3
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b68e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b690:	4618      	mov	r0, r3
 800b692:	f7f8 fcf9 	bl	8004088 <lwip_htons>
 800b696:	4603      	mov	r3, r0
 800b698:	461a      	mov	r2, r3
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7f8 fd04 	bl	80040b2 <lwip_htonl>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b6b0:	897b      	ldrh	r3, [r7, #10]
 800b6b2:	089b      	lsrs	r3, r3, #2
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	3305      	adds	r3, #5
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	031b      	lsls	r3, r3, #12
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7f8 fcdd 	bl	8004088 <lwip_htons>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b6d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f8 fcd5 	bl	8004088 <lwip_htons>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	741a      	strb	r2, [r3, #16]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	749a      	strb	r2, [r3, #18]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b6fa:	697b      	ldr	r3, [r7, #20]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	0801119c 	.word	0x0801119c
 800b708:	08011874 	.word	0x08011874
 800b70c:	080111f0 	.word	0x080111f0

0800b710 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b710:	b5b0      	push	{r4, r5, r7, lr}
 800b712:	b08a      	sub	sp, #40	; 0x28
 800b714:	af04      	add	r7, sp, #16
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	607b      	str	r3, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	817b      	strh	r3, [r7, #10]
 800b71e:	4613      	mov	r3, r2
 800b720:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d106      	bne.n	800b736 <tcp_output_alloc_header+0x26>
 800b728:	4b15      	ldr	r3, [pc, #84]	; (800b780 <tcp_output_alloc_header+0x70>)
 800b72a:	f240 7242 	movw	r2, #1858	; 0x742
 800b72e:	4915      	ldr	r1, [pc, #84]	; (800b784 <tcp_output_alloc_header+0x74>)
 800b730:	4815      	ldr	r0, [pc, #84]	; (800b788 <tcp_output_alloc_header+0x78>)
 800b732:	f003 f883 	bl	800e83c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	8adb      	ldrh	r3, [r3, #22]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	8b12      	ldrh	r2, [r2, #24]
 800b742:	68f9      	ldr	r1, [r7, #12]
 800b744:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b746:	893d      	ldrh	r5, [r7, #8]
 800b748:	897c      	ldrh	r4, [r7, #10]
 800b74a:	9103      	str	r1, [sp, #12]
 800b74c:	2110      	movs	r1, #16
 800b74e:	9102      	str	r1, [sp, #8]
 800b750:	9201      	str	r2, [sp, #4]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	462a      	mov	r2, r5
 800b758:	4621      	mov	r1, r4
 800b75a:	f7ff ff67 	bl	800b62c <tcp_output_alloc_header_common>
 800b75e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d006      	beq.n	800b774 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b76e:	441a      	add	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b774:	697b      	ldr	r3, [r7, #20]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bdb0      	pop	{r4, r5, r7, pc}
 800b77e:	bf00      	nop
 800b780:	0801119c 	.word	0x0801119c
 800b784:	080118a4 	.word	0x080118a4
 800b788:	080111f0 	.word	0x080111f0

0800b78c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4611      	mov	r1, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	460b      	mov	r3, r1
 800b79c:	71fb      	strb	r3, [r7, #7]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <tcp_output_fill_options+0x2e>
 800b7ac:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <tcp_output_fill_options+0x70>)
 800b7ae:	f240 7256 	movw	r2, #1878	; 0x756
 800b7b2:	4913      	ldr	r1, [pc, #76]	; (800b800 <tcp_output_fill_options+0x74>)
 800b7b4:	4813      	ldr	r0, [pc, #76]	; (800b804 <tcp_output_fill_options+0x78>)
 800b7b6:	f003 f841 	bl	800e83c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	f103 0214 	add.w	r2, r3, #20
 800b7cc:	8bfb      	ldrh	r3, [r7, #30]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	f003 0304 	and.w	r3, r3, #4
 800b7da:	440b      	add	r3, r1
 800b7dc:	4413      	add	r3, r2
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d006      	beq.n	800b7f2 <tcp_output_fill_options+0x66>
 800b7e4:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <tcp_output_fill_options+0x70>)
 800b7e6:	f240 7275 	movw	r2, #1909	; 0x775
 800b7ea:	4907      	ldr	r1, [pc, #28]	; (800b808 <tcp_output_fill_options+0x7c>)
 800b7ec:	4805      	ldr	r0, [pc, #20]	; (800b804 <tcp_output_fill_options+0x78>)
 800b7ee:	f003 f825 	bl	800e83c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b7f2:	bf00      	nop
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0801119c 	.word	0x0801119c
 800b800:	080118cc 	.word	0x080118cc
 800b804:	080111f0 	.word	0x080111f0
 800b808:	080117c4 	.word	0x080117c4

0800b80c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	; 0x28
 800b810:	af04      	add	r7, sp, #16
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
 800b818:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <tcp_output_control_segment+0x22>
 800b820:	4b1c      	ldr	r3, [pc, #112]	; (800b894 <tcp_output_control_segment+0x88>)
 800b822:	f240 7287 	movw	r2, #1927	; 0x787
 800b826:	491c      	ldr	r1, [pc, #112]	; (800b898 <tcp_output_control_segment+0x8c>)
 800b828:	481c      	ldr	r0, [pc, #112]	; (800b89c <tcp_output_control_segment+0x90>)
 800b82a:	f003 f807 	bl	800e83c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7fe fae8 	bl	8009e08 <tcp_route>
 800b838:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b840:	23fc      	movs	r3, #252	; 0xfc
 800b842:	75fb      	strb	r3, [r7, #23]
 800b844:	e01c      	b.n	800b880 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	7adb      	ldrb	r3, [r3, #11]
 800b850:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	7a9b      	ldrb	r3, [r3, #10]
 800b856:	757b      	strb	r3, [r7, #21]
 800b858:	e003      	b.n	800b862 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b85a:	23ff      	movs	r3, #255	; 0xff
 800b85c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b862:	7dba      	ldrb	r2, [r7, #22]
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	9302      	str	r3, [sp, #8]
 800b868:	2306      	movs	r3, #6
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	7d7b      	ldrb	r3, [r7, #21]
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	4613      	mov	r3, r2
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	68b8      	ldr	r0, [r7, #8]
 800b878:	f001 ff70 	bl	800d75c <ip4_output_if>
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f7f9 feeb 	bl	800565c <pbuf_free>
  return err;
 800b886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	0801119c 	.word	0x0801119c
 800b898:	080118f4 	.word	0x080118f4
 800b89c:	080111f0 	.word	0x080111f0

0800b8a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b8a0:	b590      	push	{r4, r7, lr}
 800b8a2:	b08b      	sub	sp, #44	; 0x2c
 800b8a4:	af04      	add	r7, sp, #16
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d106      	bne.n	800b8c2 <tcp_rst+0x22>
 800b8b4:	4b1f      	ldr	r3, [pc, #124]	; (800b934 <tcp_rst+0x94>)
 800b8b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b8ba:	491f      	ldr	r1, [pc, #124]	; (800b938 <tcp_rst+0x98>)
 800b8bc:	481f      	ldr	r0, [pc, #124]	; (800b93c <tcp_rst+0x9c>)
 800b8be:	f002 ffbd 	bl	800e83c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <tcp_rst+0x36>
 800b8c8:	4b1a      	ldr	r3, [pc, #104]	; (800b934 <tcp_rst+0x94>)
 800b8ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b8ce:	491c      	ldr	r1, [pc, #112]	; (800b940 <tcp_rst+0xa0>)
 800b8d0:	481a      	ldr	r0, [pc, #104]	; (800b93c <tcp_rst+0x9c>)
 800b8d2:	f002 ffb3 	bl	800e83c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b8da:	f246 0308 	movw	r3, #24584	; 0x6008
 800b8de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	b29c      	uxth	r4, r3
 800b8e4:	68b8      	ldr	r0, [r7, #8]
 800b8e6:	f7f8 fbe4 	bl	80040b2 <lwip_htonl>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	8abb      	ldrh	r3, [r7, #20]
 800b8ee:	9303      	str	r3, [sp, #12]
 800b8f0:	2314      	movs	r3, #20
 800b8f2:	9302      	str	r3, [sp, #8]
 800b8f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	2200      	movs	r2, #0
 800b900:	4621      	mov	r1, r4
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff fe92 	bl	800b62c <tcp_output_alloc_header_common>
 800b908:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00c      	beq.n	800b92a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	2200      	movs	r2, #0
 800b914:	6939      	ldr	r1, [r7, #16]
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f7ff ff38 	bl	800b78c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	6939      	ldr	r1, [r7, #16]
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f7ff ff72 	bl	800b80c <tcp_output_control_segment>
 800b928:	e000      	b.n	800b92c <tcp_rst+0x8c>
    return;
 800b92a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd90      	pop	{r4, r7, pc}
 800b932:	bf00      	nop
 800b934:	0801119c 	.word	0x0801119c
 800b938:	08011920 	.word	0x08011920
 800b93c:	080111f0 	.word	0x080111f0
 800b940:	0801193c 	.word	0x0801193c

0800b944 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b944:	b590      	push	{r4, r7, lr}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <tcp_send_empty_ack+0x24>
 800b95a:	4b28      	ldr	r3, [pc, #160]	; (800b9fc <tcp_send_empty_ack+0xb8>)
 800b95c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b960:	4927      	ldr	r1, [pc, #156]	; (800ba00 <tcp_send_empty_ack+0xbc>)
 800b962:	4828      	ldr	r0, [pc, #160]	; (800ba04 <tcp_send_empty_ack+0xc0>)
 800b964:	f002 ff6a 	bl	800e83c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b974:	7d7b      	ldrb	r3, [r7, #21]
 800b976:	b29c      	uxth	r4, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f8 fb98 	bl	80040b2 <lwip_htonl>
 800b982:	4603      	mov	r3, r0
 800b984:	2200      	movs	r2, #0
 800b986:	4621      	mov	r1, r4
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff fec1 	bl	800b710 <tcp_output_alloc_header>
 800b98e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d109      	bne.n	800b9aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	8b5b      	ldrh	r3, [r3, #26]
 800b99a:	f043 0303 	orr.w	r3, r3, #3
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b9a4:	f06f 0301 	mvn.w	r3, #1
 800b9a8:	e023      	b.n	800b9f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b9aa:	7dbb      	ldrb	r3, [r7, #22]
 800b9ac:	7dfa      	ldrb	r2, [r7, #23]
 800b9ae:	6939      	ldr	r1, [r7, #16]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f7ff feeb 	bl	800b78c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	6939      	ldr	r1, [r7, #16]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff ff24 	bl	800b80c <tcp_output_control_segment>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b9c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	8b5b      	ldrh	r3, [r3, #26]
 800b9d4:	f043 0303 	orr.w	r3, r3, #3
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	835a      	strh	r2, [r3, #26]
 800b9de:	e006      	b.n	800b9ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	8b5b      	ldrh	r3, [r3, #26]
 800b9e4:	f023 0303 	bic.w	r3, r3, #3
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	371c      	adds	r7, #28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd90      	pop	{r4, r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	0801119c 	.word	0x0801119c
 800ba00:	08011958 	.word	0x08011958
 800ba04:	080111f0 	.word	0x080111f0

0800ba08 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d106      	bne.n	800ba28 <tcp_keepalive+0x20>
 800ba1a:	4b18      	ldr	r3, [pc, #96]	; (800ba7c <tcp_keepalive+0x74>)
 800ba1c:	f640 0224 	movw	r2, #2084	; 0x824
 800ba20:	4917      	ldr	r1, [pc, #92]	; (800ba80 <tcp_keepalive+0x78>)
 800ba22:	4818      	ldr	r0, [pc, #96]	; (800ba84 <tcp_keepalive+0x7c>)
 800ba24:	f002 ff0a 	bl	800e83c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	b29c      	uxth	r4, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	3b01      	subs	r3, #1
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f8 fb3d 	bl	80040b2 <lwip_htonl>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fe66 	bl	800b710 <tcp_output_alloc_header>
 800ba44:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ba4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba50:	e010      	b.n	800ba74 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	2200      	movs	r2, #0
 800ba56:	6939      	ldr	r1, [r7, #16]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7ff fe97 	bl	800b78c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3304      	adds	r3, #4
 800ba64:	6939      	ldr	r1, [r7, #16]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff fed0 	bl	800b80c <tcp_output_control_segment>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ba70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd90      	pop	{r4, r7, pc}
 800ba7c:	0801119c 	.word	0x0801119c
 800ba80:	08011978 	.word	0x08011978
 800ba84:	080111f0 	.word	0x080111f0

0800ba88 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ba88:	b590      	push	{r4, r7, lr}
 800ba8a:	b08b      	sub	sp, #44	; 0x2c
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba90:	2300      	movs	r3, #0
 800ba92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d106      	bne.n	800baaa <tcp_zero_window_probe+0x22>
 800ba9c:	4b4c      	ldr	r3, [pc, #304]	; (800bbd0 <tcp_zero_window_probe+0x148>)
 800ba9e:	f640 024f 	movw	r2, #2127	; 0x84f
 800baa2:	494c      	ldr	r1, [pc, #304]	; (800bbd4 <tcp_zero_window_probe+0x14c>)
 800baa4:	484c      	ldr	r0, [pc, #304]	; (800bbd8 <tcp_zero_window_probe+0x150>)
 800baa6:	f002 fec9 	bl	800e83c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bab0:	6a3b      	ldr	r3, [r7, #32]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	e086      	b.n	800bbc8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bac0:	2bff      	cmp	r3, #255	; 0xff
 800bac2:	d007      	beq.n	800bad4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800baca:	3301      	adds	r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	899b      	ldrh	r3, [r3, #12]
 800bada:	b29b      	uxth	r3, r3
 800badc:	4618      	mov	r0, r3
 800bade:	f7f8 fad3 	bl	8004088 <lwip_htons>
 800bae2:	4603      	mov	r3, r0
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <tcp_zero_window_probe+0x72>
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	891b      	ldrh	r3, [r3, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d101      	bne.n	800bafa <tcp_zero_window_probe+0x72>
 800baf6:	2301      	movs	r3, #1
 800baf8:	e000      	b.n	800bafc <tcp_zero_window_probe+0x74>
 800bafa:	2300      	movs	r3, #0
 800bafc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bafe:	7ffb      	ldrb	r3, [r7, #31]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bf0c      	ite	eq
 800bb04:	2301      	moveq	r3, #1
 800bb06:	2300      	movne	r3, #0
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb10:	b299      	uxth	r1, r3
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	8bba      	ldrh	r2, [r7, #28]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff fdf8 	bl	800b710 <tcp_output_alloc_header>
 800bb20:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d102      	bne.n	800bb2e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bb28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb2c:	e04c      	b.n	800bbc8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bb34:	7ffb      	ldrb	r3, [r7, #31]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d011      	beq.n	800bb5e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	899b      	ldrh	r3, [r3, #12]
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	b21b      	sxth	r3, r3
 800bb42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb46:	b21c      	sxth	r4, r3
 800bb48:	2011      	movs	r0, #17
 800bb4a:	f7f8 fa9d 	bl	8004088 <lwip_htons>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	b21b      	sxth	r3, r3
 800bb52:	4323      	orrs	r3, r4
 800bb54:	b21b      	sxth	r3, r3
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	819a      	strh	r2, [r3, #12]
 800bb5c:	e010      	b.n	800bb80 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	3314      	adds	r3, #20
 800bb64:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	6858      	ldr	r0, [r3, #4]
 800bb6a:	6a3b      	ldr	r3, [r7, #32]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	891a      	ldrh	r2, [r3, #8]
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	891b      	ldrh	r3, [r3, #8]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	2201      	movs	r2, #1
 800bb7a:	6939      	ldr	r1, [r7, #16]
 800bb7c:	f7f9 ff58 	bl	8005a30 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f8 fa93 	bl	80040b2 <lwip_htonl>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	3301      	adds	r3, #1
 800bb90:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	da02      	bge.n	800bba4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba8:	2200      	movs	r2, #0
 800bbaa:	69b9      	ldr	r1, [r7, #24]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff fded 	bl	800b78c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	69b9      	ldr	r1, [r7, #24]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff fe26 	bl	800b80c <tcp_output_control_segment>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bbc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	372c      	adds	r7, #44	; 0x2c
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd90      	pop	{r4, r7, pc}
 800bbd0:	0801119c 	.word	0x0801119c
 800bbd4:	08011994 	.word	0x08011994
 800bbd8:	080111f0 	.word	0x080111f0

0800bbdc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bbe4:	f7fa f812 	bl	8005c0c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <tcpip_tcp_timer+0x38>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d103      	bne.n	800bbf8 <tcpip_tcp_timer+0x1c>
 800bbf0:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <tcpip_tcp_timer+0x3c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4908      	ldr	r1, [pc, #32]	; (800bc1c <tcpip_tcp_timer+0x40>)
 800bbfc:	20fa      	movs	r0, #250	; 0xfa
 800bbfe:	f000 f8f3 	bl	800bde8 <sys_timeout>
 800bc02:	e003      	b.n	800bc0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bc04:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <tcpip_tcp_timer+0x44>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	20008e8c 	.word	0x20008e8c
 800bc18:	20008e9c 	.word	0x20008e9c
 800bc1c:	0800bbdd 	.word	0x0800bbdd
 800bc20:	20000548 	.word	0x20000548

0800bc24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bc28:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <tcp_timer_needed+0x30>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10f      	bne.n	800bc50 <tcp_timer_needed+0x2c>
 800bc30:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <tcp_timer_needed+0x34>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d103      	bne.n	800bc40 <tcp_timer_needed+0x1c>
 800bc38:	4b08      	ldr	r3, [pc, #32]	; (800bc5c <tcp_timer_needed+0x38>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d007      	beq.n	800bc50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bc40:	4b04      	ldr	r3, [pc, #16]	; (800bc54 <tcp_timer_needed+0x30>)
 800bc42:	2201      	movs	r2, #1
 800bc44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bc46:	2200      	movs	r2, #0
 800bc48:	4905      	ldr	r1, [pc, #20]	; (800bc60 <tcp_timer_needed+0x3c>)
 800bc4a:	20fa      	movs	r0, #250	; 0xfa
 800bc4c:	f000 f8cc 	bl	800bde8 <sys_timeout>
  }
}
 800bc50:	bf00      	nop
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20000548 	.word	0x20000548
 800bc58:	20008e8c 	.word	0x20008e8c
 800bc5c:	20008e9c 	.word	0x20008e9c
 800bc60:	0800bbdd 	.word	0x0800bbdd

0800bc64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bc70:	2006      	movs	r0, #6
 800bc72:	f7f8 fe95 	bl	80049a0 <memp_malloc>
 800bc76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d151      	bne.n	800bd28 <sys_timeout_abs+0xc4>
 800bc84:	4b2a      	ldr	r3, [pc, #168]	; (800bd30 <sys_timeout_abs+0xcc>)
 800bc86:	22be      	movs	r2, #190	; 0xbe
 800bc88:	492a      	ldr	r1, [pc, #168]	; (800bd34 <sys_timeout_abs+0xd0>)
 800bc8a:	482b      	ldr	r0, [pc, #172]	; (800bd38 <sys_timeout_abs+0xd4>)
 800bc8c:	f002 fdd6 	bl	800e83c <iprintf>
    return;
 800bc90:	e04a      	b.n	800bd28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	2200      	movs	r2, #0
 800bc96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bcaa:	4b24      	ldr	r3, [pc, #144]	; (800bd3c <sys_timeout_abs+0xd8>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bcb2:	4a22      	ldr	r2, [pc, #136]	; (800bd3c <sys_timeout_abs+0xd8>)
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	6013      	str	r3, [r2, #0]
    return;
 800bcb8:	e037      	b.n	800bd2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	4b1f      	ldr	r3, [pc, #124]	; (800bd3c <sys_timeout_abs+0xd8>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	0fdb      	lsrs	r3, r3, #31
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d007      	beq.n	800bce2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bcd2:	4b1a      	ldr	r3, [pc, #104]	; (800bd3c <sys_timeout_abs+0xd8>)
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bcda:	4a18      	ldr	r2, [pc, #96]	; (800bd3c <sys_timeout_abs+0xd8>)
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	e023      	b.n	800bd2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bce2:	4b16      	ldr	r3, [pc, #88]	; (800bd3c <sys_timeout_abs+0xd8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	617b      	str	r3, [r7, #20]
 800bce8:	e01a      	b.n	800bd20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00b      	beq.n	800bd0a <sys_timeout_abs+0xa6>
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	0fdb      	lsrs	r3, r3, #31
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d007      	beq.n	800bd1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	601a      	str	r2, [r3, #0]
        break;
 800bd18:	e007      	b.n	800bd2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1e1      	bne.n	800bcea <sys_timeout_abs+0x86>
 800bd26:	e000      	b.n	800bd2a <sys_timeout_abs+0xc6>
    return;
 800bd28:	bf00      	nop
      }
    }
  }
}
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	080119b8 	.word	0x080119b8
 800bd34:	080119ec 	.word	0x080119ec
 800bd38:	08011a2c 	.word	0x08011a2c
 800bd3c:	20000540 	.word	0x20000540

0800bd40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	4798      	blx	r3

  now = sys_now();
 800bd52:	f7f7 faf1 	bl	8003338 <sys_now>
 800bd56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <lwip_cyclic_timer+0x5c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4413      	add	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	0fdb      	lsrs	r3, r3, #31
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d009      	beq.n	800bd8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4907      	ldr	r1, [pc, #28]	; (800bda0 <lwip_cyclic_timer+0x60>)
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff ff6e 	bl	800bc64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bd88:	e004      	b.n	800bd94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	4904      	ldr	r1, [pc, #16]	; (800bda0 <lwip_cyclic_timer+0x60>)
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff ff68 	bl	800bc64 <sys_timeout_abs>
}
 800bd94:	bf00      	nop
 800bd96:	3718      	adds	r7, #24
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	20000544 	.word	0x20000544
 800bda0:	0800bd41 	.word	0x0800bd41

0800bda4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bdaa:	2301      	movs	r3, #1
 800bdac:	607b      	str	r3, [r7, #4]
 800bdae:	e00e      	b.n	800bdce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bdb0:	4a0b      	ldr	r2, [pc, #44]	; (800bde0 <sys_timeouts_init+0x3c>)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	4a08      	ldr	r2, [pc, #32]	; (800bde0 <sys_timeouts_init+0x3c>)
 800bdbe:	4413      	add	r3, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4908      	ldr	r1, [pc, #32]	; (800bde4 <sys_timeouts_init+0x40>)
 800bdc4:	f000 f810 	bl	800bde8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	607b      	str	r3, [r7, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d9ed      	bls.n	800bdb0 <sys_timeouts_init+0xc>
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	0801338c 	.word	0x0801338c
 800bde4:	0800bd41 	.word	0x0800bd41

0800bde8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfa:	d306      	bcc.n	800be0a <sys_timeout+0x22>
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <sys_timeout+0x40>)
 800bdfe:	f240 1229 	movw	r2, #297	; 0x129
 800be02:	490a      	ldr	r1, [pc, #40]	; (800be2c <sys_timeout+0x44>)
 800be04:	480a      	ldr	r0, [pc, #40]	; (800be30 <sys_timeout+0x48>)
 800be06:	f002 fd19 	bl	800e83c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800be0a:	f7f7 fa95 	bl	8003338 <sys_now>
 800be0e:	4602      	mov	r2, r0
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	4413      	add	r3, r2
 800be14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	68b9      	ldr	r1, [r7, #8]
 800be1a:	6978      	ldr	r0, [r7, #20]
 800be1c:	f7ff ff22 	bl	800bc64 <sys_timeout_abs>
#endif
}
 800be20:	bf00      	nop
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	080119b8 	.word	0x080119b8
 800be2c:	08011a54 	.word	0x08011a54
 800be30:	08011a2c 	.word	0x08011a2c

0800be34 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800be3a:	f7f7 fa7d 	bl	8003338 <sys_now>
 800be3e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800be40:	4b1a      	ldr	r3, [pc, #104]	; (800beac <sys_check_timeouts+0x78>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <sys_check_timeouts+0x1a>
 800be4a:	f7f9 f8cd 	bl	8004fe8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800be4e:	4b18      	ldr	r3, [pc, #96]	; (800beb0 <sys_check_timeouts+0x7c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d022      	beq.n	800bea0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	0fdb      	lsrs	r3, r3, #31
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d11a      	bne.n	800bea4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a0f      	ldr	r2, [pc, #60]	; (800beb0 <sys_check_timeouts+0x7c>)
 800be74:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	4a0b      	ldr	r2, [pc, #44]	; (800beb4 <sys_check_timeouts+0x80>)
 800be88:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	2006      	movs	r0, #6
 800be8e:	f7f8 fdd3 	bl	8004a38 <memp_free>
    if (handler != NULL) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0d3      	beq.n	800be40 <sys_check_timeouts+0xc>
      handler(arg);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6838      	ldr	r0, [r7, #0]
 800be9c:	4798      	blx	r3
  do {
 800be9e:	e7cf      	b.n	800be40 <sys_check_timeouts+0xc>
      return;
 800bea0:	bf00      	nop
 800bea2:	e000      	b.n	800bea6 <sys_check_timeouts+0x72>
      return;
 800bea4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20008e84 	.word	0x20008e84
 800beb0:	20000540 	.word	0x20000540
 800beb4:	20000544 	.word	0x20000544

0800beb8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bebc:	f002 fcd6 	bl	800e86c <rand>
 800bec0:	4603      	mov	r3, r0
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bec8:	b29b      	uxth	r3, r3
 800beca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bece:	b29a      	uxth	r2, r3
 800bed0:	4b01      	ldr	r3, [pc, #4]	; (800bed8 <udp_init+0x20>)
 800bed2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bed4:	bf00      	nop
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000010 	.word	0x20000010

0800bedc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	4613      	mov	r3, r2
 800bee8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <udp_input_local_match+0x20>
 800bef0:	4b27      	ldr	r3, [pc, #156]	; (800bf90 <udp_input_local_match+0xb4>)
 800bef2:	2287      	movs	r2, #135	; 0x87
 800bef4:	4927      	ldr	r1, [pc, #156]	; (800bf94 <udp_input_local_match+0xb8>)
 800bef6:	4828      	ldr	r0, [pc, #160]	; (800bf98 <udp_input_local_match+0xbc>)
 800bef8:	f002 fca0 	bl	800e83c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d105      	bne.n	800bf0e <udp_input_local_match+0x32>
 800bf02:	4b23      	ldr	r3, [pc, #140]	; (800bf90 <udp_input_local_match+0xb4>)
 800bf04:	2288      	movs	r2, #136	; 0x88
 800bf06:	4925      	ldr	r1, [pc, #148]	; (800bf9c <udp_input_local_match+0xc0>)
 800bf08:	4823      	ldr	r0, [pc, #140]	; (800bf98 <udp_input_local_match+0xbc>)
 800bf0a:	f002 fc97 	bl	800e83c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	7a1b      	ldrb	r3, [r3, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00b      	beq.n	800bf2e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	7a1a      	ldrb	r2, [r3, #8]
 800bf1a:	4b21      	ldr	r3, [pc, #132]	; (800bfa0 <udp_input_local_match+0xc4>)
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf22:	3301      	adds	r3, #1
 800bf24:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d001      	beq.n	800bf2e <udp_input_local_match+0x52>
    return 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e02b      	b.n	800bf86 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d018      	beq.n	800bf66 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d013      	beq.n	800bf62 <udp_input_local_match+0x86>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00f      	beq.n	800bf62 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf42:	4b17      	ldr	r3, [pc, #92]	; (800bfa0 <udp_input_local_match+0xc4>)
 800bf44:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf4a:	d00a      	beq.n	800bf62 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <udp_input_local_match+0xc4>)
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	405a      	eors	r2, r3
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	3308      	adds	r3, #8
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d110      	bne.n	800bf84 <udp_input_local_match+0xa8>
          return 1;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e00f      	b.n	800bf86 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d009      	beq.n	800bf80 <udp_input_local_match+0xa4>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d005      	beq.n	800bf80 <udp_input_local_match+0xa4>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <udp_input_local_match+0xc4>)
 800bf7a:	695b      	ldr	r3, [r3, #20]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d101      	bne.n	800bf84 <udp_input_local_match+0xa8>
        return 1;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e000      	b.n	800bf86 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	08011aa0 	.word	0x08011aa0
 800bf94:	08011ad0 	.word	0x08011ad0
 800bf98:	08011af4 	.word	0x08011af4
 800bf9c:	08011b1c 	.word	0x08011b1c
 800bfa0:	20003788 	.word	0x20003788

0800bfa4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bfa4:	b590      	push	{r4, r7, lr}
 800bfa6:	b08d      	sub	sp, #52	; 0x34
 800bfa8:	af02      	add	r7, sp, #8
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d105      	bne.n	800bfc4 <udp_input+0x20>
 800bfb8:	4b7c      	ldr	r3, [pc, #496]	; (800c1ac <udp_input+0x208>)
 800bfba:	22cf      	movs	r2, #207	; 0xcf
 800bfbc:	497c      	ldr	r1, [pc, #496]	; (800c1b0 <udp_input+0x20c>)
 800bfbe:	487d      	ldr	r0, [pc, #500]	; (800c1b4 <udp_input+0x210>)
 800bfc0:	f002 fc3c 	bl	800e83c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d105      	bne.n	800bfd6 <udp_input+0x32>
 800bfca:	4b78      	ldr	r3, [pc, #480]	; (800c1ac <udp_input+0x208>)
 800bfcc:	22d0      	movs	r2, #208	; 0xd0
 800bfce:	497a      	ldr	r1, [pc, #488]	; (800c1b8 <udp_input+0x214>)
 800bfd0:	4878      	ldr	r0, [pc, #480]	; (800c1b4 <udp_input+0x210>)
 800bfd2:	f002 fc33 	bl	800e83c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	895b      	ldrh	r3, [r3, #10]
 800bfda:	2b07      	cmp	r3, #7
 800bfdc:	d803      	bhi.n	800bfe6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7f9 fb3c 	bl	800565c <pbuf_free>
    goto end;
 800bfe4:	e0de      	b.n	800c1a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bfec:	4b73      	ldr	r3, [pc, #460]	; (800c1bc <udp_input+0x218>)
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	4a72      	ldr	r2, [pc, #456]	; (800c1bc <udp_input+0x218>)
 800bff2:	6812      	ldr	r2, [r2, #0]
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f001 fc88 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800bffc:	4603      	mov	r3, r0
 800bffe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	b29b      	uxth	r3, r3
 800c006:	4618      	mov	r0, r3
 800c008:	f7f8 f83e 	bl	8004088 <lwip_htons>
 800c00c:	4603      	mov	r3, r0
 800c00e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	885b      	ldrh	r3, [r3, #2]
 800c014:	b29b      	uxth	r3, r3
 800c016:	4618      	mov	r0, r3
 800c018:	f7f8 f836 	bl	8004088 <lwip_htons>
 800c01c:	4603      	mov	r3, r0
 800c01e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c020:	2300      	movs	r3, #0
 800c022:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c024:	2300      	movs	r3, #0
 800c026:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c02c:	4b64      	ldr	r3, [pc, #400]	; (800c1c0 <udp_input+0x21c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
 800c032:	e054      	b.n	800c0de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	8a5b      	ldrh	r3, [r3, #18]
 800c038:	89fa      	ldrh	r2, [r7, #14]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d14a      	bne.n	800c0d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c03e:	7cfb      	ldrb	r3, [r7, #19]
 800c040:	461a      	mov	r2, r3
 800c042:	6839      	ldr	r1, [r7, #0]
 800c044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c046:	f7ff ff49 	bl	800bedc <udp_input_local_match>
 800c04a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d041      	beq.n	800c0d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	7c1b      	ldrb	r3, [r3, #16]
 800c054:	f003 0304 	and.w	r3, r3, #4
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d11d      	bne.n	800c098 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	61fb      	str	r3, [r7, #28]
 800c066:	e017      	b.n	800c098 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c068:	7cfb      	ldrb	r3, [r7, #19]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d014      	beq.n	800c098 <udp_input+0xf4>
 800c06e:	4b53      	ldr	r3, [pc, #332]	; (800c1bc <udp_input+0x218>)
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c076:	d10f      	bne.n	800c098 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	3304      	adds	r3, #4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d008      	beq.n	800c098 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d101      	bne.n	800c098 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	8a9b      	ldrh	r3, [r3, #20]
 800c09c:	8a3a      	ldrh	r2, [r7, #16]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d118      	bne.n	800c0d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d005      	beq.n	800c0b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	4b43      	ldr	r3, [pc, #268]	; (800c1bc <udp_input+0x218>)
 800c0b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d10e      	bne.n	800c0d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d014      	beq.n	800c0e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	68da      	ldr	r2, [r3, #12]
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c0c4:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <udp_input+0x21c>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c0cc:	4a3c      	ldr	r2, [pc, #240]	; (800c1c0 <udp_input+0x21c>)
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c0d2:	e008      	b.n	800c0e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1a7      	bne.n	800c034 <udp_input+0x90>
 800c0e4:	e000      	b.n	800c0e8 <udp_input+0x144>
        break;
 800c0e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <udp_input+0x15a>
    for_us = 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	76fb      	strb	r3, [r7, #27]
 800c0fc:	e00a      	b.n	800c114 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	3304      	adds	r3, #4
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	4b2d      	ldr	r3, [pc, #180]	; (800c1bc <udp_input+0x218>)
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	429a      	cmp	r2, r3
 800c10a:	bf0c      	ite	eq
 800c10c:	2301      	moveq	r3, #1
 800c10e:	2300      	movne	r3, #0
 800c110:	b2db      	uxtb	r3, r3
 800c112:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c114:	7efb      	ldrb	r3, [r7, #27]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d041      	beq.n	800c19e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c11a:	2108      	movs	r1, #8
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7f9 fa17 	bl	8005550 <pbuf_remove_header>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00a      	beq.n	800c13e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c128:	4b20      	ldr	r3, [pc, #128]	; (800c1ac <udp_input+0x208>)
 800c12a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c12e:	4925      	ldr	r1, [pc, #148]	; (800c1c4 <udp_input+0x220>)
 800c130:	4820      	ldr	r0, [pc, #128]	; (800c1b4 <udp_input+0x210>)
 800c132:	f002 fb83 	bl	800e83c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7f9 fa90 	bl	800565c <pbuf_free>
      goto end;
 800c13c:	e032      	b.n	800c1a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	2b00      	cmp	r3, #0
 800c142:	d012      	beq.n	800c16a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00a      	beq.n	800c162 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	699c      	ldr	r4, [r3, #24]
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	69d8      	ldr	r0, [r3, #28]
 800c154:	8a3b      	ldrh	r3, [r7, #16]
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	4b1b      	ldr	r3, [pc, #108]	; (800c1c8 <udp_input+0x224>)
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c15e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c160:	e021      	b.n	800c1a6 <udp_input+0x202>
        pbuf_free(p);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7f9 fa7a 	bl	800565c <pbuf_free>
        goto end;
 800c168:	e01c      	b.n	800c1a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c16a:	7cfb      	ldrb	r3, [r7, #19]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d112      	bne.n	800c196 <udp_input+0x1f2>
 800c170:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <udp_input+0x218>)
 800c172:	695b      	ldr	r3, [r3, #20]
 800c174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c178:	2be0      	cmp	r3, #224	; 0xe0
 800c17a:	d00c      	beq.n	800c196 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c17c:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <udp_input+0x218>)
 800c17e:	899b      	ldrh	r3, [r3, #12]
 800c180:	3308      	adds	r3, #8
 800c182:	b29b      	uxth	r3, r3
 800c184:	b21b      	sxth	r3, r3
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7f9 fa54 	bl	8005636 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c18e:	2103      	movs	r1, #3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f001 f89b 	bl	800d2cc <icmp_dest_unreach>
      pbuf_free(p);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7f9 fa60 	bl	800565c <pbuf_free>
  return;
 800c19c:	e003      	b.n	800c1a6 <udp_input+0x202>
    pbuf_free(p);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7f9 fa5c 	bl	800565c <pbuf_free>
  return;
 800c1a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c1a6:	372c      	adds	r7, #44	; 0x2c
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}
 800c1ac:	08011aa0 	.word	0x08011aa0
 800c1b0:	08011b44 	.word	0x08011b44
 800c1b4:	08011af4 	.word	0x08011af4
 800c1b8:	08011b5c 	.word	0x08011b5c
 800c1bc:	20003788 	.word	0x20003788
 800c1c0:	20008ea4 	.word	0x20008ea4
 800c1c4:	08011b78 	.word	0x08011b78
 800c1c8:	20003798 	.word	0x20003798

0800c1cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d01e      	beq.n	800c21a <udp_netif_ip_addr_changed+0x4e>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01a      	beq.n	800c21a <udp_netif_ip_addr_changed+0x4e>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d017      	beq.n	800c21a <udp_netif_ip_addr_changed+0x4e>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d013      	beq.n	800c21a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c1f2:	4b0d      	ldr	r3, [pc, #52]	; (800c228 <udp_netif_ip_addr_changed+0x5c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	e00c      	b.n	800c214 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d103      	bne.n	800c20e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1ef      	bne.n	800c1fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c21a:	bf00      	nop
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	20008ea4 	.word	0x20008ea4

0800c22c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c234:	4915      	ldr	r1, [pc, #84]	; (800c28c <etharp_free_entry+0x60>)
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	4613      	mov	r3, r2
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	440b      	add	r3, r1
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d013      	beq.n	800c270 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c248:	4910      	ldr	r1, [pc, #64]	; (800c28c <etharp_free_entry+0x60>)
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	4613      	mov	r3, r2
 800c24e:	005b      	lsls	r3, r3, #1
 800c250:	4413      	add	r3, r2
 800c252:	00db      	lsls	r3, r3, #3
 800c254:	440b      	add	r3, r1
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7f9 f9ff 	bl	800565c <pbuf_free>
    arp_table[i].q = NULL;
 800c25e:	490b      	ldr	r1, [pc, #44]	; (800c28c <etharp_free_entry+0x60>)
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	4413      	add	r3, r2
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	440b      	add	r3, r1
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c270:	4906      	ldr	r1, [pc, #24]	; (800c28c <etharp_free_entry+0x60>)
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	4613      	mov	r3, r2
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	4413      	add	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	440b      	add	r3, r1
 800c27e:	3314      	adds	r3, #20
 800c280:	2200      	movs	r2, #0
 800c282:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	2000054c 	.word	0x2000054c

0800c290 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c296:	2300      	movs	r3, #0
 800c298:	607b      	str	r3, [r7, #4]
 800c29a:	e096      	b.n	800c3ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c29c:	494f      	ldr	r1, [pc, #316]	; (800c3dc <etharp_tmr+0x14c>)
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	4413      	add	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	440b      	add	r3, r1
 800c2aa:	3314      	adds	r3, #20
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c2b0:	78fb      	ldrb	r3, [r7, #3]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 8086 	beq.w	800c3c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c2b8:	4948      	ldr	r1, [pc, #288]	; (800c3dc <etharp_tmr+0x14c>)
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	4413      	add	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	440b      	add	r3, r1
 800c2c6:	3312      	adds	r3, #18
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	b298      	uxth	r0, r3
 800c2ce:	4943      	ldr	r1, [pc, #268]	; (800c3dc <etharp_tmr+0x14c>)
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	4413      	add	r3, r2
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	440b      	add	r3, r1
 800c2dc:	3312      	adds	r3, #18
 800c2de:	4602      	mov	r2, r0
 800c2e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c2e2:	493e      	ldr	r1, [pc, #248]	; (800c3dc <etharp_tmr+0x14c>)
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3312      	adds	r3, #18
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c2f8:	d215      	bcs.n	800c326 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c2fa:	4938      	ldr	r1, [pc, #224]	; (800c3dc <etharp_tmr+0x14c>)
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	4613      	mov	r3, r2
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	4413      	add	r3, r2
 800c304:	00db      	lsls	r3, r3, #3
 800c306:	440b      	add	r3, r1
 800c308:	3314      	adds	r3, #20
 800c30a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d10e      	bne.n	800c32e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c310:	4932      	ldr	r1, [pc, #200]	; (800c3dc <etharp_tmr+0x14c>)
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	4613      	mov	r3, r2
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	4413      	add	r3, r2
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	440b      	add	r3, r1
 800c31e:	3312      	adds	r3, #18
 800c320:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c322:	2b04      	cmp	r3, #4
 800c324:	d903      	bls.n	800c32e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff ff80 	bl	800c22c <etharp_free_entry>
 800c32c:	e04a      	b.n	800c3c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c32e:	492b      	ldr	r1, [pc, #172]	; (800c3dc <etharp_tmr+0x14c>)
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	4613      	mov	r3, r2
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	4413      	add	r3, r2
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	440b      	add	r3, r1
 800c33c:	3314      	adds	r3, #20
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	2b03      	cmp	r3, #3
 800c342:	d10a      	bne.n	800c35a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c344:	4925      	ldr	r1, [pc, #148]	; (800c3dc <etharp_tmr+0x14c>)
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	4613      	mov	r3, r2
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	4413      	add	r3, r2
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	440b      	add	r3, r1
 800c352:	3314      	adds	r3, #20
 800c354:	2204      	movs	r2, #4
 800c356:	701a      	strb	r2, [r3, #0]
 800c358:	e034      	b.n	800c3c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c35a:	4920      	ldr	r1, [pc, #128]	; (800c3dc <etharp_tmr+0x14c>)
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4613      	mov	r3, r2
 800c360:	005b      	lsls	r3, r3, #1
 800c362:	4413      	add	r3, r2
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	440b      	add	r3, r1
 800c368:	3314      	adds	r3, #20
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	d10a      	bne.n	800c386 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c370:	491a      	ldr	r1, [pc, #104]	; (800c3dc <etharp_tmr+0x14c>)
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	4613      	mov	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	440b      	add	r3, r1
 800c37e:	3314      	adds	r3, #20
 800c380:	2202      	movs	r2, #2
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	e01e      	b.n	800c3c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c386:	4915      	ldr	r1, [pc, #84]	; (800c3dc <etharp_tmr+0x14c>)
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4413      	add	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	440b      	add	r3, r1
 800c394:	3314      	adds	r3, #20
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d113      	bne.n	800c3c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c39c:	490f      	ldr	r1, [pc, #60]	; (800c3dc <etharp_tmr+0x14c>)
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	440b      	add	r3, r1
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	6818      	ldr	r0, [r3, #0]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4a08      	ldr	r2, [pc, #32]	; (800c3dc <etharp_tmr+0x14c>)
 800c3ba:	4413      	add	r3, r2
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f000 fe6e 	bl	800d0a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	607b      	str	r3, [r7, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b09      	cmp	r3, #9
 800c3ce:	f77f af65 	ble.w	800c29c <etharp_tmr+0xc>
      }
    }
  }
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	2000054c 	.word	0x2000054c

0800c3e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	; 0x28
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c3ee:	230a      	movs	r3, #10
 800c3f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c3f2:	230a      	movs	r3, #10
 800c3f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c3f6:	230a      	movs	r3, #10
 800c3f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c3fe:	230a      	movs	r3, #10
 800c400:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	83bb      	strh	r3, [r7, #28]
 800c406:	2300      	movs	r3, #0
 800c408:	837b      	strh	r3, [r7, #26]
 800c40a:	2300      	movs	r3, #0
 800c40c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c40e:	2300      	movs	r3, #0
 800c410:	843b      	strh	r3, [r7, #32]
 800c412:	e0ae      	b.n	800c572 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c418:	49a6      	ldr	r1, [pc, #664]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c41a:	4613      	mov	r3, r2
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4413      	add	r3, r2
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	440b      	add	r3, r1
 800c424:	3314      	adds	r3, #20
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c42a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c42e:	2b0a      	cmp	r3, #10
 800c430:	d105      	bne.n	800c43e <etharp_find_entry+0x5e>
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d102      	bne.n	800c43e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c438:	8c3b      	ldrh	r3, [r7, #32]
 800c43a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c43c:	e095      	b.n	800c56a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	2b00      	cmp	r3, #0
 800c442:	f000 8092 	beq.w	800c56a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d009      	beq.n	800c460 <etharp_find_entry+0x80>
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d806      	bhi.n	800c460 <etharp_find_entry+0x80>
 800c452:	4b99      	ldr	r3, [pc, #612]	; (800c6b8 <etharp_find_entry+0x2d8>)
 800c454:	f240 1223 	movw	r2, #291	; 0x123
 800c458:	4998      	ldr	r1, [pc, #608]	; (800c6bc <etharp_find_entry+0x2dc>)
 800c45a:	4899      	ldr	r0, [pc, #612]	; (800c6c0 <etharp_find_entry+0x2e0>)
 800c45c:	f002 f9ee 	bl	800e83c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d020      	beq.n	800c4a8 <etharp_find_entry+0xc8>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6819      	ldr	r1, [r3, #0]
 800c46a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c46e:	4891      	ldr	r0, [pc, #580]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c470:	4613      	mov	r3, r2
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	4413      	add	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	4403      	add	r3, r0
 800c47a:	3304      	adds	r3, #4
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4299      	cmp	r1, r3
 800c480:	d112      	bne.n	800c4a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00c      	beq.n	800c4a2 <etharp_find_entry+0xc2>
 800c488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c48c:	4989      	ldr	r1, [pc, #548]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c48e:	4613      	mov	r3, r2
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	4413      	add	r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	440b      	add	r3, r1
 800c498:	3308      	adds	r3, #8
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d102      	bne.n	800c4a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c4a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4a6:	e100      	b.n	800c6aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c4a8:	7dfb      	ldrb	r3, [r7, #23]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d140      	bne.n	800c530 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c4ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4b2:	4980      	ldr	r1, [pc, #512]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	440b      	add	r3, r1
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01a      	beq.n	800c4fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c4c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4c8:	497a      	ldr	r1, [pc, #488]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	4413      	add	r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3312      	adds	r3, #18
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	8bba      	ldrh	r2, [r7, #28]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d845      	bhi.n	800c56a <etharp_find_entry+0x18a>
            old_queue = i;
 800c4de:	8c3b      	ldrh	r3, [r7, #32]
 800c4e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c4e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4e6:	4973      	ldr	r1, [pc, #460]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	4413      	add	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	440b      	add	r3, r1
 800c4f2:	3312      	adds	r3, #18
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	83bb      	strh	r3, [r7, #28]
 800c4f8:	e037      	b.n	800c56a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4fe:	496d      	ldr	r1, [pc, #436]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c500:	4613      	mov	r3, r2
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	4413      	add	r3, r2
 800c506:	00db      	lsls	r3, r3, #3
 800c508:	440b      	add	r3, r1
 800c50a:	3312      	adds	r3, #18
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	8b7a      	ldrh	r2, [r7, #26]
 800c510:	429a      	cmp	r2, r3
 800c512:	d82a      	bhi.n	800c56a <etharp_find_entry+0x18a>
            old_pending = i;
 800c514:	8c3b      	ldrh	r3, [r7, #32]
 800c516:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c51c:	4965      	ldr	r1, [pc, #404]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c51e:	4613      	mov	r3, r2
 800c520:	005b      	lsls	r3, r3, #1
 800c522:	4413      	add	r3, r2
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	440b      	add	r3, r1
 800c528:	3312      	adds	r3, #18
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	837b      	strh	r3, [r7, #26]
 800c52e:	e01c      	b.n	800c56a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c530:	7dfb      	ldrb	r3, [r7, #23]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d919      	bls.n	800c56a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c53a:	495e      	ldr	r1, [pc, #376]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c53c:	4613      	mov	r3, r2
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	4413      	add	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	440b      	add	r3, r1
 800c546:	3312      	adds	r3, #18
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	8b3a      	ldrh	r2, [r7, #24]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d80c      	bhi.n	800c56a <etharp_find_entry+0x18a>
            old_stable = i;
 800c550:	8c3b      	ldrh	r3, [r7, #32]
 800c552:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c558:	4956      	ldr	r1, [pc, #344]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c55a:	4613      	mov	r3, r2
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	4413      	add	r3, r2
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	440b      	add	r3, r1
 800c564:	3312      	adds	r3, #18
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c56a:	8c3b      	ldrh	r3, [r7, #32]
 800c56c:	3301      	adds	r3, #1
 800c56e:	b29b      	uxth	r3, r3
 800c570:	843b      	strh	r3, [r7, #32]
 800c572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c576:	2b09      	cmp	r3, #9
 800c578:	f77f af4c 	ble.w	800c414 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c57c:	7afb      	ldrb	r3, [r7, #11]
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d108      	bne.n	800c598 <etharp_find_entry+0x1b8>
 800c586:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c58a:	2b0a      	cmp	r3, #10
 800c58c:	d107      	bne.n	800c59e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c59c:	e085      	b.n	800c6aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c59e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5a2:	2b09      	cmp	r3, #9
 800c5a4:	dc02      	bgt.n	800c5ac <etharp_find_entry+0x1cc>
    i = empty;
 800c5a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5a8:	843b      	strh	r3, [r7, #32]
 800c5aa:	e039      	b.n	800c620 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c5ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c5b0:	2b09      	cmp	r3, #9
 800c5b2:	dc14      	bgt.n	800c5de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c5b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5bc:	493d      	ldr	r1, [pc, #244]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c5be:	4613      	mov	r3, r2
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	4413      	add	r3, r2
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	440b      	add	r3, r1
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d018      	beq.n	800c600 <etharp_find_entry+0x220>
 800c5ce:	4b3a      	ldr	r3, [pc, #232]	; (800c6b8 <etharp_find_entry+0x2d8>)
 800c5d0:	f240 126d 	movw	r2, #365	; 0x16d
 800c5d4:	493b      	ldr	r1, [pc, #236]	; (800c6c4 <etharp_find_entry+0x2e4>)
 800c5d6:	483a      	ldr	r0, [pc, #232]	; (800c6c0 <etharp_find_entry+0x2e0>)
 800c5d8:	f002 f930 	bl	800e83c <iprintf>
 800c5dc:	e010      	b.n	800c600 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c5de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c5e2:	2b09      	cmp	r3, #9
 800c5e4:	dc02      	bgt.n	800c5ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c5e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5e8:	843b      	strh	r3, [r7, #32]
 800c5ea:	e009      	b.n	800c600 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c5ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c5f0:	2b09      	cmp	r3, #9
 800c5f2:	dc02      	bgt.n	800c5fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c5f4:	8bfb      	ldrh	r3, [r7, #30]
 800c5f6:	843b      	strh	r3, [r7, #32]
 800c5f8:	e002      	b.n	800c600 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5fe:	e054      	b.n	800c6aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c600:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c604:	2b09      	cmp	r3, #9
 800c606:	dd06      	ble.n	800c616 <etharp_find_entry+0x236>
 800c608:	4b2b      	ldr	r3, [pc, #172]	; (800c6b8 <etharp_find_entry+0x2d8>)
 800c60a:	f240 127f 	movw	r2, #383	; 0x17f
 800c60e:	492e      	ldr	r1, [pc, #184]	; (800c6c8 <etharp_find_entry+0x2e8>)
 800c610:	482b      	ldr	r0, [pc, #172]	; (800c6c0 <etharp_find_entry+0x2e0>)
 800c612:	f002 f913 	bl	800e83c <iprintf>
    etharp_free_entry(i);
 800c616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fe06 	bl	800c22c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c620:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c624:	2b09      	cmp	r3, #9
 800c626:	dd06      	ble.n	800c636 <etharp_find_entry+0x256>
 800c628:	4b23      	ldr	r3, [pc, #140]	; (800c6b8 <etharp_find_entry+0x2d8>)
 800c62a:	f240 1283 	movw	r2, #387	; 0x183
 800c62e:	4926      	ldr	r1, [pc, #152]	; (800c6c8 <etharp_find_entry+0x2e8>)
 800c630:	4823      	ldr	r0, [pc, #140]	; (800c6c0 <etharp_find_entry+0x2e0>)
 800c632:	f002 f903 	bl	800e83c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c63a:	491e      	ldr	r1, [pc, #120]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c63c:	4613      	mov	r3, r2
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	4413      	add	r3, r2
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	440b      	add	r3, r1
 800c646:	3314      	adds	r3, #20
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <etharp_find_entry+0x27c>
 800c64e:	4b1a      	ldr	r3, [pc, #104]	; (800c6b8 <etharp_find_entry+0x2d8>)
 800c650:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c654:	491d      	ldr	r1, [pc, #116]	; (800c6cc <etharp_find_entry+0x2ec>)
 800c656:	481a      	ldr	r0, [pc, #104]	; (800c6c0 <etharp_find_entry+0x2e0>)
 800c658:	f002 f8f0 	bl	800e83c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00b      	beq.n	800c67a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6819      	ldr	r1, [r3, #0]
 800c66a:	4812      	ldr	r0, [pc, #72]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c66c:	4613      	mov	r3, r2
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	4413      	add	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4403      	add	r3, r0
 800c676:	3304      	adds	r3, #4
 800c678:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c67a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c67e:	490d      	ldr	r1, [pc, #52]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	440b      	add	r3, r1
 800c68a:	3312      	adds	r3, #18
 800c68c:	2200      	movs	r2, #0
 800c68e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c694:	4907      	ldr	r1, [pc, #28]	; (800c6b4 <etharp_find_entry+0x2d4>)
 800c696:	4613      	mov	r3, r2
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4413      	add	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	440b      	add	r3, r1
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c6a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3728      	adds	r7, #40	; 0x28
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	2000054c 	.word	0x2000054c
 800c6b8:	08011e04 	.word	0x08011e04
 800c6bc:	08011e3c 	.word	0x08011e3c
 800c6c0:	08011e7c 	.word	0x08011e7c
 800c6c4:	08011ea4 	.word	0x08011ea4
 800c6c8:	08011ebc 	.word	0x08011ebc
 800c6cc:	08011ed0 	.word	0x08011ed0

0800c6d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af02      	add	r7, sp, #8
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6e4:	2b06      	cmp	r3, #6
 800c6e6:	d006      	beq.n	800c6f6 <etharp_update_arp_entry+0x26>
 800c6e8:	4b48      	ldr	r3, [pc, #288]	; (800c80c <etharp_update_arp_entry+0x13c>)
 800c6ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c6ee:	4948      	ldr	r1, [pc, #288]	; (800c810 <etharp_update_arp_entry+0x140>)
 800c6f0:	4848      	ldr	r0, [pc, #288]	; (800c814 <etharp_update_arp_entry+0x144>)
 800c6f2:	f002 f8a3 	bl	800e83c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d012      	beq.n	800c722 <etharp_update_arp_entry+0x52>
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00e      	beq.n	800c722 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68f9      	ldr	r1, [r7, #12]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f8fe 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800c710:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c712:	2b00      	cmp	r3, #0
 800c714:	d105      	bne.n	800c722 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c71e:	2be0      	cmp	r3, #224	; 0xe0
 800c720:	d102      	bne.n	800c728 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c722:	f06f 030f 	mvn.w	r3, #15
 800c726:	e06c      	b.n	800c802 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c728:	78fb      	ldrb	r3, [r7, #3]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4619      	mov	r1, r3
 800c72e:	68b8      	ldr	r0, [r7, #8]
 800c730:	f7ff fe56 	bl	800c3e0 <etharp_find_entry>
 800c734:	4603      	mov	r3, r0
 800c736:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	da02      	bge.n	800c746 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c740:	8afb      	ldrh	r3, [r7, #22]
 800c742:	b25b      	sxtb	r3, r3
 800c744:	e05d      	b.n	800c802 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c74a:	4933      	ldr	r1, [pc, #204]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c74c:	4613      	mov	r3, r2
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	4413      	add	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	440b      	add	r3, r1
 800c756:	3314      	adds	r3, #20
 800c758:	2202      	movs	r2, #2
 800c75a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c75c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c760:	492d      	ldr	r1, [pc, #180]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c762:	4613      	mov	r3, r2
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	4413      	add	r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	440b      	add	r3, r1
 800c76c:	3308      	adds	r3, #8
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c772:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c776:	4613      	mov	r3, r2
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	4413      	add	r3, r2
 800c77c:	00db      	lsls	r3, r3, #3
 800c77e:	3308      	adds	r3, #8
 800c780:	4a25      	ldr	r2, [pc, #148]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c782:	4413      	add	r3, r2
 800c784:	3304      	adds	r3, #4
 800c786:	2206      	movs	r2, #6
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f002 f840 	bl	800e810 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c794:	4920      	ldr	r1, [pc, #128]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c796:	4613      	mov	r3, r2
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	4413      	add	r3, r2
 800c79c:	00db      	lsls	r3, r3, #3
 800c79e:	440b      	add	r3, r1
 800c7a0:	3312      	adds	r3, #18
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c7a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7aa:	491b      	ldr	r1, [pc, #108]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	4413      	add	r3, r2
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	440b      	add	r3, r1
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d021      	beq.n	800c800 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c7bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7c0:	4915      	ldr	r1, [pc, #84]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	4413      	add	r3, r2
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	440b      	add	r3, r1
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c7d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7d4:	4910      	ldr	r1, [pc, #64]	; (800c818 <etharp_update_arp_entry+0x148>)
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	440b      	add	r3, r1
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c7ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6939      	ldr	r1, [r7, #16]
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f001 ff91 	bl	800e71c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c7fa:	6938      	ldr	r0, [r7, #16]
 800c7fc:	f7f8 ff2e 	bl	800565c <pbuf_free>
  }
  return ERR_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3718      	adds	r7, #24
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	08011e04 	.word	0x08011e04
 800c810:	08011efc 	.word	0x08011efc
 800c814:	08011e7c 	.word	0x08011e7c
 800c818:	2000054c 	.word	0x2000054c

0800c81c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c824:	2300      	movs	r3, #0
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	e01e      	b.n	800c868 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c82a:	4913      	ldr	r1, [pc, #76]	; (800c878 <etharp_cleanup_netif+0x5c>)
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	4613      	mov	r3, r2
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	440b      	add	r3, r1
 800c838:	3314      	adds	r3, #20
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c83e:	7afb      	ldrb	r3, [r7, #11]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00e      	beq.n	800c862 <etharp_cleanup_netif+0x46>
 800c844:	490c      	ldr	r1, [pc, #48]	; (800c878 <etharp_cleanup_netif+0x5c>)
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	4613      	mov	r3, r2
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	440b      	add	r3, r1
 800c852:	3308      	adds	r3, #8
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d102      	bne.n	800c862 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff fce5 	bl	800c22c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3301      	adds	r3, #1
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2b09      	cmp	r3, #9
 800c86c:	dddd      	ble.n	800c82a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c86e:	bf00      	nop
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	2000054c 	.word	0x2000054c

0800c87c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c87c:	b5b0      	push	{r4, r5, r7, lr}
 800c87e:	b08a      	sub	sp, #40	; 0x28
 800c880:	af04      	add	r7, sp, #16
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d107      	bne.n	800c89c <etharp_input+0x20>
 800c88c:	4b3d      	ldr	r3, [pc, #244]	; (800c984 <etharp_input+0x108>)
 800c88e:	f240 228a 	movw	r2, #650	; 0x28a
 800c892:	493d      	ldr	r1, [pc, #244]	; (800c988 <etharp_input+0x10c>)
 800c894:	483d      	ldr	r0, [pc, #244]	; (800c98c <etharp_input+0x110>)
 800c896:	f001 ffd1 	bl	800e83c <iprintf>
 800c89a:	e06f      	b.n	800c97c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ac:	d10c      	bne.n	800c8c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c8b2:	2b06      	cmp	r3, #6
 800c8b4:	d108      	bne.n	800c8c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d104      	bne.n	800c8c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	885b      	ldrh	r3, [r3, #2]
 800c8c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c8c4:	2b08      	cmp	r3, #8
 800c8c6:	d003      	beq.n	800c8d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7f8 fec7 	bl	800565c <pbuf_free>
    return;
 800c8ce:	e055      	b.n	800c97c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	330e      	adds	r3, #14
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	3318      	adds	r3, #24
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d102      	bne.n	800c8f0 <etharp_input+0x74>
    for_us = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	75fb      	strb	r3, [r7, #23]
 800c8ee:	e009      	b.n	800c904 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	bf0c      	ite	eq
 800c8fc:	2301      	moveq	r3, #1
 800c8fe:	2300      	movne	r3, #0
 800c900:	b2db      	uxtb	r3, r3
 800c902:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	f103 0208 	add.w	r2, r3, #8
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <etharp_input+0x98>
 800c910:	2301      	movs	r3, #1
 800c912:	e000      	b.n	800c916 <etharp_input+0x9a>
 800c914:	2302      	movs	r3, #2
 800c916:	f107 010c 	add.w	r1, r7, #12
 800c91a:	6838      	ldr	r0, [r7, #0]
 800c91c:	f7ff fed8 	bl	800c6d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	88db      	ldrh	r3, [r3, #6]
 800c924:	b29b      	uxth	r3, r3
 800c926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c92a:	d003      	beq.n	800c934 <etharp_input+0xb8>
 800c92c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c930:	d01e      	beq.n	800c970 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c932:	e020      	b.n	800c976 <etharp_input+0xfa>
      if (for_us) {
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d01c      	beq.n	800c974 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c954:	2102      	movs	r1, #2
 800c956:	9103      	str	r1, [sp, #12]
 800c958:	f107 010c 	add.w	r1, r7, #12
 800c95c:	9102      	str	r1, [sp, #8]
 800c95e:	9201      	str	r2, [sp, #4]
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	462b      	mov	r3, r5
 800c964:	4622      	mov	r2, r4
 800c966:	4601      	mov	r1, r0
 800c968:	6838      	ldr	r0, [r7, #0]
 800c96a:	f000 faeb 	bl	800cf44 <etharp_raw>
      break;
 800c96e:	e001      	b.n	800c974 <etharp_input+0xf8>
      break;
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <etharp_input+0xfa>
      break;
 800c974:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7f8 fe70 	bl	800565c <pbuf_free>
}
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bdb0      	pop	{r4, r5, r7, pc}
 800c982:	bf00      	nop
 800c984:	08011e04 	.word	0x08011e04
 800c988:	08011f54 	.word	0x08011f54
 800c98c:	08011e7c 	.word	0x08011e7c

0800c990 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af02      	add	r7, sp, #8
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c99e:	79fa      	ldrb	r2, [r7, #7]
 800c9a0:	4944      	ldr	r1, [pc, #272]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	4413      	add	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	440b      	add	r3, r1
 800c9ac:	3314      	adds	r3, #20
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d806      	bhi.n	800c9c2 <etharp_output_to_arp_index+0x32>
 800c9b4:	4b40      	ldr	r3, [pc, #256]	; (800cab8 <etharp_output_to_arp_index+0x128>)
 800c9b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c9ba:	4940      	ldr	r1, [pc, #256]	; (800cabc <etharp_output_to_arp_index+0x12c>)
 800c9bc:	4840      	ldr	r0, [pc, #256]	; (800cac0 <etharp_output_to_arp_index+0x130>)
 800c9be:	f001 ff3d 	bl	800e83c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c9c2:	79fa      	ldrb	r2, [r7, #7]
 800c9c4:	493b      	ldr	r1, [pc, #236]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	4413      	add	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	440b      	add	r3, r1
 800c9d0:	3314      	adds	r3, #20
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d153      	bne.n	800ca80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c9d8:	79fa      	ldrb	r2, [r7, #7]
 800c9da:	4936      	ldr	r1, [pc, #216]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800c9dc:	4613      	mov	r3, r2
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	4413      	add	r3, r2
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	440b      	add	r3, r1
 800c9e6:	3312      	adds	r3, #18
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c9ee:	d919      	bls.n	800ca24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c9f0:	79fa      	ldrb	r2, [r7, #7]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	4413      	add	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	4a2e      	ldr	r2, [pc, #184]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800c9fc:	4413      	add	r3, r2
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4619      	mov	r1, r3
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 fb4c 	bl	800d0a0 <etharp_request>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d138      	bne.n	800ca80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ca0e:	79fa      	ldrb	r2, [r7, #7]
 800ca10:	4928      	ldr	r1, [pc, #160]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800ca12:	4613      	mov	r3, r2
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	4413      	add	r3, r2
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	440b      	add	r3, r1
 800ca1c:	3314      	adds	r3, #20
 800ca1e:	2203      	movs	r2, #3
 800ca20:	701a      	strb	r2, [r3, #0]
 800ca22:	e02d      	b.n	800ca80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ca24:	79fa      	ldrb	r2, [r7, #7]
 800ca26:	4923      	ldr	r1, [pc, #140]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800ca28:	4613      	mov	r3, r2
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	3312      	adds	r3, #18
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ca3a:	d321      	bcc.n	800ca80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ca3c:	79fa      	ldrb	r2, [r7, #7]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	4413      	add	r3, r2
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	4a1b      	ldr	r2, [pc, #108]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800ca48:	4413      	add	r3, r2
 800ca4a:	1d19      	adds	r1, r3, #4
 800ca4c:	79fa      	ldrb	r2, [r7, #7]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	4413      	add	r3, r2
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	3308      	adds	r3, #8
 800ca58:	4a16      	ldr	r2, [pc, #88]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800ca5a:	4413      	add	r3, r2
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	461a      	mov	r2, r3
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f000 fafb 	bl	800d05c <etharp_request_dst>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d109      	bne.n	800ca80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ca6c:	79fa      	ldrb	r2, [r7, #7]
 800ca6e:	4911      	ldr	r1, [pc, #68]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800ca70:	4613      	mov	r3, r2
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	4413      	add	r3, r2
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	440b      	add	r3, r1
 800ca7a:	3314      	adds	r3, #20
 800ca7c:	2203      	movs	r2, #3
 800ca7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ca86:	79fa      	ldrb	r2, [r7, #7]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	4413      	add	r3, r2
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	3308      	adds	r3, #8
 800ca92:	4a08      	ldr	r2, [pc, #32]	; (800cab4 <etharp_output_to_arp_index+0x124>)
 800ca94:	4413      	add	r3, r2
 800ca96:	3304      	adds	r3, #4
 800ca98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca9c:	9200      	str	r2, [sp, #0]
 800ca9e:	460a      	mov	r2, r1
 800caa0:	68b9      	ldr	r1, [r7, #8]
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f001 fe3a 	bl	800e71c <ethernet_output>
 800caa8:	4603      	mov	r3, r0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2000054c 	.word	0x2000054c
 800cab8:	08011e04 	.word	0x08011e04
 800cabc:	08011f74 	.word	0x08011f74
 800cac0:	08011e7c 	.word	0x08011e7c

0800cac4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b08a      	sub	sp, #40	; 0x28
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <etharp_output+0x24>
 800cada:	4b73      	ldr	r3, [pc, #460]	; (800cca8 <etharp_output+0x1e4>)
 800cadc:	f240 321e 	movw	r2, #798	; 0x31e
 800cae0:	4972      	ldr	r1, [pc, #456]	; (800ccac <etharp_output+0x1e8>)
 800cae2:	4873      	ldr	r0, [pc, #460]	; (800ccb0 <etharp_output+0x1ec>)
 800cae4:	f001 feaa 	bl	800e83c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <etharp_output+0x38>
 800caee:	4b6e      	ldr	r3, [pc, #440]	; (800cca8 <etharp_output+0x1e4>)
 800caf0:	f240 321f 	movw	r2, #799	; 0x31f
 800caf4:	496f      	ldr	r1, [pc, #444]	; (800ccb4 <etharp_output+0x1f0>)
 800caf6:	486e      	ldr	r0, [pc, #440]	; (800ccb0 <etharp_output+0x1ec>)
 800caf8:	f001 fea0 	bl	800e83c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d106      	bne.n	800cb10 <etharp_output+0x4c>
 800cb02:	4b69      	ldr	r3, [pc, #420]	; (800cca8 <etharp_output+0x1e4>)
 800cb04:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cb08:	496b      	ldr	r1, [pc, #428]	; (800ccb8 <etharp_output+0x1f4>)
 800cb0a:	4869      	ldr	r0, [pc, #420]	; (800ccb0 <etharp_output+0x1ec>)
 800cb0c:	f001 fe96 	bl	800e83c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68f9      	ldr	r1, [r7, #12]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 fef8 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cb22:	4b66      	ldr	r3, [pc, #408]	; (800ccbc <etharp_output+0x1f8>)
 800cb24:	61fb      	str	r3, [r7, #28]
 800cb26:	e0af      	b.n	800cc88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb30:	2be0      	cmp	r3, #224	; 0xe0
 800cb32:	d118      	bne.n	800cb66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cb34:	2301      	movs	r3, #1
 800cb36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cb3c:	235e      	movs	r3, #94	; 0x5e
 800cb3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3301      	adds	r3, #1
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3302      	adds	r3, #2
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3303      	adds	r3, #3
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cb5e:	f107 0310 	add.w	r3, r7, #16
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	e090      	b.n	800cc88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	405a      	eors	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3308      	adds	r3, #8
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4013      	ands	r3, r2
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d012      	beq.n	800cba4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d00b      	beq.n	800cba4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	330c      	adds	r3, #12
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	330c      	adds	r3, #12
 800cb9a:	61bb      	str	r3, [r7, #24]
 800cb9c:	e002      	b.n	800cba4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cb9e:	f06f 0303 	mvn.w	r3, #3
 800cba2:	e07d      	b.n	800cca0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cba4:	4b46      	ldr	r3, [pc, #280]	; (800ccc0 <etharp_output+0x1fc>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4a46      	ldr	r2, [pc, #280]	; (800ccc4 <etharp_output+0x200>)
 800cbac:	460b      	mov	r3, r1
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	440b      	add	r3, r1
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	4413      	add	r3, r2
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d925      	bls.n	800cc0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cbbe:	4b40      	ldr	r3, [pc, #256]	; (800ccc0 <etharp_output+0x1fc>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4a3f      	ldr	r2, [pc, #252]	; (800ccc4 <etharp_output+0x200>)
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	440b      	add	r3, r1
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	4413      	add	r3, r2
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d117      	bne.n	800cc0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	4b38      	ldr	r3, [pc, #224]	; (800ccc0 <etharp_output+0x1fc>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	4937      	ldr	r1, [pc, #220]	; (800ccc4 <etharp_output+0x200>)
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4403      	add	r3, r0
 800cbec:	00db      	lsls	r3, r3, #3
 800cbee:	440b      	add	r3, r1
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d108      	bne.n	800cc0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cbf8:	4b31      	ldr	r3, [pc, #196]	; (800ccc0 <etharp_output+0x1fc>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f7ff fec5 	bl	800c990 <etharp_output_to_arp_index>
 800cc06:	4603      	mov	r3, r0
 800cc08:	e04a      	b.n	800cca0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	75fb      	strb	r3, [r7, #23]
 800cc0e:	e031      	b.n	800cc74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc10:	7dfa      	ldrb	r2, [r7, #23]
 800cc12:	492c      	ldr	r1, [pc, #176]	; (800ccc4 <etharp_output+0x200>)
 800cc14:	4613      	mov	r3, r2
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	4413      	add	r3, r2
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	440b      	add	r3, r1
 800cc1e:	3314      	adds	r3, #20
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d923      	bls.n	800cc6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cc26:	7dfa      	ldrb	r2, [r7, #23]
 800cc28:	4926      	ldr	r1, [pc, #152]	; (800ccc4 <etharp_output+0x200>)
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	4413      	add	r3, r2
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	3308      	adds	r3, #8
 800cc36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d117      	bne.n	800cc6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	6819      	ldr	r1, [r3, #0]
 800cc42:	7dfa      	ldrb	r2, [r7, #23]
 800cc44:	481f      	ldr	r0, [pc, #124]	; (800ccc4 <etharp_output+0x200>)
 800cc46:	4613      	mov	r3, r2
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	4413      	add	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	4403      	add	r3, r0
 800cc50:	3304      	adds	r3, #4
 800cc52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cc54:	4299      	cmp	r1, r3
 800cc56:	d10a      	bne.n	800cc6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cc58:	4a19      	ldr	r2, [pc, #100]	; (800ccc0 <etharp_output+0x1fc>)
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	461a      	mov	r2, r3
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7ff fe93 	bl	800c990 <etharp_output_to_arp_index>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	e018      	b.n	800cca0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	3301      	adds	r3, #1
 800cc72:	75fb      	strb	r3, [r7, #23]
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
 800cc76:	2b09      	cmp	r3, #9
 800cc78:	d9ca      	bls.n	800cc10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	69b9      	ldr	r1, [r7, #24]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 f822 	bl	800ccc8 <etharp_query>
 800cc84:	4603      	mov	r3, r0
 800cc86:	e00b      	b.n	800cca0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cc8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	68b9      	ldr	r1, [r7, #8]
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f001 fd3f 	bl	800e71c <ethernet_output>
 800cc9e:	4603      	mov	r3, r0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3720      	adds	r7, #32
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	08011e04 	.word	0x08011e04
 800ccac:	08011f54 	.word	0x08011f54
 800ccb0:	08011e7c 	.word	0x08011e7c
 800ccb4:	08011fa4 	.word	0x08011fa4
 800ccb8:	08011f44 	.word	0x08011f44
 800ccbc:	080133a8 	.word	0x080133a8
 800ccc0:	2000063c 	.word	0x2000063c
 800ccc4:	2000054c 	.word	0x2000054c

0800ccc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08c      	sub	sp, #48	; 0x30
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	3326      	adds	r3, #38	; 0x26
 800ccd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ccda:	23ff      	movs	r3, #255	; 0xff
 800ccdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68f9      	ldr	r1, [r7, #12]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fe0e 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10c      	bne.n	800cd10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ccfe:	2be0      	cmp	r3, #224	; 0xe0
 800cd00:	d006      	beq.n	800cd10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d102      	bne.n	800cd16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cd10:	f06f 030f 	mvn.w	r3, #15
 800cd14:	e101      	b.n	800cf1a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	2101      	movs	r1, #1
 800cd1a:	68b8      	ldr	r0, [r7, #8]
 800cd1c:	f7ff fb60 	bl	800c3e0 <etharp_find_entry>
 800cd20:	4603      	mov	r3, r0
 800cd22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cd24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da02      	bge.n	800cd32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cd2c:	8a7b      	ldrh	r3, [r7, #18]
 800cd2e:	b25b      	sxtb	r3, r3
 800cd30:	e0f3      	b.n	800cf1a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cd32:	8a7b      	ldrh	r3, [r7, #18]
 800cd34:	2b7e      	cmp	r3, #126	; 0x7e
 800cd36:	d906      	bls.n	800cd46 <etharp_query+0x7e>
 800cd38:	4b7a      	ldr	r3, [pc, #488]	; (800cf24 <etharp_query+0x25c>)
 800cd3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cd3e:	497a      	ldr	r1, [pc, #488]	; (800cf28 <etharp_query+0x260>)
 800cd40:	487a      	ldr	r0, [pc, #488]	; (800cf2c <etharp_query+0x264>)
 800cd42:	f001 fd7b 	bl	800e83c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cd46:	8a7b      	ldrh	r3, [r7, #18]
 800cd48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cd4a:	7c7a      	ldrb	r2, [r7, #17]
 800cd4c:	4978      	ldr	r1, [pc, #480]	; (800cf30 <etharp_query+0x268>)
 800cd4e:	4613      	mov	r3, r2
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	4413      	add	r3, r2
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	440b      	add	r3, r1
 800cd58:	3314      	adds	r3, #20
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d115      	bne.n	800cd8c <etharp_query+0xc4>
    is_new_entry = 1;
 800cd60:	2301      	movs	r3, #1
 800cd62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cd64:	7c7a      	ldrb	r2, [r7, #17]
 800cd66:	4972      	ldr	r1, [pc, #456]	; (800cf30 <etharp_query+0x268>)
 800cd68:	4613      	mov	r3, r2
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	440b      	add	r3, r1
 800cd72:	3314      	adds	r3, #20
 800cd74:	2201      	movs	r2, #1
 800cd76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cd78:	7c7a      	ldrb	r2, [r7, #17]
 800cd7a:	496d      	ldr	r1, [pc, #436]	; (800cf30 <etharp_query+0x268>)
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	4413      	add	r3, r2
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	440b      	add	r3, r1
 800cd86:	3308      	adds	r3, #8
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cd8c:	7c7a      	ldrb	r2, [r7, #17]
 800cd8e:	4968      	ldr	r1, [pc, #416]	; (800cf30 <etharp_query+0x268>)
 800cd90:	4613      	mov	r3, r2
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	4413      	add	r3, r2
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	440b      	add	r3, r1
 800cd9a:	3314      	adds	r3, #20
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d011      	beq.n	800cdc6 <etharp_query+0xfe>
 800cda2:	7c7a      	ldrb	r2, [r7, #17]
 800cda4:	4962      	ldr	r1, [pc, #392]	; (800cf30 <etharp_query+0x268>)
 800cda6:	4613      	mov	r3, r2
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	4413      	add	r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	440b      	add	r3, r1
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d806      	bhi.n	800cdc6 <etharp_query+0xfe>
 800cdb8:	4b5a      	ldr	r3, [pc, #360]	; (800cf24 <etharp_query+0x25c>)
 800cdba:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cdbe:	495d      	ldr	r1, [pc, #372]	; (800cf34 <etharp_query+0x26c>)
 800cdc0:	485a      	ldr	r0, [pc, #360]	; (800cf2c <etharp_query+0x264>)
 800cdc2:	f001 fd3b 	bl	800e83c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d102      	bne.n	800cdd2 <etharp_query+0x10a>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10c      	bne.n	800cdec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cdd2:	68b9      	ldr	r1, [r7, #8]
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f000 f963 	bl	800d0a0 <etharp_request>
 800cdda:	4603      	mov	r3, r0
 800cddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d102      	bne.n	800cdec <etharp_query+0x124>
      return result;
 800cde6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdea:	e096      	b.n	800cf1a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <etharp_query+0x138>
 800cdf2:	4b4c      	ldr	r3, [pc, #304]	; (800cf24 <etharp_query+0x25c>)
 800cdf4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cdf8:	494f      	ldr	r1, [pc, #316]	; (800cf38 <etharp_query+0x270>)
 800cdfa:	484c      	ldr	r0, [pc, #304]	; (800cf2c <etharp_query+0x264>)
 800cdfc:	f001 fd1e 	bl	800e83c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ce00:	7c7a      	ldrb	r2, [r7, #17]
 800ce02:	494b      	ldr	r1, [pc, #300]	; (800cf30 <etharp_query+0x268>)
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3314      	adds	r3, #20
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d917      	bls.n	800ce46 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ce16:	4a49      	ldr	r2, [pc, #292]	; (800cf3c <etharp_query+0x274>)
 800ce18:	7c7b      	ldrb	r3, [r7, #17]
 800ce1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ce1c:	7c7a      	ldrb	r2, [r7, #17]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4413      	add	r3, r2
 800ce24:	00db      	lsls	r3, r3, #3
 800ce26:	3308      	adds	r3, #8
 800ce28:	4a41      	ldr	r2, [pc, #260]	; (800cf30 <etharp_query+0x268>)
 800ce2a:	4413      	add	r3, r2
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce32:	9200      	str	r2, [sp, #0]
 800ce34:	697a      	ldr	r2, [r7, #20]
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f001 fc6f 	bl	800e71c <ethernet_output>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce44:	e067      	b.n	800cf16 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce46:	7c7a      	ldrb	r2, [r7, #17]
 800ce48:	4939      	ldr	r1, [pc, #228]	; (800cf30 <etharp_query+0x268>)
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	4413      	add	r3, r2
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	440b      	add	r3, r1
 800ce54:	3314      	adds	r3, #20
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d15c      	bne.n	800cf16 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ce64:	e01c      	b.n	800cea0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	895a      	ldrh	r2, [r3, #10]
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	891b      	ldrh	r3, [r3, #8]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d10a      	bne.n	800ce88 <etharp_query+0x1c0>
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d006      	beq.n	800ce88 <etharp_query+0x1c0>
 800ce7a:	4b2a      	ldr	r3, [pc, #168]	; (800cf24 <etharp_query+0x25c>)
 800ce7c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ce80:	492f      	ldr	r1, [pc, #188]	; (800cf40 <etharp_query+0x278>)
 800ce82:	482a      	ldr	r0, [pc, #168]	; (800cf2c <etharp_query+0x264>)
 800ce84:	f001 fcda 	bl	800e83c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	7b1b      	ldrb	r3, [r3, #12]
 800ce8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <etharp_query+0x1d2>
        copy_needed = 1;
 800ce94:	2301      	movs	r3, #1
 800ce96:	61bb      	str	r3, [r7, #24]
        break;
 800ce98:	e005      	b.n	800cea6 <etharp_query+0x1de>
      }
      p = p->next;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1df      	bne.n	800ce66 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d007      	beq.n	800cebc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ceb2:	200e      	movs	r0, #14
 800ceb4:	f7f8 fe2e 	bl	8005b14 <pbuf_clone>
 800ceb8:	61f8      	str	r0, [r7, #28]
 800ceba:	e004      	b.n	800cec6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cec0:	69f8      	ldr	r0, [r7, #28]
 800cec2:	f7f8 fc6b 	bl	800579c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d021      	beq.n	800cf10 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cecc:	7c7a      	ldrb	r2, [r7, #17]
 800cece:	4918      	ldr	r1, [pc, #96]	; (800cf30 <etharp_query+0x268>)
 800ced0:	4613      	mov	r3, r2
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	4413      	add	r3, r2
 800ced6:	00db      	lsls	r3, r3, #3
 800ced8:	440b      	add	r3, r1
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cee0:	7c7a      	ldrb	r2, [r7, #17]
 800cee2:	4913      	ldr	r1, [pc, #76]	; (800cf30 <etharp_query+0x268>)
 800cee4:	4613      	mov	r3, r2
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	4413      	add	r3, r2
 800ceea:	00db      	lsls	r3, r3, #3
 800ceec:	440b      	add	r3, r1
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7f8 fbb3 	bl	800565c <pbuf_free>
      }
      arp_table[i].q = p;
 800cef6:	7c7a      	ldrb	r2, [r7, #17]
 800cef8:	490d      	ldr	r1, [pc, #52]	; (800cf30 <etharp_query+0x268>)
 800cefa:	4613      	mov	r3, r2
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4413      	add	r3, r2
 800cf00:	00db      	lsls	r3, r3, #3
 800cf02:	440b      	add	r3, r1
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf0e:	e002      	b.n	800cf16 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cf10:	23ff      	movs	r3, #255	; 0xff
 800cf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cf16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3728      	adds	r7, #40	; 0x28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	08011e04 	.word	0x08011e04
 800cf28:	08011fb0 	.word	0x08011fb0
 800cf2c:	08011e7c 	.word	0x08011e7c
 800cf30:	2000054c 	.word	0x2000054c
 800cf34:	08011fc0 	.word	0x08011fc0
 800cf38:	08011fa4 	.word	0x08011fa4
 800cf3c:	2000063c 	.word	0x2000063c
 800cf40:	08011fe8 	.word	0x08011fe8

0800cf44 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b08a      	sub	sp, #40	; 0x28
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <etharp_raw+0x26>
 800cf5c:	4b3a      	ldr	r3, [pc, #232]	; (800d048 <etharp_raw+0x104>)
 800cf5e:	f240 4257 	movw	r2, #1111	; 0x457
 800cf62:	493a      	ldr	r1, [pc, #232]	; (800d04c <etharp_raw+0x108>)
 800cf64:	483a      	ldr	r0, [pc, #232]	; (800d050 <etharp_raw+0x10c>)
 800cf66:	f001 fc69 	bl	800e83c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cf6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf6e:	211c      	movs	r1, #28
 800cf70:	200e      	movs	r0, #14
 800cf72:	f7f8 f88f 	bl	8005094 <pbuf_alloc>
 800cf76:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d102      	bne.n	800cf84 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cf7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf82:	e05d      	b.n	800d040 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	895b      	ldrh	r3, [r3, #10]
 800cf88:	2b1b      	cmp	r3, #27
 800cf8a:	d806      	bhi.n	800cf9a <etharp_raw+0x56>
 800cf8c:	4b2e      	ldr	r3, [pc, #184]	; (800d048 <etharp_raw+0x104>)
 800cf8e:	f240 4262 	movw	r2, #1122	; 0x462
 800cf92:	4930      	ldr	r1, [pc, #192]	; (800d054 <etharp_raw+0x110>)
 800cf94:	482e      	ldr	r0, [pc, #184]	; (800d050 <etharp_raw+0x10c>)
 800cf96:	f001 fc51 	bl	800e83c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cfa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f7 f870 	bl	8004088 <lwip_htons>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	461a      	mov	r2, r3
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cfb6:	2b06      	cmp	r3, #6
 800cfb8:	d006      	beq.n	800cfc8 <etharp_raw+0x84>
 800cfba:	4b23      	ldr	r3, [pc, #140]	; (800d048 <etharp_raw+0x104>)
 800cfbc:	f240 4269 	movw	r2, #1129	; 0x469
 800cfc0:	4925      	ldr	r1, [pc, #148]	; (800d058 <etharp_raw+0x114>)
 800cfc2:	4823      	ldr	r0, [pc, #140]	; (800d050 <etharp_raw+0x10c>)
 800cfc4:	f001 fc3a 	bl	800e83c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	2206      	movs	r2, #6
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 fc1d 	bl	800e810 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	3312      	adds	r3, #18
 800cfda:	2206      	movs	r2, #6
 800cfdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f001 fc16 	bl	800e810 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	330e      	adds	r3, #14
 800cfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfea:	6812      	ldr	r2, [r2, #0]
 800cfec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	3318      	adds	r3, #24
 800cff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cff4:	6812      	ldr	r2, [r2, #0]
 800cff6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2200      	movs	r2, #0
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	2200      	movs	r2, #0
 800d000:	f042 0201 	orr.w	r2, r2, #1
 800d004:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2200      	movs	r2, #0
 800d00a:	f042 0208 	orr.w	r2, r2, #8
 800d00e:	709a      	strb	r2, [r3, #2]
 800d010:	2200      	movs	r2, #0
 800d012:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2206      	movs	r2, #6
 800d018:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2204      	movs	r2, #4
 800d01e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d020:	f640 0306 	movw	r3, #2054	; 0x806
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	69b9      	ldr	r1, [r7, #24]
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f001 fb75 	bl	800e71c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d032:	69b8      	ldr	r0, [r7, #24]
 800d034:	f7f8 fb12 	bl	800565c <pbuf_free>
  p = NULL;
 800d038:	2300      	movs	r3, #0
 800d03a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d03c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3720      	adds	r7, #32
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	08011e04 	.word	0x08011e04
 800d04c:	08011f54 	.word	0x08011f54
 800d050:	08011e7c 	.word	0x08011e7c
 800d054:	08012004 	.word	0x08012004
 800d058:	08012038 	.word	0x08012038

0800d05c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af04      	add	r7, sp, #16
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d078:	2201      	movs	r2, #1
 800d07a:	9203      	str	r2, [sp, #12]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	9202      	str	r2, [sp, #8]
 800d080:	4a06      	ldr	r2, [pc, #24]	; (800d09c <etharp_request_dst+0x40>)
 800d082:	9201      	str	r2, [sp, #4]
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	4603      	mov	r3, r0
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff ff5a 	bl	800cf44 <etharp_raw>
 800d090:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	080133b0 	.word	0x080133b0

0800d0a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d0aa:	4a05      	ldr	r2, [pc, #20]	; (800d0c0 <etharp_request+0x20>)
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff ffd4 	bl	800d05c <etharp_request_dst>
 800d0b4:	4603      	mov	r3, r0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	080133a8 	.word	0x080133a8

0800d0c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08e      	sub	sp, #56	; 0x38
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d0ce:	4b79      	ldr	r3, [pc, #484]	; (800d2b4 <icmp_input+0x1f0>)
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f003 030f 	and.w	r3, r3, #15
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d0e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0e6:	2b13      	cmp	r3, #19
 800d0e8:	f240 80cd 	bls.w	800d286 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	895b      	ldrh	r3, [r3, #10]
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	f240 80ca 	bls.w	800d28a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d100:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 80b7 	beq.w	800d278 <icmp_input+0x1b4>
 800d10a:	2b08      	cmp	r3, #8
 800d10c:	f040 80b7 	bne.w	800d27e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d110:	4b69      	ldr	r3, [pc, #420]	; (800d2b8 <icmp_input+0x1f4>)
 800d112:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d114:	4b67      	ldr	r3, [pc, #412]	; (800d2b4 <icmp_input+0x1f0>)
 800d116:	695b      	ldr	r3, [r3, #20]
 800d118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d11c:	2be0      	cmp	r3, #224	; 0xe0
 800d11e:	f000 80bb 	beq.w	800d298 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d122:	4b64      	ldr	r3, [pc, #400]	; (800d2b4 <icmp_input+0x1f0>)
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	4a63      	ldr	r2, [pc, #396]	; (800d2b4 <icmp_input+0x1f0>)
 800d128:	6812      	ldr	r2, [r2, #0]
 800d12a:	4611      	mov	r1, r2
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 fbed 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	f040 80b1 	bne.w	800d29c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	891b      	ldrh	r3, [r3, #8]
 800d13e:	2b07      	cmp	r3, #7
 800d140:	f240 80a5 	bls.w	800d28e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d146:	330e      	adds	r3, #14
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7f8 f9f0 	bl	8005530 <pbuf_add_header>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d04b      	beq.n	800d1ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	891a      	ldrh	r2, [r3, #8]
 800d15a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d15c:	4413      	add	r3, r2
 800d15e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	891b      	ldrh	r3, [r3, #8]
 800d164:	8b7a      	ldrh	r2, [r7, #26]
 800d166:	429a      	cmp	r2, r3
 800d168:	f0c0 809a 	bcc.w	800d2a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d16c:	8b7b      	ldrh	r3, [r7, #26]
 800d16e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d172:	4619      	mov	r1, r3
 800d174:	200e      	movs	r0, #14
 800d176:	f7f7 ff8d 	bl	8005094 <pbuf_alloc>
 800d17a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f000 8090 	beq.w	800d2a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	895b      	ldrh	r3, [r3, #10]
 800d188:	461a      	mov	r2, r3
 800d18a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d18c:	3308      	adds	r3, #8
 800d18e:	429a      	cmp	r2, r3
 800d190:	d203      	bcs.n	800d19a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d192:	6978      	ldr	r0, [r7, #20]
 800d194:	f7f8 fa62 	bl	800565c <pbuf_free>
          goto icmperr;
 800d198:	e085      	b.n	800d2a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f001 fb34 	bl	800e810 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d1a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	6978      	ldr	r0, [r7, #20]
 800d1ae:	f7f8 f9cf 	bl	8005550 <pbuf_remove_header>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d009      	beq.n	800d1cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d1b8:	4b40      	ldr	r3, [pc, #256]	; (800d2bc <icmp_input+0x1f8>)
 800d1ba:	22b6      	movs	r2, #182	; 0xb6
 800d1bc:	4940      	ldr	r1, [pc, #256]	; (800d2c0 <icmp_input+0x1fc>)
 800d1be:	4841      	ldr	r0, [pc, #260]	; (800d2c4 <icmp_input+0x200>)
 800d1c0:	f001 fb3c 	bl	800e83c <iprintf>
          pbuf_free(r);
 800d1c4:	6978      	ldr	r0, [r7, #20]
 800d1c6:	f7f8 fa49 	bl	800565c <pbuf_free>
          goto icmperr;
 800d1ca:	e06c      	b.n	800d2a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	6978      	ldr	r0, [r7, #20]
 800d1d0:	f7f8 fb5c 	bl	800588c <pbuf_copy>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d003      	beq.n	800d1e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d1da:	6978      	ldr	r0, [r7, #20]
 800d1dc:	f7f8 fa3e 	bl	800565c <pbuf_free>
          goto icmperr;
 800d1e0:	e061      	b.n	800d2a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7f8 fa3a 	bl	800565c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	607b      	str	r3, [r7, #4]
 800d1ec:	e00f      	b.n	800d20e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d1ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1f0:	330e      	adds	r3, #14
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7f8 f9ab 	bl	8005550 <pbuf_remove_header>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d006      	beq.n	800d20e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d200:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <icmp_input+0x1f8>)
 800d202:	22c7      	movs	r2, #199	; 0xc7
 800d204:	4930      	ldr	r1, [pc, #192]	; (800d2c8 <icmp_input+0x204>)
 800d206:	482f      	ldr	r0, [pc, #188]	; (800d2c4 <icmp_input+0x200>)
 800d208:	f001 fb18 	bl	800e83c <iprintf>
          goto icmperr;
 800d20c:	e04b      	b.n	800d2a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d214:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7f8 f989 	bl	8005530 <pbuf_add_header>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d12b      	bne.n	800d27c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d232:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <icmp_input+0x1f0>)
 800d234:	691a      	ldr	r2, [r3, #16]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2200      	movs	r2, #0
 800d23e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2200      	movs	r2, #0
 800d244:	709a      	strb	r2, [r3, #2]
 800d246:	2200      	movs	r2, #0
 800d248:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	22ff      	movs	r2, #255	; 0xff
 800d24e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	729a      	strb	r2, [r3, #10]
 800d256:	2200      	movs	r2, #0
 800d258:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	9302      	str	r3, [sp, #8]
 800d25e:	2301      	movs	r3, #1
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	2300      	movs	r3, #0
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	23ff      	movs	r3, #255	; 0xff
 800d268:	2200      	movs	r2, #0
 800d26a:	69f9      	ldr	r1, [r7, #28]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fa75 	bl	800d75c <ip4_output_if>
 800d272:	4603      	mov	r3, r0
 800d274:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d276:	e001      	b.n	800d27c <icmp_input+0x1b8>
      break;
 800d278:	bf00      	nop
 800d27a:	e000      	b.n	800d27e <icmp_input+0x1ba>
      break;
 800d27c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7f8 f9ec 	bl	800565c <pbuf_free>
  return;
 800d284:	e013      	b.n	800d2ae <icmp_input+0x1ea>
    goto lenerr;
 800d286:	bf00      	nop
 800d288:	e002      	b.n	800d290 <icmp_input+0x1cc>
    goto lenerr;
 800d28a:	bf00      	nop
 800d28c:	e000      	b.n	800d290 <icmp_input+0x1cc>
        goto lenerr;
 800d28e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7f8 f9e3 	bl	800565c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d296:	e00a      	b.n	800d2ae <icmp_input+0x1ea>
        goto icmperr;
 800d298:	bf00      	nop
 800d29a:	e004      	b.n	800d2a6 <icmp_input+0x1e2>
        goto icmperr;
 800d29c:	bf00      	nop
 800d29e:	e002      	b.n	800d2a6 <icmp_input+0x1e2>
          goto icmperr;
 800d2a0:	bf00      	nop
 800d2a2:	e000      	b.n	800d2a6 <icmp_input+0x1e2>
          goto icmperr;
 800d2a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7f8 f9d8 	bl	800565c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d2ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d2ae:	3728      	adds	r7, #40	; 0x28
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20003788 	.word	0x20003788
 800d2b8:	2000379c 	.word	0x2000379c
 800d2bc:	0801207c 	.word	0x0801207c
 800d2c0:	080120b4 	.word	0x080120b4
 800d2c4:	080120ec 	.word	0x080120ec
 800d2c8:	08012114 	.word	0x08012114

0800d2cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	2103      	movs	r1, #3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f814 	bl	800d30c <icmp_send_response>
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d2f8:	78fb      	ldrb	r3, [r7, #3]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	210b      	movs	r1, #11
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f804 	bl	800d30c <icmp_send_response>
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b08c      	sub	sp, #48	; 0x30
 800d310:	af04      	add	r7, sp, #16
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
 800d318:	4613      	mov	r3, r2
 800d31a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d31c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d320:	2124      	movs	r1, #36	; 0x24
 800d322:	2022      	movs	r0, #34	; 0x22
 800d324:	f7f7 feb6 	bl	8005094 <pbuf_alloc>
 800d328:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d04c      	beq.n	800d3ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	895b      	ldrh	r3, [r3, #10]
 800d334:	2b23      	cmp	r3, #35	; 0x23
 800d336:	d806      	bhi.n	800d346 <icmp_send_response+0x3a>
 800d338:	4b26      	ldr	r3, [pc, #152]	; (800d3d4 <icmp_send_response+0xc8>)
 800d33a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d33e:	4926      	ldr	r1, [pc, #152]	; (800d3d8 <icmp_send_response+0xcc>)
 800d340:	4826      	ldr	r0, [pc, #152]	; (800d3dc <icmp_send_response+0xd0>)
 800d342:	f001 fa7b 	bl	800e83c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	78fa      	ldrb	r2, [r7, #3]
 800d356:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	78ba      	ldrb	r2, [r7, #2]
 800d35c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2200      	movs	r2, #0
 800d362:	711a      	strb	r2, [r3, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	2200      	movs	r2, #0
 800d36c:	719a      	strb	r2, [r3, #6]
 800d36e:	2200      	movs	r2, #0
 800d370:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f103 0008 	add.w	r0, r3, #8
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	221c      	movs	r2, #28
 800d380:	4619      	mov	r1, r3
 800d382:	f001 fa45 	bl	800e810 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d38c:	f107 030c 	add.w	r3, r7, #12
 800d390:	4618      	mov	r0, r3
 800d392:	f000 f825 	bl	800d3e0 <ip4_route>
 800d396:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d011      	beq.n	800d3c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	709a      	strb	r2, [r3, #2]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d3a8:	f107 020c 	add.w	r2, r7, #12
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	9302      	str	r3, [sp, #8]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	23ff      	movs	r3, #255	; 0xff
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	69f8      	ldr	r0, [r7, #28]
 800d3be:	f000 f9cd 	bl	800d75c <ip4_output_if>
  }
  pbuf_free(q);
 800d3c2:	69f8      	ldr	r0, [r7, #28]
 800d3c4:	f7f8 f94a 	bl	800565c <pbuf_free>
 800d3c8:	e000      	b.n	800d3cc <icmp_send_response+0xc0>
    return;
 800d3ca:	bf00      	nop
}
 800d3cc:	3720      	adds	r7, #32
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	0801207c 	.word	0x0801207c
 800d3d8:	08012148 	.word	0x08012148
 800d3dc:	080120ec 	.word	0x080120ec

0800d3e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d3e8:	4b33      	ldr	r3, [pc, #204]	; (800d4b8 <ip4_route+0xd8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	60fb      	str	r3, [r7, #12]
 800d3ee:	e036      	b.n	800d45e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d02b      	beq.n	800d458 <ip4_route+0x78>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d406:	089b      	lsrs	r3, r3, #2
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d022      	beq.n	800d458 <ip4_route+0x78>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3304      	adds	r3, #4
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d01d      	beq.n	800d458 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3304      	adds	r3, #4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	405a      	eors	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3308      	adds	r3, #8
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4013      	ands	r3, r2
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	e038      	b.n	800d4aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d43e:	f003 0302 	and.w	r3, r3, #2
 800d442:	2b00      	cmp	r3, #0
 800d444:	d108      	bne.n	800d458 <ip4_route+0x78>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	330c      	adds	r3, #12
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d101      	bne.n	800d458 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	e028      	b.n	800d4aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	60fb      	str	r3, [r7, #12]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1c5      	bne.n	800d3f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d464:	4b15      	ldr	r3, [pc, #84]	; (800d4bc <ip4_route+0xdc>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d01a      	beq.n	800d4a2 <ip4_route+0xc2>
 800d46c:	4b13      	ldr	r3, [pc, #76]	; (800d4bc <ip4_route+0xdc>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d012      	beq.n	800d4a2 <ip4_route+0xc2>
 800d47c:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <ip4_route+0xdc>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d484:	f003 0304 	and.w	r3, r3, #4
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00a      	beq.n	800d4a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d48c:	4b0b      	ldr	r3, [pc, #44]	; (800d4bc <ip4_route+0xdc>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3304      	adds	r3, #4
 800d492:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d494:	2b00      	cmp	r3, #0
 800d496:	d004      	beq.n	800d4a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b7f      	cmp	r3, #127	; 0x7f
 800d4a0:	d101      	bne.n	800d4a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e001      	b.n	800d4aa <ip4_route+0xca>
  }

  return netif_default;
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <ip4_route+0xdc>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20008e7c 	.word	0x20008e7c
 800d4bc:	20008e80 	.word	0x20008e80

0800d4c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d016      	beq.n	800d506 <ip4_input_accept+0x46>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	3304      	adds	r3, #4
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d011      	beq.n	800d506 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4e2:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <ip4_input_accept+0x50>)
 800d4e4:	695a      	ldr	r2, [r3, #20]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d008      	beq.n	800d502 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d4f0:	4b07      	ldr	r3, [pc, #28]	; (800d510 <ip4_input_accept+0x50>)
 800d4f2:	695b      	ldr	r3, [r3, #20]
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fa08 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800d4fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d502:	2301      	movs	r3, #1
 800d504:	e000      	b.n	800d508 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20003788 	.word	0x20003788

0800d514 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	091b      	lsrs	r3, r3, #4
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d004      	beq.n	800d53a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7f8 f893 	bl	800565c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	e107      	b.n	800d74a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	f003 030f 	and.w	r3, r3, #15
 800d542:	b2db      	uxtb	r3, r3
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	b2db      	uxtb	r3, r3
 800d548:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	885b      	ldrh	r3, [r3, #2]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	4618      	mov	r0, r3
 800d552:	f7f6 fd99 	bl	8004088 <lwip_htons>
 800d556:	4603      	mov	r3, r0
 800d558:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	891b      	ldrh	r3, [r3, #8]
 800d55e:	89ba      	ldrh	r2, [r7, #12]
 800d560:	429a      	cmp	r2, r3
 800d562:	d204      	bcs.n	800d56e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d564:	89bb      	ldrh	r3, [r7, #12]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f7 fef1 	bl	8005350 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	895b      	ldrh	r3, [r3, #10]
 800d572:	89fa      	ldrh	r2, [r7, #14]
 800d574:	429a      	cmp	r2, r3
 800d576:	d807      	bhi.n	800d588 <ip4_input+0x74>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	891b      	ldrh	r3, [r3, #8]
 800d57c:	89ba      	ldrh	r2, [r7, #12]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d802      	bhi.n	800d588 <ip4_input+0x74>
 800d582:	89fb      	ldrh	r3, [r7, #14]
 800d584:	2b13      	cmp	r3, #19
 800d586:	d804      	bhi.n	800d592 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7f8 f867 	bl	800565c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	e0db      	b.n	800d74a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	4a6f      	ldr	r2, [pc, #444]	; (800d754 <ip4_input+0x240>)
 800d598:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	4a6d      	ldr	r2, [pc, #436]	; (800d754 <ip4_input+0x240>)
 800d5a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d5a2:	4b6c      	ldr	r3, [pc, #432]	; (800d754 <ip4_input+0x240>)
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5aa:	2be0      	cmp	r3, #224	; 0xe0
 800d5ac:	d112      	bne.n	800d5d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d007      	beq.n	800d5ce <ip4_input+0xba>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <ip4_input+0xba>
      netif = inp;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	613b      	str	r3, [r7, #16]
 800d5cc:	e02a      	b.n	800d624 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	613b      	str	r3, [r7, #16]
 800d5d2:	e027      	b.n	800d624 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d5d4:	6838      	ldr	r0, [r7, #0]
 800d5d6:	f7ff ff73 	bl	800d4c0 <ip4_input_accept>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <ip4_input+0xd2>
      netif = inp;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	613b      	str	r3, [r7, #16]
 800d5e4:	e01e      	b.n	800d624 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d5ea:	4b5a      	ldr	r3, [pc, #360]	; (800d754 <ip4_input+0x240>)
 800d5ec:	695b      	ldr	r3, [r3, #20]
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d5f2:	d017      	beq.n	800d624 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d5f4:	4b58      	ldr	r3, [pc, #352]	; (800d758 <ip4_input+0x244>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	613b      	str	r3, [r7, #16]
 800d5fa:	e00e      	b.n	800d61a <ip4_input+0x106>
          if (netif == inp) {
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	429a      	cmp	r2, r3
 800d602:	d006      	beq.n	800d612 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d604:	6938      	ldr	r0, [r7, #16]
 800d606:	f7ff ff5b 	bl	800d4c0 <ip4_input_accept>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d108      	bne.n	800d622 <ip4_input+0x10e>
 800d610:	e000      	b.n	800d614 <ip4_input+0x100>
            continue;
 800d612:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	613b      	str	r3, [r7, #16]
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1ed      	bne.n	800d5fc <ip4_input+0xe8>
 800d620:	e000      	b.n	800d624 <ip4_input+0x110>
            break;
 800d622:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d624:	4b4b      	ldr	r3, [pc, #300]	; (800d754 <ip4_input+0x240>)
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 f96e 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d105      	bne.n	800d642 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d636:	4b47      	ldr	r3, [pc, #284]	; (800d754 <ip4_input+0x240>)
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d63e:	2be0      	cmp	r3, #224	; 0xe0
 800d640:	d104      	bne.n	800d64c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7f8 f80a 	bl	800565c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	e07e      	b.n	800d74a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d104      	bne.n	800d65c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7f8 f802 	bl	800565c <pbuf_free>
    return ERR_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	e076      	b.n	800d74a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	88db      	ldrh	r3, [r3, #6]
 800d660:	b29b      	uxth	r3, r3
 800d662:	461a      	mov	r2, r3
 800d664:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d668:	4013      	ands	r3, r2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00b      	beq.n	800d686 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fc92 	bl	800df98 <ip4_reass>
 800d674:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <ip4_input+0x16c>
      return ERR_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	e064      	b.n	800d74a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d686:	4a33      	ldr	r2, [pc, #204]	; (800d754 <ip4_input+0x240>)
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d68c:	4a31      	ldr	r2, [pc, #196]	; (800d754 <ip4_input+0x240>)
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d692:	4a30      	ldr	r2, [pc, #192]	; (800d754 <ip4_input+0x240>)
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	f003 030f 	and.w	r3, r3, #15
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	4b2a      	ldr	r3, [pc, #168]	; (800d754 <ip4_input+0x240>)
 800d6aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d6ac:	89fb      	ldrh	r3, [r7, #14]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7f7 ff4d 	bl	8005550 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ba:	2b11      	cmp	r3, #17
 800d6bc:	d006      	beq.n	800d6cc <ip4_input+0x1b8>
 800d6be:	2b11      	cmp	r3, #17
 800d6c0:	dc13      	bgt.n	800d6ea <ip4_input+0x1d6>
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d00c      	beq.n	800d6e0 <ip4_input+0x1cc>
 800d6c6:	2b06      	cmp	r3, #6
 800d6c8:	d005      	beq.n	800d6d6 <ip4_input+0x1c2>
 800d6ca:	e00e      	b.n	800d6ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fe fc68 	bl	800bfa4 <udp_input>
        break;
 800d6d4:	e026      	b.n	800d724 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7fa f88d 	bl	80077f8 <tcp_input>
        break;
 800d6de:	e021      	b.n	800d724 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff fcee 	bl	800d0c4 <icmp_input>
        break;
 800d6e8:	e01c      	b.n	800d724 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d6ea:	4b1a      	ldr	r3, [pc, #104]	; (800d754 <ip4_input+0x240>)
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	6939      	ldr	r1, [r7, #16]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 f90b 	bl	800d90c <ip4_addr_isbroadcast_u32>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10f      	bne.n	800d71c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d6fc:	4b15      	ldr	r3, [pc, #84]	; (800d754 <ip4_input+0x240>)
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d704:	2be0      	cmp	r3, #224	; 0xe0
 800d706:	d009      	beq.n	800d71c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7f7 ff91 	bl	8005636 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d714:	2102      	movs	r1, #2
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff fdd8 	bl	800d2cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7f7 ff9d 	bl	800565c <pbuf_free>
        break;
 800d722:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d724:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <ip4_input+0x240>)
 800d726:	2200      	movs	r2, #0
 800d728:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d72a:	4b0a      	ldr	r3, [pc, #40]	; (800d754 <ip4_input+0x240>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d730:	4b08      	ldr	r3, [pc, #32]	; (800d754 <ip4_input+0x240>)
 800d732:	2200      	movs	r2, #0
 800d734:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <ip4_input+0x240>)
 800d738:	2200      	movs	r2, #0
 800d73a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d73c:	4b05      	ldr	r3, [pc, #20]	; (800d754 <ip4_input+0x240>)
 800d73e:	2200      	movs	r2, #0
 800d740:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d742:	4b04      	ldr	r3, [pc, #16]	; (800d754 <ip4_input+0x240>)
 800d744:	2200      	movs	r2, #0
 800d746:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3718      	adds	r7, #24
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	20003788 	.word	0x20003788
 800d758:	20008e7c 	.word	0x20008e7c

0800d75c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	; 0x28
 800d760:	af04      	add	r7, sp, #16
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d009      	beq.n	800d788 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <ip4_output_if+0x26>
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	3304      	adds	r3, #4
 800d786:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d788:	78fa      	ldrb	r2, [r7, #3]
 800d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	4613      	mov	r3, r2
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	6979      	ldr	r1, [r7, #20]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 f805 	bl	800d7b0 <ip4_output_if_src>
 800d7a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	7b9b      	ldrb	r3, [r3, #14]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d006      	beq.n	800d7d4 <ip4_output_if_src+0x24>
 800d7c6:	4b4b      	ldr	r3, [pc, #300]	; (800d8f4 <ip4_output_if_src+0x144>)
 800d7c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d7cc:	494a      	ldr	r1, [pc, #296]	; (800d8f8 <ip4_output_if_src+0x148>)
 800d7ce:	484b      	ldr	r0, [pc, #300]	; (800d8fc <ip4_output_if_src+0x14c>)
 800d7d0:	f001 f834 	bl	800e83c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d060      	beq.n	800d89c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d7da:	2314      	movs	r3, #20
 800d7dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d7de:	2114      	movs	r1, #20
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f7f7 fea5 	bl	8005530 <pbuf_add_header>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d7ec:	f06f 0301 	mvn.w	r3, #1
 800d7f0:	e07c      	b.n	800d8ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	895b      	ldrh	r3, [r3, #10]
 800d7fc:	2b13      	cmp	r3, #19
 800d7fe:	d806      	bhi.n	800d80e <ip4_output_if_src+0x5e>
 800d800:	4b3c      	ldr	r3, [pc, #240]	; (800d8f4 <ip4_output_if_src+0x144>)
 800d802:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d806:	493e      	ldr	r1, [pc, #248]	; (800d900 <ip4_output_if_src+0x150>)
 800d808:	483c      	ldr	r0, [pc, #240]	; (800d8fc <ip4_output_if_src+0x14c>)
 800d80a:	f001 f817 	bl	800e83c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	78fa      	ldrb	r2, [r7, #3]
 800d812:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d81a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d824:	8b7b      	ldrh	r3, [r7, #26]
 800d826:	089b      	lsrs	r3, r3, #2
 800d828:	b29b      	uxth	r3, r3
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d830:	b2da      	uxtb	r2, r3
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d83c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	891b      	ldrh	r3, [r3, #8]
 800d842:	4618      	mov	r0, r3
 800d844:	f7f6 fc20 	bl	8004088 <lwip_htons>
 800d848:	4603      	mov	r3, r0
 800d84a:	461a      	mov	r2, r3
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	2200      	movs	r2, #0
 800d854:	719a      	strb	r2, [r3, #6]
 800d856:	2200      	movs	r2, #0
 800d858:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d85a:	4b2a      	ldr	r3, [pc, #168]	; (800d904 <ip4_output_if_src+0x154>)
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7f6 fc12 	bl	8004088 <lwip_htons>
 800d864:	4603      	mov	r3, r0
 800d866:	461a      	mov	r2, r3
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d86c:	4b25      	ldr	r3, [pc, #148]	; (800d904 <ip4_output_if_src+0x154>)
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	3301      	adds	r3, #1
 800d872:	b29a      	uxth	r2, r3
 800d874:	4b23      	ldr	r3, [pc, #140]	; (800d904 <ip4_output_if_src+0x154>)
 800d876:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d104      	bne.n	800d888 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d87e:	4b22      	ldr	r3, [pc, #136]	; (800d908 <ip4_output_if_src+0x158>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	60da      	str	r2, [r3, #12]
 800d886:	e003      	b.n	800d890 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2200      	movs	r2, #0
 800d894:	729a      	strb	r2, [r3, #10]
 800d896:	2200      	movs	r2, #0
 800d898:	72da      	strb	r2, [r3, #11]
 800d89a:	e00f      	b.n	800d8bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	895b      	ldrh	r3, [r3, #10]
 800d8a0:	2b13      	cmp	r3, #19
 800d8a2:	d802      	bhi.n	800d8aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d8a4:	f06f 0301 	mvn.w	r3, #1
 800d8a8:	e020      	b.n	800d8ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d8b6:	f107 0314 	add.w	r3, r7, #20
 800d8ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00c      	beq.n	800d8de <ip4_output_if_src+0x12e>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	891a      	ldrh	r2, [r3, #8]
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d906      	bls.n	800d8de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 fd4d 	bl	800e374 <ip4_frag>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	e006      	b.n	800d8ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	68f9      	ldr	r1, [r7, #12]
 800d8e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8e8:	4798      	blx	r3
 800d8ea:	4603      	mov	r3, r0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3720      	adds	r7, #32
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	08012174 	.word	0x08012174
 800d8f8:	080121a8 	.word	0x080121a8
 800d8fc:	080121b4 	.word	0x080121b4
 800d900:	080121dc 	.word	0x080121dc
 800d904:	2000063e 	.word	0x2000063e
 800d908:	080133a4 	.word	0x080133a4

0800d90c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d920:	d002      	beq.n	800d928 <ip4_addr_isbroadcast_u32+0x1c>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d928:	2301      	movs	r3, #1
 800d92a:	e02a      	b.n	800d982 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d932:	f003 0302 	and.w	r3, r3, #2
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e021      	b.n	800d982 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	3304      	adds	r3, #4
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	429a      	cmp	r2, r3
 800d948:	d101      	bne.n	800d94e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	e019      	b.n	800d982 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	3304      	adds	r3, #4
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	405a      	eors	r2, r3
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	3308      	adds	r3, #8
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4013      	ands	r3, r2
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10d      	bne.n	800d980 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	3308      	adds	r3, #8
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	43da      	mvns	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	3308      	adds	r3, #8
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d978:	429a      	cmp	r2, r3
 800d97a:	d101      	bne.n	800d980 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d97c:	2301      	movs	r3, #1
 800d97e:	e000      	b.n	800d982 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d980:	2300      	movs	r3, #0
  }
}
 800d982:	4618      	mov	r0, r3
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
	...

0800d990 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d99a:	4b12      	ldr	r3, [pc, #72]	; (800d9e4 <ip_reass_tmr+0x54>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d9a0:	e018      	b.n	800d9d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	7fdb      	ldrb	r3, [r3, #31]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00b      	beq.n	800d9c2 <ip_reass_tmr+0x32>
      r->timer--;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	7fdb      	ldrb	r3, [r3, #31]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	e008      	b.n	800d9d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f80a 	bl	800d9e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1e3      	bne.n	800d9a2 <ip_reass_tmr+0x12>
    }
  }
}
 800d9da:	bf00      	nop
 800d9dc:	bf00      	nop
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20000640 	.word	0x20000640

0800d9e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d105      	bne.n	800da0a <ip_reass_free_complete_datagram+0x22>
 800d9fe:	4b45      	ldr	r3, [pc, #276]	; (800db14 <ip_reass_free_complete_datagram+0x12c>)
 800da00:	22ab      	movs	r2, #171	; 0xab
 800da02:	4945      	ldr	r1, [pc, #276]	; (800db18 <ip_reass_free_complete_datagram+0x130>)
 800da04:	4845      	ldr	r0, [pc, #276]	; (800db1c <ip_reass_free_complete_datagram+0x134>)
 800da06:	f000 ff19 	bl	800e83c <iprintf>
  if (prev != NULL) {
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00a      	beq.n	800da26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	429a      	cmp	r2, r3
 800da18:	d005      	beq.n	800da26 <ip_reass_free_complete_datagram+0x3e>
 800da1a:	4b3e      	ldr	r3, [pc, #248]	; (800db14 <ip_reass_free_complete_datagram+0x12c>)
 800da1c:	22ad      	movs	r2, #173	; 0xad
 800da1e:	4940      	ldr	r1, [pc, #256]	; (800db20 <ip_reass_free_complete_datagram+0x138>)
 800da20:	483e      	ldr	r0, [pc, #248]	; (800db1c <ip_reass_free_complete_datagram+0x134>)
 800da22:	f000 ff0b 	bl	800e83c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	889b      	ldrh	r3, [r3, #4]
 800da32:	b29b      	uxth	r3, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d12a      	bne.n	800da8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	6858      	ldr	r0, [r3, #4]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	3308      	adds	r3, #8
 800da4e:	2214      	movs	r2, #20
 800da50:	4619      	mov	r1, r3
 800da52:	f000 fedd 	bl	800e810 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800da56:	2101      	movs	r1, #1
 800da58:	69b8      	ldr	r0, [r7, #24]
 800da5a:	f7ff fc47 	bl	800d2ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800da5e:	69b8      	ldr	r0, [r7, #24]
 800da60:	f7f7 fe84 	bl	800576c <pbuf_clen>
 800da64:	4603      	mov	r3, r0
 800da66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800da68:	8bfa      	ldrh	r2, [r7, #30]
 800da6a:	8a7b      	ldrh	r3, [r7, #18]
 800da6c:	4413      	add	r3, r2
 800da6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da72:	db05      	blt.n	800da80 <ip_reass_free_complete_datagram+0x98>
 800da74:	4b27      	ldr	r3, [pc, #156]	; (800db14 <ip_reass_free_complete_datagram+0x12c>)
 800da76:	22bc      	movs	r2, #188	; 0xbc
 800da78:	492a      	ldr	r1, [pc, #168]	; (800db24 <ip_reass_free_complete_datagram+0x13c>)
 800da7a:	4828      	ldr	r0, [pc, #160]	; (800db1c <ip_reass_free_complete_datagram+0x134>)
 800da7c:	f000 fede 	bl	800e83c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800da80:	8bfa      	ldrh	r2, [r7, #30]
 800da82:	8a7b      	ldrh	r3, [r7, #18]
 800da84:	4413      	add	r3, r2
 800da86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800da88:	69b8      	ldr	r0, [r7, #24]
 800da8a:	f7f7 fde7 	bl	800565c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800da94:	e01f      	b.n	800dad6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f7f7 fe60 	bl	800576c <pbuf_clen>
 800daac:	4603      	mov	r3, r0
 800daae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dab0:	8bfa      	ldrh	r2, [r7, #30]
 800dab2:	8a7b      	ldrh	r3, [r7, #18]
 800dab4:	4413      	add	r3, r2
 800dab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daba:	db05      	blt.n	800dac8 <ip_reass_free_complete_datagram+0xe0>
 800dabc:	4b15      	ldr	r3, [pc, #84]	; (800db14 <ip_reass_free_complete_datagram+0x12c>)
 800dabe:	22cc      	movs	r2, #204	; 0xcc
 800dac0:	4918      	ldr	r1, [pc, #96]	; (800db24 <ip_reass_free_complete_datagram+0x13c>)
 800dac2:	4816      	ldr	r0, [pc, #88]	; (800db1c <ip_reass_free_complete_datagram+0x134>)
 800dac4:	f000 feba 	bl	800e83c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dac8:	8bfa      	ldrh	r2, [r7, #30]
 800daca:	8a7b      	ldrh	r3, [r7, #18]
 800dacc:	4413      	add	r3, r2
 800dace:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f7f7 fdc3 	bl	800565c <pbuf_free>
  while (p != NULL) {
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1dc      	bne.n	800da96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 f8c2 	bl	800dc68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dae4:	4b10      	ldr	r3, [pc, #64]	; (800db28 <ip_reass_free_complete_datagram+0x140>)
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	8bfa      	ldrh	r2, [r7, #30]
 800daea:	429a      	cmp	r2, r3
 800daec:	d905      	bls.n	800dafa <ip_reass_free_complete_datagram+0x112>
 800daee:	4b09      	ldr	r3, [pc, #36]	; (800db14 <ip_reass_free_complete_datagram+0x12c>)
 800daf0:	22d2      	movs	r2, #210	; 0xd2
 800daf2:	490e      	ldr	r1, [pc, #56]	; (800db2c <ip_reass_free_complete_datagram+0x144>)
 800daf4:	4809      	ldr	r0, [pc, #36]	; (800db1c <ip_reass_free_complete_datagram+0x134>)
 800daf6:	f000 fea1 	bl	800e83c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dafa:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <ip_reass_free_complete_datagram+0x140>)
 800dafc:	881a      	ldrh	r2, [r3, #0]
 800dafe:	8bfb      	ldrh	r3, [r7, #30]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	b29a      	uxth	r2, r3
 800db04:	4b08      	ldr	r3, [pc, #32]	; (800db28 <ip_reass_free_complete_datagram+0x140>)
 800db06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800db08:	8bfb      	ldrh	r3, [r7, #30]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3720      	adds	r7, #32
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	0801220c 	.word	0x0801220c
 800db18:	08012248 	.word	0x08012248
 800db1c:	08012254 	.word	0x08012254
 800db20:	0801227c 	.word	0x0801227c
 800db24:	08012290 	.word	0x08012290
 800db28:	20000644 	.word	0x20000644
 800db2c:	080122b0 	.word	0x080122b0

0800db30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b08a      	sub	sp, #40	; 0x28
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800db3a:	2300      	movs	r3, #0
 800db3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800db42:	2300      	movs	r3, #0
 800db44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800db4e:	4b28      	ldr	r3, [pc, #160]	; (800dbf0 <ip_reass_remove_oldest_datagram+0xc0>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800db54:	e030      	b.n	800dbb8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	695a      	ldr	r2, [r3, #20]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d10c      	bne.n	800db7c <ip_reass_remove_oldest_datagram+0x4c>
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	699a      	ldr	r2, [r3, #24]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d106      	bne.n	800db7c <ip_reass_remove_oldest_datagram+0x4c>
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	899a      	ldrh	r2, [r3, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	889b      	ldrh	r3, [r3, #4]
 800db76:	b29b      	uxth	r3, r3
 800db78:	429a      	cmp	r2, r3
 800db7a:	d014      	beq.n	800dba6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	3301      	adds	r3, #1
 800db80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d104      	bne.n	800db92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	61bb      	str	r3, [r7, #24]
 800db90:	e009      	b.n	800dba6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	7fda      	ldrb	r2, [r3, #31]
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	7fdb      	ldrb	r3, [r3, #31]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d803      	bhi.n	800dba6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1cb      	bne.n	800db56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d008      	beq.n	800dbd6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dbc4:	69b9      	ldr	r1, [r7, #24]
 800dbc6:	6a38      	ldr	r0, [r7, #32]
 800dbc8:	f7ff ff0e 	bl	800d9e8 <ip_reass_free_complete_datagram>
 800dbcc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	da02      	bge.n	800dbe4 <ip_reass_remove_oldest_datagram+0xb4>
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	dcac      	bgt.n	800db3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dbe4:	697b      	ldr	r3, [r7, #20]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3728      	adds	r7, #40	; 0x28
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	20000640 	.word	0x20000640

0800dbf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dbfe:	2004      	movs	r0, #4
 800dc00:	f7f6 fece 	bl	80049a0 <memp_malloc>
 800dc04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d110      	bne.n	800dc2e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff ff8e 	bl	800db30 <ip_reass_remove_oldest_datagram>
 800dc14:	4602      	mov	r2, r0
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	dc03      	bgt.n	800dc24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dc1c:	2004      	movs	r0, #4
 800dc1e:	f7f6 febf 	bl	80049a0 <memp_malloc>
 800dc22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e016      	b.n	800dc5c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dc2e:	2220      	movs	r2, #32
 800dc30:	2100      	movs	r1, #0
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f000 fdfa 	bl	800e82c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	220f      	movs	r2, #15
 800dc3c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dc3e:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <ip_reass_enqueue_new_datagram+0x70>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dc46:	4a07      	ldr	r2, [pc, #28]	; (800dc64 <ip_reass_enqueue_new_datagram+0x70>)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3308      	adds	r3, #8
 800dc50:	2214      	movs	r2, #20
 800dc52:	6879      	ldr	r1, [r7, #4]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fddb 	bl	800e810 <memcpy>
  return ipr;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	20000640 	.word	0x20000640

0800dc68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dc72:	4b10      	ldr	r3, [pc, #64]	; (800dcb4 <ip_reass_dequeue_datagram+0x4c>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d104      	bne.n	800dc86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a0c      	ldr	r2, [pc, #48]	; (800dcb4 <ip_reass_dequeue_datagram+0x4c>)
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	e00d      	b.n	800dca2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <ip_reass_dequeue_datagram+0x32>
 800dc8c:	4b0a      	ldr	r3, [pc, #40]	; (800dcb8 <ip_reass_dequeue_datagram+0x50>)
 800dc8e:	f240 1245 	movw	r2, #325	; 0x145
 800dc92:	490a      	ldr	r1, [pc, #40]	; (800dcbc <ip_reass_dequeue_datagram+0x54>)
 800dc94:	480a      	ldr	r0, [pc, #40]	; (800dcc0 <ip_reass_dequeue_datagram+0x58>)
 800dc96:	f000 fdd1 	bl	800e83c <iprintf>
    prev->next = ipr->next;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	2004      	movs	r0, #4
 800dca6:	f7f6 fec7 	bl	8004a38 <memp_free>
}
 800dcaa:	bf00      	nop
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	20000640 	.word	0x20000640
 800dcb8:	0801220c 	.word	0x0801220c
 800dcbc:	080122d4 	.word	0x080122d4
 800dcc0:	08012254 	.word	0x08012254

0800dcc4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08c      	sub	sp, #48	; 0x30
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	885b      	ldrh	r3, [r3, #2]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f6 f9cf 	bl	8004088 <lwip_htons>
 800dcea:	4603      	mov	r3, r0
 800dcec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	f003 030f 	and.w	r3, r3, #15
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dcfc:	7e7b      	ldrb	r3, [r7, #25]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	8b7a      	ldrh	r2, [r7, #26]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d202      	bcs.n	800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd0a:	e135      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dd0c:	7e7b      	ldrb	r3, [r7, #25]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	8b7a      	ldrh	r2, [r7, #26]
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	88db      	ldrh	r3, [r3, #6]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7f6 f9b3 	bl	8004088 <lwip_htons>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	00db      	lsls	r3, r3, #3
 800dd2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	705a      	strb	r2, [r3, #1]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	709a      	strb	r2, [r3, #2]
 800dd42:	2200      	movs	r2, #0
 800dd44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	8afa      	ldrh	r2, [r7, #22]
 800dd4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dd4c:	8afa      	ldrh	r2, [r7, #22]
 800dd4e:	8b7b      	ldrh	r3, [r7, #26]
 800dd50:	4413      	add	r3, r2
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	88db      	ldrh	r3, [r3, #6]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	8afa      	ldrh	r2, [r7, #22]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d902      	bls.n	800dd6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd68:	e106      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24
 800dd70:	e068      	b.n	800de44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800dd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7a:	889b      	ldrh	r3, [r3, #4]
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	889b      	ldrh	r3, [r3, #4]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d235      	bcs.n	800ddf4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d020      	beq.n	800ddd6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd96:	889b      	ldrh	r3, [r3, #4]
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9c:	88db      	ldrh	r3, [r3, #6]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d307      	bcc.n	800ddb4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda6:	88db      	ldrh	r3, [r3, #6]
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	889b      	ldrh	r3, [r3, #4]
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d902      	bls.n	800ddba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ddb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddb8:	e0de      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	88db      	ldrh	r3, [r3, #6]
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	889b      	ldrh	r3, [r3, #4]
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d03d      	beq.n	800de4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ddd4:	e03a      	b.n	800de4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ddd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd8:	88db      	ldrh	r3, [r3, #6]
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	889b      	ldrh	r3, [r3, #4]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d902      	bls.n	800ddec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddea:	e0c5      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	605a      	str	r2, [r3, #4]
      break;
 800ddf2:	e02b      	b.n	800de4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	889b      	ldrh	r3, [r3, #4]
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	889b      	ldrh	r3, [r3, #4]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	429a      	cmp	r2, r3
 800de02:	d102      	bne.n	800de0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de08:	e0b6      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	889b      	ldrh	r3, [r3, #4]
 800de0e:	b29a      	uxth	r2, r3
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	88db      	ldrh	r3, [r3, #6]
 800de14:	b29b      	uxth	r3, r3
 800de16:	429a      	cmp	r2, r3
 800de18:	d202      	bcs.n	800de20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de1e:	e0ab      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	2b00      	cmp	r3, #0
 800de24:	d009      	beq.n	800de3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800de26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	889b      	ldrh	r3, [r3, #4]
 800de30:	b29b      	uxth	r3, r3
 800de32:	429a      	cmp	r2, r3
 800de34:	d001      	beq.n	800de3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	2b00      	cmp	r3, #0
 800de48:	d193      	bne.n	800dd72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800de4a:	e000      	b.n	800de4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800de4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	d12d      	bne.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800de54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de56:	2b00      	cmp	r3, #0
 800de58:	d01c      	beq.n	800de94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	88db      	ldrh	r3, [r3, #6]
 800de5e:	b29a      	uxth	r2, r3
 800de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de62:	889b      	ldrh	r3, [r3, #4]
 800de64:	b29b      	uxth	r3, r3
 800de66:	429a      	cmp	r2, r3
 800de68:	d906      	bls.n	800de78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800de6a:	4b45      	ldr	r3, [pc, #276]	; (800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800de70:	4944      	ldr	r1, [pc, #272]	; (800df84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800de72:	4845      	ldr	r0, [pc, #276]	; (800df88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de74:	f000 fce2 	bl	800e83c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	88db      	ldrh	r3, [r3, #6]
 800de82:	b29a      	uxth	r2, r3
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	889b      	ldrh	r3, [r3, #4]
 800de88:	b29b      	uxth	r3, r3
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d010      	beq.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	623b      	str	r3, [r7, #32]
 800de92:	e00d      	b.n	800deb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d006      	beq.n	800deaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800de9c:	4b38      	ldr	r3, [pc, #224]	; (800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dea2:	493a      	ldr	r1, [pc, #232]	; (800df8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dea4:	4838      	ldr	r0, [pc, #224]	; (800df88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dea6:	f000 fcc9 	bl	800e83c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d105      	bne.n	800dec2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7f9b      	ldrb	r3, [r3, #30]
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d059      	beq.n	800df76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d04f      	beq.n	800df68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d006      	beq.n	800dede <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	889b      	ldrh	r3, [r3, #4]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dede:	2300      	movs	r3, #0
 800dee0:	623b      	str	r3, [r7, #32]
 800dee2:	e041      	b.n	800df68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800deee:	e012      	b.n	800df16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	88db      	ldrh	r3, [r3, #6]
 800defa:	b29a      	uxth	r2, r3
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	889b      	ldrh	r3, [r3, #4]
 800df00:	b29b      	uxth	r3, r3
 800df02:	429a      	cmp	r2, r3
 800df04:	d002      	beq.n	800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	623b      	str	r3, [r7, #32]
            break;
 800df0a:	e007      	b.n	800df1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800df10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1e9      	bne.n	800def0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d022      	beq.n	800df68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d106      	bne.n	800df38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800df2a:	4b15      	ldr	r3, [pc, #84]	; (800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df2c:	f240 12df 	movw	r2, #479	; 0x1df
 800df30:	4917      	ldr	r1, [pc, #92]	; (800df90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800df32:	4815      	ldr	r0, [pc, #84]	; (800df88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df34:	f000 fc82 	bl	800e83c <iprintf>
          LWIP_ASSERT("sanity check",
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df40:	429a      	cmp	r2, r3
 800df42:	d106      	bne.n	800df52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800df44:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800df4a:	4911      	ldr	r1, [pc, #68]	; (800df90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800df4c:	480e      	ldr	r0, [pc, #56]	; (800df88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df4e:	f000 fc75 	bl	800e83c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d006      	beq.n	800df68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df5c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800df60:	490c      	ldr	r1, [pc, #48]	; (800df94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800df62:	4809      	ldr	r0, [pc, #36]	; (800df88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df64:	f000 fc6a 	bl	800e83c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bf14      	ite	ne
 800df6e:	2301      	movne	r3, #1
 800df70:	2300      	moveq	r3, #0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	e000      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3730      	adds	r7, #48	; 0x30
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	0801220c 	.word	0x0801220c
 800df84:	080122f0 	.word	0x080122f0
 800df88:	08012254 	.word	0x08012254
 800df8c:	08012310 	.word	0x08012310
 800df90:	08012348 	.word	0x08012348
 800df94:	08012358 	.word	0x08012358

0800df98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b08e      	sub	sp, #56	; 0x38
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	f003 030f 	and.w	r3, r3, #15
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	2b14      	cmp	r3, #20
 800dfb6:	f040 8167 	bne.w	800e288 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800dfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbc:	88db      	ldrh	r3, [r3, #6]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7f6 f861 	bl	8004088 <lwip_htons>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	885b      	ldrh	r3, [r3, #2]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7f6 f855 	bl	8004088 <lwip_htons>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	f003 030f 	and.w	r3, r3, #15
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dffa:	429a      	cmp	r2, r3
 800dffc:	f0c0 8146 	bcc.w	800e28c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e004:	b29b      	uxth	r3, r3
 800e006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7f7 fbad 	bl	800576c <pbuf_clen>
 800e012:	4603      	mov	r3, r0
 800e014:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e016:	4b9f      	ldr	r3, [pc, #636]	; (800e294 <ip4_reass+0x2fc>)
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	461a      	mov	r2, r3
 800e01c:	8c3b      	ldrh	r3, [r7, #32]
 800e01e:	4413      	add	r3, r2
 800e020:	2b0a      	cmp	r3, #10
 800e022:	dd10      	ble.n	800e046 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e024:	8c3b      	ldrh	r3, [r7, #32]
 800e026:	4619      	mov	r1, r3
 800e028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e02a:	f7ff fd81 	bl	800db30 <ip_reass_remove_oldest_datagram>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	f000 812d 	beq.w	800e290 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e036:	4b97      	ldr	r3, [pc, #604]	; (800e294 <ip4_reass+0x2fc>)
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	8c3b      	ldrh	r3, [r7, #32]
 800e03e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e040:	2b0a      	cmp	r3, #10
 800e042:	f300 8125 	bgt.w	800e290 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e046:	4b94      	ldr	r3, [pc, #592]	; (800e298 <ip4_reass+0x300>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	633b      	str	r3, [r7, #48]	; 0x30
 800e04c:	e015      	b.n	800e07a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	695a      	ldr	r2, [r3, #20]
 800e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	429a      	cmp	r2, r3
 800e058:	d10c      	bne.n	800e074 <ip4_reass+0xdc>
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	699a      	ldr	r2, [r3, #24]
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	429a      	cmp	r2, r3
 800e064:	d106      	bne.n	800e074 <ip4_reass+0xdc>
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	899a      	ldrh	r2, [r3, #12]
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	889b      	ldrh	r3, [r3, #4]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	429a      	cmp	r2, r3
 800e072:	d006      	beq.n	800e082 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	633b      	str	r3, [r7, #48]	; 0x30
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e6      	bne.n	800e04e <ip4_reass+0xb6>
 800e080:	e000      	b.n	800e084 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e082:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e086:	2b00      	cmp	r3, #0
 800e088:	d109      	bne.n	800e09e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e08a:	8c3b      	ldrh	r3, [r7, #32]
 800e08c:	4619      	mov	r1, r3
 800e08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e090:	f7ff fdb0 	bl	800dbf4 <ip_reass_enqueue_new_datagram>
 800e094:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d11c      	bne.n	800e0d6 <ip4_reass+0x13e>
      goto nullreturn;
 800e09c:	e109      	b.n	800e2b2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a0:	88db      	ldrh	r3, [r3, #6]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7f5 ffef 	bl	8004088 <lwip_htons>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d110      	bne.n	800e0d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	89db      	ldrh	r3, [r3, #14]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7f5 ffe5 	bl	8004088 <lwip_htons>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d006      	beq.n	800e0d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	2214      	movs	r2, #20
 800e0ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f000 fb9d 	bl	800e810 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	88db      	ldrh	r3, [r3, #6]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f003 0320 	and.w	r3, r3, #32
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	bf0c      	ite	eq
 800e0e4:	2301      	moveq	r3, #1
 800e0e6:	2300      	movne	r3, #0
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00e      	beq.n	800e110 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e0f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f6:	4413      	add	r3, r2
 800e0f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e0fa:	8b7a      	ldrh	r2, [r7, #26]
 800e0fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0fe:	429a      	cmp	r2, r3
 800e100:	f0c0 80a0 	bcc.w	800e244 <ip4_reass+0x2ac>
 800e104:	8b7b      	ldrh	r3, [r7, #26]
 800e106:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e10a:	4293      	cmp	r3, r2
 800e10c:	f200 809a 	bhi.w	800e244 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e116:	f7ff fdd5 	bl	800dcc4 <ip_reass_chain_frag_into_datagram_and_validate>
 800e11a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e122:	f000 8091 	beq.w	800e248 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e126:	4b5b      	ldr	r3, [pc, #364]	; (800e294 <ip4_reass+0x2fc>)
 800e128:	881a      	ldrh	r2, [r3, #0]
 800e12a:	8c3b      	ldrh	r3, [r7, #32]
 800e12c:	4413      	add	r3, r2
 800e12e:	b29a      	uxth	r2, r3
 800e130:	4b58      	ldr	r3, [pc, #352]	; (800e294 <ip4_reass+0x2fc>)
 800e132:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00d      	beq.n	800e156 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e13a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e13e:	4413      	add	r3, r2
 800e140:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	8a7a      	ldrh	r2, [r7, #18]
 800e146:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	7f9b      	ldrb	r3, [r3, #30]
 800e14c:	f043 0301 	orr.w	r3, r3, #1
 800e150:	b2da      	uxtb	r2, r3
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d171      	bne.n	800e240 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15e:	8b9b      	ldrh	r3, [r3, #28]
 800e160:	3314      	adds	r3, #20
 800e162:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	3308      	adds	r3, #8
 800e17a:	2214      	movs	r2, #20
 800e17c:	4619      	mov	r1, r3
 800e17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e180:	f000 fb46 	bl	800e810 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e184:	8a3b      	ldrh	r3, [r7, #16]
 800e186:	4618      	mov	r0, r3
 800e188:	f7f5 ff7e 	bl	8004088 <lwip_htons>
 800e18c:	4603      	mov	r3, r0
 800e18e:	461a      	mov	r2, r3
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	2200      	movs	r2, #0
 800e198:	719a      	strb	r2, [r3, #6]
 800e19a:	2200      	movs	r2, #0
 800e19c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	729a      	strb	r2, [r3, #10]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e1ae:	e00d      	b.n	800e1cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e1b6:	2114      	movs	r1, #20
 800e1b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1ba:	f7f7 f9c9 	bl	8005550 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e1be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7f7 fb0d 	bl	80057e0 <pbuf_cat>
      r = iprh->next_pbuf;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1ee      	bne.n	800e1b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e1d2:	4b31      	ldr	r3, [pc, #196]	; (800e298 <ip4_reass+0x300>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d102      	bne.n	800e1e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e0:	e010      	b.n	800e204 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e1e2:	4b2d      	ldr	r3, [pc, #180]	; (800e298 <ip4_reass+0x300>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e8:	e007      	b.n	800e1fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d006      	beq.n	800e202 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1f4      	bne.n	800e1ea <ip4_reass+0x252>
 800e200:	e000      	b.n	800e204 <ip4_reass+0x26c>
          break;
 800e202:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e208:	f7ff fd2e 	bl	800dc68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7f7 faad 	bl	800576c <pbuf_clen>
 800e212:	4603      	mov	r3, r0
 800e214:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e216:	4b1f      	ldr	r3, [pc, #124]	; (800e294 <ip4_reass+0x2fc>)
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	8c3a      	ldrh	r2, [r7, #32]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d906      	bls.n	800e22e <ip4_reass+0x296>
 800e220:	4b1e      	ldr	r3, [pc, #120]	; (800e29c <ip4_reass+0x304>)
 800e222:	f240 229b 	movw	r2, #667	; 0x29b
 800e226:	491e      	ldr	r1, [pc, #120]	; (800e2a0 <ip4_reass+0x308>)
 800e228:	481e      	ldr	r0, [pc, #120]	; (800e2a4 <ip4_reass+0x30c>)
 800e22a:	f000 fb07 	bl	800e83c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e22e:	4b19      	ldr	r3, [pc, #100]	; (800e294 <ip4_reass+0x2fc>)
 800e230:	881a      	ldrh	r2, [r3, #0]
 800e232:	8c3b      	ldrh	r3, [r7, #32]
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	b29a      	uxth	r2, r3
 800e238:	4b16      	ldr	r3, [pc, #88]	; (800e294 <ip4_reass+0x2fc>)
 800e23a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	e03c      	b.n	800e2ba <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e240:	2300      	movs	r3, #0
 800e242:	e03a      	b.n	800e2ba <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e244:	bf00      	nop
 800e246:	e000      	b.n	800e24a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e248:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d106      	bne.n	800e25e <ip4_reass+0x2c6>
 800e250:	4b12      	ldr	r3, [pc, #72]	; (800e29c <ip4_reass+0x304>)
 800e252:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e256:	4914      	ldr	r1, [pc, #80]	; (800e2a8 <ip4_reass+0x310>)
 800e258:	4812      	ldr	r0, [pc, #72]	; (800e2a4 <ip4_reass+0x30c>)
 800e25a:	f000 faef 	bl	800e83c <iprintf>
  if (ipr->p == NULL) {
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d124      	bne.n	800e2b0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e266:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <ip4_reass+0x300>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d006      	beq.n	800e27e <ip4_reass+0x2e6>
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <ip4_reass+0x304>)
 800e272:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e276:	490d      	ldr	r1, [pc, #52]	; (800e2ac <ip4_reass+0x314>)
 800e278:	480a      	ldr	r0, [pc, #40]	; (800e2a4 <ip4_reass+0x30c>)
 800e27a:	f000 fadf 	bl	800e83c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e27e:	2100      	movs	r1, #0
 800e280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e282:	f7ff fcf1 	bl	800dc68 <ip_reass_dequeue_datagram>
 800e286:	e014      	b.n	800e2b2 <ip4_reass+0x31a>
    goto nullreturn;
 800e288:	bf00      	nop
 800e28a:	e012      	b.n	800e2b2 <ip4_reass+0x31a>
    goto nullreturn;
 800e28c:	bf00      	nop
 800e28e:	e010      	b.n	800e2b2 <ip4_reass+0x31a>
      goto nullreturn;
 800e290:	bf00      	nop
 800e292:	e00e      	b.n	800e2b2 <ip4_reass+0x31a>
 800e294:	20000644 	.word	0x20000644
 800e298:	20000640 	.word	0x20000640
 800e29c:	0801220c 	.word	0x0801220c
 800e2a0:	0801237c 	.word	0x0801237c
 800e2a4:	08012254 	.word	0x08012254
 800e2a8:	08012398 	.word	0x08012398
 800e2ac:	080123a4 	.word	0x080123a4
  }

nullreturn:
 800e2b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7f7 f9d2 	bl	800565c <pbuf_free>
  return NULL;
 800e2b8:	2300      	movs	r3, #0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3738      	adds	r7, #56	; 0x38
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop

0800e2c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e2c8:	2005      	movs	r0, #5
 800e2ca:	f7f6 fb69 	bl	80049a0 <memp_malloc>
 800e2ce:	4603      	mov	r3, r0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e2e2:	4b07      	ldr	r3, [pc, #28]	; (800e300 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e2e4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e2e8:	4906      	ldr	r1, [pc, #24]	; (800e304 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e2ea:	4807      	ldr	r0, [pc, #28]	; (800e308 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e2ec:	f000 faa6 	bl	800e83c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	2005      	movs	r0, #5
 800e2f4:	f7f6 fba0 	bl	8004a38 <memp_free>
}
 800e2f8:	bf00      	nop
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	0801220c 	.word	0x0801220c
 800e304:	080123c4 	.word	0x080123c4
 800e308:	08012254 	.word	0x08012254

0800e30c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d106      	bne.n	800e32c <ipfrag_free_pbuf_custom+0x20>
 800e31e:	4b11      	ldr	r3, [pc, #68]	; (800e364 <ipfrag_free_pbuf_custom+0x58>)
 800e320:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e324:	4910      	ldr	r1, [pc, #64]	; (800e368 <ipfrag_free_pbuf_custom+0x5c>)
 800e326:	4811      	ldr	r0, [pc, #68]	; (800e36c <ipfrag_free_pbuf_custom+0x60>)
 800e328:	f000 fa88 	bl	800e83c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	429a      	cmp	r2, r3
 800e332:	d006      	beq.n	800e342 <ipfrag_free_pbuf_custom+0x36>
 800e334:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <ipfrag_free_pbuf_custom+0x58>)
 800e336:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e33a:	490d      	ldr	r1, [pc, #52]	; (800e370 <ipfrag_free_pbuf_custom+0x64>)
 800e33c:	480b      	ldr	r0, [pc, #44]	; (800e36c <ipfrag_free_pbuf_custom+0x60>)
 800e33e:	f000 fa7d 	bl	800e83c <iprintf>
  if (pcr->original != NULL) {
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	695b      	ldr	r3, [r3, #20]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f7 f984 	bl	800565c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff ffbd 	bl	800e2d4 <ip_frag_free_pbuf_custom_ref>
}
 800e35a:	bf00      	nop
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	0801220c 	.word	0x0801220c
 800e368:	080123d0 	.word	0x080123d0
 800e36c:	08012254 	.word	0x08012254
 800e370:	080123dc 	.word	0x080123dc

0800e374 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b094      	sub	sp, #80	; 0x50
 800e378:	af02      	add	r7, sp, #8
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e38a:	3b14      	subs	r3, #20
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	da00      	bge.n	800e392 <ip4_frag+0x1e>
 800e390:	3307      	adds	r3, #7
 800e392:	10db      	asrs	r3, r3, #3
 800e394:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e396:	2314      	movs	r3, #20
 800e398:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	f003 030f 	and.w	r3, r3, #15
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b14      	cmp	r3, #20
 800e3b4:	d002      	beq.n	800e3bc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e3b6:	f06f 0305 	mvn.w	r3, #5
 800e3ba:	e110      	b.n	800e5de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	895b      	ldrh	r3, [r3, #10]
 800e3c0:	2b13      	cmp	r3, #19
 800e3c2:	d809      	bhi.n	800e3d8 <ip4_frag+0x64>
 800e3c4:	4b88      	ldr	r3, [pc, #544]	; (800e5e8 <ip4_frag+0x274>)
 800e3c6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e3ca:	4988      	ldr	r1, [pc, #544]	; (800e5ec <ip4_frag+0x278>)
 800e3cc:	4888      	ldr	r0, [pc, #544]	; (800e5f0 <ip4_frag+0x27c>)
 800e3ce:	f000 fa35 	bl	800e83c <iprintf>
 800e3d2:	f06f 0305 	mvn.w	r3, #5
 800e3d6:	e102      	b.n	800e5de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3da:	88db      	ldrh	r3, [r3, #6]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7f5 fe52 	bl	8004088 <lwip_htons>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e3e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e3ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e3f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e3f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	891b      	ldrh	r3, [r3, #8]
 800e3fe:	3b14      	subs	r3, #20
 800e400:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e404:	e0e1      	b.n	800e5ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e406:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e408:	00db      	lsls	r3, r3, #3
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e410:	4293      	cmp	r3, r2
 800e412:	bf28      	it	cs
 800e414:	4613      	movcs	r3, r2
 800e416:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e418:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e41c:	2114      	movs	r1, #20
 800e41e:	200e      	movs	r0, #14
 800e420:	f7f6 fe38 	bl	8005094 <pbuf_alloc>
 800e424:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 80d5 	beq.w	800e5d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	895b      	ldrh	r3, [r3, #10]
 800e432:	2b13      	cmp	r3, #19
 800e434:	d806      	bhi.n	800e444 <ip4_frag+0xd0>
 800e436:	4b6c      	ldr	r3, [pc, #432]	; (800e5e8 <ip4_frag+0x274>)
 800e438:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e43c:	496d      	ldr	r1, [pc, #436]	; (800e5f4 <ip4_frag+0x280>)
 800e43e:	486c      	ldr	r0, [pc, #432]	; (800e5f0 <ip4_frag+0x27c>)
 800e440:	f000 f9fc 	bl	800e83c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	2214      	movs	r2, #20
 800e44a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e44c:	4618      	mov	r0, r3
 800e44e:	f000 f9df 	bl	800e810 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e45a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e45e:	e064      	b.n	800e52a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	895a      	ldrh	r2, [r3, #10]
 800e464:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	895b      	ldrh	r3, [r3, #10]
 800e46e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e470:	429a      	cmp	r2, r3
 800e472:	d906      	bls.n	800e482 <ip4_frag+0x10e>
 800e474:	4b5c      	ldr	r3, [pc, #368]	; (800e5e8 <ip4_frag+0x274>)
 800e476:	f240 322d 	movw	r2, #813	; 0x32d
 800e47a:	495f      	ldr	r1, [pc, #380]	; (800e5f8 <ip4_frag+0x284>)
 800e47c:	485c      	ldr	r0, [pc, #368]	; (800e5f0 <ip4_frag+0x27c>)
 800e47e:	f000 f9dd 	bl	800e83c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e482:	8bfa      	ldrh	r2, [r7, #30]
 800e484:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e488:	4293      	cmp	r3, r2
 800e48a:	bf28      	it	cs
 800e48c:	4613      	movcs	r3, r2
 800e48e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e496:	2b00      	cmp	r3, #0
 800e498:	d105      	bne.n	800e4a6 <ip4_frag+0x132>
        poff = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	60fb      	str	r3, [r7, #12]
        continue;
 800e4a4:	e041      	b.n	800e52a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e4a6:	f7ff ff0d 	bl	800e2c4 <ip_frag_alloc_pbuf_custom_ref>
 800e4aa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d103      	bne.n	800e4ba <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e4b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4b4:	f7f7 f8d2 	bl	800565c <pbuf_free>
        goto memerr;
 800e4b8:	e08f      	b.n	800e5da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e4ba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e4c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e4c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e4cc:	9201      	str	r2, [sp, #4]
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2241      	movs	r2, #65	; 0x41
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	f7f6 ff07 	bl	80052e8 <pbuf_alloced_custom>
 800e4da:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d106      	bne.n	800e4f0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e4e2:	69b8      	ldr	r0, [r7, #24]
 800e4e4:	f7ff fef6 	bl	800e2d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4ea:	f7f7 f8b7 	bl	800565c <pbuf_free>
        goto memerr;
 800e4ee:	e074      	b.n	800e5da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7f7 f953 	bl	800579c <pbuf_ref>
      pcr->original = p;
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	4a3f      	ldr	r2, [pc, #252]	; (800e5fc <ip4_frag+0x288>)
 800e500:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e502:	6979      	ldr	r1, [r7, #20]
 800e504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e506:	f7f7 f96b 	bl	80057e0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e50a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e50e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e512:	1ad3      	subs	r3, r2, r3
 800e514:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e518:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <ip4_frag+0x1b6>
        poff = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e52a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d196      	bne.n	800e460 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e532:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e538:	4413      	add	r3, r2
 800e53a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e540:	f1a3 0213 	sub.w	r2, r3, #19
 800e544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e548:	429a      	cmp	r2, r3
 800e54a:	bfcc      	ite	gt
 800e54c:	2301      	movgt	r3, #1
 800e54e:	2300      	movle	r3, #0
 800e550:	b2db      	uxtb	r3, r3
 800e552:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e554:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e55c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <ip4_frag+0x1f6>
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e56a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e56c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e570:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e574:	4618      	mov	r0, r3
 800e576:	f7f5 fd87 	bl	8004088 <lwip_htons>
 800e57a:	4603      	mov	r3, r0
 800e57c:	461a      	mov	r2, r3
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e584:	3314      	adds	r3, #20
 800e586:	b29b      	uxth	r3, r3
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f5 fd7d 	bl	8004088 <lwip_htons>
 800e58e:	4603      	mov	r3, r0
 800e590:	461a      	mov	r2, r3
 800e592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e594:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e598:	2200      	movs	r2, #0
 800e59a:	729a      	strb	r2, [r3, #10]
 800e59c:	2200      	movs	r2, #0
 800e59e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5a8:	68b8      	ldr	r0, [r7, #8]
 800e5aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5ae:	f7f7 f855 	bl	800565c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e5b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e5b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e5be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e5c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e5ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	f47f af19 	bne.w	800e406 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	e002      	b.n	800e5de <ip4_frag+0x26a>
      goto memerr;
 800e5d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3748      	adds	r7, #72	; 0x48
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	0801220c 	.word	0x0801220c
 800e5ec:	080123e8 	.word	0x080123e8
 800e5f0:	08012254 	.word	0x08012254
 800e5f4:	08012404 	.word	0x08012404
 800e5f8:	08012424 	.word	0x08012424
 800e5fc:	0800e30d 	.word	0x0800e30d

0800e600 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e60a:	230e      	movs	r3, #14
 800e60c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	895b      	ldrh	r3, [r3, #10]
 800e612:	2b0e      	cmp	r3, #14
 800e614:	d96e      	bls.n	800e6f4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7bdb      	ldrb	r3, [r3, #15]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d106      	bne.n	800e62c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e624:	3301      	adds	r3, #1
 800e626:	b2da      	uxtb	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	7b1a      	ldrb	r2, [r3, #12]
 800e636:	7b5b      	ldrb	r3, [r3, #13]
 800e638:	021b      	lsls	r3, r3, #8
 800e63a:	4313      	orrs	r3, r2
 800e63c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	d023      	beq.n	800e692 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d10f      	bne.n	800e672 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	785b      	ldrb	r3, [r3, #1]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d11b      	bne.n	800e692 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e65e:	2b5e      	cmp	r3, #94	; 0x5e
 800e660:	d117      	bne.n	800e692 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7b5b      	ldrb	r3, [r3, #13]
 800e666:	f043 0310 	orr.w	r3, r3, #16
 800e66a:	b2da      	uxtb	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	735a      	strb	r2, [r3, #13]
 800e670:	e00f      	b.n	800e692 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	2206      	movs	r2, #6
 800e676:	4928      	ldr	r1, [pc, #160]	; (800e718 <ethernet_input+0x118>)
 800e678:	4618      	mov	r0, r3
 800e67a:	f000 f8bb 	bl	800e7f4 <memcmp>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d106      	bne.n	800e692 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	7b5b      	ldrb	r3, [r3, #13]
 800e688:	f043 0308 	orr.w	r3, r3, #8
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e692:	89fb      	ldrh	r3, [r7, #14]
 800e694:	2b08      	cmp	r3, #8
 800e696:	d003      	beq.n	800e6a0 <ethernet_input+0xa0>
 800e698:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e69c:	d014      	beq.n	800e6c8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e69e:	e032      	b.n	800e706 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6a6:	f003 0308 	and.w	r3, r3, #8
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d024      	beq.n	800e6f8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e6ae:	8afb      	ldrh	r3, [r7, #22]
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7f6 ff4c 	bl	8005550 <pbuf_remove_header>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d11e      	bne.n	800e6fc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7fe ff27 	bl	800d514 <ip4_input>
      break;
 800e6c6:	e013      	b.n	800e6f0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6ce:	f003 0308 	and.w	r3, r3, #8
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d014      	beq.n	800e700 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e6d6:	8afb      	ldrh	r3, [r7, #22]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7f6 ff38 	bl	8005550 <pbuf_remove_header>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10e      	bne.n	800e704 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e6e6:	6839      	ldr	r1, [r7, #0]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7fe f8c7 	bl	800c87c <etharp_input>
      break;
 800e6ee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e00c      	b.n	800e70e <ethernet_input+0x10e>
    goto free_and_return;
 800e6f4:	bf00      	nop
 800e6f6:	e006      	b.n	800e706 <ethernet_input+0x106>
        goto free_and_return;
 800e6f8:	bf00      	nop
 800e6fa:	e004      	b.n	800e706 <ethernet_input+0x106>
        goto free_and_return;
 800e6fc:	bf00      	nop
 800e6fe:	e002      	b.n	800e706 <ethernet_input+0x106>
        goto free_and_return;
 800e700:	bf00      	nop
 800e702:	e000      	b.n	800e706 <ethernet_input+0x106>
        goto free_and_return;
 800e704:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7f6 ffa8 	bl	800565c <pbuf_free>
  return ERR_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	080133a8 	.word	0x080133a8

0800e71c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e72a:	8c3b      	ldrh	r3, [r7, #32]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7f5 fcab 	bl	8004088 <lwip_htons>
 800e732:	4603      	mov	r3, r0
 800e734:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e736:	210e      	movs	r1, #14
 800e738:	68b8      	ldr	r0, [r7, #8]
 800e73a:	f7f6 fef9 	bl	8005530 <pbuf_add_header>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d125      	bne.n	800e790 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	8afa      	ldrh	r2, [r7, #22]
 800e74e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	2206      	movs	r2, #6
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	4618      	mov	r0, r3
 800e758:	f000 f85a 	bl	800e810 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	3306      	adds	r3, #6
 800e760:	2206      	movs	r2, #6
 800e762:	6879      	ldr	r1, [r7, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	f000 f853 	bl	800e810 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e770:	2b06      	cmp	r3, #6
 800e772:	d006      	beq.n	800e782 <ethernet_output+0x66>
 800e774:	4b0a      	ldr	r3, [pc, #40]	; (800e7a0 <ethernet_output+0x84>)
 800e776:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e77a:	490a      	ldr	r1, [pc, #40]	; (800e7a4 <ethernet_output+0x88>)
 800e77c:	480a      	ldr	r0, [pc, #40]	; (800e7a8 <ethernet_output+0x8c>)
 800e77e:	f000 f85d 	bl	800e83c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	699b      	ldr	r3, [r3, #24]
 800e786:	68b9      	ldr	r1, [r7, #8]
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	4798      	blx	r3
 800e78c:	4603      	mov	r3, r0
 800e78e:	e002      	b.n	800e796 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e790:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e792:	f06f 0301 	mvn.w	r3, #1
}
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	08012434 	.word	0x08012434
 800e7a4:	0801246c 	.word	0x0801246c
 800e7a8:	080124a0 	.word	0x080124a0

0800e7ac <__libc_init_array>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	4d0d      	ldr	r5, [pc, #52]	; (800e7e4 <__libc_init_array+0x38>)
 800e7b0:	4c0d      	ldr	r4, [pc, #52]	; (800e7e8 <__libc_init_array+0x3c>)
 800e7b2:	1b64      	subs	r4, r4, r5
 800e7b4:	10a4      	asrs	r4, r4, #2
 800e7b6:	2600      	movs	r6, #0
 800e7b8:	42a6      	cmp	r6, r4
 800e7ba:	d109      	bne.n	800e7d0 <__libc_init_array+0x24>
 800e7bc:	4d0b      	ldr	r5, [pc, #44]	; (800e7ec <__libc_init_array+0x40>)
 800e7be:	4c0c      	ldr	r4, [pc, #48]	; (800e7f0 <__libc_init_array+0x44>)
 800e7c0:	f001 f876 	bl	800f8b0 <_init>
 800e7c4:	1b64      	subs	r4, r4, r5
 800e7c6:	10a4      	asrs	r4, r4, #2
 800e7c8:	2600      	movs	r6, #0
 800e7ca:	42a6      	cmp	r6, r4
 800e7cc:	d105      	bne.n	800e7da <__libc_init_array+0x2e>
 800e7ce:	bd70      	pop	{r4, r5, r6, pc}
 800e7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7d4:	4798      	blx	r3
 800e7d6:	3601      	adds	r6, #1
 800e7d8:	e7ee      	b.n	800e7b8 <__libc_init_array+0xc>
 800e7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7de:	4798      	blx	r3
 800e7e0:	3601      	adds	r6, #1
 800e7e2:	e7f2      	b.n	800e7ca <__libc_init_array+0x1e>
 800e7e4:	0801350c 	.word	0x0801350c
 800e7e8:	0801350c 	.word	0x0801350c
 800e7ec:	0801350c 	.word	0x0801350c
 800e7f0:	08013510 	.word	0x08013510

0800e7f4 <memcmp>:
 800e7f4:	b530      	push	{r4, r5, lr}
 800e7f6:	3901      	subs	r1, #1
 800e7f8:	2400      	movs	r4, #0
 800e7fa:	42a2      	cmp	r2, r4
 800e7fc:	d101      	bne.n	800e802 <memcmp+0xe>
 800e7fe:	2000      	movs	r0, #0
 800e800:	e005      	b.n	800e80e <memcmp+0x1a>
 800e802:	5d03      	ldrb	r3, [r0, r4]
 800e804:	3401      	adds	r4, #1
 800e806:	5d0d      	ldrb	r5, [r1, r4]
 800e808:	42ab      	cmp	r3, r5
 800e80a:	d0f6      	beq.n	800e7fa <memcmp+0x6>
 800e80c:	1b58      	subs	r0, r3, r5
 800e80e:	bd30      	pop	{r4, r5, pc}

0800e810 <memcpy>:
 800e810:	440a      	add	r2, r1
 800e812:	4291      	cmp	r1, r2
 800e814:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e818:	d100      	bne.n	800e81c <memcpy+0xc>
 800e81a:	4770      	bx	lr
 800e81c:	b510      	push	{r4, lr}
 800e81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e822:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e826:	4291      	cmp	r1, r2
 800e828:	d1f9      	bne.n	800e81e <memcpy+0xe>
 800e82a:	bd10      	pop	{r4, pc}

0800e82c <memset>:
 800e82c:	4402      	add	r2, r0
 800e82e:	4603      	mov	r3, r0
 800e830:	4293      	cmp	r3, r2
 800e832:	d100      	bne.n	800e836 <memset+0xa>
 800e834:	4770      	bx	lr
 800e836:	f803 1b01 	strb.w	r1, [r3], #1
 800e83a:	e7f9      	b.n	800e830 <memset+0x4>

0800e83c <iprintf>:
 800e83c:	b40f      	push	{r0, r1, r2, r3}
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <iprintf+0x2c>)
 800e840:	b513      	push	{r0, r1, r4, lr}
 800e842:	681c      	ldr	r4, [r3, #0]
 800e844:	b124      	cbz	r4, 800e850 <iprintf+0x14>
 800e846:	69a3      	ldr	r3, [r4, #24]
 800e848:	b913      	cbnz	r3, 800e850 <iprintf+0x14>
 800e84a:	4620      	mov	r0, r4
 800e84c:	f000 f8e4 	bl	800ea18 <__sinit>
 800e850:	ab05      	add	r3, sp, #20
 800e852:	9a04      	ldr	r2, [sp, #16]
 800e854:	68a1      	ldr	r1, [r4, #8]
 800e856:	9301      	str	r3, [sp, #4]
 800e858:	4620      	mov	r0, r4
 800e85a:	f000 fa6b 	bl	800ed34 <_vfiprintf_r>
 800e85e:	b002      	add	sp, #8
 800e860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e864:	b004      	add	sp, #16
 800e866:	4770      	bx	lr
 800e868:	20000014 	.word	0x20000014

0800e86c <rand>:
 800e86c:	4b17      	ldr	r3, [pc, #92]	; (800e8cc <rand+0x60>)
 800e86e:	b510      	push	{r4, lr}
 800e870:	681c      	ldr	r4, [r3, #0]
 800e872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e874:	b9b3      	cbnz	r3, 800e8a4 <rand+0x38>
 800e876:	2018      	movs	r0, #24
 800e878:	f000 f980 	bl	800eb7c <malloc>
 800e87c:	63a0      	str	r0, [r4, #56]	; 0x38
 800e87e:	b928      	cbnz	r0, 800e88c <rand+0x20>
 800e880:	4602      	mov	r2, r0
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <rand+0x64>)
 800e884:	4813      	ldr	r0, [pc, #76]	; (800e8d4 <rand+0x68>)
 800e886:	214e      	movs	r1, #78	; 0x4e
 800e888:	f000 f850 	bl	800e92c <__assert_func>
 800e88c:	4a12      	ldr	r2, [pc, #72]	; (800e8d8 <rand+0x6c>)
 800e88e:	4b13      	ldr	r3, [pc, #76]	; (800e8dc <rand+0x70>)
 800e890:	e9c0 2300 	strd	r2, r3, [r0]
 800e894:	4b12      	ldr	r3, [pc, #72]	; (800e8e0 <rand+0x74>)
 800e896:	6083      	str	r3, [r0, #8]
 800e898:	230b      	movs	r3, #11
 800e89a:	8183      	strh	r3, [r0, #12]
 800e89c:	2201      	movs	r2, #1
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e8a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e8a6:	480f      	ldr	r0, [pc, #60]	; (800e8e4 <rand+0x78>)
 800e8a8:	690a      	ldr	r2, [r1, #16]
 800e8aa:	694b      	ldr	r3, [r1, #20]
 800e8ac:	4c0e      	ldr	r4, [pc, #56]	; (800e8e8 <rand+0x7c>)
 800e8ae:	4350      	muls	r0, r2
 800e8b0:	fb04 0003 	mla	r0, r4, r3, r0
 800e8b4:	fba2 3404 	umull	r3, r4, r2, r4
 800e8b8:	1c5a      	adds	r2, r3, #1
 800e8ba:	4404      	add	r4, r0
 800e8bc:	f144 0000 	adc.w	r0, r4, #0
 800e8c0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e8c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000014 	.word	0x20000014
 800e8d0:	080133bc 	.word	0x080133bc
 800e8d4:	080133d3 	.word	0x080133d3
 800e8d8:	abcd330e 	.word	0xabcd330e
 800e8dc:	e66d1234 	.word	0xe66d1234
 800e8e0:	0005deec 	.word	0x0005deec
 800e8e4:	5851f42d 	.word	0x5851f42d
 800e8e8:	4c957f2d 	.word	0x4c957f2d

0800e8ec <strchr>:
 800e8ec:	b2c9      	uxtb	r1, r1
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8f4:	b11a      	cbz	r2, 800e8fe <strchr+0x12>
 800e8f6:	428a      	cmp	r2, r1
 800e8f8:	d1f9      	bne.n	800e8ee <strchr+0x2>
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	4770      	bx	lr
 800e8fe:	2900      	cmp	r1, #0
 800e900:	bf18      	it	ne
 800e902:	2300      	movne	r3, #0
 800e904:	e7f9      	b.n	800e8fa <strchr+0xe>

0800e906 <strncmp>:
 800e906:	b510      	push	{r4, lr}
 800e908:	b16a      	cbz	r2, 800e926 <strncmp+0x20>
 800e90a:	3901      	subs	r1, #1
 800e90c:	1884      	adds	r4, r0, r2
 800e90e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e912:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e916:	4293      	cmp	r3, r2
 800e918:	d103      	bne.n	800e922 <strncmp+0x1c>
 800e91a:	42a0      	cmp	r0, r4
 800e91c:	d001      	beq.n	800e922 <strncmp+0x1c>
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1f5      	bne.n	800e90e <strncmp+0x8>
 800e922:	1a98      	subs	r0, r3, r2
 800e924:	bd10      	pop	{r4, pc}
 800e926:	4610      	mov	r0, r2
 800e928:	e7fc      	b.n	800e924 <strncmp+0x1e>
	...

0800e92c <__assert_func>:
 800e92c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e92e:	4614      	mov	r4, r2
 800e930:	461a      	mov	r2, r3
 800e932:	4b09      	ldr	r3, [pc, #36]	; (800e958 <__assert_func+0x2c>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4605      	mov	r5, r0
 800e938:	68d8      	ldr	r0, [r3, #12]
 800e93a:	b14c      	cbz	r4, 800e950 <__assert_func+0x24>
 800e93c:	4b07      	ldr	r3, [pc, #28]	; (800e95c <__assert_func+0x30>)
 800e93e:	9100      	str	r1, [sp, #0]
 800e940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e944:	4906      	ldr	r1, [pc, #24]	; (800e960 <__assert_func+0x34>)
 800e946:	462b      	mov	r3, r5
 800e948:	f000 f8e4 	bl	800eb14 <fiprintf>
 800e94c:	f000 fddc 	bl	800f508 <abort>
 800e950:	4b04      	ldr	r3, [pc, #16]	; (800e964 <__assert_func+0x38>)
 800e952:	461c      	mov	r4, r3
 800e954:	e7f3      	b.n	800e93e <__assert_func+0x12>
 800e956:	bf00      	nop
 800e958:	20000014 	.word	0x20000014
 800e95c:	08013432 	.word	0x08013432
 800e960:	0801343f 	.word	0x0801343f
 800e964:	0801346d 	.word	0x0801346d

0800e968 <std>:
 800e968:	2300      	movs	r3, #0
 800e96a:	b510      	push	{r4, lr}
 800e96c:	4604      	mov	r4, r0
 800e96e:	e9c0 3300 	strd	r3, r3, [r0]
 800e972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e976:	6083      	str	r3, [r0, #8]
 800e978:	8181      	strh	r1, [r0, #12]
 800e97a:	6643      	str	r3, [r0, #100]	; 0x64
 800e97c:	81c2      	strh	r2, [r0, #14]
 800e97e:	6183      	str	r3, [r0, #24]
 800e980:	4619      	mov	r1, r3
 800e982:	2208      	movs	r2, #8
 800e984:	305c      	adds	r0, #92	; 0x5c
 800e986:	f7ff ff51 	bl	800e82c <memset>
 800e98a:	4b05      	ldr	r3, [pc, #20]	; (800e9a0 <std+0x38>)
 800e98c:	6263      	str	r3, [r4, #36]	; 0x24
 800e98e:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <std+0x3c>)
 800e990:	62a3      	str	r3, [r4, #40]	; 0x28
 800e992:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <std+0x40>)
 800e994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <std+0x44>)
 800e998:	6224      	str	r4, [r4, #32]
 800e99a:	6323      	str	r3, [r4, #48]	; 0x30
 800e99c:	bd10      	pop	{r4, pc}
 800e99e:	bf00      	nop
 800e9a0:	0800f2dd 	.word	0x0800f2dd
 800e9a4:	0800f2ff 	.word	0x0800f2ff
 800e9a8:	0800f337 	.word	0x0800f337
 800e9ac:	0800f35b 	.word	0x0800f35b

0800e9b0 <_cleanup_r>:
 800e9b0:	4901      	ldr	r1, [pc, #4]	; (800e9b8 <_cleanup_r+0x8>)
 800e9b2:	f000 b8c1 	b.w	800eb38 <_fwalk_reent>
 800e9b6:	bf00      	nop
 800e9b8:	0800f645 	.word	0x0800f645

0800e9bc <__sfmoreglue>:
 800e9bc:	b570      	push	{r4, r5, r6, lr}
 800e9be:	1e4a      	subs	r2, r1, #1
 800e9c0:	2568      	movs	r5, #104	; 0x68
 800e9c2:	4355      	muls	r5, r2
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9ca:	f000 f92f 	bl	800ec2c <_malloc_r>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	b140      	cbz	r0, 800e9e4 <__sfmoreglue+0x28>
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e9d8:	300c      	adds	r0, #12
 800e9da:	60a0      	str	r0, [r4, #8]
 800e9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9e0:	f7ff ff24 	bl	800e82c <memset>
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}

0800e9e8 <__sfp_lock_acquire>:
 800e9e8:	4801      	ldr	r0, [pc, #4]	; (800e9f0 <__sfp_lock_acquire+0x8>)
 800e9ea:	f000 b8c5 	b.w	800eb78 <__retarget_lock_acquire_recursive>
 800e9ee:	bf00      	nop
 800e9f0:	20008eb4 	.word	0x20008eb4

0800e9f4 <__sfp_lock_release>:
 800e9f4:	4801      	ldr	r0, [pc, #4]	; (800e9fc <__sfp_lock_release+0x8>)
 800e9f6:	f000 b8c0 	b.w	800eb7a <__retarget_lock_release_recursive>
 800e9fa:	bf00      	nop
 800e9fc:	20008eb4 	.word	0x20008eb4

0800ea00 <__sinit_lock_acquire>:
 800ea00:	4801      	ldr	r0, [pc, #4]	; (800ea08 <__sinit_lock_acquire+0x8>)
 800ea02:	f000 b8b9 	b.w	800eb78 <__retarget_lock_acquire_recursive>
 800ea06:	bf00      	nop
 800ea08:	20008eaf 	.word	0x20008eaf

0800ea0c <__sinit_lock_release>:
 800ea0c:	4801      	ldr	r0, [pc, #4]	; (800ea14 <__sinit_lock_release+0x8>)
 800ea0e:	f000 b8b4 	b.w	800eb7a <__retarget_lock_release_recursive>
 800ea12:	bf00      	nop
 800ea14:	20008eaf 	.word	0x20008eaf

0800ea18 <__sinit>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	f7ff fff0 	bl	800ea00 <__sinit_lock_acquire>
 800ea20:	69a3      	ldr	r3, [r4, #24]
 800ea22:	b11b      	cbz	r3, 800ea2c <__sinit+0x14>
 800ea24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea28:	f7ff bff0 	b.w	800ea0c <__sinit_lock_release>
 800ea2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea30:	6523      	str	r3, [r4, #80]	; 0x50
 800ea32:	4b13      	ldr	r3, [pc, #76]	; (800ea80 <__sinit+0x68>)
 800ea34:	4a13      	ldr	r2, [pc, #76]	; (800ea84 <__sinit+0x6c>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea3a:	42a3      	cmp	r3, r4
 800ea3c:	bf04      	itt	eq
 800ea3e:	2301      	moveq	r3, #1
 800ea40:	61a3      	streq	r3, [r4, #24]
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 f820 	bl	800ea88 <__sfp>
 800ea48:	6060      	str	r0, [r4, #4]
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 f81c 	bl	800ea88 <__sfp>
 800ea50:	60a0      	str	r0, [r4, #8]
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 f818 	bl	800ea88 <__sfp>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	60e0      	str	r0, [r4, #12]
 800ea5c:	2104      	movs	r1, #4
 800ea5e:	6860      	ldr	r0, [r4, #4]
 800ea60:	f7ff ff82 	bl	800e968 <std>
 800ea64:	68a0      	ldr	r0, [r4, #8]
 800ea66:	2201      	movs	r2, #1
 800ea68:	2109      	movs	r1, #9
 800ea6a:	f7ff ff7d 	bl	800e968 <std>
 800ea6e:	68e0      	ldr	r0, [r4, #12]
 800ea70:	2202      	movs	r2, #2
 800ea72:	2112      	movs	r1, #18
 800ea74:	f7ff ff78 	bl	800e968 <std>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	61a3      	str	r3, [r4, #24]
 800ea7c:	e7d2      	b.n	800ea24 <__sinit+0xc>
 800ea7e:	bf00      	nop
 800ea80:	080133b8 	.word	0x080133b8
 800ea84:	0800e9b1 	.word	0x0800e9b1

0800ea88 <__sfp>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	4607      	mov	r7, r0
 800ea8c:	f7ff ffac 	bl	800e9e8 <__sfp_lock_acquire>
 800ea90:	4b1e      	ldr	r3, [pc, #120]	; (800eb0c <__sfp+0x84>)
 800ea92:	681e      	ldr	r6, [r3, #0]
 800ea94:	69b3      	ldr	r3, [r6, #24]
 800ea96:	b913      	cbnz	r3, 800ea9e <__sfp+0x16>
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7ff ffbd 	bl	800ea18 <__sinit>
 800ea9e:	3648      	adds	r6, #72	; 0x48
 800eaa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	d503      	bpl.n	800eab0 <__sfp+0x28>
 800eaa8:	6833      	ldr	r3, [r6, #0]
 800eaaa:	b30b      	cbz	r3, 800eaf0 <__sfp+0x68>
 800eaac:	6836      	ldr	r6, [r6, #0]
 800eaae:	e7f7      	b.n	800eaa0 <__sfp+0x18>
 800eab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eab4:	b9d5      	cbnz	r5, 800eaec <__sfp+0x64>
 800eab6:	4b16      	ldr	r3, [pc, #88]	; (800eb10 <__sfp+0x88>)
 800eab8:	60e3      	str	r3, [r4, #12]
 800eaba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eabe:	6665      	str	r5, [r4, #100]	; 0x64
 800eac0:	f000 f859 	bl	800eb76 <__retarget_lock_init_recursive>
 800eac4:	f7ff ff96 	bl	800e9f4 <__sfp_lock_release>
 800eac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eacc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ead0:	6025      	str	r5, [r4, #0]
 800ead2:	61a5      	str	r5, [r4, #24]
 800ead4:	2208      	movs	r2, #8
 800ead6:	4629      	mov	r1, r5
 800ead8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eadc:	f7ff fea6 	bl	800e82c <memset>
 800eae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eae8:	4620      	mov	r0, r4
 800eaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaec:	3468      	adds	r4, #104	; 0x68
 800eaee:	e7d9      	b.n	800eaa4 <__sfp+0x1c>
 800eaf0:	2104      	movs	r1, #4
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f7ff ff62 	bl	800e9bc <__sfmoreglue>
 800eaf8:	4604      	mov	r4, r0
 800eafa:	6030      	str	r0, [r6, #0]
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d1d5      	bne.n	800eaac <__sfp+0x24>
 800eb00:	f7ff ff78 	bl	800e9f4 <__sfp_lock_release>
 800eb04:	230c      	movs	r3, #12
 800eb06:	603b      	str	r3, [r7, #0]
 800eb08:	e7ee      	b.n	800eae8 <__sfp+0x60>
 800eb0a:	bf00      	nop
 800eb0c:	080133b8 	.word	0x080133b8
 800eb10:	ffff0001 	.word	0xffff0001

0800eb14 <fiprintf>:
 800eb14:	b40e      	push	{r1, r2, r3}
 800eb16:	b503      	push	{r0, r1, lr}
 800eb18:	4601      	mov	r1, r0
 800eb1a:	ab03      	add	r3, sp, #12
 800eb1c:	4805      	ldr	r0, [pc, #20]	; (800eb34 <fiprintf+0x20>)
 800eb1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb22:	6800      	ldr	r0, [r0, #0]
 800eb24:	9301      	str	r3, [sp, #4]
 800eb26:	f000 f905 	bl	800ed34 <_vfiprintf_r>
 800eb2a:	b002      	add	sp, #8
 800eb2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb30:	b003      	add	sp, #12
 800eb32:	4770      	bx	lr
 800eb34:	20000014 	.word	0x20000014

0800eb38 <_fwalk_reent>:
 800eb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	4688      	mov	r8, r1
 800eb40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb44:	2700      	movs	r7, #0
 800eb46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb4a:	f1b9 0901 	subs.w	r9, r9, #1
 800eb4e:	d505      	bpl.n	800eb5c <_fwalk_reent+0x24>
 800eb50:	6824      	ldr	r4, [r4, #0]
 800eb52:	2c00      	cmp	r4, #0
 800eb54:	d1f7      	bne.n	800eb46 <_fwalk_reent+0xe>
 800eb56:	4638      	mov	r0, r7
 800eb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb5c:	89ab      	ldrh	r3, [r5, #12]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d907      	bls.n	800eb72 <_fwalk_reent+0x3a>
 800eb62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb66:	3301      	adds	r3, #1
 800eb68:	d003      	beq.n	800eb72 <_fwalk_reent+0x3a>
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	47c0      	blx	r8
 800eb70:	4307      	orrs	r7, r0
 800eb72:	3568      	adds	r5, #104	; 0x68
 800eb74:	e7e9      	b.n	800eb4a <_fwalk_reent+0x12>

0800eb76 <__retarget_lock_init_recursive>:
 800eb76:	4770      	bx	lr

0800eb78 <__retarget_lock_acquire_recursive>:
 800eb78:	4770      	bx	lr

0800eb7a <__retarget_lock_release_recursive>:
 800eb7a:	4770      	bx	lr

0800eb7c <malloc>:
 800eb7c:	4b02      	ldr	r3, [pc, #8]	; (800eb88 <malloc+0xc>)
 800eb7e:	4601      	mov	r1, r0
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	f000 b853 	b.w	800ec2c <_malloc_r>
 800eb86:	bf00      	nop
 800eb88:	20000014 	.word	0x20000014

0800eb8c <_free_r>:
 800eb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb8e:	2900      	cmp	r1, #0
 800eb90:	d048      	beq.n	800ec24 <_free_r+0x98>
 800eb92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb96:	9001      	str	r0, [sp, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f1a1 0404 	sub.w	r4, r1, #4
 800eb9e:	bfb8      	it	lt
 800eba0:	18e4      	addlt	r4, r4, r3
 800eba2:	f000 fe01 	bl	800f7a8 <__malloc_lock>
 800eba6:	4a20      	ldr	r2, [pc, #128]	; (800ec28 <_free_r+0x9c>)
 800eba8:	9801      	ldr	r0, [sp, #4]
 800ebaa:	6813      	ldr	r3, [r2, #0]
 800ebac:	4615      	mov	r5, r2
 800ebae:	b933      	cbnz	r3, 800ebbe <_free_r+0x32>
 800ebb0:	6063      	str	r3, [r4, #4]
 800ebb2:	6014      	str	r4, [r2, #0]
 800ebb4:	b003      	add	sp, #12
 800ebb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebba:	f000 bdfb 	b.w	800f7b4 <__malloc_unlock>
 800ebbe:	42a3      	cmp	r3, r4
 800ebc0:	d90b      	bls.n	800ebda <_free_r+0x4e>
 800ebc2:	6821      	ldr	r1, [r4, #0]
 800ebc4:	1862      	adds	r2, r4, r1
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	bf04      	itt	eq
 800ebca:	681a      	ldreq	r2, [r3, #0]
 800ebcc:	685b      	ldreq	r3, [r3, #4]
 800ebce:	6063      	str	r3, [r4, #4]
 800ebd0:	bf04      	itt	eq
 800ebd2:	1852      	addeq	r2, r2, r1
 800ebd4:	6022      	streq	r2, [r4, #0]
 800ebd6:	602c      	str	r4, [r5, #0]
 800ebd8:	e7ec      	b.n	800ebb4 <_free_r+0x28>
 800ebda:	461a      	mov	r2, r3
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	b10b      	cbz	r3, 800ebe4 <_free_r+0x58>
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d9fa      	bls.n	800ebda <_free_r+0x4e>
 800ebe4:	6811      	ldr	r1, [r2, #0]
 800ebe6:	1855      	adds	r5, r2, r1
 800ebe8:	42a5      	cmp	r5, r4
 800ebea:	d10b      	bne.n	800ec04 <_free_r+0x78>
 800ebec:	6824      	ldr	r4, [r4, #0]
 800ebee:	4421      	add	r1, r4
 800ebf0:	1854      	adds	r4, r2, r1
 800ebf2:	42a3      	cmp	r3, r4
 800ebf4:	6011      	str	r1, [r2, #0]
 800ebf6:	d1dd      	bne.n	800ebb4 <_free_r+0x28>
 800ebf8:	681c      	ldr	r4, [r3, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	6053      	str	r3, [r2, #4]
 800ebfe:	4421      	add	r1, r4
 800ec00:	6011      	str	r1, [r2, #0]
 800ec02:	e7d7      	b.n	800ebb4 <_free_r+0x28>
 800ec04:	d902      	bls.n	800ec0c <_free_r+0x80>
 800ec06:	230c      	movs	r3, #12
 800ec08:	6003      	str	r3, [r0, #0]
 800ec0a:	e7d3      	b.n	800ebb4 <_free_r+0x28>
 800ec0c:	6825      	ldr	r5, [r4, #0]
 800ec0e:	1961      	adds	r1, r4, r5
 800ec10:	428b      	cmp	r3, r1
 800ec12:	bf04      	itt	eq
 800ec14:	6819      	ldreq	r1, [r3, #0]
 800ec16:	685b      	ldreq	r3, [r3, #4]
 800ec18:	6063      	str	r3, [r4, #4]
 800ec1a:	bf04      	itt	eq
 800ec1c:	1949      	addeq	r1, r1, r5
 800ec1e:	6021      	streq	r1, [r4, #0]
 800ec20:	6054      	str	r4, [r2, #4]
 800ec22:	e7c7      	b.n	800ebb4 <_free_r+0x28>
 800ec24:	b003      	add	sp, #12
 800ec26:	bd30      	pop	{r4, r5, pc}
 800ec28:	20000648 	.word	0x20000648

0800ec2c <_malloc_r>:
 800ec2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2e:	1ccd      	adds	r5, r1, #3
 800ec30:	f025 0503 	bic.w	r5, r5, #3
 800ec34:	3508      	adds	r5, #8
 800ec36:	2d0c      	cmp	r5, #12
 800ec38:	bf38      	it	cc
 800ec3a:	250c      	movcc	r5, #12
 800ec3c:	2d00      	cmp	r5, #0
 800ec3e:	4606      	mov	r6, r0
 800ec40:	db01      	blt.n	800ec46 <_malloc_r+0x1a>
 800ec42:	42a9      	cmp	r1, r5
 800ec44:	d903      	bls.n	800ec4e <_malloc_r+0x22>
 800ec46:	230c      	movs	r3, #12
 800ec48:	6033      	str	r3, [r6, #0]
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec4e:	f000 fdab 	bl	800f7a8 <__malloc_lock>
 800ec52:	4921      	ldr	r1, [pc, #132]	; (800ecd8 <_malloc_r+0xac>)
 800ec54:	680a      	ldr	r2, [r1, #0]
 800ec56:	4614      	mov	r4, r2
 800ec58:	b99c      	cbnz	r4, 800ec82 <_malloc_r+0x56>
 800ec5a:	4f20      	ldr	r7, [pc, #128]	; (800ecdc <_malloc_r+0xb0>)
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	b923      	cbnz	r3, 800ec6a <_malloc_r+0x3e>
 800ec60:	4621      	mov	r1, r4
 800ec62:	4630      	mov	r0, r6
 800ec64:	f000 fb2a 	bl	800f2bc <_sbrk_r>
 800ec68:	6038      	str	r0, [r7, #0]
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f000 fb25 	bl	800f2bc <_sbrk_r>
 800ec72:	1c43      	adds	r3, r0, #1
 800ec74:	d123      	bne.n	800ecbe <_malloc_r+0x92>
 800ec76:	230c      	movs	r3, #12
 800ec78:	6033      	str	r3, [r6, #0]
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f000 fd9a 	bl	800f7b4 <__malloc_unlock>
 800ec80:	e7e3      	b.n	800ec4a <_malloc_r+0x1e>
 800ec82:	6823      	ldr	r3, [r4, #0]
 800ec84:	1b5b      	subs	r3, r3, r5
 800ec86:	d417      	bmi.n	800ecb8 <_malloc_r+0x8c>
 800ec88:	2b0b      	cmp	r3, #11
 800ec8a:	d903      	bls.n	800ec94 <_malloc_r+0x68>
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	441c      	add	r4, r3
 800ec90:	6025      	str	r5, [r4, #0]
 800ec92:	e004      	b.n	800ec9e <_malloc_r+0x72>
 800ec94:	6863      	ldr	r3, [r4, #4]
 800ec96:	42a2      	cmp	r2, r4
 800ec98:	bf0c      	ite	eq
 800ec9a:	600b      	streq	r3, [r1, #0]
 800ec9c:	6053      	strne	r3, [r2, #4]
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f000 fd88 	bl	800f7b4 <__malloc_unlock>
 800eca4:	f104 000b 	add.w	r0, r4, #11
 800eca8:	1d23      	adds	r3, r4, #4
 800ecaa:	f020 0007 	bic.w	r0, r0, #7
 800ecae:	1ac2      	subs	r2, r0, r3
 800ecb0:	d0cc      	beq.n	800ec4c <_malloc_r+0x20>
 800ecb2:	1a1b      	subs	r3, r3, r0
 800ecb4:	50a3      	str	r3, [r4, r2]
 800ecb6:	e7c9      	b.n	800ec4c <_malloc_r+0x20>
 800ecb8:	4622      	mov	r2, r4
 800ecba:	6864      	ldr	r4, [r4, #4]
 800ecbc:	e7cc      	b.n	800ec58 <_malloc_r+0x2c>
 800ecbe:	1cc4      	adds	r4, r0, #3
 800ecc0:	f024 0403 	bic.w	r4, r4, #3
 800ecc4:	42a0      	cmp	r0, r4
 800ecc6:	d0e3      	beq.n	800ec90 <_malloc_r+0x64>
 800ecc8:	1a21      	subs	r1, r4, r0
 800ecca:	4630      	mov	r0, r6
 800eccc:	f000 faf6 	bl	800f2bc <_sbrk_r>
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	d1dd      	bne.n	800ec90 <_malloc_r+0x64>
 800ecd4:	e7cf      	b.n	800ec76 <_malloc_r+0x4a>
 800ecd6:	bf00      	nop
 800ecd8:	20000648 	.word	0x20000648
 800ecdc:	2000064c 	.word	0x2000064c

0800ece0 <__sfputc_r>:
 800ece0:	6893      	ldr	r3, [r2, #8]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	b410      	push	{r4}
 800ece8:	6093      	str	r3, [r2, #8]
 800ecea:	da08      	bge.n	800ecfe <__sfputc_r+0x1e>
 800ecec:	6994      	ldr	r4, [r2, #24]
 800ecee:	42a3      	cmp	r3, r4
 800ecf0:	db01      	blt.n	800ecf6 <__sfputc_r+0x16>
 800ecf2:	290a      	cmp	r1, #10
 800ecf4:	d103      	bne.n	800ecfe <__sfputc_r+0x1e>
 800ecf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecfa:	f000 bb33 	b.w	800f364 <__swbuf_r>
 800ecfe:	6813      	ldr	r3, [r2, #0]
 800ed00:	1c58      	adds	r0, r3, #1
 800ed02:	6010      	str	r0, [r2, #0]
 800ed04:	7019      	strb	r1, [r3, #0]
 800ed06:	4608      	mov	r0, r1
 800ed08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <__sfputs_r>:
 800ed0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed10:	4606      	mov	r6, r0
 800ed12:	460f      	mov	r7, r1
 800ed14:	4614      	mov	r4, r2
 800ed16:	18d5      	adds	r5, r2, r3
 800ed18:	42ac      	cmp	r4, r5
 800ed1a:	d101      	bne.n	800ed20 <__sfputs_r+0x12>
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	e007      	b.n	800ed30 <__sfputs_r+0x22>
 800ed20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed24:	463a      	mov	r2, r7
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7ff ffda 	bl	800ece0 <__sfputc_r>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d1f3      	bne.n	800ed18 <__sfputs_r+0xa>
 800ed30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed34 <_vfiprintf_r>:
 800ed34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed38:	460d      	mov	r5, r1
 800ed3a:	b09d      	sub	sp, #116	; 0x74
 800ed3c:	4614      	mov	r4, r2
 800ed3e:	4698      	mov	r8, r3
 800ed40:	4606      	mov	r6, r0
 800ed42:	b118      	cbz	r0, 800ed4c <_vfiprintf_r+0x18>
 800ed44:	6983      	ldr	r3, [r0, #24]
 800ed46:	b90b      	cbnz	r3, 800ed4c <_vfiprintf_r+0x18>
 800ed48:	f7ff fe66 	bl	800ea18 <__sinit>
 800ed4c:	4b89      	ldr	r3, [pc, #548]	; (800ef74 <_vfiprintf_r+0x240>)
 800ed4e:	429d      	cmp	r5, r3
 800ed50:	d11b      	bne.n	800ed8a <_vfiprintf_r+0x56>
 800ed52:	6875      	ldr	r5, [r6, #4]
 800ed54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed56:	07d9      	lsls	r1, r3, #31
 800ed58:	d405      	bmi.n	800ed66 <_vfiprintf_r+0x32>
 800ed5a:	89ab      	ldrh	r3, [r5, #12]
 800ed5c:	059a      	lsls	r2, r3, #22
 800ed5e:	d402      	bmi.n	800ed66 <_vfiprintf_r+0x32>
 800ed60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed62:	f7ff ff09 	bl	800eb78 <__retarget_lock_acquire_recursive>
 800ed66:	89ab      	ldrh	r3, [r5, #12]
 800ed68:	071b      	lsls	r3, r3, #28
 800ed6a:	d501      	bpl.n	800ed70 <_vfiprintf_r+0x3c>
 800ed6c:	692b      	ldr	r3, [r5, #16]
 800ed6e:	b9eb      	cbnz	r3, 800edac <_vfiprintf_r+0x78>
 800ed70:	4629      	mov	r1, r5
 800ed72:	4630      	mov	r0, r6
 800ed74:	f000 fb5a 	bl	800f42c <__swsetup_r>
 800ed78:	b1c0      	cbz	r0, 800edac <_vfiprintf_r+0x78>
 800ed7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed7c:	07dc      	lsls	r4, r3, #31
 800ed7e:	d50e      	bpl.n	800ed9e <_vfiprintf_r+0x6a>
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed84:	b01d      	add	sp, #116	; 0x74
 800ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8a:	4b7b      	ldr	r3, [pc, #492]	; (800ef78 <_vfiprintf_r+0x244>)
 800ed8c:	429d      	cmp	r5, r3
 800ed8e:	d101      	bne.n	800ed94 <_vfiprintf_r+0x60>
 800ed90:	68b5      	ldr	r5, [r6, #8]
 800ed92:	e7df      	b.n	800ed54 <_vfiprintf_r+0x20>
 800ed94:	4b79      	ldr	r3, [pc, #484]	; (800ef7c <_vfiprintf_r+0x248>)
 800ed96:	429d      	cmp	r5, r3
 800ed98:	bf08      	it	eq
 800ed9a:	68f5      	ldreq	r5, [r6, #12]
 800ed9c:	e7da      	b.n	800ed54 <_vfiprintf_r+0x20>
 800ed9e:	89ab      	ldrh	r3, [r5, #12]
 800eda0:	0598      	lsls	r0, r3, #22
 800eda2:	d4ed      	bmi.n	800ed80 <_vfiprintf_r+0x4c>
 800eda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda6:	f7ff fee8 	bl	800eb7a <__retarget_lock_release_recursive>
 800edaa:	e7e9      	b.n	800ed80 <_vfiprintf_r+0x4c>
 800edac:	2300      	movs	r3, #0
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	2320      	movs	r3, #32
 800edb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800edba:	2330      	movs	r3, #48	; 0x30
 800edbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef80 <_vfiprintf_r+0x24c>
 800edc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edc4:	f04f 0901 	mov.w	r9, #1
 800edc8:	4623      	mov	r3, r4
 800edca:	469a      	mov	sl, r3
 800edcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edd0:	b10a      	cbz	r2, 800edd6 <_vfiprintf_r+0xa2>
 800edd2:	2a25      	cmp	r2, #37	; 0x25
 800edd4:	d1f9      	bne.n	800edca <_vfiprintf_r+0x96>
 800edd6:	ebba 0b04 	subs.w	fp, sl, r4
 800edda:	d00b      	beq.n	800edf4 <_vfiprintf_r+0xc0>
 800eddc:	465b      	mov	r3, fp
 800edde:	4622      	mov	r2, r4
 800ede0:	4629      	mov	r1, r5
 800ede2:	4630      	mov	r0, r6
 800ede4:	f7ff ff93 	bl	800ed0e <__sfputs_r>
 800ede8:	3001      	adds	r0, #1
 800edea:	f000 80aa 	beq.w	800ef42 <_vfiprintf_r+0x20e>
 800edee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf0:	445a      	add	r2, fp
 800edf2:	9209      	str	r2, [sp, #36]	; 0x24
 800edf4:	f89a 3000 	ldrb.w	r3, [sl]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 80a2 	beq.w	800ef42 <_vfiprintf_r+0x20e>
 800edfe:	2300      	movs	r3, #0
 800ee00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee08:	f10a 0a01 	add.w	sl, sl, #1
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	9307      	str	r3, [sp, #28]
 800ee10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee14:	931a      	str	r3, [sp, #104]	; 0x68
 800ee16:	4654      	mov	r4, sl
 800ee18:	2205      	movs	r2, #5
 800ee1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1e:	4858      	ldr	r0, [pc, #352]	; (800ef80 <_vfiprintf_r+0x24c>)
 800ee20:	f7f1 f9ee 	bl	8000200 <memchr>
 800ee24:	9a04      	ldr	r2, [sp, #16]
 800ee26:	b9d8      	cbnz	r0, 800ee60 <_vfiprintf_r+0x12c>
 800ee28:	06d1      	lsls	r1, r2, #27
 800ee2a:	bf44      	itt	mi
 800ee2c:	2320      	movmi	r3, #32
 800ee2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee32:	0713      	lsls	r3, r2, #28
 800ee34:	bf44      	itt	mi
 800ee36:	232b      	movmi	r3, #43	; 0x2b
 800ee38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee40:	2b2a      	cmp	r3, #42	; 0x2a
 800ee42:	d015      	beq.n	800ee70 <_vfiprintf_r+0x13c>
 800ee44:	9a07      	ldr	r2, [sp, #28]
 800ee46:	4654      	mov	r4, sl
 800ee48:	2000      	movs	r0, #0
 800ee4a:	f04f 0c0a 	mov.w	ip, #10
 800ee4e:	4621      	mov	r1, r4
 800ee50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee54:	3b30      	subs	r3, #48	; 0x30
 800ee56:	2b09      	cmp	r3, #9
 800ee58:	d94e      	bls.n	800eef8 <_vfiprintf_r+0x1c4>
 800ee5a:	b1b0      	cbz	r0, 800ee8a <_vfiprintf_r+0x156>
 800ee5c:	9207      	str	r2, [sp, #28]
 800ee5e:	e014      	b.n	800ee8a <_vfiprintf_r+0x156>
 800ee60:	eba0 0308 	sub.w	r3, r0, r8
 800ee64:	fa09 f303 	lsl.w	r3, r9, r3
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	9304      	str	r3, [sp, #16]
 800ee6c:	46a2      	mov	sl, r4
 800ee6e:	e7d2      	b.n	800ee16 <_vfiprintf_r+0xe2>
 800ee70:	9b03      	ldr	r3, [sp, #12]
 800ee72:	1d19      	adds	r1, r3, #4
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	9103      	str	r1, [sp, #12]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bfbb      	ittet	lt
 800ee7c:	425b      	neglt	r3, r3
 800ee7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee82:	9307      	strge	r3, [sp, #28]
 800ee84:	9307      	strlt	r3, [sp, #28]
 800ee86:	bfb8      	it	lt
 800ee88:	9204      	strlt	r2, [sp, #16]
 800ee8a:	7823      	ldrb	r3, [r4, #0]
 800ee8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee8e:	d10c      	bne.n	800eeaa <_vfiprintf_r+0x176>
 800ee90:	7863      	ldrb	r3, [r4, #1]
 800ee92:	2b2a      	cmp	r3, #42	; 0x2a
 800ee94:	d135      	bne.n	800ef02 <_vfiprintf_r+0x1ce>
 800ee96:	9b03      	ldr	r3, [sp, #12]
 800ee98:	1d1a      	adds	r2, r3, #4
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	9203      	str	r2, [sp, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bfb8      	it	lt
 800eea2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eea6:	3402      	adds	r4, #2
 800eea8:	9305      	str	r3, [sp, #20]
 800eeaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef90 <_vfiprintf_r+0x25c>
 800eeae:	7821      	ldrb	r1, [r4, #0]
 800eeb0:	2203      	movs	r2, #3
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	f7f1 f9a4 	bl	8000200 <memchr>
 800eeb8:	b140      	cbz	r0, 800eecc <_vfiprintf_r+0x198>
 800eeba:	2340      	movs	r3, #64	; 0x40
 800eebc:	eba0 000a 	sub.w	r0, r0, sl
 800eec0:	fa03 f000 	lsl.w	r0, r3, r0
 800eec4:	9b04      	ldr	r3, [sp, #16]
 800eec6:	4303      	orrs	r3, r0
 800eec8:	3401      	adds	r4, #1
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed0:	482c      	ldr	r0, [pc, #176]	; (800ef84 <_vfiprintf_r+0x250>)
 800eed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eed6:	2206      	movs	r2, #6
 800eed8:	f7f1 f992 	bl	8000200 <memchr>
 800eedc:	2800      	cmp	r0, #0
 800eede:	d03f      	beq.n	800ef60 <_vfiprintf_r+0x22c>
 800eee0:	4b29      	ldr	r3, [pc, #164]	; (800ef88 <_vfiprintf_r+0x254>)
 800eee2:	bb1b      	cbnz	r3, 800ef2c <_vfiprintf_r+0x1f8>
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	3307      	adds	r3, #7
 800eee8:	f023 0307 	bic.w	r3, r3, #7
 800eeec:	3308      	adds	r3, #8
 800eeee:	9303      	str	r3, [sp, #12]
 800eef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef2:	443b      	add	r3, r7
 800eef4:	9309      	str	r3, [sp, #36]	; 0x24
 800eef6:	e767      	b.n	800edc8 <_vfiprintf_r+0x94>
 800eef8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eefc:	460c      	mov	r4, r1
 800eefe:	2001      	movs	r0, #1
 800ef00:	e7a5      	b.n	800ee4e <_vfiprintf_r+0x11a>
 800ef02:	2300      	movs	r3, #0
 800ef04:	3401      	adds	r4, #1
 800ef06:	9305      	str	r3, [sp, #20]
 800ef08:	4619      	mov	r1, r3
 800ef0a:	f04f 0c0a 	mov.w	ip, #10
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef14:	3a30      	subs	r2, #48	; 0x30
 800ef16:	2a09      	cmp	r2, #9
 800ef18:	d903      	bls.n	800ef22 <_vfiprintf_r+0x1ee>
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d0c5      	beq.n	800eeaa <_vfiprintf_r+0x176>
 800ef1e:	9105      	str	r1, [sp, #20]
 800ef20:	e7c3      	b.n	800eeaa <_vfiprintf_r+0x176>
 800ef22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef26:	4604      	mov	r4, r0
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e7f0      	b.n	800ef0e <_vfiprintf_r+0x1da>
 800ef2c:	ab03      	add	r3, sp, #12
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	462a      	mov	r2, r5
 800ef32:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <_vfiprintf_r+0x258>)
 800ef34:	a904      	add	r1, sp, #16
 800ef36:	4630      	mov	r0, r6
 800ef38:	f3af 8000 	nop.w
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	1c78      	adds	r0, r7, #1
 800ef40:	d1d6      	bne.n	800eef0 <_vfiprintf_r+0x1bc>
 800ef42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef44:	07d9      	lsls	r1, r3, #31
 800ef46:	d405      	bmi.n	800ef54 <_vfiprintf_r+0x220>
 800ef48:	89ab      	ldrh	r3, [r5, #12]
 800ef4a:	059a      	lsls	r2, r3, #22
 800ef4c:	d402      	bmi.n	800ef54 <_vfiprintf_r+0x220>
 800ef4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef50:	f7ff fe13 	bl	800eb7a <__retarget_lock_release_recursive>
 800ef54:	89ab      	ldrh	r3, [r5, #12]
 800ef56:	065b      	lsls	r3, r3, #25
 800ef58:	f53f af12 	bmi.w	800ed80 <_vfiprintf_r+0x4c>
 800ef5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef5e:	e711      	b.n	800ed84 <_vfiprintf_r+0x50>
 800ef60:	ab03      	add	r3, sp, #12
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	462a      	mov	r2, r5
 800ef66:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <_vfiprintf_r+0x258>)
 800ef68:	a904      	add	r1, sp, #16
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f000 f880 	bl	800f070 <_printf_i>
 800ef70:	e7e4      	b.n	800ef3c <_vfiprintf_r+0x208>
 800ef72:	bf00      	nop
 800ef74:	08013490 	.word	0x08013490
 800ef78:	080134b0 	.word	0x080134b0
 800ef7c:	08013470 	.word	0x08013470
 800ef80:	080134d0 	.word	0x080134d0
 800ef84:	080134da 	.word	0x080134da
 800ef88:	00000000 	.word	0x00000000
 800ef8c:	0800ed0f 	.word	0x0800ed0f
 800ef90:	080134d6 	.word	0x080134d6

0800ef94 <_printf_common>:
 800ef94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef98:	4616      	mov	r6, r2
 800ef9a:	4699      	mov	r9, r3
 800ef9c:	688a      	ldr	r2, [r1, #8]
 800ef9e:	690b      	ldr	r3, [r1, #16]
 800efa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efa4:	4293      	cmp	r3, r2
 800efa6:	bfb8      	it	lt
 800efa8:	4613      	movlt	r3, r2
 800efaa:	6033      	str	r3, [r6, #0]
 800efac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efb0:	4607      	mov	r7, r0
 800efb2:	460c      	mov	r4, r1
 800efb4:	b10a      	cbz	r2, 800efba <_printf_common+0x26>
 800efb6:	3301      	adds	r3, #1
 800efb8:	6033      	str	r3, [r6, #0]
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	0699      	lsls	r1, r3, #26
 800efbe:	bf42      	ittt	mi
 800efc0:	6833      	ldrmi	r3, [r6, #0]
 800efc2:	3302      	addmi	r3, #2
 800efc4:	6033      	strmi	r3, [r6, #0]
 800efc6:	6825      	ldr	r5, [r4, #0]
 800efc8:	f015 0506 	ands.w	r5, r5, #6
 800efcc:	d106      	bne.n	800efdc <_printf_common+0x48>
 800efce:	f104 0a19 	add.w	sl, r4, #25
 800efd2:	68e3      	ldr	r3, [r4, #12]
 800efd4:	6832      	ldr	r2, [r6, #0]
 800efd6:	1a9b      	subs	r3, r3, r2
 800efd8:	42ab      	cmp	r3, r5
 800efda:	dc26      	bgt.n	800f02a <_printf_common+0x96>
 800efdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efe0:	1e13      	subs	r3, r2, #0
 800efe2:	6822      	ldr	r2, [r4, #0]
 800efe4:	bf18      	it	ne
 800efe6:	2301      	movne	r3, #1
 800efe8:	0692      	lsls	r2, r2, #26
 800efea:	d42b      	bmi.n	800f044 <_printf_common+0xb0>
 800efec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eff0:	4649      	mov	r1, r9
 800eff2:	4638      	mov	r0, r7
 800eff4:	47c0      	blx	r8
 800eff6:	3001      	adds	r0, #1
 800eff8:	d01e      	beq.n	800f038 <_printf_common+0xa4>
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	68e5      	ldr	r5, [r4, #12]
 800effe:	6832      	ldr	r2, [r6, #0]
 800f000:	f003 0306 	and.w	r3, r3, #6
 800f004:	2b04      	cmp	r3, #4
 800f006:	bf08      	it	eq
 800f008:	1aad      	subeq	r5, r5, r2
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	6922      	ldr	r2, [r4, #16]
 800f00e:	bf0c      	ite	eq
 800f010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f014:	2500      	movne	r5, #0
 800f016:	4293      	cmp	r3, r2
 800f018:	bfc4      	itt	gt
 800f01a:	1a9b      	subgt	r3, r3, r2
 800f01c:	18ed      	addgt	r5, r5, r3
 800f01e:	2600      	movs	r6, #0
 800f020:	341a      	adds	r4, #26
 800f022:	42b5      	cmp	r5, r6
 800f024:	d11a      	bne.n	800f05c <_printf_common+0xc8>
 800f026:	2000      	movs	r0, #0
 800f028:	e008      	b.n	800f03c <_printf_common+0xa8>
 800f02a:	2301      	movs	r3, #1
 800f02c:	4652      	mov	r2, sl
 800f02e:	4649      	mov	r1, r9
 800f030:	4638      	mov	r0, r7
 800f032:	47c0      	blx	r8
 800f034:	3001      	adds	r0, #1
 800f036:	d103      	bne.n	800f040 <_printf_common+0xac>
 800f038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f040:	3501      	adds	r5, #1
 800f042:	e7c6      	b.n	800efd2 <_printf_common+0x3e>
 800f044:	18e1      	adds	r1, r4, r3
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	2030      	movs	r0, #48	; 0x30
 800f04a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f04e:	4422      	add	r2, r4
 800f050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f058:	3302      	adds	r3, #2
 800f05a:	e7c7      	b.n	800efec <_printf_common+0x58>
 800f05c:	2301      	movs	r3, #1
 800f05e:	4622      	mov	r2, r4
 800f060:	4649      	mov	r1, r9
 800f062:	4638      	mov	r0, r7
 800f064:	47c0      	blx	r8
 800f066:	3001      	adds	r0, #1
 800f068:	d0e6      	beq.n	800f038 <_printf_common+0xa4>
 800f06a:	3601      	adds	r6, #1
 800f06c:	e7d9      	b.n	800f022 <_printf_common+0x8e>
	...

0800f070 <_printf_i>:
 800f070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f074:	460c      	mov	r4, r1
 800f076:	4691      	mov	r9, r2
 800f078:	7e27      	ldrb	r7, [r4, #24]
 800f07a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f07c:	2f78      	cmp	r7, #120	; 0x78
 800f07e:	4680      	mov	r8, r0
 800f080:	469a      	mov	sl, r3
 800f082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f086:	d807      	bhi.n	800f098 <_printf_i+0x28>
 800f088:	2f62      	cmp	r7, #98	; 0x62
 800f08a:	d80a      	bhi.n	800f0a2 <_printf_i+0x32>
 800f08c:	2f00      	cmp	r7, #0
 800f08e:	f000 80d8 	beq.w	800f242 <_printf_i+0x1d2>
 800f092:	2f58      	cmp	r7, #88	; 0x58
 800f094:	f000 80a3 	beq.w	800f1de <_printf_i+0x16e>
 800f098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0a0:	e03a      	b.n	800f118 <_printf_i+0xa8>
 800f0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0a6:	2b15      	cmp	r3, #21
 800f0a8:	d8f6      	bhi.n	800f098 <_printf_i+0x28>
 800f0aa:	a001      	add	r0, pc, #4	; (adr r0, 800f0b0 <_printf_i+0x40>)
 800f0ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f0b0:	0800f109 	.word	0x0800f109
 800f0b4:	0800f11d 	.word	0x0800f11d
 800f0b8:	0800f099 	.word	0x0800f099
 800f0bc:	0800f099 	.word	0x0800f099
 800f0c0:	0800f099 	.word	0x0800f099
 800f0c4:	0800f099 	.word	0x0800f099
 800f0c8:	0800f11d 	.word	0x0800f11d
 800f0cc:	0800f099 	.word	0x0800f099
 800f0d0:	0800f099 	.word	0x0800f099
 800f0d4:	0800f099 	.word	0x0800f099
 800f0d8:	0800f099 	.word	0x0800f099
 800f0dc:	0800f229 	.word	0x0800f229
 800f0e0:	0800f14d 	.word	0x0800f14d
 800f0e4:	0800f20b 	.word	0x0800f20b
 800f0e8:	0800f099 	.word	0x0800f099
 800f0ec:	0800f099 	.word	0x0800f099
 800f0f0:	0800f24b 	.word	0x0800f24b
 800f0f4:	0800f099 	.word	0x0800f099
 800f0f8:	0800f14d 	.word	0x0800f14d
 800f0fc:	0800f099 	.word	0x0800f099
 800f100:	0800f099 	.word	0x0800f099
 800f104:	0800f213 	.word	0x0800f213
 800f108:	680b      	ldr	r3, [r1, #0]
 800f10a:	1d1a      	adds	r2, r3, #4
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	600a      	str	r2, [r1, #0]
 800f110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f118:	2301      	movs	r3, #1
 800f11a:	e0a3      	b.n	800f264 <_printf_i+0x1f4>
 800f11c:	6825      	ldr	r5, [r4, #0]
 800f11e:	6808      	ldr	r0, [r1, #0]
 800f120:	062e      	lsls	r6, r5, #24
 800f122:	f100 0304 	add.w	r3, r0, #4
 800f126:	d50a      	bpl.n	800f13e <_printf_i+0xce>
 800f128:	6805      	ldr	r5, [r0, #0]
 800f12a:	600b      	str	r3, [r1, #0]
 800f12c:	2d00      	cmp	r5, #0
 800f12e:	da03      	bge.n	800f138 <_printf_i+0xc8>
 800f130:	232d      	movs	r3, #45	; 0x2d
 800f132:	426d      	negs	r5, r5
 800f134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f138:	485e      	ldr	r0, [pc, #376]	; (800f2b4 <_printf_i+0x244>)
 800f13a:	230a      	movs	r3, #10
 800f13c:	e019      	b.n	800f172 <_printf_i+0x102>
 800f13e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f142:	6805      	ldr	r5, [r0, #0]
 800f144:	600b      	str	r3, [r1, #0]
 800f146:	bf18      	it	ne
 800f148:	b22d      	sxthne	r5, r5
 800f14a:	e7ef      	b.n	800f12c <_printf_i+0xbc>
 800f14c:	680b      	ldr	r3, [r1, #0]
 800f14e:	6825      	ldr	r5, [r4, #0]
 800f150:	1d18      	adds	r0, r3, #4
 800f152:	6008      	str	r0, [r1, #0]
 800f154:	0628      	lsls	r0, r5, #24
 800f156:	d501      	bpl.n	800f15c <_printf_i+0xec>
 800f158:	681d      	ldr	r5, [r3, #0]
 800f15a:	e002      	b.n	800f162 <_printf_i+0xf2>
 800f15c:	0669      	lsls	r1, r5, #25
 800f15e:	d5fb      	bpl.n	800f158 <_printf_i+0xe8>
 800f160:	881d      	ldrh	r5, [r3, #0]
 800f162:	4854      	ldr	r0, [pc, #336]	; (800f2b4 <_printf_i+0x244>)
 800f164:	2f6f      	cmp	r7, #111	; 0x6f
 800f166:	bf0c      	ite	eq
 800f168:	2308      	moveq	r3, #8
 800f16a:	230a      	movne	r3, #10
 800f16c:	2100      	movs	r1, #0
 800f16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f172:	6866      	ldr	r6, [r4, #4]
 800f174:	60a6      	str	r6, [r4, #8]
 800f176:	2e00      	cmp	r6, #0
 800f178:	bfa2      	ittt	ge
 800f17a:	6821      	ldrge	r1, [r4, #0]
 800f17c:	f021 0104 	bicge.w	r1, r1, #4
 800f180:	6021      	strge	r1, [r4, #0]
 800f182:	b90d      	cbnz	r5, 800f188 <_printf_i+0x118>
 800f184:	2e00      	cmp	r6, #0
 800f186:	d04d      	beq.n	800f224 <_printf_i+0x1b4>
 800f188:	4616      	mov	r6, r2
 800f18a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f18e:	fb03 5711 	mls	r7, r3, r1, r5
 800f192:	5dc7      	ldrb	r7, [r0, r7]
 800f194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f198:	462f      	mov	r7, r5
 800f19a:	42bb      	cmp	r3, r7
 800f19c:	460d      	mov	r5, r1
 800f19e:	d9f4      	bls.n	800f18a <_printf_i+0x11a>
 800f1a0:	2b08      	cmp	r3, #8
 800f1a2:	d10b      	bne.n	800f1bc <_printf_i+0x14c>
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	07df      	lsls	r7, r3, #31
 800f1a8:	d508      	bpl.n	800f1bc <_printf_i+0x14c>
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	6861      	ldr	r1, [r4, #4]
 800f1ae:	4299      	cmp	r1, r3
 800f1b0:	bfde      	ittt	le
 800f1b2:	2330      	movle	r3, #48	; 0x30
 800f1b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1b8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f1bc:	1b92      	subs	r2, r2, r6
 800f1be:	6122      	str	r2, [r4, #16]
 800f1c0:	f8cd a000 	str.w	sl, [sp]
 800f1c4:	464b      	mov	r3, r9
 800f1c6:	aa03      	add	r2, sp, #12
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	4640      	mov	r0, r8
 800f1cc:	f7ff fee2 	bl	800ef94 <_printf_common>
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d14c      	bne.n	800f26e <_printf_i+0x1fe>
 800f1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1d8:	b004      	add	sp, #16
 800f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1de:	4835      	ldr	r0, [pc, #212]	; (800f2b4 <_printf_i+0x244>)
 800f1e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1e4:	6823      	ldr	r3, [r4, #0]
 800f1e6:	680e      	ldr	r6, [r1, #0]
 800f1e8:	061f      	lsls	r7, r3, #24
 800f1ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800f1ee:	600e      	str	r6, [r1, #0]
 800f1f0:	d514      	bpl.n	800f21c <_printf_i+0x1ac>
 800f1f2:	07d9      	lsls	r1, r3, #31
 800f1f4:	bf44      	itt	mi
 800f1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800f1fa:	6023      	strmi	r3, [r4, #0]
 800f1fc:	b91d      	cbnz	r5, 800f206 <_printf_i+0x196>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	f023 0320 	bic.w	r3, r3, #32
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	2310      	movs	r3, #16
 800f208:	e7b0      	b.n	800f16c <_printf_i+0xfc>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	f043 0320 	orr.w	r3, r3, #32
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	2378      	movs	r3, #120	; 0x78
 800f214:	4828      	ldr	r0, [pc, #160]	; (800f2b8 <_printf_i+0x248>)
 800f216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f21a:	e7e3      	b.n	800f1e4 <_printf_i+0x174>
 800f21c:	065e      	lsls	r6, r3, #25
 800f21e:	bf48      	it	mi
 800f220:	b2ad      	uxthmi	r5, r5
 800f222:	e7e6      	b.n	800f1f2 <_printf_i+0x182>
 800f224:	4616      	mov	r6, r2
 800f226:	e7bb      	b.n	800f1a0 <_printf_i+0x130>
 800f228:	680b      	ldr	r3, [r1, #0]
 800f22a:	6826      	ldr	r6, [r4, #0]
 800f22c:	6960      	ldr	r0, [r4, #20]
 800f22e:	1d1d      	adds	r5, r3, #4
 800f230:	600d      	str	r5, [r1, #0]
 800f232:	0635      	lsls	r5, r6, #24
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	d501      	bpl.n	800f23c <_printf_i+0x1cc>
 800f238:	6018      	str	r0, [r3, #0]
 800f23a:	e002      	b.n	800f242 <_printf_i+0x1d2>
 800f23c:	0671      	lsls	r1, r6, #25
 800f23e:	d5fb      	bpl.n	800f238 <_printf_i+0x1c8>
 800f240:	8018      	strh	r0, [r3, #0]
 800f242:	2300      	movs	r3, #0
 800f244:	6123      	str	r3, [r4, #16]
 800f246:	4616      	mov	r6, r2
 800f248:	e7ba      	b.n	800f1c0 <_printf_i+0x150>
 800f24a:	680b      	ldr	r3, [r1, #0]
 800f24c:	1d1a      	adds	r2, r3, #4
 800f24e:	600a      	str	r2, [r1, #0]
 800f250:	681e      	ldr	r6, [r3, #0]
 800f252:	6862      	ldr	r2, [r4, #4]
 800f254:	2100      	movs	r1, #0
 800f256:	4630      	mov	r0, r6
 800f258:	f7f0 ffd2 	bl	8000200 <memchr>
 800f25c:	b108      	cbz	r0, 800f262 <_printf_i+0x1f2>
 800f25e:	1b80      	subs	r0, r0, r6
 800f260:	6060      	str	r0, [r4, #4]
 800f262:	6863      	ldr	r3, [r4, #4]
 800f264:	6123      	str	r3, [r4, #16]
 800f266:	2300      	movs	r3, #0
 800f268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f26c:	e7a8      	b.n	800f1c0 <_printf_i+0x150>
 800f26e:	6923      	ldr	r3, [r4, #16]
 800f270:	4632      	mov	r2, r6
 800f272:	4649      	mov	r1, r9
 800f274:	4640      	mov	r0, r8
 800f276:	47d0      	blx	sl
 800f278:	3001      	adds	r0, #1
 800f27a:	d0ab      	beq.n	800f1d4 <_printf_i+0x164>
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	079b      	lsls	r3, r3, #30
 800f280:	d413      	bmi.n	800f2aa <_printf_i+0x23a>
 800f282:	68e0      	ldr	r0, [r4, #12]
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	4298      	cmp	r0, r3
 800f288:	bfb8      	it	lt
 800f28a:	4618      	movlt	r0, r3
 800f28c:	e7a4      	b.n	800f1d8 <_printf_i+0x168>
 800f28e:	2301      	movs	r3, #1
 800f290:	4632      	mov	r2, r6
 800f292:	4649      	mov	r1, r9
 800f294:	4640      	mov	r0, r8
 800f296:	47d0      	blx	sl
 800f298:	3001      	adds	r0, #1
 800f29a:	d09b      	beq.n	800f1d4 <_printf_i+0x164>
 800f29c:	3501      	adds	r5, #1
 800f29e:	68e3      	ldr	r3, [r4, #12]
 800f2a0:	9903      	ldr	r1, [sp, #12]
 800f2a2:	1a5b      	subs	r3, r3, r1
 800f2a4:	42ab      	cmp	r3, r5
 800f2a6:	dcf2      	bgt.n	800f28e <_printf_i+0x21e>
 800f2a8:	e7eb      	b.n	800f282 <_printf_i+0x212>
 800f2aa:	2500      	movs	r5, #0
 800f2ac:	f104 0619 	add.w	r6, r4, #25
 800f2b0:	e7f5      	b.n	800f29e <_printf_i+0x22e>
 800f2b2:	bf00      	nop
 800f2b4:	080134e1 	.word	0x080134e1
 800f2b8:	080134f2 	.word	0x080134f2

0800f2bc <_sbrk_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d06      	ldr	r5, [pc, #24]	; (800f2d8 <_sbrk_r+0x1c>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	602b      	str	r3, [r5, #0]
 800f2c8:	f7f1 fb12 	bl	80008f0 <_sbrk>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d102      	bne.n	800f2d6 <_sbrk_r+0x1a>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b103      	cbz	r3, 800f2d6 <_sbrk_r+0x1a>
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	20008ea8 	.word	0x20008ea8

0800f2dc <__sread>:
 800f2dc:	b510      	push	{r4, lr}
 800f2de:	460c      	mov	r4, r1
 800f2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e4:	f000 fa6c 	bl	800f7c0 <_read_r>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	bfab      	itete	ge
 800f2ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2ee:	89a3      	ldrhlt	r3, [r4, #12]
 800f2f0:	181b      	addge	r3, r3, r0
 800f2f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2f6:	bfac      	ite	ge
 800f2f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2fa:	81a3      	strhlt	r3, [r4, #12]
 800f2fc:	bd10      	pop	{r4, pc}

0800f2fe <__swrite>:
 800f2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f302:	461f      	mov	r7, r3
 800f304:	898b      	ldrh	r3, [r1, #12]
 800f306:	05db      	lsls	r3, r3, #23
 800f308:	4605      	mov	r5, r0
 800f30a:	460c      	mov	r4, r1
 800f30c:	4616      	mov	r6, r2
 800f30e:	d505      	bpl.n	800f31c <__swrite+0x1e>
 800f310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f314:	2302      	movs	r3, #2
 800f316:	2200      	movs	r2, #0
 800f318:	f000 f9d0 	bl	800f6bc <_lseek_r>
 800f31c:	89a3      	ldrh	r3, [r4, #12]
 800f31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	4632      	mov	r2, r6
 800f32a:	463b      	mov	r3, r7
 800f32c:	4628      	mov	r0, r5
 800f32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f332:	f000 b869 	b.w	800f408 <_write_r>

0800f336 <__sseek>:
 800f336:	b510      	push	{r4, lr}
 800f338:	460c      	mov	r4, r1
 800f33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33e:	f000 f9bd 	bl	800f6bc <_lseek_r>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	bf15      	itete	ne
 800f348:	6560      	strne	r0, [r4, #84]	; 0x54
 800f34a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f34e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f352:	81a3      	strheq	r3, [r4, #12]
 800f354:	bf18      	it	ne
 800f356:	81a3      	strhne	r3, [r4, #12]
 800f358:	bd10      	pop	{r4, pc}

0800f35a <__sclose>:
 800f35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35e:	f000 b8db 	b.w	800f518 <_close_r>
	...

0800f364 <__swbuf_r>:
 800f364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f366:	460e      	mov	r6, r1
 800f368:	4614      	mov	r4, r2
 800f36a:	4605      	mov	r5, r0
 800f36c:	b118      	cbz	r0, 800f376 <__swbuf_r+0x12>
 800f36e:	6983      	ldr	r3, [r0, #24]
 800f370:	b90b      	cbnz	r3, 800f376 <__swbuf_r+0x12>
 800f372:	f7ff fb51 	bl	800ea18 <__sinit>
 800f376:	4b21      	ldr	r3, [pc, #132]	; (800f3fc <__swbuf_r+0x98>)
 800f378:	429c      	cmp	r4, r3
 800f37a:	d12b      	bne.n	800f3d4 <__swbuf_r+0x70>
 800f37c:	686c      	ldr	r4, [r5, #4]
 800f37e:	69a3      	ldr	r3, [r4, #24]
 800f380:	60a3      	str	r3, [r4, #8]
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	071a      	lsls	r2, r3, #28
 800f386:	d52f      	bpl.n	800f3e8 <__swbuf_r+0x84>
 800f388:	6923      	ldr	r3, [r4, #16]
 800f38a:	b36b      	cbz	r3, 800f3e8 <__swbuf_r+0x84>
 800f38c:	6923      	ldr	r3, [r4, #16]
 800f38e:	6820      	ldr	r0, [r4, #0]
 800f390:	1ac0      	subs	r0, r0, r3
 800f392:	6963      	ldr	r3, [r4, #20]
 800f394:	b2f6      	uxtb	r6, r6
 800f396:	4283      	cmp	r3, r0
 800f398:	4637      	mov	r7, r6
 800f39a:	dc04      	bgt.n	800f3a6 <__swbuf_r+0x42>
 800f39c:	4621      	mov	r1, r4
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f000 f950 	bl	800f644 <_fflush_r>
 800f3a4:	bb30      	cbnz	r0, 800f3f4 <__swbuf_r+0x90>
 800f3a6:	68a3      	ldr	r3, [r4, #8]
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	60a3      	str	r3, [r4, #8]
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	1c5a      	adds	r2, r3, #1
 800f3b0:	6022      	str	r2, [r4, #0]
 800f3b2:	701e      	strb	r6, [r3, #0]
 800f3b4:	6963      	ldr	r3, [r4, #20]
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	4283      	cmp	r3, r0
 800f3ba:	d004      	beq.n	800f3c6 <__swbuf_r+0x62>
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	07db      	lsls	r3, r3, #31
 800f3c0:	d506      	bpl.n	800f3d0 <__swbuf_r+0x6c>
 800f3c2:	2e0a      	cmp	r6, #10
 800f3c4:	d104      	bne.n	800f3d0 <__swbuf_r+0x6c>
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f000 f93b 	bl	800f644 <_fflush_r>
 800f3ce:	b988      	cbnz	r0, 800f3f4 <__swbuf_r+0x90>
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d4:	4b0a      	ldr	r3, [pc, #40]	; (800f400 <__swbuf_r+0x9c>)
 800f3d6:	429c      	cmp	r4, r3
 800f3d8:	d101      	bne.n	800f3de <__swbuf_r+0x7a>
 800f3da:	68ac      	ldr	r4, [r5, #8]
 800f3dc:	e7cf      	b.n	800f37e <__swbuf_r+0x1a>
 800f3de:	4b09      	ldr	r3, [pc, #36]	; (800f404 <__swbuf_r+0xa0>)
 800f3e0:	429c      	cmp	r4, r3
 800f3e2:	bf08      	it	eq
 800f3e4:	68ec      	ldreq	r4, [r5, #12]
 800f3e6:	e7ca      	b.n	800f37e <__swbuf_r+0x1a>
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f000 f81e 	bl	800f42c <__swsetup_r>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d0cb      	beq.n	800f38c <__swbuf_r+0x28>
 800f3f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f3f8:	e7ea      	b.n	800f3d0 <__swbuf_r+0x6c>
 800f3fa:	bf00      	nop
 800f3fc:	08013490 	.word	0x08013490
 800f400:	080134b0 	.word	0x080134b0
 800f404:	08013470 	.word	0x08013470

0800f408 <_write_r>:
 800f408:	b538      	push	{r3, r4, r5, lr}
 800f40a:	4d07      	ldr	r5, [pc, #28]	; (800f428 <_write_r+0x20>)
 800f40c:	4604      	mov	r4, r0
 800f40e:	4608      	mov	r0, r1
 800f410:	4611      	mov	r1, r2
 800f412:	2200      	movs	r2, #0
 800f414:	602a      	str	r2, [r5, #0]
 800f416:	461a      	mov	r2, r3
 800f418:	f7f1 fa19 	bl	800084e <_write>
 800f41c:	1c43      	adds	r3, r0, #1
 800f41e:	d102      	bne.n	800f426 <_write_r+0x1e>
 800f420:	682b      	ldr	r3, [r5, #0]
 800f422:	b103      	cbz	r3, 800f426 <_write_r+0x1e>
 800f424:	6023      	str	r3, [r4, #0]
 800f426:	bd38      	pop	{r3, r4, r5, pc}
 800f428:	20008ea8 	.word	0x20008ea8

0800f42c <__swsetup_r>:
 800f42c:	4b32      	ldr	r3, [pc, #200]	; (800f4f8 <__swsetup_r+0xcc>)
 800f42e:	b570      	push	{r4, r5, r6, lr}
 800f430:	681d      	ldr	r5, [r3, #0]
 800f432:	4606      	mov	r6, r0
 800f434:	460c      	mov	r4, r1
 800f436:	b125      	cbz	r5, 800f442 <__swsetup_r+0x16>
 800f438:	69ab      	ldr	r3, [r5, #24]
 800f43a:	b913      	cbnz	r3, 800f442 <__swsetup_r+0x16>
 800f43c:	4628      	mov	r0, r5
 800f43e:	f7ff faeb 	bl	800ea18 <__sinit>
 800f442:	4b2e      	ldr	r3, [pc, #184]	; (800f4fc <__swsetup_r+0xd0>)
 800f444:	429c      	cmp	r4, r3
 800f446:	d10f      	bne.n	800f468 <__swsetup_r+0x3c>
 800f448:	686c      	ldr	r4, [r5, #4]
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f450:	0719      	lsls	r1, r3, #28
 800f452:	d42c      	bmi.n	800f4ae <__swsetup_r+0x82>
 800f454:	06dd      	lsls	r5, r3, #27
 800f456:	d411      	bmi.n	800f47c <__swsetup_r+0x50>
 800f458:	2309      	movs	r3, #9
 800f45a:	6033      	str	r3, [r6, #0]
 800f45c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f466:	e03e      	b.n	800f4e6 <__swsetup_r+0xba>
 800f468:	4b25      	ldr	r3, [pc, #148]	; (800f500 <__swsetup_r+0xd4>)
 800f46a:	429c      	cmp	r4, r3
 800f46c:	d101      	bne.n	800f472 <__swsetup_r+0x46>
 800f46e:	68ac      	ldr	r4, [r5, #8]
 800f470:	e7eb      	b.n	800f44a <__swsetup_r+0x1e>
 800f472:	4b24      	ldr	r3, [pc, #144]	; (800f504 <__swsetup_r+0xd8>)
 800f474:	429c      	cmp	r4, r3
 800f476:	bf08      	it	eq
 800f478:	68ec      	ldreq	r4, [r5, #12]
 800f47a:	e7e6      	b.n	800f44a <__swsetup_r+0x1e>
 800f47c:	0758      	lsls	r0, r3, #29
 800f47e:	d512      	bpl.n	800f4a6 <__swsetup_r+0x7a>
 800f480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f482:	b141      	cbz	r1, 800f496 <__swsetup_r+0x6a>
 800f484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f488:	4299      	cmp	r1, r3
 800f48a:	d002      	beq.n	800f492 <__swsetup_r+0x66>
 800f48c:	4630      	mov	r0, r6
 800f48e:	f7ff fb7d 	bl	800eb8c <_free_r>
 800f492:	2300      	movs	r3, #0
 800f494:	6363      	str	r3, [r4, #52]	; 0x34
 800f496:	89a3      	ldrh	r3, [r4, #12]
 800f498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f49c:	81a3      	strh	r3, [r4, #12]
 800f49e:	2300      	movs	r3, #0
 800f4a0:	6063      	str	r3, [r4, #4]
 800f4a2:	6923      	ldr	r3, [r4, #16]
 800f4a4:	6023      	str	r3, [r4, #0]
 800f4a6:	89a3      	ldrh	r3, [r4, #12]
 800f4a8:	f043 0308 	orr.w	r3, r3, #8
 800f4ac:	81a3      	strh	r3, [r4, #12]
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	b94b      	cbnz	r3, 800f4c6 <__swsetup_r+0x9a>
 800f4b2:	89a3      	ldrh	r3, [r4, #12]
 800f4b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4bc:	d003      	beq.n	800f4c6 <__swsetup_r+0x9a>
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f000 f931 	bl	800f728 <__smakebuf_r>
 800f4c6:	89a0      	ldrh	r0, [r4, #12]
 800f4c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4cc:	f010 0301 	ands.w	r3, r0, #1
 800f4d0:	d00a      	beq.n	800f4e8 <__swsetup_r+0xbc>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	60a3      	str	r3, [r4, #8]
 800f4d6:	6963      	ldr	r3, [r4, #20]
 800f4d8:	425b      	negs	r3, r3
 800f4da:	61a3      	str	r3, [r4, #24]
 800f4dc:	6923      	ldr	r3, [r4, #16]
 800f4de:	b943      	cbnz	r3, 800f4f2 <__swsetup_r+0xc6>
 800f4e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4e4:	d1ba      	bne.n	800f45c <__swsetup_r+0x30>
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	0781      	lsls	r1, r0, #30
 800f4ea:	bf58      	it	pl
 800f4ec:	6963      	ldrpl	r3, [r4, #20]
 800f4ee:	60a3      	str	r3, [r4, #8]
 800f4f0:	e7f4      	b.n	800f4dc <__swsetup_r+0xb0>
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	e7f7      	b.n	800f4e6 <__swsetup_r+0xba>
 800f4f6:	bf00      	nop
 800f4f8:	20000014 	.word	0x20000014
 800f4fc:	08013490 	.word	0x08013490
 800f500:	080134b0 	.word	0x080134b0
 800f504:	08013470 	.word	0x08013470

0800f508 <abort>:
 800f508:	b508      	push	{r3, lr}
 800f50a:	2006      	movs	r0, #6
 800f50c:	f000 f992 	bl	800f834 <raise>
 800f510:	2001      	movs	r0, #1
 800f512:	f7f1 f975 	bl	8000800 <_exit>
	...

0800f518 <_close_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d06      	ldr	r5, [pc, #24]	; (800f534 <_close_r+0x1c>)
 800f51c:	2300      	movs	r3, #0
 800f51e:	4604      	mov	r4, r0
 800f520:	4608      	mov	r0, r1
 800f522:	602b      	str	r3, [r5, #0]
 800f524:	f7f1 f9af 	bl	8000886 <_close>
 800f528:	1c43      	adds	r3, r0, #1
 800f52a:	d102      	bne.n	800f532 <_close_r+0x1a>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	b103      	cbz	r3, 800f532 <_close_r+0x1a>
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	bd38      	pop	{r3, r4, r5, pc}
 800f534:	20008ea8 	.word	0x20008ea8

0800f538 <__sflush_r>:
 800f538:	898a      	ldrh	r2, [r1, #12]
 800f53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53e:	4605      	mov	r5, r0
 800f540:	0710      	lsls	r0, r2, #28
 800f542:	460c      	mov	r4, r1
 800f544:	d458      	bmi.n	800f5f8 <__sflush_r+0xc0>
 800f546:	684b      	ldr	r3, [r1, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	dc05      	bgt.n	800f558 <__sflush_r+0x20>
 800f54c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f54e:	2b00      	cmp	r3, #0
 800f550:	dc02      	bgt.n	800f558 <__sflush_r+0x20>
 800f552:	2000      	movs	r0, #0
 800f554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f55a:	2e00      	cmp	r6, #0
 800f55c:	d0f9      	beq.n	800f552 <__sflush_r+0x1a>
 800f55e:	2300      	movs	r3, #0
 800f560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f564:	682f      	ldr	r7, [r5, #0]
 800f566:	602b      	str	r3, [r5, #0]
 800f568:	d032      	beq.n	800f5d0 <__sflush_r+0x98>
 800f56a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	075a      	lsls	r2, r3, #29
 800f570:	d505      	bpl.n	800f57e <__sflush_r+0x46>
 800f572:	6863      	ldr	r3, [r4, #4]
 800f574:	1ac0      	subs	r0, r0, r3
 800f576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f578:	b10b      	cbz	r3, 800f57e <__sflush_r+0x46>
 800f57a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f57c:	1ac0      	subs	r0, r0, r3
 800f57e:	2300      	movs	r3, #0
 800f580:	4602      	mov	r2, r0
 800f582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f584:	6a21      	ldr	r1, [r4, #32]
 800f586:	4628      	mov	r0, r5
 800f588:	47b0      	blx	r6
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	d106      	bne.n	800f59e <__sflush_r+0x66>
 800f590:	6829      	ldr	r1, [r5, #0]
 800f592:	291d      	cmp	r1, #29
 800f594:	d82c      	bhi.n	800f5f0 <__sflush_r+0xb8>
 800f596:	4a2a      	ldr	r2, [pc, #168]	; (800f640 <__sflush_r+0x108>)
 800f598:	40ca      	lsrs	r2, r1
 800f59a:	07d6      	lsls	r6, r2, #31
 800f59c:	d528      	bpl.n	800f5f0 <__sflush_r+0xb8>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	6062      	str	r2, [r4, #4]
 800f5a2:	04d9      	lsls	r1, r3, #19
 800f5a4:	6922      	ldr	r2, [r4, #16]
 800f5a6:	6022      	str	r2, [r4, #0]
 800f5a8:	d504      	bpl.n	800f5b4 <__sflush_r+0x7c>
 800f5aa:	1c42      	adds	r2, r0, #1
 800f5ac:	d101      	bne.n	800f5b2 <__sflush_r+0x7a>
 800f5ae:	682b      	ldr	r3, [r5, #0]
 800f5b0:	b903      	cbnz	r3, 800f5b4 <__sflush_r+0x7c>
 800f5b2:	6560      	str	r0, [r4, #84]	; 0x54
 800f5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5b6:	602f      	str	r7, [r5, #0]
 800f5b8:	2900      	cmp	r1, #0
 800f5ba:	d0ca      	beq.n	800f552 <__sflush_r+0x1a>
 800f5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5c0:	4299      	cmp	r1, r3
 800f5c2:	d002      	beq.n	800f5ca <__sflush_r+0x92>
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	f7ff fae1 	bl	800eb8c <_free_r>
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	6360      	str	r0, [r4, #52]	; 0x34
 800f5ce:	e7c1      	b.n	800f554 <__sflush_r+0x1c>
 800f5d0:	6a21      	ldr	r1, [r4, #32]
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b0      	blx	r6
 800f5d8:	1c41      	adds	r1, r0, #1
 800f5da:	d1c7      	bne.n	800f56c <__sflush_r+0x34>
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d0c4      	beq.n	800f56c <__sflush_r+0x34>
 800f5e2:	2b1d      	cmp	r3, #29
 800f5e4:	d001      	beq.n	800f5ea <__sflush_r+0xb2>
 800f5e6:	2b16      	cmp	r3, #22
 800f5e8:	d101      	bne.n	800f5ee <__sflush_r+0xb6>
 800f5ea:	602f      	str	r7, [r5, #0]
 800f5ec:	e7b1      	b.n	800f552 <__sflush_r+0x1a>
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f4:	81a3      	strh	r3, [r4, #12]
 800f5f6:	e7ad      	b.n	800f554 <__sflush_r+0x1c>
 800f5f8:	690f      	ldr	r7, [r1, #16]
 800f5fa:	2f00      	cmp	r7, #0
 800f5fc:	d0a9      	beq.n	800f552 <__sflush_r+0x1a>
 800f5fe:	0793      	lsls	r3, r2, #30
 800f600:	680e      	ldr	r6, [r1, #0]
 800f602:	bf08      	it	eq
 800f604:	694b      	ldreq	r3, [r1, #20]
 800f606:	600f      	str	r7, [r1, #0]
 800f608:	bf18      	it	ne
 800f60a:	2300      	movne	r3, #0
 800f60c:	eba6 0807 	sub.w	r8, r6, r7
 800f610:	608b      	str	r3, [r1, #8]
 800f612:	f1b8 0f00 	cmp.w	r8, #0
 800f616:	dd9c      	ble.n	800f552 <__sflush_r+0x1a>
 800f618:	6a21      	ldr	r1, [r4, #32]
 800f61a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f61c:	4643      	mov	r3, r8
 800f61e:	463a      	mov	r2, r7
 800f620:	4628      	mov	r0, r5
 800f622:	47b0      	blx	r6
 800f624:	2800      	cmp	r0, #0
 800f626:	dc06      	bgt.n	800f636 <__sflush_r+0xfe>
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f634:	e78e      	b.n	800f554 <__sflush_r+0x1c>
 800f636:	4407      	add	r7, r0
 800f638:	eba8 0800 	sub.w	r8, r8, r0
 800f63c:	e7e9      	b.n	800f612 <__sflush_r+0xda>
 800f63e:	bf00      	nop
 800f640:	20400001 	.word	0x20400001

0800f644 <_fflush_r>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	690b      	ldr	r3, [r1, #16]
 800f648:	4605      	mov	r5, r0
 800f64a:	460c      	mov	r4, r1
 800f64c:	b913      	cbnz	r3, 800f654 <_fflush_r+0x10>
 800f64e:	2500      	movs	r5, #0
 800f650:	4628      	mov	r0, r5
 800f652:	bd38      	pop	{r3, r4, r5, pc}
 800f654:	b118      	cbz	r0, 800f65e <_fflush_r+0x1a>
 800f656:	6983      	ldr	r3, [r0, #24]
 800f658:	b90b      	cbnz	r3, 800f65e <_fflush_r+0x1a>
 800f65a:	f7ff f9dd 	bl	800ea18 <__sinit>
 800f65e:	4b14      	ldr	r3, [pc, #80]	; (800f6b0 <_fflush_r+0x6c>)
 800f660:	429c      	cmp	r4, r3
 800f662:	d11b      	bne.n	800f69c <_fflush_r+0x58>
 800f664:	686c      	ldr	r4, [r5, #4]
 800f666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d0ef      	beq.n	800f64e <_fflush_r+0xa>
 800f66e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f670:	07d0      	lsls	r0, r2, #31
 800f672:	d404      	bmi.n	800f67e <_fflush_r+0x3a>
 800f674:	0599      	lsls	r1, r3, #22
 800f676:	d402      	bmi.n	800f67e <_fflush_r+0x3a>
 800f678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f67a:	f7ff fa7d 	bl	800eb78 <__retarget_lock_acquire_recursive>
 800f67e:	4628      	mov	r0, r5
 800f680:	4621      	mov	r1, r4
 800f682:	f7ff ff59 	bl	800f538 <__sflush_r>
 800f686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f688:	07da      	lsls	r2, r3, #31
 800f68a:	4605      	mov	r5, r0
 800f68c:	d4e0      	bmi.n	800f650 <_fflush_r+0xc>
 800f68e:	89a3      	ldrh	r3, [r4, #12]
 800f690:	059b      	lsls	r3, r3, #22
 800f692:	d4dd      	bmi.n	800f650 <_fflush_r+0xc>
 800f694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f696:	f7ff fa70 	bl	800eb7a <__retarget_lock_release_recursive>
 800f69a:	e7d9      	b.n	800f650 <_fflush_r+0xc>
 800f69c:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <_fflush_r+0x70>)
 800f69e:	429c      	cmp	r4, r3
 800f6a0:	d101      	bne.n	800f6a6 <_fflush_r+0x62>
 800f6a2:	68ac      	ldr	r4, [r5, #8]
 800f6a4:	e7df      	b.n	800f666 <_fflush_r+0x22>
 800f6a6:	4b04      	ldr	r3, [pc, #16]	; (800f6b8 <_fflush_r+0x74>)
 800f6a8:	429c      	cmp	r4, r3
 800f6aa:	bf08      	it	eq
 800f6ac:	68ec      	ldreq	r4, [r5, #12]
 800f6ae:	e7da      	b.n	800f666 <_fflush_r+0x22>
 800f6b0:	08013490 	.word	0x08013490
 800f6b4:	080134b0 	.word	0x080134b0
 800f6b8:	08013470 	.word	0x08013470

0800f6bc <_lseek_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	4d07      	ldr	r5, [pc, #28]	; (800f6dc <_lseek_r+0x20>)
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	4608      	mov	r0, r1
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	602a      	str	r2, [r5, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f7f1 f902 	bl	80008d4 <_lseek>
 800f6d0:	1c43      	adds	r3, r0, #1
 800f6d2:	d102      	bne.n	800f6da <_lseek_r+0x1e>
 800f6d4:	682b      	ldr	r3, [r5, #0]
 800f6d6:	b103      	cbz	r3, 800f6da <_lseek_r+0x1e>
 800f6d8:	6023      	str	r3, [r4, #0]
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	20008ea8 	.word	0x20008ea8

0800f6e0 <__swhatbuf_r>:
 800f6e0:	b570      	push	{r4, r5, r6, lr}
 800f6e2:	460e      	mov	r6, r1
 800f6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	b096      	sub	sp, #88	; 0x58
 800f6ec:	4614      	mov	r4, r2
 800f6ee:	461d      	mov	r5, r3
 800f6f0:	da07      	bge.n	800f702 <__swhatbuf_r+0x22>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	602b      	str	r3, [r5, #0]
 800f6f6:	89b3      	ldrh	r3, [r6, #12]
 800f6f8:	061a      	lsls	r2, r3, #24
 800f6fa:	d410      	bmi.n	800f71e <__swhatbuf_r+0x3e>
 800f6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f700:	e00e      	b.n	800f720 <__swhatbuf_r+0x40>
 800f702:	466a      	mov	r2, sp
 800f704:	f000 f8b2 	bl	800f86c <_fstat_r>
 800f708:	2800      	cmp	r0, #0
 800f70a:	dbf2      	blt.n	800f6f2 <__swhatbuf_r+0x12>
 800f70c:	9a01      	ldr	r2, [sp, #4]
 800f70e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f716:	425a      	negs	r2, r3
 800f718:	415a      	adcs	r2, r3
 800f71a:	602a      	str	r2, [r5, #0]
 800f71c:	e7ee      	b.n	800f6fc <__swhatbuf_r+0x1c>
 800f71e:	2340      	movs	r3, #64	; 0x40
 800f720:	2000      	movs	r0, #0
 800f722:	6023      	str	r3, [r4, #0]
 800f724:	b016      	add	sp, #88	; 0x58
 800f726:	bd70      	pop	{r4, r5, r6, pc}

0800f728 <__smakebuf_r>:
 800f728:	898b      	ldrh	r3, [r1, #12]
 800f72a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f72c:	079d      	lsls	r5, r3, #30
 800f72e:	4606      	mov	r6, r0
 800f730:	460c      	mov	r4, r1
 800f732:	d507      	bpl.n	800f744 <__smakebuf_r+0x1c>
 800f734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f738:	6023      	str	r3, [r4, #0]
 800f73a:	6123      	str	r3, [r4, #16]
 800f73c:	2301      	movs	r3, #1
 800f73e:	6163      	str	r3, [r4, #20]
 800f740:	b002      	add	sp, #8
 800f742:	bd70      	pop	{r4, r5, r6, pc}
 800f744:	ab01      	add	r3, sp, #4
 800f746:	466a      	mov	r2, sp
 800f748:	f7ff ffca 	bl	800f6e0 <__swhatbuf_r>
 800f74c:	9900      	ldr	r1, [sp, #0]
 800f74e:	4605      	mov	r5, r0
 800f750:	4630      	mov	r0, r6
 800f752:	f7ff fa6b 	bl	800ec2c <_malloc_r>
 800f756:	b948      	cbnz	r0, 800f76c <__smakebuf_r+0x44>
 800f758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f75c:	059a      	lsls	r2, r3, #22
 800f75e:	d4ef      	bmi.n	800f740 <__smakebuf_r+0x18>
 800f760:	f023 0303 	bic.w	r3, r3, #3
 800f764:	f043 0302 	orr.w	r3, r3, #2
 800f768:	81a3      	strh	r3, [r4, #12]
 800f76a:	e7e3      	b.n	800f734 <__smakebuf_r+0xc>
 800f76c:	4b0d      	ldr	r3, [pc, #52]	; (800f7a4 <__smakebuf_r+0x7c>)
 800f76e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f770:	89a3      	ldrh	r3, [r4, #12]
 800f772:	6020      	str	r0, [r4, #0]
 800f774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f778:	81a3      	strh	r3, [r4, #12]
 800f77a:	9b00      	ldr	r3, [sp, #0]
 800f77c:	6163      	str	r3, [r4, #20]
 800f77e:	9b01      	ldr	r3, [sp, #4]
 800f780:	6120      	str	r0, [r4, #16]
 800f782:	b15b      	cbz	r3, 800f79c <__smakebuf_r+0x74>
 800f784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f788:	4630      	mov	r0, r6
 800f78a:	f000 f881 	bl	800f890 <_isatty_r>
 800f78e:	b128      	cbz	r0, 800f79c <__smakebuf_r+0x74>
 800f790:	89a3      	ldrh	r3, [r4, #12]
 800f792:	f023 0303 	bic.w	r3, r3, #3
 800f796:	f043 0301 	orr.w	r3, r3, #1
 800f79a:	81a3      	strh	r3, [r4, #12]
 800f79c:	89a0      	ldrh	r0, [r4, #12]
 800f79e:	4305      	orrs	r5, r0
 800f7a0:	81a5      	strh	r5, [r4, #12]
 800f7a2:	e7cd      	b.n	800f740 <__smakebuf_r+0x18>
 800f7a4:	0800e9b1 	.word	0x0800e9b1

0800f7a8 <__malloc_lock>:
 800f7a8:	4801      	ldr	r0, [pc, #4]	; (800f7b0 <__malloc_lock+0x8>)
 800f7aa:	f7ff b9e5 	b.w	800eb78 <__retarget_lock_acquire_recursive>
 800f7ae:	bf00      	nop
 800f7b0:	20008eb0 	.word	0x20008eb0

0800f7b4 <__malloc_unlock>:
 800f7b4:	4801      	ldr	r0, [pc, #4]	; (800f7bc <__malloc_unlock+0x8>)
 800f7b6:	f7ff b9e0 	b.w	800eb7a <__retarget_lock_release_recursive>
 800f7ba:	bf00      	nop
 800f7bc:	20008eb0 	.word	0x20008eb0

0800f7c0 <_read_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4d07      	ldr	r5, [pc, #28]	; (800f7e0 <_read_r+0x20>)
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	4608      	mov	r0, r1
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	602a      	str	r2, [r5, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f7f1 f820 	bl	8000814 <_read>
 800f7d4:	1c43      	adds	r3, r0, #1
 800f7d6:	d102      	bne.n	800f7de <_read_r+0x1e>
 800f7d8:	682b      	ldr	r3, [r5, #0]
 800f7da:	b103      	cbz	r3, 800f7de <_read_r+0x1e>
 800f7dc:	6023      	str	r3, [r4, #0]
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	20008ea8 	.word	0x20008ea8

0800f7e4 <_raise_r>:
 800f7e4:	291f      	cmp	r1, #31
 800f7e6:	b538      	push	{r3, r4, r5, lr}
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	d904      	bls.n	800f7f8 <_raise_r+0x14>
 800f7ee:	2316      	movs	r3, #22
 800f7f0:	6003      	str	r3, [r0, #0]
 800f7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7f6:	bd38      	pop	{r3, r4, r5, pc}
 800f7f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7fa:	b112      	cbz	r2, 800f802 <_raise_r+0x1e>
 800f7fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f800:	b94b      	cbnz	r3, 800f816 <_raise_r+0x32>
 800f802:	4620      	mov	r0, r4
 800f804:	f000 f830 	bl	800f868 <_getpid_r>
 800f808:	462a      	mov	r2, r5
 800f80a:	4601      	mov	r1, r0
 800f80c:	4620      	mov	r0, r4
 800f80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f812:	f000 b817 	b.w	800f844 <_kill_r>
 800f816:	2b01      	cmp	r3, #1
 800f818:	d00a      	beq.n	800f830 <_raise_r+0x4c>
 800f81a:	1c59      	adds	r1, r3, #1
 800f81c:	d103      	bne.n	800f826 <_raise_r+0x42>
 800f81e:	2316      	movs	r3, #22
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	2001      	movs	r0, #1
 800f824:	e7e7      	b.n	800f7f6 <_raise_r+0x12>
 800f826:	2400      	movs	r4, #0
 800f828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f82c:	4628      	mov	r0, r5
 800f82e:	4798      	blx	r3
 800f830:	2000      	movs	r0, #0
 800f832:	e7e0      	b.n	800f7f6 <_raise_r+0x12>

0800f834 <raise>:
 800f834:	4b02      	ldr	r3, [pc, #8]	; (800f840 <raise+0xc>)
 800f836:	4601      	mov	r1, r0
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	f7ff bfd3 	b.w	800f7e4 <_raise_r>
 800f83e:	bf00      	nop
 800f840:	20000014 	.word	0x20000014

0800f844 <_kill_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d07      	ldr	r5, [pc, #28]	; (800f864 <_kill_r+0x20>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	4611      	mov	r1, r2
 800f850:	602b      	str	r3, [r5, #0]
 800f852:	f7f0 ffc3 	bl	80007dc <_kill>
 800f856:	1c43      	adds	r3, r0, #1
 800f858:	d102      	bne.n	800f860 <_kill_r+0x1c>
 800f85a:	682b      	ldr	r3, [r5, #0]
 800f85c:	b103      	cbz	r3, 800f860 <_kill_r+0x1c>
 800f85e:	6023      	str	r3, [r4, #0]
 800f860:	bd38      	pop	{r3, r4, r5, pc}
 800f862:	bf00      	nop
 800f864:	20008ea8 	.word	0x20008ea8

0800f868 <_getpid_r>:
 800f868:	f7f0 bfb0 	b.w	80007cc <_getpid>

0800f86c <_fstat_r>:
 800f86c:	b538      	push	{r3, r4, r5, lr}
 800f86e:	4d07      	ldr	r5, [pc, #28]	; (800f88c <_fstat_r+0x20>)
 800f870:	2300      	movs	r3, #0
 800f872:	4604      	mov	r4, r0
 800f874:	4608      	mov	r0, r1
 800f876:	4611      	mov	r1, r2
 800f878:	602b      	str	r3, [r5, #0]
 800f87a:	f7f1 f810 	bl	800089e <_fstat>
 800f87e:	1c43      	adds	r3, r0, #1
 800f880:	d102      	bne.n	800f888 <_fstat_r+0x1c>
 800f882:	682b      	ldr	r3, [r5, #0]
 800f884:	b103      	cbz	r3, 800f888 <_fstat_r+0x1c>
 800f886:	6023      	str	r3, [r4, #0]
 800f888:	bd38      	pop	{r3, r4, r5, pc}
 800f88a:	bf00      	nop
 800f88c:	20008ea8 	.word	0x20008ea8

0800f890 <_isatty_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d06      	ldr	r5, [pc, #24]	; (800f8ac <_isatty_r+0x1c>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	602b      	str	r3, [r5, #0]
 800f89c:	f7f1 f80f 	bl	80008be <_isatty>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d102      	bne.n	800f8aa <_isatty_r+0x1a>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	b103      	cbz	r3, 800f8aa <_isatty_r+0x1a>
 800f8a8:	6023      	str	r3, [r4, #0]
 800f8aa:	bd38      	pop	{r3, r4, r5, pc}
 800f8ac:	20008ea8 	.word	0x20008ea8

0800f8b0 <_init>:
 800f8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b2:	bf00      	nop
 800f8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8b6:	bc08      	pop	{r3}
 800f8b8:	469e      	mov	lr, r3
 800f8ba:	4770      	bx	lr

0800f8bc <_fini>:
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	bf00      	nop
 800f8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c2:	bc08      	pop	{r3}
 800f8c4:	469e      	mov	lr, r3
 800f8c6:	4770      	bx	lr
