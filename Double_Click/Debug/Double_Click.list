
Double_Click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003044  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003274  08003274  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800327c  0800327c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000d0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fce3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002075  00000000  00000000  0002fd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00031e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc0  00000000  00000000  00032a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e3e  00000000  00000000  00033638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd04  00000000  00000000  00055476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc502  00000000  00000000  0006317a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f67c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a88  00000000  00000000  0012f6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031b4 	.word	0x080031b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080031b4 	.word	0x080031b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d013      	beq.n	8000500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	e000      	b.n	80004ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	b29a      	uxth	r2, r3
 8000520:	2332      	movs	r3, #50	; 0x32
 8000522:	68b9      	ldr	r1, [r7, #8]
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <_write+0x48>)
 8000526:	f001 fe84 	bl	8002232 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	e009      	b.n	8000544 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc1 	bl	80004c0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf1      	blt.n	8000530 <_write+0x20>
	}
	return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000a4 	.word	0x200000a4

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hMenuButton.buttonFlag.data = RESET; //Flag reset
 8000560:	4b44      	ldr	r3, [pc, #272]	; (8000674 <main+0x118>)
 8000562:	2200      	movs	r2, #0
 8000564:	719a      	strb	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fbc7 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f88d 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f91f 	bl	80007b0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000572:	f000 f8f3 	bl	800075c <MX_USART6_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(hMenuButton.buttonFlag.bit.B0)
 8000576:	4b3f      	ldr	r3, [pc, #252]	; (8000674 <main+0x118>)
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d01d      	beq.n	80005c0 <main+0x64>
		  {
			  if(MenuButton_Debounce())											//Apply de-bounce algorithm before taking any action
 8000584:	f000 f972 	bl	800086c <MenuButton_Debounce>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d018      	beq.n	80005c0 <main+0x64>
			  {
				  hMenuButton.buttonFlag.bit.B0 = RESET;						//Reset interrupt flag
 800058e:	4a39      	ldr	r2, [pc, #228]	; (8000674 <main+0x118>)
 8000590:	7993      	ldrb	r3, [r2, #6]
 8000592:	f36f 0300 	bfc	r3, #0, #1
 8000596:	7193      	strb	r3, [r2, #6]

				  if(hMenuButton.buttonTimerEnable != SET)						//Start timer when the menu button gets pressed for the first time
 8000598:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x118>)
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	f083 0301 	eor.w	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d009      	beq.n	80005ba <main+0x5e>
				  {
					  hMenuButton.buttonTimerEnable = SET;						//Enable software timer
 80005a6:	4b33      	ldr	r3, [pc, #204]	; (8000674 <main+0x118>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	711a      	strb	r2, [r3, #4]
					  hMenuButton.buttonStatus = MenuButtonStatus_oneClick;		//The menu button has been pressed for one time
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <main+0x118>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	715a      	strb	r2, [r3, #5]
					  setTimer(&hMenuButton.buttonTimer);						//Start software timer
 80005b2:	4830      	ldr	r0, [pc, #192]	; (8000674 <main+0x118>)
 80005b4:	f000 f990 	bl	80008d8 <setTimer>
 80005b8:	e002      	b.n	80005c0 <main+0x64>
				  }
				  else
				  {
					  hMenuButton.buttonStatus = MenuButtonStatus_doubleClick;	//If the timer is already started this means that the button is pressed for the second time
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <main+0x118>)
 80005bc:	2201      	movs	r2, #1
 80005be:	715a      	strb	r2, [r3, #5]
				  }
			  }
		  }
		  if((checkTimer(&hMenuButton.buttonTimer, 5 * hMenuButton.buttonHeldPressedCounter)) && ( hMenuButton.buttonStatus == MenuButtonStatus_oneClick))
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0x118>)
 80005c2:	79db      	ldrb	r3, [r3, #7]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	4619      	mov	r1, r3
 80005ce:	4829      	ldr	r0, [pc, #164]	; (8000674 <main+0x118>)
 80005d0:	f000 f98f 	bl	80008f2 <checkTimer>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d01a      	beq.n	8000610 <main+0xb4>
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <main+0x118>)
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d116      	bne.n	8000610 <main+0xb4>
		  {																		//If the menu button has been pressed, take logic sample every 10 ms from the button read pin
			  if(!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))		//To check if the button is still pressed
 80005e2:	2110      	movs	r1, #16
 80005e4:	4824      	ldr	r0, [pc, #144]	; (8000678 <main+0x11c>)
 80005e6:	f000 fe47 	bl	8001278 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d105      	bne.n	80005fc <main+0xa0>
			  {
				  ++hMenuButton.buttonHeldPressedCounter;						//Increment samples number
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <main+0x118>)
 80005f2:	79db      	ldrb	r3, [r3, #7]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <main+0x118>)
 80005fa:	71da      	strb	r2, [r3, #7]
			  }
			  hMenuButton.buttonStatus = (hMenuButton.buttonHeldPressedCounter >= 65)  ? MenuButtonStatus_heldPressed : hMenuButton.buttonStatus;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <main+0x118>)
 80005fe:	79db      	ldrb	r3, [r3, #7]
 8000600:	2b40      	cmp	r3, #64	; 0x40
 8000602:	d802      	bhi.n	800060a <main+0xae>
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <main+0x118>)
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	e000      	b.n	800060c <main+0xb0>
 800060a:	2302      	movs	r3, #2
 800060c:	4a19      	ldr	r2, [pc, #100]	; (8000674 <main+0x118>)
 800060e:	7153      	strb	r3, [r2, #5]
		  }																		//If the button is held pressed change button status
		  if((checkTimer(&hMenuButton.buttonTimer, 350)) && hMenuButton.buttonTimerEnable)
 8000610:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000614:	4817      	ldr	r0, [pc, #92]	; (8000674 <main+0x118>)
 8000616:	f000 f96c 	bl	80008f2 <checkTimer>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0aa      	beq.n	8000576 <main+0x1a>
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <main+0x118>)
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0a6      	beq.n	8000576 <main+0x1a>
		  {																		//Take decision after 300 ms whether one click, double click or held pressed event has occured
			  switch(hMenuButton.buttonStatus)
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x118>)
 800062a:	795b      	ldrb	r3, [r3, #5]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d817      	bhi.n	8000660 <main+0x104>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <main+0xdc>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000649 	.word	0x08000649
 800063c:	08000651 	.word	0x08000651
 8000640:	08000659 	.word	0x08000659
 8000644:	08000661 	.word	0x08000661
			  {
			  	  case	MenuButtonStatus_oneClick:
			  		printf("oneClick \r\n");
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <main+0x120>)
 800064a:	f002 f95b 	bl	8002904 <puts>
			  		  break;
 800064e:	e007      	b.n	8000660 <main+0x104>
			  	  case 	MenuButtonStatus_doubleClick:
			  		printf("doubleClick \r\n");
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <main+0x124>)
 8000652:	f002 f957 	bl	8002904 <puts>
			  		 break;
 8000656:	e003      	b.n	8000660 <main+0x104>
			  	  case MenuButtonStatus_heldPressed:
			  		printf("heldPressed \r\n");
 8000658:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x128>)
 800065a:	f002 f953 	bl	8002904 <puts>
			  		 break;
 800065e:	bf00      	nop
			  	case MenuButtonStatus_notPressed:
			  		 break;

			  }
			  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <main+0x118>)
 8000662:	2200      	movs	r2, #0
 8000664:	711a      	strb	r2, [r3, #4]
			  hMenuButton.buttonHeldPressedCounter 	= RESET;					//Reset counter
 8000666:	4b03      	ldr	r3, [pc, #12]	; (8000674 <main+0x118>)
 8000668:	2200      	movs	r2, #0
 800066a:	71da      	strb	r2, [r3, #7]
			  hMenuButton.buttonStatus 				= MenuButtonStatus_notPressed;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <main+0x118>)
 800066e:	2203      	movs	r2, #3
 8000670:	715a      	strb	r2, [r3, #5]
	  if(hMenuButton.buttonFlag.bit.B0)
 8000672:	e780      	b.n	8000576 <main+0x1a>
 8000674:	2000009c 	.word	0x2000009c
 8000678:	40020000 	.word	0x40020000
 800067c:	080031cc 	.word	0x080031cc
 8000680:	080031d8 	.word	0x080031d8
 8000684:	080031e8 	.word	0x080031e8

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f8be 	bl	8002818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fdef 	bl	80012f0 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f916 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f850 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f8ff 	bl	8000948 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART6_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART6_UART_Init+0x4c>)
 8000794:	f001 fd00 	bl	8002198 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f8d3 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000a4 	.word	0x200000a4
 80007ac:	40011400 	.word	0x40011400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a25      	ldr	r2, [pc, #148]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_GPIO_Init+0xb4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_GPIO_Init+0xb4>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_GPIO_Init+0xb4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : test_pin_Pin */
  GPIO_InitStruct.Pin = test_pin_Pin;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(test_pin_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_GPIO_Init+0xb8>)
 800082e:	f000 fb87 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : menu_button_Pin */
  GPIO_InitStruct.Pin = menu_button_Pin;
 8000832:	2310      	movs	r3, #16
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(menu_button_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_GPIO_Init+0xb8>)
 8000848:	f000 fb7a 	bl	8000f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	200a      	movs	r0, #10
 8000852:	f000 fb4b 	bl	8000eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000856:	200a      	movs	r0, #10
 8000858:	f000 fb64 	bl	8000f24 <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <MenuButton_Debounce>:

/* USER CODE BEGIN 4 */
uint8_t MenuButton_Debounce(void) //Menu Button debounce function
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint8_t 		ret = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
	static uint16_t Level = Restart_Level;
	if(!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))
 8000876:	2110      	movs	r1, #16
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MenuButton_Debounce+0x64>)
 800087a:	f000 fcfd 	bl	8001278 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d106      	bne.n	8000892 <MenuButton_Debounce+0x26>
	{
		++Level;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MenuButton_Debounce+0x68>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MenuButton_Debounce+0x68>)
 800088e:	801a      	strh	r2, [r3, #0]
 8000890:	e00e      	b.n	80008b0 <MenuButton_Debounce+0x44>
	}
	else
	{
		--Level;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MenuButton_Debounce+0x68>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	3b01      	subs	r3, #1
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MenuButton_Debounce+0x68>)
 800089c:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MenuButton_Debounce+0x68>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008a6:	d803      	bhi.n	80008b0 <MenuButton_Debounce+0x44>
		{
			Level = Restart_Level;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MenuButton_Debounce+0x68>)
 80008aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008ae:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= 4000)
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MenuButton_Debounce+0x68>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008b8:	d305      	bcc.n	80008c6 <MenuButton_Debounce+0x5a>
	{
		Level = Acceptance_Level;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MenuButton_Debounce+0x68>)
 80008bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008c0:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	71fb      	strb	r3, [r7, #7]
	}
	return ret;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40020000 	.word	0x40020000
 80008d4:	20000000 	.word	0x20000000

080008d8 <setTimer>:

void setTimer(uint32_t* timer)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 80008e0:	f000 fa40 	bl	8000d64 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <checkTimer>:
uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8000900:	f000 fa30 	bl	8000d64 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	bf34      	ite	cc
 8000912:	2301      	movcc	r3, #1
 8000914:	2300      	movcs	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]
	return ret;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 fa01 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40002000 	.word	0x40002000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12b      	bne.n	8000a1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fe:	23c0      	movs	r3, #192	; 0xc0
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1a:	f000 fa91 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40011400 	.word	0x40011400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020800 	.word	0x40020800

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	202d      	movs	r0, #45	; 0x2d
 8000a4a:	f000 fa4f 	bl	8000eec <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a4e:	202d      	movs	r0, #45	; 0x2d
 8000a50:	f000 fa68 	bl	8000f24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f8ac 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a80:	f001 f882 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa8>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xb0>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aba:	f001 f8bf 	bl	8001c3c <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ac6:	f001 f913 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	200000e8 	.word	0x200000e8
 8000ae4:	40002000 	.word	0x40002000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	hMenuButton.buttonFlag.bit.B0 = SET; //Flag bit0 is set for interrupt detection flag
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <EXTI4_IRQHandler+0x18>)
 8000b46:	7993      	ldrb	r3, [r2, #6]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	7193      	strb	r3, [r2, #6]
  /* USER CODE END EXTI4_IRQn 0 */

  HAL_GPIO_EXTI_IRQHandler(menu_button_Pin);
 8000b4e:	2010      	movs	r0, #16
 8000b50:	f000 fbaa 	bl	80012a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000009c 	.word	0x2000009c

08000b5c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b62:	f001 f935 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000e8 	.word	0x200000e8

08000b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
	}

return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f001 fdbe 	bl	80027c4 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000090 	.word	0x20000090
 8000c7c:	20000148 	.word	0x20000148

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f001 fd7d 	bl	80027d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc41 	bl	800055c <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce8:	08003284 	.word	0x08003284
  ldr r2, =_sbss
 8000cec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf0:	20000144 	.word	0x20000144

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f8d8 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f7ff fe84 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe12 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	20000130 	.word	0x20000130

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000130 	.word	0x20000130

08000d7c <__NVIC_SetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e16b      	b.n	8001234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 815a 	bne.w	800122e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d017      	beq.n	8001030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d123      	bne.n	8001084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	69b9      	ldr	r1, [r7, #24]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80b4 	beq.w	800122e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a5f      	ldr	r2, [pc, #380]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e2:	4a5b      	ldr	r2, [pc, #364]	; (8001250 <HAL_GPIO_Init+0x310>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_GPIO_Init+0x314>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a51      	ldr	r2, [pc, #324]	; (8001258 <HAL_GPIO_Init+0x318>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <HAL_GPIO_Init+0x31c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <HAL_GPIO_Init+0x320>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x21a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_GPIO_Init+0x324>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x216>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	; (8001268 <HAL_GPIO_Init+0x328>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x212>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_GPIO_Init+0x32c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x20e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x20a>
 8001146:	2307      	movs	r3, #7
 8001148:	e00e      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114a:	2308      	movs	r3, #8
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114e:	2306      	movs	r3, #6
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x310>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d4:	4a27      	ldr	r2, [pc, #156]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <HAL_GPIO_Init+0x334>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae90 	bls.w	8000f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f806 	bl	80012d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e264      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d075      	beq.n	80013fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	4ba3      	ldr	r3, [pc, #652]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d00c      	beq.n	8001334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4ba0      	ldr	r3, [pc, #640]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	2b08      	cmp	r3, #8
 8001324:	d112      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4b9d      	ldr	r3, [pc, #628]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b99      	ldr	r3, [pc, #612]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d05b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d157      	bne.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e23f      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x74>
 8001356:	4b91      	ldr	r3, [pc, #580]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a90      	ldr	r2, [pc, #576]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x98>
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a8a      	ldr	r2, [pc, #552]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001388:	4b84      	ldr	r3, [pc, #528]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a83      	ldr	r2, [pc, #524]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b81      	ldr	r3, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a80      	ldr	r2, [pc, #512]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcdc 	bl	8000d64 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fcd8 	bl	8000d64 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e204      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fcc8 	bl	8000d64 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fcc4 	bl	8000d64 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1f0      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b6c      	ldr	r3, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	2b08      	cmp	r3, #8
 800141c:	d11c      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1c4      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4952      	ldr	r1, [pc, #328]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	e03a      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_RCC_OscConfig+0x2b0>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fc7d 	bl	8000d64 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc79 	bl	8000d64 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1a5      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4940      	ldr	r1, [pc, #256]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_RCC_OscConfig+0x2b0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc5c 	bl	8000d64 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc58 	bl	8000d64 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e184      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d030      	beq.n	800153c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d016      	beq.n	8001510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x2b4>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fc3c 	bl	8000d64 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc38 	bl	8000d64 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e164      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x200>
 800150e:	e015      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_RCC_OscConfig+0x2b4>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fc25 	bl	8000d64 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fc21 	bl	8000d64 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e14d      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a0 	beq.w	800168a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_RCC_OscConfig+0x2ac>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d121      	bne.n	80015ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fbe7 	bl	8000d64 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e011      	b.n	80015be <HAL_RCC_OscConfig+0x2ce>
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	42470000 	.word	0x42470000
 80015a4:	42470e80 	.word	0x42470e80
 80015a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ac:	f7ff fbda 	bl	8000d64 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e106      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <HAL_RCC_OscConfig+0x4e4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	e01c      	b.n	800161a <HAL_RCC_OscConfig+0x32a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x312>
 80015e8:	4b7b      	ldr	r3, [pc, #492]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a7a      	ldr	r2, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
 80015f4:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a77      	ldr	r2, [pc, #476]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	e00b      	b.n	800161a <HAL_RCC_OscConfig+0x32a>
 8001602:	4b75      	ldr	r3, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a74      	ldr	r2, [pc, #464]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a71      	ldr	r2, [pc, #452]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d015      	beq.n	800164e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fb9f 	bl	8000d64 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb9b 	bl	8000d64 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0c5      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ee      	beq.n	800162a <HAL_RCC_OscConfig+0x33a>
 800164c:	e014      	b.n	8001678 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fb89 	bl	8000d64 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fb85 	bl	8000d64 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0af      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ee      	bne.n	8001656 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d105      	bne.n	800168a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167e:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 809b 	beq.w	80017ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d05c      	beq.n	800175a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d141      	bne.n	800172c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb59 	bl	8000d64 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb55 	bl	8000d64 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e081      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69da      	ldr	r2, [r3, #28]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	019b      	lsls	r3, r3, #6
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	061b      	lsls	r3, r3, #24
 80016f8:	4937      	ldr	r1, [pc, #220]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x4ec>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb2e 	bl	8000d64 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb2a 	bl	8000d64 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e056      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x41c>
 800172a:	e04e      	b.n	80017ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x4ec>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fb17 	bl	8000d64 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fb13 	bl	8000d64 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e03f      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x44a>
 8001758:	e037      	b.n	80017ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e032      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_RCC_OscConfig+0x4e8>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d028      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d121      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d11a      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179e:	4293      	cmp	r3, r2
 80017a0:	d111      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40007000 	.word	0x40007000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	42470060 	.word	0x42470060

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0cc      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d90c      	bls.n	800181c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b8      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001834:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800183e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	494d      	ldr	r1, [pc, #308]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d044      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d119      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e07f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d003      	beq.n	800189e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	2b03      	cmp	r3, #3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e067      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4934      	ldr	r1, [pc, #208]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff fa48 	bl	8000d64 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff fa44 	bl	8000d64 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e04f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20c      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e032      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4916      	ldr	r1, [pc, #88]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001966:	f000 f821 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	490a      	ldr	r1, [pc, #40]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f854 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	080031f8 	.word	0x080031f8
 80019a4:	20000004 	.word	0x20000004
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c4:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d00d      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x40>
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	f200 80bd 	bhi.w	8001b50 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x34>
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019de:	e0b7      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019e2:	60bb      	str	r3, [r7, #8]
       break;
 80019e4:	e0b7      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e6:	4b61      	ldr	r3, [pc, #388]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019e8:	60bb      	str	r3, [r7, #8]
      break;
 80019ea:	e0b4      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ec:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d04d      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	ea02 0800 	and.w	r8, r2, r0
 8001a1a:	ea03 0901 	and.w	r9, r3, r1
 8001a1e:	4640      	mov	r0, r8
 8001a20:	4649      	mov	r1, r9
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	014b      	lsls	r3, r1, #5
 8001a2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a30:	0142      	lsls	r2, r0, #5
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	ebb0 0008 	subs.w	r0, r0, r8
 8001a3a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	018b      	lsls	r3, r1, #6
 8001a48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a4c:	0182      	lsls	r2, r0, #6
 8001a4e:	1a12      	subs	r2, r2, r0
 8001a50:	eb63 0301 	sbc.w	r3, r3, r1
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	00d9      	lsls	r1, r3, #3
 8001a5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a62:	00d0      	lsls	r0, r2, #3
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	eb12 0208 	adds.w	r2, r2, r8
 8001a6c:	eb43 0309 	adc.w	r3, r3, r9
 8001a70:	f04f 0000 	mov.w	r0, #0
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	0259      	lsls	r1, r3, #9
 8001a7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a7e:	0250      	lsls	r0, r2, #9
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	f7fe fb9a 	bl	80001c8 <__aeabi_uldivmod>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e04a      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	ea02 0400 	and.w	r4, r2, r0
 8001ab6:	ea03 0501 	and.w	r5, r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	014b      	lsls	r3, r1, #5
 8001ac8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001acc:	0142      	lsls	r2, r0, #5
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	1b00      	subs	r0, r0, r4
 8001ad4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	018b      	lsls	r3, r1, #6
 8001ae2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ae6:	0182      	lsls	r2, r0, #6
 8001ae8:	1a12      	subs	r2, r2, r0
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	00d9      	lsls	r1, r3, #3
 8001af8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001afc:	00d0      	lsls	r0, r2, #3
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	1912      	adds	r2, r2, r4
 8001b04:	eb45 0303 	adc.w	r3, r5, r3
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0299      	lsls	r1, r3, #10
 8001b12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b16:	0290      	lsls	r0, r2, #10
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	f7fe fb4e 	bl	80001c8 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	60bb      	str	r3, [r7, #8]
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b52:	60bb      	str	r3, [r7, #8]
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	68bb      	ldr	r3, [r7, #8]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08003208 	.word	0x08003208

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08003208 	.word	0x08003208

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9d8 	bl	8002030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0202 	mvn.w	r2, #2
 8001dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ee 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8e0 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8f1 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8c4 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8b6 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8c7 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0208 	mvn.w	r2, #8
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f89a 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f88c 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f89d 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d122      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d11b      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0210 	mvn.w	r2, #16
 8001ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2208      	movs	r2, #8
 8001efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f870 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f862 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f873 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0201 	mvn.w	r2, #1
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fce8 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f902 	bl	8002184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f838 	bl	800201c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0220 	mvn.w	r2, #32
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8cc 	bl	8002170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <TIM_Base_SetConfig+0x114>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d00f      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <TIM_Base_SetConfig+0x118>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00b      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <TIM_Base_SetConfig+0x11c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <TIM_Base_SetConfig+0x120>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <TIM_Base_SetConfig+0x124>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d108      	bne.n	8002082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <TIM_Base_SetConfig+0x114>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d027      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <TIM_Base_SetConfig+0x118>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d023      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <TIM_Base_SetConfig+0x11c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <TIM_Base_SetConfig+0x120>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a29      	ldr	r2, [pc, #164]	; (8002154 <TIM_Base_SetConfig+0x124>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d017      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <TIM_Base_SetConfig+0x128>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <TIM_Base_SetConfig+0x12c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00f      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_Base_SetConfig+0x130>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <TIM_Base_SetConfig+0x134>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <TIM_Base_SetConfig+0x138>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d003      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a23      	ldr	r2, [pc, #140]	; (800216c <TIM_Base_SetConfig+0x13c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d108      	bne.n	80020f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <TIM_Base_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0xf8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d103      	bne.n	8002130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	615a      	str	r2, [r3, #20]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40010000 	.word	0x40010000
 8002148:	40000400 	.word	0x40000400
 800214c:	40000800 	.word	0x40000800
 8002150:	40000c00 	.word	0x40000c00
 8002154:	40010400 	.word	0x40010400
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	40001800 	.word	0x40001800
 8002168:	40001c00 	.word	0x40001c00
 800216c:	40002000 	.word	0x40002000

08002170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e03f      	b.n	800222a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fbf0 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f929 	bl	8002434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b08a      	sub	sp, #40	; 0x28
 8002236:	af02      	add	r7, sp, #8
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	d17c      	bne.n	800234c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_UART_Transmit+0x2c>
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e075      	b.n	800234e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_UART_Transmit+0x3e>
 800226c:	2302      	movs	r3, #2
 800226e:	e06e      	b.n	800234e <HAL_UART_Transmit+0x11c>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2221      	movs	r2, #33	; 0x21
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002286:	f7fe fd6d 	bl	8000d64 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a0:	d108      	bne.n	80022b4 <HAL_UART_Transmit+0x82>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e003      	b.n	80022bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022c4:	e02a      	b.n	800231c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f840 	bl	8002356 <UART_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e036      	b.n	800234e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3302      	adds	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e007      	b.n	800230e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3301      	adds	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1cf      	bne.n	80022c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	; 0x40
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f810 	bl	8002356 <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e006      	b.n	800234e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b090      	sub	sp, #64	; 0x40
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002366:	e050      	b.n	800240a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800236e:	d04c      	beq.n	800240a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <UART_WaitOnFlagUntilTimeout+0x30>
 8002376:	f7fe fcf5 	bl	8000d64 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002382:	429a      	cmp	r2, r3
 8002384:	d241      	bcs.n	800240a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	e853 3f00 	ldrex	r3, [r3]
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a6:	637a      	str	r2, [r7, #52]	; 0x34
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ae:	e841 2300 	strex	r3, r2, [r1]
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1e5      	bne.n	8002386 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3314      	adds	r3, #20
 80023c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	e853 3f00 	ldrex	r3, [r3]
 80023c8:	613b      	str	r3, [r7, #16]
   return(result);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3314      	adds	r3, #20
 80023d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023da:	623a      	str	r2, [r7, #32]
 80023dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023de:	69f9      	ldr	r1, [r7, #28]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	e841 2300 	strex	r3, r2, [r1]
 80023e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1e5      	bne.n	80023ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e00f      	b.n	800242a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4013      	ands	r3, r2
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	429a      	cmp	r2, r3
 8002426:	d09f      	beq.n	8002368 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3740      	adds	r7, #64	; 0x40
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002438:	b09f      	sub	sp, #124	; 0x7c
 800243a:	af00      	add	r7, sp, #0
 800243c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244a:	68d9      	ldr	r1, [r3, #12]
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	ea40 0301 	orr.w	r3, r0, r1
 8002454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	431a      	orrs	r2, r3
 8002460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	431a      	orrs	r2, r3
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4313      	orrs	r3, r2
 800246c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002478:	f021 010c 	bic.w	r1, r1, #12
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002482:	430b      	orrs	r3, r1
 8002484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	6999      	ldr	r1, [r3, #24]
 8002494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	ea40 0301 	orr.w	r3, r0, r1
 800249c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4bc5      	ldr	r3, [pc, #788]	; (80027b8 <UART_SetConfig+0x384>)
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d004      	beq.n	80024b2 <UART_SetConfig+0x7e>
 80024a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4bc3      	ldr	r3, [pc, #780]	; (80027bc <UART_SetConfig+0x388>)
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d103      	bne.n	80024ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024b2:	f7ff fb7d 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 80024b6:	6778      	str	r0, [r7, #116]	; 0x74
 80024b8:	e002      	b.n	80024c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ba:	f7ff fb65 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 80024be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c8:	f040 80b6 	bne.w	8002638 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ce:	461c      	mov	r4, r3
 80024d0:	f04f 0500 	mov.w	r5, #0
 80024d4:	4622      	mov	r2, r4
 80024d6:	462b      	mov	r3, r5
 80024d8:	1891      	adds	r1, r2, r2
 80024da:	6439      	str	r1, [r7, #64]	; 0x40
 80024dc:	415b      	adcs	r3, r3
 80024de:	647b      	str	r3, [r7, #68]	; 0x44
 80024e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024e4:	1912      	adds	r2, r2, r4
 80024e6:	eb45 0303 	adc.w	r3, r5, r3
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	00d9      	lsls	r1, r3, #3
 80024f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024f8:	00d0      	lsls	r0, r2, #3
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	1911      	adds	r1, r2, r4
 8002500:	6639      	str	r1, [r7, #96]	; 0x60
 8002502:	416b      	adcs	r3, r5
 8002504:	667b      	str	r3, [r7, #100]	; 0x64
 8002506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	1891      	adds	r1, r2, r2
 8002512:	63b9      	str	r1, [r7, #56]	; 0x38
 8002514:	415b      	adcs	r3, r3
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800251c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002520:	f7fd fe52 	bl	80001c8 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4ba5      	ldr	r3, [pc, #660]	; (80027c0 <UART_SetConfig+0x38c>)
 800252a:	fba3 2302 	umull	r2, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	011e      	lsls	r6, r3, #4
 8002532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002534:	461c      	mov	r4, r3
 8002536:	f04f 0500 	mov.w	r5, #0
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	1891      	adds	r1, r2, r2
 8002540:	6339      	str	r1, [r7, #48]	; 0x30
 8002542:	415b      	adcs	r3, r3
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800254a:	1912      	adds	r2, r2, r4
 800254c:	eb45 0303 	adc.w	r3, r5, r3
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	00d9      	lsls	r1, r3, #3
 800255a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800255e:	00d0      	lsls	r0, r2, #3
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	1911      	adds	r1, r2, r4
 8002566:	65b9      	str	r1, [r7, #88]	; 0x58
 8002568:	416b      	adcs	r3, r5
 800256a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	461a      	mov	r2, r3
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	1891      	adds	r1, r2, r2
 8002578:	62b9      	str	r1, [r7, #40]	; 0x28
 800257a:	415b      	adcs	r3, r3
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002582:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002586:	f7fd fe1f 	bl	80001c8 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4b8c      	ldr	r3, [pc, #560]	; (80027c0 <UART_SetConfig+0x38c>)
 8002590:	fba3 1302 	umull	r1, r3, r3, r2
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	2164      	movs	r1, #100	; 0x64
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	3332      	adds	r3, #50	; 0x32
 80025a2:	4a87      	ldr	r2, [pc, #540]	; (80027c0 <UART_SetConfig+0x38c>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025b0:	441e      	add	r6, r3
 80025b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b4:	4618      	mov	r0, r3
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	1894      	adds	r4, r2, r2
 80025c0:	623c      	str	r4, [r7, #32]
 80025c2:	415b      	adcs	r3, r3
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ca:	1812      	adds	r2, r2, r0
 80025cc:	eb41 0303 	adc.w	r3, r1, r3
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	f04f 0500 	mov.w	r5, #0
 80025d8:	00dd      	lsls	r5, r3, #3
 80025da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025de:	00d4      	lsls	r4, r2, #3
 80025e0:	4622      	mov	r2, r4
 80025e2:	462b      	mov	r3, r5
 80025e4:	1814      	adds	r4, r2, r0
 80025e6:	653c      	str	r4, [r7, #80]	; 0x50
 80025e8:	414b      	adcs	r3, r1
 80025ea:	657b      	str	r3, [r7, #84]	; 0x54
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	1891      	adds	r1, r2, r2
 80025f8:	61b9      	str	r1, [r7, #24]
 80025fa:	415b      	adcs	r3, r3
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002602:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002606:	f7fd fddf 	bl	80001c8 <__aeabi_uldivmod>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <UART_SetConfig+0x38c>)
 8002610:	fba3 1302 	umull	r1, r3, r3, r2
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	2164      	movs	r1, #100	; 0x64
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	3332      	adds	r3, #50	; 0x32
 8002622:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <UART_SetConfig+0x38c>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	f003 0207 	and.w	r2, r3, #7
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4432      	add	r2, r6
 8002634:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002636:	e0b9      	b.n	80027ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263a:	461c      	mov	r4, r3
 800263c:	f04f 0500 	mov.w	r5, #0
 8002640:	4622      	mov	r2, r4
 8002642:	462b      	mov	r3, r5
 8002644:	1891      	adds	r1, r2, r2
 8002646:	6139      	str	r1, [r7, #16]
 8002648:	415b      	adcs	r3, r3
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002650:	1912      	adds	r2, r2, r4
 8002652:	eb45 0303 	adc.w	r3, r5, r3
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	00d9      	lsls	r1, r3, #3
 8002660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002664:	00d0      	lsls	r0, r2, #3
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	eb12 0804 	adds.w	r8, r2, r4
 800266e:	eb43 0905 	adc.w	r9, r3, r5
 8002672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4618      	mov	r0, r3
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	008b      	lsls	r3, r1, #2
 8002686:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800268a:	0082      	lsls	r2, r0, #2
 800268c:	4640      	mov	r0, r8
 800268e:	4649      	mov	r1, r9
 8002690:	f7fd fd9a 	bl	80001c8 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <UART_SetConfig+0x38c>)
 800269a:	fba3 2302 	umull	r2, r3, r3, r2
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	011e      	lsls	r6, r3, #4
 80026a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a4:	4618      	mov	r0, r3
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	1894      	adds	r4, r2, r2
 80026b0:	60bc      	str	r4, [r7, #8]
 80026b2:	415b      	adcs	r3, r3
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ba:	1812      	adds	r2, r2, r0
 80026bc:	eb41 0303 	adc.w	r3, r1, r3
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	f04f 0500 	mov.w	r5, #0
 80026c8:	00dd      	lsls	r5, r3, #3
 80026ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026ce:	00d4      	lsls	r4, r2, #3
 80026d0:	4622      	mov	r2, r4
 80026d2:	462b      	mov	r3, r5
 80026d4:	1814      	adds	r4, r2, r0
 80026d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80026d8:	414b      	adcs	r3, r1
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	008b      	lsls	r3, r1, #2
 80026f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026f4:	0082      	lsls	r2, r0, #2
 80026f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026fa:	f7fd fd65 	bl	80001c8 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <UART_SetConfig+0x38c>)
 8002704:	fba3 1302 	umull	r1, r3, r3, r2
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	2164      	movs	r1, #100	; 0x64
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	3332      	adds	r3, #50	; 0x32
 8002716:	4a2a      	ldr	r2, [pc, #168]	; (80027c0 <UART_SetConfig+0x38c>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002722:	441e      	add	r6, r3
 8002724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002726:	4618      	mov	r0, r3
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	1894      	adds	r4, r2, r2
 8002732:	603c      	str	r4, [r7, #0]
 8002734:	415b      	adcs	r3, r3
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800273c:	1812      	adds	r2, r2, r0
 800273e:	eb41 0303 	adc.w	r3, r1, r3
 8002742:	f04f 0400 	mov.w	r4, #0
 8002746:	f04f 0500 	mov.w	r5, #0
 800274a:	00dd      	lsls	r5, r3, #3
 800274c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002750:	00d4      	lsls	r4, r2, #3
 8002752:	4622      	mov	r2, r4
 8002754:	462b      	mov	r3, r5
 8002756:	eb12 0a00 	adds.w	sl, r2, r0
 800275a:	eb43 0b01 	adc.w	fp, r3, r1
 800275e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	008b      	lsls	r3, r1, #2
 8002772:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002776:	0082      	lsls	r2, r0, #2
 8002778:	4650      	mov	r0, sl
 800277a:	4659      	mov	r1, fp
 800277c:	f7fd fd24 	bl	80001c8 <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <UART_SetConfig+0x38c>)
 8002786:	fba3 1302 	umull	r1, r3, r3, r2
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2164      	movs	r1, #100	; 0x64
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <UART_SetConfig+0x38c>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4432      	add	r2, r6
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	377c      	adds	r7, #124	; 0x7c
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b6:	bf00      	nop
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40011400 	.word	0x40011400
 80027c0:	51eb851f 	.word	0x51eb851f

080027c4 <__errno>:
 80027c4:	4b01      	ldr	r3, [pc, #4]	; (80027cc <__errno+0x8>)
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000010 	.word	0x20000010

080027d0 <__libc_init_array>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4d0d      	ldr	r5, [pc, #52]	; (8002808 <__libc_init_array+0x38>)
 80027d4:	4c0d      	ldr	r4, [pc, #52]	; (800280c <__libc_init_array+0x3c>)
 80027d6:	1b64      	subs	r4, r4, r5
 80027d8:	10a4      	asrs	r4, r4, #2
 80027da:	2600      	movs	r6, #0
 80027dc:	42a6      	cmp	r6, r4
 80027de:	d109      	bne.n	80027f4 <__libc_init_array+0x24>
 80027e0:	4d0b      	ldr	r5, [pc, #44]	; (8002810 <__libc_init_array+0x40>)
 80027e2:	4c0c      	ldr	r4, [pc, #48]	; (8002814 <__libc_init_array+0x44>)
 80027e4:	f000 fce6 	bl	80031b4 <_init>
 80027e8:	1b64      	subs	r4, r4, r5
 80027ea:	10a4      	asrs	r4, r4, #2
 80027ec:	2600      	movs	r6, #0
 80027ee:	42a6      	cmp	r6, r4
 80027f0:	d105      	bne.n	80027fe <__libc_init_array+0x2e>
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
 80027f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f8:	4798      	blx	r3
 80027fa:	3601      	adds	r6, #1
 80027fc:	e7ee      	b.n	80027dc <__libc_init_array+0xc>
 80027fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002802:	4798      	blx	r3
 8002804:	3601      	adds	r6, #1
 8002806:	e7f2      	b.n	80027ee <__libc_init_array+0x1e>
 8002808:	0800327c 	.word	0x0800327c
 800280c:	0800327c 	.word	0x0800327c
 8002810:	0800327c 	.word	0x0800327c
 8002814:	08003280 	.word	0x08003280

08002818 <memset>:
 8002818:	4402      	add	r2, r0
 800281a:	4603      	mov	r3, r0
 800281c:	4293      	cmp	r3, r2
 800281e:	d100      	bne.n	8002822 <memset+0xa>
 8002820:	4770      	bx	lr
 8002822:	f803 1b01 	strb.w	r1, [r3], #1
 8002826:	e7f9      	b.n	800281c <memset+0x4>

08002828 <_puts_r>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	460e      	mov	r6, r1
 800282c:	4605      	mov	r5, r0
 800282e:	b118      	cbz	r0, 8002838 <_puts_r+0x10>
 8002830:	6983      	ldr	r3, [r0, #24]
 8002832:	b90b      	cbnz	r3, 8002838 <_puts_r+0x10>
 8002834:	f000 fa48 	bl	8002cc8 <__sinit>
 8002838:	69ab      	ldr	r3, [r5, #24]
 800283a:	68ac      	ldr	r4, [r5, #8]
 800283c:	b913      	cbnz	r3, 8002844 <_puts_r+0x1c>
 800283e:	4628      	mov	r0, r5
 8002840:	f000 fa42 	bl	8002cc8 <__sinit>
 8002844:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <_puts_r+0xd0>)
 8002846:	429c      	cmp	r4, r3
 8002848:	d120      	bne.n	800288c <_puts_r+0x64>
 800284a:	686c      	ldr	r4, [r5, #4]
 800284c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800284e:	07db      	lsls	r3, r3, #31
 8002850:	d405      	bmi.n	800285e <_puts_r+0x36>
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	0598      	lsls	r0, r3, #22
 8002856:	d402      	bmi.n	800285e <_puts_r+0x36>
 8002858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800285a:	f000 fad3 	bl	8002e04 <__retarget_lock_acquire_recursive>
 800285e:	89a3      	ldrh	r3, [r4, #12]
 8002860:	0719      	lsls	r1, r3, #28
 8002862:	d51d      	bpl.n	80028a0 <_puts_r+0x78>
 8002864:	6923      	ldr	r3, [r4, #16]
 8002866:	b1db      	cbz	r3, 80028a0 <_puts_r+0x78>
 8002868:	3e01      	subs	r6, #1
 800286a:	68a3      	ldr	r3, [r4, #8]
 800286c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002870:	3b01      	subs	r3, #1
 8002872:	60a3      	str	r3, [r4, #8]
 8002874:	bb39      	cbnz	r1, 80028c6 <_puts_r+0x9e>
 8002876:	2b00      	cmp	r3, #0
 8002878:	da38      	bge.n	80028ec <_puts_r+0xc4>
 800287a:	4622      	mov	r2, r4
 800287c:	210a      	movs	r1, #10
 800287e:	4628      	mov	r0, r5
 8002880:	f000 f848 	bl	8002914 <__swbuf_r>
 8002884:	3001      	adds	r0, #1
 8002886:	d011      	beq.n	80028ac <_puts_r+0x84>
 8002888:	250a      	movs	r5, #10
 800288a:	e011      	b.n	80028b0 <_puts_r+0x88>
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <_puts_r+0xd4>)
 800288e:	429c      	cmp	r4, r3
 8002890:	d101      	bne.n	8002896 <_puts_r+0x6e>
 8002892:	68ac      	ldr	r4, [r5, #8]
 8002894:	e7da      	b.n	800284c <_puts_r+0x24>
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <_puts_r+0xd8>)
 8002898:	429c      	cmp	r4, r3
 800289a:	bf08      	it	eq
 800289c:	68ec      	ldreq	r4, [r5, #12]
 800289e:	e7d5      	b.n	800284c <_puts_r+0x24>
 80028a0:	4621      	mov	r1, r4
 80028a2:	4628      	mov	r0, r5
 80028a4:	f000 f888 	bl	80029b8 <__swsetup_r>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d0dd      	beq.n	8002868 <_puts_r+0x40>
 80028ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80028b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028b2:	07da      	lsls	r2, r3, #31
 80028b4:	d405      	bmi.n	80028c2 <_puts_r+0x9a>
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	059b      	lsls	r3, r3, #22
 80028ba:	d402      	bmi.n	80028c2 <_puts_r+0x9a>
 80028bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028be:	f000 faa2 	bl	8002e06 <__retarget_lock_release_recursive>
 80028c2:	4628      	mov	r0, r5
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da04      	bge.n	80028d4 <_puts_r+0xac>
 80028ca:	69a2      	ldr	r2, [r4, #24]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dc06      	bgt.n	80028de <_puts_r+0xb6>
 80028d0:	290a      	cmp	r1, #10
 80028d2:	d004      	beq.n	80028de <_puts_r+0xb6>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	6022      	str	r2, [r4, #0]
 80028da:	7019      	strb	r1, [r3, #0]
 80028dc:	e7c5      	b.n	800286a <_puts_r+0x42>
 80028de:	4622      	mov	r2, r4
 80028e0:	4628      	mov	r0, r5
 80028e2:	f000 f817 	bl	8002914 <__swbuf_r>
 80028e6:	3001      	adds	r0, #1
 80028e8:	d1bf      	bne.n	800286a <_puts_r+0x42>
 80028ea:	e7df      	b.n	80028ac <_puts_r+0x84>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	250a      	movs	r5, #10
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	6022      	str	r2, [r4, #0]
 80028f4:	701d      	strb	r5, [r3, #0]
 80028f6:	e7db      	b.n	80028b0 <_puts_r+0x88>
 80028f8:	08003234 	.word	0x08003234
 80028fc:	08003254 	.word	0x08003254
 8002900:	08003214 	.word	0x08003214

08002904 <puts>:
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <puts+0xc>)
 8002906:	4601      	mov	r1, r0
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f7ff bf8d 	b.w	8002828 <_puts_r>
 800290e:	bf00      	nop
 8002910:	20000010 	.word	0x20000010

08002914 <__swbuf_r>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	460e      	mov	r6, r1
 8002918:	4614      	mov	r4, r2
 800291a:	4605      	mov	r5, r0
 800291c:	b118      	cbz	r0, 8002926 <__swbuf_r+0x12>
 800291e:	6983      	ldr	r3, [r0, #24]
 8002920:	b90b      	cbnz	r3, 8002926 <__swbuf_r+0x12>
 8002922:	f000 f9d1 	bl	8002cc8 <__sinit>
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <__swbuf_r+0x98>)
 8002928:	429c      	cmp	r4, r3
 800292a:	d12b      	bne.n	8002984 <__swbuf_r+0x70>
 800292c:	686c      	ldr	r4, [r5, #4]
 800292e:	69a3      	ldr	r3, [r4, #24]
 8002930:	60a3      	str	r3, [r4, #8]
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	071a      	lsls	r2, r3, #28
 8002936:	d52f      	bpl.n	8002998 <__swbuf_r+0x84>
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	b36b      	cbz	r3, 8002998 <__swbuf_r+0x84>
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	1ac0      	subs	r0, r0, r3
 8002942:	6963      	ldr	r3, [r4, #20]
 8002944:	b2f6      	uxtb	r6, r6
 8002946:	4283      	cmp	r3, r0
 8002948:	4637      	mov	r7, r6
 800294a:	dc04      	bgt.n	8002956 <__swbuf_r+0x42>
 800294c:	4621      	mov	r1, r4
 800294e:	4628      	mov	r0, r5
 8002950:	f000 f926 	bl	8002ba0 <_fflush_r>
 8002954:	bb30      	cbnz	r0, 80029a4 <__swbuf_r+0x90>
 8002956:	68a3      	ldr	r3, [r4, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60a3      	str	r3, [r4, #8]
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	6022      	str	r2, [r4, #0]
 8002962:	701e      	strb	r6, [r3, #0]
 8002964:	6963      	ldr	r3, [r4, #20]
 8002966:	3001      	adds	r0, #1
 8002968:	4283      	cmp	r3, r0
 800296a:	d004      	beq.n	8002976 <__swbuf_r+0x62>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	07db      	lsls	r3, r3, #31
 8002970:	d506      	bpl.n	8002980 <__swbuf_r+0x6c>
 8002972:	2e0a      	cmp	r6, #10
 8002974:	d104      	bne.n	8002980 <__swbuf_r+0x6c>
 8002976:	4621      	mov	r1, r4
 8002978:	4628      	mov	r0, r5
 800297a:	f000 f911 	bl	8002ba0 <_fflush_r>
 800297e:	b988      	cbnz	r0, 80029a4 <__swbuf_r+0x90>
 8002980:	4638      	mov	r0, r7
 8002982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <__swbuf_r+0x9c>)
 8002986:	429c      	cmp	r4, r3
 8002988:	d101      	bne.n	800298e <__swbuf_r+0x7a>
 800298a:	68ac      	ldr	r4, [r5, #8]
 800298c:	e7cf      	b.n	800292e <__swbuf_r+0x1a>
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <__swbuf_r+0xa0>)
 8002990:	429c      	cmp	r4, r3
 8002992:	bf08      	it	eq
 8002994:	68ec      	ldreq	r4, [r5, #12]
 8002996:	e7ca      	b.n	800292e <__swbuf_r+0x1a>
 8002998:	4621      	mov	r1, r4
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f80c 	bl	80029b8 <__swsetup_r>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d0cb      	beq.n	800293c <__swbuf_r+0x28>
 80029a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80029a8:	e7ea      	b.n	8002980 <__swbuf_r+0x6c>
 80029aa:	bf00      	nop
 80029ac:	08003234 	.word	0x08003234
 80029b0:	08003254 	.word	0x08003254
 80029b4:	08003214 	.word	0x08003214

080029b8 <__swsetup_r>:
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <__swsetup_r+0xcc>)
 80029ba:	b570      	push	{r4, r5, r6, lr}
 80029bc:	681d      	ldr	r5, [r3, #0]
 80029be:	4606      	mov	r6, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	b125      	cbz	r5, 80029ce <__swsetup_r+0x16>
 80029c4:	69ab      	ldr	r3, [r5, #24]
 80029c6:	b913      	cbnz	r3, 80029ce <__swsetup_r+0x16>
 80029c8:	4628      	mov	r0, r5
 80029ca:	f000 f97d 	bl	8002cc8 <__sinit>
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <__swsetup_r+0xd0>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d10f      	bne.n	80029f4 <__swsetup_r+0x3c>
 80029d4:	686c      	ldr	r4, [r5, #4]
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029dc:	0719      	lsls	r1, r3, #28
 80029de:	d42c      	bmi.n	8002a3a <__swsetup_r+0x82>
 80029e0:	06dd      	lsls	r5, r3, #27
 80029e2:	d411      	bmi.n	8002a08 <__swsetup_r+0x50>
 80029e4:	2309      	movs	r3, #9
 80029e6:	6033      	str	r3, [r6, #0]
 80029e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029ec:	81a3      	strh	r3, [r4, #12]
 80029ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f2:	e03e      	b.n	8002a72 <__swsetup_r+0xba>
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <__swsetup_r+0xd4>)
 80029f6:	429c      	cmp	r4, r3
 80029f8:	d101      	bne.n	80029fe <__swsetup_r+0x46>
 80029fa:	68ac      	ldr	r4, [r5, #8]
 80029fc:	e7eb      	b.n	80029d6 <__swsetup_r+0x1e>
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <__swsetup_r+0xd8>)
 8002a00:	429c      	cmp	r4, r3
 8002a02:	bf08      	it	eq
 8002a04:	68ec      	ldreq	r4, [r5, #12]
 8002a06:	e7e6      	b.n	80029d6 <__swsetup_r+0x1e>
 8002a08:	0758      	lsls	r0, r3, #29
 8002a0a:	d512      	bpl.n	8002a32 <__swsetup_r+0x7a>
 8002a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a0e:	b141      	cbz	r1, 8002a22 <__swsetup_r+0x6a>
 8002a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a14:	4299      	cmp	r1, r3
 8002a16:	d002      	beq.n	8002a1e <__swsetup_r+0x66>
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 fa59 	bl	8002ed0 <_free_r>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	6363      	str	r3, [r4, #52]	; 0x34
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a28:	81a3      	strh	r3, [r4, #12]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	6923      	ldr	r3, [r4, #16]
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	81a3      	strh	r3, [r4, #12]
 8002a3a:	6923      	ldr	r3, [r4, #16]
 8002a3c:	b94b      	cbnz	r3, 8002a52 <__swsetup_r+0x9a>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d003      	beq.n	8002a52 <__swsetup_r+0x9a>
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f000 f9ff 	bl	8002e50 <__smakebuf_r>
 8002a52:	89a0      	ldrh	r0, [r4, #12]
 8002a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a58:	f010 0301 	ands.w	r3, r0, #1
 8002a5c:	d00a      	beq.n	8002a74 <__swsetup_r+0xbc>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60a3      	str	r3, [r4, #8]
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	425b      	negs	r3, r3
 8002a66:	61a3      	str	r3, [r4, #24]
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	b943      	cbnz	r3, 8002a7e <__swsetup_r+0xc6>
 8002a6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a70:	d1ba      	bne.n	80029e8 <__swsetup_r+0x30>
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	0781      	lsls	r1, r0, #30
 8002a76:	bf58      	it	pl
 8002a78:	6963      	ldrpl	r3, [r4, #20]
 8002a7a:	60a3      	str	r3, [r4, #8]
 8002a7c:	e7f4      	b.n	8002a68 <__swsetup_r+0xb0>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e7f7      	b.n	8002a72 <__swsetup_r+0xba>
 8002a82:	bf00      	nop
 8002a84:	20000010 	.word	0x20000010
 8002a88:	08003234 	.word	0x08003234
 8002a8c:	08003254 	.word	0x08003254
 8002a90:	08003214 	.word	0x08003214

08002a94 <__sflush_r>:
 8002a94:	898a      	ldrh	r2, [r1, #12]
 8002a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	0710      	lsls	r0, r2, #28
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	d458      	bmi.n	8002b54 <__sflush_r+0xc0>
 8002aa2:	684b      	ldr	r3, [r1, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	dc05      	bgt.n	8002ab4 <__sflush_r+0x20>
 8002aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	dc02      	bgt.n	8002ab4 <__sflush_r+0x20>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d0f9      	beq.n	8002aae <__sflush_r+0x1a>
 8002aba:	2300      	movs	r3, #0
 8002abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ac0:	682f      	ldr	r7, [r5, #0]
 8002ac2:	602b      	str	r3, [r5, #0]
 8002ac4:	d032      	beq.n	8002b2c <__sflush_r+0x98>
 8002ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	075a      	lsls	r2, r3, #29
 8002acc:	d505      	bpl.n	8002ada <__sflush_r+0x46>
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	1ac0      	subs	r0, r0, r3
 8002ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ad4:	b10b      	cbz	r3, 8002ada <__sflush_r+0x46>
 8002ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ad8:	1ac0      	subs	r0, r0, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	4602      	mov	r2, r0
 8002ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ae0:	6a21      	ldr	r1, [r4, #32]
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	47b0      	blx	r6
 8002ae6:	1c43      	adds	r3, r0, #1
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	d106      	bne.n	8002afa <__sflush_r+0x66>
 8002aec:	6829      	ldr	r1, [r5, #0]
 8002aee:	291d      	cmp	r1, #29
 8002af0:	d82c      	bhi.n	8002b4c <__sflush_r+0xb8>
 8002af2:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <__sflush_r+0x108>)
 8002af4:	40ca      	lsrs	r2, r1
 8002af6:	07d6      	lsls	r6, r2, #31
 8002af8:	d528      	bpl.n	8002b4c <__sflush_r+0xb8>
 8002afa:	2200      	movs	r2, #0
 8002afc:	6062      	str	r2, [r4, #4]
 8002afe:	04d9      	lsls	r1, r3, #19
 8002b00:	6922      	ldr	r2, [r4, #16]
 8002b02:	6022      	str	r2, [r4, #0]
 8002b04:	d504      	bpl.n	8002b10 <__sflush_r+0x7c>
 8002b06:	1c42      	adds	r2, r0, #1
 8002b08:	d101      	bne.n	8002b0e <__sflush_r+0x7a>
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	b903      	cbnz	r3, 8002b10 <__sflush_r+0x7c>
 8002b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8002b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b12:	602f      	str	r7, [r5, #0]
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d0ca      	beq.n	8002aae <__sflush_r+0x1a>
 8002b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b1c:	4299      	cmp	r1, r3
 8002b1e:	d002      	beq.n	8002b26 <__sflush_r+0x92>
 8002b20:	4628      	mov	r0, r5
 8002b22:	f000 f9d5 	bl	8002ed0 <_free_r>
 8002b26:	2000      	movs	r0, #0
 8002b28:	6360      	str	r0, [r4, #52]	; 0x34
 8002b2a:	e7c1      	b.n	8002ab0 <__sflush_r+0x1c>
 8002b2c:	6a21      	ldr	r1, [r4, #32]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4628      	mov	r0, r5
 8002b32:	47b0      	blx	r6
 8002b34:	1c41      	adds	r1, r0, #1
 8002b36:	d1c7      	bne.n	8002ac8 <__sflush_r+0x34>
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0c4      	beq.n	8002ac8 <__sflush_r+0x34>
 8002b3e:	2b1d      	cmp	r3, #29
 8002b40:	d001      	beq.n	8002b46 <__sflush_r+0xb2>
 8002b42:	2b16      	cmp	r3, #22
 8002b44:	d101      	bne.n	8002b4a <__sflush_r+0xb6>
 8002b46:	602f      	str	r7, [r5, #0]
 8002b48:	e7b1      	b.n	8002aae <__sflush_r+0x1a>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b50:	81a3      	strh	r3, [r4, #12]
 8002b52:	e7ad      	b.n	8002ab0 <__sflush_r+0x1c>
 8002b54:	690f      	ldr	r7, [r1, #16]
 8002b56:	2f00      	cmp	r7, #0
 8002b58:	d0a9      	beq.n	8002aae <__sflush_r+0x1a>
 8002b5a:	0793      	lsls	r3, r2, #30
 8002b5c:	680e      	ldr	r6, [r1, #0]
 8002b5e:	bf08      	it	eq
 8002b60:	694b      	ldreq	r3, [r1, #20]
 8002b62:	600f      	str	r7, [r1, #0]
 8002b64:	bf18      	it	ne
 8002b66:	2300      	movne	r3, #0
 8002b68:	eba6 0807 	sub.w	r8, r6, r7
 8002b6c:	608b      	str	r3, [r1, #8]
 8002b6e:	f1b8 0f00 	cmp.w	r8, #0
 8002b72:	dd9c      	ble.n	8002aae <__sflush_r+0x1a>
 8002b74:	6a21      	ldr	r1, [r4, #32]
 8002b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b78:	4643      	mov	r3, r8
 8002b7a:	463a      	mov	r2, r7
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	47b0      	blx	r6
 8002b80:	2800      	cmp	r0, #0
 8002b82:	dc06      	bgt.n	8002b92 <__sflush_r+0xfe>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8a:	81a3      	strh	r3, [r4, #12]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b90:	e78e      	b.n	8002ab0 <__sflush_r+0x1c>
 8002b92:	4407      	add	r7, r0
 8002b94:	eba8 0800 	sub.w	r8, r8, r0
 8002b98:	e7e9      	b.n	8002b6e <__sflush_r+0xda>
 8002b9a:	bf00      	nop
 8002b9c:	20400001 	.word	0x20400001

08002ba0 <_fflush_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	690b      	ldr	r3, [r1, #16]
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	b913      	cbnz	r3, 8002bb0 <_fflush_r+0x10>
 8002baa:	2500      	movs	r5, #0
 8002bac:	4628      	mov	r0, r5
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
 8002bb0:	b118      	cbz	r0, 8002bba <_fflush_r+0x1a>
 8002bb2:	6983      	ldr	r3, [r0, #24]
 8002bb4:	b90b      	cbnz	r3, 8002bba <_fflush_r+0x1a>
 8002bb6:	f000 f887 	bl	8002cc8 <__sinit>
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <_fflush_r+0x6c>)
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	d11b      	bne.n	8002bf8 <_fflush_r+0x58>
 8002bc0:	686c      	ldr	r4, [r5, #4]
 8002bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ef      	beq.n	8002baa <_fflush_r+0xa>
 8002bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002bcc:	07d0      	lsls	r0, r2, #31
 8002bce:	d404      	bmi.n	8002bda <_fflush_r+0x3a>
 8002bd0:	0599      	lsls	r1, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <_fflush_r+0x3a>
 8002bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bd6:	f000 f915 	bl	8002e04 <__retarget_lock_acquire_recursive>
 8002bda:	4628      	mov	r0, r5
 8002bdc:	4621      	mov	r1, r4
 8002bde:	f7ff ff59 	bl	8002a94 <__sflush_r>
 8002be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002be4:	07da      	lsls	r2, r3, #31
 8002be6:	4605      	mov	r5, r0
 8002be8:	d4e0      	bmi.n	8002bac <_fflush_r+0xc>
 8002bea:	89a3      	ldrh	r3, [r4, #12]
 8002bec:	059b      	lsls	r3, r3, #22
 8002bee:	d4dd      	bmi.n	8002bac <_fflush_r+0xc>
 8002bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bf2:	f000 f908 	bl	8002e06 <__retarget_lock_release_recursive>
 8002bf6:	e7d9      	b.n	8002bac <_fflush_r+0xc>
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <_fflush_r+0x70>)
 8002bfa:	429c      	cmp	r4, r3
 8002bfc:	d101      	bne.n	8002c02 <_fflush_r+0x62>
 8002bfe:	68ac      	ldr	r4, [r5, #8]
 8002c00:	e7df      	b.n	8002bc2 <_fflush_r+0x22>
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <_fflush_r+0x74>)
 8002c04:	429c      	cmp	r4, r3
 8002c06:	bf08      	it	eq
 8002c08:	68ec      	ldreq	r4, [r5, #12]
 8002c0a:	e7da      	b.n	8002bc2 <_fflush_r+0x22>
 8002c0c:	08003234 	.word	0x08003234
 8002c10:	08003254 	.word	0x08003254
 8002c14:	08003214 	.word	0x08003214

08002c18 <std>:
 8002c18:	2300      	movs	r3, #0
 8002c1a:	b510      	push	{r4, lr}
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c26:	6083      	str	r3, [r0, #8]
 8002c28:	8181      	strh	r1, [r0, #12]
 8002c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8002c2c:	81c2      	strh	r2, [r0, #14]
 8002c2e:	6183      	str	r3, [r0, #24]
 8002c30:	4619      	mov	r1, r3
 8002c32:	2208      	movs	r2, #8
 8002c34:	305c      	adds	r0, #92	; 0x5c
 8002c36:	f7ff fdef 	bl	8002818 <memset>
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <std+0x38>)
 8002c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <std+0x3c>)
 8002c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <std+0x40>)
 8002c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <std+0x44>)
 8002c48:	6224      	str	r4, [r4, #32]
 8002c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	bf00      	nop
 8002c50:	08003045 	.word	0x08003045
 8002c54:	08003067 	.word	0x08003067
 8002c58:	0800309f 	.word	0x0800309f
 8002c5c:	080030c3 	.word	0x080030c3

08002c60 <_cleanup_r>:
 8002c60:	4901      	ldr	r1, [pc, #4]	; (8002c68 <_cleanup_r+0x8>)
 8002c62:	f000 b8af 	b.w	8002dc4 <_fwalk_reent>
 8002c66:	bf00      	nop
 8002c68:	08002ba1 	.word	0x08002ba1

08002c6c <__sfmoreglue>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	1e4a      	subs	r2, r1, #1
 8002c70:	2568      	movs	r5, #104	; 0x68
 8002c72:	4355      	muls	r5, r2
 8002c74:	460e      	mov	r6, r1
 8002c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c7a:	f000 f979 	bl	8002f70 <_malloc_r>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	b140      	cbz	r0, 8002c94 <__sfmoreglue+0x28>
 8002c82:	2100      	movs	r1, #0
 8002c84:	e9c0 1600 	strd	r1, r6, [r0]
 8002c88:	300c      	adds	r0, #12
 8002c8a:	60a0      	str	r0, [r4, #8]
 8002c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c90:	f7ff fdc2 	bl	8002818 <memset>
 8002c94:	4620      	mov	r0, r4
 8002c96:	bd70      	pop	{r4, r5, r6, pc}

08002c98 <__sfp_lock_acquire>:
 8002c98:	4801      	ldr	r0, [pc, #4]	; (8002ca0 <__sfp_lock_acquire+0x8>)
 8002c9a:	f000 b8b3 	b.w	8002e04 <__retarget_lock_acquire_recursive>
 8002c9e:	bf00      	nop
 8002ca0:	2000013c 	.word	0x2000013c

08002ca4 <__sfp_lock_release>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	; (8002cac <__sfp_lock_release+0x8>)
 8002ca6:	f000 b8ae 	b.w	8002e06 <__retarget_lock_release_recursive>
 8002caa:	bf00      	nop
 8002cac:	2000013c 	.word	0x2000013c

08002cb0 <__sinit_lock_acquire>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__sinit_lock_acquire+0x8>)
 8002cb2:	f000 b8a7 	b.w	8002e04 <__retarget_lock_acquire_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000137 	.word	0x20000137

08002cbc <__sinit_lock_release>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__sinit_lock_release+0x8>)
 8002cbe:	f000 b8a2 	b.w	8002e06 <__retarget_lock_release_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	20000137 	.word	0x20000137

08002cc8 <__sinit>:
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	4604      	mov	r4, r0
 8002ccc:	f7ff fff0 	bl	8002cb0 <__sinit_lock_acquire>
 8002cd0:	69a3      	ldr	r3, [r4, #24]
 8002cd2:	b11b      	cbz	r3, 8002cdc <__sinit+0x14>
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd8:	f7ff bff0 	b.w	8002cbc <__sinit_lock_release>
 8002cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <__sinit+0x68>)
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <__sinit+0x6c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002cea:	42a3      	cmp	r3, r4
 8002cec:	bf04      	itt	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	61a3      	streq	r3, [r4, #24]
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f000 f820 	bl	8002d38 <__sfp>
 8002cf8:	6060      	str	r0, [r4, #4]
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 f81c 	bl	8002d38 <__sfp>
 8002d00:	60a0      	str	r0, [r4, #8]
 8002d02:	4620      	mov	r0, r4
 8002d04:	f000 f818 	bl	8002d38 <__sfp>
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60e0      	str	r0, [r4, #12]
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	6860      	ldr	r0, [r4, #4]
 8002d10:	f7ff ff82 	bl	8002c18 <std>
 8002d14:	68a0      	ldr	r0, [r4, #8]
 8002d16:	2201      	movs	r2, #1
 8002d18:	2109      	movs	r1, #9
 8002d1a:	f7ff ff7d 	bl	8002c18 <std>
 8002d1e:	68e0      	ldr	r0, [r4, #12]
 8002d20:	2202      	movs	r2, #2
 8002d22:	2112      	movs	r1, #18
 8002d24:	f7ff ff78 	bl	8002c18 <std>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61a3      	str	r3, [r4, #24]
 8002d2c:	e7d2      	b.n	8002cd4 <__sinit+0xc>
 8002d2e:	bf00      	nop
 8002d30:	08003210 	.word	0x08003210
 8002d34:	08002c61 	.word	0x08002c61

08002d38 <__sfp>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	4607      	mov	r7, r0
 8002d3c:	f7ff ffac 	bl	8002c98 <__sfp_lock_acquire>
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <__sfp+0x84>)
 8002d42:	681e      	ldr	r6, [r3, #0]
 8002d44:	69b3      	ldr	r3, [r6, #24]
 8002d46:	b913      	cbnz	r3, 8002d4e <__sfp+0x16>
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f7ff ffbd 	bl	8002cc8 <__sinit>
 8002d4e:	3648      	adds	r6, #72	; 0x48
 8002d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	d503      	bpl.n	8002d60 <__sfp+0x28>
 8002d58:	6833      	ldr	r3, [r6, #0]
 8002d5a:	b30b      	cbz	r3, 8002da0 <__sfp+0x68>
 8002d5c:	6836      	ldr	r6, [r6, #0]
 8002d5e:	e7f7      	b.n	8002d50 <__sfp+0x18>
 8002d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d64:	b9d5      	cbnz	r5, 8002d9c <__sfp+0x64>
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <__sfp+0x88>)
 8002d68:	60e3      	str	r3, [r4, #12]
 8002d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8002d70:	f000 f847 	bl	8002e02 <__retarget_lock_init_recursive>
 8002d74:	f7ff ff96 	bl	8002ca4 <__sfp_lock_release>
 8002d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d80:	6025      	str	r5, [r4, #0]
 8002d82:	61a5      	str	r5, [r4, #24]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4629      	mov	r1, r5
 8002d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d8c:	f7ff fd44 	bl	8002818 <memset>
 8002d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d98:	4620      	mov	r0, r4
 8002d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9c:	3468      	adds	r4, #104	; 0x68
 8002d9e:	e7d9      	b.n	8002d54 <__sfp+0x1c>
 8002da0:	2104      	movs	r1, #4
 8002da2:	4638      	mov	r0, r7
 8002da4:	f7ff ff62 	bl	8002c6c <__sfmoreglue>
 8002da8:	4604      	mov	r4, r0
 8002daa:	6030      	str	r0, [r6, #0]
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d1d5      	bne.n	8002d5c <__sfp+0x24>
 8002db0:	f7ff ff78 	bl	8002ca4 <__sfp_lock_release>
 8002db4:	230c      	movs	r3, #12
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	e7ee      	b.n	8002d98 <__sfp+0x60>
 8002dba:	bf00      	nop
 8002dbc:	08003210 	.word	0x08003210
 8002dc0:	ffff0001 	.word	0xffff0001

08002dc4 <_fwalk_reent>:
 8002dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc8:	4606      	mov	r6, r0
 8002dca:	4688      	mov	r8, r1
 8002dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002dd0:	2700      	movs	r7, #0
 8002dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8002dda:	d505      	bpl.n	8002de8 <_fwalk_reent+0x24>
 8002ddc:	6824      	ldr	r4, [r4, #0]
 8002dde:	2c00      	cmp	r4, #0
 8002de0:	d1f7      	bne.n	8002dd2 <_fwalk_reent+0xe>
 8002de2:	4638      	mov	r0, r7
 8002de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002de8:	89ab      	ldrh	r3, [r5, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d907      	bls.n	8002dfe <_fwalk_reent+0x3a>
 8002dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002df2:	3301      	adds	r3, #1
 8002df4:	d003      	beq.n	8002dfe <_fwalk_reent+0x3a>
 8002df6:	4629      	mov	r1, r5
 8002df8:	4630      	mov	r0, r6
 8002dfa:	47c0      	blx	r8
 8002dfc:	4307      	orrs	r7, r0
 8002dfe:	3568      	adds	r5, #104	; 0x68
 8002e00:	e7e9      	b.n	8002dd6 <_fwalk_reent+0x12>

08002e02 <__retarget_lock_init_recursive>:
 8002e02:	4770      	bx	lr

08002e04 <__retarget_lock_acquire_recursive>:
 8002e04:	4770      	bx	lr

08002e06 <__retarget_lock_release_recursive>:
 8002e06:	4770      	bx	lr

08002e08 <__swhatbuf_r>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	460e      	mov	r6, r1
 8002e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e10:	2900      	cmp	r1, #0
 8002e12:	b096      	sub	sp, #88	; 0x58
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
 8002e18:	da07      	bge.n	8002e2a <__swhatbuf_r+0x22>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	602b      	str	r3, [r5, #0]
 8002e1e:	89b3      	ldrh	r3, [r6, #12]
 8002e20:	061a      	lsls	r2, r3, #24
 8002e22:	d410      	bmi.n	8002e46 <__swhatbuf_r+0x3e>
 8002e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e28:	e00e      	b.n	8002e48 <__swhatbuf_r+0x40>
 8002e2a:	466a      	mov	r2, sp
 8002e2c:	f000 f970 	bl	8003110 <_fstat_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	dbf2      	blt.n	8002e1a <__swhatbuf_r+0x12>
 8002e34:	9a01      	ldr	r2, [sp, #4]
 8002e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e3e:	425a      	negs	r2, r3
 8002e40:	415a      	adcs	r2, r3
 8002e42:	602a      	str	r2, [r5, #0]
 8002e44:	e7ee      	b.n	8002e24 <__swhatbuf_r+0x1c>
 8002e46:	2340      	movs	r3, #64	; 0x40
 8002e48:	2000      	movs	r0, #0
 8002e4a:	6023      	str	r3, [r4, #0]
 8002e4c:	b016      	add	sp, #88	; 0x58
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}

08002e50 <__smakebuf_r>:
 8002e50:	898b      	ldrh	r3, [r1, #12]
 8002e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e54:	079d      	lsls	r5, r3, #30
 8002e56:	4606      	mov	r6, r0
 8002e58:	460c      	mov	r4, r1
 8002e5a:	d507      	bpl.n	8002e6c <__smakebuf_r+0x1c>
 8002e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	6123      	str	r3, [r4, #16]
 8002e64:	2301      	movs	r3, #1
 8002e66:	6163      	str	r3, [r4, #20]
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	ab01      	add	r3, sp, #4
 8002e6e:	466a      	mov	r2, sp
 8002e70:	f7ff ffca 	bl	8002e08 <__swhatbuf_r>
 8002e74:	9900      	ldr	r1, [sp, #0]
 8002e76:	4605      	mov	r5, r0
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 f879 	bl	8002f70 <_malloc_r>
 8002e7e:	b948      	cbnz	r0, 8002e94 <__smakebuf_r+0x44>
 8002e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e84:	059a      	lsls	r2, r3, #22
 8002e86:	d4ef      	bmi.n	8002e68 <__smakebuf_r+0x18>
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	e7e3      	b.n	8002e5c <__smakebuf_r+0xc>
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <__smakebuf_r+0x7c>)
 8002e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	6020      	str	r0, [r4, #0]
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	9b00      	ldr	r3, [sp, #0]
 8002ea4:	6163      	str	r3, [r4, #20]
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	6120      	str	r0, [r4, #16]
 8002eaa:	b15b      	cbz	r3, 8002ec4 <__smakebuf_r+0x74>
 8002eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f000 f93f 	bl	8003134 <_isatty_r>
 8002eb6:	b128      	cbz	r0, 8002ec4 <__smakebuf_r+0x74>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	81a3      	strh	r3, [r4, #12]
 8002ec4:	89a0      	ldrh	r0, [r4, #12]
 8002ec6:	4305      	orrs	r5, r0
 8002ec8:	81a5      	strh	r5, [r4, #12]
 8002eca:	e7cd      	b.n	8002e68 <__smakebuf_r+0x18>
 8002ecc:	08002c61 	.word	0x08002c61

08002ed0 <_free_r>:
 8002ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ed2:	2900      	cmp	r1, #0
 8002ed4:	d048      	beq.n	8002f68 <_free_r+0x98>
 8002ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eda:	9001      	str	r0, [sp, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f1a1 0404 	sub.w	r4, r1, #4
 8002ee2:	bfb8      	it	lt
 8002ee4:	18e4      	addlt	r4, r4, r3
 8002ee6:	f000 f947 	bl	8003178 <__malloc_lock>
 8002eea:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <_free_r+0x9c>)
 8002eec:	9801      	ldr	r0, [sp, #4]
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	4615      	mov	r5, r2
 8002ef2:	b933      	cbnz	r3, 8002f02 <_free_r+0x32>
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	6014      	str	r4, [r2, #0]
 8002ef8:	b003      	add	sp, #12
 8002efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002efe:	f000 b941 	b.w	8003184 <__malloc_unlock>
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	d90b      	bls.n	8002f1e <_free_r+0x4e>
 8002f06:	6821      	ldr	r1, [r4, #0]
 8002f08:	1862      	adds	r2, r4, r1
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	bf04      	itt	eq
 8002f0e:	681a      	ldreq	r2, [r3, #0]
 8002f10:	685b      	ldreq	r3, [r3, #4]
 8002f12:	6063      	str	r3, [r4, #4]
 8002f14:	bf04      	itt	eq
 8002f16:	1852      	addeq	r2, r2, r1
 8002f18:	6022      	streq	r2, [r4, #0]
 8002f1a:	602c      	str	r4, [r5, #0]
 8002f1c:	e7ec      	b.n	8002ef8 <_free_r+0x28>
 8002f1e:	461a      	mov	r2, r3
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b10b      	cbz	r3, 8002f28 <_free_r+0x58>
 8002f24:	42a3      	cmp	r3, r4
 8002f26:	d9fa      	bls.n	8002f1e <_free_r+0x4e>
 8002f28:	6811      	ldr	r1, [r2, #0]
 8002f2a:	1855      	adds	r5, r2, r1
 8002f2c:	42a5      	cmp	r5, r4
 8002f2e:	d10b      	bne.n	8002f48 <_free_r+0x78>
 8002f30:	6824      	ldr	r4, [r4, #0]
 8002f32:	4421      	add	r1, r4
 8002f34:	1854      	adds	r4, r2, r1
 8002f36:	42a3      	cmp	r3, r4
 8002f38:	6011      	str	r1, [r2, #0]
 8002f3a:	d1dd      	bne.n	8002ef8 <_free_r+0x28>
 8002f3c:	681c      	ldr	r4, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	6053      	str	r3, [r2, #4]
 8002f42:	4421      	add	r1, r4
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	e7d7      	b.n	8002ef8 <_free_r+0x28>
 8002f48:	d902      	bls.n	8002f50 <_free_r+0x80>
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	6003      	str	r3, [r0, #0]
 8002f4e:	e7d3      	b.n	8002ef8 <_free_r+0x28>
 8002f50:	6825      	ldr	r5, [r4, #0]
 8002f52:	1961      	adds	r1, r4, r5
 8002f54:	428b      	cmp	r3, r1
 8002f56:	bf04      	itt	eq
 8002f58:	6819      	ldreq	r1, [r3, #0]
 8002f5a:	685b      	ldreq	r3, [r3, #4]
 8002f5c:	6063      	str	r3, [r4, #4]
 8002f5e:	bf04      	itt	eq
 8002f60:	1949      	addeq	r1, r1, r5
 8002f62:	6021      	streq	r1, [r4, #0]
 8002f64:	6054      	str	r4, [r2, #4]
 8002f66:	e7c7      	b.n	8002ef8 <_free_r+0x28>
 8002f68:	b003      	add	sp, #12
 8002f6a:	bd30      	pop	{r4, r5, pc}
 8002f6c:	20000094 	.word	0x20000094

08002f70 <_malloc_r>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	1ccd      	adds	r5, r1, #3
 8002f74:	f025 0503 	bic.w	r5, r5, #3
 8002f78:	3508      	adds	r5, #8
 8002f7a:	2d0c      	cmp	r5, #12
 8002f7c:	bf38      	it	cc
 8002f7e:	250c      	movcc	r5, #12
 8002f80:	2d00      	cmp	r5, #0
 8002f82:	4606      	mov	r6, r0
 8002f84:	db01      	blt.n	8002f8a <_malloc_r+0x1a>
 8002f86:	42a9      	cmp	r1, r5
 8002f88:	d903      	bls.n	8002f92 <_malloc_r+0x22>
 8002f8a:	230c      	movs	r3, #12
 8002f8c:	6033      	str	r3, [r6, #0]
 8002f8e:	2000      	movs	r0, #0
 8002f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f92:	f000 f8f1 	bl	8003178 <__malloc_lock>
 8002f96:	4921      	ldr	r1, [pc, #132]	; (800301c <_malloc_r+0xac>)
 8002f98:	680a      	ldr	r2, [r1, #0]
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	b99c      	cbnz	r4, 8002fc6 <_malloc_r+0x56>
 8002f9e:	4f20      	ldr	r7, [pc, #128]	; (8003020 <_malloc_r+0xb0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b923      	cbnz	r3, 8002fae <_malloc_r+0x3e>
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	f000 f83c 	bl	8003024 <_sbrk_r>
 8002fac:	6038      	str	r0, [r7, #0]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f000 f837 	bl	8003024 <_sbrk_r>
 8002fb6:	1c43      	adds	r3, r0, #1
 8002fb8:	d123      	bne.n	8003002 <_malloc_r+0x92>
 8002fba:	230c      	movs	r3, #12
 8002fbc:	6033      	str	r3, [r6, #0]
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f000 f8e0 	bl	8003184 <__malloc_unlock>
 8002fc4:	e7e3      	b.n	8002f8e <_malloc_r+0x1e>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	1b5b      	subs	r3, r3, r5
 8002fca:	d417      	bmi.n	8002ffc <_malloc_r+0x8c>
 8002fcc:	2b0b      	cmp	r3, #11
 8002fce:	d903      	bls.n	8002fd8 <_malloc_r+0x68>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	441c      	add	r4, r3
 8002fd4:	6025      	str	r5, [r4, #0]
 8002fd6:	e004      	b.n	8002fe2 <_malloc_r+0x72>
 8002fd8:	6863      	ldr	r3, [r4, #4]
 8002fda:	42a2      	cmp	r2, r4
 8002fdc:	bf0c      	ite	eq
 8002fde:	600b      	streq	r3, [r1, #0]
 8002fe0:	6053      	strne	r3, [r2, #4]
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f000 f8ce 	bl	8003184 <__malloc_unlock>
 8002fe8:	f104 000b 	add.w	r0, r4, #11
 8002fec:	1d23      	adds	r3, r4, #4
 8002fee:	f020 0007 	bic.w	r0, r0, #7
 8002ff2:	1ac2      	subs	r2, r0, r3
 8002ff4:	d0cc      	beq.n	8002f90 <_malloc_r+0x20>
 8002ff6:	1a1b      	subs	r3, r3, r0
 8002ff8:	50a3      	str	r3, [r4, r2]
 8002ffa:	e7c9      	b.n	8002f90 <_malloc_r+0x20>
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	6864      	ldr	r4, [r4, #4]
 8003000:	e7cc      	b.n	8002f9c <_malloc_r+0x2c>
 8003002:	1cc4      	adds	r4, r0, #3
 8003004:	f024 0403 	bic.w	r4, r4, #3
 8003008:	42a0      	cmp	r0, r4
 800300a:	d0e3      	beq.n	8002fd4 <_malloc_r+0x64>
 800300c:	1a21      	subs	r1, r4, r0
 800300e:	4630      	mov	r0, r6
 8003010:	f000 f808 	bl	8003024 <_sbrk_r>
 8003014:	3001      	adds	r0, #1
 8003016:	d1dd      	bne.n	8002fd4 <_malloc_r+0x64>
 8003018:	e7cf      	b.n	8002fba <_malloc_r+0x4a>
 800301a:	bf00      	nop
 800301c:	20000094 	.word	0x20000094
 8003020:	20000098 	.word	0x20000098

08003024 <_sbrk_r>:
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4d06      	ldr	r5, [pc, #24]	; (8003040 <_sbrk_r+0x1c>)
 8003028:	2300      	movs	r3, #0
 800302a:	4604      	mov	r4, r0
 800302c:	4608      	mov	r0, r1
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	f7fd fdf0 	bl	8000c14 <_sbrk>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_sbrk_r+0x1a>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_sbrk_r+0x1a>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	20000140 	.word	0x20000140

08003044 <__sread>:
 8003044:	b510      	push	{r4, lr}
 8003046:	460c      	mov	r4, r1
 8003048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800304c:	f000 f8a0 	bl	8003190 <_read_r>
 8003050:	2800      	cmp	r0, #0
 8003052:	bfab      	itete	ge
 8003054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003056:	89a3      	ldrhlt	r3, [r4, #12]
 8003058:	181b      	addge	r3, r3, r0
 800305a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800305e:	bfac      	ite	ge
 8003060:	6563      	strge	r3, [r4, #84]	; 0x54
 8003062:	81a3      	strhlt	r3, [r4, #12]
 8003064:	bd10      	pop	{r4, pc}

08003066 <__swrite>:
 8003066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800306a:	461f      	mov	r7, r3
 800306c:	898b      	ldrh	r3, [r1, #12]
 800306e:	05db      	lsls	r3, r3, #23
 8003070:	4605      	mov	r5, r0
 8003072:	460c      	mov	r4, r1
 8003074:	4616      	mov	r6, r2
 8003076:	d505      	bpl.n	8003084 <__swrite+0x1e>
 8003078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800307c:	2302      	movs	r3, #2
 800307e:	2200      	movs	r2, #0
 8003080:	f000 f868 	bl	8003154 <_lseek_r>
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800308a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	4632      	mov	r2, r6
 8003092:	463b      	mov	r3, r7
 8003094:	4628      	mov	r0, r5
 8003096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800309a:	f000 b817 	b.w	80030cc <_write_r>

0800309e <__sseek>:
 800309e:	b510      	push	{r4, lr}
 80030a0:	460c      	mov	r4, r1
 80030a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a6:	f000 f855 	bl	8003154 <_lseek_r>
 80030aa:	1c43      	adds	r3, r0, #1
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	bf15      	itete	ne
 80030b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80030b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030ba:	81a3      	strheq	r3, [r4, #12]
 80030bc:	bf18      	it	ne
 80030be:	81a3      	strhne	r3, [r4, #12]
 80030c0:	bd10      	pop	{r4, pc}

080030c2 <__sclose>:
 80030c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c6:	f000 b813 	b.w	80030f0 <_close_r>
	...

080030cc <_write_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4d07      	ldr	r5, [pc, #28]	; (80030ec <_write_r+0x20>)
 80030d0:	4604      	mov	r4, r0
 80030d2:	4608      	mov	r0, r1
 80030d4:	4611      	mov	r1, r2
 80030d6:	2200      	movs	r2, #0
 80030d8:	602a      	str	r2, [r5, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	f7fd fa18 	bl	8000510 <_write>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_write_r+0x1e>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_write_r+0x1e>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	20000140 	.word	0x20000140

080030f0 <_close_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4d06      	ldr	r5, [pc, #24]	; (800310c <_close_r+0x1c>)
 80030f4:	2300      	movs	r3, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	602b      	str	r3, [r5, #0]
 80030fc:	f7fd fd55 	bl	8000baa <_close>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_close_r+0x1a>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b103      	cbz	r3, 800310a <_close_r+0x1a>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	20000140 	.word	0x20000140

08003110 <_fstat_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	4d07      	ldr	r5, [pc, #28]	; (8003130 <_fstat_r+0x20>)
 8003114:	2300      	movs	r3, #0
 8003116:	4604      	mov	r4, r0
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	f7fd fd50 	bl	8000bc2 <_fstat>
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	d102      	bne.n	800312c <_fstat_r+0x1c>
 8003126:	682b      	ldr	r3, [r5, #0]
 8003128:	b103      	cbz	r3, 800312c <_fstat_r+0x1c>
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	bd38      	pop	{r3, r4, r5, pc}
 800312e:	bf00      	nop
 8003130:	20000140 	.word	0x20000140

08003134 <_isatty_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4d06      	ldr	r5, [pc, #24]	; (8003150 <_isatty_r+0x1c>)
 8003138:	2300      	movs	r3, #0
 800313a:	4604      	mov	r4, r0
 800313c:	4608      	mov	r0, r1
 800313e:	602b      	str	r3, [r5, #0]
 8003140:	f7fd fd4f 	bl	8000be2 <_isatty>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_isatty_r+0x1a>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	b103      	cbz	r3, 800314e <_isatty_r+0x1a>
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20000140 	.word	0x20000140

08003154 <_lseek_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	4d07      	ldr	r5, [pc, #28]	; (8003174 <_lseek_r+0x20>)
 8003158:	4604      	mov	r4, r0
 800315a:	4608      	mov	r0, r1
 800315c:	4611      	mov	r1, r2
 800315e:	2200      	movs	r2, #0
 8003160:	602a      	str	r2, [r5, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	f7fd fd48 	bl	8000bf8 <_lseek>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	d102      	bne.n	8003172 <_lseek_r+0x1e>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	b103      	cbz	r3, 8003172 <_lseek_r+0x1e>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	20000140 	.word	0x20000140

08003178 <__malloc_lock>:
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <__malloc_lock+0x8>)
 800317a:	f7ff be43 	b.w	8002e04 <__retarget_lock_acquire_recursive>
 800317e:	bf00      	nop
 8003180:	20000138 	.word	0x20000138

08003184 <__malloc_unlock>:
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <__malloc_unlock+0x8>)
 8003186:	f7ff be3e 	b.w	8002e06 <__retarget_lock_release_recursive>
 800318a:	bf00      	nop
 800318c:	20000138 	.word	0x20000138

08003190 <_read_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4d07      	ldr	r5, [pc, #28]	; (80031b0 <_read_r+0x20>)
 8003194:	4604      	mov	r4, r0
 8003196:	4608      	mov	r0, r1
 8003198:	4611      	mov	r1, r2
 800319a:	2200      	movs	r2, #0
 800319c:	602a      	str	r2, [r5, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f7fd fce6 	bl	8000b70 <_read>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_read_r+0x1e>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_read_r+0x1e>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	20000140 	.word	0x20000140

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
