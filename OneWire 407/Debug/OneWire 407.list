
OneWire 407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08008608  08008608  00018608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dcc  08008dcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd4  08008dd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001a0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000037c  2000037c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4dd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210c  00000000  00000000  0002e6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000910  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217b9  00000000  00000000  00031ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b16a  00000000  00000000  00053289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4ce5  00000000  00000000  0005e3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001230d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039b0  00000000  00000000  0012312c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085f0 	.word	0x080085f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080085f0 	.word	0x080085f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <BlockTillConversionComplete>:
static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt);
//static bool IsAllZeros(const uint8_t * const scratchPad, const size_t length);

// Continue to check if the IC has responded with a temperature
static void BlockTillConversionComplete(DallasTemperature_HandleTypeDef* dt, uint8_t bitResolution)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	int delms = DT_MillisToWaitForConversion(bitResolution);
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fb9a 	bl	80015e8 <DT_MillisToWaitForConversion>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60fb      	str	r3, [r7, #12]

	if (dt->checkForConversion && !dt->parasite)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7a9b      	ldrb	r3, [r3, #10]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d01d      	beq.n	8000efc <BlockTillConversionComplete+0x5c>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d016      	beq.n	8000efc <BlockTillConversionComplete+0x5c>
	{
		unsigned long now = HAL_GetTick();
 8000ece:	f001 fe19 	bl	8002b04 <HAL_GetTick>
 8000ed2:	60b8      	str	r0, [r7, #8]
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000ed4:	e000      	b.n	8000ed8 <BlockTillConversionComplete+0x38>
		{
			__NOP();
 8000ed6:	bf00      	nop
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 fb47 	bl	800156c <DT_IsConversionComplete>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d013      	beq.n	8000f12 <BlockTillConversionComplete+0x72>
 8000eea:	f001 fe0b 	bl	8002b04 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d8ed      	bhi.n	8000ed6 <BlockTillConversionComplete+0x36>
	{
 8000efa:	e00a      	b.n	8000f12 <BlockTillConversionComplete+0x72>
		}
	}
	else
	{
		ActivateExternalPullup(dt);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f80d 	bl	8000f1c <ActivateExternalPullup>
		HAL_Delay(delms);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fe09 	bl	8002b1c <HAL_Delay>
		DeactivateExternalPullup(dt);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f81a 	bl	8000f44 <DeactivateExternalPullup>
	}
}
 8000f10:	e000      	b.n	8000f14 <BlockTillConversionComplete+0x74>
	{
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <ActivateExternalPullup>:

static void ActivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	79db      	ldrb	r3, [r3, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <ActivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <ActivateExternalPullup+0x24>)
 8000f34:	f002 fcc6 	bl	80038c4 <HAL_GPIO_WritePin>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020800 	.word	0x40020800

08000f44 <DeactivateExternalPullup>:

static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	79db      	ldrb	r3, [r3, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <DeactivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <DeactivateExternalPullup+0x24>)
 8000f5c:	f002 fcb2 	bl	80038c4 <HAL_GPIO_WritePin>
	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020800 	.word	0x40020800

08000f6c <DT_SetOneWire>:

	DeactivateExternalPullup(dt);
}

void DT_SetOneWire(DallasTemperature_HandleTypeDef* dt, OneWire_HandleTypeDef* ow)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	dt->ow 					= ow;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	601a      	str	r2, [r3, #0]
	dt->devices 			= 0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	711a      	strb	r2, [r3, #4]
	dt->ds18Count 			= 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	715a      	strb	r2, [r3, #5]
	dt->parasite 			= false;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]
	dt->bitResolution 		= 9;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2209      	movs	r2, #9
 8000f92:	721a      	strb	r2, [r3, #8]
	dt->waitForConversion 	= true;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	725a      	strb	r2, [r3, #9]
	dt->checkForConversion 	= true;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	729a      	strb	r2, [r3, #10]
	dt->autoSaveScratchPad 	= true;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	72da      	strb	r2, [r3, #11]
	dt->useExternalPullup 	= false;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	71da      	strb	r2, [r3, #7]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DT_Begin>:

void DT_Begin(DallasTemperature_HandleTypeDef* dt)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b093      	sub	sp, #76	; 0x4c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	AllDeviceAddress deviceAddress;

	OW_ResetSearch(dt->ow);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd84 	bl	8001ad2 <OW_ResetSearch>
	dt->devices = 0; 	// Reset the number of devices when we enumerate wire devices
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	711a      	strb	r2, [r3, #4]
	dt->ds18Count = 0; 	// Reset number of DS18xxx Family devices
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	715a      	strb	r2, [r3, #5]

	dt->devices = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f107 010c 	add.w	r1, r7, #12
 8000fde:	2207      	movs	r2, #7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fd99 	bl	8001b18 <OW_Search>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 0; i < dt->devices; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ff4:	e059      	b.n	80010aa <DT_Begin+0xf2>
	{
		if (DT_ValidAddress(&deviceAddress[i * 8]))
 8000ff6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	4413      	add	r3, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f868 	bl	80010d8 <DT_ValidAddress>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d048      	beq.n	80010a0 <DT_Begin+0xe8>
		{

			if (!dt->parasite && DT_ReadPowerSupply(dt, &deviceAddress[i * 8]))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	799b      	ldrb	r3, [r3, #6]
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00f      	beq.n	800103c <DT_Begin+0x84>
 800101c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	4413      	add	r3, r2
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f986 	bl	800133c <DT_ReadPowerSupply>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <DT_Begin+0x84>
				dt->parasite = true;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	719a      	strb	r2, [r3, #6]

			dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, &deviceAddress[i * 8]));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7a1c      	ldrb	r4, [r3, #8]
 8001040:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	4413      	add	r3, r2
 800104c:	4619      	mov	r1, r3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 fa5c 	bl	800150c <DT_GetResolution>
 8001054:	4603      	mov	r3, r0
 8001056:	429c      	cmp	r4, r3
 8001058:	d902      	bls.n	8001060 <DT_Begin+0xa8>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a1a      	ldrb	r2, [r3, #8]
 800105e:	e00b      	b.n	8001078 <DT_Begin+0xc0>
 8001060:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	4413      	add	r3, r2
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fa4c 	bl	800150c <DT_GetResolution>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	721a      	strb	r2, [r3, #8]

			if (DT_ValidFamily(&deviceAddress[i * 8]))
 800107c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	f107 020c 	add.w	r2, r7, #12
 8001086:	4413      	add	r3, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f83b 	bl	8001104 <DT_ValidFamily>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <DT_Begin+0xe8>
			{
				dt->ds18Count++;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < dt->devices; i++)
 80010a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010a4:	3301      	adds	r3, #1
 80010a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d39f      	bcc.n	8000ff6 <DT_Begin+0x3e>
			}
		}
	}
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	374c      	adds	r7, #76	; 0x4c
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <DT_GetDeviceCount>:

// returns the number of devices found on the bus
uint8_t DT_GetDeviceCount(DallasTemperature_HandleTypeDef* dt)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	return dt->devices;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	791b      	ldrb	r3, [r3, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DT_ValidAddress>:
	return dt->ds18Count;
}

// returns true if address is valid
bool DT_ValidAddress(const uint8_t* deviceAddress)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	return (OW_Crc8(deviceAddress, 7) == deviceAddress[7]);
 80010e0:	2107      	movs	r1, #7
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fdf4 	bl	8001cd0 <OW_Crc8>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3307      	adds	r3, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <DT_ValidFamily>:

bool DT_ValidFamily(const uint8_t* deviceAddress)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	switch (deviceAddress[DSROM_FAMILY])
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b42      	cmp	r3, #66	; 0x42
 8001112:	dc14      	bgt.n	800113e <DT_ValidFamily+0x3a>
 8001114:	2b28      	cmp	r3, #40	; 0x28
 8001116:	da04      	bge.n	8001122 <DT_ValidFamily+0x1e>
 8001118:	2b10      	cmp	r3, #16
 800111a:	d00e      	beq.n	800113a <DT_ValidFamily+0x36>
 800111c:	2b22      	cmp	r3, #34	; 0x22
 800111e:	d00c      	beq.n	800113a <DT_ValidFamily+0x36>
 8001120:	e00d      	b.n	800113e <DT_ValidFamily+0x3a>
 8001122:	3b28      	subs	r3, #40	; 0x28
 8001124:	2201      	movs	r2, #1
 8001126:	409a      	lsls	r2, r3
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <DT_ValidFamily+0x48>)
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <DT_ValidFamily+0x3a>
	case DS18S20MODEL:
	case DS18B20MODEL:
	case DS1822MODEL:
	case DS1825MODEL:
	case DS28EA00MODEL:
		return true;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <DT_ValidFamily+0x3c>
	default:
		return false;
 800113e:	2300      	movs	r3, #0
	}
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	04080001 	.word	0x04080001

08001150 <DT_GetAddress>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DT_GetAddress(DallasTemperature_HandleTypeDef* dt, uint8_t* currentDeviceAddress, uint8_t index)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	; 0x50
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	71fb      	strb	r3, [r7, #7]
	AllDeviceAddress deviceAddress;

	uint8_t depth = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	depth = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f107 0114 	add.w	r1, r7, #20
 800116c:	2207      	movs	r2, #7
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fcd2 	bl	8001b18 <OW_Search>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(index < depth && DT_ValidAddress(&deviceAddress[index * 8]))
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001180:	429a      	cmp	r2, r3
 8001182:	d216      	bcs.n	80011b2 <DT_GetAddress+0x62>
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	f107 0214 	add.w	r2, r7, #20
 800118c:	4413      	add	r3, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffa2 	bl	80010d8 <DT_ValidAddress>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <DT_GetAddress+0x62>
	{
		memcpy(currentDeviceAddress, &deviceAddress[index * 8], 8);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	f107 0214 	add.w	r2, r7, #20
 80011a2:	4413      	add	r3, r2
 80011a4:	2208      	movs	r2, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f004 faf5 	bl	8005798 <memcpy>
		return true;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <DT_GetAddress+0x64>
	}

	return false;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3750      	adds	r7, #80	; 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <DT_IsConnected_ScratchPad>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DT_IsConnected_ScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	bool b = DT_ReadScratchPad(dt, deviceAddress, scratchPad);
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 f81b 	bl	8001208 <DT_ReadScratchPad>
 80011d2:	4603      	mov	r3, r0
 80011d4:	75fb      	strb	r3, [r7, #23]
	return (b /*&& IsAllZeros(scratchPad, 8)*/ && (OW_Crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]));
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00c      	beq.n	80011f6 <DT_IsConnected_ScratchPad+0x3a>
 80011dc:	2108      	movs	r1, #8
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fd76 	bl	8001cd0 <OW_Crc8>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3308      	adds	r3, #8
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d101      	bne.n	80011f6 <DT_IsConnected_ScratchPad+0x3a>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <DT_IsConnected_ScratchPad+0x3c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <DT_ReadScratchPad>:

bool DT_ReadScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	// send the reset command and fail fast
	int b = OW_Reset(dt->ow);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fba3 	bl	8001964 <OW_Reset>
 800121e:	4603      	mov	r3, r0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24

	if (b == 0)
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <DT_ReadScratchPad+0x24>
		return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e027      	b.n	800127c <DT_ReadScratchPad+0x74>

	uint8_t query[19]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READSCRATCH, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <DT_ReadScratchPad+0x7c>)
 800122e:	f107 0410 	add.w	r4, r7, #16
 8001232:	461d      	mov	r5, r3
 8001234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	8022      	strh	r2, [r4, #0]
 800123e:	3402      	adds	r4, #2
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	7023      	strb	r3, [r4, #0]
	memcpy(&query[1], deviceAddress, 8);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	3301      	adds	r3, #1
 800124a:	2208      	movs	r2, #8
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	4618      	mov	r0, r3
 8001250:	f004 faa2 	bl	8005798 <memcpy>
	//         DS18B20 & DS1822: store for crc
	// byte 7: DS18S20: COUNT_PER_C
	//         DS18B20 & DS1822: store for crc
	// byte 8: SCRATCHPAD_CRC

	b = OW_Send(dt->ow, query, 19, scratchPad, 9, 10);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	f107 0110 	add.w	r1, r7, #16
 800125c:	230a      	movs	r3, #10
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2309      	movs	r3, #9
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2213      	movs	r2, #19
 8001268:	f000 fbb0 	bl	80019cc <OW_Send>
 800126c:	4603      	mov	r3, r0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24

	return (b == OW_OK);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2b01      	cmp	r3, #1
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	08008608 	.word	0x08008608

08001288 <DT_WriteScratchPad>:

void DT_WriteScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, const uint8_t* scratchPad)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	uint8_t query[13]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, WRITESCRATCH, scratchPad[HIGH_ALARM_TEMP], scratchPad[LOW_ALARM_TEMP], scratchPad[CONFIGURATION]};
 8001294:	2355      	movs	r3, #85	; 0x55
 8001296:	743b      	strb	r3, [r7, #16]
 8001298:	2300      	movs	r3, #0
 800129a:	747b      	strb	r3, [r7, #17]
 800129c:	2300      	movs	r3, #0
 800129e:	74bb      	strb	r3, [r7, #18]
 80012a0:	2300      	movs	r3, #0
 80012a2:	74fb      	strb	r3, [r7, #19]
 80012a4:	2300      	movs	r3, #0
 80012a6:	753b      	strb	r3, [r7, #20]
 80012a8:	2300      	movs	r3, #0
 80012aa:	757b      	strb	r3, [r7, #21]
 80012ac:	2300      	movs	r3, #0
 80012ae:	75bb      	strb	r3, [r7, #22]
 80012b0:	2300      	movs	r3, #0
 80012b2:	75fb      	strb	r3, [r7, #23]
 80012b4:	2300      	movs	r3, #0
 80012b6:	763b      	strb	r3, [r7, #24]
 80012b8:	234e      	movs	r3, #78	; 0x4e
 80012ba:	767b      	strb	r3, [r7, #25]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	789b      	ldrb	r3, [r3, #2]
 80012c0:	76bb      	strb	r3, [r7, #26]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	78db      	ldrb	r3, [r3, #3]
 80012c6:	76fb      	strb	r3, [r7, #27]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	773b      	strb	r3, [r7, #28]
	memcpy(&query[1], deviceAddress, 8);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	3301      	adds	r3, #1
 80012d4:	2208      	movs	r2, #8
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fa5d 	bl	8005798 <memcpy>

	// DS1820 and DS18S20 have no configuration register
	if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d00c      	beq.n	8001300 <DT_WriteScratchPad+0x78>
	{
		OW_Send(dt->ow, query, 13, NULL, 0, OW_NO_READ);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	f107 0110 	add.w	r1, r7, #16
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2300      	movs	r3, #0
 80012f8:	220d      	movs	r2, #13
 80012fa:	f000 fb67 	bl	80019cc <OW_Send>
 80012fe:	e00b      	b.n	8001318 <DT_WriteScratchPad+0x90>
	}
	else
	{
		OW_Send(dt->ow, query, 12, NULL, 0, OW_NO_READ);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f107 0110 	add.w	r1, r7, #16
 8001308:	23ff      	movs	r3, #255	; 0xff
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	220c      	movs	r2, #12
 8001314:	f000 fb5a 	bl	80019cc <OW_Send>
	}

	if (dt->autoSaveScratchPad)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	7adb      	ldrb	r3, [r3, #11]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <DT_WriteScratchPad+0xa2>
	{
		DT_SaveScratchPad(dt, deviceAddress);
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f97e 	bl	8001624 <DT_SaveScratchPad>
	}
	else
	{
		OW_Reset(dt->ow);
	}
}
 8001328:	e004      	b.n	8001334 <DT_WriteScratchPad+0xac>
		OW_Reset(dt->ow);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fb18 	bl	8001964 <OW_Reset>
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <DT_ReadPowerSupply>:
// returns true if parasite mode is used (2 wire)
// returns false if normal mode is used (3 wire)
// if no address is given (or nullptr) it checks if any device on the bus
// uses parasite mode.
bool DT_ReadPowerSupply(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	uint8_t parasiteMode = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	75fb      	strb	r3, [r7, #23]

	OW_Reset(dt->ow);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fb08 	bl	8001964 <OW_Reset>

	uint8_t query[11]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READPOWERSUPPLY, 0xFF};
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <DT_ReadPowerSupply+0xa0>)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	ca07      	ldmia	r2, {r0, r1, r2}
 800135c:	c303      	stmia	r3!, {r0, r1}
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	0c12      	lsrs	r2, r2, #16
 8001364:	701a      	strb	r2, [r3, #0]

	if (deviceAddress == NULL)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d111      	bne.n	8001390 <DT_ReadPowerSupply+0x54>
	{
	  query[0] = 0xCC;
 800136c:	23cc      	movs	r3, #204	; 0xcc
 800136e:	733b      	strb	r3, [r7, #12]
	  query[1] = READPOWERSUPPLY;
 8001370:	23b4      	movs	r3, #180	; 0xb4
 8001372:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 3, &parasiteMode, 1, 2);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 0317 	add.w	r3, r7, #23
 800137c:	f107 010c 	add.w	r1, r7, #12
 8001380:	2202      	movs	r2, #2
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	2203      	movs	r2, #3
 800138a:	f000 fb1f 	bl	80019cc <OW_Send>
 800138e:	e016      	b.n	80013be <DT_ReadPowerSupply+0x82>
	}
	else
	{
	  query[0] = 0x55;
 8001390:	2355      	movs	r3, #85	; 0x55
 8001392:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	3301      	adds	r3, #1
 800139a:	2208      	movs	r2, #8
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f9fa 	bl	8005798 <memcpy>
	  OW_Send(dt->ow, query, 10, &parasiteMode, 1, 10);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	f107 0317 	add.w	r3, r7, #23
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	220a      	movs	r2, #10
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	220a      	movs	r2, #10
 80013ba:	f000 fb07 	bl	80019cc <OW_Send>
	}

	OW_Reset(dt->ow);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 face 	bl	8001964 <OW_Reset>

	if (parasiteMode == 0)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <DT_ReadPowerSupply+0x96>
	{
		return true;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <DT_ReadPowerSupply+0x98>
	}
	else
	{
		return false;
 80013d2:	2300      	movs	r3, #0
	}
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0800861c 	.word	0x0800861c

080013e0 <DT_SetResolution>:
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used.
bool DT_SetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t newResolution, bool skipGlobalBitResolutionCalculation)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	460b      	mov	r3, r1
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	4613      	mov	r3, r2
 80013f4:	71bb      	strb	r3, [r7, #6]
	// ensure same behavior as setResolution(uint8_t newResolution)
	newResolution = constrain(newResolution, 9, 12);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d905      	bls.n	8001408 <DT_SetResolution+0x28>
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	bf28      	it	cs
 8001402:	230c      	movcs	r3, #12
 8001404:	b2db      	uxtb	r3, r3
 8001406:	e000      	b.n	800140a <DT_SetResolution+0x2a>
 8001408:	2309      	movs	r3, #9
 800140a:	71fb      	strb	r3, [r7, #7]

	// return when stored value == new value
	if (DT_GetResolution(dt, deviceAddress) == newResolution)
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f87c 	bl	800150c <DT_GetResolution>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <DT_SetResolution+0x42>
		return true;
 800141e:	2301      	movs	r3, #1
 8001420:	e070      	b.n	8001504 <DT_SetResolution+0x124>

	ScratchPad scratchPad;

	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	461a      	mov	r2, r3
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff fec6 	bl	80011bc <DT_IsConnected_ScratchPad>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d065      	beq.n	8001502 <DT_SetResolution+0x122>
	{
		// DS1820 and DS18S20 have no resolution configuration register
		if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d05f      	beq.n	80014fe <DT_SetResolution+0x11e>
		{
			switch (newResolution)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d006      	beq.n	8001452 <DT_SetResolution+0x72>
 8001444:	2b0c      	cmp	r3, #12
 8001446:	dc0d      	bgt.n	8001464 <DT_SetResolution+0x84>
 8001448:	2b0a      	cmp	r3, #10
 800144a:	d008      	beq.n	800145e <DT_SetResolution+0x7e>
 800144c:	2b0b      	cmp	r3, #11
 800144e:	d003      	beq.n	8001458 <DT_SetResolution+0x78>
 8001450:	e008      	b.n	8001464 <DT_SetResolution+0x84>
			{
			case 12:
				scratchPad[CONFIGURATION] = TEMP_12_BIT;
 8001452:	237f      	movs	r3, #127	; 0x7f
 8001454:	773b      	strb	r3, [r7, #28]
				break;
 8001456:	e008      	b.n	800146a <DT_SetResolution+0x8a>
			case 11:
				scratchPad[CONFIGURATION] = TEMP_11_BIT;
 8001458:	235f      	movs	r3, #95	; 0x5f
 800145a:	773b      	strb	r3, [r7, #28]
				break;
 800145c:	e005      	b.n	800146a <DT_SetResolution+0x8a>
			case 10:
				scratchPad[CONFIGURATION] = TEMP_10_BIT;
 800145e:	233f      	movs	r3, #63	; 0x3f
 8001460:	773b      	strb	r3, [r7, #28]
				break;
 8001462:	e002      	b.n	800146a <DT_SetResolution+0x8a>
			case 9:
			default:
				scratchPad[CONFIGURATION] = TEMP_9_BIT;
 8001464:	231f      	movs	r3, #31
 8001466:	773b      	strb	r3, [r7, #28]
				break;
 8001468:	bf00      	nop
			}

			DT_WriteScratchPad(dt, deviceAddress, scratchPad);
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	461a      	mov	r2, r3
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ff08 	bl	8001288 <DT_WriteScratchPad>

			// without calculation we can always set it to max
			dt->bitResolution = max(dt->bitResolution, newResolution);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	7a1b      	ldrb	r3, [r3, #8]
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	4293      	cmp	r3, r2
 8001480:	bf38      	it	cc
 8001482:	4613      	movcc	r3, r2
 8001484:	b2da      	uxtb	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	721a      	strb	r2, [r3, #8]

			if (!skipGlobalBitResolutionCalculation && (dt->bitResolution > newResolution))
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d033      	beq.n	80014fe <DT_SetResolution+0x11e>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	7a1b      	ldrb	r3, [r3, #8]
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	429a      	cmp	r2, r3
 800149e:	d22e      	bcs.n	80014fe <DT_SetResolution+0x11e>
			{
				dt->bitResolution = newResolution;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	721a      	strb	r2, [r3, #8]

				CurrentDeviceAddress deviceAddr;

				for (int i = 0; i < dt->devices; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e022      	b.n	80014f2 <DT_SetResolution+0x112>
				{
					DT_GetAddress(dt, deviceAddr, i);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff fe4a 	bl	8001150 <DT_GetAddress>
					dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, deviceAddr));
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	7a1c      	ldrb	r4, [r3, #8]
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f820 	bl	800150c <DT_GetResolution>
 80014cc:	4603      	mov	r3, r0
 80014ce:	429c      	cmp	r4, r3
 80014d0:	d902      	bls.n	80014d8 <DT_SetResolution+0xf8>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	7a1a      	ldrb	r2, [r3, #8]
 80014d6:	e007      	b.n	80014e8 <DT_SetResolution+0x108>
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f814 	bl	800150c <DT_GetResolution>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	721a      	strb	r2, [r3, #8]
				for (int i = 0; i < dt->devices; i++)
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	3301      	adds	r3, #1
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	791b      	ldrb	r3, [r3, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	4293      	cmp	r3, r2
 80014fc:	dbd6      	blt.n	80014ac <DT_SetResolution+0xcc>
				}
			}
		}
		return true;  // new value set
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <DT_SetResolution+0x124>
	}
	return false;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	372c      	adds	r7, #44	; 0x2c
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <DT_GetResolution>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DT_GetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	// DS1820 and DS18S20 have no resolution configuration register
	if (deviceAddress[0] == DS18S20MODEL)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d101      	bne.n	8001522 <DT_GetResolution+0x16>
		return 12;
 800151e:	230c      	movs	r3, #12
 8001520:	e020      	b.n	8001564 <DT_GetResolution+0x58>

	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	461a      	mov	r2, r3
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fe46 	bl	80011bc <DT_IsConnected_ScratchPad>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d015      	beq.n	8001562 <DT_GetResolution+0x56>
	{
		switch (scratchPad[CONFIGURATION])
 8001536:	7c3b      	ldrb	r3, [r7, #16]
 8001538:	2b7f      	cmp	r3, #127	; 0x7f
 800153a:	d00a      	beq.n	8001552 <DT_GetResolution+0x46>
 800153c:	2b7f      	cmp	r3, #127	; 0x7f
 800153e:	dc10      	bgt.n	8001562 <DT_GetResolution+0x56>
 8001540:	2b5f      	cmp	r3, #95	; 0x5f
 8001542:	d008      	beq.n	8001556 <DT_GetResolution+0x4a>
 8001544:	2b5f      	cmp	r3, #95	; 0x5f
 8001546:	dc0c      	bgt.n	8001562 <DT_GetResolution+0x56>
 8001548:	2b1f      	cmp	r3, #31
 800154a:	d008      	beq.n	800155e <DT_GetResolution+0x52>
 800154c:	2b3f      	cmp	r3, #63	; 0x3f
 800154e:	d004      	beq.n	800155a <DT_GetResolution+0x4e>
 8001550:	e007      	b.n	8001562 <DT_GetResolution+0x56>
		{
		case TEMP_12_BIT:
			return 12;
 8001552:	230c      	movs	r3, #12
 8001554:	e006      	b.n	8001564 <DT_GetResolution+0x58>

		case TEMP_11_BIT:
			return 11;
 8001556:	230b      	movs	r3, #11
 8001558:	e004      	b.n	8001564 <DT_GetResolution+0x58>

		case TEMP_10_BIT:
			return 10;
 800155a:	230a      	movs	r3, #10
 800155c:	e002      	b.n	8001564 <DT_GetResolution+0x58>

		case TEMP_9_BIT:
			return 9;
 800155e:	2309      	movs	r3, #9
 8001560:	e000      	b.n	8001564 <DT_GetResolution+0x58>
		}
	}
	return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <DT_IsConversionComplete>:
{
	return dt->checkForConversion;
}

bool DT_IsConversionComplete(DallasTemperature_HandleTypeDef* dt)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	6078      	str	r0, [r7, #4]
	uint8_t b;
	OW_Send(dt->ow, (uint8_t *) OW_READ_SLOT, 0, &b, 1, 0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f107 030f 	add.w	r3, r7, #15
 800157c:	2200      	movs	r2, #0
 800157e:	9201      	str	r2, [sp, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	21ff      	movs	r1, #255	; 0xff
 8001588:	f000 fa20 	bl	80019cc <OW_Send>

	return (b == 1);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b01      	cmp	r3, #1
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <DT_RequestTemperatures>:

// sends command for all devices on the bus to perform a temperature conversion
void DT_RequestTemperatures(DallasTemperature_HandleTypeDef* dt)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6078      	str	r0, [r7, #4]
	OW_Send(dt->ow, (uint8_t *) "\xcc\x44", 2, (uint8_t *) NULL, 0, OW_NO_READ);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2300      	movs	r3, #0
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	2202      	movs	r2, #2
 80015b8:	490a      	ldr	r1, [pc, #40]	; (80015e4 <DT_RequestTemperatures+0x44>)
 80015ba:	f000 fa07 	bl	80019cc <OW_Send>

	// ASYNC mode?
	if (!dt->waitForConversion)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7a5b      	ldrb	r3, [r3, #9]
 80015c2:	f083 0301 	eor.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <DT_RequestTemperatures+0x3a>
		return;

	BlockTillConversionComplete(dt, dt->bitResolution);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7a1b      	ldrb	r3, [r3, #8]
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fc64 	bl	8000ea0 <BlockTillConversionComplete>
 80015d8:	e000      	b.n	80015dc <DT_RequestTemperatures+0x3c>
		return;
 80015da:	bf00      	nop
}
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	08008628 	.word	0x08008628

080015e8 <DT_MillisToWaitForConversion>:
	return DT_RequestTemperaturesByAddress(dt, deviceAddress);
}

// returns number of milliseconds to wait till conversion is complete (based on IC datasheet)
int16_t DT_MillisToWaitForConversion(uint8_t bitResolution)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	switch (bitResolution)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b0b      	cmp	r3, #11
 80015f6:	d00a      	beq.n	800160e <DT_MillisToWaitForConversion+0x26>
 80015f8:	2b0b      	cmp	r3, #11
 80015fa:	dc0b      	bgt.n	8001614 <DT_MillisToWaitForConversion+0x2c>
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d002      	beq.n	8001606 <DT_MillisToWaitForConversion+0x1e>
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d002      	beq.n	800160a <DT_MillisToWaitForConversion+0x22>
 8001604:	e006      	b.n	8001614 <DT_MillisToWaitForConversion+0x2c>
	{
	case 9:
		return 94;
 8001606:	235e      	movs	r3, #94	; 0x5e
 8001608:	e006      	b.n	8001618 <DT_MillisToWaitForConversion+0x30>
	case 10:
		return 188;
 800160a:	23bc      	movs	r3, #188	; 0xbc
 800160c:	e004      	b.n	8001618 <DT_MillisToWaitForConversion+0x30>
	case 11:
		return 375;
 800160e:	f240 1377 	movw	r3, #375	; 0x177
 8001612:	e001      	b.n	8001618 <DT_MillisToWaitForConversion+0x30>
	default:
		return 750;
 8001614:	f240 23ee 	movw	r3, #750	; 0x2ee
	}
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DT_SaveScratchPad>:

// Sends command to one or more devices to save values from scratchpad to EEPROM
// If optional argument deviceAddress is omitted the command is send to all devices
// Returns true if no errors were encountered, false indicates failure
bool DT_SaveScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	uint8_t query[10]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800162e:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <DT_SaveScratchPad+0xc8>)
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	ca07      	ldmia	r2, {r0, r1, r2}
 8001636:	c303      	stmia	r3!, {r0, r1}
 8001638:	801a      	strh	r2, [r3, #0]

	if (OW_Reset(dt->ow) == 0)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f990 	bl	8001964 <OW_Reset>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <DT_SaveScratchPad+0x2a>
		return false;
 800164a:	2300      	movs	r3, #0
 800164c:	e04a      	b.n	80016e4 <DT_SaveScratchPad+0xc0>

  if (deviceAddress == NULL)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d110      	bne.n	8001676 <DT_SaveScratchPad+0x52>
  {
	  query[0] = 0xCC;
 8001654:	23cc      	movs	r3, #204	; 0xcc
 8001656:	733b      	strb	r3, [r7, #12]
	  query[1] = COPYSCRATCH;
 8001658:	2348      	movs	r3, #72	; 0x48
 800165a:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 2, NULL, 0, OW_NO_READ);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f107 010c 	add.w	r1, r7, #12
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2202      	movs	r2, #2
 8001670:	f000 f9ac 	bl	80019cc <OW_Send>
 8001674:	e017      	b.n	80016a6 <DT_SaveScratchPad+0x82>
  }
  else
  {
	  query[0] = 0x55;
 8001676:	2355      	movs	r3, #85	; 0x55
 8001678:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	3301      	adds	r3, #1
 8001680:	2208      	movs	r2, #8
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f004 f887 	bl	8005798 <memcpy>
	  query[9] = COPYSCRATCH;
 800168a:	2348      	movs	r3, #72	; 0x48
 800168c:	757b      	strb	r3, [r7, #21]
	  OW_Send(dt->ow, query, 10, NULL, 0, OW_NO_READ);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	f107 010c 	add.w	r1, r7, #12
 8001696:	23ff      	movs	r3, #255	; 0xff
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	220a      	movs	r2, #10
 80016a2:	f000 f993 	bl	80019cc <OW_Send>
  }

  // Specification: NV Write Cycle Time is typically 2ms, max 10ms
  // Waiting 20ms to allow for sensors that take longer in practice
  if (!dt->parasite)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	799b      	ldrb	r3, [r3, #6]
 80016aa:	f083 0301 	eor.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <DT_SaveScratchPad+0x98>
  {
    HAL_Delay(20);
 80016b4:	2014      	movs	r0, #20
 80016b6:	f001 fa31 	bl	8002b1c <HAL_Delay>
 80016ba:	e008      	b.n	80016ce <DT_SaveScratchPad+0xaa>
  }
  else
  {

	ActivateExternalPullup(dt);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fc2d 	bl	8000f1c <ActivateExternalPullup>
    HAL_Delay(20);
 80016c2:	2014      	movs	r0, #20
 80016c4:	f001 fa2a 	bl	8002b1c <HAL_Delay>
    DeactivateExternalPullup(dt);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fc3b 	bl	8000f44 <DeactivateExternalPullup>
  }

  return OW_Reset(dt->ow) == 1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f946 	bl	8001964 <OW_Reset>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b01      	cmp	r3, #1
 80016dc:	bf0c      	ite	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	2300      	movne	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	08008638 	.word	0x08008638

080016f0 <DT_GetTempCByIndex>:
  return dt->autoSaveScratchPad;
}

// Fetch temperature for device index
float DT_GetTempCByIndex(DallasTemperature_HandleTypeDef* dt, uint8_t deviceIndex)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	CurrentDeviceAddress deviceAddress;

	if (!DT_GetAddress(dt, deviceAddress, deviceIndex))
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fd23 	bl	8001150 <DT_GetAddress>
 800170a:	4603      	mov	r3, r0
 800170c:	f083 0301 	eor.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <DT_GetTempCByIndex+0x2c>
	{
		return DEVICE_DISCONNECTED_C;
 8001716:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001738 <DT_GetTempCByIndex+0x48>
 800171a:	e007      	b.n	800172c <DT_GetTempCByIndex+0x3c>
	}

	return DT_GetTempC(dt, (uint8_t*) deviceAddress);
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f860 	bl	80017e8 <DT_GetTempC>
 8001728:	eef0 7a40 	vmov.f32	s15, s0
}
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	c2fe0000 	.word	0xc2fe0000

0800173c <DT_CalculateTemperature>:
	return DT_GetTempF(dt, (uint8_t*) deviceAddress);
}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DT_CalculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	02db      	lsls	r3, r3, #11
 800174e:	b21a      	sxth	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	81fb      	strh	r3, [r7, #14]
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b10      	cmp	r3, #16
 8001762:	d11a      	bne.n	800179a <DT_CalculateTemperature+0x5e>
	{
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 + (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) / scratchPad[COUNT_PER_C]);
 8001764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	b29b      	uxth	r3, r3
 800176c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001770:	b29a      	uxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3307      	adds	r3, #7
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	3306      	adds	r3, #6
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	1acb      	subs	r3, r1, r3
 8001782:	01db      	lsls	r3, r3, #7
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	3107      	adds	r1, #7
 8001788:	7809      	ldrb	r1, [r1, #0]
 800178a:	fb93 f3f1 	sdiv	r3, r3, r1
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	3b10      	subs	r3, #16
 8001796:	b29b      	uxth	r3, r3
 8001798:	81fb      	strh	r3, [r7, #14]
	}

	return fpTemperature;
 800179a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <DT_GetTemp>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DT_GetTemp(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	461a      	mov	r2, r3
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fcfc 	bl	80011bc <DT_IsConnected_ScratchPad>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <DT_GetTemp+0x2e>
		return DT_CalculateTemperature(deviceAddress, scratchPad);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	6838      	ldr	r0, [r7, #0]
 80017d2:	f7ff ffb3 	bl	800173c <DT_CalculateTemperature>
 80017d6:	4603      	mov	r3, r0
 80017d8:	e000      	b.n	80017dc <DT_GetTemp+0x30>
	return DEVICE_DISCONNECTED_RAW;
 80017da:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <DT_GetTemp+0x38>)
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	ffffe480 	.word	0xffffe480

080017e8 <DT_GetTempC>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DT_GetTempC(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	return DT_RawToCelsius(DT_GetTemp(dt, deviceAddress));
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffd9 	bl	80017ac <DT_GetTemp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f807 	bl	8001810 <DT_RawToCelsius>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
}
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <DT_RawToCelsius>:
	return (fahrenheit - 32) * 0.555555556;
}

// convert from raw to Celsius
float DT_RawToCelsius(int16_t raw)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	if (raw <= DEVICE_DISCONNECTED_RAW)
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	f513 5fdc 	cmn.w	r3, #7040	; 0x1b80
 8001822:	dc02      	bgt.n	800182a <DT_RawToCelsius+0x1a>
		return DEVICE_DISCONNECTED_C;
 8001824:	eddf 7a09 	vldr	s15, [pc, #36]	; 800184c <DT_RawToCelsius+0x3c>
 8001828:	e009      	b.n	800183e <DT_RawToCelsius+0x2e>
	// C = RAW/128
	return (float) raw * 0.0078125;
 800182a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001850 <DT_RawToCelsius+0x40>
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	c2fe0000 	.word	0xc2fe0000
 8001850:	3c000000 	.word	0x3c000000

08001854 <OW_UART_Init>:
#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t num_bits);
#endif

static HAL_StatusTypeDef OW_UART_Init(OneWire_HandleTypeDef* ow, uint32_t baudRate)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	UART_HandleTypeDef* HUARTx = ow->huart;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
//	GPIO_InitStruct.Pin = GPIO_PIN_10;
//	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HUARTx->Init.BaudRate = baudRate;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	605a      	str	r2, [r3, #4]
    HUARTx->Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    HUARTx->Init.StopBits = UART_STOPBITS_1;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    HUARTx->Init.Parity = UART_PARITY_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
    HUARTx->Init.Mode = UART_MODE_TX_RX;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
    HUARTx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
    HUARTx->Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
	return HAL_HalfDuplex_Init(HUARTx);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f002 fcf3 	bl	800427a <HAL_HalfDuplex_Init>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <OW_ToBits>:

static void OW_ToBits(uint8_t owByte, uint8_t *owBits)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	6039      	str	r1, [r7, #0]
 80018a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e014      	b.n	80018da <OW_ToBits+0x3c>
	{
		if (owByte & 0x01)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <OW_ToBits+0x24>
		{
			*owBits = OW_1;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	22ff      	movs	r2, #255	; 0xff
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e002      	b.n	80018c8 <OW_ToBits+0x2a>
		}
		else
		{
			*owBits = OW_0;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
		}
		owBits++;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	603b      	str	r3, [r7, #0]
		owByte = owByte >> 1;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d9e7      	bls.n	80018b0 <OW_ToBits+0x12>
	}
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <OW_ToByte>:

static uint8_t OW_ToByte(uint8_t *owBits)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	uint8_t owByte, i;
	owByte = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	73bb      	strb	r3, [r7, #14]
 80018fe:	e010      	b.n	8001922 <OW_ToByte+0x34>
	{
		owByte = owByte >> 1;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
		if (*owBits == OW_R_1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d103      	bne.n	8001916 <OW_ToByte+0x28>
		{
			owByte |= 0x80;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001914:	73fb      	strb	r3, [r7, #15]
		}
		owBits++;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	3301      	adds	r3, #1
 8001920:	73bb      	strb	r3, [r7, #14]
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	2b07      	cmp	r3, #7
 8001926:	d9eb      	bls.n	8001900 <OW_ToByte+0x12>
	}

	return owByte;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <OW_Begin>:
{
	return OW_Begin(ow, huart);
}

HAL_StatusTypeDef OW_Begin(OneWire_HandleTypeDef* ow, UART_HandleTypeDef* huart)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	ow->huart = huart;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status = OW_UART_Init(ow, 9600);
 8001946:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff82 	bl	8001854 <OW_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
#if ONEWIRE_SEARCH
	OW_ResetSearch(ow);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f8bc 	bl	8001ad2 <OW_ResetSearch>
#endif
	return status;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <OW_Reset>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OW_Reset(OneWire_HandleTypeDef* ow)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	uint8_t owPresence = 0xf0;
 800196c:	23f0      	movs	r3, #240	; 0xf0
 800196e:	73fb      	strb	r3, [r7, #15]

	OW_UART_Init(ow, 9600);
 8001970:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff6d 	bl	8001854 <OW_UART_Init>

	HAL_UART_Receive_DMA(ow->huart, &owPresence, 1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f107 010f 	add.w	r1, r7, #15
 8001982:	2201      	movs	r2, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fddd 	bl	8004544 <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(ow->huart, &owPresence, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(ow->huart, &owPresence, 1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f107 010f 	add.w	r1, r7, #15
 8001992:	2201      	movs	r2, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fd57 	bl	8004448 <HAL_UART_Transmit_DMA>

	/*## Wait for the end of the transfer ###################################*/
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 800199a:	e000      	b.n	800199e <OW_Reset+0x3a>
	{
		__NOP();
 800199c:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f8ca 	bl	8004b3c <HAL_UART_GetState>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d1f6      	bne.n	800199c <OW_Reset+0x38>
	}

	OW_UART_Init(ow, 115200);
 80019ae:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff4e 	bl	8001854 <OW_UART_Init>

	if (owPresence != 0xf0)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2bf0      	cmp	r3, #240	; 0xf0
 80019bc:	d001      	beq.n	80019c2 <OW_Reset+0x5e>
	{
		return OW_OK;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <OW_Reset+0x60>
	}

	return OW_NO_DEVICE;
 80019c2:	2303      	movs	r3, #3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <OW_Send>:
// dLen - the length of the read buffer. Read no more than this length
// readStart - which transmission character to start reading from (numbered from 0)
// you can specify OW_NO_READ, then you don't need to specify data and dLen
//-----------------------------------------------------------------------------
uint8_t OW_Send(OneWire_HandleTypeDef* ow, uint8_t *command, uint8_t cLen, uint8_t *data, uint8_t dLen, uint8_t readStart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	71fb      	strb	r3, [r7, #7]
	if (OW_Reset(ow) == OW_NO_DEVICE)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7ff ffc1 	bl	8001964 <OW_Reset>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d145      	bne.n	8001a74 <OW_Send+0xa8>
	{
		return OW_NO_DEVICE;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e047      	b.n	8001a7c <OW_Send+0xb0>
	}

	while (cLen > 0)
	{

		OW_ToBits(*command, ow->ROM_NO);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f7ff ff51 	bl	800189e <OW_ToBits>
		command++;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
		cLen--;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	2208      	movs	r2, #8
 8001a12:	4619      	mov	r1, r3
 8001a14:	f002 fd96 	bl	8004544 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	2208      	movs	r2, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	f002 fd10 	bl	8004448 <HAL_UART_Transmit_DMA>

		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001a28:	e000      	b.n	8001a2c <OW_Send+0x60>
		{
			__NOP();
 8001a2a:	bf00      	nop
		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f003 f883 	bl	8004b3c <HAL_UART_GetState>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d1f6      	bne.n	8001a2a <OW_Send+0x5e>
		}

		if (readStart == 0 && dLen > 0)
 8001a3c:	7f3b      	ldrb	r3, [r7, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d112      	bne.n	8001a68 <OW_Send+0x9c>
 8001a42:	7e3b      	ldrb	r3, [r7, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00f      	beq.n	8001a68 <OW_Send+0x9c>
		{
			*data = OW_ToByte(ow->ROM_NO);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff4e 	bl	80018ee <OW_ToByte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	701a      	strb	r2, [r3, #0]
			data++;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]
			dLen--;
 8001a60:	7e3b      	ldrb	r3, [r7, #24]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	763b      	strb	r3, [r7, #24]
 8001a66:	e005      	b.n	8001a74 <OW_Send+0xa8>
		}
		else
		{
			if (readStart != OW_NO_READ)
 8001a68:	7f3b      	ldrb	r3, [r7, #28]
 8001a6a:	2bff      	cmp	r3, #255	; 0xff
 8001a6c:	d002      	beq.n	8001a74 <OW_Send+0xa8>
			{
				readStart--;
 8001a6e:	7f3b      	ldrb	r3, [r7, #28]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	773b      	strb	r3, [r7, #28]
	while (cLen > 0)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1b8      	bne.n	80019ec <OW_Send+0x20>
			}
		}
	}

	return OW_OK;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <OW_SendBits>:

#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t numBits)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, numBits);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	b292      	uxth	r2, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f002 fd51 	bl	8004544 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, numBits);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	b292      	uxth	r2, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f002 fcca 	bl	8004448 <HAL_UART_Transmit_DMA>

	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001ab4:	e000      	b.n	8001ab8 <OW_SendBits+0x34>
	{
		__NOP();
 8001ab6:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 f83d 	bl	8004b3c <HAL_UART_GetState>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d1f6      	bne.n	8001ab6 <OW_SendBits+0x32>
	}
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <OW_ResetSearch>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OW_ResetSearch(OneWire_HandleTypeDef* ow)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  // reset the search state
  ow->LastDiscrepancy = 0;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	731a      	strb	r2, [r3, #12]
  ow->LastDeviceFlag = false;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	739a      	strb	r2, [r3, #14]
  ow->LastFamilyDiscrepancy = 0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	735a      	strb	r2, [r3, #13]
  for(int i = 7; ; i--)
 8001aec:	2307      	movs	r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]
  {
    ow->ROM_NO[i] = 0;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	3304      	adds	r3, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
    if ( i == 0) break;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <OW_ResetSearch+0x38>
  for(int i = 7; ; i--)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
    ow->ROM_NO[i] = 0;
 8001b08:	e7f2      	b.n	8001af0 <OW_ResetSearch+0x1e>
    if ( i == 0) break;
 8001b0a:	bf00      	nop
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <OW_Search>:
   ow->LastFamilyDiscrepancy = 0;
   ow->LastDeviceFlag = false;
}

uint8_t OW_Search(OneWire_HandleTypeDef* ow, uint8_t *buf, uint8_t num)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	4613      	mov	r3, r2
 8001b24:	71fb      	strb	r3, [r7, #7]

	uint8_t found = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	77fb      	strb	r3, [r7, #31]
	uint8_t *lastDevice = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
	uint8_t *curDevice = buf;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	617b      	str	r3, [r7, #20]
	uint8_t numBit, lastCollision, currentCollision, currentSelection;

	lastCollision = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	74bb      	strb	r3, [r7, #18]

	while (found < num)
 8001b36:	e0bf      	b.n	8001cb8 <OW_Search+0x1a0>
	{
		numBit = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	74fb      	strb	r3, [r7, #19]
		currentCollision = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	747b      	strb	r3, [r7, #17]

		OW_Send(ow, (uint8_t*)"\xf0", 1, NULL, 0, OW_NO_READ);
 8001b40:	23ff      	movs	r3, #255	; 0xff
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	495f      	ldr	r1, [pc, #380]	; (8001ccc <OW_Search+0x1b4>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f7ff ff3c 	bl	80019cc <OW_Send>

		for (numBit = 1; numBit <= 64; numBit++)
 8001b54:	2301      	movs	r3, #1
 8001b56:	74fb      	strb	r3, [r7, #19]
 8001b58:	e09b      	b.n	8001c92 <OW_Search+0x17a>
		{
			OW_ToBits(OW_READ_SLOT, ow->ROM_NO);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	20ff      	movs	r0, #255	; 0xff
 8001b62:	f7ff fe9c 	bl	800189e <OW_ToBits>
			OW_SendBits(ow, 2);
 8001b66:	2102      	movs	r1, #2
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff ff8b 	bl	8001a84 <OW_SendBits>

			if (ow->ROM_NO[0] == OW_R_1)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	d108      	bne.n	8001b88 <OW_Search+0x70>
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	795b      	ldrb	r3, [r3, #5]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d101      	bne.n	8001b82 <OW_Search+0x6a>
				{
					return found;
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	e0a0      	b.n	8001cc4 <OW_Search+0x1ac>
				}
				else
				{
					currentSelection = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	743b      	strb	r3, [r7, #16]
 8001b86:	e037      	b.n	8001bf8 <OW_Search+0xe0>
				}
			}
			else
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	795b      	ldrb	r3, [r3, #5]
 8001b8c:	2bff      	cmp	r3, #255	; 0xff
 8001b8e:	d102      	bne.n	8001b96 <OW_Search+0x7e>
				{
					currentSelection = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	743b      	strb	r3, [r7, #16]
 8001b94:	e030      	b.n	8001bf8 <OW_Search+0xe0>
				}
				else
				{
					if (numBit < lastCollision)
 8001b96:	7cfa      	ldrb	r2, [r7, #19]
 8001b98:	7cbb      	ldrb	r3, [r7, #18]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d21d      	bcs.n	8001bda <OW_Search+0xc2>
					{
							if (lastDevice[(numBit - 1) >> 3] & 1 << ((numBit - 1) & 0x07))
 8001b9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	10db      	asrs	r3, r3, #3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	7cfb      	ldrb	r3, [r7, #19]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	fa42 f303 	asr.w	r3, r2, r3
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <OW_Search+0xbc>
							{
							currentSelection = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	743b      	strb	r3, [r7, #16]

								if (currentCollision < numBit)
 8001bc6:	7c7a      	ldrb	r2, [r7, #17]
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d214      	bcs.n	8001bf8 <OW_Search+0xe0>
								{
										currentCollision = numBit;
 8001bce:	7cfb      	ldrb	r3, [r7, #19]
 8001bd0:	747b      	strb	r3, [r7, #17]
 8001bd2:	e011      	b.n	8001bf8 <OW_Search+0xe0>
								}
							}
							else
							{
								currentSelection = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	743b      	strb	r3, [r7, #16]
 8001bd8:	e00e      	b.n	8001bf8 <OW_Search+0xe0>
							}
					}
					else
					{
						if (numBit == lastCollision)
 8001bda:	7cfa      	ldrb	r2, [r7, #19]
 8001bdc:	7cbb      	ldrb	r3, [r7, #18]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d102      	bne.n	8001be8 <OW_Search+0xd0>
						{
								currentSelection = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	743b      	strb	r3, [r7, #16]
 8001be6:	e007      	b.n	8001bf8 <OW_Search+0xe0>
						}
						else
						{
							currentSelection = 1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	743b      	strb	r3, [r7, #16]

							if (currentCollision < numBit)
 8001bec:	7c7a      	ldrb	r2, [r7, #17]
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d201      	bcs.n	8001bf8 <OW_Search+0xe0>
							{
									currentCollision = numBit;
 8001bf4:	7cfb      	ldrb	r3, [r7, #19]
 8001bf6:	747b      	strb	r3, [r7, #17]
						}
					}
				}
			}

			if (currentSelection == 1)
 8001bf8:	7c3b      	ldrb	r3, [r7, #16]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d120      	bne.n	8001c40 <OW_Search+0x128>
			{
				curDevice[(numBit - 1) >> 3] |= 1 << ((numBit - 1) & 0x07);
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	10db      	asrs	r3, r3, #3
 8001c04:	461a      	mov	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b25a      	sxtb	r2, r3
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b25a      	sxtb	r2, r3
 8001c22:	7cfb      	ldrb	r3, [r7, #19]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	10db      	asrs	r3, r3, #3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x01, ow->ROM_NO);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3304      	adds	r3, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff fe30 	bl	800189e <OW_ToBits>
 8001c3e:	e021      	b.n	8001c84 <OW_Search+0x16c>
			}
			else
			{
				curDevice[(numBit - 1) >> 3] &= ~(1 << ((numBit - 1) & 0x07));
 8001c40:	7cfb      	ldrb	r3, [r7, #19]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	10db      	asrs	r3, r3, #3
 8001c46:	461a      	mov	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b25a      	sxtb	r2, r3
 8001c50:	7cfb      	ldrb	r3, [r7, #19]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	b25a      	sxtb	r2, r3
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	10db      	asrs	r3, r3, #3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	440b      	add	r3, r1
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x00, ow->ROM_NO);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff fe0d 	bl	800189e <OW_ToBits>
			}

			OW_SendBits(ow, 1);
 8001c84:	2101      	movs	r1, #1
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fefc 	bl	8001a84 <OW_SendBits>
		for (numBit = 1; numBit <= 64; numBit++)
 8001c8c:	7cfb      	ldrb	r3, [r7, #19]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	74fb      	strb	r3, [r7, #19]
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	f67f af60 	bls.w	8001b5a <OW_Search+0x42>
		}

		found++;
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	77fb      	strb	r3, [r7, #31]
		lastDevice = curDevice;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	61bb      	str	r3, [r7, #24]
		curDevice += 8;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	617b      	str	r3, [r7, #20]
		if (currentCollision == 0)
 8001caa:	7c7b      	ldrb	r3, [r7, #17]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <OW_Search+0x19c>
		{
			return found;
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	e007      	b.n	8001cc4 <OW_Search+0x1ac>
		}

		lastCollision = currentCollision;
 8001cb4:	7c7b      	ldrb	r3, [r7, #17]
 8001cb6:	74bb      	strb	r3, [r7, #18]
	while (found < num)
 8001cb8:	7ffa      	ldrb	r2, [r7, #31]
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f4ff af3b 	bcc.w	8001b38 <OW_Search+0x20>
	}

        return found;
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	08008644 	.word	0x08008644

08001cd0 <OW_Crc8>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OW_Crc8(const uint8_t *addr, uint8_t len)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]

	while (len--)
 8001ce0:	e015      	b.n	8001d0e <OW_Crc8+0x3e>
	{
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	4053      	eors	r3, r2
 8001cee:	73fb      	strb	r3, [r7, #15]
		crc = dscrc2x16_table[crc & 0x0f] ^ dscrc2x16_table[16 + ((crc >> 4) & 0x0f)];
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <OW_Crc8+0x58>)
 8001cf8:	5cd2      	ldrb	r2, [r2, r3]
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	3310      	adds	r3, #16
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <OW_Crc8+0x58>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	4053      	eors	r3, r2
 8001d0c:	73fb      	strb	r3, [r7, #15]
	while (len--)
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	1e5a      	subs	r2, r3, #1
 8001d12:	70fa      	strb	r2, [r7, #3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e4      	bne.n	8001ce2 <OW_Crc8+0x12>
	}

	return crc;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	080089a8 	.word	0x080089a8

08001d2c <printAddress>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// function to print a device address
void printAddress(CurrentDeviceAddress deviceAddress) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 6; i++) {  // Указал количество датчиков 7шт.
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e00d      	b.n	8001d56 <printAddress+0x2a>
		printf("0x%02X ", deviceAddress[i]);
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4808      	ldr	r0, [pc, #32]	; (8001d68 <printAddress+0x3c>)
 8001d46:	f004 f9a7 	bl	8006098 <iprintf>
		HAL_Delay(50); //Сделал паузу.
 8001d4a:	2032      	movs	r0, #50	; 0x32
 8001d4c:	f000 fee6 	bl	8002b1c <HAL_Delay>
	for (uint8_t i = 0; i < 6; i++) {  // Указал количество датчиков 7шт.
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d9ee      	bls.n	8001d3a <printAddress+0xe>
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	08008648 	.word	0x08008648

08001d6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b09f      	sub	sp, #124	; 0x7c
 8001d70:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d72:	f000 fe61 	bl	8002a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d76:	f000 fac7 	bl	8002308 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d7a:	f000 fbab 	bl	80024d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001d7e:	f000 fb57 	bl	8002430 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8001d82:	f000 fb7f 	bl	8002484 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8001d86:	f000 fb29 	bl	80023dc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	//printf("[%8lu] Debug UART1 is OK!\r\n", HAL_GetTick());
	char msg[100];
	sprintf(msg, "[%8lu] Debug UART1 is OK!\r\n", HAL_GetTick());
 8001d8a:	f000 febb 	bl	8002b04 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4919      	ldr	r1, [pc, #100]	; (8001dfc <main+0x90>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fa0c 	bl	80061b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fa15 	bl	80001d0 <strlen>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	f107 010c 	add.w	r1, r7, #12
 8001dae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001db2:	4813      	ldr	r0, [pc, #76]	; (8001e00 <main+0x94>)
 8001db4:	f002 fab6 	bl	8004324 <HAL_UART_Transmit>

	OW_Begin(&ow, &huart1);
 8001db8:	4912      	ldr	r1, [pc, #72]	; (8001e04 <main+0x98>)
 8001dba:	4813      	ldr	r0, [pc, #76]	; (8001e08 <main+0x9c>)
 8001dbc:	f7ff fdbb 	bl	8001936 <OW_Begin>
	if (OW_Reset(&ow) == OW_OK) {
 8001dc0:	4811      	ldr	r0, [pc, #68]	; (8001e08 <main+0x9c>)
 8001dc2:	f7ff fdcf 	bl	8001964 <OW_Reset>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d121      	bne.n	8001e10 <main+0xa4>
		//printf("[%8lu] OneWire devices are present :)\r\n", HAL_GetTick());
		sprintf(msg, "[%8lu] OneWire devices are present :)\r\n",HAL_GetTick());
 8001dcc:	f000 fe9a 	bl	8002b04 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	490d      	ldr	r1, [pc, #52]	; (8001e0c <main+0xa0>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f9eb 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe f9f4 	bl	80001d0 <strlen>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f107 010c 	add.w	r1, r7, #12
 8001df0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <main+0x94>)
 8001df6:	f002 fa95 	bl	8004324 <HAL_UART_Transmit>
 8001dfa:	e020      	b.n	8001e3e <main+0xd2>
 8001dfc:	08008650 	.word	0x08008650
 8001e00:	20000318 	.word	0x20000318
 8001e04:	200002d4 	.word	0x200002d4
 8001e08:	20000204 	.word	0x20000204
 8001e0c:	0800866c 	.word	0x0800866c
	} else {
		//printf("[%8lu] OneWire no devices :(\r\n", HAL_GetTick());
		sprintf(msg, "[%8lu] OneWire no devices :\r\n", HAL_GetTick());
 8001e10:	f000 fe78 	bl	8002b04 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	49da      	ldr	r1, [pc, #872]	; (8002184 <main+0x418>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 f9c9 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe f9d2 	bl	80001d0 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f107 010c 	add.w	r1, r7, #12
 8001e34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e38:	48d3      	ldr	r0, [pc, #844]	; (8002188 <main+0x41c>)
 8001e3a:	f002 fa73 	bl	8004324 <HAL_UART_Transmit>
	}
	DT_SetOneWire(&dt, &ow);
 8001e3e:	49d3      	ldr	r1, [pc, #844]	; (800218c <main+0x420>)
 8001e40:	48d3      	ldr	r0, [pc, #844]	; (8002190 <main+0x424>)
 8001e42:	f7ff f893 	bl	8000f6c <DT_SetOneWire>
	// arrays to hold device address
	CurrentDeviceAddress insideThermometer;
	// locate devices on the bus
	//printf("[%8lu] Locating devices...", HAL_GetTick());
	sprintf(msg, "[%8lu] Locating devices...", HAL_GetTick());
 8001e46:	f000 fe5d 	bl	8002b04 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	49d0      	ldr	r1, [pc, #832]	; (8002194 <main+0x428>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f9ae 	bl	80061b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe f9b7 	bl	80001d0 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	f107 010c 	add.w	r1, r7, #12
 8001e6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e6e:	48c6      	ldr	r0, [pc, #792]	; (8002188 <main+0x41c>)
 8001e70:	f002 fa58 	bl	8004324 <HAL_UART_Transmit>
	DT_Begin(&dt);
 8001e74:	48c6      	ldr	r0, [pc, #792]	; (8002190 <main+0x424>)
 8001e76:	f7ff f89f 	bl	8000fb8 <DT_Begin>
	//printf("[%8lu] Found %d devices.\r\n", HAL_GetTick(), DT_GetDeviceCount(&dt));
	sprintf(msg, "[%8lu] Found %d devices.\r\n", HAL_GetTick(),DT_GetDeviceCount(&dt));
 8001e7a:	f000 fe43 	bl	8002b04 <HAL_GetTick>
 8001e7e:	4604      	mov	r4, r0
 8001e80:	48c3      	ldr	r0, [pc, #780]	; (8002190 <main+0x424>)
 8001e82:	f7ff f91d 	bl	80010c0 <DT_GetDeviceCount>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f107 000c 	add.w	r0, r7, #12
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	49c2      	ldr	r1, [pc, #776]	; (8002198 <main+0x42c>)
 8001e90:	f004 f990 	bl	80061b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe f999 	bl	80001d0 <strlen>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	f107 010c 	add.w	r1, r7, #12
 8001ea6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eaa:	48b7      	ldr	r0, [pc, #732]	; (8002188 <main+0x41c>)
 8001eac:	f002 fa3a 	bl	8004324 <HAL_UART_Transmit>
	if (!DT_GetAddress(&dt, insideThermometer, 0)) {
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	48b6      	ldr	r0, [pc, #728]	; (8002190 <main+0x424>)
 8001eb8:	f7ff f94a 	bl	8001150 <DT_GetAddress>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d034      	beq.n	8001f32 <main+0x1c6>
		//printf("[%8lu] Unable to find address for Device 0\r\n", HAL_GetTick());
		sprintf(msg, "[%8lu] Unable to find address for Device 0\r\n",HAL_GetTick());
 8001ec8:	f000 fe1c 	bl	8002b04 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	49b2      	ldr	r1, [pc, #712]	; (800219c <main+0x430>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 f96d 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f976 	bl	80001d0 <strlen>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f107 010c 	add.w	r1, r7, #12
 8001eec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ef0:	48a5      	ldr	r0, [pc, #660]	; (8002188 <main+0x41c>)
 8001ef2:	f002 fa17 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Device 0 Address: ", HAL_GetTick());
		sprintf(msg, "[%8lu] Device 0 Address: \r\n", HAL_GetTick());
 8001ef6:	f000 fe05 	bl	8002b04 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	49a7      	ldr	r1, [pc, #668]	; (80021a0 <main+0x434>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 f956 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe f95f 	bl	80001d0 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	f107 010c 	add.w	r1, r7, #12
 8001f1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f1e:	489a      	ldr	r0, [pc, #616]	; (8002188 <main+0x41c>)
 8001f20:	f002 fa00 	bl	8004324 <HAL_UART_Transmit>
		printAddress(insideThermometer);
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff00 	bl	8001d2c <printAddress>
		printf("\r\n");
 8001f2c:	489d      	ldr	r0, [pc, #628]	; (80021a4 <main+0x438>)
 8001f2e:	f004 f939 	bl	80061a4 <puts>
	}
	// set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
	DT_SetResolution(&dt, insideThermometer, 12, true);
 8001f32:	1d39      	adds	r1, r7, #4
 8001f34:	2301      	movs	r3, #1
 8001f36:	220c      	movs	r2, #12
 8001f38:	4895      	ldr	r0, [pc, #596]	; (8002190 <main+0x424>)
 8001f3a:	f7ff fa51 	bl	80013e0 <DT_SetResolution>
	//printf("[%8lu] Device 0 Resolution: %d\r\n", HAL_GetTick(), DT_GetResolution(&dt, insideThermometer));
	sprintf(msg, "[%8lu] Device 0 Resolution: %d\r\n", HAL_GetTick(),DT_GetResolution(&dt, insideThermometer));
 8001f3e:	f000 fde1 	bl	8002b04 <HAL_GetTick>
 8001f42:	4604      	mov	r4, r0
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4891      	ldr	r0, [pc, #580]	; (8002190 <main+0x424>)
 8001f4a:	f7ff fadf 	bl	800150c <DT_GetResolution>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f107 000c 	add.w	r0, r7, #12
 8001f54:	4622      	mov	r2, r4
 8001f56:	4994      	ldr	r1, [pc, #592]	; (80021a8 <main+0x43c>)
 8001f58:	f004 f92c 	bl	80061b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f935 	bl	80001d0 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f107 010c 	add.w	r1, r7, #12
 8001f6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f72:	4885      	ldr	r0, [pc, #532]	; (8002188 <main+0x41c>)
 8001f74:	f002 f9d6 	bl	8004324 <HAL_UART_Transmit>

	if (!DT_GetAddress(&dt, insideThermometer, 1)) {
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4884      	ldr	r0, [pc, #528]	; (8002190 <main+0x424>)
 8001f80:	f7ff f8e6 	bl	8001150 <DT_GetAddress>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d057      	beq.n	8002040 <main+0x2d4>
		//printf("[%8lu] Unable to find address for Device 1\r\n", HAL_GetTick());
		sprintf(msg, "[%8lu] Unable to find address for Device 1\r\n",HAL_GetTick());
 8001f90:	f000 fdb8 	bl	8002b04 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4984      	ldr	r1, [pc, #528]	; (80021ac <main+0x440>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 f909 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f912 	bl	80001d0 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f107 010c 	add.w	r1, r7, #12
 8001fb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fb8:	4873      	ldr	r0, [pc, #460]	; (8002188 <main+0x41c>)
 8001fba:	f002 f9b3 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Device 1 Address: ", HAL_GetTick());
		sprintf(msg, "[%8lu] Device 1 Address: \r\n", HAL_GetTick());
 8001fbe:	f000 fda1 	bl	8002b04 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4979      	ldr	r1, [pc, #484]	; (80021b0 <main+0x444>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 f8f2 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f8fb 	bl	80001d0 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	f107 010c 	add.w	r1, r7, #12
 8001fe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fe6:	4868      	ldr	r0, [pc, #416]	; (8002188 <main+0x41c>)
 8001fe8:	f002 f99c 	bl	8004324 <HAL_UART_Transmit>
		printAddress(insideThermometer);
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe9c 	bl	8001d2c <printAddress>
		printf("\r\n");
 8001ff4:	486b      	ldr	r0, [pc, #428]	; (80021a4 <main+0x438>)
 8001ff6:	f004 f8d5 	bl	80061a4 <puts>
		// set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
		DT_SetResolution(&dt, insideThermometer, 12, true);
 8001ffa:	1d39      	adds	r1, r7, #4
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	220c      	movs	r2, #12
 8002000:	4863      	ldr	r0, [pc, #396]	; (8002190 <main+0x424>)
 8002002:	f7ff f9ed 	bl	80013e0 <DT_SetResolution>
		//printf("[%8lu] Device 1 Resolution: %d\r\n", HAL_GetTick(), DT_GetResolution(&dt, insideThermometer));
		sprintf(msg, "[%8lu] Device 1 Resolution: %d\r\n", HAL_GetTick(),DT_GetResolution(&dt, insideThermometer));
 8002006:	f000 fd7d 	bl	8002b04 <HAL_GetTick>
 800200a:	4604      	mov	r4, r0
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4619      	mov	r1, r3
 8002010:	485f      	ldr	r0, [pc, #380]	; (8002190 <main+0x424>)
 8002012:	f7ff fa7b 	bl	800150c <DT_GetResolution>
 8002016:	4603      	mov	r3, r0
 8002018:	f107 000c 	add.w	r0, r7, #12
 800201c:	4622      	mov	r2, r4
 800201e:	4965      	ldr	r1, [pc, #404]	; (80021b4 <main+0x448>)
 8002020:	f004 f8c8 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f8d1 	bl	80001d0 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	b29a      	uxth	r2, r3
 8002032:	f107 010c 	add.w	r1, r7, #12
 8002036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800203a:	4853      	ldr	r0, [pc, #332]	; (8002188 <main+0x41c>)
 800203c:	f002 f972 	bl	8004324 <HAL_UART_Transmit>

		/* USER CODE BEGIN 3 */
		// call DT_RequestTemperatures(&dt) to issue a global temperature
		// request to all devices on the bus
		//printf("[%8lu] Requesting temperatures...", HAL_GetTick());
		sprintf(msg, "[%8lu] Requesting temperatures...", HAL_GetTick());
 8002040:	f000 fd60 	bl	8002b04 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	495b      	ldr	r1, [pc, #364]	; (80021b8 <main+0x44c>)
 800204c:	4618      	mov	r0, r3
 800204e:	f004 f8b1 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe f8ba 	bl	80001d0 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	b29a      	uxth	r2, r3
 8002060:	f107 010c 	add.w	r1, r7, #12
 8002064:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002068:	4847      	ldr	r0, [pc, #284]	; (8002188 <main+0x41c>)
 800206a:	f002 f95b 	bl	8004324 <HAL_UART_Transmit>
		DT_RequestTemperatures(&dt); // Send the command to get temperatures
 800206e:	4848      	ldr	r0, [pc, #288]	; (8002190 <main+0x424>)
 8002070:	f7ff fa96 	bl	80015a0 <DT_RequestTemperatures>
		//printf("\r\n[%8lu] DONE\r\n", HAL_GetTick());
		sprintf(msg, "\r\n[%8lu] DONE\r\n", HAL_GetTick());
 8002074:	f000 fd46 	bl	8002b04 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	494f      	ldr	r1, [pc, #316]	; (80021bc <main+0x450>)
 8002080:	4618      	mov	r0, r3
 8002082:	f004 f897 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe f8a0 	bl	80001d0 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	f107 010c 	add.w	r1, r7, #12
 8002098:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800209c:	483a      	ldr	r0, [pc, #232]	; (8002188 <main+0x41c>)
 800209e:	f002 f941 	bl	8004324 <HAL_UART_Transmit>
		// After we got the temperatures, we can print them here.
		// We use the function ByIndex, and as an example get the temperature from the first sensor only.
		//printf("[%8lu] Temperature for the device 1 (index 0) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 0));
		sprintf(msg,"[%8lu] Temperature for the device 1 (index 0) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 0));
 80020a2:	f000 fd2f 	bl	8002b04 <HAL_GetTick>
 80020a6:	4604      	mov	r4, r0
 80020a8:	2100      	movs	r1, #0
 80020aa:	4839      	ldr	r0, [pc, #228]	; (8002190 <main+0x424>)
 80020ac:	f7ff fb20 	bl	80016f0 <DT_GetTempCByIndex>
 80020b0:	ee10 3a10 	vmov	r3, s0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa47 	bl	8000548 <__aeabi_f2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	f107 000c 	add.w	r0, r7, #12
 80020c2:	e9cd 2300 	strd	r2, r3, [sp]
 80020c6:	4622      	mov	r2, r4
 80020c8:	493d      	ldr	r1, [pc, #244]	; (80021c0 <main+0x454>)
 80020ca:	f004 f873 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe f87c 	bl	80001d0 <strlen>
 80020d8:	4603      	mov	r3, r0
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f107 010c 	add.w	r1, r7, #12
 80020e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020e4:	4828      	ldr	r0, [pc, #160]	; (8002188 <main+0x41c>)
 80020e6:	f002 f91d 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Temperature for the device 2 (index 1) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 1));
		sprintf(msg,"[%8lu] Temperature for the device 2 (index 1) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 1));
 80020ea:	f000 fd0b 	bl	8002b04 <HAL_GetTick>
 80020ee:	4604      	mov	r4, r0
 80020f0:	2101      	movs	r1, #1
 80020f2:	4827      	ldr	r0, [pc, #156]	; (8002190 <main+0x424>)
 80020f4:	f7ff fafc 	bl	80016f0 <DT_GetTempCByIndex>
 80020f8:	ee10 3a10 	vmov	r3, s0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa23 	bl	8000548 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	f107 000c 	add.w	r0, r7, #12
 800210a:	e9cd 2300 	strd	r2, r3, [sp]
 800210e:	4622      	mov	r2, r4
 8002110:	492c      	ldr	r1, [pc, #176]	; (80021c4 <main+0x458>)
 8002112:	f004 f84f 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f858 	bl	80001d0 <strlen>
 8002120:	4603      	mov	r3, r0
 8002122:	b29a      	uxth	r2, r3
 8002124:	f107 010c 	add.w	r1, r7, #12
 8002128:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800212c:	4816      	ldr	r0, [pc, #88]	; (8002188 <main+0x41c>)
 800212e:	f002 f8f9 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Temperature for the device 3 (index 2) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 2));
		sprintf(msg,"[%8lu] Temperature for the device 3 (index 2) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 2));
 8002132:	f000 fce7 	bl	8002b04 <HAL_GetTick>
 8002136:	4604      	mov	r4, r0
 8002138:	2102      	movs	r1, #2
 800213a:	4815      	ldr	r0, [pc, #84]	; (8002190 <main+0x424>)
 800213c:	f7ff fad8 	bl	80016f0 <DT_GetTempCByIndex>
 8002140:	ee10 3a10 	vmov	r3, s0
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f9ff 	bl	8000548 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	f107 000c 	add.w	r0, r7, #12
 8002152:	e9cd 2300 	strd	r2, r3, [sp]
 8002156:	4622      	mov	r2, r4
 8002158:	491b      	ldr	r1, [pc, #108]	; (80021c8 <main+0x45c>)
 800215a:	f004 f82b 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f834 	bl	80001d0 <strlen>
 8002168:	4603      	mov	r3, r0
 800216a:	b29a      	uxth	r2, r3
 800216c:	f107 010c 	add.w	r1, r7, #12
 8002170:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <main+0x41c>)
 8002176:	f002 f8d5 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Temperature for the device 4 (index 3) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 3));
		sprintf(msg,"[%8lu] Temperature for the device 4 (index 3) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 3));
 800217a:	f000 fcc3 	bl	8002b04 <HAL_GetTick>
 800217e:	4604      	mov	r4, r0
 8002180:	2103      	movs	r1, #3
 8002182:	e023      	b.n	80021cc <main+0x460>
 8002184:	08008694 	.word	0x08008694
 8002188:	20000318 	.word	0x20000318
 800218c:	20000204 	.word	0x20000204
 8002190:	2000035c 	.word	0x2000035c
 8002194:	080086b4 	.word	0x080086b4
 8002198:	080086d0 	.word	0x080086d0
 800219c:	080086ec 	.word	0x080086ec
 80021a0:	0800871c 	.word	0x0800871c
 80021a4:	08008738 	.word	0x08008738
 80021a8:	0800873c 	.word	0x0800873c
 80021ac:	08008760 	.word	0x08008760
 80021b0:	08008790 	.word	0x08008790
 80021b4:	080087ac 	.word	0x080087ac
 80021b8:	080087d0 	.word	0x080087d0
 80021bc:	080087f4 	.word	0x080087f4
 80021c0:	08008804 	.word	0x08008804
 80021c4:	08008840 	.word	0x08008840
 80021c8:	0800887c 	.word	0x0800887c
 80021cc:	4848      	ldr	r0, [pc, #288]	; (80022f0 <main+0x584>)
 80021ce:	f7ff fa8f 	bl	80016f0 <DT_GetTempCByIndex>
 80021d2:	ee10 3a10 	vmov	r3, s0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f9b6 	bl	8000548 <__aeabi_f2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	f107 000c 	add.w	r0, r7, #12
 80021e4:	e9cd 2300 	strd	r2, r3, [sp]
 80021e8:	4622      	mov	r2, r4
 80021ea:	4942      	ldr	r1, [pc, #264]	; (80022f4 <main+0x588>)
 80021ec:	f003 ffe2 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fd ffeb 	bl	80001d0 <strlen>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	f107 010c 	add.w	r1, r7, #12
 8002202:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002206:	483c      	ldr	r0, [pc, #240]	; (80022f8 <main+0x58c>)
 8002208:	f002 f88c 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Temperature for the device 5 (index 4) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 4));
		sprintf(msg,"[%8lu] Temperature for the device 5 (index 4) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 4));
 800220c:	f000 fc7a 	bl	8002b04 <HAL_GetTick>
 8002210:	4604      	mov	r4, r0
 8002212:	2104      	movs	r1, #4
 8002214:	4836      	ldr	r0, [pc, #216]	; (80022f0 <main+0x584>)
 8002216:	f7ff fa6b 	bl	80016f0 <DT_GetTempCByIndex>
 800221a:	ee10 3a10 	vmov	r3, s0
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f992 	bl	8000548 <__aeabi_f2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	f107 000c 	add.w	r0, r7, #12
 800222c:	e9cd 2300 	strd	r2, r3, [sp]
 8002230:	4622      	mov	r2, r4
 8002232:	4932      	ldr	r1, [pc, #200]	; (80022fc <main+0x590>)
 8002234:	f003 ffbe 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	4618      	mov	r0, r3
 800223e:	f7fd ffc7 	bl	80001d0 <strlen>
 8002242:	4603      	mov	r3, r0
 8002244:	b29a      	uxth	r2, r3
 8002246:	f107 010c 	add.w	r1, r7, #12
 800224a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800224e:	482a      	ldr	r0, [pc, #168]	; (80022f8 <main+0x58c>)
 8002250:	f002 f868 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Temperature for the device 6 (index 5) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 5));
		sprintf(msg,"[%8lu] Temperature for the device 6 (index 5) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 5));
 8002254:	f000 fc56 	bl	8002b04 <HAL_GetTick>
 8002258:	4604      	mov	r4, r0
 800225a:	2105      	movs	r1, #5
 800225c:	4824      	ldr	r0, [pc, #144]	; (80022f0 <main+0x584>)
 800225e:	f7ff fa47 	bl	80016f0 <DT_GetTempCByIndex>
 8002262:	ee10 3a10 	vmov	r3, s0
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f96e 	bl	8000548 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	f107 000c 	add.w	r0, r7, #12
 8002274:	e9cd 2300 	strd	r2, r3, [sp]
 8002278:	4622      	mov	r2, r4
 800227a:	4921      	ldr	r1, [pc, #132]	; (8002300 <main+0x594>)
 800227c:	f003 ff9a 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4618      	mov	r0, r3
 8002286:	f7fd ffa3 	bl	80001d0 <strlen>
 800228a:	4603      	mov	r3, r0
 800228c:	b29a      	uxth	r2, r3
 800228e:	f107 010c 	add.w	r1, r7, #12
 8002292:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002296:	4818      	ldr	r0, [pc, #96]	; (80022f8 <main+0x58c>)
 8002298:	f002 f844 	bl	8004324 <HAL_UART_Transmit>
		//printf("[%8lu] Temperature for the device 7 (index 6) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 6));
		sprintf(msg,"[%8lu] Temperature for the device 7 (index 6) is: %.2f\r\n",HAL_GetTick(), DT_GetTempCByIndex(&dt, 6));
 800229c:	f000 fc32 	bl	8002b04 <HAL_GetTick>
 80022a0:	4604      	mov	r4, r0
 80022a2:	2106      	movs	r1, #6
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <main+0x584>)
 80022a6:	f7ff fa23 	bl	80016f0 <DT_GetTempCByIndex>
 80022aa:	ee10 3a10 	vmov	r3, s0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f94a 	bl	8000548 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	f107 000c 	add.w	r0, r7, #12
 80022bc:	e9cd 2300 	strd	r2, r3, [sp]
 80022c0:	4622      	mov	r2, r4
 80022c2:	4910      	ldr	r1, [pc, #64]	; (8002304 <main+0x598>)
 80022c4:	f003 ff76 	bl	80061b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 500);
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ff7f 	bl	80001d0 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	f107 010c 	add.w	r1, r7, #12
 80022da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <main+0x58c>)
 80022e0:	f002 f820 	bl	8004324 <HAL_UART_Transmit>

		HAL_Delay(2000);
 80022e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022e8:	f000 fc18 	bl	8002b1c <HAL_Delay>
		sprintf(msg, "[%8lu] Requesting temperatures...", HAL_GetTick());
 80022ec:	e6a8      	b.n	8002040 <main+0x2d4>
 80022ee:	bf00      	nop
 80022f0:	2000035c 	.word	0x2000035c
 80022f4:	080088b8 	.word	0x080088b8
 80022f8:	20000318 	.word	0x20000318
 80022fc:	080088f4 	.word	0x080088f4
 8002300:	08008930 	.word	0x08008930
 8002304:	0800896c 	.word	0x0800896c

08002308 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b094      	sub	sp, #80	; 0x50
 800230c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800230e:	f107 0320 	add.w	r3, r7, #32
 8002312:	2230      	movs	r2, #48	; 0x30
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fa4c 	bl	80057b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <SystemClock_Config+0xcc>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <SystemClock_Config+0xcc>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6413      	str	r3, [r2, #64]	; 0x40
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <SystemClock_Config+0xcc>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <SystemClock_Config+0xd0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <SystemClock_Config+0xd0>)
 8002352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <SystemClock_Config+0xd0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002364:	2301      	movs	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236e:	2302      	movs	r3, #2
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002378:	2304      	movs	r3, #4
 800237a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800237c:	23a8      	movs	r3, #168	; 0xa8
 800237e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002380:	2302      	movs	r3, #2
 8002382:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002384:	2304      	movs	r3, #4
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	4618      	mov	r0, r3
 800238e:	f001 fab3 	bl	80038f8 <HAL_RCC_OscConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0x94>
		Error_Handler();
 8002398:	f000 f8c4 	bl	8002524 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800239c:	230f      	movs	r3, #15
 800239e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023ac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2105      	movs	r1, #5
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fd14 	bl	8003de8 <HAL_RCC_ClockConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0xc2>
		Error_Handler();
 80023c6:	f000 f8ad 	bl	8002524 <Error_Handler>
	}
}
 80023ca:	bf00      	nop
 80023cc:	3750      	adds	r7, #80	; 0x50
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000

080023dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 8002414:	f001 ff31 	bl	800427a <HAL_HalfDuplex_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800241e:	f000 f881 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002d4 	.word	0x200002d4
 800242c:	40011000 	.word	0x40011000

08002430 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_USART2_UART_Init+0x4c>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <MX_USART2_UART_Init+0x50>)
 8002438:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <MX_USART2_UART_Init+0x4c>)
 800243c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002440:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_USART2_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_USART2_UART_Init+0x4c>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <MX_USART2_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_USART2_UART_Init+0x4c>)
 8002456:	220c      	movs	r2, #12
 8002458:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <MX_USART2_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_USART2_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_USART2_UART_Init+0x4c>)
 8002468:	f001 feba 	bl	80041e0 <HAL_UART_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002472:	f000 f857 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000318 	.word	0x20000318
 8002480:	40004400 	.word	0x40004400

08002484 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <MX_DMA_Init+0x4c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <MX_DMA_Init+0x4c>)
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_DMA_Init+0x4c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	203a      	movs	r0, #58	; 0x3a
 80024ac:	f000 fc35 	bl	8002d1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024b0:	203a      	movs	r0, #58	; 0x3a
 80024b2:	f000 fc4e 	bl	8002d52 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2046      	movs	r0, #70	; 0x46
 80024bc:	f000 fc2d 	bl	8002d1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80024c0:	2046      	movs	r0, #70	; 0x46
 80024c2:	f000 fc46 	bl	8002d52 <HAL_NVIC_EnableIRQ>

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <MX_GPIO_Init+0x4c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <MX_GPIO_Init+0x4c>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <MX_GPIO_Init+0x4c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_GPIO_Init+0x4c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <MX_GPIO_Init+0x4c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_GPIO_Init+0x4c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]

}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800252c:	e7fe      	b.n	800252c <Error_Handler+0x8>
	...

08002530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_MspInit+0x4c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a0f      	ldr	r2, [pc, #60]	; (800257c <HAL_MspInit+0x4c>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_MspInit+0x4c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <HAL_MspInit+0x4c>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	; (8002734 <HAL_UART_MspInit+0x1b4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 8092 	bne.w	80026c8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	4a62      	ldr	r2, [pc, #392]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	6453      	str	r3, [r2, #68]	; 0x44
 80025b4:	4b60      	ldr	r3, [pc, #384]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4a5b      	ldr	r2, [pc, #364]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6313      	str	r3, [r2, #48]	; 0x30
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e2:	2312      	movs	r3, #18
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ee:	2307      	movs	r3, #7
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4850      	ldr	r0, [pc, #320]	; (800273c <HAL_UART_MspInit+0x1bc>)
 80025fa:	f000 ffc7 	bl	800358c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025fe:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002600:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_UART_MspInit+0x1c4>)
 8002602:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002604:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800260a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002618:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 800261a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800263e:	4840      	ldr	r0, [pc, #256]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002640:	f000 fba2 	bl	8002d88 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800264a:	f7ff ff6b 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
 8002654:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <HAL_UART_MspInit+0x1c0>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 800265c:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_UART_MspInit+0x1cc>)
 800265e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 8002662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002666:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002668:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 8002676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800267a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002682:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800268e:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800269a:	482b      	ldr	r0, [pc, #172]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 800269c:	f000 fb74 	bl	8002d88 <HAL_DMA_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80026a6:	f7ff ff3d 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a26      	ldr	r2, [pc, #152]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
 80026b0:	4a25      	ldr	r2, [pc, #148]	; (8002748 <HAL_UART_MspInit+0x1c8>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2025      	movs	r0, #37	; 0x25
 80026bc:	f000 fb2d 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026c0:	2025      	movs	r0, #37	; 0x25
 80026c2:	f000 fb46 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c6:	e030      	b.n	800272a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_UART_MspInit+0x1d0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d12b      	bne.n	800272a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a17      	ldr	r2, [pc, #92]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_UART_MspInit+0x1b8>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800270a:	230c      	movs	r3, #12
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800271a:	2307      	movs	r3, #7
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <HAL_UART_MspInit+0x1bc>)
 8002726:	f000 ff31 	bl	800358c <HAL_GPIO_Init>
}
 800272a:	bf00      	nop
 800272c:	3730      	adds	r7, #48	; 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40011000 	.word	0x40011000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	20000274 	.word	0x20000274
 8002744:	40026440 	.word	0x40026440
 8002748:	20000214 	.word	0x20000214
 800274c:	400264b8 	.word	0x400264b8
 8002750:	40004400 	.word	0x40004400

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <NMI_Handler+0x4>

0800275a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <HardFault_Handler+0x4>

08002760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <MemManage_Handler+0x4>

08002766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276a:	e7fe      	b.n	800276a <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <UsageFault_Handler+0x4>

08002772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a0:	f000 f99c 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <USART1_IRQHandler+0x10>)
 80027ae:	f001 fef9 	bl	80045a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200002d4 	.word	0x200002d4

080027bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <DMA2_Stream2_IRQHandler+0x10>)
 80027c2:	f000 fc79 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000274 	.word	0x20000274

080027d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <DMA2_Stream7_IRQHandler+0x10>)
 80027d6:	f000 fc6f 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000214 	.word	0x20000214

080027e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <ITM_SendChar+0x48>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <ITM_SendChar+0x48>)
 80027f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <ITM_SendChar+0x4c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <ITM_SendChar+0x4c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002806:	bf00      	nop
 8002808:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f8      	beq.n	8002808 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002816:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000edfc 	.word	0xe000edfc
 8002830:	e0000e00 	.word	0xe0000e00

08002834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_kill>:

int _kill(int pid, int sig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800284e:	f002 ff79 	bl	8005744 <__errno>
 8002852:	4603      	mov	r3, r0
 8002854:	2216      	movs	r2, #22
 8002856:	601a      	str	r2, [r3, #0]
	return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_exit>:

void _exit (int status)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800286c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffe7 	bl	8002844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002876:	e7fe      	b.n	8002876 <_exit+0x12>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00a      	b.n	80028a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288a:	f3af 8000 	nop.w
 800288e:	4601      	mov	r1, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf0      	blt.n	800288a <_read+0x12>
	}

return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e009      	b.n	80028d8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); // И пропишем наш код для printf
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	60ba      	str	r2, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff89 	bl	80027e4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	dbf1      	blt.n	80028c4 <_write+0x12>
		//LCD_SEND // Если подключен LCD
		//UART_SET // Если подключен UART
	}
	return len;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_close>:

int _close(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
	return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002912:	605a      	str	r2, [r3, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_isatty>:

int _isatty(int file)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	return 1;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f002 fede 	bl	8005744 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20020000 	.word	0x20020000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	200001f8 	.word	0x200001f8
 80029bc:	20000380 	.word	0x20000380

080029c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ea:	490e      	ldr	r1, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a00:	4c0b      	ldr	r4, [pc, #44]	; (8002a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a0e:	f7ff ffd7 	bl	80029c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f002 fe9d 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7ff f9a9 	bl	8001d6c <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a28:	08008ddc 	.word	0x08008ddc
  ldr r2, =_sbss
 8002a2c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a30:	2000037c 	.word	0x2000037c

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_Init+0x40>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_Init+0x40>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x40>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f94f 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	200f      	movs	r0, #15
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7ff fd60 	bl	8002530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f967 	bl	8002d6e <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab8:	f000 f92f 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000008 	.word	0x20000008
 8002b00:	20000368 	.word	0x20000368

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000368 	.word	0x20000368

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000008 	.word	0x20000008

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff3e 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff8e 	bl	8002c58 <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5d 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff31 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffa2 	bl	8002cc0 <SysTick_Config>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff feb6 	bl	8002b04 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e099      	b.n	8002ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc4:	e00f      	b.n	8002de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc6:	f7ff fe9d 	bl	8002b04 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d908      	bls.n	8002de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e078      	b.n	8002ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e8      	bne.n	8002dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_DMA_Init+0x158>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d117      	bne.n	8002eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb01 	bl	8003494 <DMA_CheckFifoParam>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fab8 	bl	8003428 <DMA_CalcBaseAndBitshift>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	f010803f 	.word	0xf010803f

08002ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA_Start_IT+0x26>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e040      	b.n	8002f8c <HAL_DMA_Start_IT+0xa8>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12f      	bne.n	8002f7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fa4a 	bl	80033cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	223f      	movs	r2, #63	; 0x3f
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0216 	orr.w	r2, r2, #22
 8002f52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0208 	orr.w	r2, r2, #8
 8002f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e005      	b.n	8002f8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fa2:	f7ff fdaf 	bl	8002b04 <HAL_GetTick>
 8002fa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d008      	beq.n	8002fc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e052      	b.n	800306c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0216 	bic.w	r2, r2, #22
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_DMA_Abort+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0208 	bic.w	r2, r2, #8
 8003004:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	e013      	b.n	8003040 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003018:	f7ff fd74 	bl	8002b04 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b05      	cmp	r3, #5
 8003024:	d90c      	bls.n	8003040 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e015      	b.n	800306c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e4      	bne.n	8003018 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	223f      	movs	r2, #63	; 0x3f
 8003054:	409a      	lsls	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00c      	b.n	80030ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2205      	movs	r2, #5
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c4:	4b92      	ldr	r3, [pc, #584]	; (8003310 <HAL_DMA_IRQHandler+0x258>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a92      	ldr	r2, [pc, #584]	; (8003314 <HAL_DMA_IRQHandler+0x25c>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2208      	movs	r2, #8
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01a      	beq.n	8003124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0204 	bic.w	r2, r2, #4
 800310a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	2208      	movs	r2, #8
 8003112:	409a      	lsls	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	2201      	movs	r2, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	2201      	movs	r2, #1
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2204      	movs	r2, #4
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d012      	beq.n	8003190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2204      	movs	r2, #4
 800317e:	409a      	lsls	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2210      	movs	r2, #16
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d043      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03c      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	2210      	movs	r2, #16
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d108      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d024      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
 80031e6:	e01f      	b.n	8003228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e016      	b.n	8003228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0208 	bic.w	r2, r2, #8
 8003216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2220      	movs	r2, #32
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 808e 	beq.w	8003356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8086 	beq.w	8003356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	2220      	movs	r2, #32
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b05      	cmp	r3, #5
 8003260:	d136      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0216 	bic.w	r2, r2, #22
 8003270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_DMA_IRQHandler+0x1da>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0208 	bic.w	r2, r2, #8
 80032a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	223f      	movs	r2, #63	; 0x3f
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d07d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
        }
        return;
 80032ce:	e078      	b.n	80033c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01c      	beq.n	8003318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d030      	beq.n	8003356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e02b      	b.n	8003356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d027      	beq.n	8003356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	e022      	b.n	8003356 <HAL_DMA_IRQHandler+0x29e>
 8003310:	20000000 	.word	0x20000000
 8003314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0210 	bic.w	r2, r2, #16
 8003334:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	2b00      	cmp	r3, #0
 800335c:	d032      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d022      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2205      	movs	r2, #5
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	429a      	cmp	r2, r3
 800338c:	d307      	bcc.n	800339e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f2      	bne.n	8003382 <HAL_DMA_IRQHandler+0x2ca>
 800339c:	e000      	b.n	80033a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800339e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e000      	b.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80033c2:	bf00      	nop
    }
  }
}
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop

080033cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d108      	bne.n	800340c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800340a:	e007      	b.n	800341c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3b10      	subs	r3, #16
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <DMA_CalcBaseAndBitshift+0x64>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003442:	4a13      	ldr	r2, [pc, #76]	; (8003490 <DMA_CalcBaseAndBitshift+0x68>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d909      	bls.n	800346a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	1d1a      	adds	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58
 8003468:	e007      	b.n	800347a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	aaaaaaab 	.word	0xaaaaaaab
 8003490:	080089e0 	.word	0x080089e0

08003494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11f      	bne.n	80034ee <DMA_CheckFifoParam+0x5a>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d856      	bhi.n	8003562 <DMA_CheckFifoParam+0xce>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <DMA_CheckFifoParam+0x28>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034cd 	.word	0x080034cd
 80034c0:	080034df 	.word	0x080034df
 80034c4:	080034cd 	.word	0x080034cd
 80034c8:	08003563 	.word	0x08003563
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d046      	beq.n	8003566 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034dc:	e043      	b.n	8003566 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034e6:	d140      	bne.n	800356a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ec:	e03d      	b.n	800356a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f6:	d121      	bne.n	800353c <DMA_CheckFifoParam+0xa8>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d837      	bhi.n	800356e <DMA_CheckFifoParam+0xda>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <DMA_CheckFifoParam+0x70>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	0800351b 	.word	0x0800351b
 800350c:	08003515 	.word	0x08003515
 8003510:	0800352d 	.word	0x0800352d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	e030      	b.n	800357c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d025      	beq.n	8003572 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800352a:	e022      	b.n	8003572 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003534:	d11f      	bne.n	8003576 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800353a:	e01c      	b.n	8003576 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d903      	bls.n	800354a <DMA_CheckFifoParam+0xb6>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d003      	beq.n	8003550 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003548:	e018      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      break;
 800354e:	e015      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e00b      	b.n	800357a <DMA_CheckFifoParam+0xe6>
      break;
 8003562:	bf00      	nop
 8003564:	e00a      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e008      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e006      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e004      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      break;   
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <DMA_CheckFifoParam+0xe8>
      break;
 800357a:	bf00      	nop
    }
  } 
  
  return status; 
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop

0800358c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e16b      	b.n	8003880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f040 815a 	bne.w	800387a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d005      	beq.n	80035de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d130      	bne.n	8003640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003614:	2201      	movs	r2, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0201 	and.w	r2, r3, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d017      	beq.n	800367c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d123      	bne.n	80036d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	08da      	lsrs	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80b4 	beq.w	800387a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b60      	ldr	r3, [pc, #384]	; (8003898 <HAL_GPIO_Init+0x30c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4a5f      	ldr	r2, [pc, #380]	; (8003898 <HAL_GPIO_Init+0x30c>)
 800371c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003720:	6453      	str	r3, [r2, #68]	; 0x44
 8003722:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <HAL_GPIO_Init+0x30c>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372e:	4a5b      	ldr	r2, [pc, #364]	; (800389c <HAL_GPIO_Init+0x310>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_GPIO_Init+0x314>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <HAL_GPIO_Init+0x226>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a51      	ldr	r2, [pc, #324]	; (80038a4 <HAL_GPIO_Init+0x318>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x222>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_GPIO_Init+0x31c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x21e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4f      	ldr	r2, [pc, #316]	; (80038ac <HAL_GPIO_Init+0x320>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x21a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <HAL_GPIO_Init+0x324>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x216>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4d      	ldr	r2, [pc, #308]	; (80038b4 <HAL_GPIO_Init+0x328>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x212>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4c      	ldr	r2, [pc, #304]	; (80038b8 <HAL_GPIO_Init+0x32c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x20e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4b      	ldr	r2, [pc, #300]	; (80038bc <HAL_GPIO_Init+0x330>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x20a>
 8003792:	2307      	movs	r3, #7
 8003794:	e00e      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 8003796:	2308      	movs	r3, #8
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 800379a:	2306      	movs	r3, #6
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	; (800389c <HAL_GPIO_Init+0x310>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_GPIO_Init+0x334>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f6:	4a32      	ldr	r2, [pc, #200]	; (80038c0 <HAL_GPIO_Init+0x334>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <HAL_GPIO_Init+0x334>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_GPIO_Init+0x334>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f ae90 	bls.w	80035a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	40021c00 	.word	0x40021c00
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d4:	787b      	ldrb	r3, [r7, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e0:	e003      	b.n	80038ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e264      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003916:	4ba3      	ldr	r3, [pc, #652]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00c      	beq.n	800393c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d112      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b9d      	ldr	r3, [pc, #628]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b99      	ldr	r3, [pc, #612]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x108>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d157      	bne.n	8003a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e23f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x74>
 800395e:	4b91      	ldr	r3, [pc, #580]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a90      	ldr	r2, [pc, #576]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x98>
 8003976:	4b8b      	ldr	r3, [pc, #556]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a8a      	ldr	r2, [pc, #552]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 8003990:	4b84      	ldr	r3, [pc, #528]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a83      	ldr	r2, [pc, #524]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a80      	ldr	r2, [pc, #512]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff f8a8 	bl	8002b04 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff f8a4 	bl	8002b04 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e204      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xc0>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff f894 	bl	8002b04 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7ff f890 	bl	8002b04 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1f0      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0xe8>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1c4      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <HAL_RCC_OscConfig+0x2b0>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7ff f849 	bl	8002b04 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7ff f845 	bl	8002b04 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1a5      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4940      	ldr	r1, [pc, #256]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_OscConfig+0x2b0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7ff f828 	bl	8002b04 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7ff f824 	bl	8002b04 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e184      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d030      	beq.n	8003b44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_RCC_OscConfig+0x2b4>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7ff f808 	bl	8002b04 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7ff f804 	bl	8002b04 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e164      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x200>
 8003b16:	e015      	b.n	8003b44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x2b4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fff1 	bl	8002b04 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fe ffed 	bl	8002b04 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e14d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a0 	beq.w	8003c92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe ffb3 	bl	8002b04 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e011      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ce>
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470000 	.word	0x42470000
 8003bac:	42470e80 	.word	0x42470e80
 8003bb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fe ffa6 	bl	8002b04 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e106      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b85      	ldr	r3, [pc, #532]	; (8003ddc <HAL_RCC_OscConfig+0x4e4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2f0>
 8003bda:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x32a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x312>
 8003bf0:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a7a      	ldr	r2, [pc, #488]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	4b78      	ldr	r3, [pc, #480]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a77      	ldr	r2, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x32a>
 8003c0a:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a74      	ldr	r2, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a71      	ldr	r2, [pc, #452]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fe ff6b 	bl	8002b04 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe ff67 	bl	8002b04 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0c5      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x33a>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c56:	f7fe ff55 	bl	8002b04 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe ff51 	bl	8002b04 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0af      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a55      	ldr	r2, [pc, #340]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 809b 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d05c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d141      	bne.n	8003d34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe ff25 	bl	8002b04 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe ff21 	bl	8002b04 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e081      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	019b      	lsls	r3, r3, #6
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	4937      	ldr	r1, [pc, #220]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fefa 	bl	8002b04 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe fef6 	bl	8002b04 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e056      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x41c>
 8003d32:	e04e      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fee3 	bl	8002b04 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe fedf 	bl	8002b04 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e03f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d54:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x44a>
 8003d60:	e037      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e032      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d028      	beq.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d121      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d11a      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d111      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470060 	.word	0x42470060

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0cc      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d90c      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b8      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e54:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a52      	ldr	r2, [pc, #328]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d044      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d119      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e067      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7fe fe14 	bl	8002b04 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fe fe10 	bl	8002b04 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20c      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e032      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6e:	f000 f821 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490a      	ldr	r1, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fd74 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	080089c8 	.word	0x080089c8
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fcc:	4b67      	ldr	r3, [pc, #412]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	f200 80bd 	bhi.w	8004158 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe6:	e0b7      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fea:	60bb      	str	r3, [r7, #8]
       break;
 8003fec:	e0b7      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fee:	4b61      	ldr	r3, [pc, #388]	; (8004174 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ff0:	60bb      	str	r3, [r7, #8]
      break;
 8003ff2:	e0b4      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff4:	4b5d      	ldr	r3, [pc, #372]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d04d      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	461a      	mov	r2, r3
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	ea02 0800 	and.w	r8, r2, r0
 8004022:	ea03 0901 	and.w	r9, r3, r1
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	014b      	lsls	r3, r1, #5
 8004034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004038:	0142      	lsls	r2, r0, #5
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	ebb0 0008 	subs.w	r0, r0, r8
 8004042:	eb61 0109 	sbc.w	r1, r1, r9
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	018b      	lsls	r3, r1, #6
 8004050:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004054:	0182      	lsls	r2, r0, #6
 8004056:	1a12      	subs	r2, r2, r0
 8004058:	eb63 0301 	sbc.w	r3, r3, r1
 800405c:	f04f 0000 	mov.w	r0, #0
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	00d9      	lsls	r1, r3, #3
 8004066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800406a:	00d0      	lsls	r0, r2, #3
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	eb12 0208 	adds.w	r2, r2, r8
 8004074:	eb43 0309 	adc.w	r3, r3, r9
 8004078:	f04f 0000 	mov.w	r0, #0
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	0259      	lsls	r1, r3, #9
 8004082:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004086:	0250      	lsls	r0, r2, #9
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	461a      	mov	r2, r3
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	f7fc fd86 	bl	8000ba8 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e04a      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	461a      	mov	r2, r3
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	ea02 0400 	and.w	r4, r2, r0
 80040be:	ea03 0501 	and.w	r5, r3, r1
 80040c2:	4620      	mov	r0, r4
 80040c4:	4629      	mov	r1, r5
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	014b      	lsls	r3, r1, #5
 80040d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040d4:	0142      	lsls	r2, r0, #5
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	1b00      	subs	r0, r0, r4
 80040dc:	eb61 0105 	sbc.w	r1, r1, r5
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	018b      	lsls	r3, r1, #6
 80040ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ee:	0182      	lsls	r2, r0, #6
 80040f0:	1a12      	subs	r2, r2, r0
 80040f2:	eb63 0301 	sbc.w	r3, r3, r1
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	00d9      	lsls	r1, r3, #3
 8004100:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004104:	00d0      	lsls	r0, r2, #3
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	1912      	adds	r2, r2, r4
 800410c:	eb45 0303 	adc.w	r3, r5, r3
 8004110:	f04f 0000 	mov.w	r0, #0
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	0299      	lsls	r1, r3, #10
 800411a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800411e:	0290      	lsls	r0, r2, #10
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	f7fc fd3a 	bl	8000ba8 <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4613      	mov	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	3301      	adds	r3, #1
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	60bb      	str	r3, [r7, #8]
      break;
 8004156:	e002      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800415a:	60bb      	str	r3, [r7, #8]
      break;
 800415c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415e:	68bb      	ldr	r3, [r7, #8]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	00f42400 	.word	0x00f42400
 8004174:	007a1200 	.word	0x007a1200

08004178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCC_GetHCLKFreq+0x14>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000000 	.word	0x20000000

08004190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004194:	f7ff fff0 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	080089d8 	.word	0x080089d8

080041b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041bc:	f7ff ffdc 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0b5b      	lsrs	r3, r3, #13
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4903      	ldr	r1, [pc, #12]	; (80041dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	080089d8 	.word	0x080089d8

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e03f      	b.n	8004272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe f9ba 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f001 f8c5 	bl	80053b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e047      	b.n	800431c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fe f96d 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2224      	movs	r2, #36	; 0x24
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f001 f878 	bl	80053b4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80042e2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0208 	orr.w	r2, r2, #8
 80042f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004302:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	d17c      	bne.n	800443e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Transmit+0x2c>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e075      	b.n	8004440 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_UART_Transmit+0x3e>
 800435e:	2302      	movs	r3, #2
 8004360:	e06e      	b.n	8004440 <HAL_UART_Transmit+0x11c>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2221      	movs	r2, #33	; 0x21
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004378:	f7fe fbc4 	bl	8002b04 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004392:	d108      	bne.n	80043a6 <HAL_UART_Transmit+0x82>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e003      	b.n	80043ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b6:	e02a      	b.n	800440e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2200      	movs	r2, #0
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fd2b 	bl	8004e1e <UART_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e036      	b.n	8004440 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	3302      	adds	r3, #2
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e007      	b.n	8004400 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1cf      	bne.n	80043b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fcfb 	bl	8004e1e <UART_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e006      	b.n	8004440 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	d165      	bne.n	800452e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_UART_Transmit_DMA+0x26>
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e05e      	b.n	8004530 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_UART_Transmit_DMA+0x38>
 800447c:	2302      	movs	r3, #2
 800447e:	e057      	b.n	8004530 <HAL_UART_Transmit_DMA+0xe8>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2221      	movs	r2, #33	; 0x21
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_UART_Transmit_DMA+0xf0>)
 80044ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_UART_Transmit_DMA+0xf4>)
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	4a20      	ldr	r2, [pc, #128]	; (8004540 <HAL_UART_Transmit_DMA+0xf8>)
 80044be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	2200      	movs	r2, #0
 80044c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80044c8:	f107 0308 	add.w	r3, r7, #8
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3304      	adds	r3, #4
 80044dc:	461a      	mov	r2, r3
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	f7fe fd00 	bl	8002ee4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	617b      	str	r3, [r7, #20]
   return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	627a      	str	r2, [r7, #36]	; 0x24
 8004518:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6a39      	ldr	r1, [r7, #32]
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	61fb      	str	r3, [r7, #28]
   return(result);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3730      	adds	r7, #48	; 0x30
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	08004b79 	.word	0x08004b79
 800453c:	08004c13 	.word	0x08004c13
 8004540:	08004d8b 	.word	0x08004d8b

08004544 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d11d      	bne.n	800459a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_UART_Receive_DMA+0x26>
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e016      	b.n	800459c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_UART_Receive_DMA+0x38>
 8004578:	2302      	movs	r3, #2
 800457a:	e00f      	b.n	800459c <HAL_UART_Receive_DMA+0x58>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	461a      	mov	r2, r3
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fcb3 	bl	8004efc <UART_Start_Receive_DMA>
 8004596:	4603      	mov	r3, r0
 8004598:	e000      	b.n	800459c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0ba      	sub	sp, #232	; 0xe8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_UART_IRQHandler+0x66>
 80045f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fe1b 	bl	800523e <UART_Receive_IT>
      return;
 8004608:	e256      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800460a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80de 	beq.w	80047d0 <HAL_UART_IRQHandler+0x22c>
 8004614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80d1 	beq.w	80047d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0xae>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_UART_IRQHandler+0xd2>
 800465e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_UART_IRQHandler+0xf6>
 8004682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <HAL_UART_IRQHandler+0x126>
 80046a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f043 0208 	orr.w	r2, r3, #8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 81ed 	beq.w	8004aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x14e>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fda6 	bl	800523e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_UART_IRQHandler+0x17a>
 8004716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04f      	beq.n	80047be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fcae 	bl	8005080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d141      	bne.n	80047b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800474c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3314      	adds	r3, #20
 800475a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800475e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800476a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1d9      	bne.n	8004732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4a7d      	ldr	r2, [pc, #500]	; (8004980 <HAL_UART_IRQHandler+0x3dc>)
 800478c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fc6e 	bl	8003074 <HAL_DMA_Abort_IT>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047a8:	4610      	mov	r0, r2
 80047aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00e      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9ae 	bl	8004b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e00a      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9aa 	bl	8004b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e006      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f9a6 	bl	8004b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047ca:	e170      	b.n	8004aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	bf00      	nop
    return;
 80047ce:	e16e      	b.n	8004aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 814a 	bne.w	8004a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8143 	beq.w	8004a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 813c 	beq.w	8004a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	f040 80b4 	bne.w	8004984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8140 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483a:	429a      	cmp	r2, r3
 800483c:	f080 8139 	bcs.w	8004ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004852:	f000 8088 	beq.w	8004966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800486c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800488e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d9      	bne.n	8004856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e1      	bne.n	80048a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e3      	bne.n	80048de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004948:	65ba      	str	r2, [r7, #88]	; 0x58
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800494e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e3      	bne.n	8004924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fb17 	bl	8002f94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496e:	b29b      	uxth	r3, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8d4 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800497c:	e099      	b.n	8004ab2 <HAL_UART_IRQHandler+0x50e>
 800497e:	bf00      	nop
 8004980:	08005147 	.word	0x08005147
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800498c:	b29b      	uxth	r3, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 808b 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8086 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ce:	647a      	str	r2, [r7, #68]	; 0x44
 80049d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	623b      	str	r3, [r7, #32]
   return(result);
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a06:	633a      	str	r2, [r7, #48]	; 0x30
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e3      	bne.n	80049e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a4c:	61fa      	str	r2, [r7, #28]
 8004a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e3      	bne.n	8004a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f85c 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6c:	e023      	b.n	8004ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_UART_IRQHandler+0x4ea>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fb71 	bl	800516e <UART_Transmit_IT>
    return;
 8004a8c:	e014      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x514>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fbb1 	bl	800520e <UART_EndTransmit_IT>
    return;
 8004aac:	e004      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ab6:	bf00      	nop
  }
}
 8004ab8:	37e8      	adds	r7, #232	; 0xe8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop

08004ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b2db      	uxtb	r3, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b090      	sub	sp, #64	; 0x40
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d137      	bne.n	8004c04 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b96:	2200      	movs	r2, #0
 8004b98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3314      	adds	r3, #20
 8004bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bba:	633a      	str	r2, [r7, #48]	; 0x30
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bee:	61fa      	str	r2, [r7, #28]
 8004bf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	69b9      	ldr	r1, [r7, #24]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c02:	e002      	b.n	8004c0a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004c04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c06:	f7ff ff5b 	bl	8004ac0 <HAL_UART_TxCpltCallback>
}
 8004c0a:	bf00      	nop
 8004c0c:	3740      	adds	r7, #64	; 0x40
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ff57 	bl	8004ad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b09c      	sub	sp, #112	; 0x70
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d172      	bne.n	8004d30 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c70:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ca4:	647a      	str	r2, [r7, #68]	; 0x44
 8004ca6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e5      	bne.n	8004c84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cce:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3314      	adds	r3, #20
 8004cd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d119      	bne.n	8004d30 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0310 	bic.w	r3, r3, #16
 8004d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d106      	bne.n	8004d46 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d40:	f7ff fef0 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d44:	e002      	b.n	8004d4c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d48:	f7ff fece 	bl	8004ae8 <HAL_UART_RxCpltCallback>
}
 8004d4c:	bf00      	nop
 8004d4e:	3770      	adds	r7, #112	; 0x70
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d108      	bne.n	8004d7c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fed5 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d7a:	e002      	b.n	8004d82 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff febd 	bl	8004afc <HAL_UART_RxHalfCpltCallback>
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b21      	cmp	r3, #33	; 0x21
 8004dbc:	d108      	bne.n	8004dd0 <UART_DMAError+0x46>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f000 f930 	bl	8005030 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b22      	cmp	r3, #34	; 0x22
 8004df0:	d108      	bne.n	8004e04 <UART_DMAError+0x7a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004dfe:	68b8      	ldr	r0, [r7, #8]
 8004e00:	f000 f93e 	bl	8005080 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	f043 0210 	orr.w	r2, r3, #16
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e10:	68b8      	ldr	r0, [r7, #8]
 8004e12:	f7ff fe7d 	bl	8004b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b090      	sub	sp, #64	; 0x40
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2e:	e050      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e36:	d04c      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e3e:	f7fd fe61 	bl	8002b04 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d241      	bcs.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8004e70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea2:	623a      	str	r2, [r7, #32]
 8004ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	69f9      	ldr	r1, [r7, #28]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00f      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d09f      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3740      	adds	r7, #64	; 0x40
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b098      	sub	sp, #96	; 0x60
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2222      	movs	r2, #34	; 0x22
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	4a3e      	ldr	r2, [pc, #248]	; (8005024 <UART_Start_Receive_DMA+0x128>)
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	4a3d      	ldr	r2, [pc, #244]	; (8005028 <UART_Start_Receive_DMA+0x12c>)
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <UART_Start_Receive_DMA+0x130>)
 8004f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	2200      	movs	r2, #0
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	f7fd ffc2 	bl	8002ee4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004fa0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	657b      	str	r3, [r7, #84]	; 0x54
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fd2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e5      	bne.n	8004fb2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3314      	adds	r3, #20
 8004fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3314      	adds	r3, #20
 8005004:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005006:	627a      	str	r2, [r7, #36]	; 0x24
 8005008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6a39      	ldr	r1, [r7, #32]
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	61fb      	str	r3, [r7, #28]
   return(result);
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e5      	bne.n	8004fe6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3760      	adds	r7, #96	; 0x60
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	08004c2f 	.word	0x08004c2f
 8005028:	08004d55 	.word	0x08004d55
 800502c:	08004d8b 	.word	0x08004d8b

08005030 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	; 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	60bb      	str	r3, [r7, #8]
   return(result);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	61ba      	str	r2, [r7, #24]
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	613b      	str	r3, [r7, #16]
   return(result);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005074:	bf00      	nop
 8005076:	3724      	adds	r7, #36	; 0x24
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b095      	sub	sp, #84	; 0x54
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a8:	643a      	str	r2, [r7, #64]	; 0x40
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d119      	bne.n	800512c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	60bb      	str	r3, [r7, #8]
   return(result);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f023 0310 	bic.w	r3, r3, #16
 800510e:	647b      	str	r3, [r7, #68]	; 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005118:	61ba      	str	r2, [r7, #24]
 800511a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6979      	ldr	r1, [r7, #20]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	613b      	str	r3, [r7, #16]
   return(result);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e5      	bne.n	80050f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
}
 800513a:	bf00      	nop
 800513c:	3754      	adds	r7, #84	; 0x54
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff fcd5 	bl	8004b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b21      	cmp	r3, #33	; 0x21
 8005180:	d13e      	bne.n	8005200 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d114      	bne.n	80051b6 <UART_Transmit_IT+0x48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d110      	bne.n	80051b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]
 80051b4:	e008      	b.n	80051c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6211      	str	r1, [r2, #32]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4619      	mov	r1, r3
 80051d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10f      	bne.n	80051fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005224:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fc46 	bl	8004ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08c      	sub	sp, #48	; 0x30
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b22      	cmp	r3, #34	; 0x22
 8005250:	f040 80ab 	bne.w	80053aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525c:	d117      	bne.n	800528e <UART_Receive_IT+0x50>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d113      	bne.n	800528e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527c:	b29a      	uxth	r2, r3
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28
 800528c:	e026      	b.n	80052dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a0:	d007      	beq.n	80052b2 <UART_Receive_IT+0x74>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <UART_Receive_IT+0x82>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e008      	b.n	80052d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4619      	mov	r1, r3
 80052ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d15a      	bne.n	80053a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0220 	bic.w	r2, r2, #32
 80052fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800530e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	d135      	bne.n	800539c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f023 0310 	bic.w	r3, r3, #16
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b10      	cmp	r3, #16
 8005376:	d10a      	bne.n	800538e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fbc5 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
 800539a:	e002      	b.n	80053a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff fba3 	bl	8004ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e002      	b.n	80053ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	b09f      	sub	sp, #124	; 0x7c
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ca:	68d9      	ldr	r1, [r3, #12]
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	ea40 0301 	orr.w	r3, r0, r1
 80053d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	431a      	orrs	r2, r3
 80053e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053f8:	f021 010c 	bic.w	r1, r1, #12
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005402:	430b      	orrs	r3, r1
 8005404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	6999      	ldr	r1, [r3, #24]
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	ea40 0301 	orr.w	r3, r0, r1
 800541c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4bc5      	ldr	r3, [pc, #788]	; (8005738 <UART_SetConfig+0x384>)
 8005424:	429a      	cmp	r2, r3
 8005426:	d004      	beq.n	8005432 <UART_SetConfig+0x7e>
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4bc3      	ldr	r3, [pc, #780]	; (800573c <UART_SetConfig+0x388>)
 800542e:	429a      	cmp	r2, r3
 8005430:	d103      	bne.n	800543a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005432:	f7fe fec1 	bl	80041b8 <HAL_RCC_GetPCLK2Freq>
 8005436:	6778      	str	r0, [r7, #116]	; 0x74
 8005438:	e002      	b.n	8005440 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800543a:	f7fe fea9 	bl	8004190 <HAL_RCC_GetPCLK1Freq>
 800543e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005448:	f040 80b6 	bne.w	80055b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800544c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800544e:	461c      	mov	r4, r3
 8005450:	f04f 0500 	mov.w	r5, #0
 8005454:	4622      	mov	r2, r4
 8005456:	462b      	mov	r3, r5
 8005458:	1891      	adds	r1, r2, r2
 800545a:	6439      	str	r1, [r7, #64]	; 0x40
 800545c:	415b      	adcs	r3, r3
 800545e:	647b      	str	r3, [r7, #68]	; 0x44
 8005460:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005464:	1912      	adds	r2, r2, r4
 8005466:	eb45 0303 	adc.w	r3, r5, r3
 800546a:	f04f 0000 	mov.w	r0, #0
 800546e:	f04f 0100 	mov.w	r1, #0
 8005472:	00d9      	lsls	r1, r3, #3
 8005474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005478:	00d0      	lsls	r0, r2, #3
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	1911      	adds	r1, r2, r4
 8005480:	6639      	str	r1, [r7, #96]	; 0x60
 8005482:	416b      	adcs	r3, r5
 8005484:	667b      	str	r3, [r7, #100]	; 0x64
 8005486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	461a      	mov	r2, r3
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	1891      	adds	r1, r2, r2
 8005492:	63b9      	str	r1, [r7, #56]	; 0x38
 8005494:	415b      	adcs	r3, r3
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800549c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054a0:	f7fb fb82 	bl	8000ba8 <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4ba5      	ldr	r3, [pc, #660]	; (8005740 <UART_SetConfig+0x38c>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	011e      	lsls	r6, r3, #4
 80054b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b4:	461c      	mov	r4, r3
 80054b6:	f04f 0500 	mov.w	r5, #0
 80054ba:	4622      	mov	r2, r4
 80054bc:	462b      	mov	r3, r5
 80054be:	1891      	adds	r1, r2, r2
 80054c0:	6339      	str	r1, [r7, #48]	; 0x30
 80054c2:	415b      	adcs	r3, r3
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
 80054c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054ca:	1912      	adds	r2, r2, r4
 80054cc:	eb45 0303 	adc.w	r3, r5, r3
 80054d0:	f04f 0000 	mov.w	r0, #0
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	00d9      	lsls	r1, r3, #3
 80054da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054de:	00d0      	lsls	r0, r2, #3
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	1911      	adds	r1, r2, r4
 80054e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80054e8:	416b      	adcs	r3, r5
 80054ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	1891      	adds	r1, r2, r2
 80054f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80054fa:	415b      	adcs	r3, r3
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005502:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005506:	f7fb fb4f 	bl	8000ba8 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4b8c      	ldr	r3, [pc, #560]	; (8005740 <UART_SetConfig+0x38c>)
 8005510:	fba3 1302 	umull	r1, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	2164      	movs	r1, #100	; 0x64
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	3332      	adds	r3, #50	; 0x32
 8005522:	4a87      	ldr	r2, [pc, #540]	; (8005740 <UART_SetConfig+0x38c>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005530:	441e      	add	r6, r3
 8005532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005534:	4618      	mov	r0, r3
 8005536:	f04f 0100 	mov.w	r1, #0
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	1894      	adds	r4, r2, r2
 8005540:	623c      	str	r4, [r7, #32]
 8005542:	415b      	adcs	r3, r3
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554a:	1812      	adds	r2, r2, r0
 800554c:	eb41 0303 	adc.w	r3, r1, r3
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	f04f 0500 	mov.w	r5, #0
 8005558:	00dd      	lsls	r5, r3, #3
 800555a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800555e:	00d4      	lsls	r4, r2, #3
 8005560:	4622      	mov	r2, r4
 8005562:	462b      	mov	r3, r5
 8005564:	1814      	adds	r4, r2, r0
 8005566:	653c      	str	r4, [r7, #80]	; 0x50
 8005568:	414b      	adcs	r3, r1
 800556a:	657b      	str	r3, [r7, #84]	; 0x54
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	1891      	adds	r1, r2, r2
 8005578:	61b9      	str	r1, [r7, #24]
 800557a:	415b      	adcs	r3, r3
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005582:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005586:	f7fb fb0f 	bl	8000ba8 <__aeabi_uldivmod>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4b6c      	ldr	r3, [pc, #432]	; (8005740 <UART_SetConfig+0x38c>)
 8005590:	fba3 1302 	umull	r1, r3, r3, r2
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	2164      	movs	r1, #100	; 0x64
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	3332      	adds	r3, #50	; 0x32
 80055a2:	4a67      	ldr	r2, [pc, #412]	; (8005740 <UART_SetConfig+0x38c>)
 80055a4:	fba2 2303 	umull	r2, r3, r2, r3
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	f003 0207 	and.w	r2, r3, #7
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4432      	add	r2, r6
 80055b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055b6:	e0b9      	b.n	800572c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ba:	461c      	mov	r4, r3
 80055bc:	f04f 0500 	mov.w	r5, #0
 80055c0:	4622      	mov	r2, r4
 80055c2:	462b      	mov	r3, r5
 80055c4:	1891      	adds	r1, r2, r2
 80055c6:	6139      	str	r1, [r7, #16]
 80055c8:	415b      	adcs	r3, r3
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055d0:	1912      	adds	r2, r2, r4
 80055d2:	eb45 0303 	adc.w	r3, r5, r3
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	00d9      	lsls	r1, r3, #3
 80055e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e4:	00d0      	lsls	r0, r2, #3
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	eb12 0804 	adds.w	r8, r2, r4
 80055ee:	eb43 0905 	adc.w	r9, r3, r5
 80055f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	008b      	lsls	r3, r1, #2
 8005606:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800560a:	0082      	lsls	r2, r0, #2
 800560c:	4640      	mov	r0, r8
 800560e:	4649      	mov	r1, r9
 8005610:	f7fb faca 	bl	8000ba8 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4b49      	ldr	r3, [pc, #292]	; (8005740 <UART_SetConfig+0x38c>)
 800561a:	fba3 2302 	umull	r2, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	011e      	lsls	r6, r3, #4
 8005622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005624:	4618      	mov	r0, r3
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	1894      	adds	r4, r2, r2
 8005630:	60bc      	str	r4, [r7, #8]
 8005632:	415b      	adcs	r3, r3
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563a:	1812      	adds	r2, r2, r0
 800563c:	eb41 0303 	adc.w	r3, r1, r3
 8005640:	f04f 0400 	mov.w	r4, #0
 8005644:	f04f 0500 	mov.w	r5, #0
 8005648:	00dd      	lsls	r5, r3, #3
 800564a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800564e:	00d4      	lsls	r4, r2, #3
 8005650:	4622      	mov	r2, r4
 8005652:	462b      	mov	r3, r5
 8005654:	1814      	adds	r4, r2, r0
 8005656:	64bc      	str	r4, [r7, #72]	; 0x48
 8005658:	414b      	adcs	r3, r1
 800565a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	008b      	lsls	r3, r1, #2
 8005670:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005674:	0082      	lsls	r2, r0, #2
 8005676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800567a:	f7fb fa95 	bl	8000ba8 <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <UART_SetConfig+0x38c>)
 8005684:	fba3 1302 	umull	r1, r3, r3, r2
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	2164      	movs	r1, #100	; 0x64
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	3332      	adds	r3, #50	; 0x32
 8005696:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <UART_SetConfig+0x38c>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a2:	441e      	add	r6, r3
 80056a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a6:	4618      	mov	r0, r3
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	1894      	adds	r4, r2, r2
 80056b2:	603c      	str	r4, [r7, #0]
 80056b4:	415b      	adcs	r3, r3
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056bc:	1812      	adds	r2, r2, r0
 80056be:	eb41 0303 	adc.w	r3, r1, r3
 80056c2:	f04f 0400 	mov.w	r4, #0
 80056c6:	f04f 0500 	mov.w	r5, #0
 80056ca:	00dd      	lsls	r5, r3, #3
 80056cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056d0:	00d4      	lsls	r4, r2, #3
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	eb12 0a00 	adds.w	sl, r2, r0
 80056da:	eb43 0b01 	adc.w	fp, r3, r1
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	008b      	lsls	r3, r1, #2
 80056f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056f6:	0082      	lsls	r2, r0, #2
 80056f8:	4650      	mov	r0, sl
 80056fa:	4659      	mov	r1, fp
 80056fc:	f7fb fa54 	bl	8000ba8 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <UART_SetConfig+0x38c>)
 8005706:	fba3 1302 	umull	r1, r3, r3, r2
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	2164      	movs	r1, #100	; 0x64
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	3332      	adds	r3, #50	; 0x32
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <UART_SetConfig+0x38c>)
 800571a:	fba2 2303 	umull	r2, r3, r2, r3
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4432      	add	r2, r6
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	377c      	adds	r7, #124	; 0x7c
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	40011000 	.word	0x40011000
 800573c:	40011400 	.word	0x40011400
 8005740:	51eb851f 	.word	0x51eb851f

08005744 <__errno>:
 8005744:	4b01      	ldr	r3, [pc, #4]	; (800574c <__errno+0x8>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	2000000c 	.word	0x2000000c

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4d0d      	ldr	r5, [pc, #52]	; (8005788 <__libc_init_array+0x38>)
 8005754:	4c0d      	ldr	r4, [pc, #52]	; (800578c <__libc_init_array+0x3c>)
 8005756:	1b64      	subs	r4, r4, r5
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	2600      	movs	r6, #0
 800575c:	42a6      	cmp	r6, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	4d0b      	ldr	r5, [pc, #44]	; (8005790 <__libc_init_array+0x40>)
 8005762:	4c0c      	ldr	r4, [pc, #48]	; (8005794 <__libc_init_array+0x44>)
 8005764:	f002 ff44 	bl	80085f0 <_init>
 8005768:	1b64      	subs	r4, r4, r5
 800576a:	10a4      	asrs	r4, r4, #2
 800576c:	2600      	movs	r6, #0
 800576e:	42a6      	cmp	r6, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	f855 3b04 	ldr.w	r3, [r5], #4
 8005778:	4798      	blx	r3
 800577a:	3601      	adds	r6, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005782:	4798      	blx	r3
 8005784:	3601      	adds	r6, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	08008dd4 	.word	0x08008dd4
 800578c:	08008dd4 	.word	0x08008dd4
 8005790:	08008dd4 	.word	0x08008dd4
 8005794:	08008dd8 	.word	0x08008dd8

08005798 <memcpy>:
 8005798:	440a      	add	r2, r1
 800579a:	4291      	cmp	r1, r2
 800579c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057a0:	d100      	bne.n	80057a4 <memcpy+0xc>
 80057a2:	4770      	bx	lr
 80057a4:	b510      	push	{r4, lr}
 80057a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ae:	4291      	cmp	r1, r2
 80057b0:	d1f9      	bne.n	80057a6 <memcpy+0xe>
 80057b2:	bd10      	pop	{r4, pc}

080057b4 <memset>:
 80057b4:	4402      	add	r2, r0
 80057b6:	4603      	mov	r3, r0
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d100      	bne.n	80057be <memset+0xa>
 80057bc:	4770      	bx	lr
 80057be:	f803 1b01 	strb.w	r1, [r3], #1
 80057c2:	e7f9      	b.n	80057b8 <memset+0x4>

080057c4 <__cvt>:
 80057c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	ec55 4b10 	vmov	r4, r5, d0
 80057cc:	2d00      	cmp	r5, #0
 80057ce:	460e      	mov	r6, r1
 80057d0:	4619      	mov	r1, r3
 80057d2:	462b      	mov	r3, r5
 80057d4:	bfbb      	ittet	lt
 80057d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057da:	461d      	movlt	r5, r3
 80057dc:	2300      	movge	r3, #0
 80057de:	232d      	movlt	r3, #45	; 0x2d
 80057e0:	700b      	strb	r3, [r1, #0]
 80057e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057e8:	4691      	mov	r9, r2
 80057ea:	f023 0820 	bic.w	r8, r3, #32
 80057ee:	bfbc      	itt	lt
 80057f0:	4622      	movlt	r2, r4
 80057f2:	4614      	movlt	r4, r2
 80057f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f8:	d005      	beq.n	8005806 <__cvt+0x42>
 80057fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057fe:	d100      	bne.n	8005802 <__cvt+0x3e>
 8005800:	3601      	adds	r6, #1
 8005802:	2102      	movs	r1, #2
 8005804:	e000      	b.n	8005808 <__cvt+0x44>
 8005806:	2103      	movs	r1, #3
 8005808:	ab03      	add	r3, sp, #12
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	ab02      	add	r3, sp, #8
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	ec45 4b10 	vmov	d0, r4, r5
 8005814:	4653      	mov	r3, sl
 8005816:	4632      	mov	r2, r6
 8005818:	f000 fe3a 	bl	8006490 <_dtoa_r>
 800581c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005820:	4607      	mov	r7, r0
 8005822:	d102      	bne.n	800582a <__cvt+0x66>
 8005824:	f019 0f01 	tst.w	r9, #1
 8005828:	d022      	beq.n	8005870 <__cvt+0xac>
 800582a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800582e:	eb07 0906 	add.w	r9, r7, r6
 8005832:	d110      	bne.n	8005856 <__cvt+0x92>
 8005834:	783b      	ldrb	r3, [r7, #0]
 8005836:	2b30      	cmp	r3, #48	; 0x30
 8005838:	d10a      	bne.n	8005850 <__cvt+0x8c>
 800583a:	2200      	movs	r2, #0
 800583c:	2300      	movs	r3, #0
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fb f941 	bl	8000ac8 <__aeabi_dcmpeq>
 8005846:	b918      	cbnz	r0, 8005850 <__cvt+0x8c>
 8005848:	f1c6 0601 	rsb	r6, r6, #1
 800584c:	f8ca 6000 	str.w	r6, [sl]
 8005850:	f8da 3000 	ldr.w	r3, [sl]
 8005854:	4499      	add	r9, r3
 8005856:	2200      	movs	r2, #0
 8005858:	2300      	movs	r3, #0
 800585a:	4620      	mov	r0, r4
 800585c:	4629      	mov	r1, r5
 800585e:	f7fb f933 	bl	8000ac8 <__aeabi_dcmpeq>
 8005862:	b108      	cbz	r0, 8005868 <__cvt+0xa4>
 8005864:	f8cd 900c 	str.w	r9, [sp, #12]
 8005868:	2230      	movs	r2, #48	; 0x30
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	454b      	cmp	r3, r9
 800586e:	d307      	bcc.n	8005880 <__cvt+0xbc>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005874:	1bdb      	subs	r3, r3, r7
 8005876:	4638      	mov	r0, r7
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	b004      	add	sp, #16
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	1c59      	adds	r1, r3, #1
 8005882:	9103      	str	r1, [sp, #12]
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	e7f0      	b.n	800586a <__cvt+0xa6>

08005888 <__exponent>:
 8005888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588a:	4603      	mov	r3, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	bfb8      	it	lt
 8005890:	4249      	neglt	r1, r1
 8005892:	f803 2b02 	strb.w	r2, [r3], #2
 8005896:	bfb4      	ite	lt
 8005898:	222d      	movlt	r2, #45	; 0x2d
 800589a:	222b      	movge	r2, #43	; 0x2b
 800589c:	2909      	cmp	r1, #9
 800589e:	7042      	strb	r2, [r0, #1]
 80058a0:	dd2a      	ble.n	80058f8 <__exponent+0x70>
 80058a2:	f10d 0407 	add.w	r4, sp, #7
 80058a6:	46a4      	mov	ip, r4
 80058a8:	270a      	movs	r7, #10
 80058aa:	46a6      	mov	lr, r4
 80058ac:	460a      	mov	r2, r1
 80058ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80058b2:	fb07 1516 	mls	r5, r7, r6, r1
 80058b6:	3530      	adds	r5, #48	; 0x30
 80058b8:	2a63      	cmp	r2, #99	; 0x63
 80058ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80058be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058c2:	4631      	mov	r1, r6
 80058c4:	dcf1      	bgt.n	80058aa <__exponent+0x22>
 80058c6:	3130      	adds	r1, #48	; 0x30
 80058c8:	f1ae 0502 	sub.w	r5, lr, #2
 80058cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058d0:	1c44      	adds	r4, r0, #1
 80058d2:	4629      	mov	r1, r5
 80058d4:	4561      	cmp	r1, ip
 80058d6:	d30a      	bcc.n	80058ee <__exponent+0x66>
 80058d8:	f10d 0209 	add.w	r2, sp, #9
 80058dc:	eba2 020e 	sub.w	r2, r2, lr
 80058e0:	4565      	cmp	r5, ip
 80058e2:	bf88      	it	hi
 80058e4:	2200      	movhi	r2, #0
 80058e6:	4413      	add	r3, r2
 80058e8:	1a18      	subs	r0, r3, r0
 80058ea:	b003      	add	sp, #12
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058f6:	e7ed      	b.n	80058d4 <__exponent+0x4c>
 80058f8:	2330      	movs	r3, #48	; 0x30
 80058fa:	3130      	adds	r1, #48	; 0x30
 80058fc:	7083      	strb	r3, [r0, #2]
 80058fe:	70c1      	strb	r1, [r0, #3]
 8005900:	1d03      	adds	r3, r0, #4
 8005902:	e7f1      	b.n	80058e8 <__exponent+0x60>

08005904 <_printf_float>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	ed2d 8b02 	vpush	{d8}
 800590c:	b08d      	sub	sp, #52	; 0x34
 800590e:	460c      	mov	r4, r1
 8005910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005914:	4616      	mov	r6, r2
 8005916:	461f      	mov	r7, r3
 8005918:	4605      	mov	r5, r0
 800591a:	f001 fd5d 	bl	80073d8 <_localeconv_r>
 800591e:	f8d0 a000 	ldr.w	sl, [r0]
 8005922:	4650      	mov	r0, sl
 8005924:	f7fa fc54 	bl	80001d0 <strlen>
 8005928:	2300      	movs	r3, #0
 800592a:	930a      	str	r3, [sp, #40]	; 0x28
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	f8d8 3000 	ldr.w	r3, [r8]
 8005934:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005938:	3307      	adds	r3, #7
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	f103 0208 	add.w	r2, r3, #8
 8005942:	f8c8 2000 	str.w	r2, [r8]
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800594e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005956:	9307      	str	r3, [sp, #28]
 8005958:	f8cd 8018 	str.w	r8, [sp, #24]
 800595c:	ee08 0a10 	vmov	s16, r0
 8005960:	4b9f      	ldr	r3, [pc, #636]	; (8005be0 <_printf_float+0x2dc>)
 8005962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596a:	f7fb f8df 	bl	8000b2c <__aeabi_dcmpun>
 800596e:	bb88      	cbnz	r0, 80059d4 <_printf_float+0xd0>
 8005970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005974:	4b9a      	ldr	r3, [pc, #616]	; (8005be0 <_printf_float+0x2dc>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800597a:	f7fb f8b9 	bl	8000af0 <__aeabi_dcmple>
 800597e:	bb48      	cbnz	r0, 80059d4 <_printf_float+0xd0>
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmplt>
 800598c:	b110      	cbz	r0, 8005994 <_printf_float+0x90>
 800598e:	232d      	movs	r3, #45	; 0x2d
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005994:	4b93      	ldr	r3, [pc, #588]	; (8005be4 <_printf_float+0x2e0>)
 8005996:	4894      	ldr	r0, [pc, #592]	; (8005be8 <_printf_float+0x2e4>)
 8005998:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800599c:	bf94      	ite	ls
 800599e:	4698      	movls	r8, r3
 80059a0:	4680      	movhi	r8, r0
 80059a2:	2303      	movs	r3, #3
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	f023 0204 	bic.w	r2, r3, #4
 80059ac:	6022      	str	r2, [r4, #0]
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	9700      	str	r7, [sp, #0]
 80059b4:	4633      	mov	r3, r6
 80059b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f9d8 	bl	8005d70 <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	f040 8090 	bne.w	8005ae6 <_printf_float+0x1e2>
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ca:	b00d      	add	sp, #52	; 0x34
 80059cc:	ecbd 8b02 	vpop	{d8}
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fb f8a6 	bl	8000b2c <__aeabi_dcmpun>
 80059e0:	b140      	cbz	r0, 80059f4 <_printf_float+0xf0>
 80059e2:	464b      	mov	r3, r9
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbc      	itt	lt
 80059e8:	232d      	movlt	r3, #45	; 0x2d
 80059ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059ee:	487f      	ldr	r0, [pc, #508]	; (8005bec <_printf_float+0x2e8>)
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <_printf_float+0x2ec>)
 80059f2:	e7d1      	b.n	8005998 <_printf_float+0x94>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059fa:	9206      	str	r2, [sp, #24]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	d13f      	bne.n	8005a80 <_printf_float+0x17c>
 8005a00:	2306      	movs	r3, #6
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	9b05      	ldr	r3, [sp, #20]
 8005a06:	6861      	ldr	r1, [r4, #4]
 8005a08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	ab0a      	add	r3, sp, #40	; 0x28
 8005a12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a16:	ab09      	add	r3, sp, #36	; 0x24
 8005a18:	ec49 8b10 	vmov	d0, r8, r9
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6022      	str	r2, [r4, #0]
 8005a20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff fecd 	bl	80057c4 <__cvt>
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a2e:	2b47      	cmp	r3, #71	; 0x47
 8005a30:	4680      	mov	r8, r0
 8005a32:	d108      	bne.n	8005a46 <_printf_float+0x142>
 8005a34:	1cc8      	adds	r0, r1, #3
 8005a36:	db02      	blt.n	8005a3e <_printf_float+0x13a>
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	dd41      	ble.n	8005ac2 <_printf_float+0x1be>
 8005a3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a42:	fa5f fb8b 	uxtb.w	fp, fp
 8005a46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a4a:	d820      	bhi.n	8005a8e <_printf_float+0x18a>
 8005a4c:	3901      	subs	r1, #1
 8005a4e:	465a      	mov	r2, fp
 8005a50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a54:	9109      	str	r1, [sp, #36]	; 0x24
 8005a56:	f7ff ff17 	bl	8005888 <__exponent>
 8005a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5c:	1813      	adds	r3, r2, r0
 8005a5e:	2a01      	cmp	r2, #1
 8005a60:	4681      	mov	r9, r0
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	dc02      	bgt.n	8005a6c <_printf_float+0x168>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	07d2      	lsls	r2, r2, #31
 8005a6a:	d501      	bpl.n	8005a70 <_printf_float+0x16c>
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d09c      	beq.n	80059b2 <_printf_float+0xae>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7e:	e798      	b.n	80059b2 <_printf_float+0xae>
 8005a80:	9a06      	ldr	r2, [sp, #24]
 8005a82:	2a47      	cmp	r2, #71	; 0x47
 8005a84:	d1be      	bne.n	8005a04 <_printf_float+0x100>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1bc      	bne.n	8005a04 <_printf_float+0x100>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e7b9      	b.n	8005a02 <_printf_float+0xfe>
 8005a8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a92:	d118      	bne.n	8005ac6 <_printf_float+0x1c2>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	dd0b      	ble.n	8005ab2 <_printf_float+0x1ae>
 8005a9a:	6121      	str	r1, [r4, #16]
 8005a9c:	b913      	cbnz	r3, 8005aa4 <_printf_float+0x1a0>
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	07d0      	lsls	r0, r2, #31
 8005aa2:	d502      	bpl.n	8005aaa <_printf_float+0x1a6>
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aac:	f04f 0900 	mov.w	r9, #0
 8005ab0:	e7de      	b.n	8005a70 <_printf_float+0x16c>
 8005ab2:	b913      	cbnz	r3, 8005aba <_printf_float+0x1b6>
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	07d2      	lsls	r2, r2, #31
 8005ab8:	d501      	bpl.n	8005abe <_printf_float+0x1ba>
 8005aba:	3302      	adds	r3, #2
 8005abc:	e7f4      	b.n	8005aa8 <_printf_float+0x1a4>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e7f2      	b.n	8005aa8 <_printf_float+0x1a4>
 8005ac2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	db05      	blt.n	8005ad8 <_printf_float+0x1d4>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	6121      	str	r1, [r4, #16]
 8005ad0:	07d8      	lsls	r0, r3, #31
 8005ad2:	d5ea      	bpl.n	8005aaa <_printf_float+0x1a6>
 8005ad4:	1c4b      	adds	r3, r1, #1
 8005ad6:	e7e7      	b.n	8005aa8 <_printf_float+0x1a4>
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	bfd4      	ite	le
 8005adc:	f1c1 0202 	rsble	r2, r1, #2
 8005ae0:	2201      	movgt	r2, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	e7e0      	b.n	8005aa8 <_printf_float+0x1a4>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	055a      	lsls	r2, r3, #21
 8005aea:	d407      	bmi.n	8005afc <_printf_float+0x1f8>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	4642      	mov	r2, r8
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	d12c      	bne.n	8005b54 <_printf_float+0x250>
 8005afa:	e764      	b.n	80059c6 <_printf_float+0xc2>
 8005afc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b00:	f240 80e0 	bls.w	8005cc4 <_printf_float+0x3c0>
 8005b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f7fa ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d034      	beq.n	8005b7e <_printf_float+0x27a>
 8005b14:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <_printf_float+0x2f0>)
 8005b16:	2301      	movs	r3, #1
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f af51 	beq.w	80059c6 <_printf_float+0xc2>
 8005b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	db02      	blt.n	8005b32 <_printf_float+0x22e>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07d8      	lsls	r0, r3, #31
 8005b30:	d510      	bpl.n	8005b54 <_printf_float+0x250>
 8005b32:	ee18 3a10 	vmov	r3, s16
 8005b36:	4652      	mov	r2, sl
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f af41 	beq.w	80059c6 <_printf_float+0xc2>
 8005b44:	f04f 0800 	mov.w	r8, #0
 8005b48:	f104 091a 	add.w	r9, r4, #26
 8005b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	4543      	cmp	r3, r8
 8005b52:	dc09      	bgt.n	8005b68 <_printf_float+0x264>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	079b      	lsls	r3, r3, #30
 8005b58:	f100 8105 	bmi.w	8005d66 <_printf_float+0x462>
 8005b5c:	68e0      	ldr	r0, [r4, #12]
 8005b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b60:	4298      	cmp	r0, r3
 8005b62:	bfb8      	it	lt
 8005b64:	4618      	movlt	r0, r3
 8005b66:	e730      	b.n	80059ca <_printf_float+0xc6>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	464a      	mov	r2, r9
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f af27 	beq.w	80059c6 <_printf_float+0xc2>
 8005b78:	f108 0801 	add.w	r8, r8, #1
 8005b7c:	e7e6      	b.n	8005b4c <_printf_float+0x248>
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dc39      	bgt.n	8005bf8 <_printf_float+0x2f4>
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <_printf_float+0x2f0>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af19 	beq.w	80059c6 <_printf_float+0xc2>
 8005b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d102      	bne.n	8005ba2 <_printf_float+0x29e>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d9      	lsls	r1, r3, #31
 8005ba0:	d5d8      	bpl.n	8005b54 <_printf_float+0x250>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af09 	beq.w	80059c6 <_printf_float+0xc2>
 8005bb4:	f04f 0900 	mov.w	r9, #0
 8005bb8:	f104 0a1a 	add.w	sl, r4, #26
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	425b      	negs	r3, r3
 8005bc0:	454b      	cmp	r3, r9
 8005bc2:	dc01      	bgt.n	8005bc8 <_printf_float+0x2c4>
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	e792      	b.n	8005aee <_printf_float+0x1ea>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4652      	mov	r2, sl
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f aef7 	beq.w	80059c6 <_printf_float+0xc2>
 8005bd8:	f109 0901 	add.w	r9, r9, #1
 8005bdc:	e7ee      	b.n	8005bbc <_printf_float+0x2b8>
 8005bde:	bf00      	nop
 8005be0:	7fefffff 	.word	0x7fefffff
 8005be4:	080089ec 	.word	0x080089ec
 8005be8:	080089f0 	.word	0x080089f0
 8005bec:	080089f8 	.word	0x080089f8
 8005bf0:	080089f4 	.word	0x080089f4
 8005bf4:	080089fc 	.word	0x080089fc
 8005bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bfa8      	it	ge
 8005c00:	461a      	movge	r2, r3
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	4691      	mov	r9, r2
 8005c06:	dc37      	bgt.n	8005c78 <_printf_float+0x374>
 8005c08:	f04f 0b00 	mov.w	fp, #0
 8005c0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c10:	f104 021a 	add.w	r2, r4, #26
 8005c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	eba3 0309 	sub.w	r3, r3, r9
 8005c1c:	455b      	cmp	r3, fp
 8005c1e:	dc33      	bgt.n	8005c88 <_printf_float+0x384>
 8005c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	db3b      	blt.n	8005ca0 <_printf_float+0x39c>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07da      	lsls	r2, r3, #31
 8005c2c:	d438      	bmi.n	8005ca0 <_printf_float+0x39c>
 8005c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c30:	9b05      	ldr	r3, [sp, #20]
 8005c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	eba2 0901 	sub.w	r9, r2, r1
 8005c3a:	4599      	cmp	r9, r3
 8005c3c:	bfa8      	it	ge
 8005c3e:	4699      	movge	r9, r3
 8005c40:	f1b9 0f00 	cmp.w	r9, #0
 8005c44:	dc35      	bgt.n	8005cb2 <_printf_float+0x3ae>
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4e:	f104 0a1a 	add.w	sl, r4, #26
 8005c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	eba3 0309 	sub.w	r3, r3, r9
 8005c5c:	4543      	cmp	r3, r8
 8005c5e:	f77f af79 	ble.w	8005b54 <_printf_float+0x250>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f aeaa 	beq.w	80059c6 <_printf_float+0xc2>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	e7ec      	b.n	8005c52 <_printf_float+0x34e>
 8005c78:	4613      	mov	r3, r2
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	d1c0      	bne.n	8005c08 <_printf_float+0x304>
 8005c86:	e69e      	b.n	80059c6 <_printf_float+0xc2>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	9205      	str	r2, [sp, #20]
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f ae97 	beq.w	80059c6 <_printf_float+0xc2>
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	f10b 0b01 	add.w	fp, fp, #1
 8005c9e:	e7b9      	b.n	8005c14 <_printf_float+0x310>
 8005ca0:	ee18 3a10 	vmov	r3, s16
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	d1be      	bne.n	8005c2e <_printf_float+0x32a>
 8005cb0:	e689      	b.n	80059c6 <_printf_float+0xc2>
 8005cb2:	9a05      	ldr	r2, [sp, #20]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	4442      	add	r2, r8
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d1c1      	bne.n	8005c46 <_printf_float+0x342>
 8005cc2:	e680      	b.n	80059c6 <_printf_float+0xc2>
 8005cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cc6:	2a01      	cmp	r2, #1
 8005cc8:	dc01      	bgt.n	8005cce <_printf_float+0x3ca>
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	d538      	bpl.n	8005d40 <_printf_float+0x43c>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f ae74 	beq.w	80059c6 <_printf_float+0xc2>
 8005cde:	ee18 3a10 	vmov	r3, s16
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f ae6b 	beq.w	80059c6 <_printf_float+0xc2>
 8005cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f7fa fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cfc:	b9d8      	cbnz	r0, 8005d36 <_printf_float+0x432>
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d00:	f108 0201 	add.w	r2, r8, #1
 8005d04:	3b01      	subs	r3, #1
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d10e      	bne.n	8005d2e <_printf_float+0x42a>
 8005d10:	e659      	b.n	80059c6 <_printf_float+0xc2>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f ae52 	beq.w	80059c6 <_printf_float+0xc2>
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	4543      	cmp	r3, r8
 8005d2c:	dcf1      	bgt.n	8005d12 <_printf_float+0x40e>
 8005d2e:	464b      	mov	r3, r9
 8005d30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d34:	e6dc      	b.n	8005af0 <_printf_float+0x1ec>
 8005d36:	f04f 0800 	mov.w	r8, #0
 8005d3a:	f104 0a1a 	add.w	sl, r4, #26
 8005d3e:	e7f2      	b.n	8005d26 <_printf_float+0x422>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4642      	mov	r2, r8
 8005d44:	e7df      	b.n	8005d06 <_printf_float+0x402>
 8005d46:	2301      	movs	r3, #1
 8005d48:	464a      	mov	r2, r9
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f ae38 	beq.w	80059c6 <_printf_float+0xc2>
 8005d56:	f108 0801 	add.w	r8, r8, #1
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5e:	1a5b      	subs	r3, r3, r1
 8005d60:	4543      	cmp	r3, r8
 8005d62:	dcf0      	bgt.n	8005d46 <_printf_float+0x442>
 8005d64:	e6fa      	b.n	8005b5c <_printf_float+0x258>
 8005d66:	f04f 0800 	mov.w	r8, #0
 8005d6a:	f104 0919 	add.w	r9, r4, #25
 8005d6e:	e7f4      	b.n	8005d5a <_printf_float+0x456>

08005d70 <_printf_common>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	4616      	mov	r6, r2
 8005d76:	4699      	mov	r9, r3
 8005d78:	688a      	ldr	r2, [r1, #8]
 8005d7a:	690b      	ldr	r3, [r1, #16]
 8005d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bfb8      	it	lt
 8005d84:	4613      	movlt	r3, r2
 8005d86:	6033      	str	r3, [r6, #0]
 8005d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	b10a      	cbz	r2, 8005d96 <_printf_common+0x26>
 8005d92:	3301      	adds	r3, #1
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	0699      	lsls	r1, r3, #26
 8005d9a:	bf42      	ittt	mi
 8005d9c:	6833      	ldrmi	r3, [r6, #0]
 8005d9e:	3302      	addmi	r3, #2
 8005da0:	6033      	strmi	r3, [r6, #0]
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	f015 0506 	ands.w	r5, r5, #6
 8005da8:	d106      	bne.n	8005db8 <_printf_common+0x48>
 8005daa:	f104 0a19 	add.w	sl, r4, #25
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	6832      	ldr	r2, [r6, #0]
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	dc26      	bgt.n	8005e06 <_printf_common+0x96>
 8005db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dbc:	1e13      	subs	r3, r2, #0
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	bf18      	it	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	0692      	lsls	r2, r2, #26
 8005dc6:	d42b      	bmi.n	8005e20 <_printf_common+0xb0>
 8005dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d01e      	beq.n	8005e14 <_printf_common+0xa4>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	68e5      	ldr	r5, [r4, #12]
 8005dda:	6832      	ldr	r2, [r6, #0]
 8005ddc:	f003 0306 	and.w	r3, r3, #6
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	bf08      	it	eq
 8005de4:	1aad      	subeq	r5, r5, r2
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	6922      	ldr	r2, [r4, #16]
 8005dea:	bf0c      	ite	eq
 8005dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df0:	2500      	movne	r5, #0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bfc4      	itt	gt
 8005df6:	1a9b      	subgt	r3, r3, r2
 8005df8:	18ed      	addgt	r5, r5, r3
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	341a      	adds	r4, #26
 8005dfe:	42b5      	cmp	r5, r6
 8005e00:	d11a      	bne.n	8005e38 <_printf_common+0xc8>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e008      	b.n	8005e18 <_printf_common+0xa8>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	47c0      	blx	r8
 8005e10:	3001      	adds	r0, #1
 8005e12:	d103      	bne.n	8005e1c <_printf_common+0xac>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	e7c6      	b.n	8005dae <_printf_common+0x3e>
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	2030      	movs	r0, #48	; 0x30
 8005e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2a:	4422      	add	r2, r4
 8005e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e34:	3302      	adds	r3, #2
 8005e36:	e7c7      	b.n	8005dc8 <_printf_common+0x58>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d0e6      	beq.n	8005e14 <_printf_common+0xa4>
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7d9      	b.n	8005dfe <_printf_common+0x8e>
	...

08005e4c <_printf_i>:
 8005e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	4691      	mov	r9, r2
 8005e54:	7e27      	ldrb	r7, [r4, #24]
 8005e56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e58:	2f78      	cmp	r7, #120	; 0x78
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	469a      	mov	sl, r3
 8005e5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e62:	d807      	bhi.n	8005e74 <_printf_i+0x28>
 8005e64:	2f62      	cmp	r7, #98	; 0x62
 8005e66:	d80a      	bhi.n	8005e7e <_printf_i+0x32>
 8005e68:	2f00      	cmp	r7, #0
 8005e6a:	f000 80d8 	beq.w	800601e <_printf_i+0x1d2>
 8005e6e:	2f58      	cmp	r7, #88	; 0x58
 8005e70:	f000 80a3 	beq.w	8005fba <_printf_i+0x16e>
 8005e74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e7c:	e03a      	b.n	8005ef4 <_printf_i+0xa8>
 8005e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e82:	2b15      	cmp	r3, #21
 8005e84:	d8f6      	bhi.n	8005e74 <_printf_i+0x28>
 8005e86:	a001      	add	r0, pc, #4	; (adr r0, 8005e8c <_printf_i+0x40>)
 8005e88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e8c:	08005ee5 	.word	0x08005ee5
 8005e90:	08005ef9 	.word	0x08005ef9
 8005e94:	08005e75 	.word	0x08005e75
 8005e98:	08005e75 	.word	0x08005e75
 8005e9c:	08005e75 	.word	0x08005e75
 8005ea0:	08005e75 	.word	0x08005e75
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005e75 	.word	0x08005e75
 8005eac:	08005e75 	.word	0x08005e75
 8005eb0:	08005e75 	.word	0x08005e75
 8005eb4:	08005e75 	.word	0x08005e75
 8005eb8:	08006005 	.word	0x08006005
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	08005fe7 	.word	0x08005fe7
 8005ec4:	08005e75 	.word	0x08005e75
 8005ec8:	08005e75 	.word	0x08005e75
 8005ecc:	08006027 	.word	0x08006027
 8005ed0:	08005e75 	.word	0x08005e75
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005e75 	.word	0x08005e75
 8005edc:	08005e75 	.word	0x08005e75
 8005ee0:	08005fef 	.word	0x08005fef
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	600a      	str	r2, [r1, #0]
 8005eec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0a3      	b.n	8006040 <_printf_i+0x1f4>
 8005ef8:	6825      	ldr	r5, [r4, #0]
 8005efa:	6808      	ldr	r0, [r1, #0]
 8005efc:	062e      	lsls	r6, r5, #24
 8005efe:	f100 0304 	add.w	r3, r0, #4
 8005f02:	d50a      	bpl.n	8005f1a <_printf_i+0xce>
 8005f04:	6805      	ldr	r5, [r0, #0]
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	da03      	bge.n	8005f14 <_printf_i+0xc8>
 8005f0c:	232d      	movs	r3, #45	; 0x2d
 8005f0e:	426d      	negs	r5, r5
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	485e      	ldr	r0, [pc, #376]	; (8006090 <_printf_i+0x244>)
 8005f16:	230a      	movs	r3, #10
 8005f18:	e019      	b.n	8005f4e <_printf_i+0x102>
 8005f1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f1e:	6805      	ldr	r5, [r0, #0]
 8005f20:	600b      	str	r3, [r1, #0]
 8005f22:	bf18      	it	ne
 8005f24:	b22d      	sxthne	r5, r5
 8005f26:	e7ef      	b.n	8005f08 <_printf_i+0xbc>
 8005f28:	680b      	ldr	r3, [r1, #0]
 8005f2a:	6825      	ldr	r5, [r4, #0]
 8005f2c:	1d18      	adds	r0, r3, #4
 8005f2e:	6008      	str	r0, [r1, #0]
 8005f30:	0628      	lsls	r0, r5, #24
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0xec>
 8005f34:	681d      	ldr	r5, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <_printf_i+0xf2>
 8005f38:	0669      	lsls	r1, r5, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0xe8>
 8005f3c:	881d      	ldrh	r5, [r3, #0]
 8005f3e:	4854      	ldr	r0, [pc, #336]	; (8006090 <_printf_i+0x244>)
 8005f40:	2f6f      	cmp	r7, #111	; 0x6f
 8005f42:	bf0c      	ite	eq
 8005f44:	2308      	moveq	r3, #8
 8005f46:	230a      	movne	r3, #10
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4e:	6866      	ldr	r6, [r4, #4]
 8005f50:	60a6      	str	r6, [r4, #8]
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	bfa2      	ittt	ge
 8005f56:	6821      	ldrge	r1, [r4, #0]
 8005f58:	f021 0104 	bicge.w	r1, r1, #4
 8005f5c:	6021      	strge	r1, [r4, #0]
 8005f5e:	b90d      	cbnz	r5, 8005f64 <_printf_i+0x118>
 8005f60:	2e00      	cmp	r6, #0
 8005f62:	d04d      	beq.n	8006000 <_printf_i+0x1b4>
 8005f64:	4616      	mov	r6, r2
 8005f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f6e:	5dc7      	ldrb	r7, [r0, r7]
 8005f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f74:	462f      	mov	r7, r5
 8005f76:	42bb      	cmp	r3, r7
 8005f78:	460d      	mov	r5, r1
 8005f7a:	d9f4      	bls.n	8005f66 <_printf_i+0x11a>
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d10b      	bne.n	8005f98 <_printf_i+0x14c>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07df      	lsls	r7, r3, #31
 8005f84:	d508      	bpl.n	8005f98 <_printf_i+0x14c>
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	6861      	ldr	r1, [r4, #4]
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	bfde      	ittt	le
 8005f8e:	2330      	movle	r3, #48	; 0x30
 8005f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f94:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005f98:	1b92      	subs	r2, r2, r6
 8005f9a:	6122      	str	r2, [r4, #16]
 8005f9c:	f8cd a000 	str.w	sl, [sp]
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	aa03      	add	r2, sp, #12
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fee2 	bl	8005d70 <_printf_common>
 8005fac:	3001      	adds	r0, #1
 8005fae:	d14c      	bne.n	800604a <_printf_i+0x1fe>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb4:	b004      	add	sp, #16
 8005fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fba:	4835      	ldr	r0, [pc, #212]	; (8006090 <_printf_i+0x244>)
 8005fbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	680e      	ldr	r6, [r1, #0]
 8005fc4:	061f      	lsls	r7, r3, #24
 8005fc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fca:	600e      	str	r6, [r1, #0]
 8005fcc:	d514      	bpl.n	8005ff8 <_printf_i+0x1ac>
 8005fce:	07d9      	lsls	r1, r3, #31
 8005fd0:	bf44      	itt	mi
 8005fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd6:	6023      	strmi	r3, [r4, #0]
 8005fd8:	b91d      	cbnz	r5, 8005fe2 <_printf_i+0x196>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f023 0320 	bic.w	r3, r3, #32
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	2310      	movs	r3, #16
 8005fe4:	e7b0      	b.n	8005f48 <_printf_i+0xfc>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f043 0320 	orr.w	r3, r3, #32
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	2378      	movs	r3, #120	; 0x78
 8005ff0:	4828      	ldr	r0, [pc, #160]	; (8006094 <_printf_i+0x248>)
 8005ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff6:	e7e3      	b.n	8005fc0 <_printf_i+0x174>
 8005ff8:	065e      	lsls	r6, r3, #25
 8005ffa:	bf48      	it	mi
 8005ffc:	b2ad      	uxthmi	r5, r5
 8005ffe:	e7e6      	b.n	8005fce <_printf_i+0x182>
 8006000:	4616      	mov	r6, r2
 8006002:	e7bb      	b.n	8005f7c <_printf_i+0x130>
 8006004:	680b      	ldr	r3, [r1, #0]
 8006006:	6826      	ldr	r6, [r4, #0]
 8006008:	6960      	ldr	r0, [r4, #20]
 800600a:	1d1d      	adds	r5, r3, #4
 800600c:	600d      	str	r5, [r1, #0]
 800600e:	0635      	lsls	r5, r6, #24
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	d501      	bpl.n	8006018 <_printf_i+0x1cc>
 8006014:	6018      	str	r0, [r3, #0]
 8006016:	e002      	b.n	800601e <_printf_i+0x1d2>
 8006018:	0671      	lsls	r1, r6, #25
 800601a:	d5fb      	bpl.n	8006014 <_printf_i+0x1c8>
 800601c:	8018      	strh	r0, [r3, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	4616      	mov	r6, r2
 8006024:	e7ba      	b.n	8005f9c <_printf_i+0x150>
 8006026:	680b      	ldr	r3, [r1, #0]
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	600a      	str	r2, [r1, #0]
 800602c:	681e      	ldr	r6, [r3, #0]
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	2100      	movs	r1, #0
 8006032:	4630      	mov	r0, r6
 8006034:	f7fa f8d4 	bl	80001e0 <memchr>
 8006038:	b108      	cbz	r0, 800603e <_printf_i+0x1f2>
 800603a:	1b80      	subs	r0, r0, r6
 800603c:	6060      	str	r0, [r4, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	2300      	movs	r3, #0
 8006044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006048:	e7a8      	b.n	8005f9c <_printf_i+0x150>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	4632      	mov	r2, r6
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	47d0      	blx	sl
 8006054:	3001      	adds	r0, #1
 8006056:	d0ab      	beq.n	8005fb0 <_printf_i+0x164>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	d413      	bmi.n	8006086 <_printf_i+0x23a>
 800605e:	68e0      	ldr	r0, [r4, #12]
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	4298      	cmp	r0, r3
 8006064:	bfb8      	it	lt
 8006066:	4618      	movlt	r0, r3
 8006068:	e7a4      	b.n	8005fb4 <_printf_i+0x168>
 800606a:	2301      	movs	r3, #1
 800606c:	4632      	mov	r2, r6
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	47d0      	blx	sl
 8006074:	3001      	adds	r0, #1
 8006076:	d09b      	beq.n	8005fb0 <_printf_i+0x164>
 8006078:	3501      	adds	r5, #1
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	9903      	ldr	r1, [sp, #12]
 800607e:	1a5b      	subs	r3, r3, r1
 8006080:	42ab      	cmp	r3, r5
 8006082:	dcf2      	bgt.n	800606a <_printf_i+0x21e>
 8006084:	e7eb      	b.n	800605e <_printf_i+0x212>
 8006086:	2500      	movs	r5, #0
 8006088:	f104 0619 	add.w	r6, r4, #25
 800608c:	e7f5      	b.n	800607a <_printf_i+0x22e>
 800608e:	bf00      	nop
 8006090:	080089fe 	.word	0x080089fe
 8006094:	08008a0f 	.word	0x08008a0f

08006098 <iprintf>:
 8006098:	b40f      	push	{r0, r1, r2, r3}
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <iprintf+0x2c>)
 800609c:	b513      	push	{r0, r1, r4, lr}
 800609e:	681c      	ldr	r4, [r3, #0]
 80060a0:	b124      	cbz	r4, 80060ac <iprintf+0x14>
 80060a2:	69a3      	ldr	r3, [r4, #24]
 80060a4:	b913      	cbnz	r3, 80060ac <iprintf+0x14>
 80060a6:	4620      	mov	r0, r4
 80060a8:	f001 f8f8 	bl	800729c <__sinit>
 80060ac:	ab05      	add	r3, sp, #20
 80060ae:	9a04      	ldr	r2, [sp, #16]
 80060b0:	68a1      	ldr	r1, [r4, #8]
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	4620      	mov	r0, r4
 80060b6:	f001 ffc1 	bl	800803c <_vfiprintf_r>
 80060ba:	b002      	add	sp, #8
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	b004      	add	sp, #16
 80060c2:	4770      	bx	lr
 80060c4:	2000000c 	.word	0x2000000c

080060c8 <_puts_r>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	460e      	mov	r6, r1
 80060cc:	4605      	mov	r5, r0
 80060ce:	b118      	cbz	r0, 80060d8 <_puts_r+0x10>
 80060d0:	6983      	ldr	r3, [r0, #24]
 80060d2:	b90b      	cbnz	r3, 80060d8 <_puts_r+0x10>
 80060d4:	f001 f8e2 	bl	800729c <__sinit>
 80060d8:	69ab      	ldr	r3, [r5, #24]
 80060da:	68ac      	ldr	r4, [r5, #8]
 80060dc:	b913      	cbnz	r3, 80060e4 <_puts_r+0x1c>
 80060de:	4628      	mov	r0, r5
 80060e0:	f001 f8dc 	bl	800729c <__sinit>
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <_puts_r+0xd0>)
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d120      	bne.n	800612c <_puts_r+0x64>
 80060ea:	686c      	ldr	r4, [r5, #4]
 80060ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ee:	07db      	lsls	r3, r3, #31
 80060f0:	d405      	bmi.n	80060fe <_puts_r+0x36>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	0598      	lsls	r0, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_puts_r+0x36>
 80060f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fa:	f001 f972 	bl	80073e2 <__retarget_lock_acquire_recursive>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	0719      	lsls	r1, r3, #28
 8006102:	d51d      	bpl.n	8006140 <_puts_r+0x78>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	b1db      	cbz	r3, 8006140 <_puts_r+0x78>
 8006108:	3e01      	subs	r6, #1
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006110:	3b01      	subs	r3, #1
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	bb39      	cbnz	r1, 8006166 <_puts_r+0x9e>
 8006116:	2b00      	cmp	r3, #0
 8006118:	da38      	bge.n	800618c <_puts_r+0xc4>
 800611a:	4622      	mov	r2, r4
 800611c:	210a      	movs	r1, #10
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f868 	bl	80061f4 <__swbuf_r>
 8006124:	3001      	adds	r0, #1
 8006126:	d011      	beq.n	800614c <_puts_r+0x84>
 8006128:	250a      	movs	r5, #10
 800612a:	e011      	b.n	8006150 <_puts_r+0x88>
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <_puts_r+0xd4>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d101      	bne.n	8006136 <_puts_r+0x6e>
 8006132:	68ac      	ldr	r4, [r5, #8]
 8006134:	e7da      	b.n	80060ec <_puts_r+0x24>
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <_puts_r+0xd8>)
 8006138:	429c      	cmp	r4, r3
 800613a:	bf08      	it	eq
 800613c:	68ec      	ldreq	r4, [r5, #12]
 800613e:	e7d5      	b.n	80060ec <_puts_r+0x24>
 8006140:	4621      	mov	r1, r4
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f8a8 	bl	8006298 <__swsetup_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	d0dd      	beq.n	8006108 <_puts_r+0x40>
 800614c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006152:	07da      	lsls	r2, r3, #31
 8006154:	d405      	bmi.n	8006162 <_puts_r+0x9a>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	059b      	lsls	r3, r3, #22
 800615a:	d402      	bmi.n	8006162 <_puts_r+0x9a>
 800615c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800615e:	f001 f941 	bl	80073e4 <__retarget_lock_release_recursive>
 8006162:	4628      	mov	r0, r5
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	2b00      	cmp	r3, #0
 8006168:	da04      	bge.n	8006174 <_puts_r+0xac>
 800616a:	69a2      	ldr	r2, [r4, #24]
 800616c:	429a      	cmp	r2, r3
 800616e:	dc06      	bgt.n	800617e <_puts_r+0xb6>
 8006170:	290a      	cmp	r1, #10
 8006172:	d004      	beq.n	800617e <_puts_r+0xb6>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	7019      	strb	r1, [r3, #0]
 800617c:	e7c5      	b.n	800610a <_puts_r+0x42>
 800617e:	4622      	mov	r2, r4
 8006180:	4628      	mov	r0, r5
 8006182:	f000 f837 	bl	80061f4 <__swbuf_r>
 8006186:	3001      	adds	r0, #1
 8006188:	d1bf      	bne.n	800610a <_puts_r+0x42>
 800618a:	e7df      	b.n	800614c <_puts_r+0x84>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	250a      	movs	r5, #10
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	701d      	strb	r5, [r3, #0]
 8006196:	e7db      	b.n	8006150 <_puts_r+0x88>
 8006198:	08008ad4 	.word	0x08008ad4
 800619c:	08008af4 	.word	0x08008af4
 80061a0:	08008ab4 	.word	0x08008ab4

080061a4 <puts>:
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <puts+0xc>)
 80061a6:	4601      	mov	r1, r0
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f7ff bf8d 	b.w	80060c8 <_puts_r>
 80061ae:	bf00      	nop
 80061b0:	2000000c 	.word	0x2000000c

080061b4 <siprintf>:
 80061b4:	b40e      	push	{r1, r2, r3}
 80061b6:	b500      	push	{lr}
 80061b8:	b09c      	sub	sp, #112	; 0x70
 80061ba:	ab1d      	add	r3, sp, #116	; 0x74
 80061bc:	9002      	str	r0, [sp, #8]
 80061be:	9006      	str	r0, [sp, #24]
 80061c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061c4:	4809      	ldr	r0, [pc, #36]	; (80061ec <siprintf+0x38>)
 80061c6:	9107      	str	r1, [sp, #28]
 80061c8:	9104      	str	r1, [sp, #16]
 80061ca:	4909      	ldr	r1, [pc, #36]	; (80061f0 <siprintf+0x3c>)
 80061cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	6800      	ldr	r0, [r0, #0]
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	a902      	add	r1, sp, #8
 80061d8:	f001 fe06 	bl	8007de8 <_svfiprintf_r>
 80061dc:	9b02      	ldr	r3, [sp, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	b01c      	add	sp, #112	; 0x70
 80061e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061e8:	b003      	add	sp, #12
 80061ea:	4770      	bx	lr
 80061ec:	2000000c 	.word	0x2000000c
 80061f0:	ffff0208 	.word	0xffff0208

080061f4 <__swbuf_r>:
 80061f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f6:	460e      	mov	r6, r1
 80061f8:	4614      	mov	r4, r2
 80061fa:	4605      	mov	r5, r0
 80061fc:	b118      	cbz	r0, 8006206 <__swbuf_r+0x12>
 80061fe:	6983      	ldr	r3, [r0, #24]
 8006200:	b90b      	cbnz	r3, 8006206 <__swbuf_r+0x12>
 8006202:	f001 f84b 	bl	800729c <__sinit>
 8006206:	4b21      	ldr	r3, [pc, #132]	; (800628c <__swbuf_r+0x98>)
 8006208:	429c      	cmp	r4, r3
 800620a:	d12b      	bne.n	8006264 <__swbuf_r+0x70>
 800620c:	686c      	ldr	r4, [r5, #4]
 800620e:	69a3      	ldr	r3, [r4, #24]
 8006210:	60a3      	str	r3, [r4, #8]
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	071a      	lsls	r2, r3, #28
 8006216:	d52f      	bpl.n	8006278 <__swbuf_r+0x84>
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	b36b      	cbz	r3, 8006278 <__swbuf_r+0x84>
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	1ac0      	subs	r0, r0, r3
 8006222:	6963      	ldr	r3, [r4, #20]
 8006224:	b2f6      	uxtb	r6, r6
 8006226:	4283      	cmp	r3, r0
 8006228:	4637      	mov	r7, r6
 800622a:	dc04      	bgt.n	8006236 <__swbuf_r+0x42>
 800622c:	4621      	mov	r1, r4
 800622e:	4628      	mov	r0, r5
 8006230:	f000 ffa0 	bl	8007174 <_fflush_r>
 8006234:	bb30      	cbnz	r0, 8006284 <__swbuf_r+0x90>
 8006236:	68a3      	ldr	r3, [r4, #8]
 8006238:	3b01      	subs	r3, #1
 800623a:	60a3      	str	r3, [r4, #8]
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	6022      	str	r2, [r4, #0]
 8006242:	701e      	strb	r6, [r3, #0]
 8006244:	6963      	ldr	r3, [r4, #20]
 8006246:	3001      	adds	r0, #1
 8006248:	4283      	cmp	r3, r0
 800624a:	d004      	beq.n	8006256 <__swbuf_r+0x62>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d506      	bpl.n	8006260 <__swbuf_r+0x6c>
 8006252:	2e0a      	cmp	r6, #10
 8006254:	d104      	bne.n	8006260 <__swbuf_r+0x6c>
 8006256:	4621      	mov	r1, r4
 8006258:	4628      	mov	r0, r5
 800625a:	f000 ff8b 	bl	8007174 <_fflush_r>
 800625e:	b988      	cbnz	r0, 8006284 <__swbuf_r+0x90>
 8006260:	4638      	mov	r0, r7
 8006262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <__swbuf_r+0x9c>)
 8006266:	429c      	cmp	r4, r3
 8006268:	d101      	bne.n	800626e <__swbuf_r+0x7a>
 800626a:	68ac      	ldr	r4, [r5, #8]
 800626c:	e7cf      	b.n	800620e <__swbuf_r+0x1a>
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <__swbuf_r+0xa0>)
 8006270:	429c      	cmp	r4, r3
 8006272:	bf08      	it	eq
 8006274:	68ec      	ldreq	r4, [r5, #12]
 8006276:	e7ca      	b.n	800620e <__swbuf_r+0x1a>
 8006278:	4621      	mov	r1, r4
 800627a:	4628      	mov	r0, r5
 800627c:	f000 f80c 	bl	8006298 <__swsetup_r>
 8006280:	2800      	cmp	r0, #0
 8006282:	d0cb      	beq.n	800621c <__swbuf_r+0x28>
 8006284:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006288:	e7ea      	b.n	8006260 <__swbuf_r+0x6c>
 800628a:	bf00      	nop
 800628c:	08008ad4 	.word	0x08008ad4
 8006290:	08008af4 	.word	0x08008af4
 8006294:	08008ab4 	.word	0x08008ab4

08006298 <__swsetup_r>:
 8006298:	4b32      	ldr	r3, [pc, #200]	; (8006364 <__swsetup_r+0xcc>)
 800629a:	b570      	push	{r4, r5, r6, lr}
 800629c:	681d      	ldr	r5, [r3, #0]
 800629e:	4606      	mov	r6, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	b125      	cbz	r5, 80062ae <__swsetup_r+0x16>
 80062a4:	69ab      	ldr	r3, [r5, #24]
 80062a6:	b913      	cbnz	r3, 80062ae <__swsetup_r+0x16>
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 fff7 	bl	800729c <__sinit>
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <__swsetup_r+0xd0>)
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d10f      	bne.n	80062d4 <__swsetup_r+0x3c>
 80062b4:	686c      	ldr	r4, [r5, #4]
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062bc:	0719      	lsls	r1, r3, #28
 80062be:	d42c      	bmi.n	800631a <__swsetup_r+0x82>
 80062c0:	06dd      	lsls	r5, r3, #27
 80062c2:	d411      	bmi.n	80062e8 <__swsetup_r+0x50>
 80062c4:	2309      	movs	r3, #9
 80062c6:	6033      	str	r3, [r6, #0]
 80062c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d2:	e03e      	b.n	8006352 <__swsetup_r+0xba>
 80062d4:	4b25      	ldr	r3, [pc, #148]	; (800636c <__swsetup_r+0xd4>)
 80062d6:	429c      	cmp	r4, r3
 80062d8:	d101      	bne.n	80062de <__swsetup_r+0x46>
 80062da:	68ac      	ldr	r4, [r5, #8]
 80062dc:	e7eb      	b.n	80062b6 <__swsetup_r+0x1e>
 80062de:	4b24      	ldr	r3, [pc, #144]	; (8006370 <__swsetup_r+0xd8>)
 80062e0:	429c      	cmp	r4, r3
 80062e2:	bf08      	it	eq
 80062e4:	68ec      	ldreq	r4, [r5, #12]
 80062e6:	e7e6      	b.n	80062b6 <__swsetup_r+0x1e>
 80062e8:	0758      	lsls	r0, r3, #29
 80062ea:	d512      	bpl.n	8006312 <__swsetup_r+0x7a>
 80062ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ee:	b141      	cbz	r1, 8006302 <__swsetup_r+0x6a>
 80062f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f4:	4299      	cmp	r1, r3
 80062f6:	d002      	beq.n	80062fe <__swsetup_r+0x66>
 80062f8:	4630      	mov	r0, r6
 80062fa:	f001 fc6f 	bl	8007bdc <_free_r>
 80062fe:	2300      	movs	r3, #0
 8006300:	6363      	str	r3, [r4, #52]	; 0x34
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006308:	81a3      	strh	r3, [r4, #12]
 800630a:	2300      	movs	r3, #0
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	f043 0308 	orr.w	r3, r3, #8
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	b94b      	cbnz	r3, 8006332 <__swsetup_r+0x9a>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006328:	d003      	beq.n	8006332 <__swsetup_r+0x9a>
 800632a:	4621      	mov	r1, r4
 800632c:	4630      	mov	r0, r6
 800632e:	f001 f87f 	bl	8007430 <__smakebuf_r>
 8006332:	89a0      	ldrh	r0, [r4, #12]
 8006334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006338:	f010 0301 	ands.w	r3, r0, #1
 800633c:	d00a      	beq.n	8006354 <__swsetup_r+0xbc>
 800633e:	2300      	movs	r3, #0
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	6963      	ldr	r3, [r4, #20]
 8006344:	425b      	negs	r3, r3
 8006346:	61a3      	str	r3, [r4, #24]
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	b943      	cbnz	r3, 800635e <__swsetup_r+0xc6>
 800634c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006350:	d1ba      	bne.n	80062c8 <__swsetup_r+0x30>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	0781      	lsls	r1, r0, #30
 8006356:	bf58      	it	pl
 8006358:	6963      	ldrpl	r3, [r4, #20]
 800635a:	60a3      	str	r3, [r4, #8]
 800635c:	e7f4      	b.n	8006348 <__swsetup_r+0xb0>
 800635e:	2000      	movs	r0, #0
 8006360:	e7f7      	b.n	8006352 <__swsetup_r+0xba>
 8006362:	bf00      	nop
 8006364:	2000000c 	.word	0x2000000c
 8006368:	08008ad4 	.word	0x08008ad4
 800636c:	08008af4 	.word	0x08008af4
 8006370:	08008ab4 	.word	0x08008ab4

08006374 <quorem>:
 8006374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	6903      	ldr	r3, [r0, #16]
 800637a:	690c      	ldr	r4, [r1, #16]
 800637c:	42a3      	cmp	r3, r4
 800637e:	4607      	mov	r7, r0
 8006380:	f2c0 8081 	blt.w	8006486 <quorem+0x112>
 8006384:	3c01      	subs	r4, #1
 8006386:	f101 0814 	add.w	r8, r1, #20
 800638a:	f100 0514 	add.w	r5, r0, #20
 800638e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800639c:	3301      	adds	r3, #1
 800639e:	429a      	cmp	r2, r3
 80063a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ac:	d331      	bcc.n	8006412 <quorem+0x9e>
 80063ae:	f04f 0e00 	mov.w	lr, #0
 80063b2:	4640      	mov	r0, r8
 80063b4:	46ac      	mov	ip, r5
 80063b6:	46f2      	mov	sl, lr
 80063b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80063bc:	b293      	uxth	r3, r2
 80063be:	fb06 e303 	mla	r3, r6, r3, lr
 80063c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ebaa 0303 	sub.w	r3, sl, r3
 80063cc:	0c12      	lsrs	r2, r2, #16
 80063ce:	f8dc a000 	ldr.w	sl, [ip]
 80063d2:	fb06 e202 	mla	r2, r6, r2, lr
 80063d6:	fa13 f38a 	uxtah	r3, r3, sl
 80063da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063de:	fa1f fa82 	uxth.w	sl, r2
 80063e2:	f8dc 2000 	ldr.w	r2, [ip]
 80063e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f4:	4581      	cmp	r9, r0
 80063f6:	f84c 3b04 	str.w	r3, [ip], #4
 80063fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063fe:	d2db      	bcs.n	80063b8 <quorem+0x44>
 8006400:	f855 300b 	ldr.w	r3, [r5, fp]
 8006404:	b92b      	cbnz	r3, 8006412 <quorem+0x9e>
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	3b04      	subs	r3, #4
 800640a:	429d      	cmp	r5, r3
 800640c:	461a      	mov	r2, r3
 800640e:	d32e      	bcc.n	800646e <quorem+0xfa>
 8006410:	613c      	str	r4, [r7, #16]
 8006412:	4638      	mov	r0, r7
 8006414:	f001 fad2 	bl	80079bc <__mcmp>
 8006418:	2800      	cmp	r0, #0
 800641a:	db24      	blt.n	8006466 <quorem+0xf2>
 800641c:	3601      	adds	r6, #1
 800641e:	4628      	mov	r0, r5
 8006420:	f04f 0c00 	mov.w	ip, #0
 8006424:	f858 2b04 	ldr.w	r2, [r8], #4
 8006428:	f8d0 e000 	ldr.w	lr, [r0]
 800642c:	b293      	uxth	r3, r2
 800642e:	ebac 0303 	sub.w	r3, ip, r3
 8006432:	0c12      	lsrs	r2, r2, #16
 8006434:	fa13 f38e 	uxtah	r3, r3, lr
 8006438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800643c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006446:	45c1      	cmp	r9, r8
 8006448:	f840 3b04 	str.w	r3, [r0], #4
 800644c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006450:	d2e8      	bcs.n	8006424 <quorem+0xb0>
 8006452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645a:	b922      	cbnz	r2, 8006466 <quorem+0xf2>
 800645c:	3b04      	subs	r3, #4
 800645e:	429d      	cmp	r5, r3
 8006460:	461a      	mov	r2, r3
 8006462:	d30a      	bcc.n	800647a <quorem+0x106>
 8006464:	613c      	str	r4, [r7, #16]
 8006466:	4630      	mov	r0, r6
 8006468:	b003      	add	sp, #12
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	3b04      	subs	r3, #4
 8006472:	2a00      	cmp	r2, #0
 8006474:	d1cc      	bne.n	8006410 <quorem+0x9c>
 8006476:	3c01      	subs	r4, #1
 8006478:	e7c7      	b.n	800640a <quorem+0x96>
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	3b04      	subs	r3, #4
 800647e:	2a00      	cmp	r2, #0
 8006480:	d1f0      	bne.n	8006464 <quorem+0xf0>
 8006482:	3c01      	subs	r4, #1
 8006484:	e7eb      	b.n	800645e <quorem+0xea>
 8006486:	2000      	movs	r0, #0
 8006488:	e7ee      	b.n	8006468 <quorem+0xf4>
 800648a:	0000      	movs	r0, r0
 800648c:	0000      	movs	r0, r0
	...

08006490 <_dtoa_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	ed2d 8b02 	vpush	{d8}
 8006498:	ec57 6b10 	vmov	r6, r7, d0
 800649c:	b095      	sub	sp, #84	; 0x54
 800649e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80064aa:	4604      	mov	r4, r0
 80064ac:	9209      	str	r2, [sp, #36]	; 0x24
 80064ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b0:	b975      	cbnz	r5, 80064d0 <_dtoa_r+0x40>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f000 fffc 	bl	80074b0 <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6260      	str	r0, [r4, #36]	; 0x24
 80064bc:	b920      	cbnz	r0, 80064c8 <_dtoa_r+0x38>
 80064be:	4bb2      	ldr	r3, [pc, #712]	; (8006788 <_dtoa_r+0x2f8>)
 80064c0:	21ea      	movs	r1, #234	; 0xea
 80064c2:	48b2      	ldr	r0, [pc, #712]	; (800678c <_dtoa_r+0x2fc>)
 80064c4:	f001 ff50 	bl	8008368 <__assert_func>
 80064c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064cc:	6005      	str	r5, [r0, #0]
 80064ce:	60c5      	str	r5, [r0, #12]
 80064d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	b151      	cbz	r1, 80064ec <_dtoa_r+0x5c>
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	604a      	str	r2, [r1, #4]
 80064da:	2301      	movs	r3, #1
 80064dc:	4093      	lsls	r3, r2
 80064de:	608b      	str	r3, [r1, #8]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f001 f82d 	bl	8007540 <_Bfree>
 80064e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	1e3b      	subs	r3, r7, #0
 80064ee:	bfb9      	ittee	lt
 80064f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	9303      	strlt	r3, [sp, #12]
 80064f6:	2300      	movge	r3, #0
 80064f8:	f8c8 3000 	strge.w	r3, [r8]
 80064fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006500:	4ba3      	ldr	r3, [pc, #652]	; (8006790 <_dtoa_r+0x300>)
 8006502:	bfbc      	itt	lt
 8006504:	2201      	movlt	r2, #1
 8006506:	f8c8 2000 	strlt.w	r2, [r8]
 800650a:	ea33 0309 	bics.w	r3, r3, r9
 800650e:	d11b      	bne.n	8006548 <_dtoa_r+0xb8>
 8006510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006512:	f242 730f 	movw	r3, #9999	; 0x270f
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800651c:	4333      	orrs	r3, r6
 800651e:	f000 857a 	beq.w	8007016 <_dtoa_r+0xb86>
 8006522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006524:	b963      	cbnz	r3, 8006540 <_dtoa_r+0xb0>
 8006526:	4b9b      	ldr	r3, [pc, #620]	; (8006794 <_dtoa_r+0x304>)
 8006528:	e024      	b.n	8006574 <_dtoa_r+0xe4>
 800652a:	4b9b      	ldr	r3, [pc, #620]	; (8006798 <_dtoa_r+0x308>)
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	9800      	ldr	r0, [sp, #0]
 8006536:	b015      	add	sp, #84	; 0x54
 8006538:	ecbd 8b02 	vpop	{d8}
 800653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006540:	4b94      	ldr	r3, [pc, #592]	; (8006794 <_dtoa_r+0x304>)
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	3303      	adds	r3, #3
 8006546:	e7f3      	b.n	8006530 <_dtoa_r+0xa0>
 8006548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	ec51 0b17 	vmov	r0, r1, d7
 8006552:	2300      	movs	r3, #0
 8006554:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006558:	f7fa fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800655c:	4680      	mov	r8, r0
 800655e:	b158      	cbz	r0, 8006578 <_dtoa_r+0xe8>
 8006560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006562:	2301      	movs	r3, #1
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8551 	beq.w	8007010 <_dtoa_r+0xb80>
 800656e:	488b      	ldr	r0, [pc, #556]	; (800679c <_dtoa_r+0x30c>)
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	1e43      	subs	r3, r0, #1
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	e7dd      	b.n	8006534 <_dtoa_r+0xa4>
 8006578:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800657c:	aa12      	add	r2, sp, #72	; 0x48
 800657e:	a913      	add	r1, sp, #76	; 0x4c
 8006580:	4620      	mov	r0, r4
 8006582:	f001 fabf 	bl	8007b04 <__d2b>
 8006586:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800658a:	4683      	mov	fp, r0
 800658c:	2d00      	cmp	r5, #0
 800658e:	d07c      	beq.n	800668a <_dtoa_r+0x1fa>
 8006590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006592:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800659e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065aa:	4b7d      	ldr	r3, [pc, #500]	; (80067a0 <_dtoa_r+0x310>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fe69 	bl	8000288 <__aeabi_dsub>
 80065b6:	a36e      	add	r3, pc, #440	; (adr r3, 8006770 <_dtoa_r+0x2e0>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7fa f81c 	bl	80005f8 <__aeabi_dmul>
 80065c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006778 <_dtoa_r+0x2e8>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fe61 	bl	800028c <__adddf3>
 80065ca:	4606      	mov	r6, r0
 80065cc:	4628      	mov	r0, r5
 80065ce:	460f      	mov	r7, r1
 80065d0:	f7f9 ffa8 	bl	8000524 <__aeabi_i2d>
 80065d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006780 <_dtoa_r+0x2f0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7f9 fe51 	bl	800028c <__adddf3>
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	f7fa fab3 	bl	8000b58 <__aeabi_d2iz>
 80065f2:	2200      	movs	r2, #0
 80065f4:	4682      	mov	sl, r0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa6e 	bl	8000adc <__aeabi_dcmplt>
 8006600:	b148      	cbz	r0, 8006616 <_dtoa_r+0x186>
 8006602:	4650      	mov	r0, sl
 8006604:	f7f9 ff8e 	bl	8000524 <__aeabi_i2d>
 8006608:	4632      	mov	r2, r6
 800660a:	463b      	mov	r3, r7
 800660c:	f7fa fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006610:	b908      	cbnz	r0, 8006616 <_dtoa_r+0x186>
 8006612:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006616:	f1ba 0f16 	cmp.w	sl, #22
 800661a:	d854      	bhi.n	80066c6 <_dtoa_r+0x236>
 800661c:	4b61      	ldr	r3, [pc, #388]	; (80067a4 <_dtoa_r+0x314>)
 800661e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800662a:	f7fa fa57 	bl	8000adc <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d04b      	beq.n	80066ca <_dtoa_r+0x23a>
 8006632:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006636:	2300      	movs	r3, #0
 8006638:	930e      	str	r3, [sp, #56]	; 0x38
 800663a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800663c:	1b5d      	subs	r5, r3, r5
 800663e:	1e6b      	subs	r3, r5, #1
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	bf43      	ittte	mi
 8006644:	2300      	movmi	r3, #0
 8006646:	f1c5 0801 	rsbmi	r8, r5, #1
 800664a:	9304      	strmi	r3, [sp, #16]
 800664c:	f04f 0800 	movpl.w	r8, #0
 8006650:	f1ba 0f00 	cmp.w	sl, #0
 8006654:	db3b      	blt.n	80066ce <_dtoa_r+0x23e>
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800665c:	4453      	add	r3, sl
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	2300      	movs	r3, #0
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	2b09      	cmp	r3, #9
 8006668:	d869      	bhi.n	800673e <_dtoa_r+0x2ae>
 800666a:	2b05      	cmp	r3, #5
 800666c:	bfc4      	itt	gt
 800666e:	3b04      	subgt	r3, #4
 8006670:	9305      	strgt	r3, [sp, #20]
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	f1a3 0302 	sub.w	r3, r3, #2
 8006678:	bfcc      	ite	gt
 800667a:	2500      	movgt	r5, #0
 800667c:	2501      	movle	r5, #1
 800667e:	2b03      	cmp	r3, #3
 8006680:	d869      	bhi.n	8006756 <_dtoa_r+0x2c6>
 8006682:	e8df f003 	tbb	[pc, r3]
 8006686:	4e2c      	.short	0x4e2c
 8006688:	5a4c      	.short	0x5a4c
 800668a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800668e:	441d      	add	r5, r3
 8006690:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006694:	2b20      	cmp	r3, #32
 8006696:	bfc1      	itttt	gt
 8006698:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800669c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80066a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066a8:	bfda      	itte	le
 80066aa:	f1c3 0320 	rsble	r3, r3, #32
 80066ae:	fa06 f003 	lslle.w	r0, r6, r3
 80066b2:	4318      	orrgt	r0, r3
 80066b4:	f7f9 ff26 	bl	8000504 <__aeabi_ui2d>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4606      	mov	r6, r0
 80066bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066c0:	3d01      	subs	r5, #1
 80066c2:	9310      	str	r3, [sp, #64]	; 0x40
 80066c4:	e771      	b.n	80065aa <_dtoa_r+0x11a>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e7b6      	b.n	8006638 <_dtoa_r+0x1a8>
 80066ca:	900e      	str	r0, [sp, #56]	; 0x38
 80066cc:	e7b5      	b.n	800663a <_dtoa_r+0x1aa>
 80066ce:	f1ca 0300 	rsb	r3, sl, #0
 80066d2:	9306      	str	r3, [sp, #24]
 80066d4:	2300      	movs	r3, #0
 80066d6:	eba8 080a 	sub.w	r8, r8, sl
 80066da:	930d      	str	r3, [sp, #52]	; 0x34
 80066dc:	e7c2      	b.n	8006664 <_dtoa_r+0x1d4>
 80066de:	2300      	movs	r3, #0
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dc39      	bgt.n	800675c <_dtoa_r+0x2cc>
 80066e8:	f04f 0901 	mov.w	r9, #1
 80066ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80066f0:	464b      	mov	r3, r9
 80066f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80066f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066f8:	2200      	movs	r2, #0
 80066fa:	6042      	str	r2, [r0, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	f102 0614 	add.w	r6, r2, #20
 8006702:	429e      	cmp	r6, r3
 8006704:	6841      	ldr	r1, [r0, #4]
 8006706:	d92f      	bls.n	8006768 <_dtoa_r+0x2d8>
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fed9 	bl	80074c0 <_Balloc>
 800670e:	9000      	str	r0, [sp, #0]
 8006710:	2800      	cmp	r0, #0
 8006712:	d14b      	bne.n	80067ac <_dtoa_r+0x31c>
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <_dtoa_r+0x318>)
 8006716:	4602      	mov	r2, r0
 8006718:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800671c:	e6d1      	b.n	80064c2 <_dtoa_r+0x32>
 800671e:	2301      	movs	r3, #1
 8006720:	e7de      	b.n	80066e0 <_dtoa_r+0x250>
 8006722:	2300      	movs	r3, #0
 8006724:	9308      	str	r3, [sp, #32]
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	eb0a 0903 	add.w	r9, sl, r3
 800672c:	f109 0301 	add.w	r3, r9, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	bfb8      	it	lt
 8006736:	2301      	movlt	r3, #1
 8006738:	e7dd      	b.n	80066f6 <_dtoa_r+0x266>
 800673a:	2301      	movs	r3, #1
 800673c:	e7f2      	b.n	8006724 <_dtoa_r+0x294>
 800673e:	2501      	movs	r5, #1
 8006740:	2300      	movs	r3, #0
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	9508      	str	r5, [sp, #32]
 8006746:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800674a:	2200      	movs	r2, #0
 800674c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006750:	2312      	movs	r3, #18
 8006752:	9209      	str	r2, [sp, #36]	; 0x24
 8006754:	e7cf      	b.n	80066f6 <_dtoa_r+0x266>
 8006756:	2301      	movs	r3, #1
 8006758:	9308      	str	r3, [sp, #32]
 800675a:	e7f4      	b.n	8006746 <_dtoa_r+0x2b6>
 800675c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006760:	f8cd 9004 	str.w	r9, [sp, #4]
 8006764:	464b      	mov	r3, r9
 8006766:	e7c6      	b.n	80066f6 <_dtoa_r+0x266>
 8006768:	3101      	adds	r1, #1
 800676a:	6041      	str	r1, [r0, #4]
 800676c:	0052      	lsls	r2, r2, #1
 800676e:	e7c6      	b.n	80066fe <_dtoa_r+0x26e>
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	08008a2d 	.word	0x08008a2d
 800678c:	08008a44 	.word	0x08008a44
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	08008a29 	.word	0x08008a29
 8006798:	08008a20 	.word	0x08008a20
 800679c:	080089fd 	.word	0x080089fd
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	08008ba0 	.word	0x08008ba0
 80067a8:	08008aa3 	.word	0x08008aa3
 80067ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ae:	9a00      	ldr	r2, [sp, #0]
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	2b0e      	cmp	r3, #14
 80067b6:	f200 80ad 	bhi.w	8006914 <_dtoa_r+0x484>
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	f000 80aa 	beq.w	8006914 <_dtoa_r+0x484>
 80067c0:	f1ba 0f00 	cmp.w	sl, #0
 80067c4:	dd36      	ble.n	8006834 <_dtoa_r+0x3a4>
 80067c6:	4ac3      	ldr	r2, [pc, #780]	; (8006ad4 <_dtoa_r+0x644>)
 80067c8:	f00a 030f 	and.w	r3, sl, #15
 80067cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067d0:	ed93 7b00 	vldr	d7, [r3]
 80067d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80067d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80067dc:	eeb0 8a47 	vmov.f32	s16, s14
 80067e0:	eef0 8a67 	vmov.f32	s17, s15
 80067e4:	d016      	beq.n	8006814 <_dtoa_r+0x384>
 80067e6:	4bbc      	ldr	r3, [pc, #752]	; (8006ad8 <_dtoa_r+0x648>)
 80067e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f0:	f7fa f82c 	bl	800084c <__aeabi_ddiv>
 80067f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f8:	f007 070f 	and.w	r7, r7, #15
 80067fc:	2503      	movs	r5, #3
 80067fe:	4eb6      	ldr	r6, [pc, #728]	; (8006ad8 <_dtoa_r+0x648>)
 8006800:	b957      	cbnz	r7, 8006818 <_dtoa_r+0x388>
 8006802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006806:	ec53 2b18 	vmov	r2, r3, d8
 800680a:	f7fa f81f 	bl	800084c <__aeabi_ddiv>
 800680e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006812:	e029      	b.n	8006868 <_dtoa_r+0x3d8>
 8006814:	2502      	movs	r5, #2
 8006816:	e7f2      	b.n	80067fe <_dtoa_r+0x36e>
 8006818:	07f9      	lsls	r1, r7, #31
 800681a:	d508      	bpl.n	800682e <_dtoa_r+0x39e>
 800681c:	ec51 0b18 	vmov	r0, r1, d8
 8006820:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006824:	f7f9 fee8 	bl	80005f8 <__aeabi_dmul>
 8006828:	ec41 0b18 	vmov	d8, r0, r1
 800682c:	3501      	adds	r5, #1
 800682e:	107f      	asrs	r7, r7, #1
 8006830:	3608      	adds	r6, #8
 8006832:	e7e5      	b.n	8006800 <_dtoa_r+0x370>
 8006834:	f000 80a6 	beq.w	8006984 <_dtoa_r+0x4f4>
 8006838:	f1ca 0600 	rsb	r6, sl, #0
 800683c:	4ba5      	ldr	r3, [pc, #660]	; (8006ad4 <_dtoa_r+0x644>)
 800683e:	4fa6      	ldr	r7, [pc, #664]	; (8006ad8 <_dtoa_r+0x648>)
 8006840:	f006 020f 	and.w	r2, r6, #15
 8006844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006850:	f7f9 fed2 	bl	80005f8 <__aeabi_dmul>
 8006854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006858:	1136      	asrs	r6, r6, #4
 800685a:	2300      	movs	r3, #0
 800685c:	2502      	movs	r5, #2
 800685e:	2e00      	cmp	r6, #0
 8006860:	f040 8085 	bne.w	800696e <_dtoa_r+0x4de>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1d2      	bne.n	800680e <_dtoa_r+0x37e>
 8006868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 808c 	beq.w	8006988 <_dtoa_r+0x4f8>
 8006870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006874:	4b99      	ldr	r3, [pc, #612]	; (8006adc <_dtoa_r+0x64c>)
 8006876:	2200      	movs	r2, #0
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7fa f92e 	bl	8000adc <__aeabi_dcmplt>
 8006880:	2800      	cmp	r0, #0
 8006882:	f000 8081 	beq.w	8006988 <_dtoa_r+0x4f8>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d07d      	beq.n	8006988 <_dtoa_r+0x4f8>
 800688c:	f1b9 0f00 	cmp.w	r9, #0
 8006890:	dd3c      	ble.n	800690c <_dtoa_r+0x47c>
 8006892:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006896:	9307      	str	r3, [sp, #28]
 8006898:	2200      	movs	r2, #0
 800689a:	4b91      	ldr	r3, [pc, #580]	; (8006ae0 <_dtoa_r+0x650>)
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	f7f9 feaa 	bl	80005f8 <__aeabi_dmul>
 80068a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a8:	3501      	adds	r5, #1
 80068aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80068ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068b2:	4628      	mov	r0, r5
 80068b4:	f7f9 fe36 	bl	8000524 <__aeabi_i2d>
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	f7f9 fe9c 	bl	80005f8 <__aeabi_dmul>
 80068c0:	4b88      	ldr	r3, [pc, #544]	; (8006ae4 <_dtoa_r+0x654>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f7f9 fce2 	bl	800028c <__adddf3>
 80068c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d15c      	bne.n	8006992 <_dtoa_r+0x502>
 80068d8:	4b83      	ldr	r3, [pc, #524]	; (8006ae8 <_dtoa_r+0x658>)
 80068da:	2200      	movs	r2, #0
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7f9 fcd2 	bl	8000288 <__aeabi_dsub>
 80068e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	f7fa f914 	bl	8000b18 <__aeabi_dcmpgt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f040 8296 	bne.w	8006e22 <_dtoa_r+0x992>
 80068f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80068fa:	4630      	mov	r0, r6
 80068fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006900:	4639      	mov	r1, r7
 8006902:	f7fa f8eb 	bl	8000adc <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 8288 	bne.w	8006e1c <_dtoa_r+0x98c>
 800690c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006916:	2b00      	cmp	r3, #0
 8006918:	f2c0 8158 	blt.w	8006bcc <_dtoa_r+0x73c>
 800691c:	f1ba 0f0e 	cmp.w	sl, #14
 8006920:	f300 8154 	bgt.w	8006bcc <_dtoa_r+0x73c>
 8006924:	4b6b      	ldr	r3, [pc, #428]	; (8006ad4 <_dtoa_r+0x644>)
 8006926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800692a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	f280 80e3 	bge.w	8006afc <_dtoa_r+0x66c>
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f300 80df 	bgt.w	8006afc <_dtoa_r+0x66c>
 800693e:	f040 826d 	bne.w	8006e1c <_dtoa_r+0x98c>
 8006942:	4b69      	ldr	r3, [pc, #420]	; (8006ae8 <_dtoa_r+0x658>)
 8006944:	2200      	movs	r2, #0
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006952:	f7fa f8d7 	bl	8000b04 <__aeabi_dcmpge>
 8006956:	9e01      	ldr	r6, [sp, #4]
 8006958:	4637      	mov	r7, r6
 800695a:	2800      	cmp	r0, #0
 800695c:	f040 8243 	bne.w	8006de6 <_dtoa_r+0x956>
 8006960:	9d00      	ldr	r5, [sp, #0]
 8006962:	2331      	movs	r3, #49	; 0x31
 8006964:	f805 3b01 	strb.w	r3, [r5], #1
 8006968:	f10a 0a01 	add.w	sl, sl, #1
 800696c:	e23f      	b.n	8006dee <_dtoa_r+0x95e>
 800696e:	07f2      	lsls	r2, r6, #31
 8006970:	d505      	bpl.n	800697e <_dtoa_r+0x4ee>
 8006972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006976:	f7f9 fe3f 	bl	80005f8 <__aeabi_dmul>
 800697a:	3501      	adds	r5, #1
 800697c:	2301      	movs	r3, #1
 800697e:	1076      	asrs	r6, r6, #1
 8006980:	3708      	adds	r7, #8
 8006982:	e76c      	b.n	800685e <_dtoa_r+0x3ce>
 8006984:	2502      	movs	r5, #2
 8006986:	e76f      	b.n	8006868 <_dtoa_r+0x3d8>
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	f8cd a01c 	str.w	sl, [sp, #28]
 800698e:	930c      	str	r3, [sp, #48]	; 0x30
 8006990:	e78d      	b.n	80068ae <_dtoa_r+0x41e>
 8006992:	9900      	ldr	r1, [sp, #0]
 8006994:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006998:	4b4e      	ldr	r3, [pc, #312]	; (8006ad4 <_dtoa_r+0x644>)
 800699a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800699e:	4401      	add	r1, r0
 80069a0:	9102      	str	r1, [sp, #8]
 80069a2:	9908      	ldr	r1, [sp, #32]
 80069a4:	eeb0 8a47 	vmov.f32	s16, s14
 80069a8:	eef0 8a67 	vmov.f32	s17, s15
 80069ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d045      	beq.n	8006a44 <_dtoa_r+0x5b4>
 80069b8:	494c      	ldr	r1, [pc, #304]	; (8006aec <_dtoa_r+0x65c>)
 80069ba:	2000      	movs	r0, #0
 80069bc:	f7f9 ff46 	bl	800084c <__aeabi_ddiv>
 80069c0:	ec53 2b18 	vmov	r2, r3, d8
 80069c4:	f7f9 fc60 	bl	8000288 <__aeabi_dsub>
 80069c8:	9d00      	ldr	r5, [sp, #0]
 80069ca:	ec41 0b18 	vmov	d8, r0, r1
 80069ce:	4639      	mov	r1, r7
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7fa f8c1 	bl	8000b58 <__aeabi_d2iz>
 80069d6:	900c      	str	r0, [sp, #48]	; 0x30
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	f7f9 fc50 	bl	8000288 <__aeabi_dsub>
 80069e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ea:	3330      	adds	r3, #48	; 0x30
 80069ec:	f805 3b01 	strb.w	r3, [r5], #1
 80069f0:	ec53 2b18 	vmov	r2, r3, d8
 80069f4:	4606      	mov	r6, r0
 80069f6:	460f      	mov	r7, r1
 80069f8:	f7fa f870 	bl	8000adc <__aeabi_dcmplt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d165      	bne.n	8006acc <_dtoa_r+0x63c>
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	4935      	ldr	r1, [pc, #212]	; (8006adc <_dtoa_r+0x64c>)
 8006a06:	2000      	movs	r0, #0
 8006a08:	f7f9 fc3e 	bl	8000288 <__aeabi_dsub>
 8006a0c:	ec53 2b18 	vmov	r2, r3, d8
 8006a10:	f7fa f864 	bl	8000adc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f040 80b9 	bne.w	8006b8c <_dtoa_r+0x6fc>
 8006a1a:	9b02      	ldr	r3, [sp, #8]
 8006a1c:	429d      	cmp	r5, r3
 8006a1e:	f43f af75 	beq.w	800690c <_dtoa_r+0x47c>
 8006a22:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <_dtoa_r+0x650>)
 8006a24:	ec51 0b18 	vmov	r0, r1, d8
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7f9 fde5 	bl	80005f8 <__aeabi_dmul>
 8006a2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ae0 <_dtoa_r+0x650>)
 8006a30:	ec41 0b18 	vmov	d8, r0, r1
 8006a34:	2200      	movs	r2, #0
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 fddd 	bl	80005f8 <__aeabi_dmul>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	460f      	mov	r7, r1
 8006a42:	e7c4      	b.n	80069ce <_dtoa_r+0x53e>
 8006a44:	ec51 0b17 	vmov	r0, r1, d7
 8006a48:	f7f9 fdd6 	bl	80005f8 <__aeabi_dmul>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	9d00      	ldr	r5, [sp, #0]
 8006a50:	930c      	str	r3, [sp, #48]	; 0x30
 8006a52:	ec41 0b18 	vmov	d8, r0, r1
 8006a56:	4639      	mov	r1, r7
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7fa f87d 	bl	8000b58 <__aeabi_d2iz>
 8006a5e:	9011      	str	r0, [sp, #68]	; 0x44
 8006a60:	f7f9 fd60 	bl	8000524 <__aeabi_i2d>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7f9 fc0c 	bl	8000288 <__aeabi_dsub>
 8006a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a72:	3330      	adds	r3, #48	; 0x30
 8006a74:	f805 3b01 	strb.w	r3, [r5], #1
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	429d      	cmp	r5, r3
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	d134      	bne.n	8006af0 <_dtoa_r+0x660>
 8006a86:	4b19      	ldr	r3, [pc, #100]	; (8006aec <_dtoa_r+0x65c>)
 8006a88:	ec51 0b18 	vmov	r0, r1, d8
 8006a8c:	f7f9 fbfe 	bl	800028c <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7fa f83e 	bl	8000b18 <__aeabi_dcmpgt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d175      	bne.n	8006b8c <_dtoa_r+0x6fc>
 8006aa0:	ec53 2b18 	vmov	r2, r3, d8
 8006aa4:	4911      	ldr	r1, [pc, #68]	; (8006aec <_dtoa_r+0x65c>)
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f7f9 fbee 	bl	8000288 <__aeabi_dsub>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7fa f812 	bl	8000adc <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f43f af27 	beq.w	800690c <_dtoa_r+0x47c>
 8006abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac0:	1e6b      	subs	r3, r5, #1
 8006ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d0f8      	beq.n	8006abe <_dtoa_r+0x62e>
 8006acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ad0:	e04a      	b.n	8006b68 <_dtoa_r+0x6d8>
 8006ad2:	bf00      	nop
 8006ad4:	08008ba0 	.word	0x08008ba0
 8006ad8:	08008b78 	.word	0x08008b78
 8006adc:	3ff00000 	.word	0x3ff00000
 8006ae0:	40240000 	.word	0x40240000
 8006ae4:	401c0000 	.word	0x401c0000
 8006ae8:	40140000 	.word	0x40140000
 8006aec:	3fe00000 	.word	0x3fe00000
 8006af0:	4baf      	ldr	r3, [pc, #700]	; (8006db0 <_dtoa_r+0x920>)
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4606      	mov	r6, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	e7ac      	b.n	8006a56 <_dtoa_r+0x5c6>
 8006afc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b00:	9d00      	ldr	r5, [sp, #0]
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	4630      	mov	r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	f7f9 fe9f 	bl	800084c <__aeabi_ddiv>
 8006b0e:	f7fa f823 	bl	8000b58 <__aeabi_d2iz>
 8006b12:	9002      	str	r0, [sp, #8]
 8006b14:	f7f9 fd06 	bl	8000524 <__aeabi_i2d>
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	f7f9 fd6c 	bl	80005f8 <__aeabi_dmul>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4630      	mov	r0, r6
 8006b26:	4639      	mov	r1, r7
 8006b28:	f7f9 fbae 	bl	8000288 <__aeabi_dsub>
 8006b2c:	9e02      	ldr	r6, [sp, #8]
 8006b2e:	9f01      	ldr	r7, [sp, #4]
 8006b30:	3630      	adds	r6, #48	; 0x30
 8006b32:	f805 6b01 	strb.w	r6, [r5], #1
 8006b36:	9e00      	ldr	r6, [sp, #0]
 8006b38:	1bae      	subs	r6, r5, r6
 8006b3a:	42b7      	cmp	r7, r6
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	d137      	bne.n	8006bb2 <_dtoa_r+0x722>
 8006b42:	f7f9 fba3 	bl	800028c <__adddf3>
 8006b46:	4642      	mov	r2, r8
 8006b48:	464b      	mov	r3, r9
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	f7f9 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8006b52:	b9c8      	cbnz	r0, 8006b88 <_dtoa_r+0x6f8>
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b60:	b110      	cbz	r0, 8006b68 <_dtoa_r+0x6d8>
 8006b62:	9b02      	ldr	r3, [sp, #8]
 8006b64:	07d9      	lsls	r1, r3, #31
 8006b66:	d40f      	bmi.n	8006b88 <_dtoa_r+0x6f8>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	4659      	mov	r1, fp
 8006b6c:	f000 fce8 	bl	8007540 <_Bfree>
 8006b70:	2300      	movs	r3, #0
 8006b72:	702b      	strb	r3, [r5, #0]
 8006b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b76:	f10a 0001 	add.w	r0, sl, #1
 8006b7a:	6018      	str	r0, [r3, #0]
 8006b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f43f acd8 	beq.w	8006534 <_dtoa_r+0xa4>
 8006b84:	601d      	str	r5, [r3, #0]
 8006b86:	e4d5      	b.n	8006534 <_dtoa_r+0xa4>
 8006b88:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	461d      	mov	r5, r3
 8006b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b94:	2a39      	cmp	r2, #57	; 0x39
 8006b96:	d108      	bne.n	8006baa <_dtoa_r+0x71a>
 8006b98:	9a00      	ldr	r2, [sp, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d1f7      	bne.n	8006b8e <_dtoa_r+0x6fe>
 8006b9e:	9a07      	ldr	r2, [sp, #28]
 8006ba0:	9900      	ldr	r1, [sp, #0]
 8006ba2:	3201      	adds	r2, #1
 8006ba4:	9207      	str	r2, [sp, #28]
 8006ba6:	2230      	movs	r2, #48	; 0x30
 8006ba8:	700a      	strb	r2, [r1, #0]
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	3201      	adds	r2, #1
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e78c      	b.n	8006acc <_dtoa_r+0x63c>
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <_dtoa_r+0x920>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	f7f9 ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d09b      	beq.n	8006b02 <_dtoa_r+0x672>
 8006bca:	e7cd      	b.n	8006b68 <_dtoa_r+0x6d8>
 8006bcc:	9a08      	ldr	r2, [sp, #32]
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	f000 80c4 	beq.w	8006d5c <_dtoa_r+0x8cc>
 8006bd4:	9a05      	ldr	r2, [sp, #20]
 8006bd6:	2a01      	cmp	r2, #1
 8006bd8:	f300 80a8 	bgt.w	8006d2c <_dtoa_r+0x89c>
 8006bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bde:	2a00      	cmp	r2, #0
 8006be0:	f000 80a0 	beq.w	8006d24 <_dtoa_r+0x894>
 8006be4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006be8:	9e06      	ldr	r6, [sp, #24]
 8006bea:	4645      	mov	r5, r8
 8006bec:	9a04      	ldr	r2, [sp, #16]
 8006bee:	2101      	movs	r1, #1
 8006bf0:	441a      	add	r2, r3
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4498      	add	r8, r3
 8006bf6:	9204      	str	r2, [sp, #16]
 8006bf8:	f000 fd5e 	bl	80076b8 <__i2b>
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	dd0b      	ble.n	8006c1a <_dtoa_r+0x78a>
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd08      	ble.n	8006c1a <_dtoa_r+0x78a>
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	9a04      	ldr	r2, [sp, #16]
 8006c0c:	bfa8      	it	ge
 8006c0e:	462b      	movge	r3, r5
 8006c10:	eba8 0803 	sub.w	r8, r8, r3
 8006c14:	1aed      	subs	r5, r5, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	b1fb      	cbz	r3, 8006c5e <_dtoa_r+0x7ce>
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 809f 	beq.w	8006d64 <_dtoa_r+0x8d4>
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	dd11      	ble.n	8006c4e <_dtoa_r+0x7be>
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fdfe 	bl	8007830 <__pow5mult>
 8006c34:	465a      	mov	r2, fp
 8006c36:	4601      	mov	r1, r0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fd52 	bl	80076e4 <__multiply>
 8006c40:	4659      	mov	r1, fp
 8006c42:	9007      	str	r0, [sp, #28]
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fc7b 	bl	8007540 <_Bfree>
 8006c4a:	9b07      	ldr	r3, [sp, #28]
 8006c4c:	469b      	mov	fp, r3
 8006c4e:	9b06      	ldr	r3, [sp, #24]
 8006c50:	1b9a      	subs	r2, r3, r6
 8006c52:	d004      	beq.n	8006c5e <_dtoa_r+0x7ce>
 8006c54:	4659      	mov	r1, fp
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fdea 	bl	8007830 <__pow5mult>
 8006c5c:	4683      	mov	fp, r0
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fd29 	bl	80076b8 <__i2b>
 8006c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	dd7c      	ble.n	8006d68 <_dtoa_r+0x8d8>
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4601      	mov	r1, r0
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fddc 	bl	8007830 <__pow5mult>
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	dd76      	ble.n	8006d6e <_dtoa_r+0x8de>
 8006c80:	2300      	movs	r3, #0
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	6933      	ldr	r3, [r6, #16]
 8006c86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c8a:	6918      	ldr	r0, [r3, #16]
 8006c8c:	f000 fcc4 	bl	8007618 <__hi0bits>
 8006c90:	f1c0 0020 	rsb	r0, r0, #32
 8006c94:	9b04      	ldr	r3, [sp, #16]
 8006c96:	4418      	add	r0, r3
 8006c98:	f010 001f 	ands.w	r0, r0, #31
 8006c9c:	f000 8086 	beq.w	8006dac <_dtoa_r+0x91c>
 8006ca0:	f1c0 0320 	rsb	r3, r0, #32
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	dd7f      	ble.n	8006da8 <_dtoa_r+0x918>
 8006ca8:	f1c0 001c 	rsb	r0, r0, #28
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	4403      	add	r3, r0
 8006cb0:	4480      	add	r8, r0
 8006cb2:	4405      	add	r5, r0
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	f1b8 0f00 	cmp.w	r8, #0
 8006cba:	dd05      	ble.n	8006cc8 <_dtoa_r+0x838>
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fe0f 	bl	80078e4 <__lshift>
 8006cc6:	4683      	mov	fp, r0
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dd05      	ble.n	8006cda <_dtoa_r+0x84a>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fe06 	bl	80078e4 <__lshift>
 8006cd8:	4606      	mov	r6, r0
 8006cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d069      	beq.n	8006db4 <_dtoa_r+0x924>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f000 fe6a 	bl	80079bc <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	da63      	bge.n	8006db4 <_dtoa_r+0x924>
 8006cec:	2300      	movs	r3, #0
 8006cee:	4659      	mov	r1, fp
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 fc46 	bl	8007584 <__multadd>
 8006cf8:	9b08      	ldr	r3, [sp, #32]
 8006cfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006cfe:	4683      	mov	fp, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 818f 	beq.w	8007024 <_dtoa_r+0xb94>
 8006d06:	4639      	mov	r1, r7
 8006d08:	2300      	movs	r3, #0
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fc39 	bl	8007584 <__multadd>
 8006d12:	f1b9 0f00 	cmp.w	r9, #0
 8006d16:	4607      	mov	r7, r0
 8006d18:	f300 808e 	bgt.w	8006e38 <_dtoa_r+0x9a8>
 8006d1c:	9b05      	ldr	r3, [sp, #20]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc50      	bgt.n	8006dc4 <_dtoa_r+0x934>
 8006d22:	e089      	b.n	8006e38 <_dtoa_r+0x9a8>
 8006d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d2a:	e75d      	b.n	8006be8 <_dtoa_r+0x758>
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	1e5e      	subs	r6, r3, #1
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	42b3      	cmp	r3, r6
 8006d34:	bfbf      	itttt	lt
 8006d36:	9b06      	ldrlt	r3, [sp, #24]
 8006d38:	9606      	strlt	r6, [sp, #24]
 8006d3a:	1af2      	sublt	r2, r6, r3
 8006d3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006d3e:	bfb6      	itet	lt
 8006d40:	189b      	addlt	r3, r3, r2
 8006d42:	1b9e      	subge	r6, r3, r6
 8006d44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	bfb8      	it	lt
 8006d4a:	2600      	movlt	r6, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfb5      	itete	lt
 8006d50:	eba8 0503 	sublt.w	r5, r8, r3
 8006d54:	9b01      	ldrge	r3, [sp, #4]
 8006d56:	2300      	movlt	r3, #0
 8006d58:	4645      	movge	r5, r8
 8006d5a:	e747      	b.n	8006bec <_dtoa_r+0x75c>
 8006d5c:	9e06      	ldr	r6, [sp, #24]
 8006d5e:	9f08      	ldr	r7, [sp, #32]
 8006d60:	4645      	mov	r5, r8
 8006d62:	e74c      	b.n	8006bfe <_dtoa_r+0x76e>
 8006d64:	9a06      	ldr	r2, [sp, #24]
 8006d66:	e775      	b.n	8006c54 <_dtoa_r+0x7c4>
 8006d68:	9b05      	ldr	r3, [sp, #20]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	dc18      	bgt.n	8006da0 <_dtoa_r+0x910>
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	b9b3      	cbnz	r3, 8006da0 <_dtoa_r+0x910>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d78:	b9a3      	cbnz	r3, 8006da4 <_dtoa_r+0x914>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	b12b      	cbz	r3, 8006d92 <_dtoa_r+0x902>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	f108 0801 	add.w	r8, r8, #1
 8006d90:	2301      	movs	r3, #1
 8006d92:	9306      	str	r3, [sp, #24]
 8006d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f47f af74 	bne.w	8006c84 <_dtoa_r+0x7f4>
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	e779      	b.n	8006c94 <_dtoa_r+0x804>
 8006da0:	2300      	movs	r3, #0
 8006da2:	e7f6      	b.n	8006d92 <_dtoa_r+0x902>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	e7f4      	b.n	8006d92 <_dtoa_r+0x902>
 8006da8:	d085      	beq.n	8006cb6 <_dtoa_r+0x826>
 8006daa:	4618      	mov	r0, r3
 8006dac:	301c      	adds	r0, #28
 8006dae:	e77d      	b.n	8006cac <_dtoa_r+0x81c>
 8006db0:	40240000 	.word	0x40240000
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dc38      	bgt.n	8006e2c <_dtoa_r+0x99c>
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	dd35      	ble.n	8006e2c <_dtoa_r+0x99c>
 8006dc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006dc4:	f1b9 0f00 	cmp.w	r9, #0
 8006dc8:	d10d      	bne.n	8006de6 <_dtoa_r+0x956>
 8006dca:	4631      	mov	r1, r6
 8006dcc:	464b      	mov	r3, r9
 8006dce:	2205      	movs	r2, #5
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fbd7 	bl	8007584 <__multadd>
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	4606      	mov	r6, r0
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fdee 	bl	80079bc <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f73f adbd 	bgt.w	8006960 <_dtoa_r+0x4d0>
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	9d00      	ldr	r5, [sp, #0]
 8006dea:	ea6f 0a03 	mvn.w	sl, r3
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	4631      	mov	r1, r6
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fba3 	bl	8007540 <_Bfree>
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	f43f aeb4 	beq.w	8006b68 <_dtoa_r+0x6d8>
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d005      	beq.n	8006e12 <_dtoa_r+0x982>
 8006e06:	45b8      	cmp	r8, r7
 8006e08:	d003      	beq.n	8006e12 <_dtoa_r+0x982>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fb97 	bl	8007540 <_Bfree>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fb93 	bl	8007540 <_Bfree>
 8006e1a:	e6a5      	b.n	8006b68 <_dtoa_r+0x6d8>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4637      	mov	r7, r6
 8006e20:	e7e1      	b.n	8006de6 <_dtoa_r+0x956>
 8006e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e28:	4637      	mov	r7, r6
 8006e2a:	e599      	b.n	8006960 <_dtoa_r+0x4d0>
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 80fd 	beq.w	8007032 <_dtoa_r+0xba2>
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	dd05      	ble.n	8006e48 <_dtoa_r+0x9b8>
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fd4f 	bl	80078e4 <__lshift>
 8006e46:	4607      	mov	r7, r0
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d05c      	beq.n	8006f08 <_dtoa_r+0xa78>
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fb35 	bl	80074c0 <_Balloc>
 8006e56:	4605      	mov	r5, r0
 8006e58:	b928      	cbnz	r0, 8006e66 <_dtoa_r+0x9d6>
 8006e5a:	4b80      	ldr	r3, [pc, #512]	; (800705c <_dtoa_r+0xbcc>)
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e62:	f7ff bb2e 	b.w	80064c2 <_dtoa_r+0x32>
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	3202      	adds	r2, #2
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	300c      	adds	r0, #12
 8006e72:	f7fe fc91 	bl	8005798 <memcpy>
 8006e76:	2201      	movs	r2, #1
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fd32 	bl	80078e4 <__lshift>
 8006e80:	9b00      	ldr	r3, [sp, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	444b      	add	r3, r9
 8006e8a:	9307      	str	r3, [sp, #28]
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	46b8      	mov	r8, r7
 8006e94:	9306      	str	r3, [sp, #24]
 8006e96:	4607      	mov	r7, r0
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	f7ff fa67 	bl	8006374 <quorem>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	3330      	adds	r3, #48	; 0x30
 8006eaa:	9004      	str	r0, [sp, #16]
 8006eac:	4641      	mov	r1, r8
 8006eae:	4658      	mov	r0, fp
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	f000 fd83 	bl	80079bc <__mcmp>
 8006eb6:	463a      	mov	r2, r7
 8006eb8:	4681      	mov	r9, r0
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fd99 	bl	80079f4 <__mdiff>
 8006ec2:	68c2      	ldr	r2, [r0, #12]
 8006ec4:	9b08      	ldr	r3, [sp, #32]
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	bb02      	cbnz	r2, 8006f0c <_dtoa_r+0xa7c>
 8006eca:	4601      	mov	r1, r0
 8006ecc:	4658      	mov	r0, fp
 8006ece:	f000 fd75 	bl	80079bc <__mcmp>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4620      	mov	r0, r4
 8006eda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006ede:	f000 fb2f 	bl	8007540 <_Bfree>
 8006ee2:	9b05      	ldr	r3, [sp, #20]
 8006ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee6:	9d01      	ldr	r5, [sp, #4]
 8006ee8:	ea43 0102 	orr.w	r1, r3, r2
 8006eec:	9b06      	ldr	r3, [sp, #24]
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	d10d      	bne.n	8006f10 <_dtoa_r+0xa80>
 8006ef4:	2b39      	cmp	r3, #57	; 0x39
 8006ef6:	d029      	beq.n	8006f4c <_dtoa_r+0xabc>
 8006ef8:	f1b9 0f00 	cmp.w	r9, #0
 8006efc:	dd01      	ble.n	8006f02 <_dtoa_r+0xa72>
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	3331      	adds	r3, #49	; 0x31
 8006f02:	9a02      	ldr	r2, [sp, #8]
 8006f04:	7013      	strb	r3, [r2, #0]
 8006f06:	e774      	b.n	8006df2 <_dtoa_r+0x962>
 8006f08:	4638      	mov	r0, r7
 8006f0a:	e7b9      	b.n	8006e80 <_dtoa_r+0x9f0>
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	e7e2      	b.n	8006ed6 <_dtoa_r+0xa46>
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	db06      	blt.n	8006f24 <_dtoa_r+0xa94>
 8006f16:	9905      	ldr	r1, [sp, #20]
 8006f18:	ea41 0909 	orr.w	r9, r1, r9
 8006f1c:	9906      	ldr	r1, [sp, #24]
 8006f1e:	ea59 0101 	orrs.w	r1, r9, r1
 8006f22:	d120      	bne.n	8006f66 <_dtoa_r+0xad6>
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	ddec      	ble.n	8006f02 <_dtoa_r+0xa72>
 8006f28:	4659      	mov	r1, fp
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	f000 fcd8 	bl	80078e4 <__lshift>
 8006f34:	4631      	mov	r1, r6
 8006f36:	4683      	mov	fp, r0
 8006f38:	f000 fd40 	bl	80079bc <__mcmp>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	dc02      	bgt.n	8006f48 <_dtoa_r+0xab8>
 8006f42:	d1de      	bne.n	8006f02 <_dtoa_r+0xa72>
 8006f44:	07da      	lsls	r2, r3, #31
 8006f46:	d5dc      	bpl.n	8006f02 <_dtoa_r+0xa72>
 8006f48:	2b39      	cmp	r3, #57	; 0x39
 8006f4a:	d1d8      	bne.n	8006efe <_dtoa_r+0xa6e>
 8006f4c:	9a02      	ldr	r2, [sp, #8]
 8006f4e:	2339      	movs	r3, #57	; 0x39
 8006f50:	7013      	strb	r3, [r2, #0]
 8006f52:	462b      	mov	r3, r5
 8006f54:	461d      	mov	r5, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f5c:	2a39      	cmp	r2, #57	; 0x39
 8006f5e:	d050      	beq.n	8007002 <_dtoa_r+0xb72>
 8006f60:	3201      	adds	r2, #1
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e745      	b.n	8006df2 <_dtoa_r+0x962>
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	dd03      	ble.n	8006f72 <_dtoa_r+0xae2>
 8006f6a:	2b39      	cmp	r3, #57	; 0x39
 8006f6c:	d0ee      	beq.n	8006f4c <_dtoa_r+0xabc>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	e7c7      	b.n	8006f02 <_dtoa_r+0xa72>
 8006f72:	9a01      	ldr	r2, [sp, #4]
 8006f74:	9907      	ldr	r1, [sp, #28]
 8006f76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f7a:	428a      	cmp	r2, r1
 8006f7c:	d02a      	beq.n	8006fd4 <_dtoa_r+0xb44>
 8006f7e:	4659      	mov	r1, fp
 8006f80:	2300      	movs	r3, #0
 8006f82:	220a      	movs	r2, #10
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fafd 	bl	8007584 <__multadd>
 8006f8a:	45b8      	cmp	r8, r7
 8006f8c:	4683      	mov	fp, r0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	f04f 020a 	mov.w	r2, #10
 8006f96:	4641      	mov	r1, r8
 8006f98:	4620      	mov	r0, r4
 8006f9a:	d107      	bne.n	8006fac <_dtoa_r+0xb1c>
 8006f9c:	f000 faf2 	bl	8007584 <__multadd>
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	e775      	b.n	8006e98 <_dtoa_r+0xa08>
 8006fac:	f000 faea 	bl	8007584 <__multadd>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	220a      	movs	r2, #10
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fae3 	bl	8007584 <__multadd>
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	e7f0      	b.n	8006fa4 <_dtoa_r+0xb14>
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	9a00      	ldr	r2, [sp, #0]
 8006fc8:	bfcc      	ite	gt
 8006fca:	464d      	movgt	r5, r9
 8006fcc:	2501      	movle	r5, #1
 8006fce:	4415      	add	r5, r2
 8006fd0:	f04f 0800 	mov.w	r8, #0
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	f000 fc82 	bl	80078e4 <__lshift>
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4683      	mov	fp, r0
 8006fe4:	f000 fcea 	bl	80079bc <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dcb2      	bgt.n	8006f52 <_dtoa_r+0xac2>
 8006fec:	d102      	bne.n	8006ff4 <_dtoa_r+0xb64>
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	07db      	lsls	r3, r3, #31
 8006ff2:	d4ae      	bmi.n	8006f52 <_dtoa_r+0xac2>
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffc:	2a30      	cmp	r2, #48	; 0x30
 8006ffe:	d0fa      	beq.n	8006ff6 <_dtoa_r+0xb66>
 8007000:	e6f7      	b.n	8006df2 <_dtoa_r+0x962>
 8007002:	9a00      	ldr	r2, [sp, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1a5      	bne.n	8006f54 <_dtoa_r+0xac4>
 8007008:	f10a 0a01 	add.w	sl, sl, #1
 800700c:	2331      	movs	r3, #49	; 0x31
 800700e:	e779      	b.n	8006f04 <_dtoa_r+0xa74>
 8007010:	4b13      	ldr	r3, [pc, #76]	; (8007060 <_dtoa_r+0xbd0>)
 8007012:	f7ff baaf 	b.w	8006574 <_dtoa_r+0xe4>
 8007016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f aa86 	bne.w	800652a <_dtoa_r+0x9a>
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <_dtoa_r+0xbd4>)
 8007020:	f7ff baa8 	b.w	8006574 <_dtoa_r+0xe4>
 8007024:	f1b9 0f00 	cmp.w	r9, #0
 8007028:	dc03      	bgt.n	8007032 <_dtoa_r+0xba2>
 800702a:	9b05      	ldr	r3, [sp, #20]
 800702c:	2b02      	cmp	r3, #2
 800702e:	f73f aec9 	bgt.w	8006dc4 <_dtoa_r+0x934>
 8007032:	9d00      	ldr	r5, [sp, #0]
 8007034:	4631      	mov	r1, r6
 8007036:	4658      	mov	r0, fp
 8007038:	f7ff f99c 	bl	8006374 <quorem>
 800703c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007040:	f805 3b01 	strb.w	r3, [r5], #1
 8007044:	9a00      	ldr	r2, [sp, #0]
 8007046:	1aaa      	subs	r2, r5, r2
 8007048:	4591      	cmp	r9, r2
 800704a:	ddba      	ble.n	8006fc2 <_dtoa_r+0xb32>
 800704c:	4659      	mov	r1, fp
 800704e:	2300      	movs	r3, #0
 8007050:	220a      	movs	r2, #10
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fa96 	bl	8007584 <__multadd>
 8007058:	4683      	mov	fp, r0
 800705a:	e7eb      	b.n	8007034 <_dtoa_r+0xba4>
 800705c:	08008aa3 	.word	0x08008aa3
 8007060:	080089fc 	.word	0x080089fc
 8007064:	08008a20 	.word	0x08008a20

08007068 <__sflush_r>:
 8007068:	898a      	ldrh	r2, [r1, #12]
 800706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	4605      	mov	r5, r0
 8007070:	0710      	lsls	r0, r2, #28
 8007072:	460c      	mov	r4, r1
 8007074:	d458      	bmi.n	8007128 <__sflush_r+0xc0>
 8007076:	684b      	ldr	r3, [r1, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dc05      	bgt.n	8007088 <__sflush_r+0x20>
 800707c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	dc02      	bgt.n	8007088 <__sflush_r+0x20>
 8007082:	2000      	movs	r0, #0
 8007084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800708a:	2e00      	cmp	r6, #0
 800708c:	d0f9      	beq.n	8007082 <__sflush_r+0x1a>
 800708e:	2300      	movs	r3, #0
 8007090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007094:	682f      	ldr	r7, [r5, #0]
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	d032      	beq.n	8007100 <__sflush_r+0x98>
 800709a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	075a      	lsls	r2, r3, #29
 80070a0:	d505      	bpl.n	80070ae <__sflush_r+0x46>
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a8:	b10b      	cbz	r3, 80070ae <__sflush_r+0x46>
 80070aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070ac:	1ac0      	subs	r0, r0, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	4602      	mov	r2, r0
 80070b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b4:	6a21      	ldr	r1, [r4, #32]
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b0      	blx	r6
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	d106      	bne.n	80070ce <__sflush_r+0x66>
 80070c0:	6829      	ldr	r1, [r5, #0]
 80070c2:	291d      	cmp	r1, #29
 80070c4:	d82c      	bhi.n	8007120 <__sflush_r+0xb8>
 80070c6:	4a2a      	ldr	r2, [pc, #168]	; (8007170 <__sflush_r+0x108>)
 80070c8:	40ca      	lsrs	r2, r1
 80070ca:	07d6      	lsls	r6, r2, #31
 80070cc:	d528      	bpl.n	8007120 <__sflush_r+0xb8>
 80070ce:	2200      	movs	r2, #0
 80070d0:	6062      	str	r2, [r4, #4]
 80070d2:	04d9      	lsls	r1, r3, #19
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	d504      	bpl.n	80070e4 <__sflush_r+0x7c>
 80070da:	1c42      	adds	r2, r0, #1
 80070dc:	d101      	bne.n	80070e2 <__sflush_r+0x7a>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	b903      	cbnz	r3, 80070e4 <__sflush_r+0x7c>
 80070e2:	6560      	str	r0, [r4, #84]	; 0x54
 80070e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e6:	602f      	str	r7, [r5, #0]
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d0ca      	beq.n	8007082 <__sflush_r+0x1a>
 80070ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <__sflush_r+0x92>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 fd71 	bl	8007bdc <_free_r>
 80070fa:	2000      	movs	r0, #0
 80070fc:	6360      	str	r0, [r4, #52]	; 0x34
 80070fe:	e7c1      	b.n	8007084 <__sflush_r+0x1c>
 8007100:	6a21      	ldr	r1, [r4, #32]
 8007102:	2301      	movs	r3, #1
 8007104:	4628      	mov	r0, r5
 8007106:	47b0      	blx	r6
 8007108:	1c41      	adds	r1, r0, #1
 800710a:	d1c7      	bne.n	800709c <__sflush_r+0x34>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0c4      	beq.n	800709c <__sflush_r+0x34>
 8007112:	2b1d      	cmp	r3, #29
 8007114:	d001      	beq.n	800711a <__sflush_r+0xb2>
 8007116:	2b16      	cmp	r3, #22
 8007118:	d101      	bne.n	800711e <__sflush_r+0xb6>
 800711a:	602f      	str	r7, [r5, #0]
 800711c:	e7b1      	b.n	8007082 <__sflush_r+0x1a>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	e7ad      	b.n	8007084 <__sflush_r+0x1c>
 8007128:	690f      	ldr	r7, [r1, #16]
 800712a:	2f00      	cmp	r7, #0
 800712c:	d0a9      	beq.n	8007082 <__sflush_r+0x1a>
 800712e:	0793      	lsls	r3, r2, #30
 8007130:	680e      	ldr	r6, [r1, #0]
 8007132:	bf08      	it	eq
 8007134:	694b      	ldreq	r3, [r1, #20]
 8007136:	600f      	str	r7, [r1, #0]
 8007138:	bf18      	it	ne
 800713a:	2300      	movne	r3, #0
 800713c:	eba6 0807 	sub.w	r8, r6, r7
 8007140:	608b      	str	r3, [r1, #8]
 8007142:	f1b8 0f00 	cmp.w	r8, #0
 8007146:	dd9c      	ble.n	8007082 <__sflush_r+0x1a>
 8007148:	6a21      	ldr	r1, [r4, #32]
 800714a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800714c:	4643      	mov	r3, r8
 800714e:	463a      	mov	r2, r7
 8007150:	4628      	mov	r0, r5
 8007152:	47b0      	blx	r6
 8007154:	2800      	cmp	r0, #0
 8007156:	dc06      	bgt.n	8007166 <__sflush_r+0xfe>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007164:	e78e      	b.n	8007084 <__sflush_r+0x1c>
 8007166:	4407      	add	r7, r0
 8007168:	eba8 0800 	sub.w	r8, r8, r0
 800716c:	e7e9      	b.n	8007142 <__sflush_r+0xda>
 800716e:	bf00      	nop
 8007170:	20400001 	.word	0x20400001

08007174 <_fflush_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	690b      	ldr	r3, [r1, #16]
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b913      	cbnz	r3, 8007184 <_fflush_r+0x10>
 800717e:	2500      	movs	r5, #0
 8007180:	4628      	mov	r0, r5
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	b118      	cbz	r0, 800718e <_fflush_r+0x1a>
 8007186:	6983      	ldr	r3, [r0, #24]
 8007188:	b90b      	cbnz	r3, 800718e <_fflush_r+0x1a>
 800718a:	f000 f887 	bl	800729c <__sinit>
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <_fflush_r+0x6c>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d11b      	bne.n	80071cc <_fflush_r+0x58>
 8007194:	686c      	ldr	r4, [r5, #4]
 8007196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0ef      	beq.n	800717e <_fflush_r+0xa>
 800719e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071a0:	07d0      	lsls	r0, r2, #31
 80071a2:	d404      	bmi.n	80071ae <_fflush_r+0x3a>
 80071a4:	0599      	lsls	r1, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_fflush_r+0x3a>
 80071a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071aa:	f000 f91a 	bl	80073e2 <__retarget_lock_acquire_recursive>
 80071ae:	4628      	mov	r0, r5
 80071b0:	4621      	mov	r1, r4
 80071b2:	f7ff ff59 	bl	8007068 <__sflush_r>
 80071b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b8:	07da      	lsls	r2, r3, #31
 80071ba:	4605      	mov	r5, r0
 80071bc:	d4e0      	bmi.n	8007180 <_fflush_r+0xc>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	059b      	lsls	r3, r3, #22
 80071c2:	d4dd      	bmi.n	8007180 <_fflush_r+0xc>
 80071c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c6:	f000 f90d 	bl	80073e4 <__retarget_lock_release_recursive>
 80071ca:	e7d9      	b.n	8007180 <_fflush_r+0xc>
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <_fflush_r+0x70>)
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d101      	bne.n	80071d6 <_fflush_r+0x62>
 80071d2:	68ac      	ldr	r4, [r5, #8]
 80071d4:	e7df      	b.n	8007196 <_fflush_r+0x22>
 80071d6:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <_fflush_r+0x74>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	bf08      	it	eq
 80071dc:	68ec      	ldreq	r4, [r5, #12]
 80071de:	e7da      	b.n	8007196 <_fflush_r+0x22>
 80071e0:	08008ad4 	.word	0x08008ad4
 80071e4:	08008af4 	.word	0x08008af4
 80071e8:	08008ab4 	.word	0x08008ab4

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f7fe fad3 	bl	80057b4 <memset>
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x38>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x3c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <std+0x40>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <std+0x44>)
 800721c:	6224      	str	r4, [r4, #32]
 800721e:	6323      	str	r3, [r4, #48]	; 0x30
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	080082bd 	.word	0x080082bd
 8007228:	080082df 	.word	0x080082df
 800722c:	08008317 	.word	0x08008317
 8007230:	0800833b 	.word	0x0800833b

08007234 <_cleanup_r>:
 8007234:	4901      	ldr	r1, [pc, #4]	; (800723c <_cleanup_r+0x8>)
 8007236:	f000 b8af 	b.w	8007398 <_fwalk_reent>
 800723a:	bf00      	nop
 800723c:	08007175 	.word	0x08007175

08007240 <__sfmoreglue>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	1e4a      	subs	r2, r1, #1
 8007244:	2568      	movs	r5, #104	; 0x68
 8007246:	4355      	muls	r5, r2
 8007248:	460e      	mov	r6, r1
 800724a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800724e:	f000 fd15 	bl	8007c7c <_malloc_r>
 8007252:	4604      	mov	r4, r0
 8007254:	b140      	cbz	r0, 8007268 <__sfmoreglue+0x28>
 8007256:	2100      	movs	r1, #0
 8007258:	e9c0 1600 	strd	r1, r6, [r0]
 800725c:	300c      	adds	r0, #12
 800725e:	60a0      	str	r0, [r4, #8]
 8007260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007264:	f7fe faa6 	bl	80057b4 <memset>
 8007268:	4620      	mov	r0, r4
 800726a:	bd70      	pop	{r4, r5, r6, pc}

0800726c <__sfp_lock_acquire>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__sfp_lock_acquire+0x8>)
 800726e:	f000 b8b8 	b.w	80073e2 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	20000374 	.word	0x20000374

08007278 <__sfp_lock_release>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__sfp_lock_release+0x8>)
 800727a:	f000 b8b3 	b.w	80073e4 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	20000374 	.word	0x20000374

08007284 <__sinit_lock_acquire>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__sinit_lock_acquire+0x8>)
 8007286:	f000 b8ac 	b.w	80073e2 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	2000036f 	.word	0x2000036f

08007290 <__sinit_lock_release>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__sinit_lock_release+0x8>)
 8007292:	f000 b8a7 	b.w	80073e4 <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	2000036f 	.word	0x2000036f

0800729c <__sinit>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	f7ff fff0 	bl	8007284 <__sinit_lock_acquire>
 80072a4:	69a3      	ldr	r3, [r4, #24]
 80072a6:	b11b      	cbz	r3, 80072b0 <__sinit+0x14>
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f7ff bff0 	b.w	8007290 <__sinit_lock_release>
 80072b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072b4:	6523      	str	r3, [r4, #80]	; 0x50
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <__sinit+0x68>)
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <__sinit+0x6c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80072be:	42a3      	cmp	r3, r4
 80072c0:	bf04      	itt	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	61a3      	streq	r3, [r4, #24]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f820 	bl	800730c <__sfp>
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f81c 	bl	800730c <__sfp>
 80072d4:	60a0      	str	r0, [r4, #8]
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f818 	bl	800730c <__sfp>
 80072dc:	2200      	movs	r2, #0
 80072de:	60e0      	str	r0, [r4, #12]
 80072e0:	2104      	movs	r1, #4
 80072e2:	6860      	ldr	r0, [r4, #4]
 80072e4:	f7ff ff82 	bl	80071ec <std>
 80072e8:	68a0      	ldr	r0, [r4, #8]
 80072ea:	2201      	movs	r2, #1
 80072ec:	2109      	movs	r1, #9
 80072ee:	f7ff ff7d 	bl	80071ec <std>
 80072f2:	68e0      	ldr	r0, [r4, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	2112      	movs	r1, #18
 80072f8:	f7ff ff78 	bl	80071ec <std>
 80072fc:	2301      	movs	r3, #1
 80072fe:	61a3      	str	r3, [r4, #24]
 8007300:	e7d2      	b.n	80072a8 <__sinit+0xc>
 8007302:	bf00      	nop
 8007304:	080089e8 	.word	0x080089e8
 8007308:	08007235 	.word	0x08007235

0800730c <__sfp>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	4607      	mov	r7, r0
 8007310:	f7ff ffac 	bl	800726c <__sfp_lock_acquire>
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <__sfp+0x84>)
 8007316:	681e      	ldr	r6, [r3, #0]
 8007318:	69b3      	ldr	r3, [r6, #24]
 800731a:	b913      	cbnz	r3, 8007322 <__sfp+0x16>
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff ffbd 	bl	800729c <__sinit>
 8007322:	3648      	adds	r6, #72	; 0x48
 8007324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007328:	3b01      	subs	r3, #1
 800732a:	d503      	bpl.n	8007334 <__sfp+0x28>
 800732c:	6833      	ldr	r3, [r6, #0]
 800732e:	b30b      	cbz	r3, 8007374 <__sfp+0x68>
 8007330:	6836      	ldr	r6, [r6, #0]
 8007332:	e7f7      	b.n	8007324 <__sfp+0x18>
 8007334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007338:	b9d5      	cbnz	r5, 8007370 <__sfp+0x64>
 800733a:	4b16      	ldr	r3, [pc, #88]	; (8007394 <__sfp+0x88>)
 800733c:	60e3      	str	r3, [r4, #12]
 800733e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007342:	6665      	str	r5, [r4, #100]	; 0x64
 8007344:	f000 f84c 	bl	80073e0 <__retarget_lock_init_recursive>
 8007348:	f7ff ff96 	bl	8007278 <__sfp_lock_release>
 800734c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007354:	6025      	str	r5, [r4, #0]
 8007356:	61a5      	str	r5, [r4, #24]
 8007358:	2208      	movs	r2, #8
 800735a:	4629      	mov	r1, r5
 800735c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007360:	f7fe fa28 	bl	80057b4 <memset>
 8007364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800736c:	4620      	mov	r0, r4
 800736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007370:	3468      	adds	r4, #104	; 0x68
 8007372:	e7d9      	b.n	8007328 <__sfp+0x1c>
 8007374:	2104      	movs	r1, #4
 8007376:	4638      	mov	r0, r7
 8007378:	f7ff ff62 	bl	8007240 <__sfmoreglue>
 800737c:	4604      	mov	r4, r0
 800737e:	6030      	str	r0, [r6, #0]
 8007380:	2800      	cmp	r0, #0
 8007382:	d1d5      	bne.n	8007330 <__sfp+0x24>
 8007384:	f7ff ff78 	bl	8007278 <__sfp_lock_release>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	e7ee      	b.n	800736c <__sfp+0x60>
 800738e:	bf00      	nop
 8007390:	080089e8 	.word	0x080089e8
 8007394:	ffff0001 	.word	0xffff0001

08007398 <_fwalk_reent>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4606      	mov	r6, r0
 800739e:	4688      	mov	r8, r1
 80073a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073a4:	2700      	movs	r7, #0
 80073a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073aa:	f1b9 0901 	subs.w	r9, r9, #1
 80073ae:	d505      	bpl.n	80073bc <_fwalk_reent+0x24>
 80073b0:	6824      	ldr	r4, [r4, #0]
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	d1f7      	bne.n	80073a6 <_fwalk_reent+0xe>
 80073b6:	4638      	mov	r0, r7
 80073b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073bc:	89ab      	ldrh	r3, [r5, #12]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d907      	bls.n	80073d2 <_fwalk_reent+0x3a>
 80073c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c6:	3301      	adds	r3, #1
 80073c8:	d003      	beq.n	80073d2 <_fwalk_reent+0x3a>
 80073ca:	4629      	mov	r1, r5
 80073cc:	4630      	mov	r0, r6
 80073ce:	47c0      	blx	r8
 80073d0:	4307      	orrs	r7, r0
 80073d2:	3568      	adds	r5, #104	; 0x68
 80073d4:	e7e9      	b.n	80073aa <_fwalk_reent+0x12>
	...

080073d8 <_localeconv_r>:
 80073d8:	4800      	ldr	r0, [pc, #0]	; (80073dc <_localeconv_r+0x4>)
 80073da:	4770      	bx	lr
 80073dc:	20000160 	.word	0x20000160

080073e0 <__retarget_lock_init_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <__retarget_lock_acquire_recursive>:
 80073e2:	4770      	bx	lr

080073e4 <__retarget_lock_release_recursive>:
 80073e4:	4770      	bx	lr

080073e6 <__swhatbuf_r>:
 80073e6:	b570      	push	{r4, r5, r6, lr}
 80073e8:	460e      	mov	r6, r1
 80073ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ee:	2900      	cmp	r1, #0
 80073f0:	b096      	sub	sp, #88	; 0x58
 80073f2:	4614      	mov	r4, r2
 80073f4:	461d      	mov	r5, r3
 80073f6:	da07      	bge.n	8007408 <__swhatbuf_r+0x22>
 80073f8:	2300      	movs	r3, #0
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	89b3      	ldrh	r3, [r6, #12]
 80073fe:	061a      	lsls	r2, r3, #24
 8007400:	d410      	bmi.n	8007424 <__swhatbuf_r+0x3e>
 8007402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007406:	e00e      	b.n	8007426 <__swhatbuf_r+0x40>
 8007408:	466a      	mov	r2, sp
 800740a:	f000 ffed 	bl	80083e8 <_fstat_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	dbf2      	blt.n	80073f8 <__swhatbuf_r+0x12>
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007418:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800741c:	425a      	negs	r2, r3
 800741e:	415a      	adcs	r2, r3
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	e7ee      	b.n	8007402 <__swhatbuf_r+0x1c>
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	2000      	movs	r0, #0
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	b016      	add	sp, #88	; 0x58
 800742c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007430 <__smakebuf_r>:
 8007430:	898b      	ldrh	r3, [r1, #12]
 8007432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007434:	079d      	lsls	r5, r3, #30
 8007436:	4606      	mov	r6, r0
 8007438:	460c      	mov	r4, r1
 800743a:	d507      	bpl.n	800744c <__smakebuf_r+0x1c>
 800743c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	6123      	str	r3, [r4, #16]
 8007444:	2301      	movs	r3, #1
 8007446:	6163      	str	r3, [r4, #20]
 8007448:	b002      	add	sp, #8
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	ab01      	add	r3, sp, #4
 800744e:	466a      	mov	r2, sp
 8007450:	f7ff ffc9 	bl	80073e6 <__swhatbuf_r>
 8007454:	9900      	ldr	r1, [sp, #0]
 8007456:	4605      	mov	r5, r0
 8007458:	4630      	mov	r0, r6
 800745a:	f000 fc0f 	bl	8007c7c <_malloc_r>
 800745e:	b948      	cbnz	r0, 8007474 <__smakebuf_r+0x44>
 8007460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007464:	059a      	lsls	r2, r3, #22
 8007466:	d4ef      	bmi.n	8007448 <__smakebuf_r+0x18>
 8007468:	f023 0303 	bic.w	r3, r3, #3
 800746c:	f043 0302 	orr.w	r3, r3, #2
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	e7e3      	b.n	800743c <__smakebuf_r+0xc>
 8007474:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <__smakebuf_r+0x7c>)
 8007476:	62b3      	str	r3, [r6, #40]	; 0x28
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	6020      	str	r0, [r4, #0]
 800747c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	9b00      	ldr	r3, [sp, #0]
 8007484:	6163      	str	r3, [r4, #20]
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	6120      	str	r0, [r4, #16]
 800748a:	b15b      	cbz	r3, 80074a4 <__smakebuf_r+0x74>
 800748c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007490:	4630      	mov	r0, r6
 8007492:	f000 ffbb 	bl	800840c <_isatty_r>
 8007496:	b128      	cbz	r0, 80074a4 <__smakebuf_r+0x74>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	89a0      	ldrh	r0, [r4, #12]
 80074a6:	4305      	orrs	r5, r0
 80074a8:	81a5      	strh	r5, [r4, #12]
 80074aa:	e7cd      	b.n	8007448 <__smakebuf_r+0x18>
 80074ac:	08007235 	.word	0x08007235

080074b0 <malloc>:
 80074b0:	4b02      	ldr	r3, [pc, #8]	; (80074bc <malloc+0xc>)
 80074b2:	4601      	mov	r1, r0
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f000 bbe1 	b.w	8007c7c <_malloc_r>
 80074ba:	bf00      	nop
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <_Balloc>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	b976      	cbnz	r6, 80074e8 <_Balloc+0x28>
 80074ca:	2010      	movs	r0, #16
 80074cc:	f7ff fff0 	bl	80074b0 <malloc>
 80074d0:	4602      	mov	r2, r0
 80074d2:	6260      	str	r0, [r4, #36]	; 0x24
 80074d4:	b920      	cbnz	r0, 80074e0 <_Balloc+0x20>
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <_Balloc+0x78>)
 80074d8:	4818      	ldr	r0, [pc, #96]	; (800753c <_Balloc+0x7c>)
 80074da:	2166      	movs	r1, #102	; 0x66
 80074dc:	f000 ff44 	bl	8008368 <__assert_func>
 80074e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074e4:	6006      	str	r6, [r0, #0]
 80074e6:	60c6      	str	r6, [r0, #12]
 80074e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074ea:	68f3      	ldr	r3, [r6, #12]
 80074ec:	b183      	cbz	r3, 8007510 <_Balloc+0x50>
 80074ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074f6:	b9b8      	cbnz	r0, 8007528 <_Balloc+0x68>
 80074f8:	2101      	movs	r1, #1
 80074fa:	fa01 f605 	lsl.w	r6, r1, r5
 80074fe:	1d72      	adds	r2, r6, #5
 8007500:	0092      	lsls	r2, r2, #2
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fb5a 	bl	8007bbc <_calloc_r>
 8007508:	b160      	cbz	r0, 8007524 <_Balloc+0x64>
 800750a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800750e:	e00e      	b.n	800752e <_Balloc+0x6e>
 8007510:	2221      	movs	r2, #33	; 0x21
 8007512:	2104      	movs	r1, #4
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fb51 	bl	8007bbc <_calloc_r>
 800751a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751c:	60f0      	str	r0, [r6, #12]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e4      	bne.n	80074ee <_Balloc+0x2e>
 8007524:	2000      	movs	r0, #0
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	6802      	ldr	r2, [r0, #0]
 800752a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800752e:	2300      	movs	r3, #0
 8007530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007534:	e7f7      	b.n	8007526 <_Balloc+0x66>
 8007536:	bf00      	nop
 8007538:	08008a2d 	.word	0x08008a2d
 800753c:	08008b14 	.word	0x08008b14

08007540 <_Bfree>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007544:	4605      	mov	r5, r0
 8007546:	460c      	mov	r4, r1
 8007548:	b976      	cbnz	r6, 8007568 <_Bfree+0x28>
 800754a:	2010      	movs	r0, #16
 800754c:	f7ff ffb0 	bl	80074b0 <malloc>
 8007550:	4602      	mov	r2, r0
 8007552:	6268      	str	r0, [r5, #36]	; 0x24
 8007554:	b920      	cbnz	r0, 8007560 <_Bfree+0x20>
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <_Bfree+0x3c>)
 8007558:	4809      	ldr	r0, [pc, #36]	; (8007580 <_Bfree+0x40>)
 800755a:	218a      	movs	r1, #138	; 0x8a
 800755c:	f000 ff04 	bl	8008368 <__assert_func>
 8007560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007564:	6006      	str	r6, [r0, #0]
 8007566:	60c6      	str	r6, [r0, #12]
 8007568:	b13c      	cbz	r4, 800757a <_Bfree+0x3a>
 800756a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800756c:	6862      	ldr	r2, [r4, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007574:	6021      	str	r1, [r4, #0]
 8007576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	08008a2d 	.word	0x08008a2d
 8007580:	08008b14 	.word	0x08008b14

08007584 <__multadd>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	690e      	ldr	r6, [r1, #16]
 800758a:	4607      	mov	r7, r0
 800758c:	4698      	mov	r8, r3
 800758e:	460c      	mov	r4, r1
 8007590:	f101 0014 	add.w	r0, r1, #20
 8007594:	2300      	movs	r3, #0
 8007596:	6805      	ldr	r5, [r0, #0]
 8007598:	b2a9      	uxth	r1, r5
 800759a:	fb02 8101 	mla	r1, r2, r1, r8
 800759e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075a2:	0c2d      	lsrs	r5, r5, #16
 80075a4:	fb02 c505 	mla	r5, r2, r5, ip
 80075a8:	b289      	uxth	r1, r1
 80075aa:	3301      	adds	r3, #1
 80075ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075b0:	429e      	cmp	r6, r3
 80075b2:	f840 1b04 	str.w	r1, [r0], #4
 80075b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075ba:	dcec      	bgt.n	8007596 <__multadd+0x12>
 80075bc:	f1b8 0f00 	cmp.w	r8, #0
 80075c0:	d022      	beq.n	8007608 <__multadd+0x84>
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	dc19      	bgt.n	80075fc <__multadd+0x78>
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	4638      	mov	r0, r7
 80075cc:	3101      	adds	r1, #1
 80075ce:	f7ff ff77 	bl	80074c0 <_Balloc>
 80075d2:	4605      	mov	r5, r0
 80075d4:	b928      	cbnz	r0, 80075e2 <__multadd+0x5e>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <__multadd+0x8c>)
 80075da:	480e      	ldr	r0, [pc, #56]	; (8007614 <__multadd+0x90>)
 80075dc:	21b5      	movs	r1, #181	; 0xb5
 80075de:	f000 fec3 	bl	8008368 <__assert_func>
 80075e2:	6922      	ldr	r2, [r4, #16]
 80075e4:	3202      	adds	r2, #2
 80075e6:	f104 010c 	add.w	r1, r4, #12
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	300c      	adds	r0, #12
 80075ee:	f7fe f8d3 	bl	8005798 <memcpy>
 80075f2:	4621      	mov	r1, r4
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7ff ffa3 	bl	8007540 <_Bfree>
 80075fa:	462c      	mov	r4, r5
 80075fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007600:	3601      	adds	r6, #1
 8007602:	f8c3 8014 	str.w	r8, [r3, #20]
 8007606:	6126      	str	r6, [r4, #16]
 8007608:	4620      	mov	r0, r4
 800760a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760e:	bf00      	nop
 8007610:	08008aa3 	.word	0x08008aa3
 8007614:	08008b14 	.word	0x08008b14

08007618 <__hi0bits>:
 8007618:	0c03      	lsrs	r3, r0, #16
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	b9d3      	cbnz	r3, 8007654 <__hi0bits+0x3c>
 800761e:	0400      	lsls	r0, r0, #16
 8007620:	2310      	movs	r3, #16
 8007622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007626:	bf04      	itt	eq
 8007628:	0200      	lsleq	r0, r0, #8
 800762a:	3308      	addeq	r3, #8
 800762c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007630:	bf04      	itt	eq
 8007632:	0100      	lsleq	r0, r0, #4
 8007634:	3304      	addeq	r3, #4
 8007636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800763a:	bf04      	itt	eq
 800763c:	0080      	lsleq	r0, r0, #2
 800763e:	3302      	addeq	r3, #2
 8007640:	2800      	cmp	r0, #0
 8007642:	db05      	blt.n	8007650 <__hi0bits+0x38>
 8007644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007648:	f103 0301 	add.w	r3, r3, #1
 800764c:	bf08      	it	eq
 800764e:	2320      	moveq	r3, #32
 8007650:	4618      	mov	r0, r3
 8007652:	4770      	bx	lr
 8007654:	2300      	movs	r3, #0
 8007656:	e7e4      	b.n	8007622 <__hi0bits+0xa>

08007658 <__lo0bits>:
 8007658:	6803      	ldr	r3, [r0, #0]
 800765a:	f013 0207 	ands.w	r2, r3, #7
 800765e:	4601      	mov	r1, r0
 8007660:	d00b      	beq.n	800767a <__lo0bits+0x22>
 8007662:	07da      	lsls	r2, r3, #31
 8007664:	d424      	bmi.n	80076b0 <__lo0bits+0x58>
 8007666:	0798      	lsls	r0, r3, #30
 8007668:	bf49      	itett	mi
 800766a:	085b      	lsrmi	r3, r3, #1
 800766c:	089b      	lsrpl	r3, r3, #2
 800766e:	2001      	movmi	r0, #1
 8007670:	600b      	strmi	r3, [r1, #0]
 8007672:	bf5c      	itt	pl
 8007674:	600b      	strpl	r3, [r1, #0]
 8007676:	2002      	movpl	r0, #2
 8007678:	4770      	bx	lr
 800767a:	b298      	uxth	r0, r3
 800767c:	b9b0      	cbnz	r0, 80076ac <__lo0bits+0x54>
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	2010      	movs	r0, #16
 8007682:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007686:	bf04      	itt	eq
 8007688:	0a1b      	lsreq	r3, r3, #8
 800768a:	3008      	addeq	r0, #8
 800768c:	071a      	lsls	r2, r3, #28
 800768e:	bf04      	itt	eq
 8007690:	091b      	lsreq	r3, r3, #4
 8007692:	3004      	addeq	r0, #4
 8007694:	079a      	lsls	r2, r3, #30
 8007696:	bf04      	itt	eq
 8007698:	089b      	lsreq	r3, r3, #2
 800769a:	3002      	addeq	r0, #2
 800769c:	07da      	lsls	r2, r3, #31
 800769e:	d403      	bmi.n	80076a8 <__lo0bits+0x50>
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	f100 0001 	add.w	r0, r0, #1
 80076a6:	d005      	beq.n	80076b4 <__lo0bits+0x5c>
 80076a8:	600b      	str	r3, [r1, #0]
 80076aa:	4770      	bx	lr
 80076ac:	4610      	mov	r0, r2
 80076ae:	e7e8      	b.n	8007682 <__lo0bits+0x2a>
 80076b0:	2000      	movs	r0, #0
 80076b2:	4770      	bx	lr
 80076b4:	2020      	movs	r0, #32
 80076b6:	4770      	bx	lr

080076b8 <__i2b>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	460c      	mov	r4, r1
 80076bc:	2101      	movs	r1, #1
 80076be:	f7ff feff 	bl	80074c0 <_Balloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	b928      	cbnz	r0, 80076d2 <__i2b+0x1a>
 80076c6:	4b05      	ldr	r3, [pc, #20]	; (80076dc <__i2b+0x24>)
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <__i2b+0x28>)
 80076ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076ce:	f000 fe4b 	bl	8008368 <__assert_func>
 80076d2:	2301      	movs	r3, #1
 80076d4:	6144      	str	r4, [r0, #20]
 80076d6:	6103      	str	r3, [r0, #16]
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	08008aa3 	.word	0x08008aa3
 80076e0:	08008b14 	.word	0x08008b14

080076e4 <__multiply>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4614      	mov	r4, r2
 80076ea:	690a      	ldr	r2, [r1, #16]
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	bfb8      	it	lt
 80076f2:	460b      	movlt	r3, r1
 80076f4:	460d      	mov	r5, r1
 80076f6:	bfbc      	itt	lt
 80076f8:	4625      	movlt	r5, r4
 80076fa:	461c      	movlt	r4, r3
 80076fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007700:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007704:	68ab      	ldr	r3, [r5, #8]
 8007706:	6869      	ldr	r1, [r5, #4]
 8007708:	eb0a 0709 	add.w	r7, sl, r9
 800770c:	42bb      	cmp	r3, r7
 800770e:	b085      	sub	sp, #20
 8007710:	bfb8      	it	lt
 8007712:	3101      	addlt	r1, #1
 8007714:	f7ff fed4 	bl	80074c0 <_Balloc>
 8007718:	b930      	cbnz	r0, 8007728 <__multiply+0x44>
 800771a:	4602      	mov	r2, r0
 800771c:	4b42      	ldr	r3, [pc, #264]	; (8007828 <__multiply+0x144>)
 800771e:	4843      	ldr	r0, [pc, #268]	; (800782c <__multiply+0x148>)
 8007720:	f240 115d 	movw	r1, #349	; 0x15d
 8007724:	f000 fe20 	bl	8008368 <__assert_func>
 8007728:	f100 0614 	add.w	r6, r0, #20
 800772c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007730:	4633      	mov	r3, r6
 8007732:	2200      	movs	r2, #0
 8007734:	4543      	cmp	r3, r8
 8007736:	d31e      	bcc.n	8007776 <__multiply+0x92>
 8007738:	f105 0c14 	add.w	ip, r5, #20
 800773c:	f104 0314 	add.w	r3, r4, #20
 8007740:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007744:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	ebac 0205 	sub.w	r2, ip, r5
 800774e:	3a15      	subs	r2, #21
 8007750:	f022 0203 	bic.w	r2, r2, #3
 8007754:	3204      	adds	r2, #4
 8007756:	f105 0115 	add.w	r1, r5, #21
 800775a:	458c      	cmp	ip, r1
 800775c:	bf38      	it	cc
 800775e:	2204      	movcc	r2, #4
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	9a02      	ldr	r2, [sp, #8]
 8007764:	9303      	str	r3, [sp, #12]
 8007766:	429a      	cmp	r2, r3
 8007768:	d808      	bhi.n	800777c <__multiply+0x98>
 800776a:	2f00      	cmp	r7, #0
 800776c:	dc55      	bgt.n	800781a <__multiply+0x136>
 800776e:	6107      	str	r7, [r0, #16]
 8007770:	b005      	add	sp, #20
 8007772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007776:	f843 2b04 	str.w	r2, [r3], #4
 800777a:	e7db      	b.n	8007734 <__multiply+0x50>
 800777c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007780:	f1ba 0f00 	cmp.w	sl, #0
 8007784:	d020      	beq.n	80077c8 <__multiply+0xe4>
 8007786:	f105 0e14 	add.w	lr, r5, #20
 800778a:	46b1      	mov	r9, r6
 800778c:	2200      	movs	r2, #0
 800778e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007792:	f8d9 b000 	ldr.w	fp, [r9]
 8007796:	b2a1      	uxth	r1, r4
 8007798:	fa1f fb8b 	uxth.w	fp, fp
 800779c:	fb0a b101 	mla	r1, sl, r1, fp
 80077a0:	4411      	add	r1, r2
 80077a2:	f8d9 2000 	ldr.w	r2, [r9]
 80077a6:	0c24      	lsrs	r4, r4, #16
 80077a8:	0c12      	lsrs	r2, r2, #16
 80077aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80077ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80077b2:	b289      	uxth	r1, r1
 80077b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077b8:	45f4      	cmp	ip, lr
 80077ba:	f849 1b04 	str.w	r1, [r9], #4
 80077be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80077c2:	d8e4      	bhi.n	800778e <__multiply+0xaa>
 80077c4:	9901      	ldr	r1, [sp, #4]
 80077c6:	5072      	str	r2, [r6, r1]
 80077c8:	9a03      	ldr	r2, [sp, #12]
 80077ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077ce:	3304      	adds	r3, #4
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	d01f      	beq.n	8007816 <__multiply+0x132>
 80077d6:	6834      	ldr	r4, [r6, #0]
 80077d8:	f105 0114 	add.w	r1, r5, #20
 80077dc:	46b6      	mov	lr, r6
 80077de:	f04f 0a00 	mov.w	sl, #0
 80077e2:	880a      	ldrh	r2, [r1, #0]
 80077e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80077e8:	fb09 b202 	mla	r2, r9, r2, fp
 80077ec:	4492      	add	sl, r2
 80077ee:	b2a4      	uxth	r4, r4
 80077f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80077f4:	f84e 4b04 	str.w	r4, [lr], #4
 80077f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80077fc:	f8be 2000 	ldrh.w	r2, [lr]
 8007800:	0c24      	lsrs	r4, r4, #16
 8007802:	fb09 2404 	mla	r4, r9, r4, r2
 8007806:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800780a:	458c      	cmp	ip, r1
 800780c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007810:	d8e7      	bhi.n	80077e2 <__multiply+0xfe>
 8007812:	9a01      	ldr	r2, [sp, #4]
 8007814:	50b4      	str	r4, [r6, r2]
 8007816:	3604      	adds	r6, #4
 8007818:	e7a3      	b.n	8007762 <__multiply+0x7e>
 800781a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1a5      	bne.n	800776e <__multiply+0x8a>
 8007822:	3f01      	subs	r7, #1
 8007824:	e7a1      	b.n	800776a <__multiply+0x86>
 8007826:	bf00      	nop
 8007828:	08008aa3 	.word	0x08008aa3
 800782c:	08008b14 	.word	0x08008b14

08007830 <__pow5mult>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4615      	mov	r5, r2
 8007836:	f012 0203 	ands.w	r2, r2, #3
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	d007      	beq.n	8007850 <__pow5mult+0x20>
 8007840:	4c25      	ldr	r4, [pc, #148]	; (80078d8 <__pow5mult+0xa8>)
 8007842:	3a01      	subs	r2, #1
 8007844:	2300      	movs	r3, #0
 8007846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800784a:	f7ff fe9b 	bl	8007584 <__multadd>
 800784e:	4607      	mov	r7, r0
 8007850:	10ad      	asrs	r5, r5, #2
 8007852:	d03d      	beq.n	80078d0 <__pow5mult+0xa0>
 8007854:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007856:	b97c      	cbnz	r4, 8007878 <__pow5mult+0x48>
 8007858:	2010      	movs	r0, #16
 800785a:	f7ff fe29 	bl	80074b0 <malloc>
 800785e:	4602      	mov	r2, r0
 8007860:	6270      	str	r0, [r6, #36]	; 0x24
 8007862:	b928      	cbnz	r0, 8007870 <__pow5mult+0x40>
 8007864:	4b1d      	ldr	r3, [pc, #116]	; (80078dc <__pow5mult+0xac>)
 8007866:	481e      	ldr	r0, [pc, #120]	; (80078e0 <__pow5mult+0xb0>)
 8007868:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800786c:	f000 fd7c 	bl	8008368 <__assert_func>
 8007870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007874:	6004      	str	r4, [r0, #0]
 8007876:	60c4      	str	r4, [r0, #12]
 8007878:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800787c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007880:	b94c      	cbnz	r4, 8007896 <__pow5mult+0x66>
 8007882:	f240 2171 	movw	r1, #625	; 0x271
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ff16 	bl	80076b8 <__i2b>
 800788c:	2300      	movs	r3, #0
 800788e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007892:	4604      	mov	r4, r0
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	07eb      	lsls	r3, r5, #31
 800789c:	d50a      	bpl.n	80078b4 <__pow5mult+0x84>
 800789e:	4639      	mov	r1, r7
 80078a0:	4622      	mov	r2, r4
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ff1e 	bl	80076e4 <__multiply>
 80078a8:	4639      	mov	r1, r7
 80078aa:	4680      	mov	r8, r0
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff fe47 	bl	8007540 <_Bfree>
 80078b2:	4647      	mov	r7, r8
 80078b4:	106d      	asrs	r5, r5, #1
 80078b6:	d00b      	beq.n	80078d0 <__pow5mult+0xa0>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	b938      	cbnz	r0, 80078cc <__pow5mult+0x9c>
 80078bc:	4622      	mov	r2, r4
 80078be:	4621      	mov	r1, r4
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ff0f 	bl	80076e4 <__multiply>
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	f8c0 9000 	str.w	r9, [r0]
 80078cc:	4604      	mov	r4, r0
 80078ce:	e7e4      	b.n	800789a <__pow5mult+0x6a>
 80078d0:	4638      	mov	r0, r7
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	bf00      	nop
 80078d8:	08008c68 	.word	0x08008c68
 80078dc:	08008a2d 	.word	0x08008a2d
 80078e0:	08008b14 	.word	0x08008b14

080078e4 <__lshift>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	6849      	ldr	r1, [r1, #4]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	4607      	mov	r7, r0
 80078f6:	4691      	mov	r9, r2
 80078f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078fc:	f108 0601 	add.w	r6, r8, #1
 8007900:	42b3      	cmp	r3, r6
 8007902:	db0b      	blt.n	800791c <__lshift+0x38>
 8007904:	4638      	mov	r0, r7
 8007906:	f7ff fddb 	bl	80074c0 <_Balloc>
 800790a:	4605      	mov	r5, r0
 800790c:	b948      	cbnz	r0, 8007922 <__lshift+0x3e>
 800790e:	4602      	mov	r2, r0
 8007910:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <__lshift+0xd0>)
 8007912:	4829      	ldr	r0, [pc, #164]	; (80079b8 <__lshift+0xd4>)
 8007914:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007918:	f000 fd26 	bl	8008368 <__assert_func>
 800791c:	3101      	adds	r1, #1
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	e7ee      	b.n	8007900 <__lshift+0x1c>
 8007922:	2300      	movs	r3, #0
 8007924:	f100 0114 	add.w	r1, r0, #20
 8007928:	f100 0210 	add.w	r2, r0, #16
 800792c:	4618      	mov	r0, r3
 800792e:	4553      	cmp	r3, sl
 8007930:	db33      	blt.n	800799a <__lshift+0xb6>
 8007932:	6920      	ldr	r0, [r4, #16]
 8007934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007938:	f104 0314 	add.w	r3, r4, #20
 800793c:	f019 091f 	ands.w	r9, r9, #31
 8007940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007948:	d02b      	beq.n	80079a2 <__lshift+0xbe>
 800794a:	f1c9 0e20 	rsb	lr, r9, #32
 800794e:	468a      	mov	sl, r1
 8007950:	2200      	movs	r2, #0
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	fa00 f009 	lsl.w	r0, r0, r9
 8007958:	4302      	orrs	r2, r0
 800795a:	f84a 2b04 	str.w	r2, [sl], #4
 800795e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007962:	459c      	cmp	ip, r3
 8007964:	fa22 f20e 	lsr.w	r2, r2, lr
 8007968:	d8f3      	bhi.n	8007952 <__lshift+0x6e>
 800796a:	ebac 0304 	sub.w	r3, ip, r4
 800796e:	3b15      	subs	r3, #21
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	3304      	adds	r3, #4
 8007976:	f104 0015 	add.w	r0, r4, #21
 800797a:	4584      	cmp	ip, r0
 800797c:	bf38      	it	cc
 800797e:	2304      	movcc	r3, #4
 8007980:	50ca      	str	r2, [r1, r3]
 8007982:	b10a      	cbz	r2, 8007988 <__lshift+0xa4>
 8007984:	f108 0602 	add.w	r6, r8, #2
 8007988:	3e01      	subs	r6, #1
 800798a:	4638      	mov	r0, r7
 800798c:	612e      	str	r6, [r5, #16]
 800798e:	4621      	mov	r1, r4
 8007990:	f7ff fdd6 	bl	8007540 <_Bfree>
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	f842 0f04 	str.w	r0, [r2, #4]!
 800799e:	3301      	adds	r3, #1
 80079a0:	e7c5      	b.n	800792e <__lshift+0x4a>
 80079a2:	3904      	subs	r1, #4
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ac:	459c      	cmp	ip, r3
 80079ae:	d8f9      	bhi.n	80079a4 <__lshift+0xc0>
 80079b0:	e7ea      	b.n	8007988 <__lshift+0xa4>
 80079b2:	bf00      	nop
 80079b4:	08008aa3 	.word	0x08008aa3
 80079b8:	08008b14 	.word	0x08008b14

080079bc <__mcmp>:
 80079bc:	b530      	push	{r4, r5, lr}
 80079be:	6902      	ldr	r2, [r0, #16]
 80079c0:	690c      	ldr	r4, [r1, #16]
 80079c2:	1b12      	subs	r2, r2, r4
 80079c4:	d10e      	bne.n	80079e4 <__mcmp+0x28>
 80079c6:	f100 0314 	add.w	r3, r0, #20
 80079ca:	3114      	adds	r1, #20
 80079cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079dc:	42a5      	cmp	r5, r4
 80079de:	d003      	beq.n	80079e8 <__mcmp+0x2c>
 80079e0:	d305      	bcc.n	80079ee <__mcmp+0x32>
 80079e2:	2201      	movs	r2, #1
 80079e4:	4610      	mov	r0, r2
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	4283      	cmp	r3, r0
 80079ea:	d3f3      	bcc.n	80079d4 <__mcmp+0x18>
 80079ec:	e7fa      	b.n	80079e4 <__mcmp+0x28>
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f2:	e7f7      	b.n	80079e4 <__mcmp+0x28>

080079f4 <__mdiff>:
 80079f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	460c      	mov	r4, r1
 80079fa:	4606      	mov	r6, r0
 80079fc:	4611      	mov	r1, r2
 80079fe:	4620      	mov	r0, r4
 8007a00:	4617      	mov	r7, r2
 8007a02:	f7ff ffdb 	bl	80079bc <__mcmp>
 8007a06:	1e05      	subs	r5, r0, #0
 8007a08:	d110      	bne.n	8007a2c <__mdiff+0x38>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fd57 	bl	80074c0 <_Balloc>
 8007a12:	b930      	cbnz	r0, 8007a22 <__mdiff+0x2e>
 8007a14:	4b39      	ldr	r3, [pc, #228]	; (8007afc <__mdiff+0x108>)
 8007a16:	4602      	mov	r2, r0
 8007a18:	f240 2132 	movw	r1, #562	; 0x232
 8007a1c:	4838      	ldr	r0, [pc, #224]	; (8007b00 <__mdiff+0x10c>)
 8007a1e:	f000 fca3 	bl	8008368 <__assert_func>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	bfa4      	itt	ge
 8007a2e:	463b      	movge	r3, r7
 8007a30:	4627      	movge	r7, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	bfa6      	itte	ge
 8007a38:	461c      	movge	r4, r3
 8007a3a:	2500      	movge	r5, #0
 8007a3c:	2501      	movlt	r5, #1
 8007a3e:	f7ff fd3f 	bl	80074c0 <_Balloc>
 8007a42:	b920      	cbnz	r0, 8007a4e <__mdiff+0x5a>
 8007a44:	4b2d      	ldr	r3, [pc, #180]	; (8007afc <__mdiff+0x108>)
 8007a46:	4602      	mov	r2, r0
 8007a48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a4c:	e7e6      	b.n	8007a1c <__mdiff+0x28>
 8007a4e:	693e      	ldr	r6, [r7, #16]
 8007a50:	60c5      	str	r5, [r0, #12]
 8007a52:	6925      	ldr	r5, [r4, #16]
 8007a54:	f107 0114 	add.w	r1, r7, #20
 8007a58:	f104 0914 	add.w	r9, r4, #20
 8007a5c:	f100 0e14 	add.w	lr, r0, #20
 8007a60:	f107 0210 	add.w	r2, r7, #16
 8007a64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007a68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007a6c:	46f2      	mov	sl, lr
 8007a6e:	2700      	movs	r7, #0
 8007a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a78:	fa1f f883 	uxth.w	r8, r3
 8007a7c:	fa17 f78b 	uxtah	r7, r7, fp
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	eba7 0808 	sub.w	r8, r7, r8
 8007a86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a8e:	fa1f f888 	uxth.w	r8, r8
 8007a92:	141f      	asrs	r7, r3, #16
 8007a94:	454d      	cmp	r5, r9
 8007a96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8007a9e:	d8e7      	bhi.n	8007a70 <__mdiff+0x7c>
 8007aa0:	1b2b      	subs	r3, r5, r4
 8007aa2:	3b15      	subs	r3, #21
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	3415      	adds	r4, #21
 8007aac:	42a5      	cmp	r5, r4
 8007aae:	bf38      	it	cc
 8007ab0:	2304      	movcc	r3, #4
 8007ab2:	4419      	add	r1, r3
 8007ab4:	4473      	add	r3, lr
 8007ab6:	469e      	mov	lr, r3
 8007ab8:	460d      	mov	r5, r1
 8007aba:	4565      	cmp	r5, ip
 8007abc:	d30e      	bcc.n	8007adc <__mdiff+0xe8>
 8007abe:	f10c 0203 	add.w	r2, ip, #3
 8007ac2:	1a52      	subs	r2, r2, r1
 8007ac4:	f022 0203 	bic.w	r2, r2, #3
 8007ac8:	3903      	subs	r1, #3
 8007aca:	458c      	cmp	ip, r1
 8007acc:	bf38      	it	cc
 8007ace:	2200      	movcc	r2, #0
 8007ad0:	441a      	add	r2, r3
 8007ad2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ad6:	b17b      	cbz	r3, 8007af8 <__mdiff+0x104>
 8007ad8:	6106      	str	r6, [r0, #16]
 8007ada:	e7a5      	b.n	8007a28 <__mdiff+0x34>
 8007adc:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ae0:	fa17 f488 	uxtah	r4, r7, r8
 8007ae4:	1422      	asrs	r2, r4, #16
 8007ae6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007aea:	b2a4      	uxth	r4, r4
 8007aec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007af0:	f84e 4b04 	str.w	r4, [lr], #4
 8007af4:	1417      	asrs	r7, r2, #16
 8007af6:	e7e0      	b.n	8007aba <__mdiff+0xc6>
 8007af8:	3e01      	subs	r6, #1
 8007afa:	e7ea      	b.n	8007ad2 <__mdiff+0xde>
 8007afc:	08008aa3 	.word	0x08008aa3
 8007b00:	08008b14 	.word	0x08008b14

08007b04 <__d2b>:
 8007b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b08:	4689      	mov	r9, r1
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	ec57 6b10 	vmov	r6, r7, d0
 8007b10:	4690      	mov	r8, r2
 8007b12:	f7ff fcd5 	bl	80074c0 <_Balloc>
 8007b16:	4604      	mov	r4, r0
 8007b18:	b930      	cbnz	r0, 8007b28 <__d2b+0x24>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b25      	ldr	r3, [pc, #148]	; (8007bb4 <__d2b+0xb0>)
 8007b1e:	4826      	ldr	r0, [pc, #152]	; (8007bb8 <__d2b+0xb4>)
 8007b20:	f240 310a 	movw	r1, #778	; 0x30a
 8007b24:	f000 fc20 	bl	8008368 <__assert_func>
 8007b28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b30:	bb35      	cbnz	r5, 8007b80 <__d2b+0x7c>
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	d028      	beq.n	8007b8a <__d2b+0x86>
 8007b38:	4668      	mov	r0, sp
 8007b3a:	9600      	str	r6, [sp, #0]
 8007b3c:	f7ff fd8c 	bl	8007658 <__lo0bits>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	b300      	cbz	r0, 8007b86 <__d2b+0x82>
 8007b44:	9a01      	ldr	r2, [sp, #4]
 8007b46:	f1c0 0320 	rsb	r3, r0, #32
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	40c2      	lsrs	r2, r0
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	61a3      	str	r3, [r4, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf14      	ite	ne
 8007b5e:	2202      	movne	r2, #2
 8007b60:	2201      	moveq	r2, #1
 8007b62:	6122      	str	r2, [r4, #16]
 8007b64:	b1d5      	cbz	r5, 8007b9c <__d2b+0x98>
 8007b66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b6a:	4405      	add	r5, r0
 8007b6c:	f8c9 5000 	str.w	r5, [r9]
 8007b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b74:	f8c8 0000 	str.w	r0, [r8]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	b003      	add	sp, #12
 8007b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b84:	e7d5      	b.n	8007b32 <__d2b+0x2e>
 8007b86:	6161      	str	r1, [r4, #20]
 8007b88:	e7e5      	b.n	8007b56 <__d2b+0x52>
 8007b8a:	a801      	add	r0, sp, #4
 8007b8c:	f7ff fd64 	bl	8007658 <__lo0bits>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	6163      	str	r3, [r4, #20]
 8007b94:	2201      	movs	r2, #1
 8007b96:	6122      	str	r2, [r4, #16]
 8007b98:	3020      	adds	r0, #32
 8007b9a:	e7e3      	b.n	8007b64 <__d2b+0x60>
 8007b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ba4:	f8c9 0000 	str.w	r0, [r9]
 8007ba8:	6918      	ldr	r0, [r3, #16]
 8007baa:	f7ff fd35 	bl	8007618 <__hi0bits>
 8007bae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bb2:	e7df      	b.n	8007b74 <__d2b+0x70>
 8007bb4:	08008aa3 	.word	0x08008aa3
 8007bb8:	08008b14 	.word	0x08008b14

08007bbc <_calloc_r>:
 8007bbc:	b513      	push	{r0, r1, r4, lr}
 8007bbe:	434a      	muls	r2, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	9201      	str	r2, [sp, #4]
 8007bc4:	f000 f85a 	bl	8007c7c <_malloc_r>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_calloc_r+0x18>
 8007bcc:	9a01      	ldr	r2, [sp, #4]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	f7fd fdf0 	bl	80057b4 <memset>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	b002      	add	sp, #8
 8007bd8:	bd10      	pop	{r4, pc}
	...

08007bdc <_free_r>:
 8007bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bde:	2900      	cmp	r1, #0
 8007be0:	d048      	beq.n	8007c74 <_free_r+0x98>
 8007be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be6:	9001      	str	r0, [sp, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f1a1 0404 	sub.w	r4, r1, #4
 8007bee:	bfb8      	it	lt
 8007bf0:	18e4      	addlt	r4, r4, r3
 8007bf2:	f000 fc59 	bl	80084a8 <__malloc_lock>
 8007bf6:	4a20      	ldr	r2, [pc, #128]	; (8007c78 <_free_r+0x9c>)
 8007bf8:	9801      	ldr	r0, [sp, #4]
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	b933      	cbnz	r3, 8007c0e <_free_r+0x32>
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	6014      	str	r4, [r2, #0]
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c0a:	f000 bc53 	b.w	80084b4 <__malloc_unlock>
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	d90b      	bls.n	8007c2a <_free_r+0x4e>
 8007c12:	6821      	ldr	r1, [r4, #0]
 8007c14:	1862      	adds	r2, r4, r1
 8007c16:	4293      	cmp	r3, r2
 8007c18:	bf04      	itt	eq
 8007c1a:	681a      	ldreq	r2, [r3, #0]
 8007c1c:	685b      	ldreq	r3, [r3, #4]
 8007c1e:	6063      	str	r3, [r4, #4]
 8007c20:	bf04      	itt	eq
 8007c22:	1852      	addeq	r2, r2, r1
 8007c24:	6022      	streq	r2, [r4, #0]
 8007c26:	602c      	str	r4, [r5, #0]
 8007c28:	e7ec      	b.n	8007c04 <_free_r+0x28>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b10b      	cbz	r3, 8007c34 <_free_r+0x58>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d9fa      	bls.n	8007c2a <_free_r+0x4e>
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	1855      	adds	r5, r2, r1
 8007c38:	42a5      	cmp	r5, r4
 8007c3a:	d10b      	bne.n	8007c54 <_free_r+0x78>
 8007c3c:	6824      	ldr	r4, [r4, #0]
 8007c3e:	4421      	add	r1, r4
 8007c40:	1854      	adds	r4, r2, r1
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	d1dd      	bne.n	8007c04 <_free_r+0x28>
 8007c48:	681c      	ldr	r4, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	4421      	add	r1, r4
 8007c50:	6011      	str	r1, [r2, #0]
 8007c52:	e7d7      	b.n	8007c04 <_free_r+0x28>
 8007c54:	d902      	bls.n	8007c5c <_free_r+0x80>
 8007c56:	230c      	movs	r3, #12
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	e7d3      	b.n	8007c04 <_free_r+0x28>
 8007c5c:	6825      	ldr	r5, [r4, #0]
 8007c5e:	1961      	adds	r1, r4, r5
 8007c60:	428b      	cmp	r3, r1
 8007c62:	bf04      	itt	eq
 8007c64:	6819      	ldreq	r1, [r3, #0]
 8007c66:	685b      	ldreq	r3, [r3, #4]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	bf04      	itt	eq
 8007c6c:	1949      	addeq	r1, r1, r5
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	6054      	str	r4, [r2, #4]
 8007c72:	e7c7      	b.n	8007c04 <_free_r+0x28>
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	200001fc 	.word	0x200001fc

08007c7c <_malloc_r>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	1ccd      	adds	r5, r1, #3
 8007c80:	f025 0503 	bic.w	r5, r5, #3
 8007c84:	3508      	adds	r5, #8
 8007c86:	2d0c      	cmp	r5, #12
 8007c88:	bf38      	it	cc
 8007c8a:	250c      	movcc	r5, #12
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	4606      	mov	r6, r0
 8007c90:	db01      	blt.n	8007c96 <_malloc_r+0x1a>
 8007c92:	42a9      	cmp	r1, r5
 8007c94:	d903      	bls.n	8007c9e <_malloc_r+0x22>
 8007c96:	230c      	movs	r3, #12
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9e:	f000 fc03 	bl	80084a8 <__malloc_lock>
 8007ca2:	4921      	ldr	r1, [pc, #132]	; (8007d28 <_malloc_r+0xac>)
 8007ca4:	680a      	ldr	r2, [r1, #0]
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	b99c      	cbnz	r4, 8007cd2 <_malloc_r+0x56>
 8007caa:	4f20      	ldr	r7, [pc, #128]	; (8007d2c <_malloc_r+0xb0>)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	b923      	cbnz	r3, 8007cba <_malloc_r+0x3e>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 faf2 	bl	800829c <_sbrk_r>
 8007cb8:	6038      	str	r0, [r7, #0]
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 faed 	bl	800829c <_sbrk_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d123      	bne.n	8007d0e <_malloc_r+0x92>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f000 fbf2 	bl	80084b4 <__malloc_unlock>
 8007cd0:	e7e3      	b.n	8007c9a <_malloc_r+0x1e>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	1b5b      	subs	r3, r3, r5
 8007cd6:	d417      	bmi.n	8007d08 <_malloc_r+0x8c>
 8007cd8:	2b0b      	cmp	r3, #11
 8007cda:	d903      	bls.n	8007ce4 <_malloc_r+0x68>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	441c      	add	r4, r3
 8007ce0:	6025      	str	r5, [r4, #0]
 8007ce2:	e004      	b.n	8007cee <_malloc_r+0x72>
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	42a2      	cmp	r2, r4
 8007ce8:	bf0c      	ite	eq
 8007cea:	600b      	streq	r3, [r1, #0]
 8007cec:	6053      	strne	r3, [r2, #4]
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f000 fbe0 	bl	80084b4 <__malloc_unlock>
 8007cf4:	f104 000b 	add.w	r0, r4, #11
 8007cf8:	1d23      	adds	r3, r4, #4
 8007cfa:	f020 0007 	bic.w	r0, r0, #7
 8007cfe:	1ac2      	subs	r2, r0, r3
 8007d00:	d0cc      	beq.n	8007c9c <_malloc_r+0x20>
 8007d02:	1a1b      	subs	r3, r3, r0
 8007d04:	50a3      	str	r3, [r4, r2]
 8007d06:	e7c9      	b.n	8007c9c <_malloc_r+0x20>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	6864      	ldr	r4, [r4, #4]
 8007d0c:	e7cc      	b.n	8007ca8 <_malloc_r+0x2c>
 8007d0e:	1cc4      	adds	r4, r0, #3
 8007d10:	f024 0403 	bic.w	r4, r4, #3
 8007d14:	42a0      	cmp	r0, r4
 8007d16:	d0e3      	beq.n	8007ce0 <_malloc_r+0x64>
 8007d18:	1a21      	subs	r1, r4, r0
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 fabe 	bl	800829c <_sbrk_r>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d1dd      	bne.n	8007ce0 <_malloc_r+0x64>
 8007d24:	e7cf      	b.n	8007cc6 <_malloc_r+0x4a>
 8007d26:	bf00      	nop
 8007d28:	200001fc 	.word	0x200001fc
 8007d2c:	20000200 	.word	0x20000200

08007d30 <__ssputs_r>:
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	688e      	ldr	r6, [r1, #8]
 8007d36:	429e      	cmp	r6, r3
 8007d38:	4682      	mov	sl, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	4690      	mov	r8, r2
 8007d3e:	461f      	mov	r7, r3
 8007d40:	d838      	bhi.n	8007db4 <__ssputs_r+0x84>
 8007d42:	898a      	ldrh	r2, [r1, #12]
 8007d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d48:	d032      	beq.n	8007db0 <__ssputs_r+0x80>
 8007d4a:	6825      	ldr	r5, [r4, #0]
 8007d4c:	6909      	ldr	r1, [r1, #16]
 8007d4e:	eba5 0901 	sub.w	r9, r5, r1
 8007d52:	6965      	ldr	r5, [r4, #20]
 8007d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	444b      	add	r3, r9
 8007d60:	106d      	asrs	r5, r5, #1
 8007d62:	429d      	cmp	r5, r3
 8007d64:	bf38      	it	cc
 8007d66:	461d      	movcc	r5, r3
 8007d68:	0553      	lsls	r3, r2, #21
 8007d6a:	d531      	bpl.n	8007dd0 <__ssputs_r+0xa0>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f7ff ff85 	bl	8007c7c <_malloc_r>
 8007d72:	4606      	mov	r6, r0
 8007d74:	b950      	cbnz	r0, 8007d8c <__ssputs_r+0x5c>
 8007d76:	230c      	movs	r3, #12
 8007d78:	f8ca 3000 	str.w	r3, [sl]
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	6921      	ldr	r1, [r4, #16]
 8007d8e:	464a      	mov	r2, r9
 8007d90:	f7fd fd02 	bl	8005798 <memcpy>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	6126      	str	r6, [r4, #16]
 8007da2:	6165      	str	r5, [r4, #20]
 8007da4:	444e      	add	r6, r9
 8007da6:	eba5 0509 	sub.w	r5, r5, r9
 8007daa:	6026      	str	r6, [r4, #0]
 8007dac:	60a5      	str	r5, [r4, #8]
 8007dae:	463e      	mov	r6, r7
 8007db0:	42be      	cmp	r6, r7
 8007db2:	d900      	bls.n	8007db6 <__ssputs_r+0x86>
 8007db4:	463e      	mov	r6, r7
 8007db6:	4632      	mov	r2, r6
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	4641      	mov	r1, r8
 8007dbc:	f000 fb5a 	bl	8008474 <memmove>
 8007dc0:	68a3      	ldr	r3, [r4, #8]
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	1b9b      	subs	r3, r3, r6
 8007dc6:	4432      	add	r2, r6
 8007dc8:	60a3      	str	r3, [r4, #8]
 8007dca:	6022      	str	r2, [r4, #0]
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7db      	b.n	8007d88 <__ssputs_r+0x58>
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	f000 fb75 	bl	80084c0 <_realloc_r>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d1e1      	bne.n	8007da0 <__ssputs_r+0x70>
 8007ddc:	6921      	ldr	r1, [r4, #16]
 8007dde:	4650      	mov	r0, sl
 8007de0:	f7ff fefc 	bl	8007bdc <_free_r>
 8007de4:	e7c7      	b.n	8007d76 <__ssputs_r+0x46>
	...

08007de8 <_svfiprintf_r>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	4698      	mov	r8, r3
 8007dee:	898b      	ldrh	r3, [r1, #12]
 8007df0:	061b      	lsls	r3, r3, #24
 8007df2:	b09d      	sub	sp, #116	; 0x74
 8007df4:	4607      	mov	r7, r0
 8007df6:	460d      	mov	r5, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	d50e      	bpl.n	8007e1a <_svfiprintf_r+0x32>
 8007dfc:	690b      	ldr	r3, [r1, #16]
 8007dfe:	b963      	cbnz	r3, 8007e1a <_svfiprintf_r+0x32>
 8007e00:	2140      	movs	r1, #64	; 0x40
 8007e02:	f7ff ff3b 	bl	8007c7c <_malloc_r>
 8007e06:	6028      	str	r0, [r5, #0]
 8007e08:	6128      	str	r0, [r5, #16]
 8007e0a:	b920      	cbnz	r0, 8007e16 <_svfiprintf_r+0x2e>
 8007e0c:	230c      	movs	r3, #12
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e14:	e0d1      	b.n	8007fba <_svfiprintf_r+0x1d2>
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	616b      	str	r3, [r5, #20]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1e:	2320      	movs	r3, #32
 8007e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e28:	2330      	movs	r3, #48	; 0x30
 8007e2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fd4 <_svfiprintf_r+0x1ec>
 8007e2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e32:	f04f 0901 	mov.w	r9, #1
 8007e36:	4623      	mov	r3, r4
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3e:	b10a      	cbz	r2, 8007e44 <_svfiprintf_r+0x5c>
 8007e40:	2a25      	cmp	r2, #37	; 0x25
 8007e42:	d1f9      	bne.n	8007e38 <_svfiprintf_r+0x50>
 8007e44:	ebba 0b04 	subs.w	fp, sl, r4
 8007e48:	d00b      	beq.n	8007e62 <_svfiprintf_r+0x7a>
 8007e4a:	465b      	mov	r3, fp
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff ff6d 	bl	8007d30 <__ssputs_r>
 8007e56:	3001      	adds	r0, #1
 8007e58:	f000 80aa 	beq.w	8007fb0 <_svfiprintf_r+0x1c8>
 8007e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e5e:	445a      	add	r2, fp
 8007e60:	9209      	str	r2, [sp, #36]	; 0x24
 8007e62:	f89a 3000 	ldrb.w	r3, [sl]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80a2 	beq.w	8007fb0 <_svfiprintf_r+0x1c8>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e76:	f10a 0a01 	add.w	sl, sl, #1
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	9307      	str	r3, [sp, #28]
 8007e7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e82:	931a      	str	r3, [sp, #104]	; 0x68
 8007e84:	4654      	mov	r4, sl
 8007e86:	2205      	movs	r2, #5
 8007e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8c:	4851      	ldr	r0, [pc, #324]	; (8007fd4 <_svfiprintf_r+0x1ec>)
 8007e8e:	f7f8 f9a7 	bl	80001e0 <memchr>
 8007e92:	9a04      	ldr	r2, [sp, #16]
 8007e94:	b9d8      	cbnz	r0, 8007ece <_svfiprintf_r+0xe6>
 8007e96:	06d0      	lsls	r0, r2, #27
 8007e98:	bf44      	itt	mi
 8007e9a:	2320      	movmi	r3, #32
 8007e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea0:	0711      	lsls	r1, r2, #28
 8007ea2:	bf44      	itt	mi
 8007ea4:	232b      	movmi	r3, #43	; 0x2b
 8007ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007eae:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb0:	d015      	beq.n	8007ede <_svfiprintf_r+0xf6>
 8007eb2:	9a07      	ldr	r2, [sp, #28]
 8007eb4:	4654      	mov	r4, sl
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	f04f 0c0a 	mov.w	ip, #10
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ec2:	3b30      	subs	r3, #48	; 0x30
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d94e      	bls.n	8007f66 <_svfiprintf_r+0x17e>
 8007ec8:	b1b0      	cbz	r0, 8007ef8 <_svfiprintf_r+0x110>
 8007eca:	9207      	str	r2, [sp, #28]
 8007ecc:	e014      	b.n	8007ef8 <_svfiprintf_r+0x110>
 8007ece:	eba0 0308 	sub.w	r3, r0, r8
 8007ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	46a2      	mov	sl, r4
 8007edc:	e7d2      	b.n	8007e84 <_svfiprintf_r+0x9c>
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	1d19      	adds	r1, r3, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfbb      	ittet	lt
 8007eea:	425b      	neglt	r3, r3
 8007eec:	f042 0202 	orrlt.w	r2, r2, #2
 8007ef0:	9307      	strge	r3, [sp, #28]
 8007ef2:	9307      	strlt	r3, [sp, #28]
 8007ef4:	bfb8      	it	lt
 8007ef6:	9204      	strlt	r2, [sp, #16]
 8007ef8:	7823      	ldrb	r3, [r4, #0]
 8007efa:	2b2e      	cmp	r3, #46	; 0x2e
 8007efc:	d10c      	bne.n	8007f18 <_svfiprintf_r+0x130>
 8007efe:	7863      	ldrb	r3, [r4, #1]
 8007f00:	2b2a      	cmp	r3, #42	; 0x2a
 8007f02:	d135      	bne.n	8007f70 <_svfiprintf_r+0x188>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	9203      	str	r2, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bfb8      	it	lt
 8007f10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f14:	3402      	adds	r4, #2
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fe4 <_svfiprintf_r+0x1fc>
 8007f1c:	7821      	ldrb	r1, [r4, #0]
 8007f1e:	2203      	movs	r2, #3
 8007f20:	4650      	mov	r0, sl
 8007f22:	f7f8 f95d 	bl	80001e0 <memchr>
 8007f26:	b140      	cbz	r0, 8007f3a <_svfiprintf_r+0x152>
 8007f28:	2340      	movs	r3, #64	; 0x40
 8007f2a:	eba0 000a 	sub.w	r0, r0, sl
 8007f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	4303      	orrs	r3, r0
 8007f36:	3401      	adds	r4, #1
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3e:	4826      	ldr	r0, [pc, #152]	; (8007fd8 <_svfiprintf_r+0x1f0>)
 8007f40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f44:	2206      	movs	r2, #6
 8007f46:	f7f8 f94b 	bl	80001e0 <memchr>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d038      	beq.n	8007fc0 <_svfiprintf_r+0x1d8>
 8007f4e:	4b23      	ldr	r3, [pc, #140]	; (8007fdc <_svfiprintf_r+0x1f4>)
 8007f50:	bb1b      	cbnz	r3, 8007f9a <_svfiprintf_r+0x1b2>
 8007f52:	9b03      	ldr	r3, [sp, #12]
 8007f54:	3307      	adds	r3, #7
 8007f56:	f023 0307 	bic.w	r3, r3, #7
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	9303      	str	r3, [sp, #12]
 8007f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f60:	4433      	add	r3, r6
 8007f62:	9309      	str	r3, [sp, #36]	; 0x24
 8007f64:	e767      	b.n	8007e36 <_svfiprintf_r+0x4e>
 8007f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	e7a5      	b.n	8007ebc <_svfiprintf_r+0xd4>
 8007f70:	2300      	movs	r3, #0
 8007f72:	3401      	adds	r4, #1
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	4619      	mov	r1, r3
 8007f78:	f04f 0c0a 	mov.w	ip, #10
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f82:	3a30      	subs	r2, #48	; 0x30
 8007f84:	2a09      	cmp	r2, #9
 8007f86:	d903      	bls.n	8007f90 <_svfiprintf_r+0x1a8>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0c5      	beq.n	8007f18 <_svfiprintf_r+0x130>
 8007f8c:	9105      	str	r1, [sp, #20]
 8007f8e:	e7c3      	b.n	8007f18 <_svfiprintf_r+0x130>
 8007f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f94:	4604      	mov	r4, r0
 8007f96:	2301      	movs	r3, #1
 8007f98:	e7f0      	b.n	8007f7c <_svfiprintf_r+0x194>
 8007f9a:	ab03      	add	r3, sp, #12
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	462a      	mov	r2, r5
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <_svfiprintf_r+0x1f8>)
 8007fa2:	a904      	add	r1, sp, #16
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f7fd fcad 	bl	8005904 <_printf_float>
 8007faa:	1c42      	adds	r2, r0, #1
 8007fac:	4606      	mov	r6, r0
 8007fae:	d1d6      	bne.n	8007f5e <_svfiprintf_r+0x176>
 8007fb0:	89ab      	ldrh	r3, [r5, #12]
 8007fb2:	065b      	lsls	r3, r3, #25
 8007fb4:	f53f af2c 	bmi.w	8007e10 <_svfiprintf_r+0x28>
 8007fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fba:	b01d      	add	sp, #116	; 0x74
 8007fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc0:	ab03      	add	r3, sp, #12
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <_svfiprintf_r+0x1f8>)
 8007fc8:	a904      	add	r1, sp, #16
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f7fd ff3e 	bl	8005e4c <_printf_i>
 8007fd0:	e7eb      	b.n	8007faa <_svfiprintf_r+0x1c2>
 8007fd2:	bf00      	nop
 8007fd4:	08008c74 	.word	0x08008c74
 8007fd8:	08008c7e 	.word	0x08008c7e
 8007fdc:	08005905 	.word	0x08005905
 8007fe0:	08007d31 	.word	0x08007d31
 8007fe4:	08008c7a 	.word	0x08008c7a

08007fe8 <__sfputc_r>:
 8007fe8:	6893      	ldr	r3, [r2, #8]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	b410      	push	{r4}
 8007ff0:	6093      	str	r3, [r2, #8]
 8007ff2:	da08      	bge.n	8008006 <__sfputc_r+0x1e>
 8007ff4:	6994      	ldr	r4, [r2, #24]
 8007ff6:	42a3      	cmp	r3, r4
 8007ff8:	db01      	blt.n	8007ffe <__sfputc_r+0x16>
 8007ffa:	290a      	cmp	r1, #10
 8007ffc:	d103      	bne.n	8008006 <__sfputc_r+0x1e>
 8007ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008002:	f7fe b8f7 	b.w	80061f4 <__swbuf_r>
 8008006:	6813      	ldr	r3, [r2, #0]
 8008008:	1c58      	adds	r0, r3, #1
 800800a:	6010      	str	r0, [r2, #0]
 800800c:	7019      	strb	r1, [r3, #0]
 800800e:	4608      	mov	r0, r1
 8008010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008014:	4770      	bx	lr

08008016 <__sfputs_r>:
 8008016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008018:	4606      	mov	r6, r0
 800801a:	460f      	mov	r7, r1
 800801c:	4614      	mov	r4, r2
 800801e:	18d5      	adds	r5, r2, r3
 8008020:	42ac      	cmp	r4, r5
 8008022:	d101      	bne.n	8008028 <__sfputs_r+0x12>
 8008024:	2000      	movs	r0, #0
 8008026:	e007      	b.n	8008038 <__sfputs_r+0x22>
 8008028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802c:	463a      	mov	r2, r7
 800802e:	4630      	mov	r0, r6
 8008030:	f7ff ffda 	bl	8007fe8 <__sfputc_r>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d1f3      	bne.n	8008020 <__sfputs_r+0xa>
 8008038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800803c <_vfiprintf_r>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	460d      	mov	r5, r1
 8008042:	b09d      	sub	sp, #116	; 0x74
 8008044:	4614      	mov	r4, r2
 8008046:	4698      	mov	r8, r3
 8008048:	4606      	mov	r6, r0
 800804a:	b118      	cbz	r0, 8008054 <_vfiprintf_r+0x18>
 800804c:	6983      	ldr	r3, [r0, #24]
 800804e:	b90b      	cbnz	r3, 8008054 <_vfiprintf_r+0x18>
 8008050:	f7ff f924 	bl	800729c <__sinit>
 8008054:	4b89      	ldr	r3, [pc, #548]	; (800827c <_vfiprintf_r+0x240>)
 8008056:	429d      	cmp	r5, r3
 8008058:	d11b      	bne.n	8008092 <_vfiprintf_r+0x56>
 800805a:	6875      	ldr	r5, [r6, #4]
 800805c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800805e:	07d9      	lsls	r1, r3, #31
 8008060:	d405      	bmi.n	800806e <_vfiprintf_r+0x32>
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	059a      	lsls	r2, r3, #22
 8008066:	d402      	bmi.n	800806e <_vfiprintf_r+0x32>
 8008068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806a:	f7ff f9ba 	bl	80073e2 <__retarget_lock_acquire_recursive>
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	071b      	lsls	r3, r3, #28
 8008072:	d501      	bpl.n	8008078 <_vfiprintf_r+0x3c>
 8008074:	692b      	ldr	r3, [r5, #16]
 8008076:	b9eb      	cbnz	r3, 80080b4 <_vfiprintf_r+0x78>
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7fe f90c 	bl	8006298 <__swsetup_r>
 8008080:	b1c0      	cbz	r0, 80080b4 <_vfiprintf_r+0x78>
 8008082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008084:	07dc      	lsls	r4, r3, #31
 8008086:	d50e      	bpl.n	80080a6 <_vfiprintf_r+0x6a>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800808c:	b01d      	add	sp, #116	; 0x74
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	4b7b      	ldr	r3, [pc, #492]	; (8008280 <_vfiprintf_r+0x244>)
 8008094:	429d      	cmp	r5, r3
 8008096:	d101      	bne.n	800809c <_vfiprintf_r+0x60>
 8008098:	68b5      	ldr	r5, [r6, #8]
 800809a:	e7df      	b.n	800805c <_vfiprintf_r+0x20>
 800809c:	4b79      	ldr	r3, [pc, #484]	; (8008284 <_vfiprintf_r+0x248>)
 800809e:	429d      	cmp	r5, r3
 80080a0:	bf08      	it	eq
 80080a2:	68f5      	ldreq	r5, [r6, #12]
 80080a4:	e7da      	b.n	800805c <_vfiprintf_r+0x20>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	0598      	lsls	r0, r3, #22
 80080aa:	d4ed      	bmi.n	8008088 <_vfiprintf_r+0x4c>
 80080ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ae:	f7ff f999 	bl	80073e4 <__retarget_lock_release_recursive>
 80080b2:	e7e9      	b.n	8008088 <_vfiprintf_r+0x4c>
 80080b4:	2300      	movs	r3, #0
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
 80080b8:	2320      	movs	r3, #32
 80080ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080be:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c2:	2330      	movs	r3, #48	; 0x30
 80080c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008288 <_vfiprintf_r+0x24c>
 80080c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080cc:	f04f 0901 	mov.w	r9, #1
 80080d0:	4623      	mov	r3, r4
 80080d2:	469a      	mov	sl, r3
 80080d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d8:	b10a      	cbz	r2, 80080de <_vfiprintf_r+0xa2>
 80080da:	2a25      	cmp	r2, #37	; 0x25
 80080dc:	d1f9      	bne.n	80080d2 <_vfiprintf_r+0x96>
 80080de:	ebba 0b04 	subs.w	fp, sl, r4
 80080e2:	d00b      	beq.n	80080fc <_vfiprintf_r+0xc0>
 80080e4:	465b      	mov	r3, fp
 80080e6:	4622      	mov	r2, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff ff93 	bl	8008016 <__sfputs_r>
 80080f0:	3001      	adds	r0, #1
 80080f2:	f000 80aa 	beq.w	800824a <_vfiprintf_r+0x20e>
 80080f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f8:	445a      	add	r2, fp
 80080fa:	9209      	str	r2, [sp, #36]	; 0x24
 80080fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 80a2 	beq.w	800824a <_vfiprintf_r+0x20e>
 8008106:	2300      	movs	r3, #0
 8008108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800810c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008110:	f10a 0a01 	add.w	sl, sl, #1
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800811c:	931a      	str	r3, [sp, #104]	; 0x68
 800811e:	4654      	mov	r4, sl
 8008120:	2205      	movs	r2, #5
 8008122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008126:	4858      	ldr	r0, [pc, #352]	; (8008288 <_vfiprintf_r+0x24c>)
 8008128:	f7f8 f85a 	bl	80001e0 <memchr>
 800812c:	9a04      	ldr	r2, [sp, #16]
 800812e:	b9d8      	cbnz	r0, 8008168 <_vfiprintf_r+0x12c>
 8008130:	06d1      	lsls	r1, r2, #27
 8008132:	bf44      	itt	mi
 8008134:	2320      	movmi	r3, #32
 8008136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813a:	0713      	lsls	r3, r2, #28
 800813c:	bf44      	itt	mi
 800813e:	232b      	movmi	r3, #43	; 0x2b
 8008140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008144:	f89a 3000 	ldrb.w	r3, [sl]
 8008148:	2b2a      	cmp	r3, #42	; 0x2a
 800814a:	d015      	beq.n	8008178 <_vfiprintf_r+0x13c>
 800814c:	9a07      	ldr	r2, [sp, #28]
 800814e:	4654      	mov	r4, sl
 8008150:	2000      	movs	r0, #0
 8008152:	f04f 0c0a 	mov.w	ip, #10
 8008156:	4621      	mov	r1, r4
 8008158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815c:	3b30      	subs	r3, #48	; 0x30
 800815e:	2b09      	cmp	r3, #9
 8008160:	d94e      	bls.n	8008200 <_vfiprintf_r+0x1c4>
 8008162:	b1b0      	cbz	r0, 8008192 <_vfiprintf_r+0x156>
 8008164:	9207      	str	r2, [sp, #28]
 8008166:	e014      	b.n	8008192 <_vfiprintf_r+0x156>
 8008168:	eba0 0308 	sub.w	r3, r0, r8
 800816c:	fa09 f303 	lsl.w	r3, r9, r3
 8008170:	4313      	orrs	r3, r2
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	46a2      	mov	sl, r4
 8008176:	e7d2      	b.n	800811e <_vfiprintf_r+0xe2>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	1d19      	adds	r1, r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	9103      	str	r1, [sp, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfbb      	ittet	lt
 8008184:	425b      	neglt	r3, r3
 8008186:	f042 0202 	orrlt.w	r2, r2, #2
 800818a:	9307      	strge	r3, [sp, #28]
 800818c:	9307      	strlt	r3, [sp, #28]
 800818e:	bfb8      	it	lt
 8008190:	9204      	strlt	r2, [sp, #16]
 8008192:	7823      	ldrb	r3, [r4, #0]
 8008194:	2b2e      	cmp	r3, #46	; 0x2e
 8008196:	d10c      	bne.n	80081b2 <_vfiprintf_r+0x176>
 8008198:	7863      	ldrb	r3, [r4, #1]
 800819a:	2b2a      	cmp	r3, #42	; 0x2a
 800819c:	d135      	bne.n	800820a <_vfiprintf_r+0x1ce>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	1d1a      	adds	r2, r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	9203      	str	r2, [sp, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfb8      	it	lt
 80081aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081ae:	3402      	adds	r4, #2
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008298 <_vfiprintf_r+0x25c>
 80081b6:	7821      	ldrb	r1, [r4, #0]
 80081b8:	2203      	movs	r2, #3
 80081ba:	4650      	mov	r0, sl
 80081bc:	f7f8 f810 	bl	80001e0 <memchr>
 80081c0:	b140      	cbz	r0, 80081d4 <_vfiprintf_r+0x198>
 80081c2:	2340      	movs	r3, #64	; 0x40
 80081c4:	eba0 000a 	sub.w	r0, r0, sl
 80081c8:	fa03 f000 	lsl.w	r0, r3, r0
 80081cc:	9b04      	ldr	r3, [sp, #16]
 80081ce:	4303      	orrs	r3, r0
 80081d0:	3401      	adds	r4, #1
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d8:	482c      	ldr	r0, [pc, #176]	; (800828c <_vfiprintf_r+0x250>)
 80081da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081de:	2206      	movs	r2, #6
 80081e0:	f7f7 fffe 	bl	80001e0 <memchr>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d03f      	beq.n	8008268 <_vfiprintf_r+0x22c>
 80081e8:	4b29      	ldr	r3, [pc, #164]	; (8008290 <_vfiprintf_r+0x254>)
 80081ea:	bb1b      	cbnz	r3, 8008234 <_vfiprintf_r+0x1f8>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	3307      	adds	r3, #7
 80081f0:	f023 0307 	bic.w	r3, r3, #7
 80081f4:	3308      	adds	r3, #8
 80081f6:	9303      	str	r3, [sp, #12]
 80081f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fa:	443b      	add	r3, r7
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
 80081fe:	e767      	b.n	80080d0 <_vfiprintf_r+0x94>
 8008200:	fb0c 3202 	mla	r2, ip, r2, r3
 8008204:	460c      	mov	r4, r1
 8008206:	2001      	movs	r0, #1
 8008208:	e7a5      	b.n	8008156 <_vfiprintf_r+0x11a>
 800820a:	2300      	movs	r3, #0
 800820c:	3401      	adds	r4, #1
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	4619      	mov	r1, r3
 8008212:	f04f 0c0a 	mov.w	ip, #10
 8008216:	4620      	mov	r0, r4
 8008218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821c:	3a30      	subs	r2, #48	; 0x30
 800821e:	2a09      	cmp	r2, #9
 8008220:	d903      	bls.n	800822a <_vfiprintf_r+0x1ee>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0c5      	beq.n	80081b2 <_vfiprintf_r+0x176>
 8008226:	9105      	str	r1, [sp, #20]
 8008228:	e7c3      	b.n	80081b2 <_vfiprintf_r+0x176>
 800822a:	fb0c 2101 	mla	r1, ip, r1, r2
 800822e:	4604      	mov	r4, r0
 8008230:	2301      	movs	r3, #1
 8008232:	e7f0      	b.n	8008216 <_vfiprintf_r+0x1da>
 8008234:	ab03      	add	r3, sp, #12
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	462a      	mov	r2, r5
 800823a:	4b16      	ldr	r3, [pc, #88]	; (8008294 <_vfiprintf_r+0x258>)
 800823c:	a904      	add	r1, sp, #16
 800823e:	4630      	mov	r0, r6
 8008240:	f7fd fb60 	bl	8005904 <_printf_float>
 8008244:	4607      	mov	r7, r0
 8008246:	1c78      	adds	r0, r7, #1
 8008248:	d1d6      	bne.n	80081f8 <_vfiprintf_r+0x1bc>
 800824a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800824c:	07d9      	lsls	r1, r3, #31
 800824e:	d405      	bmi.n	800825c <_vfiprintf_r+0x220>
 8008250:	89ab      	ldrh	r3, [r5, #12]
 8008252:	059a      	lsls	r2, r3, #22
 8008254:	d402      	bmi.n	800825c <_vfiprintf_r+0x220>
 8008256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008258:	f7ff f8c4 	bl	80073e4 <__retarget_lock_release_recursive>
 800825c:	89ab      	ldrh	r3, [r5, #12]
 800825e:	065b      	lsls	r3, r3, #25
 8008260:	f53f af12 	bmi.w	8008088 <_vfiprintf_r+0x4c>
 8008264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008266:	e711      	b.n	800808c <_vfiprintf_r+0x50>
 8008268:	ab03      	add	r3, sp, #12
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	462a      	mov	r2, r5
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <_vfiprintf_r+0x258>)
 8008270:	a904      	add	r1, sp, #16
 8008272:	4630      	mov	r0, r6
 8008274:	f7fd fdea 	bl	8005e4c <_printf_i>
 8008278:	e7e4      	b.n	8008244 <_vfiprintf_r+0x208>
 800827a:	bf00      	nop
 800827c:	08008ad4 	.word	0x08008ad4
 8008280:	08008af4 	.word	0x08008af4
 8008284:	08008ab4 	.word	0x08008ab4
 8008288:	08008c74 	.word	0x08008c74
 800828c:	08008c7e 	.word	0x08008c7e
 8008290:	08005905 	.word	0x08005905
 8008294:	08008017 	.word	0x08008017
 8008298:	08008c7a 	.word	0x08008c7a

0800829c <_sbrk_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d06      	ldr	r5, [pc, #24]	; (80082b8 <_sbrk_r+0x1c>)
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	f7fa fb54 	bl	8002954 <_sbrk>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_sbrk_r+0x1a>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_sbrk_r+0x1a>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	20000378 	.word	0x20000378

080082bc <__sread>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	460c      	mov	r4, r1
 80082c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c4:	f000 f922 	bl	800850c <_read_r>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	bfab      	itete	ge
 80082cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ce:	89a3      	ldrhlt	r3, [r4, #12]
 80082d0:	181b      	addge	r3, r3, r0
 80082d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082d6:	bfac      	ite	ge
 80082d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80082da:	81a3      	strhlt	r3, [r4, #12]
 80082dc:	bd10      	pop	{r4, pc}

080082de <__swrite>:
 80082de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e2:	461f      	mov	r7, r3
 80082e4:	898b      	ldrh	r3, [r1, #12]
 80082e6:	05db      	lsls	r3, r3, #23
 80082e8:	4605      	mov	r5, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	4616      	mov	r6, r2
 80082ee:	d505      	bpl.n	80082fc <__swrite+0x1e>
 80082f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f4:	2302      	movs	r3, #2
 80082f6:	2200      	movs	r2, #0
 80082f8:	f000 f898 	bl	800842c <_lseek_r>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	4632      	mov	r2, r6
 800830a:	463b      	mov	r3, r7
 800830c:	4628      	mov	r0, r5
 800830e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008312:	f000 b817 	b.w	8008344 <_write_r>

08008316 <__sseek>:
 8008316:	b510      	push	{r4, lr}
 8008318:	460c      	mov	r4, r1
 800831a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831e:	f000 f885 	bl	800842c <_lseek_r>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	bf15      	itete	ne
 8008328:	6560      	strne	r0, [r4, #84]	; 0x54
 800832a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800832e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008332:	81a3      	strheq	r3, [r4, #12]
 8008334:	bf18      	it	ne
 8008336:	81a3      	strhne	r3, [r4, #12]
 8008338:	bd10      	pop	{r4, pc}

0800833a <__sclose>:
 800833a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833e:	f000 b831 	b.w	80083a4 <_close_r>
	...

08008344 <_write_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	; (8008364 <_write_r+0x20>)
 8008348:	4604      	mov	r4, r0
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	2200      	movs	r2, #0
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f7fa faad 	bl	80028b2 <_write>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_write_r+0x1e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_write_r+0x1e>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000378 	.word	0x20000378

08008368 <__assert_func>:
 8008368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800836a:	4614      	mov	r4, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <__assert_func+0x2c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4605      	mov	r5, r0
 8008374:	68d8      	ldr	r0, [r3, #12]
 8008376:	b14c      	cbz	r4, 800838c <__assert_func+0x24>
 8008378:	4b07      	ldr	r3, [pc, #28]	; (8008398 <__assert_func+0x30>)
 800837a:	9100      	str	r1, [sp, #0]
 800837c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008380:	4906      	ldr	r1, [pc, #24]	; (800839c <__assert_func+0x34>)
 8008382:	462b      	mov	r3, r5
 8008384:	f000 f81e 	bl	80083c4 <fiprintf>
 8008388:	f000 f8df 	bl	800854a <abort>
 800838c:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <__assert_func+0x38>)
 800838e:	461c      	mov	r4, r3
 8008390:	e7f3      	b.n	800837a <__assert_func+0x12>
 8008392:	bf00      	nop
 8008394:	2000000c 	.word	0x2000000c
 8008398:	08008c85 	.word	0x08008c85
 800839c:	08008c92 	.word	0x08008c92
 80083a0:	08008cc0 	.word	0x08008cc0

080083a4 <_close_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d06      	ldr	r5, [pc, #24]	; (80083c0 <_close_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	f7fa fa9b 	bl	80028ea <_close>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_close_r+0x1a>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_close_r+0x1a>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	20000378 	.word	0x20000378

080083c4 <fiprintf>:
 80083c4:	b40e      	push	{r1, r2, r3}
 80083c6:	b503      	push	{r0, r1, lr}
 80083c8:	4601      	mov	r1, r0
 80083ca:	ab03      	add	r3, sp, #12
 80083cc:	4805      	ldr	r0, [pc, #20]	; (80083e4 <fiprintf+0x20>)
 80083ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d2:	6800      	ldr	r0, [r0, #0]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	f7ff fe31 	bl	800803c <_vfiprintf_r>
 80083da:	b002      	add	sp, #8
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	2000000c 	.word	0x2000000c

080083e8 <_fstat_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	; (8008408 <_fstat_r+0x20>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	602b      	str	r3, [r5, #0]
 80083f6:	f7fa fa84 	bl	8002902 <_fstat>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	d102      	bne.n	8008404 <_fstat_r+0x1c>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	b103      	cbz	r3, 8008404 <_fstat_r+0x1c>
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20000378 	.word	0x20000378

0800840c <_isatty_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d06      	ldr	r5, [pc, #24]	; (8008428 <_isatty_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	f7fa fa83 	bl	8002922 <_isatty>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_isatty_r+0x1a>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_isatty_r+0x1a>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20000378 	.word	0x20000378

0800842c <_lseek_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	; (800844c <_lseek_r+0x20>)
 8008430:	4604      	mov	r4, r0
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	2200      	movs	r2, #0
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7fa fa7c 	bl	8002938 <_lseek>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_lseek_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_lseek_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000378 	.word	0x20000378

08008450 <__ascii_mbtowc>:
 8008450:	b082      	sub	sp, #8
 8008452:	b901      	cbnz	r1, 8008456 <__ascii_mbtowc+0x6>
 8008454:	a901      	add	r1, sp, #4
 8008456:	b142      	cbz	r2, 800846a <__ascii_mbtowc+0x1a>
 8008458:	b14b      	cbz	r3, 800846e <__ascii_mbtowc+0x1e>
 800845a:	7813      	ldrb	r3, [r2, #0]
 800845c:	600b      	str	r3, [r1, #0]
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	1e10      	subs	r0, r2, #0
 8008462:	bf18      	it	ne
 8008464:	2001      	movne	r0, #1
 8008466:	b002      	add	sp, #8
 8008468:	4770      	bx	lr
 800846a:	4610      	mov	r0, r2
 800846c:	e7fb      	b.n	8008466 <__ascii_mbtowc+0x16>
 800846e:	f06f 0001 	mvn.w	r0, #1
 8008472:	e7f8      	b.n	8008466 <__ascii_mbtowc+0x16>

08008474 <memmove>:
 8008474:	4288      	cmp	r0, r1
 8008476:	b510      	push	{r4, lr}
 8008478:	eb01 0402 	add.w	r4, r1, r2
 800847c:	d902      	bls.n	8008484 <memmove+0x10>
 800847e:	4284      	cmp	r4, r0
 8008480:	4623      	mov	r3, r4
 8008482:	d807      	bhi.n	8008494 <memmove+0x20>
 8008484:	1e43      	subs	r3, r0, #1
 8008486:	42a1      	cmp	r1, r4
 8008488:	d008      	beq.n	800849c <memmove+0x28>
 800848a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800848e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008492:	e7f8      	b.n	8008486 <memmove+0x12>
 8008494:	4402      	add	r2, r0
 8008496:	4601      	mov	r1, r0
 8008498:	428a      	cmp	r2, r1
 800849a:	d100      	bne.n	800849e <memmove+0x2a>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084a6:	e7f7      	b.n	8008498 <memmove+0x24>

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__malloc_lock+0x8>)
 80084aa:	f7fe bf9a 	b.w	80073e2 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	20000370 	.word	0x20000370

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__malloc_unlock+0x8>)
 80084b6:	f7fe bf95 	b.w	80073e4 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	20000370 	.word	0x20000370

080084c0 <_realloc_r>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	4607      	mov	r7, r0
 80084c4:	4614      	mov	r4, r2
 80084c6:	460e      	mov	r6, r1
 80084c8:	b921      	cbnz	r1, 80084d4 <_realloc_r+0x14>
 80084ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084ce:	4611      	mov	r1, r2
 80084d0:	f7ff bbd4 	b.w	8007c7c <_malloc_r>
 80084d4:	b922      	cbnz	r2, 80084e0 <_realloc_r+0x20>
 80084d6:	f7ff fb81 	bl	8007bdc <_free_r>
 80084da:	4625      	mov	r5, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e0:	f000 f83a 	bl	8008558 <_malloc_usable_size_r>
 80084e4:	42a0      	cmp	r0, r4
 80084e6:	d20f      	bcs.n	8008508 <_realloc_r+0x48>
 80084e8:	4621      	mov	r1, r4
 80084ea:	4638      	mov	r0, r7
 80084ec:	f7ff fbc6 	bl	8007c7c <_malloc_r>
 80084f0:	4605      	mov	r5, r0
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d0f2      	beq.n	80084dc <_realloc_r+0x1c>
 80084f6:	4631      	mov	r1, r6
 80084f8:	4622      	mov	r2, r4
 80084fa:	f7fd f94d 	bl	8005798 <memcpy>
 80084fe:	4631      	mov	r1, r6
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff fb6b 	bl	8007bdc <_free_r>
 8008506:	e7e9      	b.n	80084dc <_realloc_r+0x1c>
 8008508:	4635      	mov	r5, r6
 800850a:	e7e7      	b.n	80084dc <_realloc_r+0x1c>

0800850c <_read_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_read_r+0x20>)
 8008510:	4604      	mov	r4, r0
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f7fa f9ac 	bl	8002878 <_read>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_read_r+0x1e>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_read_r+0x1e>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20000378 	.word	0x20000378

08008530 <__ascii_wctomb>:
 8008530:	b149      	cbz	r1, 8008546 <__ascii_wctomb+0x16>
 8008532:	2aff      	cmp	r2, #255	; 0xff
 8008534:	bf85      	ittet	hi
 8008536:	238a      	movhi	r3, #138	; 0x8a
 8008538:	6003      	strhi	r3, [r0, #0]
 800853a:	700a      	strbls	r2, [r1, #0]
 800853c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008540:	bf98      	it	ls
 8008542:	2001      	movls	r0, #1
 8008544:	4770      	bx	lr
 8008546:	4608      	mov	r0, r1
 8008548:	4770      	bx	lr

0800854a <abort>:
 800854a:	b508      	push	{r3, lr}
 800854c:	2006      	movs	r0, #6
 800854e:	f000 f833 	bl	80085b8 <raise>
 8008552:	2001      	movs	r0, #1
 8008554:	f7fa f986 	bl	8002864 <_exit>

08008558 <_malloc_usable_size_r>:
 8008558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855c:	1f18      	subs	r0, r3, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfbc      	itt	lt
 8008562:	580b      	ldrlt	r3, [r1, r0]
 8008564:	18c0      	addlt	r0, r0, r3
 8008566:	4770      	bx	lr

08008568 <_raise_r>:
 8008568:	291f      	cmp	r1, #31
 800856a:	b538      	push	{r3, r4, r5, lr}
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	d904      	bls.n	800857c <_raise_r+0x14>
 8008572:	2316      	movs	r3, #22
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800857e:	b112      	cbz	r2, 8008586 <_raise_r+0x1e>
 8008580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008584:	b94b      	cbnz	r3, 800859a <_raise_r+0x32>
 8008586:	4620      	mov	r0, r4
 8008588:	f000 f830 	bl	80085ec <_getpid_r>
 800858c:	462a      	mov	r2, r5
 800858e:	4601      	mov	r1, r0
 8008590:	4620      	mov	r0, r4
 8008592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008596:	f000 b817 	b.w	80085c8 <_kill_r>
 800859a:	2b01      	cmp	r3, #1
 800859c:	d00a      	beq.n	80085b4 <_raise_r+0x4c>
 800859e:	1c59      	adds	r1, r3, #1
 80085a0:	d103      	bne.n	80085aa <_raise_r+0x42>
 80085a2:	2316      	movs	r3, #22
 80085a4:	6003      	str	r3, [r0, #0]
 80085a6:	2001      	movs	r0, #1
 80085a8:	e7e7      	b.n	800857a <_raise_r+0x12>
 80085aa:	2400      	movs	r4, #0
 80085ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085b0:	4628      	mov	r0, r5
 80085b2:	4798      	blx	r3
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7e0      	b.n	800857a <_raise_r+0x12>

080085b8 <raise>:
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <raise+0xc>)
 80085ba:	4601      	mov	r1, r0
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f7ff bfd3 	b.w	8008568 <_raise_r>
 80085c2:	bf00      	nop
 80085c4:	2000000c 	.word	0x2000000c

080085c8 <_kill_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_kill_r+0x20>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	4611      	mov	r1, r2
 80085d4:	602b      	str	r3, [r5, #0]
 80085d6:	f7fa f935 	bl	8002844 <_kill>
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d102      	bne.n	80085e4 <_kill_r+0x1c>
 80085de:	682b      	ldr	r3, [r5, #0]
 80085e0:	b103      	cbz	r3, 80085e4 <_kill_r+0x1c>
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	20000378 	.word	0x20000378

080085ec <_getpid_r>:
 80085ec:	f7fa b922 	b.w	8002834 <_getpid>

080085f0 <_init>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr

080085fc <_fini>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr
